// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// --------------------------------------------------------------------------------
// Tool Version: Vivado v.2019.2 (lin64) Build 2708876 Wed Nov  6 21:39:14 MST 2019
// Date        : Tue May 26 00:27:58 2020
// Host        : 8548f66808cb running 64-bit unknown
// Command     : write_verilog -force -mode funcsim -rename_top block_design_microblaze_0_0 -prefix
//               block_design_microblaze_0_0_ block_design_microblaze_0_0_sim_netlist.v
// Design      : block_design_microblaze_0_0
// Purpose     : This verilog netlist is a functional simulation representation of the design and should not be modified
//               or synthesized. This netlist cannot be used for SDF annotated simulation.
// Device      : xc7s50csga324-1
// --------------------------------------------------------------------------------
`timescale 1 ps / 1 ps

(* CHECK_LICENSE_TYPE = "block_design_microblaze_0_0,MicroBlaze,{}" *) (* downgradeipidentifiedwarnings = "yes" *) (* x_core_info = "MicroBlaze,Vivado 2019.2" *) 
(* NotValidForBitStream *)
module block_design_microblaze_0_0
   (Clk,
    Reset,
    Interrupt,
    Interrupt_Address,
    Interrupt_Ack,
    Ext_BRK,
    Ext_NM_BRK,
    Dbg_Stop,
    Dbg_Intr,
    MB_Halted,
    Wakeup,
    Sleep,
    Hibernate,
    Suspend,
    Dbg_Wakeup,
    Dbg_Continue,
    Reset_Mode,
    Pause,
    Pause_Ack,
    Non_Secure,
    Instr_Addr,
    Instr,
    IFetch,
    I_AS,
    IReady,
    IWAIT,
    ICE,
    IUE,
    Data_Addr,
    Data_Read,
    Data_Write,
    D_AS,
    Read_Strobe,
    Write_Strobe,
    DReady,
    DWait,
    DCE,
    DUE,
    Byte_Enable,
    M_AXI_DP_AWADDR,
    M_AXI_DP_AWPROT,
    M_AXI_DP_AWVALID,
    M_AXI_DP_AWREADY,
    M_AXI_DP_WDATA,
    M_AXI_DP_WSTRB,
    M_AXI_DP_WVALID,
    M_AXI_DP_WREADY,
    M_AXI_DP_BRESP,
    M_AXI_DP_BVALID,
    M_AXI_DP_BREADY,
    M_AXI_DP_ARADDR,
    M_AXI_DP_ARPROT,
    M_AXI_DP_ARVALID,
    M_AXI_DP_ARREADY,
    M_AXI_DP_RDATA,
    M_AXI_DP_RRESP,
    M_AXI_DP_RVALID,
    M_AXI_DP_RREADY,
    Dbg_Clk,
    Dbg_TDI,
    Dbg_TDO,
    Dbg_Reg_En,
    Dbg_Shift,
    Dbg_Capture,
    Dbg_Update,
    Dbg_Trig_In,
    Dbg_Trig_Ack_In,
    Dbg_Trig_Out,
    Dbg_Trig_Ack_Out,
    Debug_Rst,
    Dbg_Disable,
    M0_AXIS_TLAST,
    M0_AXIS_TDATA,
    M0_AXIS_TVALID,
    M0_AXIS_TREADY,
    M1_AXIS_TLAST,
    M1_AXIS_TDATA,
    M1_AXIS_TVALID,
    M1_AXIS_TREADY,
    S0_AXIS_TLAST,
    S0_AXIS_TDATA,
    S0_AXIS_TVALID,
    S0_AXIS_TREADY,
    S1_AXIS_TLAST,
    S1_AXIS_TDATA,
    S1_AXIS_TVALID,
    S1_AXIS_TREADY);
  (* x_interface_info = "xilinx.com:signal:clock:1.0 CLK.CLK CLK" *) (* x_interface_parameter = "XIL_INTERFACENAME CLK.CLK, ASSOCIATED_BUSIF M0_AXIS:S0_AXIS:M1_AXIS:S1_AXIS:M2_AXIS:S2_AXIS:M3_AXIS:S3_AXIS:M4_AXIS:S4_AXIS:M5_AXIS:S5_AXIS:M6_AXIS:S6_AXIS:M7_AXIS:S7_AXIS:M8_AXIS:S8_AXIS:M9_AXIS:S9_AXIS:M10_AXIS:S10_AXIS:M11_AXIS:S11_AXIS:M12_AXIS:S12_AXIS:M13_AXIS:S13_AXIS:M14_AXIS:S14_AXIS:M15_AXIS:S15_AXIS:DLMB:ILMB:M_AXI_DP:M_AXI_IP:M_AXI_DC:M_AXI_IC:M_ACE_DC:M_ACE_IC:MON_DLMB:MON_ILMB:MON_AXI_DP:MON_AXI_IP:MON_AXI_DC:MON_AXI_IC:MON_ACE_DC:MON_ACE_IC, ASSOCIATED_RESET Reset, FREQ_HZ 81247969, PHASE 0, CLK_DOMAIN block_design_mig_7series_0_1_ui_clk, INSERT_VIP 0" *) input Clk;
  (* x_interface_info = "xilinx.com:signal:reset:1.0 RST.RESET RST" *) (* x_interface_parameter = "XIL_INTERFACENAME RST.RESET, POLARITY ACTIVE_HIGH, TYPE PROCESSOR, INSERT_VIP 0" *) input Reset;
  (* x_interface_info = "xilinx.com:interface:mbinterrupt:1.0 INTERRUPT INTERRUPT" *) (* x_interface_parameter = "XIL_INTERFACENAME INTERRUPT, SENSITIVITY LEVEL_HIGH, LOW_LATENCY 1" *) input Interrupt;
  (* x_interface_info = "xilinx.com:interface:mbinterrupt:1.0 INTERRUPT ADDRESS" *) input [0:31]Interrupt_Address;
  (* x_interface_info = "xilinx.com:interface:mbinterrupt:1.0 INTERRUPT ACK" *) output [0:1]Interrupt_Ack;
  input Ext_BRK;
  input Ext_NM_BRK;
  input Dbg_Stop;
  (* x_interface_info = "xilinx.com:signal:interrupt:1.0 DBG_INTR INTERRUPT" *) (* x_interface_parameter = "XIL_INTERFACENAME DBG_INTR, SENSITIVITY LEVEL_HIGH, PortWidth 1" *) output Dbg_Intr;
  output MB_Halted;
  input [0:1]Wakeup;
  output Sleep;
  output Hibernate;
  output Suspend;
  output Dbg_Wakeup;
  output Dbg_Continue;
  input [0:1]Reset_Mode;
  input Pause;
  output Pause_Ack;
  input [0:3]Non_Secure;
  (* x_interface_info = "xilinx.com:interface:lmb:1.0 ILMB ABUS" *) (* x_interface_parameter = "XIL_INTERFACENAME ILMB, ADDR_WIDTH 32, DATA_WIDTH 32, PROTOCOL STANDARD, READ_WRITE_MODE READ_ONLY" *) output [0:31]Instr_Addr;
  (* x_interface_info = "xilinx.com:interface:lmb:1.0 ILMB READDBUS" *) input [0:31]Instr;
  (* x_interface_info = "xilinx.com:interface:lmb:1.0 ILMB READSTROBE" *) output IFetch;
  (* x_interface_info = "xilinx.com:interface:lmb:1.0 ILMB ADDRSTROBE" *) output I_AS;
  (* x_interface_info = "xilinx.com:interface:lmb:1.0 ILMB READY" *) input IReady;
  (* x_interface_info = "xilinx.com:interface:lmb:1.0 ILMB WAIT" *) input IWAIT;
  (* x_interface_info = "xilinx.com:interface:lmb:1.0 ILMB CE" *) input ICE;
  (* x_interface_info = "xilinx.com:interface:lmb:1.0 ILMB UE" *) input IUE;
  (* x_interface_info = "xilinx.com:interface:lmb:1.0 DLMB ABUS" *) (* x_interface_parameter = "XIL_INTERFACENAME DLMB, ADDR_WIDTH 32, DATA_WIDTH 32, PROTOCOL STANDARD, READ_WRITE_MODE READ_WRITE" *) output [0:31]Data_Addr;
  (* x_interface_info = "xilinx.com:interface:lmb:1.0 DLMB READDBUS" *) input [0:31]Data_Read;
  (* x_interface_info = "xilinx.com:interface:lmb:1.0 DLMB WRITEDBUS" *) output [0:31]Data_Write;
  (* x_interface_info = "xilinx.com:interface:lmb:1.0 DLMB ADDRSTROBE" *) output D_AS;
  (* x_interface_info = "xilinx.com:interface:lmb:1.0 DLMB READSTROBE" *) output Read_Strobe;
  (* x_interface_info = "xilinx.com:interface:lmb:1.0 DLMB WRITESTROBE" *) output Write_Strobe;
  (* x_interface_info = "xilinx.com:interface:lmb:1.0 DLMB READY" *) input DReady;
  (* x_interface_info = "xilinx.com:interface:lmb:1.0 DLMB WAIT" *) input DWait;
  (* x_interface_info = "xilinx.com:interface:lmb:1.0 DLMB CE" *) input DCE;
  (* x_interface_info = "xilinx.com:interface:lmb:1.0 DLMB UE" *) input DUE;
  (* x_interface_info = "xilinx.com:interface:lmb:1.0 DLMB BE" *) output [0:3]Byte_Enable;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_DP AWADDR" *) (* x_interface_parameter = "XIL_INTERFACENAME M_AXI_DP, ID_WIDTH 0, READ_WRITE_MODE READ_WRITE, SUPPORTS_NARROW_BURST 0, HAS_BURST 0, HAS_LOCK 0, DATA_WIDTH 32, ADDR_WIDTH 32, NUM_READ_OUTSTANDING 1, NUM_WRITE_OUTSTANDING 1, NUM_READ_THREADS 1, NUM_WRITE_THREADS 1, MAX_BURST_LENGTH 1, PROTOCOL AXI4LITE, FREQ_HZ 81247969, AWUSER_WIDTH 0, ARUSER_WIDTH 0, WUSER_WIDTH 0, RUSER_WIDTH 0, BUSER_WIDTH 0, HAS_PROT 1, HAS_CACHE 0, HAS_QOS 0, HAS_REGION 0, HAS_WSTRB 1, HAS_BRESP 1, HAS_RRESP 1, PHASE 0, CLK_DOMAIN block_design_mig_7series_0_1_ui_clk, RUSER_BITS_PER_BYTE 0, WUSER_BITS_PER_BYTE 0, INSERT_VIP 0" *) output [31:0]M_AXI_DP_AWADDR;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_DP AWPROT" *) output [2:0]M_AXI_DP_AWPROT;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_DP AWVALID" *) output M_AXI_DP_AWVALID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_DP AWREADY" *) input M_AXI_DP_AWREADY;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_DP WDATA" *) output [31:0]M_AXI_DP_WDATA;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_DP WSTRB" *) output [3:0]M_AXI_DP_WSTRB;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_DP WVALID" *) output M_AXI_DP_WVALID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_DP WREADY" *) input M_AXI_DP_WREADY;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_DP BRESP" *) input [1:0]M_AXI_DP_BRESP;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_DP BVALID" *) input M_AXI_DP_BVALID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_DP BREADY" *) output M_AXI_DP_BREADY;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_DP ARADDR" *) output [31:0]M_AXI_DP_ARADDR;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_DP ARPROT" *) output [2:0]M_AXI_DP_ARPROT;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_DP ARVALID" *) output M_AXI_DP_ARVALID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_DP ARREADY" *) input M_AXI_DP_ARREADY;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_DP RDATA" *) input [31:0]M_AXI_DP_RDATA;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_DP RRESP" *) input [1:0]M_AXI_DP_RRESP;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_DP RVALID" *) input M_AXI_DP_RVALID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_DP RREADY" *) output M_AXI_DP_RREADY;
  (* x_interface_info = "xilinx.com:interface:mbdebug:3.0 DEBUG CLK" *) input Dbg_Clk;
  (* x_interface_info = "xilinx.com:interface:mbdebug:3.0 DEBUG TDI" *) input Dbg_TDI;
  (* x_interface_info = "xilinx.com:interface:mbdebug:3.0 DEBUG TDO" *) output Dbg_TDO;
  (* x_interface_info = "xilinx.com:interface:mbdebug:3.0 DEBUG REG_EN" *) input [0:7]Dbg_Reg_En;
  (* x_interface_info = "xilinx.com:interface:mbdebug:3.0 DEBUG SHIFT" *) input Dbg_Shift;
  (* x_interface_info = "xilinx.com:interface:mbdebug:3.0 DEBUG CAPTURE" *) input Dbg_Capture;
  (* x_interface_info = "xilinx.com:interface:mbdebug:3.0 DEBUG UPDATE" *) input Dbg_Update;
  (* x_interface_info = "xilinx.com:interface:mbdebug:3.0 DEBUG TRIG_IN" *) output [0:7]Dbg_Trig_In;
  (* x_interface_info = "xilinx.com:interface:mbdebug:3.0 DEBUG TRIG_ACK_IN" *) input [0:7]Dbg_Trig_Ack_In;
  (* x_interface_info = "xilinx.com:interface:mbdebug:3.0 DEBUG TRIG_OUT" *) input [0:7]Dbg_Trig_Out;
  (* x_interface_info = "xilinx.com:interface:mbdebug:3.0 DEBUG TRIG_ACK_OUT" *) output [0:7]Dbg_Trig_Ack_Out;
  (* x_interface_info = "xilinx.com:interface:mbdebug:3.0 DEBUG RST" *) input Debug_Rst;
  (* x_interface_info = "xilinx.com:interface:mbdebug:3.0 DEBUG DISABLE" *) input Dbg_Disable;
  (* x_interface_info = "xilinx.com:interface:axis:1.0 M0_AXIS TLAST" *) (* x_interface_parameter = "XIL_INTERFACENAME M0_AXIS, TDATA_NUM_BYTES 4, TDEST_WIDTH 0, TID_WIDTH 0, TUSER_WIDTH 0, HAS_TREADY 1, HAS_TSTRB 0, HAS_TKEEP 0, HAS_TLAST 1, FREQ_HZ 81247969, PHASE 0, CLK_DOMAIN block_design_mig_7series_0_1_ui_clk, LAYERED_METADATA undef, INSERT_VIP 0" *) output M0_AXIS_TLAST;
  (* x_interface_info = "xilinx.com:interface:axis:1.0 M0_AXIS TDATA" *) output [31:0]M0_AXIS_TDATA;
  (* x_interface_info = "xilinx.com:interface:axis:1.0 M0_AXIS TVALID" *) output M0_AXIS_TVALID;
  (* x_interface_info = "xilinx.com:interface:axis:1.0 M0_AXIS TREADY" *) input M0_AXIS_TREADY;
  (* x_interface_info = "xilinx.com:interface:axis:1.0 M1_AXIS TLAST" *) (* x_interface_parameter = "XIL_INTERFACENAME M1_AXIS, TDATA_NUM_BYTES 4, TDEST_WIDTH 0, TID_WIDTH 0, TUSER_WIDTH 0, HAS_TREADY 1, HAS_TSTRB 0, HAS_TKEEP 0, HAS_TLAST 1, FREQ_HZ 81247969, PHASE 0, CLK_DOMAIN block_design_mig_7series_0_1_ui_clk, LAYERED_METADATA undef, INSERT_VIP 0" *) output M1_AXIS_TLAST;
  (* x_interface_info = "xilinx.com:interface:axis:1.0 M1_AXIS TDATA" *) output [31:0]M1_AXIS_TDATA;
  (* x_interface_info = "xilinx.com:interface:axis:1.0 M1_AXIS TVALID" *) output M1_AXIS_TVALID;
  (* x_interface_info = "xilinx.com:interface:axis:1.0 M1_AXIS TREADY" *) input M1_AXIS_TREADY;
  (* x_interface_info = "xilinx.com:interface:axis:1.0 S0_AXIS TLAST" *) (* x_interface_parameter = "XIL_INTERFACENAME S0_AXIS, TDATA_NUM_BYTES 4, TDEST_WIDTH 0, TID_WIDTH 0, TUSER_WIDTH 0, HAS_TREADY 1, HAS_TSTRB 0, HAS_TKEEP 0, HAS_TLAST 1, FREQ_HZ 81247969, PHASE 0, CLK_DOMAIN block_design_mig_7series_0_1_ui_clk, LAYERED_METADATA undef, INSERT_VIP 0" *) input S0_AXIS_TLAST;
  (* x_interface_info = "xilinx.com:interface:axis:1.0 S0_AXIS TDATA" *) input [31:0]S0_AXIS_TDATA;
  (* x_interface_info = "xilinx.com:interface:axis:1.0 S0_AXIS TVALID" *) input S0_AXIS_TVALID;
  (* x_interface_info = "xilinx.com:interface:axis:1.0 S0_AXIS TREADY" *) output S0_AXIS_TREADY;
  (* x_interface_info = "xilinx.com:interface:axis:1.0 S1_AXIS TLAST" *) (* x_interface_parameter = "XIL_INTERFACENAME S1_AXIS, TDATA_NUM_BYTES 4, TDEST_WIDTH 0, TID_WIDTH 0, TUSER_WIDTH 0, HAS_TREADY 1, HAS_TSTRB 0, HAS_TKEEP 0, HAS_TLAST 1, FREQ_HZ 81247969, PHASE 0, CLK_DOMAIN block_design_mig_7series_0_1_ui_clk, LAYERED_METADATA undef, INSERT_VIP 0" *) input S1_AXIS_TLAST;
  (* x_interface_info = "xilinx.com:interface:axis:1.0 S1_AXIS TDATA" *) input [31:0]S1_AXIS_TDATA;
  (* x_interface_info = "xilinx.com:interface:axis:1.0 S1_AXIS TVALID" *) input S1_AXIS_TVALID;
  (* x_interface_info = "xilinx.com:interface:axis:1.0 S1_AXIS TREADY" *) output S1_AXIS_TREADY;

  wire [0:3]Byte_Enable;
  wire Clk;
  wire DCE;
  wire DReady;
  wire DUE;
  wire DWait;
  wire D_AS;
  wire [0:31]Data_Addr;
  wire [0:31]Data_Read;
  wire [0:31]Data_Write;
  wire Dbg_Capture;
  wire Dbg_Clk;
  wire Dbg_Continue;
  wire Dbg_Disable;
  wire Dbg_Intr;
  wire [0:7]Dbg_Reg_En;
  wire Dbg_Shift;
  wire Dbg_Stop;
  wire Dbg_TDI;
  wire Dbg_TDO;
  wire [0:7]Dbg_Trig_Ack_In;
  wire [0:7]Dbg_Trig_Ack_Out;
  wire [0:7]Dbg_Trig_In;
  wire [0:7]Dbg_Trig_Out;
  wire Dbg_Update;
  wire Dbg_Wakeup;
  wire Debug_Rst;
  wire Ext_BRK;
  wire Ext_NM_BRK;
  wire Hibernate;
  wire ICE;
  wire IFetch;
  wire IReady;
  wire IUE;
  wire IWAIT;
  wire I_AS;
  wire [0:31]Instr;
  wire [0:31]Instr_Addr;
  wire Interrupt;
  wire [0:1]Interrupt_Ack;
  wire [0:31]Interrupt_Address;
  wire [31:0]M0_AXIS_TDATA;
  wire M0_AXIS_TLAST;
  wire M0_AXIS_TREADY;
  wire M0_AXIS_TVALID;
  wire [31:0]M1_AXIS_TDATA;
  wire M1_AXIS_TLAST;
  wire M1_AXIS_TREADY;
  wire M1_AXIS_TVALID;
  wire MB_Halted;
  wire [31:0]M_AXI_DP_ARADDR;
  wire [2:0]M_AXI_DP_ARPROT;
  wire M_AXI_DP_ARREADY;
  wire M_AXI_DP_ARVALID;
  wire [31:0]M_AXI_DP_AWADDR;
  wire [2:0]M_AXI_DP_AWPROT;
  wire M_AXI_DP_AWREADY;
  wire M_AXI_DP_AWVALID;
  wire M_AXI_DP_BREADY;
  wire [1:0]M_AXI_DP_BRESP;
  wire M_AXI_DP_BVALID;
  wire [31:0]M_AXI_DP_RDATA;
  wire M_AXI_DP_RREADY;
  wire [1:0]M_AXI_DP_RRESP;
  wire M_AXI_DP_RVALID;
  wire [31:0]M_AXI_DP_WDATA;
  wire M_AXI_DP_WREADY;
  wire [3:0]M_AXI_DP_WSTRB;
  wire M_AXI_DP_WVALID;
  wire [0:3]Non_Secure;
  wire Pause;
  wire Pause_Ack;
  wire Read_Strobe;
  wire Reset;
  wire [0:1]Reset_Mode;
  wire [31:0]S0_AXIS_TDATA;
  wire S0_AXIS_TLAST;
  wire S0_AXIS_TREADY;
  wire S0_AXIS_TVALID;
  wire [31:0]S1_AXIS_TDATA;
  wire S1_AXIS_TLAST;
  wire S1_AXIS_TREADY;
  wire S1_AXIS_TVALID;
  wire Sleep;
  wire Suspend;
  wire [0:1]Wakeup;
  wire Write_Strobe;
  wire NLW_U0_Dbg_ARREADY_UNCONNECTED;
  wire NLW_U0_Dbg_AWREADY_UNCONNECTED;
  wire NLW_U0_Dbg_BVALID_UNCONNECTED;
  wire NLW_U0_Dbg_RVALID_UNCONNECTED;
  wire NLW_U0_Dbg_Trace_Valid_UNCONNECTED;
  wire NLW_U0_Dbg_WREADY_UNCONNECTED;
  wire NLW_U0_M10_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M10_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M11_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M11_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M12_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M12_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M13_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M13_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M14_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M14_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M15_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M15_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M2_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M2_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M3_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M3_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M4_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M4_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M5_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M5_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M6_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M6_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M7_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M7_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M8_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M8_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M9_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M9_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_MB_Error_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_ACREADY_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_ARLOCK_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_ARVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_AWLOCK_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_AWVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_BREADY_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_CDLAST_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_CDVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_CRVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_RACK_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_RREADY_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_WACK_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_WLAST_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_WVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_DP_ARLOCK_UNCONNECTED;
  wire NLW_U0_M_AXI_DP_AWLOCK_UNCONNECTED;
  wire NLW_U0_M_AXI_DP_WLAST_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_ACREADY_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_ARLOCK_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_ARVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_AWLOCK_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_AWVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_BREADY_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_CDLAST_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_CDVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_CRVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_RACK_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_RREADY_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_WACK_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_WLAST_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_WVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_IP_ARLOCK_UNCONNECTED;
  wire NLW_U0_M_AXI_IP_ARVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_IP_AWLOCK_UNCONNECTED;
  wire NLW_U0_M_AXI_IP_AWVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_IP_BREADY_UNCONNECTED;
  wire NLW_U0_M_AXI_IP_RREADY_UNCONNECTED;
  wire NLW_U0_M_AXI_IP_WLAST_UNCONNECTED;
  wire NLW_U0_M_AXI_IP_WVALID_UNCONNECTED;
  wire NLW_U0_S10_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S11_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S12_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S13_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S14_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S15_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S2_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S3_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S4_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S5_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S6_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S7_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S8_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S9_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_Trace_DCache_Hit_UNCONNECTED;
  wire NLW_U0_Trace_DCache_Rdy_UNCONNECTED;
  wire NLW_U0_Trace_DCache_Read_UNCONNECTED;
  wire NLW_U0_Trace_DCache_Req_UNCONNECTED;
  wire NLW_U0_Trace_Data_Access_UNCONNECTED;
  wire NLW_U0_Trace_Data_Read_UNCONNECTED;
  wire NLW_U0_Trace_Data_Write_UNCONNECTED;
  wire NLW_U0_Trace_Delay_Slot_UNCONNECTED;
  wire NLW_U0_Trace_EX_PipeRun_UNCONNECTED;
  wire NLW_U0_Trace_Exception_Taken_UNCONNECTED;
  wire NLW_U0_Trace_ICache_Hit_UNCONNECTED;
  wire NLW_U0_Trace_ICache_Rdy_UNCONNECTED;
  wire NLW_U0_Trace_ICache_Req_UNCONNECTED;
  wire NLW_U0_Trace_Jump_Hit_UNCONNECTED;
  wire NLW_U0_Trace_Jump_Taken_UNCONNECTED;
  wire NLW_U0_Trace_MB_Halted_UNCONNECTED;
  wire NLW_U0_Trace_MEM_PipeRun_UNCONNECTED;
  wire NLW_U0_Trace_OF_PipeRun_UNCONNECTED;
  wire NLW_U0_Trace_Reg_Write_UNCONNECTED;
  wire NLW_U0_Trace_Valid_Instr_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_BRESP_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_RDATA_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_RRESP_UNCONNECTED;
  wire [0:35]NLW_U0_Dbg_Trace_Data_UNCONNECTED;
  wire [0:4095]NLW_U0_LOCKSTEP_Master_Out_UNCONNECTED;
  wire [0:4095]NLW_U0_LOCKSTEP_Out_UNCONNECTED;
  wire [31:0]NLW_U0_M10_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M11_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M12_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M13_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M14_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M15_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M2_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M3_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M4_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M5_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M6_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M7_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M8_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M9_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_DC_ARADDR_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_DC_ARBAR_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_DC_ARBURST_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_DC_ARCACHE_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_DC_ARDOMAIN_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_DC_ARID_UNCONNECTED;
  wire [7:0]NLW_U0_M_AXI_DC_ARLEN_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_DC_ARPROT_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_DC_ARQOS_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_DC_ARSIZE_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_DC_ARSNOOP_UNCONNECTED;
  wire [4:0]NLW_U0_M_AXI_DC_ARUSER_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_DC_AWADDR_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_DC_AWBAR_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_DC_AWBURST_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_DC_AWCACHE_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_DC_AWDOMAIN_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_DC_AWID_UNCONNECTED;
  wire [7:0]NLW_U0_M_AXI_DC_AWLEN_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_DC_AWPROT_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_DC_AWQOS_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_DC_AWSIZE_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_DC_AWSNOOP_UNCONNECTED;
  wire [4:0]NLW_U0_M_AXI_DC_AWUSER_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_DC_CDDATA_UNCONNECTED;
  wire [4:0]NLW_U0_M_AXI_DC_CRRESP_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_DC_WDATA_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_DC_WSTRB_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_DC_WUSER_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_DP_ARBURST_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_DP_ARCACHE_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_DP_ARID_UNCONNECTED;
  wire [7:0]NLW_U0_M_AXI_DP_ARLEN_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_DP_ARQOS_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_DP_ARSIZE_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_DP_AWBURST_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_DP_AWCACHE_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_DP_AWID_UNCONNECTED;
  wire [7:0]NLW_U0_M_AXI_DP_AWLEN_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_DP_AWQOS_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_DP_AWSIZE_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_IC_ARADDR_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_IC_ARBAR_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_IC_ARBURST_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_IC_ARCACHE_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_IC_ARDOMAIN_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_IC_ARID_UNCONNECTED;
  wire [7:0]NLW_U0_M_AXI_IC_ARLEN_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_IC_ARPROT_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_IC_ARQOS_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_IC_ARSIZE_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_IC_ARSNOOP_UNCONNECTED;
  wire [4:0]NLW_U0_M_AXI_IC_ARUSER_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_IC_AWADDR_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_IC_AWBAR_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_IC_AWBURST_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_IC_AWCACHE_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_IC_AWDOMAIN_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_IC_AWID_UNCONNECTED;
  wire [7:0]NLW_U0_M_AXI_IC_AWLEN_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_IC_AWPROT_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_IC_AWQOS_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_IC_AWSIZE_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_IC_AWSNOOP_UNCONNECTED;
  wire [4:0]NLW_U0_M_AXI_IC_AWUSER_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_IC_CDDATA_UNCONNECTED;
  wire [4:0]NLW_U0_M_AXI_IC_CRRESP_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_IC_WDATA_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_IC_WSTRB_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_IC_WUSER_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_IP_ARADDR_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_IP_ARBURST_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_IP_ARCACHE_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_IP_ARID_UNCONNECTED;
  wire [7:0]NLW_U0_M_AXI_IP_ARLEN_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_IP_ARPROT_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_IP_ARQOS_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_IP_ARSIZE_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_IP_AWADDR_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_IP_AWBURST_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_IP_AWCACHE_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_IP_AWID_UNCONNECTED;
  wire [7:0]NLW_U0_M_AXI_IP_AWLEN_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_IP_AWPROT_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_IP_AWQOS_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_IP_AWSIZE_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_IP_WDATA_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_IP_WSTRB_UNCONNECTED;
  wire [255:0]NLW_U0_RAM_From_UNCONNECTED;
  wire [0:31]NLW_U0_Trace_Data_Address_UNCONNECTED;
  wire [0:3]NLW_U0_Trace_Data_Byte_Enable_UNCONNECTED;
  wire [0:31]NLW_U0_Trace_Data_Write_Value_UNCONNECTED;
  wire [0:4]NLW_U0_Trace_Exception_Kind_UNCONNECTED;
  wire [0:31]NLW_U0_Trace_Instruction_UNCONNECTED;
  wire [0:14]NLW_U0_Trace_MSR_Reg_UNCONNECTED;
  wire [0:31]NLW_U0_Trace_New_Reg_Value_UNCONNECTED;
  wire [0:31]NLW_U0_Trace_PC_UNCONNECTED;
  wire [0:7]NLW_U0_Trace_PID_Reg_UNCONNECTED;
  wire [0:4]NLW_U0_Trace_Reg_Addr_UNCONNECTED;

  (* C_ADDR_TAG_BITS = "0" *) 
  (* C_ALLOW_DCACHE_WR = "1" *) 
  (* C_ALLOW_ICACHE_WR = "1" *) 
  (* C_AREA_OPTIMIZED = "1" *) 
  (* C_ASYNC_INTERRUPT = "1" *) 
  (* C_ASYNC_WAKEUP = "2" *) 
  (* C_AVOID_PRIMITIVES = "0" *) 
  (* C_BASE_VECTORS = "64'b0000000000000000000000000000000000000000000000000000000000000000" *) 
  (* C_BRANCH_TARGET_CACHE_SIZE = "0" *) 
  (* C_CACHE_BYTE_SIZE = "4096" *) 
  (* C_DADDR_SIZE = "32" *) 
  (* C_DATA_SIZE = "32" *) 
  (* C_DCACHE_ADDR_TAG = "0" *) 
  (* C_DCACHE_ALWAYS_USED = "1" *) 
  (* C_DCACHE_BASEADDR = "64'b0000000000000000000000000000000000000000000000000000000000000000" *) 
  (* C_DCACHE_BYTE_SIZE = "4096" *) 
  (* C_DCACHE_DATA_WIDTH = "0" *) 
  (* C_DCACHE_FORCE_TAG_LUTRAM = "0" *) 
  (* C_DCACHE_HIGHADDR = "64'b0000000000000000000000000000000000111111111111111111111111111111" *) 
  (* C_DCACHE_LINE_LEN = "4" *) 
  (* C_DCACHE_USE_WRITEBACK = "0" *) 
  (* C_DCACHE_VICTIMS = "0" *) 
  (* C_DEBUG_COUNTER_WIDTH = "32" *) 
  (* C_DEBUG_ENABLED = "2" *) 
  (* C_DEBUG_EVENT_COUNTERS = "5" *) 
  (* C_DEBUG_EXTERNAL_TRACE = "0" *) 
  (* C_DEBUG_INTERFACE = "0" *) 
  (* C_DEBUG_LATENCY_COUNTERS = "1" *) 
  (* C_DEBUG_PROFILE_SIZE = "0" *) 
  (* C_DEBUG_TRACE_ASYNC_RESET = "0" *) 
  (* C_DEBUG_TRACE_SIZE = "8192" *) 
  (* C_DIV_ZERO_EXCEPTION = "0" *) 
  (* C_DYNAMIC_BUS_SIZING = "0" *) 
  (* C_D_AXI = "1" *) 
  (* C_D_LMB = "1" *) 
  (* C_D_LMB_PROTOCOL = "0" *) 
  (* C_ECC_USE_CE_EXCEPTION = "0" *) 
  (* C_EDGE_IS_POSITIVE = "1" *) 
  (* C_ENDIANNESS = "1" *) 
  (* C_FAMILY = "spartan7" *) 
  (* C_FAULT_TOLERANT = "0" *) 
  (* C_FPU_EXCEPTION = "0" *) 
  (* C_FREQ = "81247969" *) 
  (* C_FSL_EXCEPTION = "0" *) 
  (* C_FSL_LINKS = "2" *) 
  (* C_IADDR_SIZE = "32" *) 
  (* C_ICACHE_ALWAYS_USED = "1" *) 
  (* C_ICACHE_BASEADDR = "64'b0000000000000000000000000000000000000000000000000000000000000000" *) 
  (* C_ICACHE_DATA_WIDTH = "0" *) 
  (* C_ICACHE_FORCE_TAG_LUTRAM = "0" *) 
  (* C_ICACHE_HIGHADDR = "64'b0000000000000000000000000000000000111111111111111111111111111111" *) 
  (* C_ICACHE_LINE_LEN = "4" *) 
  (* C_ICACHE_STREAMS = "0" *) 
  (* C_ICACHE_VICTIMS = "0" *) 
  (* C_ILL_OPCODE_EXCEPTION = "0" *) 
  (* C_IMPRECISE_EXCEPTIONS = "0" *) 
  (* C_INSTANCE = "block_design_microblaze_0_0" *) 
  (* C_INSTR_SIZE = "32" *) 
  (* C_INTERCONNECT = "2" *) 
  (* C_INTERRUPT_IS_EDGE = "0" *) 
  (* C_I_AXI = "0" *) 
  (* C_I_LMB = "1" *) 
  (* C_I_LMB_PROTOCOL = "0" *) 
  (* C_LMB_DATA_SIZE = "32" *) 
  (* C_LOCKSTEP_MASTER = "0" *) 
  (* C_LOCKSTEP_SLAVE = "0" *) 
  (* C_M0_AXIS_DATA_WIDTH = "32" *) 
  (* C_M10_AXIS_DATA_WIDTH = "32" *) 
  (* C_M11_AXIS_DATA_WIDTH = "32" *) 
  (* C_M12_AXIS_DATA_WIDTH = "32" *) 
  (* C_M13_AXIS_DATA_WIDTH = "32" *) 
  (* C_M14_AXIS_DATA_WIDTH = "32" *) 
  (* C_M15_AXIS_DATA_WIDTH = "32" *) 
  (* C_M1_AXIS_DATA_WIDTH = "32" *) 
  (* C_M2_AXIS_DATA_WIDTH = "32" *) 
  (* C_M3_AXIS_DATA_WIDTH = "32" *) 
  (* C_M4_AXIS_DATA_WIDTH = "32" *) 
  (* C_M5_AXIS_DATA_WIDTH = "32" *) 
  (* C_M6_AXIS_DATA_WIDTH = "32" *) 
  (* C_M7_AXIS_DATA_WIDTH = "32" *) 
  (* C_M8_AXIS_DATA_WIDTH = "32" *) 
  (* C_M9_AXIS_DATA_WIDTH = "32" *) 
  (* C_MMU_DTLB_SIZE = "2" *) 
  (* C_MMU_ITLB_SIZE = "1" *) 
  (* C_MMU_PRIVILEGED_INSTR = "0" *) 
  (* C_MMU_TLB_ACCESS = "3" *) 
  (* C_MMU_ZONES = "2" *) 
  (* C_M_AXI_DC_ADDR_WIDTH = "32" *) 
  (* C_M_AXI_DC_ARUSER_WIDTH = "5" *) 
  (* C_M_AXI_DC_AWUSER_WIDTH = "5" *) 
  (* C_M_AXI_DC_BUSER_WIDTH = "1" *) 
  (* C_M_AXI_DC_DATA_WIDTH = "32" *) 
  (* C_M_AXI_DC_EXCLUSIVE_ACCESS = "0" *) 
  (* C_M_AXI_DC_RUSER_WIDTH = "1" *) 
  (* C_M_AXI_DC_THREAD_ID_WIDTH = "1" *) 
  (* C_M_AXI_DC_USER_VALUE = "31" *) 
  (* C_M_AXI_DC_WUSER_WIDTH = "1" *) 
  (* C_M_AXI_DP_ADDR_WIDTH = "32" *) 
  (* C_M_AXI_DP_DATA_WIDTH = "32" *) 
  (* C_M_AXI_DP_EXCLUSIVE_ACCESS = "0" *) 
  (* C_M_AXI_DP_THREAD_ID_WIDTH = "1" *) 
  (* C_M_AXI_D_BUS_EXCEPTION = "0" *) 
  (* C_M_AXI_IC_ADDR_WIDTH = "32" *) 
  (* C_M_AXI_IC_ARUSER_WIDTH = "5" *) 
  (* C_M_AXI_IC_AWUSER_WIDTH = "5" *) 
  (* C_M_AXI_IC_BUSER_WIDTH = "1" *) 
  (* C_M_AXI_IC_DATA_WIDTH = "32" *) 
  (* C_M_AXI_IC_RUSER_WIDTH = "1" *) 
  (* C_M_AXI_IC_THREAD_ID_WIDTH = "1" *) 
  (* C_M_AXI_IC_USER_VALUE = "31" *) 
  (* C_M_AXI_IC_WUSER_WIDTH = "1" *) 
  (* C_M_AXI_IP_ADDR_WIDTH = "32" *) 
  (* C_M_AXI_IP_DATA_WIDTH = "32" *) 
  (* C_M_AXI_IP_THREAD_ID_WIDTH = "1" *) 
  (* C_M_AXI_I_BUS_EXCEPTION = "0" *) 
  (* C_NUMBER_OF_PC_BRK = "1" *) 
  (* C_NUMBER_OF_RD_ADDR_BRK = "0" *) 
  (* C_NUMBER_OF_WR_ADDR_BRK = "0" *) 
  (* C_NUM_SYNC_FF_CLK = "2" *) 
  (* C_NUM_SYNC_FF_CLK_DEBUG = "2" *) 
  (* C_NUM_SYNC_FF_CLK_IRQ = "1" *) 
  (* C_NUM_SYNC_FF_DBG_CLK = "1" *) 
  (* C_NUM_SYNC_FF_DBG_TRACE_CLK = "2" *) 
  (* C_OPCODE_0x0_ILLEGAL = "0" *) 
  (* C_OPTIMIZATION = "0" *) 
  (* C_PC_WIDTH = "32" *) 
  (* C_PIADDR_SIZE = "32" *) 
  (* C_PVR = "0" *) 
  (* C_PVR_USER1 = "8'b00000000" *) 
  (* C_PVR_USER2 = "0" *) 
  (* C_RESET_MSR = "0" *) 
  (* C_S0_AXIS_DATA_WIDTH = "32" *) 
  (* C_S10_AXIS_DATA_WIDTH = "32" *) 
  (* C_S11_AXIS_DATA_WIDTH = "32" *) 
  (* C_S12_AXIS_DATA_WIDTH = "32" *) 
  (* C_S13_AXIS_DATA_WIDTH = "32" *) 
  (* C_S14_AXIS_DATA_WIDTH = "32" *) 
  (* C_S15_AXIS_DATA_WIDTH = "32" *) 
  (* C_S1_AXIS_DATA_WIDTH = "32" *) 
  (* C_S2_AXIS_DATA_WIDTH = "32" *) 
  (* C_S3_AXIS_DATA_WIDTH = "32" *) 
  (* C_S4_AXIS_DATA_WIDTH = "32" *) 
  (* C_S5_AXIS_DATA_WIDTH = "32" *) 
  (* C_S6_AXIS_DATA_WIDTH = "32" *) 
  (* C_S7_AXIS_DATA_WIDTH = "32" *) 
  (* C_S8_AXIS_DATA_WIDTH = "32" *) 
  (* C_S9_AXIS_DATA_WIDTH = "32" *) 
  (* C_SCO = "0" *) 
  (* C_UNALIGNED_EXCEPTIONS = "0" *) 
  (* C_USE_BARREL = "1" *) 
  (* C_USE_BRANCH_TARGET_CACHE = "0" *) 
  (* C_USE_CONFIG_RESET = "0" *) 
  (* C_USE_DCACHE = "0" *) 
  (* C_USE_DIV = "0" *) 
  (* C_USE_EXTENDED_FSL_INSTR = "1" *) 
  (* C_USE_EXT_BRK = "0" *) 
  (* C_USE_EXT_NM_BRK = "0" *) 
  (* C_USE_FPU = "0" *) 
  (* C_USE_HW_MUL = "2" *) 
  (* C_USE_ICACHE = "0" *) 
  (* C_USE_INTERRUPT = "2" *) 
  (* C_USE_MMU = "0" *) 
  (* C_USE_MSR_INSTR = "1" *) 
  (* C_USE_NON_SECURE = "0" *) 
  (* C_USE_PCMP_INSTR = "1" *) 
  (* C_USE_REORDER_INSTR = "0" *) 
  (* C_USE_STACK_PROTECTION = "0" *) 
  (* downgradeipidentifiedwarnings = "yes" *) 
  block_design_microblaze_0_0_MicroBlaze U0
       (.Byte_Enable(Byte_Enable),
        .Clk(Clk),
        .Config_Reset(1'b0),
        .DCE(DCE),
        .DEBUG_ACLK(1'b0),
        .DEBUG_ARESETN(1'b0),
        .DReady(DReady),
        .DUE(DUE),
        .DWait(DWait),
        .D_AS(D_AS),
        .Data_Addr(Data_Addr),
        .Data_Read(Data_Read),
        .Data_Write(Data_Write),
        .Dbg_ARADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_ARREADY(NLW_U0_Dbg_ARREADY_UNCONNECTED),
        .Dbg_ARVALID(1'b0),
        .Dbg_AWADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_AWREADY(NLW_U0_Dbg_AWREADY_UNCONNECTED),
        .Dbg_AWVALID(1'b0),
        .Dbg_BREADY(1'b0),
        .Dbg_BRESP(NLW_U0_Dbg_BRESP_UNCONNECTED[1:0]),
        .Dbg_BVALID(NLW_U0_Dbg_BVALID_UNCONNECTED),
        .Dbg_Capture(Dbg_Capture),
        .Dbg_Clk(Dbg_Clk),
        .Dbg_Continue(Dbg_Continue),
        .Dbg_Disable(Dbg_Disable),
        .Dbg_Intr(Dbg_Intr),
        .Dbg_RDATA(NLW_U0_Dbg_RDATA_UNCONNECTED[31:0]),
        .Dbg_RREADY(1'b0),
        .Dbg_RRESP(NLW_U0_Dbg_RRESP_UNCONNECTED[1:0]),
        .Dbg_RVALID(NLW_U0_Dbg_RVALID_UNCONNECTED),
        .Dbg_Reg_En(Dbg_Reg_En),
        .Dbg_Shift(Dbg_Shift),
        .Dbg_Stop(Dbg_Stop),
        .Dbg_TDI(Dbg_TDI),
        .Dbg_TDO(Dbg_TDO),
        .Dbg_Trace_Clk(1'b0),
        .Dbg_Trace_Data(NLW_U0_Dbg_Trace_Data_UNCONNECTED[0:35]),
        .Dbg_Trace_Ready(1'b0),
        .Dbg_Trace_Valid(NLW_U0_Dbg_Trace_Valid_UNCONNECTED),
        .Dbg_Trig_Ack_In(Dbg_Trig_Ack_In),
        .Dbg_Trig_Ack_Out(Dbg_Trig_Ack_Out),
        .Dbg_Trig_In(Dbg_Trig_In),
        .Dbg_Trig_Out(Dbg_Trig_Out),
        .Dbg_Update(Dbg_Update),
        .Dbg_WDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_WREADY(NLW_U0_Dbg_WREADY_UNCONNECTED),
        .Dbg_WVALID(1'b0),
        .Dbg_Wakeup(Dbg_Wakeup),
        .Debug_Rst(Debug_Rst),
        .Ext_BRK(Ext_BRK),
        .Ext_NM_BRK(Ext_NM_BRK),
        .Hibernate(Hibernate),
        .ICE(ICE),
        .IFetch(IFetch),
        .IReady(IReady),
        .IUE(IUE),
        .IWAIT(IWAIT),
        .I_AS(I_AS),
        .Instr(Instr),
        .Instr_Addr(Instr_Addr),
        .Interrupt(Interrupt),
        .Interrupt_Ack(Interrupt_Ack),
        .Interrupt_Address(Interrupt_Address),
        .LOCKSTEP_Master_Out(NLW_U0_LOCKSTEP_Master_Out_UNCONNECTED[0:4095]),
        .LOCKSTEP_Out(NLW_U0_LOCKSTEP_Out_UNCONNECTED[0:4095]),
        .LOCKSTEP_Slave_In({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .M0_AXIS_TDATA(M0_AXIS_TDATA),
        .M0_AXIS_TLAST(M0_AXIS_TLAST),
        .M0_AXIS_TREADY(M0_AXIS_TREADY),
        .M0_AXIS_TVALID(M0_AXIS_TVALID),
        .M10_AXIS_TDATA(NLW_U0_M10_AXIS_TDATA_UNCONNECTED[31:0]),
        .M10_AXIS_TLAST(NLW_U0_M10_AXIS_TLAST_UNCONNECTED),
        .M10_AXIS_TREADY(1'b0),
        .M10_AXIS_TVALID(NLW_U0_M10_AXIS_TVALID_UNCONNECTED),
        .M11_AXIS_TDATA(NLW_U0_M11_AXIS_TDATA_UNCONNECTED[31:0]),
        .M11_AXIS_TLAST(NLW_U0_M11_AXIS_TLAST_UNCONNECTED),
        .M11_AXIS_TREADY(1'b0),
        .M11_AXIS_TVALID(NLW_U0_M11_AXIS_TVALID_UNCONNECTED),
        .M12_AXIS_TDATA(NLW_U0_M12_AXIS_TDATA_UNCONNECTED[31:0]),
        .M12_AXIS_TLAST(NLW_U0_M12_AXIS_TLAST_UNCONNECTED),
        .M12_AXIS_TREADY(1'b0),
        .M12_AXIS_TVALID(NLW_U0_M12_AXIS_TVALID_UNCONNECTED),
        .M13_AXIS_TDATA(NLW_U0_M13_AXIS_TDATA_UNCONNECTED[31:0]),
        .M13_AXIS_TLAST(NLW_U0_M13_AXIS_TLAST_UNCONNECTED),
        .M13_AXIS_TREADY(1'b0),
        .M13_AXIS_TVALID(NLW_U0_M13_AXIS_TVALID_UNCONNECTED),
        .M14_AXIS_TDATA(NLW_U0_M14_AXIS_TDATA_UNCONNECTED[31:0]),
        .M14_AXIS_TLAST(NLW_U0_M14_AXIS_TLAST_UNCONNECTED),
        .M14_AXIS_TREADY(1'b0),
        .M14_AXIS_TVALID(NLW_U0_M14_AXIS_TVALID_UNCONNECTED),
        .M15_AXIS_TDATA(NLW_U0_M15_AXIS_TDATA_UNCONNECTED[31:0]),
        .M15_AXIS_TLAST(NLW_U0_M15_AXIS_TLAST_UNCONNECTED),
        .M15_AXIS_TREADY(1'b0),
        .M15_AXIS_TVALID(NLW_U0_M15_AXIS_TVALID_UNCONNECTED),
        .M1_AXIS_TDATA(M1_AXIS_TDATA),
        .M1_AXIS_TLAST(M1_AXIS_TLAST),
        .M1_AXIS_TREADY(M1_AXIS_TREADY),
        .M1_AXIS_TVALID(M1_AXIS_TVALID),
        .M2_AXIS_TDATA(NLW_U0_M2_AXIS_TDATA_UNCONNECTED[31:0]),
        .M2_AXIS_TLAST(NLW_U0_M2_AXIS_TLAST_UNCONNECTED),
        .M2_AXIS_TREADY(1'b0),
        .M2_AXIS_TVALID(NLW_U0_M2_AXIS_TVALID_UNCONNECTED),
        .M3_AXIS_TDATA(NLW_U0_M3_AXIS_TDATA_UNCONNECTED[31:0]),
        .M3_AXIS_TLAST(NLW_U0_M3_AXIS_TLAST_UNCONNECTED),
        .M3_AXIS_TREADY(1'b0),
        .M3_AXIS_TVALID(NLW_U0_M3_AXIS_TVALID_UNCONNECTED),
        .M4_AXIS_TDATA(NLW_U0_M4_AXIS_TDATA_UNCONNECTED[31:0]),
        .M4_AXIS_TLAST(NLW_U0_M4_AXIS_TLAST_UNCONNECTED),
        .M4_AXIS_TREADY(1'b0),
        .M4_AXIS_TVALID(NLW_U0_M4_AXIS_TVALID_UNCONNECTED),
        .M5_AXIS_TDATA(NLW_U0_M5_AXIS_TDATA_UNCONNECTED[31:0]),
        .M5_AXIS_TLAST(NLW_U0_M5_AXIS_TLAST_UNCONNECTED),
        .M5_AXIS_TREADY(1'b0),
        .M5_AXIS_TVALID(NLW_U0_M5_AXIS_TVALID_UNCONNECTED),
        .M6_AXIS_TDATA(NLW_U0_M6_AXIS_TDATA_UNCONNECTED[31:0]),
        .M6_AXIS_TLAST(NLW_U0_M6_AXIS_TLAST_UNCONNECTED),
        .M6_AXIS_TREADY(1'b0),
        .M6_AXIS_TVALID(NLW_U0_M6_AXIS_TVALID_UNCONNECTED),
        .M7_AXIS_TDATA(NLW_U0_M7_AXIS_TDATA_UNCONNECTED[31:0]),
        .M7_AXIS_TLAST(NLW_U0_M7_AXIS_TLAST_UNCONNECTED),
        .M7_AXIS_TREADY(1'b0),
        .M7_AXIS_TVALID(NLW_U0_M7_AXIS_TVALID_UNCONNECTED),
        .M8_AXIS_TDATA(NLW_U0_M8_AXIS_TDATA_UNCONNECTED[31:0]),
        .M8_AXIS_TLAST(NLW_U0_M8_AXIS_TLAST_UNCONNECTED),
        .M8_AXIS_TREADY(1'b0),
        .M8_AXIS_TVALID(NLW_U0_M8_AXIS_TVALID_UNCONNECTED),
        .M9_AXIS_TDATA(NLW_U0_M9_AXIS_TDATA_UNCONNECTED[31:0]),
        .M9_AXIS_TLAST(NLW_U0_M9_AXIS_TLAST_UNCONNECTED),
        .M9_AXIS_TREADY(1'b0),
        .M9_AXIS_TVALID(NLW_U0_M9_AXIS_TVALID_UNCONNECTED),
        .MB_Error(NLW_U0_MB_Error_UNCONNECTED),
        .MB_Halted(MB_Halted),
        .M_AXI_DC_ACADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .M_AXI_DC_ACPROT({1'b0,1'b0,1'b0}),
        .M_AXI_DC_ACREADY(NLW_U0_M_AXI_DC_ACREADY_UNCONNECTED),
        .M_AXI_DC_ACSNOOP({1'b0,1'b0,1'b0,1'b0}),
        .M_AXI_DC_ACVALID(1'b0),
        .M_AXI_DC_ARADDR(NLW_U0_M_AXI_DC_ARADDR_UNCONNECTED[31:0]),
        .M_AXI_DC_ARBAR(NLW_U0_M_AXI_DC_ARBAR_UNCONNECTED[1:0]),
        .M_AXI_DC_ARBURST(NLW_U0_M_AXI_DC_ARBURST_UNCONNECTED[1:0]),
        .M_AXI_DC_ARCACHE(NLW_U0_M_AXI_DC_ARCACHE_UNCONNECTED[3:0]),
        .M_AXI_DC_ARDOMAIN(NLW_U0_M_AXI_DC_ARDOMAIN_UNCONNECTED[1:0]),
        .M_AXI_DC_ARID(NLW_U0_M_AXI_DC_ARID_UNCONNECTED[0]),
        .M_AXI_DC_ARLEN(NLW_U0_M_AXI_DC_ARLEN_UNCONNECTED[7:0]),
        .M_AXI_DC_ARLOCK(NLW_U0_M_AXI_DC_ARLOCK_UNCONNECTED),
        .M_AXI_DC_ARPROT(NLW_U0_M_AXI_DC_ARPROT_UNCONNECTED[2:0]),
        .M_AXI_DC_ARQOS(NLW_U0_M_AXI_DC_ARQOS_UNCONNECTED[3:0]),
        .M_AXI_DC_ARREADY(1'b0),
        .M_AXI_DC_ARSIZE(NLW_U0_M_AXI_DC_ARSIZE_UNCONNECTED[2:0]),
        .M_AXI_DC_ARSNOOP(NLW_U0_M_AXI_DC_ARSNOOP_UNCONNECTED[3:0]),
        .M_AXI_DC_ARUSER(NLW_U0_M_AXI_DC_ARUSER_UNCONNECTED[4:0]),
        .M_AXI_DC_ARVALID(NLW_U0_M_AXI_DC_ARVALID_UNCONNECTED),
        .M_AXI_DC_AWADDR(NLW_U0_M_AXI_DC_AWADDR_UNCONNECTED[31:0]),
        .M_AXI_DC_AWBAR(NLW_U0_M_AXI_DC_AWBAR_UNCONNECTED[1:0]),
        .M_AXI_DC_AWBURST(NLW_U0_M_AXI_DC_AWBURST_UNCONNECTED[1:0]),
        .M_AXI_DC_AWCACHE(NLW_U0_M_AXI_DC_AWCACHE_UNCONNECTED[3:0]),
        .M_AXI_DC_AWDOMAIN(NLW_U0_M_AXI_DC_AWDOMAIN_UNCONNECTED[1:0]),
        .M_AXI_DC_AWID(NLW_U0_M_AXI_DC_AWID_UNCONNECTED[0]),
        .M_AXI_DC_AWLEN(NLW_U0_M_AXI_DC_AWLEN_UNCONNECTED[7:0]),
        .M_AXI_DC_AWLOCK(NLW_U0_M_AXI_DC_AWLOCK_UNCONNECTED),
        .M_AXI_DC_AWPROT(NLW_U0_M_AXI_DC_AWPROT_UNCONNECTED[2:0]),
        .M_AXI_DC_AWQOS(NLW_U0_M_AXI_DC_AWQOS_UNCONNECTED[3:0]),
        .M_AXI_DC_AWREADY(1'b0),
        .M_AXI_DC_AWSIZE(NLW_U0_M_AXI_DC_AWSIZE_UNCONNECTED[2:0]),
        .M_AXI_DC_AWSNOOP(NLW_U0_M_AXI_DC_AWSNOOP_UNCONNECTED[2:0]),
        .M_AXI_DC_AWUSER(NLW_U0_M_AXI_DC_AWUSER_UNCONNECTED[4:0]),
        .M_AXI_DC_AWVALID(NLW_U0_M_AXI_DC_AWVALID_UNCONNECTED),
        .M_AXI_DC_BID(1'b0),
        .M_AXI_DC_BREADY(NLW_U0_M_AXI_DC_BREADY_UNCONNECTED),
        .M_AXI_DC_BRESP({1'b0,1'b0}),
        .M_AXI_DC_BUSER(1'b0),
        .M_AXI_DC_BVALID(1'b0),
        .M_AXI_DC_CDDATA(NLW_U0_M_AXI_DC_CDDATA_UNCONNECTED[31:0]),
        .M_AXI_DC_CDLAST(NLW_U0_M_AXI_DC_CDLAST_UNCONNECTED),
        .M_AXI_DC_CDREADY(1'b0),
        .M_AXI_DC_CDVALID(NLW_U0_M_AXI_DC_CDVALID_UNCONNECTED),
        .M_AXI_DC_CRREADY(1'b0),
        .M_AXI_DC_CRRESP(NLW_U0_M_AXI_DC_CRRESP_UNCONNECTED[4:0]),
        .M_AXI_DC_CRVALID(NLW_U0_M_AXI_DC_CRVALID_UNCONNECTED),
        .M_AXI_DC_RACK(NLW_U0_M_AXI_DC_RACK_UNCONNECTED),
        .M_AXI_DC_RDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .M_AXI_DC_RID(1'b0),
        .M_AXI_DC_RLAST(1'b0),
        .M_AXI_DC_RREADY(NLW_U0_M_AXI_DC_RREADY_UNCONNECTED),
        .M_AXI_DC_RRESP({1'b0,1'b0}),
        .M_AXI_DC_RUSER(1'b0),
        .M_AXI_DC_RVALID(1'b0),
        .M_AXI_DC_WACK(NLW_U0_M_AXI_DC_WACK_UNCONNECTED),
        .M_AXI_DC_WDATA(NLW_U0_M_AXI_DC_WDATA_UNCONNECTED[31:0]),
        .M_AXI_DC_WLAST(NLW_U0_M_AXI_DC_WLAST_UNCONNECTED),
        .M_AXI_DC_WREADY(1'b0),
        .M_AXI_DC_WSTRB(NLW_U0_M_AXI_DC_WSTRB_UNCONNECTED[3:0]),
        .M_AXI_DC_WUSER(NLW_U0_M_AXI_DC_WUSER_UNCONNECTED[0]),
        .M_AXI_DC_WVALID(NLW_U0_M_AXI_DC_WVALID_UNCONNECTED),
        .M_AXI_DP_ARADDR(M_AXI_DP_ARADDR),
        .M_AXI_DP_ARBURST(NLW_U0_M_AXI_DP_ARBURST_UNCONNECTED[1:0]),
        .M_AXI_DP_ARCACHE(NLW_U0_M_AXI_DP_ARCACHE_UNCONNECTED[3:0]),
        .M_AXI_DP_ARID(NLW_U0_M_AXI_DP_ARID_UNCONNECTED[0]),
        .M_AXI_DP_ARLEN(NLW_U0_M_AXI_DP_ARLEN_UNCONNECTED[7:0]),
        .M_AXI_DP_ARLOCK(NLW_U0_M_AXI_DP_ARLOCK_UNCONNECTED),
        .M_AXI_DP_ARPROT(M_AXI_DP_ARPROT),
        .M_AXI_DP_ARQOS(NLW_U0_M_AXI_DP_ARQOS_UNCONNECTED[3:0]),
        .M_AXI_DP_ARREADY(M_AXI_DP_ARREADY),
        .M_AXI_DP_ARSIZE(NLW_U0_M_AXI_DP_ARSIZE_UNCONNECTED[2:0]),
        .M_AXI_DP_ARVALID(M_AXI_DP_ARVALID),
        .M_AXI_DP_AWADDR(M_AXI_DP_AWADDR),
        .M_AXI_DP_AWBURST(NLW_U0_M_AXI_DP_AWBURST_UNCONNECTED[1:0]),
        .M_AXI_DP_AWCACHE(NLW_U0_M_AXI_DP_AWCACHE_UNCONNECTED[3:0]),
        .M_AXI_DP_AWID(NLW_U0_M_AXI_DP_AWID_UNCONNECTED[0]),
        .M_AXI_DP_AWLEN(NLW_U0_M_AXI_DP_AWLEN_UNCONNECTED[7:0]),
        .M_AXI_DP_AWLOCK(NLW_U0_M_AXI_DP_AWLOCK_UNCONNECTED),
        .M_AXI_DP_AWPROT(M_AXI_DP_AWPROT),
        .M_AXI_DP_AWQOS(NLW_U0_M_AXI_DP_AWQOS_UNCONNECTED[3:0]),
        .M_AXI_DP_AWREADY(M_AXI_DP_AWREADY),
        .M_AXI_DP_AWSIZE(NLW_U0_M_AXI_DP_AWSIZE_UNCONNECTED[2:0]),
        .M_AXI_DP_AWVALID(M_AXI_DP_AWVALID),
        .M_AXI_DP_BID(1'b0),
        .M_AXI_DP_BREADY(M_AXI_DP_BREADY),
        .M_AXI_DP_BRESP(M_AXI_DP_BRESP),
        .M_AXI_DP_BVALID(M_AXI_DP_BVALID),
        .M_AXI_DP_RDATA(M_AXI_DP_RDATA),
        .M_AXI_DP_RID(1'b0),
        .M_AXI_DP_RLAST(1'b0),
        .M_AXI_DP_RREADY(M_AXI_DP_RREADY),
        .M_AXI_DP_RRESP(M_AXI_DP_RRESP),
        .M_AXI_DP_RVALID(M_AXI_DP_RVALID),
        .M_AXI_DP_WDATA(M_AXI_DP_WDATA),
        .M_AXI_DP_WLAST(NLW_U0_M_AXI_DP_WLAST_UNCONNECTED),
        .M_AXI_DP_WREADY(M_AXI_DP_WREADY),
        .M_AXI_DP_WSTRB(M_AXI_DP_WSTRB),
        .M_AXI_DP_WVALID(M_AXI_DP_WVALID),
        .M_AXI_IC_ACADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .M_AXI_IC_ACPROT({1'b0,1'b0,1'b0}),
        .M_AXI_IC_ACREADY(NLW_U0_M_AXI_IC_ACREADY_UNCONNECTED),
        .M_AXI_IC_ACSNOOP({1'b0,1'b0,1'b0,1'b0}),
        .M_AXI_IC_ACVALID(1'b0),
        .M_AXI_IC_ARADDR(NLW_U0_M_AXI_IC_ARADDR_UNCONNECTED[31:0]),
        .M_AXI_IC_ARBAR(NLW_U0_M_AXI_IC_ARBAR_UNCONNECTED[1:0]),
        .M_AXI_IC_ARBURST(NLW_U0_M_AXI_IC_ARBURST_UNCONNECTED[1:0]),
        .M_AXI_IC_ARCACHE(NLW_U0_M_AXI_IC_ARCACHE_UNCONNECTED[3:0]),
        .M_AXI_IC_ARDOMAIN(NLW_U0_M_AXI_IC_ARDOMAIN_UNCONNECTED[1:0]),
        .M_AXI_IC_ARID(NLW_U0_M_AXI_IC_ARID_UNCONNECTED[0]),
        .M_AXI_IC_ARLEN(NLW_U0_M_AXI_IC_ARLEN_UNCONNECTED[7:0]),
        .M_AXI_IC_ARLOCK(NLW_U0_M_AXI_IC_ARLOCK_UNCONNECTED),
        .M_AXI_IC_ARPROT(NLW_U0_M_AXI_IC_ARPROT_UNCONNECTED[2:0]),
        .M_AXI_IC_ARQOS(NLW_U0_M_AXI_IC_ARQOS_UNCONNECTED[3:0]),
        .M_AXI_IC_ARREADY(1'b0),
        .M_AXI_IC_ARSIZE(NLW_U0_M_AXI_IC_ARSIZE_UNCONNECTED[2:0]),
        .M_AXI_IC_ARSNOOP(NLW_U0_M_AXI_IC_ARSNOOP_UNCONNECTED[3:0]),
        .M_AXI_IC_ARUSER(NLW_U0_M_AXI_IC_ARUSER_UNCONNECTED[4:0]),
        .M_AXI_IC_ARVALID(NLW_U0_M_AXI_IC_ARVALID_UNCONNECTED),
        .M_AXI_IC_AWADDR(NLW_U0_M_AXI_IC_AWADDR_UNCONNECTED[31:0]),
        .M_AXI_IC_AWBAR(NLW_U0_M_AXI_IC_AWBAR_UNCONNECTED[1:0]),
        .M_AXI_IC_AWBURST(NLW_U0_M_AXI_IC_AWBURST_UNCONNECTED[1:0]),
        .M_AXI_IC_AWCACHE(NLW_U0_M_AXI_IC_AWCACHE_UNCONNECTED[3:0]),
        .M_AXI_IC_AWDOMAIN(NLW_U0_M_AXI_IC_AWDOMAIN_UNCONNECTED[1:0]),
        .M_AXI_IC_AWID(NLW_U0_M_AXI_IC_AWID_UNCONNECTED[0]),
        .M_AXI_IC_AWLEN(NLW_U0_M_AXI_IC_AWLEN_UNCONNECTED[7:0]),
        .M_AXI_IC_AWLOCK(NLW_U0_M_AXI_IC_AWLOCK_UNCONNECTED),
        .M_AXI_IC_AWPROT(NLW_U0_M_AXI_IC_AWPROT_UNCONNECTED[2:0]),
        .M_AXI_IC_AWQOS(NLW_U0_M_AXI_IC_AWQOS_UNCONNECTED[3:0]),
        .M_AXI_IC_AWREADY(1'b0),
        .M_AXI_IC_AWSIZE(NLW_U0_M_AXI_IC_AWSIZE_UNCONNECTED[2:0]),
        .M_AXI_IC_AWSNOOP(NLW_U0_M_AXI_IC_AWSNOOP_UNCONNECTED[2:0]),
        .M_AXI_IC_AWUSER(NLW_U0_M_AXI_IC_AWUSER_UNCONNECTED[4:0]),
        .M_AXI_IC_AWVALID(NLW_U0_M_AXI_IC_AWVALID_UNCONNECTED),
        .M_AXI_IC_BID(1'b0),
        .M_AXI_IC_BREADY(NLW_U0_M_AXI_IC_BREADY_UNCONNECTED),
        .M_AXI_IC_BRESP({1'b0,1'b0}),
        .M_AXI_IC_BUSER(1'b0),
        .M_AXI_IC_BVALID(1'b0),
        .M_AXI_IC_CDDATA(NLW_U0_M_AXI_IC_CDDATA_UNCONNECTED[31:0]),
        .M_AXI_IC_CDLAST(NLW_U0_M_AXI_IC_CDLAST_UNCONNECTED),
        .M_AXI_IC_CDREADY(1'b0),
        .M_AXI_IC_CDVALID(NLW_U0_M_AXI_IC_CDVALID_UNCONNECTED),
        .M_AXI_IC_CRREADY(1'b0),
        .M_AXI_IC_CRRESP(NLW_U0_M_AXI_IC_CRRESP_UNCONNECTED[4:0]),
        .M_AXI_IC_CRVALID(NLW_U0_M_AXI_IC_CRVALID_UNCONNECTED),
        .M_AXI_IC_RACK(NLW_U0_M_AXI_IC_RACK_UNCONNECTED),
        .M_AXI_IC_RDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .M_AXI_IC_RID(1'b0),
        .M_AXI_IC_RLAST(1'b0),
        .M_AXI_IC_RREADY(NLW_U0_M_AXI_IC_RREADY_UNCONNECTED),
        .M_AXI_IC_RRESP({1'b0,1'b0}),
        .M_AXI_IC_RUSER(1'b0),
        .M_AXI_IC_RVALID(1'b0),
        .M_AXI_IC_WACK(NLW_U0_M_AXI_IC_WACK_UNCONNECTED),
        .M_AXI_IC_WDATA(NLW_U0_M_AXI_IC_WDATA_UNCONNECTED[31:0]),
        .M_AXI_IC_WLAST(NLW_U0_M_AXI_IC_WLAST_UNCONNECTED),
        .M_AXI_IC_WREADY(1'b0),
        .M_AXI_IC_WSTRB(NLW_U0_M_AXI_IC_WSTRB_UNCONNECTED[3:0]),
        .M_AXI_IC_WUSER(NLW_U0_M_AXI_IC_WUSER_UNCONNECTED[0]),
        .M_AXI_IC_WVALID(NLW_U0_M_AXI_IC_WVALID_UNCONNECTED),
        .M_AXI_IP_ARADDR(NLW_U0_M_AXI_IP_ARADDR_UNCONNECTED[31:0]),
        .M_AXI_IP_ARBURST(NLW_U0_M_AXI_IP_ARBURST_UNCONNECTED[1:0]),
        .M_AXI_IP_ARCACHE(NLW_U0_M_AXI_IP_ARCACHE_UNCONNECTED[3:0]),
        .M_AXI_IP_ARID(NLW_U0_M_AXI_IP_ARID_UNCONNECTED[0]),
        .M_AXI_IP_ARLEN(NLW_U0_M_AXI_IP_ARLEN_UNCONNECTED[7:0]),
        .M_AXI_IP_ARLOCK(NLW_U0_M_AXI_IP_ARLOCK_UNCONNECTED),
        .M_AXI_IP_ARPROT(NLW_U0_M_AXI_IP_ARPROT_UNCONNECTED[2:0]),
        .M_AXI_IP_ARQOS(NLW_U0_M_AXI_IP_ARQOS_UNCONNECTED[3:0]),
        .M_AXI_IP_ARREADY(1'b0),
        .M_AXI_IP_ARSIZE(NLW_U0_M_AXI_IP_ARSIZE_UNCONNECTED[2:0]),
        .M_AXI_IP_ARVALID(NLW_U0_M_AXI_IP_ARVALID_UNCONNECTED),
        .M_AXI_IP_AWADDR(NLW_U0_M_AXI_IP_AWADDR_UNCONNECTED[31:0]),
        .M_AXI_IP_AWBURST(NLW_U0_M_AXI_IP_AWBURST_UNCONNECTED[1:0]),
        .M_AXI_IP_AWCACHE(NLW_U0_M_AXI_IP_AWCACHE_UNCONNECTED[3:0]),
        .M_AXI_IP_AWID(NLW_U0_M_AXI_IP_AWID_UNCONNECTED[0]),
        .M_AXI_IP_AWLEN(NLW_U0_M_AXI_IP_AWLEN_UNCONNECTED[7:0]),
        .M_AXI_IP_AWLOCK(NLW_U0_M_AXI_IP_AWLOCK_UNCONNECTED),
        .M_AXI_IP_AWPROT(NLW_U0_M_AXI_IP_AWPROT_UNCONNECTED[2:0]),
        .M_AXI_IP_AWQOS(NLW_U0_M_AXI_IP_AWQOS_UNCONNECTED[3:0]),
        .M_AXI_IP_AWREADY(1'b0),
        .M_AXI_IP_AWSIZE(NLW_U0_M_AXI_IP_AWSIZE_UNCONNECTED[2:0]),
        .M_AXI_IP_AWVALID(NLW_U0_M_AXI_IP_AWVALID_UNCONNECTED),
        .M_AXI_IP_BID(1'b0),
        .M_AXI_IP_BREADY(NLW_U0_M_AXI_IP_BREADY_UNCONNECTED),
        .M_AXI_IP_BRESP({1'b0,1'b0}),
        .M_AXI_IP_BVALID(1'b0),
        .M_AXI_IP_RDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .M_AXI_IP_RID(1'b0),
        .M_AXI_IP_RLAST(1'b0),
        .M_AXI_IP_RREADY(NLW_U0_M_AXI_IP_RREADY_UNCONNECTED),
        .M_AXI_IP_RRESP({1'b0,1'b0}),
        .M_AXI_IP_RVALID(1'b0),
        .M_AXI_IP_WDATA(NLW_U0_M_AXI_IP_WDATA_UNCONNECTED[31:0]),
        .M_AXI_IP_WLAST(NLW_U0_M_AXI_IP_WLAST_UNCONNECTED),
        .M_AXI_IP_WREADY(1'b0),
        .M_AXI_IP_WSTRB(NLW_U0_M_AXI_IP_WSTRB_UNCONNECTED[3:0]),
        .M_AXI_IP_WVALID(NLW_U0_M_AXI_IP_WVALID_UNCONNECTED),
        .Mb_Reset(1'b0),
        .Non_Secure(Non_Secure),
        .Pause(Pause),
        .Pause_Ack(Pause_Ack),
        .RAM_From(NLW_U0_RAM_From_UNCONNECTED[255:0]),
        .RAM_To({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Read_Strobe(Read_Strobe),
        .Reset(Reset),
        .Reset_Mode(Reset_Mode),
        .S0_AXIS_TDATA(S0_AXIS_TDATA),
        .S0_AXIS_TLAST(S0_AXIS_TLAST),
        .S0_AXIS_TREADY(S0_AXIS_TREADY),
        .S0_AXIS_TVALID(S0_AXIS_TVALID),
        .S10_AXIS_TDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S10_AXIS_TLAST(1'b0),
        .S10_AXIS_TREADY(NLW_U0_S10_AXIS_TREADY_UNCONNECTED),
        .S10_AXIS_TVALID(1'b0),
        .S11_AXIS_TDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S11_AXIS_TLAST(1'b0),
        .S11_AXIS_TREADY(NLW_U0_S11_AXIS_TREADY_UNCONNECTED),
        .S11_AXIS_TVALID(1'b0),
        .S12_AXIS_TDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S12_AXIS_TLAST(1'b0),
        .S12_AXIS_TREADY(NLW_U0_S12_AXIS_TREADY_UNCONNECTED),
        .S12_AXIS_TVALID(1'b0),
        .S13_AXIS_TDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S13_AXIS_TLAST(1'b0),
        .S13_AXIS_TREADY(NLW_U0_S13_AXIS_TREADY_UNCONNECTED),
        .S13_AXIS_TVALID(1'b0),
        .S14_AXIS_TDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S14_AXIS_TLAST(1'b0),
        .S14_AXIS_TREADY(NLW_U0_S14_AXIS_TREADY_UNCONNECTED),
        .S14_AXIS_TVALID(1'b0),
        .S15_AXIS_TDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S15_AXIS_TLAST(1'b0),
        .S15_AXIS_TREADY(NLW_U0_S15_AXIS_TREADY_UNCONNECTED),
        .S15_AXIS_TVALID(1'b0),
        .S1_AXIS_TDATA(S1_AXIS_TDATA),
        .S1_AXIS_TLAST(S1_AXIS_TLAST),
        .S1_AXIS_TREADY(S1_AXIS_TREADY),
        .S1_AXIS_TVALID(S1_AXIS_TVALID),
        .S2_AXIS_TDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S2_AXIS_TLAST(1'b0),
        .S2_AXIS_TREADY(NLW_U0_S2_AXIS_TREADY_UNCONNECTED),
        .S2_AXIS_TVALID(1'b0),
        .S3_AXIS_TDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S3_AXIS_TLAST(1'b0),
        .S3_AXIS_TREADY(NLW_U0_S3_AXIS_TREADY_UNCONNECTED),
        .S3_AXIS_TVALID(1'b0),
        .S4_AXIS_TDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S4_AXIS_TLAST(1'b0),
        .S4_AXIS_TREADY(NLW_U0_S4_AXIS_TREADY_UNCONNECTED),
        .S4_AXIS_TVALID(1'b0),
        .S5_AXIS_TDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S5_AXIS_TLAST(1'b0),
        .S5_AXIS_TREADY(NLW_U0_S5_AXIS_TREADY_UNCONNECTED),
        .S5_AXIS_TVALID(1'b0),
        .S6_AXIS_TDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S6_AXIS_TLAST(1'b0),
        .S6_AXIS_TREADY(NLW_U0_S6_AXIS_TREADY_UNCONNECTED),
        .S6_AXIS_TVALID(1'b0),
        .S7_AXIS_TDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S7_AXIS_TLAST(1'b0),
        .S7_AXIS_TREADY(NLW_U0_S7_AXIS_TREADY_UNCONNECTED),
        .S7_AXIS_TVALID(1'b0),
        .S8_AXIS_TDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S8_AXIS_TLAST(1'b0),
        .S8_AXIS_TREADY(NLW_U0_S8_AXIS_TREADY_UNCONNECTED),
        .S8_AXIS_TVALID(1'b0),
        .S9_AXIS_TDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S9_AXIS_TLAST(1'b0),
        .S9_AXIS_TREADY(NLW_U0_S9_AXIS_TREADY_UNCONNECTED),
        .S9_AXIS_TVALID(1'b0),
        .Scan_En(1'b0),
        .Scan_Reset(1'b0),
        .Scan_Reset_Sel(1'b0),
        .Sleep(Sleep),
        .Suspend(Suspend),
        .Trace_DCache_Hit(NLW_U0_Trace_DCache_Hit_UNCONNECTED),
        .Trace_DCache_Rdy(NLW_U0_Trace_DCache_Rdy_UNCONNECTED),
        .Trace_DCache_Read(NLW_U0_Trace_DCache_Read_UNCONNECTED),
        .Trace_DCache_Req(NLW_U0_Trace_DCache_Req_UNCONNECTED),
        .Trace_Data_Access(NLW_U0_Trace_Data_Access_UNCONNECTED),
        .Trace_Data_Address(NLW_U0_Trace_Data_Address_UNCONNECTED[0:31]),
        .Trace_Data_Byte_Enable(NLW_U0_Trace_Data_Byte_Enable_UNCONNECTED[0:3]),
        .Trace_Data_Read(NLW_U0_Trace_Data_Read_UNCONNECTED),
        .Trace_Data_Write(NLW_U0_Trace_Data_Write_UNCONNECTED),
        .Trace_Data_Write_Value(NLW_U0_Trace_Data_Write_Value_UNCONNECTED[0:31]),
        .Trace_Delay_Slot(NLW_U0_Trace_Delay_Slot_UNCONNECTED),
        .Trace_EX_PipeRun(NLW_U0_Trace_EX_PipeRun_UNCONNECTED),
        .Trace_Exception_Kind(NLW_U0_Trace_Exception_Kind_UNCONNECTED[0:4]),
        .Trace_Exception_Taken(NLW_U0_Trace_Exception_Taken_UNCONNECTED),
        .Trace_ICache_Hit(NLW_U0_Trace_ICache_Hit_UNCONNECTED),
        .Trace_ICache_Rdy(NLW_U0_Trace_ICache_Rdy_UNCONNECTED),
        .Trace_ICache_Req(NLW_U0_Trace_ICache_Req_UNCONNECTED),
        .Trace_Instruction(NLW_U0_Trace_Instruction_UNCONNECTED[0:31]),
        .Trace_Jump_Hit(NLW_U0_Trace_Jump_Hit_UNCONNECTED),
        .Trace_Jump_Taken(NLW_U0_Trace_Jump_Taken_UNCONNECTED),
        .Trace_MB_Halted(NLW_U0_Trace_MB_Halted_UNCONNECTED),
        .Trace_MEM_PipeRun(NLW_U0_Trace_MEM_PipeRun_UNCONNECTED),
        .Trace_MSR_Reg(NLW_U0_Trace_MSR_Reg_UNCONNECTED[0:14]),
        .Trace_New_Reg_Value(NLW_U0_Trace_New_Reg_Value_UNCONNECTED[0:31]),
        .Trace_OF_PipeRun(NLW_U0_Trace_OF_PipeRun_UNCONNECTED),
        .Trace_PC(NLW_U0_Trace_PC_UNCONNECTED[0:31]),
        .Trace_PID_Reg(NLW_U0_Trace_PID_Reg_UNCONNECTED[0:7]),
        .Trace_Reg_Addr(NLW_U0_Trace_Reg_Addr_UNCONNECTED[0:4]),
        .Trace_Reg_Write(NLW_U0_Trace_Reg_Write_UNCONNECTED),
        .Trace_Valid_Instr(NLW_U0_Trace_Valid_Instr_UNCONNECTED),
        .Wakeup(Wakeup),
        .Write_Strobe(Write_Strobe));
endmodule

module block_design_microblaze_0_0_ALU
   (LO,
    ALU_Result,
    carry_In,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31] ,
    Unsigned_Op,
    Op2,
    alu_Op,
    Shifted,
    S,
    \Using_FPGA.Native_I2 ,
    Op1_Shift,
    B,
    \Using_FPGA.Native_I2_0 ,
    EX_Op1,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[4] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[5] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[6] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[7] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[8] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[9] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[10] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[11] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[12] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[13] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[14] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[15] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[16] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[17] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[18] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[19] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[20] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[21] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[22] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[23] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[24] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[25] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[26] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[27] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[28] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[29] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30]_0 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5);
  output LO;
  output [0:31]ALU_Result;
  input carry_In;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31] ;
  input Unsigned_Op;
  input Op2;
  input [0:1]alu_Op;
  input Shifted;
  input S;
  input \Using_FPGA.Native_I2 ;
  input Op1_Shift;
  input [15:0]B;
  input \Using_FPGA.Native_I2_0 ;
  input EX_Op1;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[4] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[5] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[6] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[7] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[8] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[9] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[10] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[11] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[12] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[13] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[14] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[15] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[16] ;
  input [13:0]\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[17] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[18] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[19] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[20] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[21] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[22] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[23] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[24] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[25] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[26] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[27] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[28] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[29] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30]_0 ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;

  wire [0:31]ALU_Result;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[10] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[11] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[12] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[13] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[14] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[15] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[16] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[17] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[18] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[19] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[20] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[21] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[22] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[23] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[24] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[25] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[26] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[27] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[28] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[29] ;
  wire [13:0]\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30]_0 ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[4] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[5] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[6] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[7] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[8] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[9] ;
  wire [15:0]B;
  wire EX_Op1;
  wire LO;
  wire Op1_Shift;
  wire Op2;
  wire S;
  wire Shifted;
  wire Unsigned_Op;
  wire \Using_FPGA.Native_I2 ;
  wire \Using_FPGA.Native_I2_0 ;
  wire [0:1]alu_Op;
  wire alu_carry_1;
  wire alu_carry_10;
  wire alu_carry_11;
  wire alu_carry_12;
  wire alu_carry_13;
  wire alu_carry_14;
  wire alu_carry_15;
  wire alu_carry_16;
  wire alu_carry_17;
  wire alu_carry_18;
  wire alu_carry_19;
  wire alu_carry_2;
  wire alu_carry_20;
  wire alu_carry_21;
  wire alu_carry_22;
  wire alu_carry_23;
  wire alu_carry_24;
  wire alu_carry_25;
  wire alu_carry_26;
  wire alu_carry_27;
  wire alu_carry_28;
  wire alu_carry_29;
  wire alu_carry_3;
  wire alu_carry_30;
  wire alu_carry_31;
  wire alu_carry_4;
  wire alu_carry_5;
  wire alu_carry_6;
  wire alu_carry_7;
  wire alu_carry_8;
  wire alu_carry_9;
  wire alu_carry_in;
  wire carry_In;
  wire control_carry;
  wire \^lopt ;
  wire \^lopt_1 ;
  wire lopt_10;
  wire lopt_100;
  wire lopt_101;
  wire lopt_11;
  wire lopt_12;
  wire lopt_13;
  wire lopt_14;
  wire lopt_15;
  wire lopt_16;
  wire lopt_17;
  wire lopt_18;
  wire lopt_19;
  wire \^lopt_2 ;
  wire lopt_20;
  wire lopt_21;
  wire lopt_22;
  wire lopt_23;
  wire lopt_24;
  wire lopt_25;
  wire lopt_26;
  wire lopt_27;
  wire lopt_28;
  wire lopt_29;
  wire \^lopt_3 ;
  wire lopt_30;
  wire lopt_31;
  wire lopt_32;
  wire lopt_33;
  wire lopt_34;
  wire lopt_35;
  wire lopt_36;
  wire lopt_37;
  wire lopt_38;
  wire lopt_39;
  wire \^lopt_4 ;
  wire lopt_40;
  wire lopt_41;
  wire lopt_42;
  wire lopt_43;
  wire lopt_44;
  wire lopt_45;
  wire lopt_46;
  wire lopt_47;
  wire lopt_48;
  wire lopt_49;
  wire \^lopt_5 ;
  wire lopt_50;
  wire lopt_51;
  wire lopt_52;
  wire lopt_53;
  wire lopt_54;
  wire lopt_55;
  wire lopt_56;
  wire lopt_57;
  wire lopt_58;
  wire lopt_59;
  wire lopt_6;
  wire lopt_60;
  wire lopt_61;
  wire lopt_62;
  wire lopt_63;
  wire lopt_64;
  wire lopt_65;
  wire lopt_66;
  wire lopt_67;
  wire lopt_68;
  wire lopt_69;
  wire lopt_7;
  wire lopt_70;
  wire lopt_71;
  wire lopt_72;
  wire lopt_73;
  wire lopt_74;
  wire lopt_75;
  wire lopt_76;
  wire lopt_77;
  wire lopt_78;
  wire lopt_79;
  wire lopt_8;
  wire lopt_80;
  wire lopt_81;
  wire lopt_82;
  wire lopt_83;
  wire lopt_84;
  wire lopt_85;
  wire lopt_86;
  wire lopt_87;
  wire lopt_88;
  wire lopt_89;
  wire lopt_9;
  wire lopt_90;
  wire lopt_91;
  wire lopt_92;
  wire lopt_93;
  wire lopt_94;
  wire lopt_95;
  wire lopt_96;
  wire lopt_97;
  wire lopt_98;
  wire lopt_99;

  assign lopt = lopt_96;
  assign lopt_100 = lopt_4;
  assign lopt_101 = lopt_5;
  assign lopt_3 = lopt_99;
  assign lopt_97 = lopt_1;
  assign lopt_98 = lopt_2;
  block_design_microblaze_0_0_MB_MUXCY_962 \No_Carry_Decoding.CarryIn_MUXCY 
       (.CI(alu_carry_in),
        .carry_In(carry_In),
        .control_carry(control_carry),
        .lopt(\^lopt ),
        .lopt_1(\^lopt_1 ),
        .lopt_10(lopt_10),
        .lopt_11(lopt_11),
        .lopt_2(\^lopt_2 ),
        .lopt_3(\^lopt_3 ),
        .lopt_4(\^lopt_4 ),
        .lopt_5(\^lopt_5 ),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .lopt_9(lopt_9));
  block_design_microblaze_0_0_MB_LUT3__parameterized7 \No_Carry_Decoding.alu_carry_select_LUT 
       (.carry_In(carry_In),
        .control_carry(control_carry));
  block_design_microblaze_0_0_ALU_Bit__parameterized2 \Using_FPGA.ALL_Bits[0].ALU_Bit_I1 
       (.ALU_Result(ALU_Result[0]),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31] ),
        .LO(alu_carry_31),
        .Op2(Op2),
        .S(S),
        .Shifted(Shifted),
        .Unsigned_Op(Unsigned_Op),
        .\Using_FPGA.Native (LO),
        .alu_Op(alu_Op),
        .lopt(lopt_96),
        .lopt_1(lopt_97),
        .lopt_2(lopt_98),
        .lopt_3(lopt_99),
        .lopt_4(lopt_100),
        .lopt_5(lopt_101));
  block_design_microblaze_0_0_ALU_Bit \Using_FPGA.ALL_Bits[10].ALU_Bit_I1 
       (.ALU_Result(ALU_Result[10]),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[21] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30] [4]),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[21]_0 (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[21] ),
        .EX_CarryOut(alu_carry_22),
        .LO(alu_carry_21),
        .alu_Op(alu_Op),
        .lopt(lopt_63),
        .lopt_1(lopt_64),
        .lopt_2(lopt_65),
        .lopt_3(lopt_70));
  block_design_microblaze_0_0_ALU_Bit_963 \Using_FPGA.ALL_Bits[11].ALU_Bit_I1 
       (.ALU_Result(ALU_Result[11]),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[20] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30] [3]),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[20]_0 (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[20] ),
        .EX_CarryOut(alu_carry_21),
        .LO(alu_carry_20),
        .alu_Op(alu_Op),
        .lopt(lopt_60),
        .lopt_1(lopt_61),
        .lopt_2(lopt_62),
        .lopt_3(lopt_69));
  block_design_microblaze_0_0_ALU_Bit_964 \Using_FPGA.ALL_Bits[12].ALU_Bit_I1 
       (.ALU_Result(ALU_Result[12]),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[19] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30] [2]),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[19]_0 (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[19] ),
        .EX_CarryOut(alu_carry_20),
        .LO(alu_carry_19),
        .alu_Op(alu_Op),
        .lopt(lopt_60),
        .lopt_1(lopt_61),
        .lopt_10(lopt_70),
        .lopt_11(lopt_71),
        .lopt_2(lopt_62),
        .lopt_3(lopt_63),
        .lopt_4(lopt_64),
        .lopt_5(lopt_65),
        .lopt_6(lopt_66),
        .lopt_7(lopt_67),
        .lopt_8(lopt_68),
        .lopt_9(lopt_69));
  block_design_microblaze_0_0_ALU_Bit_965 \Using_FPGA.ALL_Bits[13].ALU_Bit_I1 
       (.ALU_Result(ALU_Result[13]),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[18] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30] [1]),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[18]_0 (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[18] ),
        .EX_CarryOut(alu_carry_19),
        .LO(alu_carry_18),
        .alu_Op(alu_Op),
        .lopt(lopt_54),
        .lopt_1(lopt_55),
        .lopt_2(lopt_56),
        .lopt_3(lopt_59));
  block_design_microblaze_0_0_ALU_Bit_966 \Using_FPGA.ALL_Bits[14].ALU_Bit_I1 
       (.ALU_Result(ALU_Result[14]),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[17] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30] [0]),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[17]_0 (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[17] ),
        .EX_CarryOut(alu_carry_18),
        .LO(alu_carry_17),
        .alu_Op(alu_Op),
        .lopt(lopt_51),
        .lopt_1(lopt_52),
        .lopt_2(lopt_53),
        .lopt_3(lopt_58));
  block_design_microblaze_0_0_ALU_Bit_967 \Using_FPGA.ALL_Bits[15].ALU_Bit_I1 
       (.ALU_Result(ALU_Result[15]),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[16] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[16] ),
        .B(B[15]),
        .EX_CarryOut(alu_carry_17),
        .LO(alu_carry_16),
        .alu_Op(alu_Op),
        .lopt(lopt_48),
        .lopt_1(lopt_49),
        .lopt_2(lopt_50),
        .lopt_3(lopt_57));
  block_design_microblaze_0_0_ALU_Bit_968 \Using_FPGA.ALL_Bits[16].ALU_Bit_I1 
       (.ALU_Result(ALU_Result[16]),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[15] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[15] ),
        .B(B[14]),
        .EX_CarryOut(alu_carry_16),
        .LO(alu_carry_15),
        .alu_Op(alu_Op),
        .lopt(lopt_48),
        .lopt_1(lopt_49),
        .lopt_10(lopt_58),
        .lopt_11(lopt_59),
        .lopt_2(lopt_50),
        .lopt_3(lopt_51),
        .lopt_4(lopt_52),
        .lopt_5(lopt_53),
        .lopt_6(lopt_54),
        .lopt_7(lopt_55),
        .lopt_8(lopt_56),
        .lopt_9(lopt_57));
  block_design_microblaze_0_0_ALU_Bit_969 \Using_FPGA.ALL_Bits[17].ALU_Bit_I1 
       (.ALU_Result(ALU_Result[17]),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[14] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[14] ),
        .B(B[13]),
        .EX_CarryOut(alu_carry_15),
        .LO(alu_carry_14),
        .alu_Op(alu_Op),
        .lopt(lopt_42),
        .lopt_1(lopt_43),
        .lopt_2(lopt_44),
        .lopt_3(lopt_47));
  block_design_microblaze_0_0_ALU_Bit_970 \Using_FPGA.ALL_Bits[18].ALU_Bit_I1 
       (.ALU_Result(ALU_Result[18]),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[13] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[13] ),
        .B(B[12]),
        .EX_CarryOut(alu_carry_14),
        .LO(alu_carry_13),
        .alu_Op(alu_Op),
        .lopt(lopt_39),
        .lopt_1(lopt_40),
        .lopt_2(lopt_41),
        .lopt_3(lopt_46));
  block_design_microblaze_0_0_ALU_Bit_971 \Using_FPGA.ALL_Bits[19].ALU_Bit_I1 
       (.ALU_Result(ALU_Result[19]),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[12] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[12] ),
        .B(B[11]),
        .EX_CarryOut(alu_carry_13),
        .LO(alu_carry_12),
        .alu_Op(alu_Op),
        .lopt(lopt_36),
        .lopt_1(lopt_37),
        .lopt_2(lopt_38),
        .lopt_3(lopt_45));
  block_design_microblaze_0_0_ALU_Bit_972 \Using_FPGA.ALL_Bits[1].ALU_Bit_I1 
       (.ALU_Result(ALU_Result[1]),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30] [13]),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30]_0 (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30]_0 ),
        .EX_CarryOut(alu_carry_31),
        .LO(alu_carry_30),
        .alu_Op(alu_Op),
        .lopt(lopt_90),
        .lopt_1(lopt_91),
        .lopt_2(lopt_92),
        .lopt_3(lopt_95));
  block_design_microblaze_0_0_ALU_Bit_973 \Using_FPGA.ALL_Bits[20].ALU_Bit_I1 
       (.ALU_Result(ALU_Result[20]),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[11] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[11] ),
        .B(B[10]),
        .EX_CarryOut(alu_carry_12),
        .LO(alu_carry_11),
        .alu_Op(alu_Op),
        .lopt(lopt_36),
        .lopt_1(lopt_37),
        .lopt_10(lopt_46),
        .lopt_11(lopt_47),
        .lopt_2(lopt_38),
        .lopt_3(lopt_39),
        .lopt_4(lopt_40),
        .lopt_5(lopt_41),
        .lopt_6(lopt_42),
        .lopt_7(lopt_43),
        .lopt_8(lopt_44),
        .lopt_9(lopt_45));
  block_design_microblaze_0_0_ALU_Bit_974 \Using_FPGA.ALL_Bits[21].ALU_Bit_I1 
       (.ALU_Result(ALU_Result[21]),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[10] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[10] ),
        .B(B[9]),
        .EX_CarryOut(alu_carry_11),
        .LO(alu_carry_10),
        .alu_Op(alu_Op),
        .lopt(lopt_30),
        .lopt_1(lopt_31),
        .lopt_2(lopt_32),
        .lopt_3(lopt_35));
  block_design_microblaze_0_0_ALU_Bit_975 \Using_FPGA.ALL_Bits[22].ALU_Bit_I1 
       (.ALU_Result(ALU_Result[22]),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[9] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[9] ),
        .B(B[8]),
        .EX_CarryOut(alu_carry_10),
        .LO(alu_carry_9),
        .alu_Op(alu_Op),
        .lopt(lopt_27),
        .lopt_1(lopt_28),
        .lopt_2(lopt_29),
        .lopt_3(lopt_34));
  block_design_microblaze_0_0_ALU_Bit_976 \Using_FPGA.ALL_Bits[23].ALU_Bit_I1 
       (.ALU_Result(ALU_Result[23]),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[8] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[8] ),
        .B(B[7]),
        .EX_CarryOut(alu_carry_9),
        .LO(alu_carry_8),
        .alu_Op(alu_Op),
        .lopt(lopt_24),
        .lopt_1(lopt_25),
        .lopt_2(lopt_26),
        .lopt_3(lopt_33));
  block_design_microblaze_0_0_ALU_Bit_977 \Using_FPGA.ALL_Bits[24].ALU_Bit_I1 
       (.ALU_Result(ALU_Result[24]),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[7] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[7] ),
        .B(B[6]),
        .EX_CarryOut(alu_carry_8),
        .LO(alu_carry_7),
        .alu_Op(alu_Op),
        .lopt(lopt_24),
        .lopt_1(lopt_25),
        .lopt_10(lopt_34),
        .lopt_11(lopt_35),
        .lopt_2(lopt_26),
        .lopt_3(lopt_27),
        .lopt_4(lopt_28),
        .lopt_5(lopt_29),
        .lopt_6(lopt_30),
        .lopt_7(lopt_31),
        .lopt_8(lopt_32),
        .lopt_9(lopt_33));
  block_design_microblaze_0_0_ALU_Bit_978 \Using_FPGA.ALL_Bits[25].ALU_Bit_I1 
       (.ALU_Result(ALU_Result[25]),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[6] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[6] ),
        .B(B[5]),
        .EX_CarryOut(alu_carry_7),
        .LO(alu_carry_6),
        .alu_Op(alu_Op),
        .lopt(lopt_18),
        .lopt_1(lopt_19),
        .lopt_2(lopt_20),
        .lopt_3(lopt_23));
  block_design_microblaze_0_0_ALU_Bit_979 \Using_FPGA.ALL_Bits[26].ALU_Bit_I1 
       (.ALU_Result(ALU_Result[26]),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[5] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[5] ),
        .B(B[4]),
        .EX_CarryOut(alu_carry_6),
        .LO(alu_carry_5),
        .alu_Op(alu_Op),
        .lopt(lopt_15),
        .lopt_1(lopt_16),
        .lopt_2(lopt_17),
        .lopt_3(lopt_22));
  block_design_microblaze_0_0_ALU_Bit_980 \Using_FPGA.ALL_Bits[27].ALU_Bit_I1 
       (.ALU_Result(ALU_Result[27]),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[4] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[4] ),
        .B(B[3]),
        .EX_CarryOut(alu_carry_5),
        .LO(alu_carry_4),
        .alu_Op(alu_Op),
        .lopt(lopt_12),
        .lopt_1(lopt_13),
        .lopt_2(lopt_14),
        .lopt_3(lopt_21));
  block_design_microblaze_0_0_ALU_Bit_981 \Using_FPGA.ALL_Bits[28].ALU_Bit_I1 
       (.ALU_Result(ALU_Result[28]),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3] ),
        .B(B[2]),
        .EX_CarryOut(alu_carry_4),
        .LO(alu_carry_3),
        .alu_Op(alu_Op),
        .lopt(lopt_12),
        .lopt_1(lopt_13),
        .lopt_10(lopt_22),
        .lopt_11(lopt_23),
        .lopt_2(lopt_14),
        .lopt_3(lopt_15),
        .lopt_4(lopt_16),
        .lopt_5(lopt_17),
        .lopt_6(lopt_18),
        .lopt_7(lopt_19),
        .lopt_8(lopt_20),
        .lopt_9(lopt_21));
  block_design_microblaze_0_0_ALU_Bit_982 \Using_FPGA.ALL_Bits[29].ALU_Bit_I1 
       (.ALU_Result(ALU_Result[29]),
        .B(B[1]),
        .EX_CarryOut(alu_carry_3),
        .EX_Op1(EX_Op1),
        .LO(alu_carry_2),
        .alu_Op(alu_Op),
        .lopt(lopt_6),
        .lopt_1(lopt_7),
        .lopt_2(lopt_8),
        .lopt_3(lopt_11));
  block_design_microblaze_0_0_ALU_Bit_983 \Using_FPGA.ALL_Bits[2].ALU_Bit_I1 
       (.ALU_Result(ALU_Result[2]),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[29] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30] [12]),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[29]_0 (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[29] ),
        .EX_CarryOut(alu_carry_30),
        .LO(alu_carry_29),
        .alu_Op(alu_Op),
        .lopt(lopt_87),
        .lopt_1(lopt_88),
        .lopt_2(lopt_89),
        .lopt_3(lopt_94));
  block_design_microblaze_0_0_ALU_Bit_984 \Using_FPGA.ALL_Bits[30].ALU_Bit_I1 
       (.ALU_Result(ALU_Result[30]),
        .B(B[0]),
        .EX_CarryOut(alu_carry_2),
        .LO(alu_carry_1),
        .\Using_FPGA.Native_I2 (\Using_FPGA.Native_I2_0 ),
        .alu_Op(alu_Op),
        .lopt(\^lopt_3 ),
        .lopt_1(\^lopt_4 ),
        .lopt_2(\^lopt_5 ),
        .lopt_3(lopt_10));
  block_design_microblaze_0_0_ALU_Bit_985 \Using_FPGA.ALL_Bits[31].ALU_Bit_I1 
       (.ALU_Result(ALU_Result[31]),
        .EX_CarryIn(alu_carry_in),
        .EX_CarryOut(alu_carry_1),
        .Op1_Shift(Op1_Shift),
        .\Using_FPGA.Native_I2 (\Using_FPGA.Native_I2 ),
        .alu_Op(alu_Op),
        .lopt(\^lopt ),
        .lopt_1(\^lopt_1 ),
        .lopt_2(\^lopt_2 ),
        .lopt_3(lopt_9));
  block_design_microblaze_0_0_ALU_Bit_986 \Using_FPGA.ALL_Bits[3].ALU_Bit_I1 
       (.ALU_Result(ALU_Result[3]),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[28] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30] [11]),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[28]_0 (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[28] ),
        .EX_CarryOut(alu_carry_29),
        .LO(alu_carry_28),
        .alu_Op(alu_Op),
        .lopt(lopt_84),
        .lopt_1(lopt_85),
        .lopt_2(lopt_86),
        .lopt_3(lopt_93));
  block_design_microblaze_0_0_ALU_Bit_987 \Using_FPGA.ALL_Bits[4].ALU_Bit_I1 
       (.ALU_Result(ALU_Result[4]),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[27] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30] [10]),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[27]_0 (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[27] ),
        .EX_CarryOut(alu_carry_28),
        .LO(alu_carry_27),
        .alu_Op(alu_Op),
        .lopt(lopt_84),
        .lopt_1(lopt_85),
        .lopt_10(lopt_94),
        .lopt_11(lopt_95),
        .lopt_2(lopt_86),
        .lopt_3(lopt_87),
        .lopt_4(lopt_88),
        .lopt_5(lopt_89),
        .lopt_6(lopt_90),
        .lopt_7(lopt_91),
        .lopt_8(lopt_92),
        .lopt_9(lopt_93));
  block_design_microblaze_0_0_ALU_Bit_988 \Using_FPGA.ALL_Bits[5].ALU_Bit_I1 
       (.ALU_Result(ALU_Result[5]),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[26] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30] [9]),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[26]_0 (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[26] ),
        .EX_CarryOut(alu_carry_27),
        .LO(alu_carry_26),
        .alu_Op(alu_Op),
        .lopt(lopt_78),
        .lopt_1(lopt_79),
        .lopt_2(lopt_80),
        .lopt_3(lopt_83));
  block_design_microblaze_0_0_ALU_Bit_989 \Using_FPGA.ALL_Bits[6].ALU_Bit_I1 
       (.ALU_Result(ALU_Result[6]),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[25] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30] [8]),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[25]_0 (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[25] ),
        .EX_CarryOut(alu_carry_26),
        .LO(alu_carry_25),
        .alu_Op(alu_Op),
        .lopt(lopt_75),
        .lopt_1(lopt_76),
        .lopt_2(lopt_77),
        .lopt_3(lopt_82));
  block_design_microblaze_0_0_ALU_Bit_990 \Using_FPGA.ALL_Bits[7].ALU_Bit_I1 
       (.ALU_Result(ALU_Result[7]),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[24] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30] [7]),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[24]_0 (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[24] ),
        .EX_CarryOut(alu_carry_25),
        .LO(alu_carry_24),
        .alu_Op(alu_Op),
        .lopt(lopt_72),
        .lopt_1(lopt_73),
        .lopt_2(lopt_74),
        .lopt_3(lopt_81));
  block_design_microblaze_0_0_ALU_Bit_991 \Using_FPGA.ALL_Bits[8].ALU_Bit_I1 
       (.ALU_Result(ALU_Result[8]),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[23] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30] [6]),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[23]_0 (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[23] ),
        .EX_CarryOut(alu_carry_24),
        .LO(alu_carry_23),
        .alu_Op(alu_Op),
        .lopt(lopt_72),
        .lopt_1(lopt_73),
        .lopt_10(lopt_82),
        .lopt_11(lopt_83),
        .lopt_2(lopt_74),
        .lopt_3(lopt_75),
        .lopt_4(lopt_76),
        .lopt_5(lopt_77),
        .lopt_6(lopt_78),
        .lopt_7(lopt_79),
        .lopt_8(lopt_80),
        .lopt_9(lopt_81));
  block_design_microblaze_0_0_ALU_Bit_992 \Using_FPGA.ALL_Bits[9].ALU_Bit_I1 
       (.ALU_Result(ALU_Result[9]),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[22] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30] [5]),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[22]_0 (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[22] ),
        .EX_CarryIn(alu_carry_22),
        .EX_CarryOut(alu_carry_23),
        .alu_Op(alu_Op),
        .lopt(lopt_66),
        .lopt_1(lopt_67),
        .lopt_2(lopt_68),
        .lopt_3(lopt_71));
endmodule

module block_design_microblaze_0_0_ALU_Bit
   (EX_CarryOut,
    ALU_Result,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[21] ,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[21]_0 ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]ALU_Result;
  input [0:0]\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[21] ;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[21]_0 ;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ALU_Result;
  wire [0:0]\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[21] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[21]_0 ;
  wire EX_CarryOut;
  wire LO;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire \^lopt_1 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  block_design_microblaze_0_0_MB_LUT6_2__parameterized2_1052 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[21] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[21] ),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[21]_0 (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[21]_0 ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op));
  block_design_microblaze_0_0_MB_MUXCY_XORCY_1053 \Not_Last_Bit.MUXCY_XOR_I 
       (.ALU_Result(ALU_Result),
        .DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module block_design_microblaze_0_0_ALU_Bit_963
   (EX_CarryOut,
    ALU_Result,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[20] ,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[20]_0 ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]ALU_Result;
  input [0:0]\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[20] ;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[20]_0 ;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ALU_Result;
  wire [0:0]\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[20] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[20]_0 ;
  wire EX_CarryOut;
  wire LO;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire \^lopt_1 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  block_design_microblaze_0_0_MB_LUT6_2__parameterized2_1050 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[20] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[20] ),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[20]_0 (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[20]_0 ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op));
  block_design_microblaze_0_0_MB_MUXCY_XORCY_1051 \Not_Last_Bit.MUXCY_XOR_I 
       (.ALU_Result(ALU_Result),
        .DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module block_design_microblaze_0_0_ALU_Bit_964
   (EX_CarryOut,
    ALU_Result,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[19] ,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[19]_0 ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output EX_CarryOut;
  output [0:0]ALU_Result;
  input [0:0]\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[19] ;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[19]_0 ;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire [0:0]ALU_Result;
  wire [0:0]\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[19] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[19]_0 ;
  wire EX_CarryOut;
  wire LO;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire op2_is_1;

  block_design_microblaze_0_0_MB_LUT6_2__parameterized2_1048 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[19] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[19] ),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[19]_0 (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[19]_0 ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op));
  block_design_microblaze_0_0_MB_MUXCY_XORCY_1049 \Not_Last_Bit.MUXCY_XOR_I 
       (.ALU_Result(ALU_Result),
        .DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_10(lopt_10),
        .lopt_11(lopt_11),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .lopt_9(lopt_9));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module block_design_microblaze_0_0_ALU_Bit_965
   (EX_CarryOut,
    ALU_Result,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[18] ,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[18]_0 ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]ALU_Result;
  input [0:0]\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[18] ;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[18]_0 ;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ALU_Result;
  wire [0:0]\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[18] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[18]_0 ;
  wire EX_CarryOut;
  wire LO;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire \^lopt_1 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  block_design_microblaze_0_0_MB_LUT6_2__parameterized2_1046 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[18] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[18] ),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[18]_0 (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[18]_0 ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op));
  block_design_microblaze_0_0_MB_MUXCY_XORCY_1047 \Not_Last_Bit.MUXCY_XOR_I 
       (.ALU_Result(ALU_Result),
        .DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module block_design_microblaze_0_0_ALU_Bit_966
   (EX_CarryOut,
    ALU_Result,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[17] ,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[17]_0 ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]ALU_Result;
  input [0:0]\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[17] ;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[17]_0 ;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ALU_Result;
  wire [0:0]\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[17] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[17]_0 ;
  wire EX_CarryOut;
  wire LO;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire \^lopt_1 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  block_design_microblaze_0_0_MB_LUT6_2__parameterized2_1044 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[17] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[17] ),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[17]_0 (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[17]_0 ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op));
  block_design_microblaze_0_0_MB_MUXCY_XORCY_1045 \Not_Last_Bit.MUXCY_XOR_I 
       (.ALU_Result(ALU_Result),
        .DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module block_design_microblaze_0_0_ALU_Bit_967
   (EX_CarryOut,
    ALU_Result,
    B,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[16] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]ALU_Result;
  input [0:0]B;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[16] ;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ALU_Result;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[16] ;
  wire [0:0]B;
  wire EX_CarryOut;
  wire LO;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire \^lopt_1 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  block_design_microblaze_0_0_MB_LUT6_2__parameterized2_1042 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[16] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[16] ),
        .B(B),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op));
  block_design_microblaze_0_0_MB_MUXCY_XORCY_1043 \Not_Last_Bit.MUXCY_XOR_I 
       (.ALU_Result(ALU_Result),
        .DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module block_design_microblaze_0_0_ALU_Bit_968
   (EX_CarryOut,
    ALU_Result,
    B,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[15] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output EX_CarryOut;
  output [0:0]ALU_Result;
  input [0:0]B;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[15] ;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire [0:0]ALU_Result;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[15] ;
  wire [0:0]B;
  wire EX_CarryOut;
  wire LO;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire op2_is_1;

  block_design_microblaze_0_0_MB_LUT6_2__parameterized2_1040 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[15] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[15] ),
        .B(B),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op));
  block_design_microblaze_0_0_MB_MUXCY_XORCY_1041 \Not_Last_Bit.MUXCY_XOR_I 
       (.ALU_Result(ALU_Result),
        .DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_10(lopt_10),
        .lopt_11(lopt_11),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .lopt_9(lopt_9));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module block_design_microblaze_0_0_ALU_Bit_969
   (EX_CarryOut,
    ALU_Result,
    B,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[14] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]ALU_Result;
  input [0:0]B;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[14] ;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ALU_Result;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[14] ;
  wire [0:0]B;
  wire EX_CarryOut;
  wire LO;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire \^lopt_1 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  block_design_microblaze_0_0_MB_LUT6_2__parameterized2_1038 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[14] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[14] ),
        .B(B),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op));
  block_design_microblaze_0_0_MB_MUXCY_XORCY_1039 \Not_Last_Bit.MUXCY_XOR_I 
       (.ALU_Result(ALU_Result),
        .DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module block_design_microblaze_0_0_ALU_Bit_970
   (EX_CarryOut,
    ALU_Result,
    B,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[13] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]ALU_Result;
  input [0:0]B;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[13] ;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ALU_Result;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[13] ;
  wire [0:0]B;
  wire EX_CarryOut;
  wire LO;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire \^lopt_1 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  block_design_microblaze_0_0_MB_LUT6_2__parameterized2_1036 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[13] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[13] ),
        .B(B),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op));
  block_design_microblaze_0_0_MB_MUXCY_XORCY_1037 \Not_Last_Bit.MUXCY_XOR_I 
       (.ALU_Result(ALU_Result),
        .DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module block_design_microblaze_0_0_ALU_Bit_971
   (EX_CarryOut,
    ALU_Result,
    B,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[12] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]ALU_Result;
  input [0:0]B;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[12] ;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ALU_Result;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[12] ;
  wire [0:0]B;
  wire EX_CarryOut;
  wire LO;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire \^lopt_1 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  block_design_microblaze_0_0_MB_LUT6_2__parameterized2_1034 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[12] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[12] ),
        .B(B),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op));
  block_design_microblaze_0_0_MB_MUXCY_XORCY_1035 \Not_Last_Bit.MUXCY_XOR_I 
       (.ALU_Result(ALU_Result),
        .DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module block_design_microblaze_0_0_ALU_Bit_972
   (EX_CarryOut,
    ALU_Result,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30] ,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30]_0 ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]ALU_Result;
  input [0:0]\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30] ;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30]_0 ;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ALU_Result;
  wire [0:0]\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30]_0 ;
  wire EX_CarryOut;
  wire LO;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire \^lopt_1 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  block_design_microblaze_0_0_MB_LUT6_2__parameterized2_1032 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30] ),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30]_0 (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30]_0 ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op));
  block_design_microblaze_0_0_MB_MUXCY_XORCY_1033 \Not_Last_Bit.MUXCY_XOR_I 
       (.ALU_Result(ALU_Result),
        .DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module block_design_microblaze_0_0_ALU_Bit_973
   (EX_CarryOut,
    ALU_Result,
    B,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[11] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output EX_CarryOut;
  output [0:0]ALU_Result;
  input [0:0]B;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[11] ;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire [0:0]ALU_Result;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[11] ;
  wire [0:0]B;
  wire EX_CarryOut;
  wire LO;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire op2_is_1;

  block_design_microblaze_0_0_MB_LUT6_2__parameterized2_1030 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[11] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[11] ),
        .B(B),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op));
  block_design_microblaze_0_0_MB_MUXCY_XORCY_1031 \Not_Last_Bit.MUXCY_XOR_I 
       (.ALU_Result(ALU_Result),
        .DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_10(lopt_10),
        .lopt_11(lopt_11),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .lopt_9(lopt_9));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module block_design_microblaze_0_0_ALU_Bit_974
   (EX_CarryOut,
    ALU_Result,
    B,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[10] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]ALU_Result;
  input [0:0]B;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[10] ;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ALU_Result;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[10] ;
  wire [0:0]B;
  wire EX_CarryOut;
  wire LO;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire \^lopt_1 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  block_design_microblaze_0_0_MB_LUT6_2__parameterized2_1028 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[10] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[10] ),
        .B(B),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op));
  block_design_microblaze_0_0_MB_MUXCY_XORCY_1029 \Not_Last_Bit.MUXCY_XOR_I 
       (.ALU_Result(ALU_Result),
        .DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module block_design_microblaze_0_0_ALU_Bit_975
   (EX_CarryOut,
    ALU_Result,
    B,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[9] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]ALU_Result;
  input [0:0]B;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[9] ;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ALU_Result;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[9] ;
  wire [0:0]B;
  wire EX_CarryOut;
  wire LO;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire \^lopt_1 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  block_design_microblaze_0_0_MB_LUT6_2__parameterized2_1026 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[9] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[9] ),
        .B(B),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op));
  block_design_microblaze_0_0_MB_MUXCY_XORCY_1027 \Not_Last_Bit.MUXCY_XOR_I 
       (.ALU_Result(ALU_Result),
        .DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module block_design_microblaze_0_0_ALU_Bit_976
   (EX_CarryOut,
    ALU_Result,
    B,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[8] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]ALU_Result;
  input [0:0]B;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[8] ;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ALU_Result;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[8] ;
  wire [0:0]B;
  wire EX_CarryOut;
  wire LO;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire \^lopt_1 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  block_design_microblaze_0_0_MB_LUT6_2__parameterized2_1024 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[8] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[8] ),
        .B(B),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op));
  block_design_microblaze_0_0_MB_MUXCY_XORCY_1025 \Not_Last_Bit.MUXCY_XOR_I 
       (.ALU_Result(ALU_Result),
        .DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module block_design_microblaze_0_0_ALU_Bit_977
   (EX_CarryOut,
    ALU_Result,
    B,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[7] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output EX_CarryOut;
  output [0:0]ALU_Result;
  input [0:0]B;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[7] ;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire [0:0]ALU_Result;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[7] ;
  wire [0:0]B;
  wire EX_CarryOut;
  wire LO;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire op2_is_1;

  block_design_microblaze_0_0_MB_LUT6_2__parameterized2_1022 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[7] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[7] ),
        .B(B),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op));
  block_design_microblaze_0_0_MB_MUXCY_XORCY_1023 \Not_Last_Bit.MUXCY_XOR_I 
       (.ALU_Result(ALU_Result),
        .DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_10(lopt_10),
        .lopt_11(lopt_11),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .lopt_9(lopt_9));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module block_design_microblaze_0_0_ALU_Bit_978
   (EX_CarryOut,
    ALU_Result,
    B,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[6] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]ALU_Result;
  input [0:0]B;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[6] ;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ALU_Result;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[6] ;
  wire [0:0]B;
  wire EX_CarryOut;
  wire LO;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire \^lopt_1 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  block_design_microblaze_0_0_MB_LUT6_2__parameterized2_1020 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[6] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[6] ),
        .B(B),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op));
  block_design_microblaze_0_0_MB_MUXCY_XORCY_1021 \Not_Last_Bit.MUXCY_XOR_I 
       (.ALU_Result(ALU_Result),
        .DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module block_design_microblaze_0_0_ALU_Bit_979
   (EX_CarryOut,
    ALU_Result,
    B,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[5] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]ALU_Result;
  input [0:0]B;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[5] ;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ALU_Result;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[5] ;
  wire [0:0]B;
  wire EX_CarryOut;
  wire LO;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire \^lopt_1 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  block_design_microblaze_0_0_MB_LUT6_2__parameterized2_1018 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[5] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[5] ),
        .B(B),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op));
  block_design_microblaze_0_0_MB_MUXCY_XORCY_1019 \Not_Last_Bit.MUXCY_XOR_I 
       (.ALU_Result(ALU_Result),
        .DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module block_design_microblaze_0_0_ALU_Bit_980
   (EX_CarryOut,
    ALU_Result,
    B,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[4] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]ALU_Result;
  input [0:0]B;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[4] ;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ALU_Result;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[4] ;
  wire [0:0]B;
  wire EX_CarryOut;
  wire LO;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire \^lopt_1 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  block_design_microblaze_0_0_MB_LUT6_2__parameterized2_1016 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[4] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[4] ),
        .B(B),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op));
  block_design_microblaze_0_0_MB_MUXCY_XORCY_1017 \Not_Last_Bit.MUXCY_XOR_I 
       (.ALU_Result(ALU_Result),
        .DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module block_design_microblaze_0_0_ALU_Bit_981
   (EX_CarryOut,
    ALU_Result,
    B,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output EX_CarryOut;
  output [0:0]ALU_Result;
  input [0:0]B;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3] ;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire [0:0]ALU_Result;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3] ;
  wire [0:0]B;
  wire EX_CarryOut;
  wire LO;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire op2_is_1;

  block_design_microblaze_0_0_MB_LUT6_2__parameterized2_1014 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3] ),
        .B(B),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op));
  block_design_microblaze_0_0_MB_MUXCY_XORCY_1015 \Not_Last_Bit.MUXCY_XOR_I 
       (.ALU_Result(ALU_Result),
        .DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_10(lopt_10),
        .lopt_11(lopt_11),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .lopt_9(lopt_9));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module block_design_microblaze_0_0_ALU_Bit_982
   (EX_CarryOut,
    ALU_Result,
    B,
    alu_Op,
    EX_Op1,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]ALU_Result;
  input [0:0]B;
  input [0:1]alu_Op;
  input EX_Op1;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ALU_Result;
  wire [0:0]B;
  wire EX_CarryOut;
  wire EX_Op1;
  wire LO;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire \^lopt_1 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  block_design_microblaze_0_0_MB_LUT6_2__parameterized2_1012 \Not_Last_Bit.I_ALU_LUT_V5 
       (.B(B),
        .DI(op2_is_1),
        .EX_Op1(EX_Op1),
        .S(alu_AddSub),
        .alu_Op(alu_Op));
  block_design_microblaze_0_0_MB_MUXCY_XORCY_1013 \Not_Last_Bit.MUXCY_XOR_I 
       (.ALU_Result(ALU_Result),
        .DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module block_design_microblaze_0_0_ALU_Bit_983
   (EX_CarryOut,
    ALU_Result,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[29] ,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[29]_0 ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]ALU_Result;
  input [0:0]\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[29] ;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[29]_0 ;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ALU_Result;
  wire [0:0]\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[29] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[29]_0 ;
  wire EX_CarryOut;
  wire LO;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire \^lopt_1 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  block_design_microblaze_0_0_MB_LUT6_2__parameterized2_1010 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[29] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[29] ),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[29]_0 (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[29]_0 ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op));
  block_design_microblaze_0_0_MB_MUXCY_XORCY_1011 \Not_Last_Bit.MUXCY_XOR_I 
       (.ALU_Result(ALU_Result),
        .DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module block_design_microblaze_0_0_ALU_Bit_984
   (EX_CarryOut,
    ALU_Result,
    B,
    alu_Op,
    \Using_FPGA.Native_I2 ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]ALU_Result;
  input [0:0]B;
  input [0:1]alu_Op;
  input \Using_FPGA.Native_I2 ;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ALU_Result;
  wire [0:0]B;
  wire EX_CarryOut;
  wire LO;
  wire \Using_FPGA.Native_I2 ;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire \^lopt_1 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  block_design_microblaze_0_0_MB_LUT6_2__parameterized2_1008 \Not_Last_Bit.I_ALU_LUT_V5 
       (.B(B),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .\Using_FPGA.Native_I2 (\Using_FPGA.Native_I2 ),
        .alu_Op(alu_Op));
  block_design_microblaze_0_0_MB_MUXCY_XORCY_1009 \Not_Last_Bit.MUXCY_XOR_I 
       (.ALU_Result(ALU_Result),
        .DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module block_design_microblaze_0_0_ALU_Bit_985
   (EX_CarryOut,
    ALU_Result,
    \Using_FPGA.Native_I2 ,
    alu_Op,
    Op1_Shift,
    EX_CarryIn,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]ALU_Result;
  input \Using_FPGA.Native_I2 ;
  input [0:1]alu_Op;
  input Op1_Shift;
  input EX_CarryIn;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ALU_Result;
  wire EX_CarryIn;
  wire EX_CarryOut;
  wire Op1_Shift;
  wire \Using_FPGA.Native_I2 ;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire \^lopt_1 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  block_design_microblaze_0_0_MB_LUT6_2__parameterized2_1006 \Not_Last_Bit.I_ALU_LUT_V5 
       (.DI(op2_is_1),
        .Op1_Shift(Op1_Shift),
        .S(alu_AddSub),
        .\Using_FPGA.Native_I2 (\Using_FPGA.Native_I2 ),
        .alu_Op(alu_Op));
  block_design_microblaze_0_0_MB_MUXCY_XORCY_1007 \Not_Last_Bit.MUXCY_XOR_I 
       (.ALU_Result(ALU_Result),
        .DI(op2_is_1),
        .EX_CarryIn(EX_CarryIn),
        .EX_CarryOut(EX_CarryOut),
        .S(alu_AddSub),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module block_design_microblaze_0_0_ALU_Bit_986
   (EX_CarryOut,
    ALU_Result,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[28] ,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[28]_0 ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]ALU_Result;
  input [0:0]\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[28] ;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[28]_0 ;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ALU_Result;
  wire [0:0]\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[28] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[28]_0 ;
  wire EX_CarryOut;
  wire LO;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire \^lopt_1 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  block_design_microblaze_0_0_MB_LUT6_2__parameterized2_1004 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[28] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[28] ),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[28]_0 (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[28]_0 ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op));
  block_design_microblaze_0_0_MB_MUXCY_XORCY_1005 \Not_Last_Bit.MUXCY_XOR_I 
       (.ALU_Result(ALU_Result),
        .DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module block_design_microblaze_0_0_ALU_Bit_987
   (EX_CarryOut,
    ALU_Result,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[27] ,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[27]_0 ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output EX_CarryOut;
  output [0:0]ALU_Result;
  input [0:0]\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[27] ;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[27]_0 ;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire [0:0]ALU_Result;
  wire [0:0]\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[27] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[27]_0 ;
  wire EX_CarryOut;
  wire LO;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire op2_is_1;

  block_design_microblaze_0_0_MB_LUT6_2__parameterized2_1002 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[27] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[27] ),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[27]_0 (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[27]_0 ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op));
  block_design_microblaze_0_0_MB_MUXCY_XORCY_1003 \Not_Last_Bit.MUXCY_XOR_I 
       (.ALU_Result(ALU_Result),
        .DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_10(lopt_10),
        .lopt_11(lopt_11),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .lopt_9(lopt_9));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module block_design_microblaze_0_0_ALU_Bit_988
   (EX_CarryOut,
    ALU_Result,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[26] ,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[26]_0 ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]ALU_Result;
  input [0:0]\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[26] ;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[26]_0 ;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ALU_Result;
  wire [0:0]\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[26] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[26]_0 ;
  wire EX_CarryOut;
  wire LO;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire \^lopt_1 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  block_design_microblaze_0_0_MB_LUT6_2__parameterized2_1000 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[26] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[26] ),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[26]_0 (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[26]_0 ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op));
  block_design_microblaze_0_0_MB_MUXCY_XORCY_1001 \Not_Last_Bit.MUXCY_XOR_I 
       (.ALU_Result(ALU_Result),
        .DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module block_design_microblaze_0_0_ALU_Bit_989
   (EX_CarryOut,
    ALU_Result,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[25] ,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[25]_0 ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]ALU_Result;
  input [0:0]\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[25] ;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[25]_0 ;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ALU_Result;
  wire [0:0]\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[25] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[25]_0 ;
  wire EX_CarryOut;
  wire LO;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire \^lopt_1 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  block_design_microblaze_0_0_MB_LUT6_2__parameterized2_998 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[25] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[25] ),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[25]_0 (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[25]_0 ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op));
  block_design_microblaze_0_0_MB_MUXCY_XORCY_999 \Not_Last_Bit.MUXCY_XOR_I 
       (.ALU_Result(ALU_Result),
        .DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module block_design_microblaze_0_0_ALU_Bit_990
   (EX_CarryOut,
    ALU_Result,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[24] ,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[24]_0 ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]ALU_Result;
  input [0:0]\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[24] ;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[24]_0 ;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ALU_Result;
  wire [0:0]\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[24] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[24]_0 ;
  wire EX_CarryOut;
  wire LO;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire \^lopt_1 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  block_design_microblaze_0_0_MB_LUT6_2__parameterized2_996 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[24] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[24] ),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[24]_0 (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[24]_0 ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op));
  block_design_microblaze_0_0_MB_MUXCY_XORCY_997 \Not_Last_Bit.MUXCY_XOR_I 
       (.ALU_Result(ALU_Result),
        .DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module block_design_microblaze_0_0_ALU_Bit_991
   (EX_CarryOut,
    ALU_Result,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[23] ,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[23]_0 ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output EX_CarryOut;
  output [0:0]ALU_Result;
  input [0:0]\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[23] ;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[23]_0 ;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire [0:0]ALU_Result;
  wire [0:0]\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[23] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[23]_0 ;
  wire EX_CarryOut;
  wire LO;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire op2_is_1;

  block_design_microblaze_0_0_MB_LUT6_2__parameterized2_994 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[23] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[23] ),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[23]_0 (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[23]_0 ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op));
  block_design_microblaze_0_0_MB_MUXCY_XORCY_995 \Not_Last_Bit.MUXCY_XOR_I 
       (.ALU_Result(ALU_Result),
        .DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_10(lopt_10),
        .lopt_11(lopt_11),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .lopt_9(lopt_9));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module block_design_microblaze_0_0_ALU_Bit_992
   (EX_CarryOut,
    ALU_Result,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[22] ,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[22]_0 ,
    EX_CarryIn,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]ALU_Result;
  input [0:0]\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[22] ;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[22]_0 ;
  input EX_CarryIn;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ALU_Result;
  wire [0:0]\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[22] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[22]_0 ;
  wire EX_CarryIn;
  wire EX_CarryOut;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire \^lopt_1 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  block_design_microblaze_0_0_MB_LUT6_2__parameterized2 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[22] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[22] ),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[22]_0 (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[22]_0 ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op));
  block_design_microblaze_0_0_MB_MUXCY_XORCY_993 \Not_Last_Bit.MUXCY_XOR_I 
       (.ALU_Result(ALU_Result),
        .DI(op2_is_1),
        .EX_CarryIn(EX_CarryIn),
        .EX_CarryOut(EX_CarryOut),
        .S(alu_AddSub),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module block_design_microblaze_0_0_ALU_Bit__parameterized2
   (\Using_FPGA.Native ,
    ALU_Result,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31] ,
    Unsigned_Op,
    LO,
    Op2,
    alu_Op,
    Shifted,
    S,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5);
  output \Using_FPGA.Native ;
  output [0:0]ALU_Result;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31] ;
  input Unsigned_Op;
  input LO;
  input Op2;
  input [0:1]alu_Op;
  input Shifted;
  input S;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;

  wire [0:0]ALU_Result;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31] ;
  wire LO;
  wire Op2;
  wire S;
  wire Shifted;
  wire Unsigned_Op;
  wire \Using_FPGA.Native ;
  wire alu_AddSub;
  wire alu_AddSub_1;
  wire [0:1]alu_Op;
  wire invert_result;
  wire \^lopt ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire lopt_6;
  wire lopt_7;
  wire op2_is_1;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = lopt_5;
  block_design_microblaze_0_0_MB_LUT4__parameterized13 \Last_Bit.I_ALU_LUT_2 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31] (S),
        .Op2(Op2),
        .S(alu_AddSub),
        .alu_AddSub_1(alu_AddSub_1),
        .alu_Op(alu_Op[0]));
  block_design_microblaze_0_0_MB_LUT6 \Last_Bit.I_ALU_LUT_V5 
       (.Op2(Op2),
        .Shifted(Shifted),
        .alu_AddSub_1(alu_AddSub_1),
        .alu_Op(alu_Op));
  block_design_microblaze_0_0_MB_MULT_AND_1054 \Last_Bit.MULT_AND_I 
       (.DI(op2_is_1),
        .Op2(Op2),
        .alu_Op(alu_Op[0]));
  block_design_microblaze_0_0_MB_MUXCY_XORCY_1055 \Last_Bit.MUXCY_XOR_I 
       (.ALU_Result(ALU_Result),
        .CI(invert_result),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(\^lopt ),
        .lopt_1(lopt_7));
  block_design_microblaze_0_0_MB_MUXCY_1056 \Last_Bit.Pre_MUXCY_I 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31] ),
        .CI(invert_result),
        .LO(LO),
        .Unsigned_Op(Unsigned_Op),
        .lopt(\^lopt ),
        .lopt_1(op2_is_1),
        .lopt_2(alu_AddSub),
        .lopt_3(\^lopt_1 ),
        .lopt_4(\^lopt_2 ),
        .lopt_5(\^lopt_3 ),
        .lopt_6(\^lopt_4 ),
        .lopt_7(\^lopt_5 ),
        .lopt_8(lopt_6),
        .lopt_9(lopt_7));
endmodule

module block_design_microblaze_0_0_Byte_Doublet_Handle
   (D,
    O,
    extend_Data_Read,
    Op2,
    Op1,
    isbyte,
    isdoublet,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] ,
    \Using_FPGA.Native ,
    Data_Read0_out,
    Q,
    DReady,
    Data_Read);
  output [29:0]D;
  output O;
  output [7:0]extend_Data_Read;
  input [1:0]Op2;
  input [1:0]Op1;
  input isbyte;
  input isdoublet;
  input [0:31]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] ;
  input [7:0]\Using_FPGA.Native ;
  input [7:0]Data_Read0_out;
  input [7:0]Q;
  input DReady;
  input [7:0]Data_Read;

  wire [0:31]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] ;
  wire [29:0]D;
  wire DReady;
  wire [7:0]Data_Read;
  wire [7:0]Data_Read0_out;
  wire O;
  wire [1:0]Op1;
  wire [1:0]Op2;
  wire [7:0]Q;
  wire [7:0]\Using_FPGA.Native ;
  wire byte_selects_0;
  wire byte_selects_1;
  wire [7:0]extend_Data_Read;
  wire isbyte;
  wire isdoublet;
  wire low_addr_i_0;
  wire low_addr_i_1;
  wire [1:0]sel_Write_Mux_MSB;

  block_design_microblaze_0_0_MB_LUT6_2__parameterized10 \Not_Using_Long.BYTE_0_1_I 
       (.D(D[1:0]),
        .byte_selects_0(byte_selects_0),
        .byte_selects_1(byte_selects_1),
        .isbyte(isbyte),
        .isdoublet(isdoublet));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized12 \Not_Using_Long.BYTE_2_3_I 
       (.D(D[3:2]),
        .byte_selects_0(byte_selects_0),
        .byte_selects_1(byte_selects_1),
        .isbyte(isbyte),
        .isdoublet(isdoublet));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized14 \Not_Using_Long.LOW_ADDR_OUT_LUT6 
       (.D(D[29:28]),
        .isbyte(isbyte),
        .isdoublet(isdoublet),
        .low_addr_i_0(low_addr_i_0),
        .low_addr_i_1(low_addr_i_1));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized8 \Not_Using_Long.byte_selects_i_INST 
       (.Op1(Op1),
        .Op2(Op2),
        .byte_selects_0(byte_selects_0),
        .byte_selects_1(byte_selects_1));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized6 \Not_Using_Long.low_addr_i_INST 
       (.Op1(Op1),
        .Op2(Op2),
        .low_addr_i_0(low_addr_i_0),
        .low_addr_i_1(low_addr_i_1));
  block_design_microblaze_0_0_mux4_8 \Use_Dynamic_Bus_Sizing.Not_Using_Reverse_Mem_Instr_No_Long.EXT_DATA_WRITE_MUX_MSB_I 
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] ),
        .D(D[27:12]),
        .sel_Write_Mux_MSB(sel_Write_Mux_MSB));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_1057 \Use_Dynamic_Bus_Sizing.Not_Using_Reverse_Mem_Instr_No_Long.GEN4_LOOP[0].BYTESTEER_LUT6 
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[15] ({\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [16],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [20],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [24],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [28]}),
        .D({D[11],D[7]}),
        .isbyte(isbyte));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_1058 \Use_Dynamic_Bus_Sizing.Not_Using_Reverse_Mem_Instr_No_Long.GEN4_LOOP[1].BYTESTEER_LUT6 
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[14] ({\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [17],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [21],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [25],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [29]}),
        .D({D[10],D[6]}),
        .isbyte(isbyte));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_1059 \Use_Dynamic_Bus_Sizing.Not_Using_Reverse_Mem_Instr_No_Long.GEN4_LOOP[2].BYTESTEER_LUT6 
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[13] ({\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [18],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [22],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [26],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [30]}),
        .D({D[9],D[5]}),
        .isbyte(isbyte));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_1060 \Use_Dynamic_Bus_Sizing.Not_Using_Reverse_Mem_Instr_No_Long.GEN4_LOOP[3].BYTESTEER_LUT6 
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[12] ({\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [19],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [23],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [27],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [31]}),
        .D({D[8],D[4]}),
        .isbyte(isbyte));
  block_design_microblaze_0_0_MB_LUT3__parameterized9 \Use_Dynamic_Bus_Sizing.Not_Using_Reverse_Mem_Instr_No_Long.READ_SEL_LEFT_I 
       (.byte_i_reg(O),
        .byte_selects_1(byte_selects_1),
        .isbyte(isbyte),
        .isdoublet(isdoublet));
  block_design_microblaze_0_0_MB_LUT2__parameterized2 \Use_Dynamic_Bus_Sizing.Not_Using_Reverse_Mem_Instr_No_Long.READ_SEL_RIGHT_I 
       (.DReady(DReady),
        .Data_Read(Data_Read),
        .Data_Read0_out(Data_Read0_out),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (O),
        .byte_selects_0(byte_selects_0),
        .extend_Data_Read(extend_Data_Read),
        .isbyte(isbyte));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized16 \Use_Dynamic_Bus_Sizing.Not_Using_Reverse_Mem_Instr_No_Long.WRITE_MSB_SEL_I 
       (.isbyte(isbyte),
        .isdoublet(isdoublet),
        .sel_Write_Mux_MSB(sel_Write_Mux_MSB));
endmodule

module block_design_microblaze_0_0_DAXI_interface
   (MEM_DAXI_Data_Strobe,
    D,
    DReady0_out,
    extend_Data_Read,
    Q,
    Data_Read0_out,
    sync_reset,
    Clk,
    M_AXI_DP_AWREADY,
    M_AXI_DP_AWVALID_i_reg_0,
    M_AXI_DP_WREADY,
    M_AXI_DP_ARREADY,
    \WB_DAXI_Read_Data_reg[31]_0 ,
    LOCKSTEP_Master_Out,
    DReady,
    mem_access,
    DWait,
    Data_Read,
    O,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 ,
    M_AXI_DP_RDATA);
  output MEM_DAXI_Data_Strobe;
  output [70:0]D;
  output DReady0_out;
  output [7:0]extend_Data_Read;
  output [7:0]Q;
  output [15:0]Data_Read0_out;
  input sync_reset;
  input Clk;
  input M_AXI_DP_AWREADY;
  input [0:0]M_AXI_DP_AWVALID_i_reg_0;
  input M_AXI_DP_WREADY;
  input M_AXI_DP_ARREADY;
  input [1:0]\WB_DAXI_Read_Data_reg[31]_0 ;
  input [0:0]LOCKSTEP_Master_Out;
  input DReady;
  input mem_access;
  input DWait;
  input [23:0]Data_Read;
  input O;
  input [67:0]\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 ;
  input [31:0]M_AXI_DP_RDATA;

  wire [67:0]\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 ;
  wire Clk;
  wire [70:0]D;
  wire DReady;
  wire DReady0_out;
  wire DWait;
  wire [23:0]Data_Read;
  wire [15:0]Data_Read0_out;
  wire [0:0]LOCKSTEP_Master_Out;
  wire MEM_DAXI_Data_Strobe;
  wire M_AXI_DP_ARREADY;
  wire M_AXI_DP_ARVALID_i_i_1_n_0;
  wire M_AXI_DP_AWADDR0;
  wire M_AXI_DP_AWREADY;
  wire M_AXI_DP_AWVALID_i_i_1_n_0;
  wire [0:0]M_AXI_DP_AWVALID_i_reg_0;
  wire [31:0]M_AXI_DP_RDATA;
  wire M_AXI_DP_WREADY;
  wire M_AXI_DP_WVALID_i_i_1_n_0;
  wire O;
  wire [7:0]Q;
  wire [0:23]WB_DAXI_Read_Data;
  wire [1:0]\WB_DAXI_Read_Data_reg[31]_0 ;
  wire active_access;
  wire active_access_d1;
  wire active_access_i_1_n_0;
  wire [7:0]extend_Data_Read;
  wire mem_access;
  wire mem_access_completed0;
  wire sync_reset;

  LUT4 #(
    .INIT(16'h0004)) 
    \Add_Output_DFFs.M_AXI_DP_AWADDR[31]_i_1 
       (.I0(DReady),
        .I1(mem_access),
        .I2(active_access_d1),
        .I3(DWait),
        .O(M_AXI_DP_AWADDR0));
  FDRE \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[0] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [36]),
        .Q(D[39]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[10] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [46]),
        .Q(D[49]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[11] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [47]),
        .Q(D[50]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[12] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [48]),
        .Q(D[51]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[13] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [49]),
        .Q(D[52]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[14] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [50]),
        .Q(D[53]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[15] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [51]),
        .Q(D[54]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[16] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [52]),
        .Q(D[55]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[17] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [53]),
        .Q(D[56]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[18] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [54]),
        .Q(D[57]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[19] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [55]),
        .Q(D[58]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[1] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [37]),
        .Q(D[40]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[20] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [56]),
        .Q(D[59]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[21] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [57]),
        .Q(D[60]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[22] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [58]),
        .Q(D[61]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[23] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [59]),
        .Q(D[62]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[24] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [60]),
        .Q(D[63]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[25] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [61]),
        .Q(D[64]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[26] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [62]),
        .Q(D[65]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[27] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [63]),
        .Q(D[66]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[28] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [64]),
        .Q(D[67]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[29] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [65]),
        .Q(D[68]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[2] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [38]),
        .Q(D[41]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [66]),
        .Q(D[69]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [67]),
        .Q(D[70]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [39]),
        .Q(D[42]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[4] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [40]),
        .Q(D[43]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[5] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [41]),
        .Q(D[44]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[6] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [42]),
        .Q(D[45]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[7] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [43]),
        .Q(D[46]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[8] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [44]),
        .Q(D[47]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[9] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [45]),
        .Q(D[48]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [4]),
        .Q(D[6]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[10] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [14]),
        .Q(D[16]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[11] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [15]),
        .Q(D[17]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[12] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [16]),
        .Q(D[18]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[13] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [17]),
        .Q(D[19]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[14] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [18]),
        .Q(D[20]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[15] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [19]),
        .Q(D[21]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[16] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [20]),
        .Q(D[22]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[17] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [21]),
        .Q(D[23]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[18] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [22]),
        .Q(D[24]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[19] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [23]),
        .Q(D[25]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[1] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [5]),
        .Q(D[7]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[20] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [24]),
        .Q(D[26]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[21] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [25]),
        .Q(D[27]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[22] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [26]),
        .Q(D[28]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [27]),
        .Q(D[29]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[24] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [28]),
        .Q(D[30]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[25] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [29]),
        .Q(D[31]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[26] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [30]),
        .Q(D[32]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[27] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [31]),
        .Q(D[33]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[28] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [32]),
        .Q(D[34]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[29] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [33]),
        .Q(D[35]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[2] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [6]),
        .Q(D[8]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[30] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [34]),
        .Q(D[36]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[31] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [35]),
        .Q(D[37]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[3] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [7]),
        .Q(D[9]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[4] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [8]),
        .Q(D[10]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[5] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [9]),
        .Q(D[11]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[6] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [10]),
        .Q(D[12]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[7] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [11]),
        .Q(D[13]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[8] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [12]),
        .Q(D[14]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[9] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [13]),
        .Q(D[15]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WSTRB_i_reg[0] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [0]),
        .Q(D[2]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WSTRB_i_reg[1] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [1]),
        .Q(D[3]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WSTRB_i_reg[2] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [2]),
        .Q(D[4]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WSTRB_i_reg[3] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [3]),
        .Q(D[5]),
        .R(sync_reset));
  LUT5 #(
    .INIT(32'h00005530)) 
    M_AXI_DP_ARVALID_i_i_1
       (.I0(M_AXI_DP_ARREADY),
        .I1(M_AXI_DP_AWVALID_i_reg_0),
        .I2(M_AXI_DP_AWADDR0),
        .I3(D[0]),
        .I4(sync_reset),
        .O(M_AXI_DP_ARVALID_i_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    M_AXI_DP_ARVALID_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARVALID_i_i_1_n_0),
        .Q(D[0]),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h000055C0)) 
    M_AXI_DP_AWVALID_i_i_1
       (.I0(M_AXI_DP_AWREADY),
        .I1(M_AXI_DP_AWADDR0),
        .I2(M_AXI_DP_AWVALID_i_reg_0),
        .I3(D[38]),
        .I4(sync_reset),
        .O(M_AXI_DP_AWVALID_i_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    M_AXI_DP_AWVALID_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWVALID_i_i_1_n_0),
        .Q(D[38]),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h000055C0)) 
    M_AXI_DP_WVALID_i_i_1
       (.I0(M_AXI_DP_WREADY),
        .I1(M_AXI_DP_AWADDR0),
        .I2(M_AXI_DP_AWVALID_i_reg_0),
        .I3(D[1]),
        .I4(sync_reset),
        .O(M_AXI_DP_WVALID_i_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    M_AXI_DP_WVALID_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WVALID_i_i_1_n_0),
        .Q(D[1]),
        .R(1'b0));
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.Native_i_1__119 
       (.I0(MEM_DAXI_Data_Strobe),
        .I1(DReady),
        .O(DReady0_out));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Using_FPGA.Native_i_1__137 
       (.I0(Data_Read[7]),
        .I1(WB_DAXI_Read_Data[16]),
        .I2(O),
        .I3(Data_Read[23]),
        .I4(DReady),
        .I5(WB_DAXI_Read_Data[0]),
        .O(extend_Data_Read[7]));
  (* SOFT_HLUTNM = "soft_lutpair149" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__138 
       (.I0(Data_Read[23]),
        .I1(DReady),
        .I2(WB_DAXI_Read_Data[0]),
        .O(Data_Read0_out[15]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Using_FPGA.Native_i_1__139 
       (.I0(Data_Read[6]),
        .I1(WB_DAXI_Read_Data[17]),
        .I2(O),
        .I3(Data_Read[22]),
        .I4(DReady),
        .I5(WB_DAXI_Read_Data[1]),
        .O(extend_Data_Read[6]));
  (* SOFT_HLUTNM = "soft_lutpair151" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__140 
       (.I0(Data_Read[22]),
        .I1(DReady),
        .I2(WB_DAXI_Read_Data[1]),
        .O(Data_Read0_out[14]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Using_FPGA.Native_i_1__141 
       (.I0(Data_Read[5]),
        .I1(WB_DAXI_Read_Data[18]),
        .I2(O),
        .I3(Data_Read[21]),
        .I4(DReady),
        .I5(WB_DAXI_Read_Data[2]),
        .O(extend_Data_Read[5]));
  (* SOFT_HLUTNM = "soft_lutpair150" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__142 
       (.I0(Data_Read[21]),
        .I1(DReady),
        .I2(WB_DAXI_Read_Data[2]),
        .O(Data_Read0_out[13]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Using_FPGA.Native_i_1__143 
       (.I0(Data_Read[4]),
        .I1(WB_DAXI_Read_Data[19]),
        .I2(O),
        .I3(Data_Read[20]),
        .I4(DReady),
        .I5(WB_DAXI_Read_Data[3]),
        .O(extend_Data_Read[4]));
  (* SOFT_HLUTNM = "soft_lutpair151" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__144 
       (.I0(Data_Read[20]),
        .I1(DReady),
        .I2(WB_DAXI_Read_Data[3]),
        .O(Data_Read0_out[12]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Using_FPGA.Native_i_1__145 
       (.I0(Data_Read[3]),
        .I1(WB_DAXI_Read_Data[20]),
        .I2(O),
        .I3(Data_Read[19]),
        .I4(DReady),
        .I5(WB_DAXI_Read_Data[4]),
        .O(extend_Data_Read[3]));
  (* SOFT_HLUTNM = "soft_lutpair152" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__146 
       (.I0(Data_Read[19]),
        .I1(DReady),
        .I2(WB_DAXI_Read_Data[4]),
        .O(Data_Read0_out[11]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Using_FPGA.Native_i_1__148 
       (.I0(Data_Read[2]),
        .I1(WB_DAXI_Read_Data[21]),
        .I2(O),
        .I3(Data_Read[18]),
        .I4(DReady),
        .I5(WB_DAXI_Read_Data[5]),
        .O(extend_Data_Read[2]));
  (* SOFT_HLUTNM = "soft_lutpair152" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__149 
       (.I0(Data_Read[18]),
        .I1(DReady),
        .I2(WB_DAXI_Read_Data[5]),
        .O(Data_Read0_out[10]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Using_FPGA.Native_i_1__151 
       (.I0(Data_Read[1]),
        .I1(WB_DAXI_Read_Data[22]),
        .I2(O),
        .I3(Data_Read[17]),
        .I4(DReady),
        .I5(WB_DAXI_Read_Data[6]),
        .O(extend_Data_Read[1]));
  (* SOFT_HLUTNM = "soft_lutpair153" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__152 
       (.I0(Data_Read[17]),
        .I1(DReady),
        .I2(WB_DAXI_Read_Data[6]),
        .O(Data_Read0_out[9]));
  (* SOFT_HLUTNM = "soft_lutpair153" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__154 
       (.I0(Data_Read[16]),
        .I1(DReady),
        .I2(WB_DAXI_Read_Data[7]),
        .O(Data_Read0_out[8]));
  (* SOFT_HLUTNM = "soft_lutpair146" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__155 
       (.I0(Data_Read[15]),
        .I1(DReady),
        .I2(WB_DAXI_Read_Data[8]),
        .O(Data_Read0_out[7]));
  (* SOFT_HLUTNM = "soft_lutpair147" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__156 
       (.I0(Data_Read[14]),
        .I1(DReady),
        .I2(WB_DAXI_Read_Data[9]),
        .O(Data_Read0_out[6]));
  (* SOFT_HLUTNM = "soft_lutpair147" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__157 
       (.I0(Data_Read[13]),
        .I1(DReady),
        .I2(WB_DAXI_Read_Data[10]),
        .O(Data_Read0_out[5]));
  (* SOFT_HLUTNM = "soft_lutpair148" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__158 
       (.I0(Data_Read[12]),
        .I1(DReady),
        .I2(WB_DAXI_Read_Data[11]),
        .O(Data_Read0_out[4]));
  (* SOFT_HLUTNM = "soft_lutpair146" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__159 
       (.I0(Data_Read[11]),
        .I1(DReady),
        .I2(WB_DAXI_Read_Data[12]),
        .O(Data_Read0_out[3]));
  (* SOFT_HLUTNM = "soft_lutpair149" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__160 
       (.I0(Data_Read[10]),
        .I1(DReady),
        .I2(WB_DAXI_Read_Data[13]),
        .O(Data_Read0_out[2]));
  (* SOFT_HLUTNM = "soft_lutpair150" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__161 
       (.I0(Data_Read[9]),
        .I1(DReady),
        .I2(WB_DAXI_Read_Data[14]),
        .O(Data_Read0_out[1]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Using_FPGA.Native_i_2__46 
       (.I0(Data_Read[0]),
        .I1(WB_DAXI_Read_Data[23]),
        .I2(O),
        .I3(Data_Read[16]),
        .I4(DReady),
        .I5(WB_DAXI_Read_Data[7]),
        .O(extend_Data_Read[0]));
  (* SOFT_HLUTNM = "soft_lutpair148" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_2__47 
       (.I0(Data_Read[8]),
        .I1(DReady),
        .I2(WB_DAXI_Read_Data[15]),
        .O(Data_Read0_out[0]));
  FDRE \WB_DAXI_Read_Data_reg[0] 
       (.C(Clk),
        .CE(\WB_DAXI_Read_Data_reg[31]_0 [1]),
        .D(M_AXI_DP_RDATA[31]),
        .Q(WB_DAXI_Read_Data[0]),
        .R(sync_reset));
  FDRE \WB_DAXI_Read_Data_reg[10] 
       (.C(Clk),
        .CE(\WB_DAXI_Read_Data_reg[31]_0 [1]),
        .D(M_AXI_DP_RDATA[21]),
        .Q(WB_DAXI_Read_Data[10]),
        .R(sync_reset));
  FDRE \WB_DAXI_Read_Data_reg[11] 
       (.C(Clk),
        .CE(\WB_DAXI_Read_Data_reg[31]_0 [1]),
        .D(M_AXI_DP_RDATA[20]),
        .Q(WB_DAXI_Read_Data[11]),
        .R(sync_reset));
  FDRE \WB_DAXI_Read_Data_reg[12] 
       (.C(Clk),
        .CE(\WB_DAXI_Read_Data_reg[31]_0 [1]),
        .D(M_AXI_DP_RDATA[19]),
        .Q(WB_DAXI_Read_Data[12]),
        .R(sync_reset));
  FDRE \WB_DAXI_Read_Data_reg[13] 
       (.C(Clk),
        .CE(\WB_DAXI_Read_Data_reg[31]_0 [1]),
        .D(M_AXI_DP_RDATA[18]),
        .Q(WB_DAXI_Read_Data[13]),
        .R(sync_reset));
  FDRE \WB_DAXI_Read_Data_reg[14] 
       (.C(Clk),
        .CE(\WB_DAXI_Read_Data_reg[31]_0 [1]),
        .D(M_AXI_DP_RDATA[17]),
        .Q(WB_DAXI_Read_Data[14]),
        .R(sync_reset));
  FDRE \WB_DAXI_Read_Data_reg[15] 
       (.C(Clk),
        .CE(\WB_DAXI_Read_Data_reg[31]_0 [1]),
        .D(M_AXI_DP_RDATA[16]),
        .Q(WB_DAXI_Read_Data[15]),
        .R(sync_reset));
  FDRE \WB_DAXI_Read_Data_reg[16] 
       (.C(Clk),
        .CE(\WB_DAXI_Read_Data_reg[31]_0 [1]),
        .D(M_AXI_DP_RDATA[15]),
        .Q(WB_DAXI_Read_Data[16]),
        .R(sync_reset));
  FDRE \WB_DAXI_Read_Data_reg[17] 
       (.C(Clk),
        .CE(\WB_DAXI_Read_Data_reg[31]_0 [1]),
        .D(M_AXI_DP_RDATA[14]),
        .Q(WB_DAXI_Read_Data[17]),
        .R(sync_reset));
  FDRE \WB_DAXI_Read_Data_reg[18] 
       (.C(Clk),
        .CE(\WB_DAXI_Read_Data_reg[31]_0 [1]),
        .D(M_AXI_DP_RDATA[13]),
        .Q(WB_DAXI_Read_Data[18]),
        .R(sync_reset));
  FDRE \WB_DAXI_Read_Data_reg[19] 
       (.C(Clk),
        .CE(\WB_DAXI_Read_Data_reg[31]_0 [1]),
        .D(M_AXI_DP_RDATA[12]),
        .Q(WB_DAXI_Read_Data[19]),
        .R(sync_reset));
  FDRE \WB_DAXI_Read_Data_reg[1] 
       (.C(Clk),
        .CE(\WB_DAXI_Read_Data_reg[31]_0 [1]),
        .D(M_AXI_DP_RDATA[30]),
        .Q(WB_DAXI_Read_Data[1]),
        .R(sync_reset));
  FDRE \WB_DAXI_Read_Data_reg[20] 
       (.C(Clk),
        .CE(\WB_DAXI_Read_Data_reg[31]_0 [1]),
        .D(M_AXI_DP_RDATA[11]),
        .Q(WB_DAXI_Read_Data[20]),
        .R(sync_reset));
  FDRE \WB_DAXI_Read_Data_reg[21] 
       (.C(Clk),
        .CE(\WB_DAXI_Read_Data_reg[31]_0 [1]),
        .D(M_AXI_DP_RDATA[10]),
        .Q(WB_DAXI_Read_Data[21]),
        .R(sync_reset));
  FDRE \WB_DAXI_Read_Data_reg[22] 
       (.C(Clk),
        .CE(\WB_DAXI_Read_Data_reg[31]_0 [1]),
        .D(M_AXI_DP_RDATA[9]),
        .Q(WB_DAXI_Read_Data[22]),
        .R(sync_reset));
  FDRE \WB_DAXI_Read_Data_reg[23] 
       (.C(Clk),
        .CE(\WB_DAXI_Read_Data_reg[31]_0 [1]),
        .D(M_AXI_DP_RDATA[8]),
        .Q(WB_DAXI_Read_Data[23]),
        .R(sync_reset));
  FDRE \WB_DAXI_Read_Data_reg[24] 
       (.C(Clk),
        .CE(\WB_DAXI_Read_Data_reg[31]_0 [1]),
        .D(M_AXI_DP_RDATA[7]),
        .Q(Q[7]),
        .R(sync_reset));
  FDRE \WB_DAXI_Read_Data_reg[25] 
       (.C(Clk),
        .CE(\WB_DAXI_Read_Data_reg[31]_0 [1]),
        .D(M_AXI_DP_RDATA[6]),
        .Q(Q[6]),
        .R(sync_reset));
  FDRE \WB_DAXI_Read_Data_reg[26] 
       (.C(Clk),
        .CE(\WB_DAXI_Read_Data_reg[31]_0 [1]),
        .D(M_AXI_DP_RDATA[5]),
        .Q(Q[5]),
        .R(sync_reset));
  FDRE \WB_DAXI_Read_Data_reg[27] 
       (.C(Clk),
        .CE(\WB_DAXI_Read_Data_reg[31]_0 [1]),
        .D(M_AXI_DP_RDATA[4]),
        .Q(Q[4]),
        .R(sync_reset));
  FDRE \WB_DAXI_Read_Data_reg[28] 
       (.C(Clk),
        .CE(\WB_DAXI_Read_Data_reg[31]_0 [1]),
        .D(M_AXI_DP_RDATA[3]),
        .Q(Q[3]),
        .R(sync_reset));
  FDRE \WB_DAXI_Read_Data_reg[29] 
       (.C(Clk),
        .CE(\WB_DAXI_Read_Data_reg[31]_0 [1]),
        .D(M_AXI_DP_RDATA[2]),
        .Q(Q[2]),
        .R(sync_reset));
  FDRE \WB_DAXI_Read_Data_reg[2] 
       (.C(Clk),
        .CE(\WB_DAXI_Read_Data_reg[31]_0 [1]),
        .D(M_AXI_DP_RDATA[29]),
        .Q(WB_DAXI_Read_Data[2]),
        .R(sync_reset));
  FDRE \WB_DAXI_Read_Data_reg[30] 
       (.C(Clk),
        .CE(\WB_DAXI_Read_Data_reg[31]_0 [1]),
        .D(M_AXI_DP_RDATA[1]),
        .Q(Q[1]),
        .R(sync_reset));
  FDRE \WB_DAXI_Read_Data_reg[31] 
       (.C(Clk),
        .CE(\WB_DAXI_Read_Data_reg[31]_0 [1]),
        .D(M_AXI_DP_RDATA[0]),
        .Q(Q[0]),
        .R(sync_reset));
  FDRE \WB_DAXI_Read_Data_reg[3] 
       (.C(Clk),
        .CE(\WB_DAXI_Read_Data_reg[31]_0 [1]),
        .D(M_AXI_DP_RDATA[28]),
        .Q(WB_DAXI_Read_Data[3]),
        .R(sync_reset));
  FDRE \WB_DAXI_Read_Data_reg[4] 
       (.C(Clk),
        .CE(\WB_DAXI_Read_Data_reg[31]_0 [1]),
        .D(M_AXI_DP_RDATA[27]),
        .Q(WB_DAXI_Read_Data[4]),
        .R(sync_reset));
  FDRE \WB_DAXI_Read_Data_reg[5] 
       (.C(Clk),
        .CE(\WB_DAXI_Read_Data_reg[31]_0 [1]),
        .D(M_AXI_DP_RDATA[26]),
        .Q(WB_DAXI_Read_Data[5]),
        .R(sync_reset));
  FDRE \WB_DAXI_Read_Data_reg[6] 
       (.C(Clk),
        .CE(\WB_DAXI_Read_Data_reg[31]_0 [1]),
        .D(M_AXI_DP_RDATA[25]),
        .Q(WB_DAXI_Read_Data[6]),
        .R(sync_reset));
  FDRE \WB_DAXI_Read_Data_reg[7] 
       (.C(Clk),
        .CE(\WB_DAXI_Read_Data_reg[31]_0 [1]),
        .D(M_AXI_DP_RDATA[24]),
        .Q(WB_DAXI_Read_Data[7]),
        .R(sync_reset));
  FDRE \WB_DAXI_Read_Data_reg[8] 
       (.C(Clk),
        .CE(\WB_DAXI_Read_Data_reg[31]_0 [1]),
        .D(M_AXI_DP_RDATA[23]),
        .Q(WB_DAXI_Read_Data[8]),
        .R(sync_reset));
  FDRE \WB_DAXI_Read_Data_reg[9] 
       (.C(Clk),
        .CE(\WB_DAXI_Read_Data_reg[31]_0 [1]),
        .D(M_AXI_DP_RDATA[22]),
        .Q(WB_DAXI_Read_Data[9]),
        .R(sync_reset));
  FDRE active_access_d1_reg
       (.C(Clk),
        .CE(1'b1),
        .D(active_access),
        .Q(active_access_d1),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'h0000000010101054)) 
    active_access_i_1
       (.I0(sync_reset),
        .I1(active_access),
        .I2(M_AXI_DP_AWADDR0),
        .I3(\WB_DAXI_Read_Data_reg[31]_0 [0]),
        .I4(\WB_DAXI_Read_Data_reg[31]_0 [1]),
        .I5(LOCKSTEP_Master_Out),
        .O(active_access_i_1_n_0));
  FDRE active_access_reg
       (.C(Clk),
        .CE(1'b1),
        .D(active_access_i_1_n_0),
        .Q(active_access),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hA8)) 
    mem_access_completed_i_1
       (.I0(active_access),
        .I1(\WB_DAXI_Read_Data_reg[31]_0 [0]),
        .I2(\WB_DAXI_Read_Data_reg[31]_0 [1]),
        .O(mem_access_completed0));
  FDRE mem_access_completed_reg
       (.C(Clk),
        .CE(1'b1),
        .D(mem_access_completed0),
        .Q(MEM_DAXI_Data_Strobe),
        .R(sync_reset));
endmodule

module block_design_microblaze_0_0_Data_Flow
   (Op1,
    A,
    B,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    PC_OF,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    reg_zero,
    msr_I,
    carry,
    Enable_Interrupt,
    Data_Write,
    S1_AXIS_TVALID_0,
    \Using_FPGA.Native_7 ,
    S1_AXIS_TLAST_0,
    \S1_AXIS_TDATA[31] ,
    D,
    New_Reg_Value,
    PC_EX,
    \Using_FPGA.Native_8 ,
    \Using_FPGA.Native_9 ,
    \Using_FPGA.Native_10 ,
    op2_Reg,
    op2_Reg__0,
    op2_Reg__1,
    op2_Reg__2,
    op2_Reg__3,
    op2_Reg__4,
    op2_Reg__5,
    op2_Reg__6,
    op2_Reg__7,
    op2_Reg__8,
    op2_Reg__9,
    op2_Reg__10,
    op2_Reg__11,
    op2_Reg__12,
    op2_Reg__13,
    op2_Reg__14,
    op2_Reg__15,
    op2_Reg__16,
    op2_Reg__17,
    op2_Reg__18,
    op2_Reg__19,
    op2_Reg__20,
    op2_Reg__21,
    op2_Reg__22,
    op2_Reg__23,
    op2_Reg__24,
    op2_Reg__25,
    op2_Reg__26,
    op2_Reg__27,
    op2_Reg__28,
    op2_Reg__29,
    op2_Reg__30,
    Q,
    LO,
    \Using_FPGA.Native_11 ,
    Shift_Logic_Res,
    Select_Logic_reg,
    \Using_FPGA.Native_12 ,
    \Using_FPGA.Native_13 ,
    \Using_FPGA.Native_14 ,
    \Using_FPGA.Native_15 ,
    \Using_FPGA.Native_16 ,
    \Using_FPGA.Native_17 ,
    \Using_FPGA.Native_18 ,
    \Using_FPGA.Native_19 ,
    \Using_FPGA.Native_20 ,
    \Using_FPGA.Native_21 ,
    \Using_FPGA.Native_22 ,
    \Using_FPGA.Native_23 ,
    res_Forward1,
    I3,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_0,
    D_1,
    D_2,
    D_3,
    D_4,
    I3_5,
    D_6,
    I3_7,
    D_8,
    I3_9,
    D_10,
    D_11,
    D_12,
    D_13,
    D_14,
    D_15,
    D_16,
    D_17,
    D_18,
    D_19,
    D_20,
    D_21,
    D_22,
    D_23,
    D_24,
    D_25,
    D_26,
    D_27,
    D_28,
    D_29,
    D_30,
    D_31,
    D_32,
    D_33,
    D_34,
    carry_In,
    Unsigned_Op,
    alu_Op,
    \Using_FPGA.Native_24 ,
    \Using_FPGA.Native_25 ,
    \Using_FPGA.Native_26 ,
    \Using_FPGA.Native_27 ,
    \Using_FPGA.Native_28 ,
    \Using_FPGA.Native_29 ,
    \Using_FPGA.Native_30 ,
    Enable_2,
    Logic_Oper,
    \Using_FPGA.Native_31 ,
    I3_35,
    \C_reg[28] ,
    in0,
    SR,
    void_bit,
    \Using_FPGA.DSP48E1_I1 ,
    reg_Test_Equal,
    reg_Test_Equal_N,
    \Using_FPGA.Native_32 ,
    MSR_Rst,
    \Using_FPGA.Native_33 ,
    \Using_FPGA.Native_34 ,
    \Using_FPGA.Native_35 ,
    \Using_FPGA.Native_36 ,
    \Using_FPGA.Native_37 ,
    \Using_FPGA.Native_38 ,
    \Using_FPGA.Native_39 ,
    mem_mulh_instr0,
    ex_mulhu_instr,
    S1_AXIS_TVALID,
    S0_AXIS_TVALID,
    \Using_dynamic_instr_Address.old_IE_value_reg ,
    S1_AXIS_TLAST,
    S0_AXIS_TLAST,
    S1_AXIS_TDATA,
    S0_AXIS_TDATA,
    \data_rd_reg_reg[30] ,
    register_write,
    \data_rd_reg_reg[30]_0 ,
    clz_instr,
    \Using_FPGA.Native_40 ,
    BitField_Extract,
    BitField_Insert,
    ex_not_mul_op,
    exception_kind,
    res_Forward2,
    Interrupt_Address,
    opsel1_PC,
    compare_Instr,
    sext16,
    sext8,
    \Using_FPGA.Native_41 ,
    \Using_FPGA.Native_42 ,
    PCMP_Instr2_out,
    \C_reg[28]_0 ,
    E,
    imm_Value,
    Shift_Oper,
    Select_Logic,
    Op1_Shift,
    Sext,
    Shifted,
    \Using_FPGA.Native_43 ,
    Result_Sel,
    extend_Data_Read,
    Data_Read_Mask,
    \Using_FPGA.Native_44 ,
    Data_Read0_out,
    \Using_FPGA.Native_45 ,
    Reg_Write,
    \Using_BitField.Gen_Bits[9].mem_Rd_reg[9] ,
    reg1_Addr,
    jump,
    PC_Write,
    IReady,
    Buffer_Addr,
    OF_PipeRun,
    DI,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output [1:0]Op1;
  output [16:0]A;
  output [4:0]B;
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  output [0:0]\Using_FPGA.Native_2 ;
  output \Using_FPGA.Native_3 ;
  output [0:31]PC_OF;
  output \Using_FPGA.Native_4 ;
  output [14:0]\Using_FPGA.Native_5 ;
  output \Using_FPGA.Native_6 ;
  output reg_zero;
  output [1:0]msr_I;
  output carry;
  output Enable_Interrupt;
  output [0:31]Data_Write;
  output S1_AXIS_TVALID_0;
  output \Using_FPGA.Native_7 ;
  output S1_AXIS_TLAST_0;
  output [31:0]\S1_AXIS_TDATA[31] ;
  output [3:0]D;
  output New_Reg_Value;
  output [0:31]PC_EX;
  output \Using_FPGA.Native_8 ;
  output \Using_FPGA.Native_9 ;
  output \Using_FPGA.Native_10 ;
  output op2_Reg;
  output op2_Reg__0;
  output op2_Reg__1;
  output op2_Reg__2;
  output op2_Reg__3;
  output op2_Reg__4;
  output op2_Reg__5;
  output op2_Reg__6;
  output op2_Reg__7;
  output op2_Reg__8;
  output op2_Reg__9;
  output op2_Reg__10;
  output op2_Reg__11;
  output op2_Reg__12;
  output op2_Reg__13;
  output op2_Reg__14;
  output op2_Reg__15;
  output op2_Reg__16;
  output op2_Reg__17;
  output op2_Reg__18;
  output op2_Reg__19;
  output op2_Reg__20;
  output op2_Reg__21;
  output op2_Reg__22;
  output op2_Reg__23;
  output op2_Reg__24;
  output op2_Reg__25;
  output op2_Reg__26;
  output op2_Reg__27;
  output op2_Reg__28;
  output op2_Reg__29;
  output op2_Reg__30;
  output [15:0]Q;
  output LO;
  output [29:0]\Using_FPGA.Native_11 ;
  output Shift_Logic_Res;
  output Select_Logic_reg;
  output \Using_FPGA.Native_12 ;
  output \Using_FPGA.Native_13 ;
  output \Using_FPGA.Native_14 ;
  output \Using_FPGA.Native_15 ;
  output \Using_FPGA.Native_16 ;
  output \Using_FPGA.Native_17 ;
  output \Using_FPGA.Native_18 ;
  output \Using_FPGA.Native_19 ;
  output \Using_FPGA.Native_20 ;
  output \Using_FPGA.Native_21 ;
  output [17:0]\Using_FPGA.Native_22 ;
  output [31:0]\Using_FPGA.Native_23 ;
  input res_Forward1;
  input I3;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_0;
  input D_1;
  input D_2;
  input D_3;
  input D_4;
  input I3_5;
  input D_6;
  input I3_7;
  input D_8;
  input I3_9;
  input D_10;
  input D_11;
  input D_12;
  input D_13;
  input D_14;
  input D_15;
  input D_16;
  input D_17;
  input D_18;
  input D_19;
  input D_20;
  input D_21;
  input D_22;
  input D_23;
  input D_24;
  input D_25;
  input D_26;
  input D_27;
  input D_28;
  input D_29;
  input D_30;
  input D_31;
  input D_32;
  input D_33;
  input D_34;
  input carry_In;
  input Unsigned_Op;
  input [0:1]alu_Op;
  input \Using_FPGA.Native_24 ;
  input \Using_FPGA.Native_25 ;
  input \Using_FPGA.Native_26 ;
  input \Using_FPGA.Native_27 ;
  input \Using_FPGA.Native_28 ;
  input \Using_FPGA.Native_29 ;
  input \Using_FPGA.Native_30 ;
  input Enable_2;
  input [0:1]Logic_Oper;
  input [1:0]\Using_FPGA.Native_31 ;
  input I3_35;
  input \C_reg[28] ;
  input in0;
  input [0:0]SR;
  input void_bit;
  input [0:0]\Using_FPGA.DSP48E1_I1 ;
  input reg_Test_Equal;
  input reg_Test_Equal_N;
  input \Using_FPGA.Native_32 ;
  input MSR_Rst;
  input \Using_FPGA.Native_33 ;
  input \Using_FPGA.Native_34 ;
  input \Using_FPGA.Native_35 ;
  input \Using_FPGA.Native_36 ;
  input \Using_FPGA.Native_37 ;
  input \Using_FPGA.Native_38 ;
  input \Using_FPGA.Native_39 ;
  input mem_mulh_instr0;
  input ex_mulhu_instr;
  input S1_AXIS_TVALID;
  input S0_AXIS_TVALID;
  input \Using_dynamic_instr_Address.old_IE_value_reg ;
  input S1_AXIS_TLAST;
  input S0_AXIS_TLAST;
  input [31:0]S1_AXIS_TDATA;
  input [31:0]S0_AXIS_TDATA;
  input \data_rd_reg_reg[30] ;
  input register_write;
  input \data_rd_reg_reg[30]_0 ;
  input clz_instr;
  input \Using_FPGA.Native_40 ;
  input BitField_Extract;
  input BitField_Insert;
  input ex_not_mul_op;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:31]Interrupt_Address;
  input opsel1_PC;
  input compare_Instr;
  input sext16;
  input sext8;
  input \Using_FPGA.Native_41 ;
  input \Using_FPGA.Native_42 ;
  input PCMP_Instr2_out;
  input \C_reg[28]_0 ;
  input [0:0]E;
  input [0:15]imm_Value;
  input Shift_Oper;
  input Select_Logic;
  input Op1_Shift;
  input Sext;
  input Shifted;
  input \Using_FPGA.Native_43 ;
  input [0:1]Result_Sel;
  input [15:0]extend_Data_Read;
  input Data_Read_Mask;
  input \Using_FPGA.Native_44 ;
  input [15:0]Data_Read0_out;
  input [31:0]\Using_FPGA.Native_45 ;
  input Reg_Write;
  input [4:0]\Using_BitField.Gen_Bits[9].mem_Rd_reg[9] ;
  input [0:4]reg1_Addr;
  input jump;
  input PC_Write;
  input IReady;
  input [2:0]Buffer_Addr;
  input OF_PipeRun;
  input DI;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire [16:0]A;
  wire ALU_I_n_31;
  wire ALU_I_n_32;
  wire [4:0]B;
  wire BitField_Extract;
  wire BitField_Insert;
  wire [2:0]Buffer_Addr;
  wire \C_reg[28] ;
  wire \C_reg[28]_0 ;
  wire Clk;
  wire [3:0]D;
  wire DI;
  wire D_0;
  wire D_1;
  wire D_10;
  wire D_11;
  wire D_12;
  wire D_13;
  wire D_14;
  wire D_15;
  wire D_16;
  wire D_17;
  wire D_18;
  wire D_19;
  wire D_2;
  wire D_20;
  wire D_21;
  wire D_22;
  wire D_23;
  wire D_24;
  wire D_25;
  wire D_26;
  wire D_27;
  wire D_28;
  wire D_29;
  wire D_3;
  wire D_30;
  wire D_31;
  wire D_32;
  wire D_33;
  wire D_34;
  wire D_4;
  wire D_6;
  wire D_8;
  wire [15:0]Data_Read0_out;
  wire Data_Read_Mask;
  wire [0:31]Data_Write;
  wire [0:0]E;
  wire Enable_2;
  wire Enable_Interrupt;
  wire I0;
  wire I3;
  wire I3_35;
  wire I3_5;
  wire I3_7;
  wire I3_9;
  wire IReady;
  wire [0:31]Interrupt_Address;
  wire Is_Equal;
  wire LO;
  wire [0:1]Logic_Oper;
  wire MSR_Rst;
  wire New_Reg_Value;
  wire OF_PipeRun;
  wire [1:0]Op1;
  wire Op1_Shift;
  wire \OpSelect_Bits[0].Operand_Select_Bit_I/I3 ;
  wire \OpSelect_Bits[27].Operand_Select_Bit_I/I3 ;
  wire \OpSelect_Bits[28].Operand_Select_Bit_I/I3 ;
  wire \OpSelect_Bits[29].Operand_Select_Bit_I/I3 ;
  wire \OpSelect_Bits[30].Operand_Select_Bit_I/I3 ;
  wire Operand_Select_I_n_131;
  wire Operand_Select_I_n_132;
  wire Operand_Select_I_n_133;
  wire Operand_Select_I_n_134;
  wire Operand_Select_I_n_135;
  wire Operand_Select_I_n_136;
  wire Operand_Select_I_n_137;
  wire Operand_Select_I_n_138;
  wire Operand_Select_I_n_139;
  wire Operand_Select_I_n_140;
  wire Operand_Select_I_n_141;
  wire Operand_Select_I_n_142;
  wire Operand_Select_I_n_143;
  wire Operand_Select_I_n_144;
  wire Operand_Select_I_n_145;
  wire Operand_Select_I_n_146;
  wire Operand_Select_I_n_147;
  wire Operand_Select_I_n_148;
  wire Operand_Select_I_n_149;
  wire Operand_Select_I_n_150;
  wire Operand_Select_I_n_151;
  wire Operand_Select_I_n_152;
  wire Operand_Select_I_n_153;
  wire Operand_Select_I_n_154;
  wire Operand_Select_I_n_155;
  wire Operand_Select_I_n_156;
  wire Operand_Select_I_n_157;
  wire Operand_Select_I_n_158;
  wire Operand_Select_I_n_159;
  wire Operand_Select_I_n_160;
  wire Operand_Select_I_n_161;
  wire Operand_Select_I_n_162;
  wire Operand_Select_I_n_179;
  wire Operand_Select_I_n_180;
  wire Operand_Select_I_n_182;
  wire Operand_Select_I_n_183;
  wire Operand_Select_I_n_184;
  wire Operand_Select_I_n_185;
  wire Operand_Select_I_n_186;
  wire Operand_Select_I_n_187;
  wire Operand_Select_I_n_188;
  wire Operand_Select_I_n_190;
  wire Operand_Select_I_n_191;
  wire Operand_Select_I_n_192;
  wire Operand_Select_I_n_193;
  wire Operand_Select_I_n_196;
  wire Operand_Select_I_n_197;
  wire Operand_Select_I_n_198;
  wire Operand_Select_I_n_211;
  wire Operand_Select_I_n_212;
  wire Operand_Select_I_n_213;
  wire Operand_Select_I_n_214;
  wire Operand_Select_I_n_215;
  wire Operand_Select_I_n_216;
  wire Operand_Select_I_n_217;
  wire Operand_Select_I_n_219;
  wire Operand_Select_I_n_39;
  wire Operand_Select_I_n_40;
  wire Operand_Select_I_n_42;
  wire Operand_Select_I_n_43;
  wire Operand_Select_I_n_44;
  wire Operand_Select_I_n_45;
  wire Operand_Select_I_n_46;
  wire Operand_Select_I_n_47;
  wire Operand_Select_I_n_48;
  wire Operand_Select_I_n_50;
  wire Operand_Select_I_n_51;
  wire Operand_Select_I_n_83;
  wire Operand_Select_I_n_84;
  wire Operand_Select_I_n_85;
  wire Operand_Select_I_n_86;
  wire Operand_Select_I_n_87;
  wire Operand_Select_I_n_88;
  wire Operand_Select_I_n_89;
  wire Operand_Select_I_n_90;
  wire Operand_Select_I_n_91;
  wire Operand_Select_I_n_92;
  wire Operand_Select_I_n_93;
  wire Operand_Select_I_n_94;
  wire Operand_Select_I_n_95;
  wire [0:31]Other_Result;
  wire PCMP_Instr2_out;
  wire [0:31]PC_EX;
  wire [0:31]PC_OF;
  wire PC_Write;
  wire [15:0]Q;
  wire Reg_Write;
  wire [0:1]Result_Sel;
  wire S;
  wire [31:0]S0_AXIS_TDATA;
  wire S0_AXIS_TLAST;
  wire S0_AXIS_TVALID;
  wire [31:0]S1_AXIS_TDATA;
  wire [31:0]\S1_AXIS_TDATA[31] ;
  wire S1_AXIS_TLAST;
  wire S1_AXIS_TLAST_0;
  wire S1_AXIS_TVALID;
  wire S1_AXIS_TVALID_0;
  wire [0:0]SR;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Sext;
  wire Shift_Logic_Module_I_n_1;
  wire Shift_Logic_Module_I_n_10;
  wire Shift_Logic_Module_I_n_11;
  wire Shift_Logic_Module_I_n_12;
  wire Shift_Logic_Module_I_n_13;
  wire Shift_Logic_Module_I_n_14;
  wire Shift_Logic_Module_I_n_15;
  wire Shift_Logic_Module_I_n_16;
  wire Shift_Logic_Module_I_n_19;
  wire Shift_Logic_Module_I_n_2;
  wire Shift_Logic_Module_I_n_20;
  wire Shift_Logic_Module_I_n_21;
  wire Shift_Logic_Module_I_n_22;
  wire Shift_Logic_Module_I_n_23;
  wire Shift_Logic_Module_I_n_24;
  wire Shift_Logic_Module_I_n_25;
  wire Shift_Logic_Module_I_n_26;
  wire Shift_Logic_Module_I_n_27;
  wire Shift_Logic_Module_I_n_28;
  wire Shift_Logic_Module_I_n_29;
  wire Shift_Logic_Module_I_n_3;
  wire Shift_Logic_Module_I_n_30;
  wire Shift_Logic_Module_I_n_31;
  wire Shift_Logic_Module_I_n_32;
  wire Shift_Logic_Module_I_n_33;
  wire Shift_Logic_Module_I_n_34;
  wire Shift_Logic_Module_I_n_35;
  wire Shift_Logic_Module_I_n_36;
  wire Shift_Logic_Module_I_n_37;
  wire Shift_Logic_Module_I_n_38;
  wire Shift_Logic_Module_I_n_39;
  wire Shift_Logic_Module_I_n_40;
  wire Shift_Logic_Module_I_n_41;
  wire Shift_Logic_Module_I_n_42;
  wire Shift_Logic_Res;
  wire Shift_Oper;
  wire Shifted;
  wire Unsigned_Op;
  wire \Use_PCMP_instr.carry_equal_byte_gen[0].carry_equal_byte/S ;
  wire \Use_PCMP_instr.carry_equal_byte_gen[0].carry_equal_byte/Using_FPGA.The_Compare[0].sel_reg ;
  wire \Use_PCMP_instr.carry_equal_byte_gen[0].carry_equal_byte/Using_FPGA.The_Compare[2].sel_reg ;
  wire \Use_PCMP_instr.carry_equal_byte_gen[1].carry_equal_byte/S ;
  wire \Use_PCMP_instr.carry_equal_byte_gen[1].carry_equal_byte/Using_FPGA.The_Compare[0].sel_reg ;
  wire \Use_PCMP_instr.carry_equal_byte_gen[1].carry_equal_byte/Using_FPGA.The_Compare[2].sel_reg ;
  wire \Use_PCMP_instr.carry_equal_byte_gen[2].carry_equal_byte/S ;
  wire \Use_PCMP_instr.carry_equal_byte_gen[2].carry_equal_byte/Using_FPGA.The_Compare[0].sel_reg ;
  wire \Use_PCMP_instr.carry_equal_byte_gen[2].carry_equal_byte/Using_FPGA.The_Compare[2].sel_reg ;
  wire \Use_PCMP_instr.carry_equal_byte_gen[3].carry_equal_byte/S ;
  wire \Use_PCMP_instr.carry_equal_byte_gen[3].carry_equal_byte/Using_FPGA.The_Compare[0].sel_reg ;
  wire \Use_PCMP_instr.carry_equal_byte_gen[3].carry_equal_byte/Using_FPGA.The_Compare[2].sel_reg ;
  wire \Using_Barrel_Shifter.barrel_shift_I_n_0 ;
  wire \Using_Barrel_Shifter.barrel_shift_I_n_1 ;
  wire \Using_Barrel_Shifter.barrel_shift_I_n_2 ;
  wire \Using_Barrel_Shifter.barrel_shift_I_n_3 ;
  wire \Using_Barrel_Shifter.barrel_shift_I_n_4 ;
  wire \Using_Barrel_Shifter.barrel_shift_I_n_5 ;
  wire [4:0]\Using_BitField.Gen_Bits[9].mem_Rd_reg[9] ;
  wire \Using_FPGA.ALL_Bits[0].ALU_Bit_I1/S ;
  wire [0:0]\Using_FPGA.DSP48E1_I1 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_10 ;
  wire [29:0]\Using_FPGA.Native_11 ;
  wire \Using_FPGA.Native_12 ;
  wire \Using_FPGA.Native_13 ;
  wire \Using_FPGA.Native_14 ;
  wire \Using_FPGA.Native_15 ;
  wire \Using_FPGA.Native_16 ;
  wire \Using_FPGA.Native_17 ;
  wire \Using_FPGA.Native_18 ;
  wire \Using_FPGA.Native_19 ;
  wire [0:0]\Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_20 ;
  wire \Using_FPGA.Native_21 ;
  wire [17:0]\Using_FPGA.Native_22 ;
  wire [31:0]\Using_FPGA.Native_23 ;
  wire \Using_FPGA.Native_24 ;
  wire \Using_FPGA.Native_25 ;
  wire \Using_FPGA.Native_26 ;
  wire \Using_FPGA.Native_27 ;
  wire \Using_FPGA.Native_28 ;
  wire \Using_FPGA.Native_29 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_30 ;
  wire [1:0]\Using_FPGA.Native_31 ;
  wire \Using_FPGA.Native_32 ;
  wire \Using_FPGA.Native_33 ;
  wire \Using_FPGA.Native_34 ;
  wire \Using_FPGA.Native_35 ;
  wire \Using_FPGA.Native_36 ;
  wire \Using_FPGA.Native_37 ;
  wire \Using_FPGA.Native_38 ;
  wire \Using_FPGA.Native_39 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_40 ;
  wire \Using_FPGA.Native_41 ;
  wire \Using_FPGA.Native_42 ;
  wire \Using_FPGA.Native_43 ;
  wire \Using_FPGA.Native_44 ;
  wire [31:0]\Using_FPGA.Native_45 ;
  wire [14:0]\Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire \Using_FPGA.Native_8 ;
  wire \Using_FPGA.Native_9 ;
  wire \Using_dynamic_instr_Address.old_IE_value_reg ;
  wire [0:1]alu_Op;
  wire carry;
  wire carry_In;
  wire clz_instr;
  wire compare_Instr;
  wire \data_rd_reg_reg[30] ;
  wire \data_rd_reg_reg[30]_0 ;
  wire [0:31]ex_Result;
  wire ex_mulhu_instr;
  wire ex_not_mul_op;
  wire ex_sign_A;
  wire [0:0]exception_kind;
  wire [15:0]extend_Data_Read;
  wire [0:15]imm_Value;
  wire in0;
  wire jump;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire mem_mulh_instr0;
  wire [1:0]msr_I;
  wire [0:31]mul_Result;
  wire of_PipeRun;
  wire [1:26]op2_C;
  wire op2_Reg;
  wire op2_Reg__0;
  wire op2_Reg__1;
  wire op2_Reg__10;
  wire op2_Reg__11;
  wire op2_Reg__12;
  wire op2_Reg__13;
  wire op2_Reg__14;
  wire op2_Reg__15;
  wire op2_Reg__16;
  wire op2_Reg__17;
  wire op2_Reg__18;
  wire op2_Reg__19;
  wire op2_Reg__2;
  wire op2_Reg__20;
  wire op2_Reg__21;
  wire op2_Reg__22;
  wire op2_Reg__23;
  wire op2_Reg__24;
  wire op2_Reg__25;
  wire op2_Reg__26;
  wire op2_Reg__27;
  wire op2_Reg__28;
  wire op2_Reg__29;
  wire op2_Reg__3;
  wire op2_Reg__30;
  wire op2_Reg__4;
  wire op2_Reg__5;
  wire op2_Reg__6;
  wire op2_Reg__7;
  wire op2_Reg__8;
  wire op2_Reg__9;
  wire opsel1_PC;
  wire opsel1_SPR;
  wire [30:4]p_30_out;
  wire [0:4]reg1_Addr;
  wire [0:31]reg1_Data;
  wire reg_Test_Equal;
  wire reg_Test_Equal_N;
  wire reg_zero;
  wire register_write;
  wire res_Forward1;
  wire res_Forward2;
  wire sext16;
  wire sext8;
  wire [26:31]shift_Logic_Result;
  wire sync_reset;
  wire void_bit;

  block_design_microblaze_0_0_ALU ALU_I
       (.ALU_Result({\Using_FPGA.Native_11 [29],\Using_FPGA.Native_11 [28],\Using_FPGA.Native_11 [27],\Using_FPGA.Native_11 [26],\Using_FPGA.Native_11 [25],\Using_FPGA.Native_11 [24],\Using_FPGA.Native_11 [23],\Using_FPGA.Native_11 [22],\Using_FPGA.Native_11 [21],\Using_FPGA.Native_11 [20],\Using_FPGA.Native_11 [19],\Using_FPGA.Native_11 [18],\Using_FPGA.Native_11 [17],\Using_FPGA.Native_11 [16],\Using_FPGA.Native_11 [15],\Using_FPGA.Native_11 [14],\Using_FPGA.Native_11 [13],\Using_FPGA.Native_11 [12],\Using_FPGA.Native_11 [11],\Using_FPGA.Native_11 [10],\Using_FPGA.Native_11 [9],\Using_FPGA.Native_11 [8],\Using_FPGA.Native_11 [7],\Using_FPGA.Native_11 [6],\Using_FPGA.Native_11 [5],\Using_FPGA.Native_11 [4],\Using_FPGA.Native_11 [3],\Using_FPGA.Native_11 [2],\Using_FPGA.Native_11 [1],\Using_FPGA.Native_11 [0],ALU_I_n_31,ALU_I_n_32}),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[10] (Operand_Select_I_n_44),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[11] (Operand_Select_I_n_45),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[12] (Operand_Select_I_n_46),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[13] (Operand_Select_I_n_47),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[14] (Operand_Select_I_n_48),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[15] (\Using_FPGA.Native_4 ),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[16] (Operand_Select_I_n_50),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[17] (Operand_Select_I_n_51),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[18] (Operand_Select_I_n_83),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[19] (Operand_Select_I_n_84),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[20] (Operand_Select_I_n_85),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[21] (Operand_Select_I_n_86),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[22] (Operand_Select_I_n_87),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[23] (Operand_Select_I_n_88),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[24] (Operand_Select_I_n_89),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[25] (Operand_Select_I_n_90),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[26] (Operand_Select_I_n_91),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[27] (Operand_Select_I_n_92),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[28] (Operand_Select_I_n_93),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[29] (Operand_Select_I_n_94),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30] ({op2_C[1],op2_C[2],op2_C[3],op2_C[4],op2_C[5],op2_C[6],op2_C[7],op2_C[8],op2_C[9],op2_C[10],op2_C[11],op2_C[12],op2_C[13],op2_C[14]}),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30]_0 (Operand_Select_I_n_95),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31] (Operand_Select_I_n_219),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3] (\Using_FPGA.Native_0 ),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[4] (\Using_FPGA.Native_1 ),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[5] (Operand_Select_I_n_39),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[6] (Operand_Select_I_n_40),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[7] (\Using_FPGA.Native_3 ),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[8] (Operand_Select_I_n_42),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[9] (Operand_Select_I_n_43),
        .B({op2_C[15],op2_C[16],op2_C[17],op2_C[18],op2_C[19],op2_C[20],op2_C[21],op2_C[22],op2_C[23],op2_C[24],op2_C[25],op2_C[26],B[4:1]}),
        .EX_Op1(\Using_FPGA.Native ),
        .LO(LO),
        .Op1_Shift(Op1[0]),
        .Op2(\Using_FPGA.Native_2 ),
        .S(\Using_FPGA.ALL_Bits[0].ALU_Bit_I1/S ),
        .Shifted(\Using_FPGA.Native_6 ),
        .Unsigned_Op(Unsigned_Op),
        .\Using_FPGA.Native_I2 (B[0]),
        .\Using_FPGA.Native_I2_0 (Op1[1]),
        .alu_Op(alu_Op),
        .carry_In(carry_In),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5));
  block_design_microblaze_0_0_MSR_Reg MSR_Reg_I
       (.Clk(Clk),
        .MSR_Rst(MSR_Rst),
        .\Using_FPGA.Native (carry),
        .\Using_FPGA.Native_0 (Enable_Interrupt),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_7 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_33 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_34 ),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_35 ),
        .\Using_FPGA.Native_5 (\Using_FPGA.Native_36 ),
        .\Using_FPGA.Native_6 (\Using_FPGA.Native_37 ),
        .\Using_FPGA.Native_7 (\Using_FPGA.Native_38 ),
        .\Using_FPGA.Native_8 (\Using_FPGA.Native_39 ),
        .\Using_dynamic_instr_Address.old_IE_value_reg (\Using_dynamic_instr_Address.old_IE_value_reg ),
        .msr_I(msr_I));
  block_design_microblaze_0_0_Operand_Select Operand_Select_I
       (.A(A),
        .B({op2_C[15],op2_C[16],op2_C[17],op2_C[18],op2_C[19],op2_C[20],op2_C[21],op2_C[22],op2_C[23],op2_C[24],op2_C[25],op2_C[26],B[4:1]}),
        .BitField_Extract(BitField_Extract),
        .BitField_Insert(BitField_Insert),
        .\C_reg[23] (\Using_Barrel_Shifter.barrel_shift_I_n_3 ),
        .\C_reg[27] (\Using_Barrel_Shifter.barrel_shift_I_n_4 ),
        .\C_reg[28] (\C_reg[28] ),
        .\C_reg[28]_0 (\C_reg[28]_0 ),
        .\C_reg[28]_1 (\Using_Barrel_Shifter.barrel_shift_I_n_5 ),
        .\C_reg[29] (\Using_Barrel_Shifter.barrel_shift_I_n_2 ),
        .\C_reg[30] (\Using_Barrel_Shifter.barrel_shift_I_n_1 ),
        .\C_reg[30]_0 (\Using_Barrel_Shifter.barrel_shift_I_n_0 ),
        .Clk(Clk),
        .D({Operand_Select_I_n_131,Operand_Select_I_n_132,Operand_Select_I_n_133,Operand_Select_I_n_134,Operand_Select_I_n_135,Operand_Select_I_n_136,Operand_Select_I_n_137,Operand_Select_I_n_138,Operand_Select_I_n_139,Operand_Select_I_n_140,Operand_Select_I_n_141,Operand_Select_I_n_142,Operand_Select_I_n_143,Operand_Select_I_n_144,Operand_Select_I_n_145,Operand_Select_I_n_146,Operand_Select_I_n_147,Operand_Select_I_n_148,Operand_Select_I_n_149,Operand_Select_I_n_150,Operand_Select_I_n_151,Operand_Select_I_n_152,Operand_Select_I_n_153,Operand_Select_I_n_154,Operand_Select_I_n_155,Operand_Select_I_n_156,Operand_Select_I_n_157,Operand_Select_I_n_158,Operand_Select_I_n_159,Operand_Select_I_n_160,Operand_Select_I_n_161}),
        .D_0(D_0),
        .D_1(D_1),
        .D_10(D_10),
        .D_11(D_11),
        .D_12(D_12),
        .D_13(D_13),
        .D_14(D_14),
        .D_15(D_15),
        .D_16(D_16),
        .D_17(D_17),
        .D_18(D_18),
        .D_19(D_19),
        .D_2(D_2),
        .D_20(D_20),
        .D_21(D_21),
        .D_22(D_22),
        .D_23(D_23),
        .D_24(D_24),
        .D_25(D_25),
        .D_26(D_26),
        .D_27(D_27),
        .D_28(D_28),
        .D_29(D_29),
        .D_3(D_3),
        .D_30(D_30),
        .D_31(D_31),
        .D_32(D_32),
        .D_33(D_33),
        .D_34(D_34),
        .D_4(D_4),
        .D_6(D_6),
        .D_8(D_8),
        .E(E),
        .EX_Op1(\Using_FPGA.Native ),
        .I0(I0),
        .I3(I3),
        .I3_11(\OpSelect_Bits[30].Operand_Select_Bit_I/I3 ),
        .I3_12(\OpSelect_Bits[29].Operand_Select_Bit_I/I3 ),
        .I3_13(\OpSelect_Bits[28].Operand_Select_Bit_I/I3 ),
        .I3_14(\OpSelect_Bits[27].Operand_Select_Bit_I/I3 ),
        .I3_15(\OpSelect_Bits[0].Operand_Select_Bit_I/I3 ),
        .I3_5(I3_5),
        .I3_7(I3_7),
        .I3_9(I3_9),
        .Is_Equal(Is_Equal),
        .Op1_Shift(Op1[0]),
        .PCMP_Instr2_out(PCMP_Instr2_out),
        .PC_OF({PC_OF[1],PC_OF[2],PC_OF[3],PC_OF[4],PC_OF[5],PC_OF[6],PC_OF[7],PC_OF[8],PC_OF[9],PC_OF[10],PC_OF[11],PC_OF[12],PC_OF[13],PC_OF[14],PC_OF[15],PC_OF[16],PC_OF[17],PC_OF[18],PC_OF[19],PC_OF[20],PC_OF[21],PC_OF[22],PC_OF[23]}),
        .Q(Q),
        .Reg1_Data(reg1_Data),
        .S(\Using_FPGA.ALL_Bits[0].ALU_Bit_I1/S ),
        .S0_AXIS_TDATA(S0_AXIS_TDATA),
        .S0_AXIS_TLAST(S0_AXIS_TLAST),
        .S0_AXIS_TVALID(S0_AXIS_TVALID),
        .S1_AXIS_TDATA(S1_AXIS_TDATA),
        .\S1_AXIS_TDATA[31] (\S1_AXIS_TDATA[31] ),
        .S1_AXIS_TLAST(S1_AXIS_TLAST),
        .S1_AXIS_TLAST_0(S1_AXIS_TLAST_0),
        .S1_AXIS_TVALID(S1_AXIS_TVALID),
        .S1_AXIS_TVALID_0(S1_AXIS_TVALID_0),
        .S_0(\Use_PCMP_instr.carry_equal_byte_gen[0].carry_equal_byte/S ),
        .S_10(S),
        .S_2(\Use_PCMP_instr.carry_equal_byte_gen[1].carry_equal_byte/S ),
        .S_5(\Use_PCMP_instr.carry_equal_byte_gen[2].carry_equal_byte/S ),
        .S_8(\Use_PCMP_instr.carry_equal_byte_gen[3].carry_equal_byte/S ),
        .Sext(Operand_Select_I_n_196),
        .Shift_Logic_Res(Shift_Logic_Module_I_n_15),
        .Shifted(Operand_Select_I_n_42),
        .\Using_FPGA.Native (B[0]),
        .\Using_FPGA.Native_0 (Op1[1]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_10 (Operand_Select_I_n_47),
        .\Using_FPGA.Native_11 (Operand_Select_I_n_48),
        .\Using_FPGA.Native_12 (\Using_FPGA.Native_4 ),
        .\Using_FPGA.Native_13 (Operand_Select_I_n_50),
        .\Using_FPGA.Native_14 (Operand_Select_I_n_51),
        .\Using_FPGA.Native_15 ({ex_sign_A,\Using_FPGA.Native_5 }),
        .\Using_FPGA.Native_16 ({\Using_FPGA.Native_2 ,op2_C[1],op2_C[2],op2_C[3],op2_C[4],op2_C[5],op2_C[6],op2_C[7],op2_C[8],op2_C[9],op2_C[10],op2_C[11],op2_C[12],op2_C[13],op2_C[14]}),
        .\Using_FPGA.Native_17 (Operand_Select_I_n_83),
        .\Using_FPGA.Native_18 (Operand_Select_I_n_84),
        .\Using_FPGA.Native_19 (Operand_Select_I_n_85),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_20 (Operand_Select_I_n_86),
        .\Using_FPGA.Native_21 (Operand_Select_I_n_87),
        .\Using_FPGA.Native_22 (Operand_Select_I_n_88),
        .\Using_FPGA.Native_23 (Operand_Select_I_n_89),
        .\Using_FPGA.Native_24 (Operand_Select_I_n_90),
        .\Using_FPGA.Native_25 (Operand_Select_I_n_91),
        .\Using_FPGA.Native_26 (Operand_Select_I_n_92),
        .\Using_FPGA.Native_27 (Operand_Select_I_n_93),
        .\Using_FPGA.Native_28 (Operand_Select_I_n_94),
        .\Using_FPGA.Native_29 (Operand_Select_I_n_95),
        .\Using_FPGA.Native_3 (Operand_Select_I_n_39),
        .\Using_FPGA.Native_30 (\Using_FPGA.Native_6 ),
        .\Using_FPGA.Native_31 (Operand_Select_I_n_162),
        .\Using_FPGA.Native_32 ({p_30_out[30:15],Operand_Select_I_n_179,Operand_Select_I_n_180,p_30_out[12],Operand_Select_I_n_182,Operand_Select_I_n_183,Operand_Select_I_n_184,Operand_Select_I_n_185,Operand_Select_I_n_186,Operand_Select_I_n_187,Operand_Select_I_n_188,p_30_out[4],Operand_Select_I_n_190,Operand_Select_I_n_191,Operand_Select_I_n_192,Operand_Select_I_n_193}),
        .\Using_FPGA.Native_33 (Operand_Select_I_n_197),
        .\Using_FPGA.Native_34 (Operand_Select_I_n_198),
        .\Using_FPGA.Native_35 ({Operand_Select_I_n_211,Operand_Select_I_n_212,Operand_Select_I_n_213,Operand_Select_I_n_214,Operand_Select_I_n_215,Operand_Select_I_n_216}),
        .\Using_FPGA.Native_36 (Operand_Select_I_n_219),
        .\Using_FPGA.Native_37 (\Using_FPGA.Native_40 ),
        .\Using_FPGA.Native_38 (Shift_Logic_Module_I_n_1),
        .\Using_FPGA.Native_39 (Shift_Logic_Module_I_n_11),
        .\Using_FPGA.Native_4 (Operand_Select_I_n_40),
        .\Using_FPGA.Native_40 (Shift_Logic_Module_I_n_10),
        .\Using_FPGA.Native_41 (\Using_FPGA.Native_41 ),
        .\Using_FPGA.Native_42 (Shift_Logic_Module_I_n_16),
        .\Using_FPGA.Native_43 (\Using_FPGA.Native_42 ),
        .\Using_FPGA.Native_5 (\Using_FPGA.Native_3 ),
        .\Using_FPGA.Native_6 (Operand_Select_I_n_43),
        .\Using_FPGA.Native_7 (Operand_Select_I_n_44),
        .\Using_FPGA.Native_8 (Operand_Select_I_n_45),
        .\Using_FPGA.Native_9 (Operand_Select_I_n_46),
        .\Using_FPGA.Native_i_1__45 (Shift_Logic_Module_I_n_3),
        .\Using_FPGA.Native_i_1__46 (Shift_Logic_Module_I_n_12),
        .\Using_FPGA.Native_i_1__46_0 (Shift_Logic_Module_I_n_13),
        .\Using_FPGA.Native_i_2__31 (Shift_Logic_Module_I_n_14),
        .\Using_FPGA.Native_i_2__31_0 (Shift_Logic_Module_I_n_2),
        .\Using_FPGA.The_Compare[0].sel_reg (\Use_PCMP_instr.carry_equal_byte_gen[0].carry_equal_byte/Using_FPGA.The_Compare[0].sel_reg ),
        .\Using_FPGA.The_Compare[0].sel_reg_3 (\Use_PCMP_instr.carry_equal_byte_gen[1].carry_equal_byte/Using_FPGA.The_Compare[0].sel_reg ),
        .\Using_FPGA.The_Compare[0].sel_reg_6 (\Use_PCMP_instr.carry_equal_byte_gen[2].carry_equal_byte/Using_FPGA.The_Compare[0].sel_reg ),
        .\Using_FPGA.The_Compare[0].sel_reg_9 (\Use_PCMP_instr.carry_equal_byte_gen[3].carry_equal_byte/Using_FPGA.The_Compare[0].sel_reg ),
        .\Using_FPGA.The_Compare[2].sel_reg (\Use_PCMP_instr.carry_equal_byte_gen[0].carry_equal_byte/Using_FPGA.The_Compare[2].sel_reg ),
        .\Using_FPGA.The_Compare[2].sel_reg_1 (\Use_PCMP_instr.carry_equal_byte_gen[1].carry_equal_byte/Using_FPGA.The_Compare[2].sel_reg ),
        .\Using_FPGA.The_Compare[2].sel_reg_4 (\Use_PCMP_instr.carry_equal_byte_gen[2].carry_equal_byte/Using_FPGA.The_Compare[2].sel_reg ),
        .\Using_FPGA.The_Compare[2].sel_reg_7 (\Use_PCMP_instr.carry_equal_byte_gen[3].carry_equal_byte/Using_FPGA.The_Compare[2].sel_reg ),
        .compare_Instr(compare_Instr),
        .ex_Result(ex_Result),
        .ex_mulhu_instr(ex_mulhu_instr),
        .imm_Value(imm_Value),
        .\instr_EX_i_reg[22] (Operand_Select_I_n_217),
        .of_PipeRun(of_PipeRun),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sext16(sext16),
        .sext8(sext8),
        .sync_reset(sync_reset),
        .void_bit(void_bit));
  block_design_microblaze_0_0_PC_Module PC_Module_I
       (.ALU_Result({\Using_FPGA.Native_11 [29],\Using_FPGA.Native_11 [28],\Using_FPGA.Native_11 [27],\Using_FPGA.Native_11 [26],\Using_FPGA.Native_11 [25],\Using_FPGA.Native_11 [24],\Using_FPGA.Native_11 [23],\Using_FPGA.Native_11 [22],\Using_FPGA.Native_11 [21],\Using_FPGA.Native_11 [20],\Using_FPGA.Native_11 [19],\Using_FPGA.Native_11 [18],\Using_FPGA.Native_11 [17],\Using_FPGA.Native_11 [16],\Using_FPGA.Native_11 [15],\Using_FPGA.Native_11 [14],\Using_FPGA.Native_11 [13],\Using_FPGA.Native_11 [12],\Using_FPGA.Native_11 [11],\Using_FPGA.Native_11 [10],\Using_FPGA.Native_11 [9],\Using_FPGA.Native_11 [8],\Using_FPGA.Native_11 [7],\Using_FPGA.Native_11 [6],\Using_FPGA.Native_11 [5],\Using_FPGA.Native_11 [4],\Using_FPGA.Native_11 [3],\Using_FPGA.Native_11 [2],\Using_FPGA.Native_11 [1],\Using_FPGA.Native_11 [0],ALU_I_n_31,ALU_I_n_32}),
        .Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .DI(DI),
        .Enable_Interrupt(Enable_Interrupt),
        .I3(\OpSelect_Bits[30].Operand_Select_Bit_I/I3 ),
        .I3_0(\OpSelect_Bits[29].Operand_Select_Bit_I/I3 ),
        .I3_1(\OpSelect_Bits[28].Operand_Select_Bit_I/I3 ),
        .I3_2(\OpSelect_Bits[27].Operand_Select_Bit_I/I3 ),
        .I3_3(\OpSelect_Bits[0].Operand_Select_Bit_I/I3 ),
        .IReady(IReady),
        .OF_PipeRun(OF_PipeRun),
        .PC_EX(PC_EX),
        .PC_OF(PC_OF),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native_23 ),
        .\Using_FPGA.Native_0 (carry),
        .jump(jump),
        .msr_I(msr_I),
        .opsel1_PC(opsel1_PC),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_Register_File Register_File_I
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Interrupt_Address(Interrupt_Address),
        .Reg1_Data(reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_BitField.Gen_Bits[9].mem_Rd_reg[9] (\Using_BitField.Gen_Bits[9].mem_Rd_reg[9] ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .imm_Value({imm_Value[0],imm_Value[1],imm_Value[2],imm_Value[3],imm_Value[4]}),
        .op2_Reg(op2_Reg),
        .op2_Reg__0(op2_Reg__0),
        .op2_Reg__1(op2_Reg__1),
        .op2_Reg__10(op2_Reg__10),
        .op2_Reg__11(op2_Reg__11),
        .op2_Reg__12(op2_Reg__12),
        .op2_Reg__13(op2_Reg__13),
        .op2_Reg__14(op2_Reg__14),
        .op2_Reg__15(op2_Reg__15),
        .op2_Reg__16(op2_Reg__16),
        .op2_Reg__17(op2_Reg__17),
        .op2_Reg__18(op2_Reg__18),
        .op2_Reg__19(op2_Reg__19),
        .op2_Reg__2(op2_Reg__2),
        .op2_Reg__20(op2_Reg__20),
        .op2_Reg__21(op2_Reg__21),
        .op2_Reg__22(op2_Reg__22),
        .op2_Reg__23(op2_Reg__23),
        .op2_Reg__24(op2_Reg__24),
        .op2_Reg__25(op2_Reg__25),
        .op2_Reg__26(op2_Reg__26),
        .op2_Reg__27(op2_Reg__27),
        .op2_Reg__28(op2_Reg__28),
        .op2_Reg__29(op2_Reg__29),
        .op2_Reg__3(op2_Reg__3),
        .op2_Reg__30(op2_Reg__30),
        .op2_Reg__4(op2_Reg__4),
        .op2_Reg__5(op2_Reg__5),
        .op2_Reg__6(op2_Reg__6),
        .op2_Reg__7(op2_Reg__7),
        .op2_Reg__8(op2_Reg__8),
        .op2_Reg__9(op2_Reg__9),
        .reg1_Addr(reg1_Addr),
        .res_Forward2(res_Forward2));
  block_design_microblaze_0_0_Result_Mux Result_Mux_I
       (.ALU_Result({\Using_FPGA.Native_11 [29],\Using_FPGA.Native_11 [28],\Using_FPGA.Native_11 [27],\Using_FPGA.Native_11 [26],\Using_FPGA.Native_11 [25],\Using_FPGA.Native_11 [24],\Using_FPGA.Native_11 [23],\Using_FPGA.Native_11 [22],\Using_FPGA.Native_11 [21],\Using_FPGA.Native_11 [20],\Using_FPGA.Native_11 [19],\Using_FPGA.Native_11 [18],\Using_FPGA.Native_11 [17],\Using_FPGA.Native_11 [16],\Using_FPGA.Native_11 [15],\Using_FPGA.Native_11 [14],\Using_FPGA.Native_11 [13],\Using_FPGA.Native_11 [12],\Using_FPGA.Native_11 [11],\Using_FPGA.Native_11 [10],\Using_FPGA.Native_11 [9],\Using_FPGA.Native_11 [8],\Using_FPGA.Native_11 [7],\Using_FPGA.Native_11 [6],\Using_FPGA.Native_11 [5],\Using_FPGA.Native_11 [4],\Using_FPGA.Native_11 [3],\Using_FPGA.Native_11 [2],\Using_FPGA.Native_11 [1],\Using_FPGA.Native_11 [0],ALU_I_n_31,ALU_I_n_32}),
        .Clk(Clk),
        .D(D),
        .Data_Read0_out(Data_Read0_out),
        .Data_Read_Mask(Data_Read_Mask),
        .Enable_Interrupt(Enable_Interrupt),
        .New_Reg_Value(New_Reg_Value),
        .Other_Result(Other_Result),
        .PC_EX({PC_EX[27],PC_EX[28],PC_EX[29],PC_EX[30]}),
        .Result_Sel(Result_Sel),
        .Shift_Logic_Res(Shift_Logic_Module_I_n_19),
        .\Using_FPGA.Native (\Using_FPGA.Native_8 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_9 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_10 ),
        .\Using_FPGA.Native_10 (\Using_FPGA.Native_20 ),
        .\Using_FPGA.Native_11 (\Using_FPGA.Native_21 ),
        .\Using_FPGA.Native_12 (\Using_FPGA.Native_22 ),
        .\Using_FPGA.Native_13 (\Using_FPGA.Native_31 ),
        .\Using_FPGA.Native_14 (Shift_Logic_Module_I_n_20),
        .\Using_FPGA.Native_15 (Shift_Logic_Module_I_n_21),
        .\Using_FPGA.Native_16 (Shift_Logic_Module_I_n_22),
        .\Using_FPGA.Native_17 (Shift_Logic_Module_I_n_23),
        .\Using_FPGA.Native_18 (Shift_Logic_Module_I_n_24),
        .\Using_FPGA.Native_19 (Shift_Logic_Module_I_n_25),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_12 ),
        .\Using_FPGA.Native_20 (Shift_Logic_Module_I_n_26),
        .\Using_FPGA.Native_21 (Shift_Logic_Module_I_n_27),
        .\Using_FPGA.Native_22 (\Using_FPGA.Native_44 ),
        .\Using_FPGA.Native_23 (Shift_Logic_Module_I_n_28),
        .\Using_FPGA.Native_24 (Shift_Logic_Module_I_n_29),
        .\Using_FPGA.Native_25 (Shift_Logic_Module_I_n_30),
        .\Using_FPGA.Native_26 (Shift_Logic_Module_I_n_31),
        .\Using_FPGA.Native_27 (Shift_Logic_Module_I_n_32),
        .\Using_FPGA.Native_28 (Shift_Logic_Module_I_n_33),
        .\Using_FPGA.Native_29 (Shift_Logic_Module_I_n_34),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_13 ),
        .\Using_FPGA.Native_30 (Shift_Logic_Module_I_n_35),
        .\Using_FPGA.Native_31 (Shift_Logic_Module_I_n_36),
        .\Using_FPGA.Native_32 (Shift_Logic_Module_I_n_37),
        .\Using_FPGA.Native_33 (Shift_Logic_Module_I_n_38),
        .\Using_FPGA.Native_34 (Shift_Logic_Module_I_n_39),
        .\Using_FPGA.Native_35 (Shift_Logic_Module_I_n_40),
        .\Using_FPGA.Native_36 (Shift_Logic_Module_I_n_41),
        .\Using_FPGA.Native_37 (Shift_Logic_Module_I_n_42),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_14 ),
        .\Using_FPGA.Native_5 (\Using_FPGA.Native_15 ),
        .\Using_FPGA.Native_6 (\Using_FPGA.Native_16 ),
        .\Using_FPGA.Native_7 (\Using_FPGA.Native_17 ),
        .\Using_FPGA.Native_8 (\Using_FPGA.Native_18 ),
        .\Using_FPGA.Native_9 (\Using_FPGA.Native_19 ),
        .carry(carry),
        .\data_rd_reg_reg[30] (\data_rd_reg_reg[30] ),
        .\data_rd_reg_reg[30]_0 (\data_rd_reg_reg[30]_0 ),
        .ex_Result(ex_Result),
        .extend_Data_Read(extend_Data_Read),
        .msr_I(msr_I),
        .mul_Result(mul_Result),
        .register_write(register_write),
        .shift_Logic_Result({shift_Logic_Result[26],shift_Logic_Result[27],shift_Logic_Result[28],shift_Logic_Result[29],shift_Logic_Result[30],shift_Logic_Result[31]}));
  block_design_microblaze_0_0_Shift_Logic_Module Shift_Logic_Module_I
       (.B({op2_C[15],op2_C[16],op2_C[17],op2_C[18],op2_C[19],op2_C[20],op2_C[21],op2_C[22],op2_C[23],op2_C[24],op2_C[25],op2_C[26],B[4:1]}),
        .EX_Op1(\Using_FPGA.Native ),
        .Enable_2(Enable_2),
        .I0(I0),
        .I3_35(I3_35),
        .Is_Equal(Is_Equal),
        .Logic_Oper(Logic_Oper),
        .Op1_Shift(\Using_FPGA.Native_3 ),
        .S(\Use_PCMP_instr.carry_equal_byte_gen[0].carry_equal_byte/S ),
        .S_1(\Use_PCMP_instr.carry_equal_byte_gen[1].carry_equal_byte/S ),
        .S_4(\Use_PCMP_instr.carry_equal_byte_gen[2].carry_equal_byte/S ),
        .S_7(\Use_PCMP_instr.carry_equal_byte_gen[3].carry_equal_byte/S ),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Shift_Logic_Module_I_n_16),
        .Select_Logic_reg_0(Shift_Logic_Res),
        .Select_Logic_reg_1(Select_Logic_reg),
        .Select_Logic_reg_10(Shift_Logic_Module_I_n_27),
        .Select_Logic_reg_11(Shift_Logic_Module_I_n_28),
        .Select_Logic_reg_12(Shift_Logic_Module_I_n_29),
        .Select_Logic_reg_13(Shift_Logic_Module_I_n_30),
        .Select_Logic_reg_14(Shift_Logic_Module_I_n_31),
        .Select_Logic_reg_15(Shift_Logic_Module_I_n_32),
        .Select_Logic_reg_16(Shift_Logic_Module_I_n_33),
        .Select_Logic_reg_17(Shift_Logic_Module_I_n_34),
        .Select_Logic_reg_18(Shift_Logic_Module_I_n_35),
        .Select_Logic_reg_19(Shift_Logic_Module_I_n_36),
        .Select_Logic_reg_2(Shift_Logic_Module_I_n_19),
        .Select_Logic_reg_20(Shift_Logic_Module_I_n_37),
        .Select_Logic_reg_21(Shift_Logic_Module_I_n_38),
        .Select_Logic_reg_22(Shift_Logic_Module_I_n_39),
        .Select_Logic_reg_23(Shift_Logic_Module_I_n_40),
        .Select_Logic_reg_24(Shift_Logic_Module_I_n_41),
        .Select_Logic_reg_25(Shift_Logic_Module_I_n_42),
        .Select_Logic_reg_3(Shift_Logic_Module_I_n_20),
        .Select_Logic_reg_4(Shift_Logic_Module_I_n_21),
        .Select_Logic_reg_5(Shift_Logic_Module_I_n_22),
        .Select_Logic_reg_6(Shift_Logic_Module_I_n_23),
        .Select_Logic_reg_7(Shift_Logic_Module_I_n_24),
        .Select_Logic_reg_8(Shift_Logic_Module_I_n_25),
        .Select_Logic_reg_9(Shift_Logic_Module_I_n_26),
        .Sext(Sext),
        .Shift_Logic_Res(Shift_Logic_Module_I_n_15),
        .Shift_Oper(Shift_Oper),
        .Shifted(\Using_FPGA.Native_6 ),
        .\Use_The_PCMP_instr.CLZ_Instr_reg (Shift_Logic_Module_I_n_10),
        .\Using_FPGA.Native (Shift_Logic_Module_I_n_1),
        .\Using_FPGA.Native_0 (Shift_Logic_Module_I_n_2),
        .\Using_FPGA.Native_1 (Shift_Logic_Module_I_n_3),
        .\Using_FPGA.Native_10 (\Using_FPGA.Native_28 ),
        .\Using_FPGA.Native_11 (\Using_FPGA.Native_29 ),
        .\Using_FPGA.Native_12 (\Using_FPGA.Native_30 ),
        .\Using_FPGA.Native_13 (Operand_Select_I_n_197),
        .\Using_FPGA.Native_14 (Operand_Select_I_n_198),
        .\Using_FPGA.Native_15 (\Using_FPGA.Native_41 ),
        .\Using_FPGA.Native_16 (Operand_Select_I_n_40),
        .\Using_FPGA.Native_17 (B[0]),
        .\Using_FPGA.Native_18 (Op1[0]),
        .\Using_FPGA.Native_19 (Op1[1]),
        .\Using_FPGA.Native_2 (Shift_Logic_Module_I_n_11),
        .\Using_FPGA.Native_20 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_21 (Op1_Shift),
        .\Using_FPGA.Native_22 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_23 (Operand_Select_I_n_39),
        .\Using_FPGA.Native_24 (Operand_Select_I_n_42),
        .\Using_FPGA.Native_25 (Operand_Select_I_n_43),
        .\Using_FPGA.Native_26 (Operand_Select_I_n_44),
        .\Using_FPGA.Native_27 (Operand_Select_I_n_45),
        .\Using_FPGA.Native_28 (Operand_Select_I_n_46),
        .\Using_FPGA.Native_29 (Operand_Select_I_n_47),
        .\Using_FPGA.Native_3 (Shift_Logic_Module_I_n_12),
        .\Using_FPGA.Native_30 (Operand_Select_I_n_48),
        .\Using_FPGA.Native_31 (\Using_FPGA.Native_4 ),
        .\Using_FPGA.Native_32 (Operand_Select_I_n_50),
        .\Using_FPGA.Native_33 (Operand_Select_I_n_51),
        .\Using_FPGA.Native_34 (Operand_Select_I_n_196),
        .\Using_FPGA.Native_35 ({\Using_FPGA.Native_2 ,op2_C[1],op2_C[2],op2_C[3],op2_C[4],op2_C[5],op2_C[6],op2_C[7],op2_C[8],op2_C[9],op2_C[10],op2_C[11],op2_C[12],op2_C[13],op2_C[14]}),
        .\Using_FPGA.Native_36 (Operand_Select_I_n_83),
        .\Using_FPGA.Native_37 (Operand_Select_I_n_84),
        .\Using_FPGA.Native_38 (Operand_Select_I_n_85),
        .\Using_FPGA.Native_39 (Operand_Select_I_n_86),
        .\Using_FPGA.Native_4 (Shift_Logic_Module_I_n_13),
        .\Using_FPGA.Native_40 (Operand_Select_I_n_87),
        .\Using_FPGA.Native_41 (Operand_Select_I_n_88),
        .\Using_FPGA.Native_42 (Operand_Select_I_n_89),
        .\Using_FPGA.Native_43 (Operand_Select_I_n_90),
        .\Using_FPGA.Native_44 (Operand_Select_I_n_91),
        .\Using_FPGA.Native_45 (Operand_Select_I_n_92),
        .\Using_FPGA.Native_46 (Operand_Select_I_n_93),
        .\Using_FPGA.Native_47 (Operand_Select_I_n_94),
        .\Using_FPGA.Native_48 (Operand_Select_I_n_95),
        .\Using_FPGA.Native_49 (Shifted),
        .\Using_FPGA.Native_5 (Shift_Logic_Module_I_n_14),
        .\Using_FPGA.Native_50 (\Using_FPGA.Native_43 ),
        .\Using_FPGA.Native_6 (\Using_FPGA.Native_24 ),
        .\Using_FPGA.Native_7 (\Using_FPGA.Native_25 ),
        .\Using_FPGA.Native_8 (\Using_FPGA.Native_26 ),
        .\Using_FPGA.Native_9 (\Using_FPGA.Native_27 ),
        .\Using_FPGA.Native_i_1__45 (Operand_Select_I_n_162),
        .\Using_FPGA.Native_i_1__45_0 (\Using_FPGA.Native_42 ),
        .\Using_FPGA.Native_i_5 (\Using_FPGA.Native_40 ),
        .\Using_FPGA.The_Compare[0].sel_reg (\Use_PCMP_instr.carry_equal_byte_gen[0].carry_equal_byte/Using_FPGA.The_Compare[0].sel_reg ),
        .\Using_FPGA.The_Compare[0].sel_reg_2 (\Use_PCMP_instr.carry_equal_byte_gen[1].carry_equal_byte/Using_FPGA.The_Compare[0].sel_reg ),
        .\Using_FPGA.The_Compare[0].sel_reg_5 (\Use_PCMP_instr.carry_equal_byte_gen[2].carry_equal_byte/Using_FPGA.The_Compare[0].sel_reg ),
        .\Using_FPGA.The_Compare[0].sel_reg_8 (\Use_PCMP_instr.carry_equal_byte_gen[3].carry_equal_byte/Using_FPGA.The_Compare[0].sel_reg ),
        .\Using_FPGA.The_Compare[2].sel_reg (\Use_PCMP_instr.carry_equal_byte_gen[0].carry_equal_byte/Using_FPGA.The_Compare[2].sel_reg ),
        .\Using_FPGA.The_Compare[2].sel_reg_0 (\Use_PCMP_instr.carry_equal_byte_gen[1].carry_equal_byte/Using_FPGA.The_Compare[2].sel_reg ),
        .\Using_FPGA.The_Compare[2].sel_reg_3 (\Use_PCMP_instr.carry_equal_byte_gen[2].carry_equal_byte/Using_FPGA.The_Compare[2].sel_reg ),
        .\Using_FPGA.The_Compare[2].sel_reg_6 (\Use_PCMP_instr.carry_equal_byte_gen[3].carry_equal_byte/Using_FPGA.The_Compare[2].sel_reg ),
        .clz_instr(clz_instr),
        .shift_Logic_Result({shift_Logic_Result[26],shift_Logic_Result[27],shift_Logic_Result[28],shift_Logic_Result[29],shift_Logic_Result[30],shift_Logic_Result[31]}));
  block_design_microblaze_0_0_barrel_shift \Using_Barrel_Shifter.barrel_shift_I 
       (.B(B[4:1]),
        .\C[12]_i_2 (\Using_FPGA.Native_1 ),
        .\C[12]_i_2_0 (Operand_Select_I_n_92),
        .\C[12]_i_2_1 (Operand_Select_I_n_85),
        .\C[12]_i_2_2 (Operand_Select_I_n_45),
        .\C[13]_i_2 (\Using_FPGA.Native_0 ),
        .\C[13]_i_2_0 (Operand_Select_I_n_93),
        .\C[13]_i_2_1 (Operand_Select_I_n_84),
        .\C[13]_i_2_2 (Operand_Select_I_n_46),
        .\C[13]_i_2_3 (Operand_Select_I_n_39),
        .\C[13]_i_2_4 (Operand_Select_I_n_91),
        .\C[13]_i_2_5 (Operand_Select_I_n_86),
        .\C[13]_i_2_6 (Operand_Select_I_n_44),
        .\C[14]_i_2 (Operand_Select_I_n_94),
        .\C[14]_i_2_0 (Operand_Select_I_n_83),
        .\C[14]_i_2_1 (Operand_Select_I_n_47),
        .\C[7]_i_2 (Operand_Select_I_n_40),
        .\C[7]_i_2_0 (Operand_Select_I_n_90),
        .\C[7]_i_2_1 (Operand_Select_I_n_87),
        .\C[7]_i_2_2 (Operand_Select_I_n_43),
        .\C[8]_i_2 (\Using_FPGA.Native_3 ),
        .\C[8]_i_2_0 (Operand_Select_I_n_89),
        .\C[8]_i_2_1 (Operand_Select_I_n_88),
        .\C_reg[19]_0 (Operand_Select_I_n_217),
        .\C_reg[23]_0 ({Operand_Select_I_n_211,Operand_Select_I_n_212,Operand_Select_I_n_213,Operand_Select_I_n_214,Operand_Select_I_n_215,Operand_Select_I_n_216}),
        .\C_reg[30]_0 (\Using_FPGA.Native_6 ),
        .\C_reg[30]_1 (Operand_Select_I_n_50),
        .\C_reg[30]_2 (\Using_FPGA.Native_4 ),
        .\C_reg[30]_3 (\C_reg[28] ),
        .\C_reg[30]_4 (Op1[1]),
        .\C_reg[30]_5 (Operand_Select_I_n_95),
        .\C_reg[30]_6 (Operand_Select_I_n_51),
        .\C_reg[30]_7 (Operand_Select_I_n_48),
        .\C_reg[5]_0 (B[0]),
        .Clk(Clk),
        .D({Operand_Select_I_n_131,Operand_Select_I_n_132,Operand_Select_I_n_133,Operand_Select_I_n_134,Operand_Select_I_n_135,Operand_Select_I_n_136,Operand_Select_I_n_137,Operand_Select_I_n_138,Operand_Select_I_n_139,Operand_Select_I_n_140,Operand_Select_I_n_141,Operand_Select_I_n_142,Operand_Select_I_n_143,Operand_Select_I_n_144,Operand_Select_I_n_145,Operand_Select_I_n_146,Operand_Select_I_n_147,Operand_Select_I_n_148,Operand_Select_I_n_149,Operand_Select_I_n_150,Operand_Select_I_n_151,Operand_Select_I_n_152,Operand_Select_I_n_153,Operand_Select_I_n_154,Operand_Select_I_n_155,Operand_Select_I_n_156,Operand_Select_I_n_157,Operand_Select_I_n_158,Operand_Select_I_n_159,Operand_Select_I_n_160,Operand_Select_I_n_161}),
        .Data_Write(Data_Write),
        .EX_Op1(\Using_FPGA.Native ),
        .Op1_Shift(Op1[0]),
        .Other_Result(Other_Result),
        .SR(SR),
        .Shifted(Operand_Select_I_n_42),
        .\Using_BitField.mem_mask0_reg[0]_0 ({BitField_Insert,p_30_out[30:15],Operand_Select_I_n_179,Operand_Select_I_n_180,p_30_out[12],Operand_Select_I_n_182,Operand_Select_I_n_183,Operand_Select_I_n_184,Operand_Select_I_n_185,Operand_Select_I_n_186,Operand_Select_I_n_187,Operand_Select_I_n_188,p_30_out[4],Operand_Select_I_n_190,Operand_Select_I_n_191,Operand_Select_I_n_192,Operand_Select_I_n_193}),
        .\Using_FPGA.Native (\Using_Barrel_Shifter.barrel_shift_I_n_0 ),
        .\Using_FPGA.Native_0 (\Using_Barrel_Shifter.barrel_shift_I_n_1 ),
        .\Using_FPGA.Native_1 (\Using_Barrel_Shifter.barrel_shift_I_n_2 ),
        .\Using_FPGA.Native_2 (\Using_Barrel_Shifter.barrel_shift_I_n_3 ),
        .\Using_FPGA.Native_3 (\Using_Barrel_Shifter.barrel_shift_I_n_4 ),
        .\Using_FPGA.Native_4 (\Using_Barrel_Shifter.barrel_shift_I_n_5 ),
        .\Using_FPGA.Native_5 (\Using_FPGA.Native_45 ),
        .in0(in0),
        .void_bit(void_bit));
  block_design_microblaze_0_0_Zero_Detect Zero_Detect_I
       (.A(A[16:2]),
        .S(S),
        .\Using_FPGA.Native (\Using_FPGA.Native_32 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_5 [8:0]),
        .lopt(lopt_6),
        .lopt_1(lopt_7),
        .lopt_2(lopt_8),
        .reg_Test_Equal(reg_Test_Equal),
        .reg_Test_Equal_N(reg_Test_Equal_N),
        .reg_zero(reg_zero));
  block_design_microblaze_0_0_mul_unit mul_unit_I
       (.A(A),
        .B(B[4:1]),
        .Clk(Clk),
        .\Using_FPGA.DSP48E1_I1 (B[0]),
        .\Using_FPGA.DSP48E1_I1_0 ({ex_sign_A,\Using_FPGA.Native_5 }),
        .\Using_FPGA.DSP48E1_I1_1 ({\Using_FPGA.DSP48E1_I1 ,\Using_FPGA.Native_2 }),
        .ex_mulhu_instr(ex_mulhu_instr),
        .ex_not_mul_op(ex_not_mul_op),
        .mem_mulh_instr0(mem_mulh_instr0),
        .mul_Result(mul_Result),
        .op2_C({op2_C[1],op2_C[2],op2_C[3],op2_C[4],op2_C[5],op2_C[6],op2_C[7],op2_C[8],op2_C[9],op2_C[10],op2_C[11],op2_C[12],op2_C[13],op2_C[14],op2_C[15],op2_C[16],op2_C[17],op2_C[18],op2_C[19],op2_C[20],op2_C[21],op2_C[22],op2_C[23],op2_C[24],op2_C[25],op2_C[26]}),
        .sync_reset(sync_reset));
endmodule

module block_design_microblaze_0_0_Debug
   (Dbg_Intr,
    \Area_Debug_Control.mb_halted_i_reg_0 ,
    uncond_ds_branch,
    cond_ds_branch,
    in_delay_slot,
    Dbg_Trig_Ack_Out,
    Dbg_Trig_In,
    save_pc_next_next_reg,
    dbg_pause,
    dbg_brki_hit,
    LOCKSTEP_Master_Out,
    delay_slot_instr_reg_0,
    read_register_MSR_1_reg_0,
    force_stop_cmd_i,
    force_stop_cmd_hold,
    register_write,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    Sleep_Out,
    Dbg_Reg_En_3_sp_1,
    \Dbg_Reg_En[3]_0 ,
    Dbg_Reg_En_7_sp_1,
    Dbg_TDO,
    \Area_Debug_Control.force_stop_cmd_hold_reg_0 ,
    \Area_Debug_Control.force_stop_cmd_hold_reg_1 ,
    \Using_FPGA.Native_1 ,
    SR,
    IReady1_out,
    \Serial_Dbg_Intf.if_debug_ready_i_reg_0 ,
    \Use_Async_Reset.sync_reset_reg ,
    Dbg_Reg_En_6_sp_1,
    Sext,
    Q,
    \stat_select_reg[5][2] ,
    \stat_select_reg[4][2] ,
    \stat_select_reg[3][2] ,
    \stat_select_reg[2][2] ,
    \stat_select_reg[1][2] ,
    \Serial_Dbg_Intf.control_reg_reg[21] ,
    \trace_instruction_i_reg[0] ,
    \trace_instruction_i_reg[4] ,
    \Serial_Dbg_Intf.trig_in_1_pulse_reg_0 ,
    \trace_instruction_i_reg[0]_0 ,
    \trace_instruction_i_reg[0]_1 ,
    stat212_in,
    stat2,
    stat130_out,
    \trace_pc_i_reg[24] ,
    \trace_pc_i_reg[17] ,
    \trace_pc_i_reg[9] ,
    \trace_pc_i_reg[1] ,
    p_1_in15_in,
    \Serial_Dbg_Intf.control_reg_reg[21]_0 ,
    \trace_instruction_i_reg[2] ,
    \trace_instruction_i_reg[2]_0 ,
    \trace_instruction_i_reg[16] ,
    \Using_FPGA.Native_2 ,
    \Serial_Dbg_Intf.control_reg_reg[20] ,
    \Serial_Dbg_Intf.control_reg_reg[8]_0 ,
    Dbg_Clk,
    Dbg_TDI,
    PC_OF,
    Clk,
    sync_reset,
    Dbg_Update,
    D,
    valid_instr,
    Interrupt,
    Scan_Reset,
    Scan_Reset_Sel,
    Scan_En,
    \event_data_next_reg[12] ,
    save_pc_next_next_reg_0,
    Dbg_Capture,
    Pause,
    Sleep,
    dbg_brki_hit0,
    Dbg_Trig_Ack_In,
    Dbg_Trig_Out,
    of_PipeRun,
    use_Imm_Reg,
    OF_PipeRun,
    branch_with_delay,
    \Area_Debug_Control.force_stop_cmd_hold_reg_2 ,
    reg_Write_dbg,
    Dbg_Stop,
    Dbg_Reg_En,
    Dbg_TDO_0,
    Dbg_TDO_1,
    Dbg_TDO_2,
    Dbg_TDO_3,
    \Using_FPGA.Native_3 ,
    Dbg_TDO_INST_0_i_3,
    FSL_Will_Break0,
    ex_Valid,
    Not_MB_Get_Op,
    IReady,
    dbg_clean_stop,
    ok_To_Stop,
    has_inhibit_EX,
    Reset_Mode,
    Dbg_Shift,
    Status_Reg_En,
    Dbg_TDO_INST_0_i_5,
    Valid_Instr_i,
    PC_EX,
    sext8,
    \Using_FPGA.Native_4 ,
    out,
    Wakeup,
    \Serial_Dbg_Intf.status_reg_reg[21]_0 ,
    save_event_next_reg,
    save_event_next_reg_0,
    Sleep_Decode,
    \all_statistics_counters[0].ready_reg ,
    \all_statistics_counters[0].ready_reg_0 ,
    \all_statistics_counters[5].ready_reg ,
    \all_statistics_counters[5].ready_reg_0 ,
    \all_statistics_counters[4].ready_reg ,
    \all_statistics_counters[4].ready_reg_0 ,
    \all_statistics_counters[3].ready_reg ,
    \all_statistics_counters[3].ready_reg_0 ,
    \all_statistics_counters[2].ready_reg ,
    \all_statistics_counters[2].ready_reg_0 ,
    stat_stop,
    \all_statistics_counters[1].request_reg ,
    \all_statistics_counters[1].request_reg_0 ,
    \all_statistics_counters[0].request_i_4 ,
    \all_statistics_counters[0].ready_reg_1 ,
    \all_statistics_counters[5].ready_reg_1 ,
    \all_statistics_counters[4].ready_reg_1 ,
    \all_statistics_counters[3].ready_reg_1 ,
    \all_statistics_counters[2].ready_reg_1 ,
    \all_statistics_counters[1].request_reg_1 ,
    stat2_out,
    \all_statistics_counters[0].request_reg_i_3 ,
    stat5_out,
    \branch_count_reg[3] ,
    \save_sel_reg[0][2] ,
    \save_sel_reg[0][2]_0 ,
    \saved_load_get_reg[31] ,
    \writems_reg[1] ,
    \writems[0]_i_7 ,
    \event_data_reg[7] ,
    Not_Barrel_Op,
    \sample_1_reg[1] ,
    E,
    \data_rd_reg_reg[27]_0 );
  output Dbg_Intr;
  output \Area_Debug_Control.mb_halted_i_reg_0 ;
  output uncond_ds_branch;
  output cond_ds_branch;
  output in_delay_slot;
  output [5:0]Dbg_Trig_Ack_Out;
  output [5:0]Dbg_Trig_In;
  output save_pc_next_next_reg;
  output dbg_pause;
  output dbg_brki_hit;
  output [37:0]LOCKSTEP_Master_Out;
  output [0:0]delay_slot_instr_reg_0;
  output read_register_MSR_1_reg_0;
  output force_stop_cmd_i;
  output force_stop_cmd_hold;
  output register_write;
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output Sleep_Out;
  output Dbg_Reg_En_3_sp_1;
  output \Dbg_Reg_En[3]_0 ;
  output Dbg_Reg_En_7_sp_1;
  output Dbg_TDO;
  output \Area_Debug_Control.force_stop_cmd_hold_reg_0 ;
  output \Area_Debug_Control.force_stop_cmd_hold_reg_1 ;
  output \Using_FPGA.Native_1 ;
  output [0:0]SR;
  output IReady1_out;
  output \Serial_Dbg_Intf.if_debug_ready_i_reg_0 ;
  output \Use_Async_Reset.sync_reset_reg ;
  output Dbg_Reg_En_6_sp_1;
  output Sext;
  output [2:0]Q;
  output [2:0]\stat_select_reg[5][2] ;
  output [2:0]\stat_select_reg[4][2] ;
  output [2:0]\stat_select_reg[3][2] ;
  output [2:0]\stat_select_reg[2][2] ;
  output [2:0]\stat_select_reg[1][2] ;
  output \Serial_Dbg_Intf.control_reg_reg[21] ;
  output \trace_instruction_i_reg[0] ;
  output \trace_instruction_i_reg[4] ;
  output \Serial_Dbg_Intf.trig_in_1_pulse_reg_0 ;
  output \trace_instruction_i_reg[0]_0 ;
  output \trace_instruction_i_reg[0]_1 ;
  output stat212_in;
  output stat2;
  output stat130_out;
  output \trace_pc_i_reg[24] ;
  output \trace_pc_i_reg[17] ;
  output \trace_pc_i_reg[9] ;
  output \trace_pc_i_reg[1] ;
  output p_1_in15_in;
  output \Serial_Dbg_Intf.control_reg_reg[21]_0 ;
  output \trace_instruction_i_reg[2] ;
  output \trace_instruction_i_reg[2]_0 ;
  output \trace_instruction_i_reg[16] ;
  output [0:0]\Using_FPGA.Native_2 ;
  output [0:0]\Serial_Dbg_Intf.control_reg_reg[20] ;
  output [0:0]\Serial_Dbg_Intf.control_reg_reg[8]_0 ;
  input Dbg_Clk;
  input Dbg_TDI;
  input [0:31]PC_OF;
  input Clk;
  input sync_reset;
  input Dbg_Update;
  input [183:0]D;
  input valid_instr;
  input Interrupt;
  input Scan_Reset;
  input Scan_Reset_Sel;
  input Scan_En;
  input \event_data_next_reg[12] ;
  input save_pc_next_next_reg_0;
  input Dbg_Capture;
  input Pause;
  input Sleep;
  input dbg_brki_hit0;
  input [5:0]Dbg_Trig_Ack_In;
  input [5:0]Dbg_Trig_Out;
  input of_PipeRun;
  input use_Imm_Reg;
  input OF_PipeRun;
  input branch_with_delay;
  input \Area_Debug_Control.force_stop_cmd_hold_reg_2 ;
  input reg_Write_dbg;
  input Dbg_Stop;
  input [0:7]Dbg_Reg_En;
  input Dbg_TDO_0;
  input Dbg_TDO_1;
  input Dbg_TDO_2;
  input Dbg_TDO_3;
  input \Using_FPGA.Native_3 ;
  input Dbg_TDO_INST_0_i_3;
  input FSL_Will_Break0;
  input ex_Valid;
  input Not_MB_Get_Op;
  input IReady;
  input dbg_clean_stop;
  input ok_To_Stop;
  input has_inhibit_EX;
  input [0:1]Reset_Mode;
  input Dbg_Shift;
  input Status_Reg_En;
  input Dbg_TDO_INST_0_i_5;
  input Valid_Instr_i;
  input [27:0]PC_EX;
  input sext8;
  input \Using_FPGA.Native_4 ;
  input [0:0]out;
  input [0:0]Wakeup;
  input [1:0]\Serial_Dbg_Intf.status_reg_reg[21]_0 ;
  input save_event_next_reg;
  input save_event_next_reg_0;
  input Sleep_Decode;
  input \all_statistics_counters[0].ready_reg ;
  input \all_statistics_counters[0].ready_reg_0 ;
  input \all_statistics_counters[5].ready_reg ;
  input \all_statistics_counters[5].ready_reg_0 ;
  input \all_statistics_counters[4].ready_reg ;
  input \all_statistics_counters[4].ready_reg_0 ;
  input \all_statistics_counters[3].ready_reg ;
  input \all_statistics_counters[3].ready_reg_0 ;
  input \all_statistics_counters[2].ready_reg ;
  input \all_statistics_counters[2].ready_reg_0 ;
  input [0:0]stat_stop;
  input \all_statistics_counters[1].request_reg ;
  input \all_statistics_counters[1].request_reg_0 ;
  input \all_statistics_counters[0].request_i_4 ;
  input \all_statistics_counters[0].ready_reg_1 ;
  input \all_statistics_counters[5].ready_reg_1 ;
  input \all_statistics_counters[4].ready_reg_1 ;
  input \all_statistics_counters[3].ready_reg_1 ;
  input \all_statistics_counters[2].ready_reg_1 ;
  input \all_statistics_counters[1].request_reg_1 ;
  input stat2_out;
  input \all_statistics_counters[0].request_reg_i_3 ;
  input stat5_out;
  input \branch_count_reg[3] ;
  input \save_sel_reg[0][2] ;
  input \save_sel_reg[0][2]_0 ;
  input \saved_load_get_reg[31] ;
  input \writems_reg[1] ;
  input \writems[0]_i_7 ;
  input \event_data_reg[7] ;
  input Not_Barrel_Op;
  input [1:0]\sample_1_reg[1] ;
  input [0:0]E;
  input [3:0]\data_rd_reg_reg[27]_0 ;

  wire A1;
  wire A2;
  wire A3;
  wire \Area_Debug_Control.Dbg_Inhibit_EX_FDRSE_n_3 ;
  wire \Area_Debug_Control.Dbg_Inhibit_EX_FDRSE_n_5 ;
  wire \Area_Debug_Control.Stop_CPU_FDRSE_n_1 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_10 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_11 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_12 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_13 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_14 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_15 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_16 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_17 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_18 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_19 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_2 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_20 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_21 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_22 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_23 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_24 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_25 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_26 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_27 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_28 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_29 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_3 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_30 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_31 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_32 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_33 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_4 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_5 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_6 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_7 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_8 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_9 ;
  wire \Area_Debug_Control.dbg_hit[0]_i_1_n_0 ;
  wire \Area_Debug_Control.dbg_stop_Detected_reg_n_0 ;
  wire \Area_Debug_Control.force_stop_cmd_1_i_1_n_0 ;
  wire \Area_Debug_Control.force_stop_cmd_hold_reg_0 ;
  wire \Area_Debug_Control.force_stop_cmd_hold_reg_1 ;
  wire \Area_Debug_Control.force_stop_cmd_hold_reg_2 ;
  wire \Area_Debug_Control.mb_halted_i_reg_0 ;
  wire \Area_Debug_Control.saved_reset_mode_sleep_1_i_1_n_0 ;
  wire Clk;
  wire Command_Reg_En;
  wire Control_Reg_En;
  wire [183:0]D;
  wire Dbg_Capture;
  wire Dbg_Clk;
  wire Dbg_Intr;
  wire [0:7]Dbg_Reg_En;
  wire \Dbg_Reg_En[3]_0 ;
  wire Dbg_Reg_En_3_sn_1;
  wire Dbg_Reg_En_6_sn_1;
  wire Dbg_Reg_En_7_sn_1;
  wire Dbg_Shift;
  wire Dbg_Stop;
  wire Dbg_TDI;
  wire Dbg_TDO;
  wire Dbg_TDO_0;
  wire Dbg_TDO_1;
  wire Dbg_TDO_2;
  wire Dbg_TDO_3;
  wire Dbg_TDO_INST_0_i_13_n_0;
  wire Dbg_TDO_INST_0_i_14_n_0;
  wire Dbg_TDO_INST_0_i_15_n_0;
  wire Dbg_TDO_INST_0_i_19_n_0;
  wire Dbg_TDO_INST_0_i_24_n_0;
  wire Dbg_TDO_INST_0_i_26_n_0;
  wire Dbg_TDO_INST_0_i_27_n_0;
  wire Dbg_TDO_INST_0_i_28_n_0;
  wire Dbg_TDO_INST_0_i_3;
  wire Dbg_TDO_INST_0_i_33_n_0;
  wire Dbg_TDO_INST_0_i_34_n_0;
  wire Dbg_TDO_INST_0_i_44_n_0;
  wire Dbg_TDO_INST_0_i_45_n_0;
  wire Dbg_TDO_INST_0_i_46_n_0;
  wire Dbg_TDO_INST_0_i_47_n_0;
  wire Dbg_TDO_INST_0_i_48_n_0;
  wire Dbg_TDO_INST_0_i_49_n_0;
  wire Dbg_TDO_INST_0_i_4_n_0;
  wire Dbg_TDO_INST_0_i_5;
  wire Dbg_TDO_INST_0_i_60_n_0;
  wire Dbg_TDO_INST_0_i_61_n_0;
  wire Dbg_TDO_INST_0_i_62_n_0;
  wire Dbg_TDO_INST_0_i_63_n_0;
  wire Dbg_TDO_INST_0_i_64_n_0;
  wire Dbg_TDO_INST_0_i_65_n_0;
  wire Dbg_TDO_INST_0_i_66_n_0;
  wire Dbg_TDO_INST_0_i_67_n_0;
  wire Dbg_TDO_INST_0_i_72_n_0;
  wire Dbg_TDO_INST_0_i_73_n_0;
  wire Dbg_TDO_INST_0_i_74_n_0;
  wire Dbg_TDO_INST_0_i_75_n_0;
  wire Dbg_TDO_INST_0_i_7_n_0;
  wire [5:0]Dbg_Trig_Ack_In;
  wire [5:0]Dbg_Trig_Ack_Out;
  wire [5:0]Dbg_Trig_In;
  wire [5:0]Dbg_Trig_Out;
  wire Dbg_Update;
  wire [0:0]E;
  wire \Embedded_Trace.Serial_Dbg_Intf.data_read_reg_cs_TCK_i_1_n_0 ;
  wire \Embedded_Trace.rddata[0]_i_1_n_0 ;
  wire Empty_i_1__0_n_0;
  wire Empty_i_1__1_n_0;
  wire Empty_i_1__2_n_0;
  wire Empty_i_1__3_n_0;
  wire Empty_i_1__4_n_0;
  wire Empty_i_1_n_0;
  wire FSL_Will_Break0;
  wire Full_32_bit;
  wire Full_32_bit_1;
  wire \Gen_Access_Counter.c0_no_overflow_i_1_n_0 ;
  wire \Gen_Access_Counter.c0_stop_valid_i_1_n_0 ;
  wire IReady;
  wire IReady1_out;
  wire Instr_Insert_Reg_En;
  wire Instr_Insert_Reg_En_1;
  wire Interrupt;
  wire \Is_Valid[0]_i_1__0_n_0 ;
  wire \Is_Valid[0]_i_1__1_n_0 ;
  wire \Is_Valid[0]_i_1__2_n_0 ;
  wire \Is_Valid[0]_i_1__3_n_0 ;
  wire \Is_Valid[0]_i_1__4_n_0 ;
  wire \Is_Valid[0]_i_1_n_0 ;
  wire [37:0]LOCKSTEP_Master_Out;
  wire New_Dbg_Instr2_TCK;
  wire New_Dbg_Instr_TCK;
  wire New_Dbg_Instr_TCK0;
  wire Not_Barrel_Op;
  wire Not_MB_Get_Op;
  wire OF_PipeRun;
  wire [27:0]PC_EX;
  wire [0:31]PC_OF;
  wire Pause;
  wire [2:0]Q;
  wire Raw;
  wire [0:1]Reset_Mode;
  wire S;
  wire [0:0]SR;
  wire S_6;
  wire Scan_En;
  wire Scan_Reset;
  wire Scan_Reset_Sel;
  wire \Serial_Dbg_Intf.SRL16E_4_n_0 ;
  wire \Serial_Dbg_Intf.The_Base_Vector[1].SRL16E_Base_Vector_n_0 ;
  wire \Serial_Dbg_Intf.The_Cache_Addresses[2].SRL16E_Cache_I_n_0 ;
  wire \Serial_Dbg_Intf.The_Cache_Addresses[6].SRL16E_Cache_I_n_0 ;
  wire \Serial_Dbg_Intf.Use_Extended_Features.SRL16E_9_n_0 ;
  wire \Serial_Dbg_Intf.clear_cmd_rep_i_1_n_0 ;
  wire \Serial_Dbg_Intf.continue_from_brk_reg_n_0 ;
  wire [0:0]\Serial_Dbg_Intf.control_reg_reg[20] ;
  wire \Serial_Dbg_Intf.control_reg_reg[21] ;
  wire \Serial_Dbg_Intf.control_reg_reg[21]_0 ;
  wire [0:0]\Serial_Dbg_Intf.control_reg_reg[8]_0 ;
  wire \Serial_Dbg_Intf.control_reg_reg_n_0_[0] ;
  wire \Serial_Dbg_Intf.control_reg_reg_n_0_[3] ;
  wire \Serial_Dbg_Intf.control_reg_reg_n_0_[4] ;
  wire \Serial_Dbg_Intf.control_reg_reg_n_0_[5] ;
  wire \Serial_Dbg_Intf.dbg_wakeup_i_i_3_n_0 ;
  wire \Serial_Dbg_Intf.if_debug_ready_i_reg_0 ;
  wire \Serial_Dbg_Intf.new_dbg_instr_shifting_CLK_reg_n_0 ;
  wire \Serial_Dbg_Intf.sample_synced_1_reg_n_0_[0] ;
  wire \Serial_Dbg_Intf.sample_synced_1_reg_n_0_[1] ;
  wire \Serial_Dbg_Intf.sample_synced_1_reg_n_0_[3] ;
  wire \Serial_Dbg_Intf.sample_synced_1_reg_n_0_[4] ;
  wire \Serial_Dbg_Intf.sample_synced_1_reg_n_0_[6] ;
  wire \Serial_Dbg_Intf.sample_synced_1_reg_n_0_[8] ;
  wire \Serial_Dbg_Intf.shift_count[8]_i_2_n_0 ;
  wire \Serial_Dbg_Intf.shift_count_reg_n_0_[0] ;
  wire \Serial_Dbg_Intf.shift_count_reg_n_0_[4] ;
  wire \Serial_Dbg_Intf.shift_count_reg_n_0_[5] ;
  wire \Serial_Dbg_Intf.shift_count_reg_n_0_[6] ;
  wire \Serial_Dbg_Intf.shift_count_reg_n_0_[7] ;
  wire \Serial_Dbg_Intf.shift_count_reg_n_0_[8] ;
  wire \Serial_Dbg_Intf.started_i_i_1_n_0 ;
  wire [1:0]\Serial_Dbg_Intf.status_reg_reg[21]_0 ;
  wire \Serial_Dbg_Intf.status_reg_reg_n_0_[0] ;
  wire \Serial_Dbg_Intf.status_reg_reg_n_0_[16] ;
  wire \Serial_Dbg_Intf.status_reg_reg_n_0_[17] ;
  wire \Serial_Dbg_Intf.status_reg_reg_n_0_[18] ;
  wire \Serial_Dbg_Intf.status_reg_reg_n_0_[19] ;
  wire \Serial_Dbg_Intf.status_reg_reg_n_0_[20] ;
  wire \Serial_Dbg_Intf.status_reg_reg_n_0_[21] ;
  wire \Serial_Dbg_Intf.status_reg_reg_n_0_[22] ;
  wire \Serial_Dbg_Intf.status_reg_reg_n_0_[23] ;
  wire \Serial_Dbg_Intf.status_reg_reg_n_0_[24] ;
  wire \Serial_Dbg_Intf.status_reg_reg_n_0_[25] ;
  wire \Serial_Dbg_Intf.status_reg_reg_n_0_[27] ;
  wire \Serial_Dbg_Intf.status_reg_reg_n_0_[28] ;
  wire \Serial_Dbg_Intf.status_reg_reg_n_0_[29] ;
  wire \Serial_Dbg_Intf.stopped_i_i_1_n_0 ;
  wire \Serial_Dbg_Intf.sync_dbg_wakeup_n_0 ;
  wire \Serial_Dbg_Intf.sync_sample_n_15 ;
  wire \Serial_Dbg_Intf.sync_sample_n_17 ;
  wire \Serial_Dbg_Intf.sync_stop_CPU_n_0 ;
  wire \Serial_Dbg_Intf.trig_in_1_pulse_reg_0 ;
  wire \Serial_Dbg_Intf.unchanged_i_1_n_0 ;
  wire Sext;
  wire Sleep;
  wire Sleep_Decode;
  wire Sleep_Out;
  wire Started_Pulse;
  wire Status_Reg_En;
  wire Stopped_Pulse;
  wire \Use_Async_Reset.sync_reset_reg ;
  wire \Use_Statistics.Debug_Stat_I_n_13 ;
  wire \Use_Statistics.Debug_Stat_I_n_14 ;
  wire \Use_Statistics.Debug_Stat_I_n_15 ;
  wire \Use_Statistics.Debug_Stat_I_n_16 ;
  wire \Use_Statistics.Debug_Stat_I_n_17 ;
  wire \Use_Statistics.Debug_Stat_I_n_18 ;
  wire \Use_Statistics.Debug_Stat_I_n_19 ;
  wire \Use_Statistics.Debug_Stat_I_n_20 ;
  wire \Use_Statistics.Debug_Stat_I_n_21 ;
  wire \Use_Statistics.Debug_Stat_I_n_22 ;
  wire \Use_Statistics.Debug_Stat_I_n_26 ;
  wire \Use_Statistics.Debug_Stat_I_n_29 ;
  wire \Use_Statistics.Debug_Stat_I_n_32 ;
  wire \Use_Statistics.Debug_Stat_I_n_35 ;
  wire \Use_Statistics.Debug_Stat_I_n_38 ;
  wire \Use_Statistics.Debug_Stat_I_n_41 ;
  wire \Use_Statistics.Debug_Stat_I_n_43 ;
  wire \Use_Statistics.Debug_Stat_I_n_7 ;
  wire \Use_Statistics.Debug_Stat_I_n_89 ;
  wire \Use_Statistics.Debug_Stat_I_n_90 ;
  wire \Use_Statistics.Debug_Stat_I_n_91 ;
  wire \Use_Statistics.Debug_Stat_I_n_92 ;
  wire \Use_Statistics.Debug_Stat_I_n_93 ;
  wire \Use_Statistics.Debug_Stat_I_n_94 ;
  wire \Use_Statistics.Debug_Stat_I_n_98 ;
  wire \Use_Trace.Debug_Trace_I_n_10 ;
  wire \Use_Trace.Debug_Trace_I_n_12 ;
  wire \Use_Trace.Debug_Trace_I_n_13 ;
  wire \Use_Trace.Debug_Trace_I_n_16 ;
  wire \Use_Trace.Debug_Trace_I_n_22 ;
  wire \Use_Trace.Debug_Trace_I_n_23 ;
  wire \Use_Trace.Debug_Trace_I_n_26 ;
  wire \Use_Trace.Debug_Trace_I_n_28 ;
  wire \Use_Trace.Debug_Trace_I_n_33 ;
  wire \Use_Trace.Debug_Trace_I_n_36 ;
  wire \Use_Trace.Debug_Trace_I_n_37 ;
  wire \Use_Trace.Debug_Trace_I_n_40 ;
  wire \Use_Trace.Debug_Trace_I_n_41 ;
  wire \Use_Trace.Debug_Trace_I_n_42 ;
  wire \Use_Trace.Debug_Trace_I_n_43 ;
  wire \Use_Trace.Debug_Trace_I_n_44 ;
  wire \Use_Trace.Debug_Trace_I_n_45 ;
  wire \Use_Trace.Debug_Trace_I_n_46 ;
  wire \Use_Trace.Debug_Trace_I_n_5 ;
  wire \Use_Trace.Debug_Trace_I_n_6 ;
  wire \Use_Trace.Debug_Trace_I_n_9 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [0:0]\Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_PC_Breakpoints.All_PC_Brks[0].Serial_Interface_1.address_hit_I_n_0 ;
  wire Valid_Instr_i;
  wire [0:0]Wakeup;
  wire \all_statistics_counters[0].Debug_Stat_Counter_i/Is_Valid ;
  wire \all_statistics_counters[0].Debug_Stat_Counter_i/Running ;
  wire \all_statistics_counters[0].ready_reg ;
  wire \all_statistics_counters[0].ready_reg_0 ;
  wire \all_statistics_counters[0].ready_reg_1 ;
  wire \all_statistics_counters[0].request_i_4 ;
  wire \all_statistics_counters[0].request_reg_i_3 ;
  wire \all_statistics_counters[1].Debug_Stat_Counter_i/Is_Valid ;
  wire \all_statistics_counters[1].Debug_Stat_Counter_i/Running ;
  wire \all_statistics_counters[1].request_reg ;
  wire \all_statistics_counters[1].request_reg_0 ;
  wire \all_statistics_counters[1].request_reg_1 ;
  wire \all_statistics_counters[2].Debug_Stat_Counter_i/Is_Valid ;
  wire \all_statistics_counters[2].Debug_Stat_Counter_i/Running ;
  wire \all_statistics_counters[2].ready_reg ;
  wire \all_statistics_counters[2].ready_reg_0 ;
  wire \all_statistics_counters[2].ready_reg_1 ;
  wire \all_statistics_counters[3].Debug_Stat_Counter_i/Is_Valid ;
  wire \all_statistics_counters[3].Debug_Stat_Counter_i/Running ;
  wire \all_statistics_counters[3].ready_reg ;
  wire \all_statistics_counters[3].ready_reg_0 ;
  wire \all_statistics_counters[3].ready_reg_1 ;
  wire \all_statistics_counters[4].Debug_Stat_Counter_i/Is_Valid ;
  wire \all_statistics_counters[4].Debug_Stat_Counter_i/Running ;
  wire \all_statistics_counters[4].ready_reg ;
  wire \all_statistics_counters[4].ready_reg_0 ;
  wire \all_statistics_counters[4].ready_reg_1 ;
  wire \all_statistics_counters[5].Debug_Stat_Counter_i/Is_Valid ;
  wire \all_statistics_counters[5].Debug_Stat_Counter_i/Running ;
  wire \all_statistics_counters[5].ready_reg ;
  wire \all_statistics_counters[5].ready_reg_0 ;
  wire \all_statistics_counters[5].ready_reg_1 ;
  wire \branch_count_reg[3] ;
  wire branch_with_delay;
  wire capture_1;
  wire cc_overflow_i_2_n_0;
  wire clear_cmd0;
  wire clear_cmd0_0;
  wire [0:1]command_reg;
  wire command_reg_clear;
  wire command_reg_clear_i_1_n_0;
  wire command_reg_rst;
  wire [0:1]compression_ctrl;
  wire cond_ds_branch;
  wire config_reset_with_scan;
  wire config_with_scan_reset;
  wire continue_from_brk0;
  wire continue_from_brk_TClk;
  wire continue_from_brk_rst;
  wire control_incr;
  wire control_incr0;
  wire control_rst_i_1_n_0;
  wire [0:32]data_rd_reg;
  wire \data_rd_reg[32]_i_1_n_0 ;
  wire [3:0]\data_rd_reg_reg[27]_0 ;
  wire [0:32]data_read_reg;
  wire data_read_reg_cs0;
  wire data_write;
  wire data_write0;
  wire data_write_rst_i_1_n_0;
  wire dbg_brki_hit;
  wire dbg_brki_hit0;
  wire dbg_brki_hit_synced;
  wire dbg_clean_stop;
  wire dbg_halt_reset_mode_i_1_n_0;
  wire dbg_halt_reset_mode_reg_n_0;
  wire dbg_pause;
  wire dbg_stop_1;
  wire [0:0]delay_slot_instr_reg_0;
  wire \event_data_next_reg[12] ;
  wire \event_data_reg[7] ;
  wire ex_Valid;
  wire exception_i_2_n_0;
  wire executing_i_1_n_0;
  wire force_stop_TClk;
  wire force_stop_cmd_1;
  wire force_stop_cmd_hold;
  wire force_stop_cmd_i;
  wire force_stop_cmd_i0;
  wire force_stop_cmd_rst;
  wire force_stop_overrun;
  wire force_stop_overrun0;
  wire full_i;
  wire has_inhibit_EX;
  wire if_debug_ready_i0;
  wire in_delay_slot;
  wire in_delay_slot_i_1_n_0;
  wire inside_handler;
  wire [0:1]instr_rd_reg;
  wire [0:1]instr_read_reg;
  wire interrupt_1;
  wire interrupt_1_i_1_n_0;
  wire last_item_i_1_n_0;
  wire mb_halted_1;
  wire new_arvalid0;
  wire new_awvalid0;
  wire new_bvalid0;
  wire new_interrupt_i_1_n_0;
  wire new_rvalid0;
  wire no_sleeping;
  wire normal_stop_TClk;
  wire normal_stop_cmd_hold;
  wire normal_stop_cmd_hold0;
  wire normal_stop_cmd_i;
  wire normal_stop_cmd_i0;
  wire normal_stop_cmd_rst;
  wire of_PipeRun;
  wire ok_To_Stop;
  wire [0:0]out;
  wire [8:0]p_0_in;
  wire p_0_in32_in;
  wire p_0_in38_in;
  wire p_0_in_0;
  wire p_0_in_4;
  wire p_12_in;
  wire p_1_in;
  wire p_1_in15_in;
  wire p_1_in42_in;
  wire p_1_in43_in;
  wire p_1_in44_in;
  wire p_1_in85_in;
  wire pause_synced;
  wire pc_brk_1;
  wire read_register_MSR;
  wire read_register_MSR0;
  wire read_register_MSR_1_reg_0;
  wire read_register_PC;
  wire read_register_PC0;
  wire read_register_PC_1_reg_n_0;
  wire ready;
  wire reg_Write_dbg;
  wire register_write;
  wire request;
  wire reset_cmd;
  wire reset_cmd0;
  wire running_clock;
  wire running_clock_rst;
  wire running_clock_synced;
  wire [1:0]\sample_1_reg[1] ;
  wire [0:3]sample_2;
  wire sample_cmd0;
  wire sample_cmd0_3;
  wire [0:9]sample_synced;
  wire [0:6]sample_synced_5;
  wire [0:5]sample_synced_7;
  wire save_event_next_reg;
  wire save_event_next_reg_0;
  wire save_pc_next;
  wire save_pc_next_i_1_n_0;
  wire save_pc_next_next_i_1_n_0;
  wire save_pc_next_next_reg;
  wire save_pc_next_next_reg_0;
  wire \save_sel_reg[0][2] ;
  wire \save_sel_reg[0][2]_0 ;
  wire \saved_load_get_reg[31] ;
  wire saved_reset_mode_dbg_halt;
  wire saved_reset_mode_dbg_halt_i_1_n_0;
  wire saved_reset_mode_sleep;
  wire saved_reset_mode_sleep_1;
  wire saved_reset_mode_sleep_i_1_n_0;
  wire sext8;
  wire [0:31]shift_datain;
  wire single_Step_N;
  wire single_Step_N_i_1_n_0;
  wire single_Step_TClk;
  wire single_step_N_1;
  wire [0:1]single_step_count;
  wire \single_step_count[0]_i_1_n_0 ;
  wire \single_step_count[1]_i_1_n_0 ;
  wire sleep_reset_mode_i_1_n_0;
  wire sleep_reset_mode_i_2_n_0;
  wire sleep_synced;
  wire start_cmd0;
  wire start_cmd0_1;
  wire start_dbg_exec_reg_n_0;
  wire start_single_cmd;
  wire start_single_cmd0;
  wire start_single_step_i_1_n_0;
  wire start_single_step_reg_n_0;
  wire start_single_step_rst;
  wire started_i;
  wire stat130_out;
  wire stat2;
  wire stat212_in;
  wire stat2_out;
  wire stat5_out;
  wire stat_pause;
  wire [2:0]\stat_select_reg[1][2] ;
  wire [2:0]\stat_select_reg[2][2] ;
  wire [2:0]\stat_select_reg[3][2] ;
  wire [2:0]\stat_select_reg[4][2] ;
  wire [2:0]\stat_select_reg[5][2] ;
  wire [0:0]stat_stop;
  wire step_continue_1;
  wire stop_cmd;
  wire stop_cmd0;
  wire stop_cmd0_2;
  wire sync;
  wire sync_reset;
  wire sync_trig_ack_in_0_n_1;
  wire sync_trig_out_0_n_1;
  wire tdo_config_word1_0;
  wire tdo_config_word1_11;
  wire tdo_config_word1_12;
  wire tdo_config_word1_13;
  wire tdo_config_word1_15;
  wire tdo_config_word1_16;
  wire tdo_config_word1_17;
  wire tdo_config_word1_2;
  wire tdo_config_word1_7;
  wire tdo_config_word1_8;
  wire tdo_config_word1_9;
  wire trace_halt_hold;
  wire trace_halt_hold0;
  wire trace_hit_i;
  wire \trace_instruction_i_reg[0] ;
  wire \trace_instruction_i_reg[0]_0 ;
  wire \trace_instruction_i_reg[0]_1 ;
  wire \trace_instruction_i_reg[16] ;
  wire \trace_instruction_i_reg[2] ;
  wire \trace_instruction_i_reg[2]_0 ;
  wire \trace_instruction_i_reg[4] ;
  wire \trace_pc_i_reg[17] ;
  wire \trace_pc_i_reg[1] ;
  wire \trace_pc_i_reg[24] ;
  wire \trace_pc_i_reg[9] ;
  wire trig_ack_in_0_synced;
  wire trig_ack_in_0_synced_1;
  wire trig_in_0_pulse;
  wire trig_in_0_pulse_reg_n_0;
  wire trig_in_10;
  wire trig_in_1_pulse;
  wire trig_out_0_synced;
  wire trig_out_0_synced_1;
  wire unchanged;
  wire uncond_ds_branch;
  wire use_Imm_Reg;
  wire valid_instr;
  wire wb_read_imm_reg_1_i;
  wire \writems[0]_i_7 ;
  wire \writems_reg[1] ;

  assign Dbg_Reg_En_3_sp_1 = Dbg_Reg_En_3_sn_1;
  assign Dbg_Reg_En_6_sp_1 = Dbg_Reg_En_6_sn_1;
  assign Dbg_Reg_En_7_sp_1 = Dbg_Reg_En_7_sn_1;
  block_design_microblaze_0_0_MB_FDRSE \Area_Debug_Control.Dbg_Inhibit_EX_FDRSE 
       (.Clk(Clk),
        .Dbg_Clean_Stop_reg(\Area_Debug_Control.Dbg_Inhibit_EX_FDRSE_n_3 ),
        .Not_Barrel_Op(Not_Barrel_Op),
        .Not_MB_Get_Op(Not_MB_Get_Op),
        .Q(\Serial_Dbg_Intf.control_reg_reg_n_0_[0] ),
        .Reset_Mode(Reset_Mode),
        .S(S),
        .SR(SR),
        .Sext(Sext),
        .\Use_Async_Reset.sync_reset_reg (\Area_Debug_Control.Dbg_Inhibit_EX_FDRSE_n_5 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_10 (\Using_FPGA.Native_4 ),
        .\Using_FPGA.Native_11 (\Use_Trace.Debug_Trace_I_n_26 ),
        .\Using_FPGA.Native_12 (start_dbg_exec_reg_n_0),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_3 (force_stop_cmd_i),
        .\Using_FPGA.Native_4 (force_stop_cmd_hold),
        .\Using_FPGA.Native_5 (\Area_Debug_Control.dbg_stop_Detected_reg_n_0 ),
        .\Using_FPGA.Native_6 (dbg_halt_reset_mode_reg_n_0),
        .\Using_FPGA.Native_7 (Sleep_Out),
        .\Using_FPGA.Native_8 (start_single_step_reg_n_0),
        .\Using_FPGA.Native_9 (\Serial_Dbg_Intf.continue_from_brk_reg_n_0 ),
        .dbg_clean_stop(dbg_clean_stop),
        .ex_Valid(ex_Valid),
        .normal_stop_cmd_hold(normal_stop_cmd_hold),
        .normal_stop_cmd_i(normal_stop_cmd_i),
        .ok_To_Stop(ok_To_Stop),
        .saved_reset_mode_dbg_halt(saved_reset_mode_dbg_halt),
        .saved_reset_mode_sleep(saved_reset_mode_sleep),
        .sext8(sext8),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_FDRSE_16 \Area_Debug_Control.Stop_CPU_FDRSE 
       (.\Area_Debug_Control.dbg_stop_Detected_reg (\Area_Debug_Control.dbg_stop_Detected_reg_n_0 ),
        .Clk(Clk),
        .Dbg_Stop(Dbg_Stop),
        .Reset_Mode(Reset_Mode),
        .S(S),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Area_Debug_Control.Stop_CPU_FDRSE_n_1 ),
        .\Using_FPGA.Native_2 (\Area_Debug_Control.Dbg_Inhibit_EX_FDRSE_n_3 ),
        .\Using_FPGA.Native_3 (\Use_Trace.Debug_Trace_I_n_26 ),
        .\Using_FPGA.Native_4 (\Area_Debug_Control.Dbg_Inhibit_EX_FDRSE_n_5 ),
        .\Using_FPGA.Native_5 (\Serial_Dbg_Intf.new_dbg_instr_shifting_CLK_reg_n_0 ),
        .dbg_stop_1(dbg_stop_1),
        .sync_reset(sync_reset),
        .trig_out_0_synced(trig_out_0_synced),
        .trig_out_0_synced_1(trig_out_0_synced_1));
  block_design_microblaze_0_0_MB_FDRSE_17 \Area_Debug_Control.Stop_Instr_Fetch_FDRSE 
       (.\Area_Optimized.register_write_reg (\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_4 ),
        .Clk(Clk),
        .D({\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_5 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_6 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_7 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_8 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_9 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_10 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_11 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_12 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_13 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_14 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_15 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_16 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_17 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_18 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_19 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_20 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_21 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_22 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_23 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_24 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_25 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_26 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_27 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_28 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_29 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_30 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_31 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_32 }),
        .E(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_3 ),
        .PC_EX(PC_EX),
        .Reset_Mode(Reset_Mode),
        .Reset_Mode_0_sp_1(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_2 ),
        .S(S),
        .\Use_Async_Reset.sync_reset_reg (\Use_Async_Reset.sync_reset_reg ),
        .\Using_FPGA.Native_0 (LOCKSTEP_Master_Out[34]),
        .\Using_FPGA.Native_1 (\Area_Debug_Control.Dbg_Inhibit_EX_FDRSE_n_5 ),
        .\Using_FPGA.Native_2 (\Area_Debug_Control.Dbg_Inhibit_EX_FDRSE_n_3 ),
        .\Using_FPGA.Native_3 (\Use_Trace.Debug_Trace_I_n_26 ),
        .\Using_FPGA.Native_4 (\Serial_Dbg_Intf.sample_synced_1_reg_n_0_[6] ),
        .Valid_Instr_i(Valid_Instr_i),
        .\data_rd_reg_reg[0] (read_register_MSR_1_reg_0),
        .\data_rd_reg_reg[0]_0 (register_write),
        .\data_rd_reg_reg[31] (read_register_PC_1_reg_n_0),
        .\data_rd_reg_reg[32] (LOCKSTEP_Master_Out[35]),
        .\data_rd_reg_reg[32]_0 (\Using_FPGA.Native_0 ),
        .exception_reg({D[148],D[105:79],D[74:73]}),
        .exception_reg_0(exception_i_2_n_0),
        .exception_reg_1(instr_rd_reg[1]),
        .saved_reset_mode_sleep_1(saved_reset_mode_sleep_1),
        .sync_reset(sync_reset),
        .trace_exception_taken_i_reg(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_33 ));
  FDRE \Area_Debug_Control.Use_Trace.trace_halt_hold_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(trace_halt_hold0),
        .Q(trace_halt_hold),
        .R(sync_reset));
  FDRE \Area_Debug_Control.dbg_brki_hit_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(dbg_brki_hit0),
        .Q(dbg_brki_hit),
        .R(sync_reset));
  LUT4 #(
    .INIT(16'hA3A0)) 
    \Area_Debug_Control.dbg_hit[0]_i_1 
       (.I0(single_step_N_1),
        .I1(step_continue_1),
        .I2(pc_brk_1),
        .I3(Raw),
        .O(\Area_Debug_Control.dbg_hit[0]_i_1_n_0 ));
  FDRE \Area_Debug_Control.dbg_hit_i_1_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_PC_Breakpoints.All_PC_Brks[0].Serial_Interface_1.address_hit_I_n_0 ),
        .Q(pc_brk_1),
        .R(sync_reset));
  FDRE \Area_Debug_Control.dbg_hit_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Area_Debug_Control.dbg_hit[0]_i_1_n_0 ),
        .Q(Raw),
        .R(sync_reset));
  FDRE \Area_Debug_Control.dbg_stop_1_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(Dbg_Stop),
        .Q(dbg_stop_1),
        .R(sync_reset));
  FDRE \Area_Debug_Control.dbg_stop_Detected_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Area_Debug_Control.Stop_CPU_FDRSE_n_1 ),
        .Q(\Area_Debug_Control.dbg_stop_Detected_reg_n_0 ),
        .R(sync_reset));
  (* SOFT_HLUTNM = "soft_lutpair140" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \Area_Debug_Control.force_stop_cmd_1_i_1 
       (.I0(force_stop_cmd_i),
        .I1(force_stop_cmd_hold),
        .O(\Area_Debug_Control.force_stop_cmd_1_i_1_n_0 ));
  FDRE \Area_Debug_Control.force_stop_cmd_1_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Area_Debug_Control.force_stop_cmd_1_i_1_n_0 ),
        .Q(force_stop_cmd_1),
        .R(sync_reset));
  FDRE \Area_Debug_Control.force_stop_cmd_hold_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Area_Debug_Control.force_stop_cmd_hold_reg_2 ),
        .Q(force_stop_cmd_hold),
        .R(sync_reset));
  (* SOFT_HLUTNM = "soft_lutpair140" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \Area_Debug_Control.force_stop_overrun_i_1 
       (.I0(force_stop_cmd_1),
        .I1(force_stop_cmd_i),
        .I2(force_stop_cmd_hold),
        .O(force_stop_overrun0));
  FDRE \Area_Debug_Control.force_stop_overrun_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(force_stop_overrun0),
        .Q(force_stop_overrun),
        .R(sync_reset));
  FDRE \Area_Debug_Control.mb_halted_i_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_2 ),
        .Q(\Area_Debug_Control.mb_halted_i_reg_0 ),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0000000EEEEEEEEE)) 
    \Area_Debug_Control.normal_stop_cmd_hold_i_1 
       (.I0(normal_stop_cmd_i),
        .I1(normal_stop_cmd_hold),
        .I2(force_stop_cmd_hold),
        .I3(force_stop_cmd_i),
        .I4(dbg_clean_stop),
        .I5(ok_To_Stop),
        .O(normal_stop_cmd_hold0));
  FDRE \Area_Debug_Control.normal_stop_cmd_hold_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(normal_stop_cmd_hold0),
        .Q(normal_stop_cmd_hold),
        .R(sync_reset));
  (* SOFT_HLUTNM = "soft_lutpair139" *) 
  LUT4 #(
    .INIT(16'h2F20)) 
    \Area_Debug_Control.saved_reset_mode_sleep_1_i_1 
       (.I0(Reset_Mode[1]),
        .I1(Reset_Mode[0]),
        .I2(sync_reset),
        .I3(saved_reset_mode_sleep),
        .O(\Area_Debug_Control.saved_reset_mode_sleep_1_i_1_n_0 ));
  FDRE \Area_Debug_Control.saved_reset_mode_sleep_1_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Area_Debug_Control.saved_reset_mode_sleep_1_i_1_n_0 ),
        .Q(saved_reset_mode_sleep_1),
        .R(1'b0));
  FDRE \Area_Debug_Control.single_step_N_1_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(single_Step_N),
        .Q(single_step_N_1),
        .R(sync_reset));
  LUT2 #(
    .INIT(4'hE)) 
    \Area_Debug_Control.step_continue_1_i_1 
       (.I0(\Serial_Dbg_Intf.continue_from_brk_reg_n_0 ),
        .I1(start_single_step_reg_n_0),
        .O(p_12_in));
  FDRE \Area_Debug_Control.step_continue_1_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(p_12_in),
        .Q(step_continue_1),
        .R(sync_reset));
  FDRE \Area_Debug_Control.trig_ack_out_0_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(sync_trig_out_0_n_1),
        .Q(Dbg_Trig_Ack_Out[5]),
        .R(sync_reset));
  FDRE \Area_Debug_Control.trig_out_0_synced_1_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(trig_out_0_synced),
        .Q(trig_out_0_synced_1),
        .R(sync_reset));
  FDRE \Area_Optimized.register_write_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(reg_Write_dbg),
        .Q(register_write),
        .R(sync_reset));
  FDRE \Area_Optimized.wb_read_imm_reg_1_i_reg 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(use_Imm_Reg),
        .Q(wb_read_imm_reg_1_i),
        .R(sync_reset));
  (* SOFT_HLUTNM = "soft_lutpair132" *) 
  LUT5 #(
    .INIT(32'h20000010)) 
    Dbg_TDO_INST_0_i_13
       (.I0(A3),
        .I1(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I2(\Serial_Dbg_Intf.status_reg_reg_n_0_[0] ),
        .I3(A2),
        .I4(A1),
        .O(Dbg_TDO_INST_0_i_13_n_0));
  (* SOFT_HLUTNM = "soft_lutpair132" *) 
  LUT3 #(
    .INIT(8'h7F)) 
    Dbg_TDO_INST_0_i_14
       (.I0(A2),
        .I1(A1),
        .I2(A3),
        .O(Dbg_TDO_INST_0_i_14_n_0));
  LUT6 #(
    .INIT(64'hBEEEB22E8EE28222)) 
    Dbg_TDO_INST_0_i_15
       (.I0(Dbg_TDO_INST_0_i_26_n_0),
        .I1(A3),
        .I2(A2),
        .I3(A1),
        .I4(Dbg_TDO_INST_0_i_27_n_0),
        .I5(Dbg_TDO_INST_0_i_28_n_0),
        .O(Dbg_TDO_INST_0_i_15_n_0));
  LUT6 #(
    .INIT(64'h000000000000AC00)) 
    Dbg_TDO_INST_0_i_19
       (.I0(Dbg_TDO_INST_0_i_33_n_0),
        .I1(data_read_reg[0]),
        .I2(Dbg_TDO_INST_0_i_34_n_0),
        .I3(Dbg_Reg_En[5]),
        .I4(Dbg_Reg_En[4]),
        .I5(Dbg_TDO_INST_0_i_5),
        .O(Dbg_TDO_INST_0_i_19_n_0));
  (* SOFT_HLUTNM = "soft_lutpair134" *) 
  LUT4 #(
    .INIT(16'hAAA9)) 
    Dbg_TDO_INST_0_i_24
       (.I0(\Serial_Dbg_Intf.shift_count_reg_n_0_[4] ),
        .I1(A3),
        .I2(A1),
        .I3(A2),
        .O(Dbg_TDO_INST_0_i_24_n_0));
  LUT6 #(
    .INIT(64'h2B2B2B2828282B28)) 
    Dbg_TDO_INST_0_i_26
       (.I0(Dbg_TDO_INST_0_i_44_n_0),
        .I1(A2),
        .I2(A1),
        .I3(\Serial_Dbg_Intf.status_reg_reg_n_0_[16] ),
        .I4(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I5(\Serial_Dbg_Intf.status_reg_reg_n_0_[17] ),
        .O(Dbg_TDO_INST_0_i_26_n_0));
  LUT5 #(
    .INIT(32'hB833B800)) 
    Dbg_TDO_INST_0_i_27
       (.I0(\Serial_Dbg_Intf.status_reg_reg_n_0_[27] ),
        .I1(A1),
        .I2(\Serial_Dbg_Intf.status_reg_reg_n_0_[29] ),
        .I3(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I4(\Serial_Dbg_Intf.status_reg_reg_n_0_[28] ),
        .O(Dbg_TDO_INST_0_i_27_n_0));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    Dbg_TDO_INST_0_i_28
       (.I0(\Serial_Dbg_Intf.status_reg_reg_n_0_[23] ),
        .I1(\Serial_Dbg_Intf.status_reg_reg_n_0_[22] ),
        .I2(A1),
        .I3(\Serial_Dbg_Intf.status_reg_reg_n_0_[25] ),
        .I4(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I5(\Serial_Dbg_Intf.status_reg_reg_n_0_[24] ),
        .O(Dbg_TDO_INST_0_i_28_n_0));
  LUT6 #(
    .INIT(64'hFAFCFCAF0A0C0CA0)) 
    Dbg_TDO_INST_0_i_33
       (.I0(Dbg_TDO_INST_0_i_46_n_0),
        .I1(Dbg_TDO_INST_0_i_47_n_0),
        .I2(\Serial_Dbg_Intf.shift_count_reg_n_0_[4] ),
        .I3(Dbg_TDO_INST_0_i_48_n_0),
        .I4(A3),
        .I5(Dbg_TDO_INST_0_i_49_n_0),
        .O(Dbg_TDO_INST_0_i_33_n_0));
  LUT6 #(
    .INIT(64'h5555555555555556)) 
    Dbg_TDO_INST_0_i_34
       (.I0(\Serial_Dbg_Intf.shift_count_reg_n_0_[5] ),
        .I1(\Serial_Dbg_Intf.shift_count_reg_n_0_[4] ),
        .I2(A3),
        .I3(A1),
        .I4(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I5(A2),
        .O(Dbg_TDO_INST_0_i_34_n_0));
  LUT5 #(
    .INIT(32'hA88A0880)) 
    Dbg_TDO_INST_0_i_4
       (.I0(Status_Reg_En),
        .I1(Dbg_TDO_INST_0_i_13_n_0),
        .I2(Dbg_TDO_INST_0_i_14_n_0),
        .I3(\Serial_Dbg_Intf.shift_count_reg_n_0_[4] ),
        .I4(Dbg_TDO_INST_0_i_15_n_0),
        .O(Dbg_TDO_INST_0_i_4_n_0));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    Dbg_TDO_INST_0_i_44
       (.I0(\Serial_Dbg_Intf.status_reg_reg_n_0_[19] ),
        .I1(\Serial_Dbg_Intf.status_reg_reg_n_0_[18] ),
        .I2(A1),
        .I3(\Serial_Dbg_Intf.status_reg_reg_n_0_[21] ),
        .I4(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I5(\Serial_Dbg_Intf.status_reg_reg_n_0_[20] ),
        .O(Dbg_TDO_INST_0_i_44_n_0));
  (* SOFT_HLUTNM = "soft_lutpair144" *) 
  LUT3 #(
    .INIT(8'hFE)) 
    Dbg_TDO_INST_0_i_45
       (.I0(\Serial_Dbg_Intf.shift_count_reg_n_0_[7] ),
        .I1(\Serial_Dbg_Intf.shift_count_reg_n_0_[6] ),
        .I2(\Serial_Dbg_Intf.shift_count_reg_n_0_[5] ),
        .O(Dbg_TDO_INST_0_i_45_n_0));
  MUXF7 Dbg_TDO_INST_0_i_46
       (.I0(Dbg_TDO_INST_0_i_61_n_0),
        .I1(Dbg_TDO_INST_0_i_62_n_0),
        .O(Dbg_TDO_INST_0_i_46_n_0),
        .S(Dbg_TDO_INST_0_i_60_n_0));
  MUXF7 Dbg_TDO_INST_0_i_47
       (.I0(Dbg_TDO_INST_0_i_63_n_0),
        .I1(Dbg_TDO_INST_0_i_64_n_0),
        .O(Dbg_TDO_INST_0_i_47_n_0),
        .S(Dbg_TDO_INST_0_i_60_n_0));
  (* SOFT_HLUTNM = "soft_lutpair145" *) 
  LUT3 #(
    .INIT(8'hFE)) 
    Dbg_TDO_INST_0_i_48
       (.I0(A2),
        .I1(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I2(A1),
        .O(Dbg_TDO_INST_0_i_48_n_0));
  LUT6 #(
    .INIT(64'hFFFFAAA955560000)) 
    Dbg_TDO_INST_0_i_49
       (.I0(A3),
        .I1(A1),
        .I2(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I3(A2),
        .I4(Dbg_TDO_INST_0_i_65_n_0),
        .I5(Dbg_TDO_INST_0_i_66_n_0),
        .O(Dbg_TDO_INST_0_i_49_n_0));
  (* SOFT_HLUTNM = "soft_lutpair130" *) 
  LUT5 #(
    .INIT(32'hFFFFFFFD)) 
    Dbg_TDO_INST_0_i_6
       (.I0(Dbg_Reg_En[6]),
        .I1(Dbg_Reg_En[2]),
        .I2(Dbg_Reg_En[1]),
        .I3(Dbg_Reg_En[0]),
        .I4(Dbg_Reg_En[3]),
        .O(Dbg_Reg_En_6_sn_1));
  LUT3 #(
    .INIT(8'hA9)) 
    Dbg_TDO_INST_0_i_60
       (.I0(A2),
        .I1(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I2(A1),
        .O(Dbg_TDO_INST_0_i_60_n_0));
  LUT6 #(
    .INIT(64'hFACF0ACFFAC00AC0)) 
    Dbg_TDO_INST_0_i_61
       (.I0(data_read_reg[9]),
        .I1(data_read_reg[10]),
        .I2(A1),
        .I3(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I4(data_read_reg[11]),
        .I5(data_read_reg[12]),
        .O(Dbg_TDO_INST_0_i_61_n_0));
  LUT6 #(
    .INIT(64'hFACF0ACFFAC00AC0)) 
    Dbg_TDO_INST_0_i_62
       (.I0(data_read_reg[13]),
        .I1(data_read_reg[14]),
        .I2(A1),
        .I3(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I4(data_read_reg[15]),
        .I5(data_read_reg[16]),
        .O(Dbg_TDO_INST_0_i_62_n_0));
  LUT6 #(
    .INIT(64'hFACF0ACFFAC00AC0)) 
    Dbg_TDO_INST_0_i_63
       (.I0(data_read_reg[1]),
        .I1(data_read_reg[2]),
        .I2(A1),
        .I3(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I4(data_read_reg[3]),
        .I5(data_read_reg[4]),
        .O(Dbg_TDO_INST_0_i_63_n_0));
  LUT6 #(
    .INIT(64'hFACF0ACFFAC00AC0)) 
    Dbg_TDO_INST_0_i_64
       (.I0(data_read_reg[5]),
        .I1(data_read_reg[6]),
        .I2(A1),
        .I3(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I4(data_read_reg[7]),
        .I5(data_read_reg[8]),
        .O(Dbg_TDO_INST_0_i_64_n_0));
  MUXF7 Dbg_TDO_INST_0_i_65
       (.I0(Dbg_TDO_INST_0_i_72_n_0),
        .I1(Dbg_TDO_INST_0_i_73_n_0),
        .O(Dbg_TDO_INST_0_i_65_n_0),
        .S(Dbg_TDO_INST_0_i_60_n_0));
  MUXF7 Dbg_TDO_INST_0_i_66
       (.I0(Dbg_TDO_INST_0_i_74_n_0),
        .I1(Dbg_TDO_INST_0_i_75_n_0),
        .O(Dbg_TDO_INST_0_i_66_n_0),
        .S(Dbg_TDO_INST_0_i_60_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    Dbg_TDO_INST_0_i_67
       (.I0(A1),
        .I1(A2),
        .O(Dbg_TDO_INST_0_i_67_n_0));
  (* SOFT_HLUTNM = "soft_lutpair145" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    Dbg_TDO_INST_0_i_7
       (.I0(instr_read_reg[1]),
        .I1(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I2(instr_read_reg[0]),
        .O(Dbg_TDO_INST_0_i_7_n_0));
  LUT6 #(
    .INIT(64'hFACF0ACFFAC00AC0)) 
    Dbg_TDO_INST_0_i_72
       (.I0(data_read_reg[17]),
        .I1(data_read_reg[18]),
        .I2(A1),
        .I3(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I4(data_read_reg[19]),
        .I5(data_read_reg[20]),
        .O(Dbg_TDO_INST_0_i_72_n_0));
  LUT6 #(
    .INIT(64'hFACF0ACFFAC00AC0)) 
    Dbg_TDO_INST_0_i_73
       (.I0(data_read_reg[21]),
        .I1(data_read_reg[22]),
        .I2(A1),
        .I3(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I4(data_read_reg[23]),
        .I5(data_read_reg[24]),
        .O(Dbg_TDO_INST_0_i_73_n_0));
  LUT6 #(
    .INIT(64'hFACF0ACFFAC00AC0)) 
    Dbg_TDO_INST_0_i_74
       (.I0(data_read_reg[25]),
        .I1(data_read_reg[26]),
        .I2(A1),
        .I3(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I4(data_read_reg[27]),
        .I5(data_read_reg[28]),
        .O(Dbg_TDO_INST_0_i_74_n_0));
  LUT6 #(
    .INIT(64'hFACF0ACFFAC00AC0)) 
    Dbg_TDO_INST_0_i_75
       (.I0(data_read_reg[29]),
        .I1(data_read_reg[30]),
        .I2(A1),
        .I3(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I4(data_read_reg[31]),
        .I5(data_read_reg[32]),
        .O(Dbg_TDO_INST_0_i_75_n_0));
  LUT3 #(
    .INIT(8'hC8)) 
    \Embedded_Trace.Serial_Dbg_Intf.data_read_reg_cs_TCK_i_1 
       (.I0(\Use_Trace.Debug_Trace_I_n_23 ),
        .I1(Dbg_Capture),
        .I2(\Use_Trace.Debug_Trace_I_n_12 ),
        .O(\Embedded_Trace.Serial_Dbg_Intf.data_read_reg_cs_TCK_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \Embedded_Trace.Serial_Dbg_Intf.data_read_reg_cs_i_1 
       (.I0(\Use_Trace.Debug_Trace_I_n_5 ),
        .I1(\Use_Trace.Debug_Trace_I_n_6 ),
        .O(data_read_reg_cs0));
  LUT1 #(
    .INIT(2'h1)) 
    \Embedded_Trace.rddata[0]_i_1 
       (.I0(\Use_Trace.Debug_Trace_I_n_9 ),
        .O(\Embedded_Trace.rddata[0]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hEEEECC0C)) 
    Empty_i_1
       (.I0(\all_statistics_counters[0].Debug_Stat_Counter_i/Running ),
        .I1(\Use_Statistics.Debug_Stat_I_n_26 ),
        .I2(request),
        .I3(stat_pause),
        .I4(ready),
        .O(Empty_i_1_n_0));
  LUT5 #(
    .INIT(32'hEEEECC0C)) 
    Empty_i_1__0
       (.I0(\all_statistics_counters[1].Debug_Stat_Counter_i/Running ),
        .I1(\Use_Statistics.Debug_Stat_I_n_29 ),
        .I2(\Use_Statistics.Debug_Stat_I_n_13 ),
        .I3(stat_pause),
        .I4(\Use_Statistics.Debug_Stat_I_n_14 ),
        .O(Empty_i_1__0_n_0));
  LUT5 #(
    .INIT(32'hEEEECC0C)) 
    Empty_i_1__1
       (.I0(\all_statistics_counters[2].Debug_Stat_Counter_i/Running ),
        .I1(\Use_Statistics.Debug_Stat_I_n_32 ),
        .I2(\Use_Statistics.Debug_Stat_I_n_15 ),
        .I3(stat_pause),
        .I4(\Use_Statistics.Debug_Stat_I_n_16 ),
        .O(Empty_i_1__1_n_0));
  LUT5 #(
    .INIT(32'hEEEECC0C)) 
    Empty_i_1__2
       (.I0(\all_statistics_counters[3].Debug_Stat_Counter_i/Running ),
        .I1(\Use_Statistics.Debug_Stat_I_n_35 ),
        .I2(\Use_Statistics.Debug_Stat_I_n_17 ),
        .I3(stat_pause),
        .I4(\Use_Statistics.Debug_Stat_I_n_18 ),
        .O(Empty_i_1__2_n_0));
  LUT5 #(
    .INIT(32'hEEEECC0C)) 
    Empty_i_1__3
       (.I0(\all_statistics_counters[4].Debug_Stat_Counter_i/Running ),
        .I1(\Use_Statistics.Debug_Stat_I_n_38 ),
        .I2(\Use_Statistics.Debug_Stat_I_n_19 ),
        .I3(stat_pause),
        .I4(\Use_Statistics.Debug_Stat_I_n_20 ),
        .O(Empty_i_1__3_n_0));
  LUT5 #(
    .INIT(32'hEEEECC0C)) 
    Empty_i_1__4
       (.I0(\all_statistics_counters[5].Debug_Stat_Counter_i/Running ),
        .I1(\Use_Statistics.Debug_Stat_I_n_41 ),
        .I2(\Use_Statistics.Debug_Stat_I_n_21 ),
        .I3(stat_pause),
        .I4(\Use_Statistics.Debug_Stat_I_n_22 ),
        .O(Empty_i_1__4_n_0));
  FDRE Full_32_bit_1_reg
       (.C(Clk),
        .CE(OF_PipeRun),
        .D(wb_read_imm_reg_1_i),
        .Q(Full_32_bit_1),
        .R(sync_reset));
  FDRE Full_32_bit_reg
       (.C(Clk),
        .CE(OF_PipeRun),
        .D(use_Imm_Reg),
        .Q(Full_32_bit),
        .R(sync_reset));
  (* SOFT_HLUTNM = "soft_lutpair142" *) 
  LUT3 #(
    .INIT(8'h04)) 
    \Gen_Access_Counter.c0_no_overflow_i_1 
       (.I0(\Use_Statistics.Debug_Stat_I_n_43 ),
        .I1(\Use_Statistics.Debug_Stat_I_n_7 ),
        .I2(sync_reset),
        .O(\Gen_Access_Counter.c0_no_overflow_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair142" *) 
  LUT3 #(
    .INIT(8'h08)) 
    \Gen_Access_Counter.c0_stop_valid_i_1 
       (.I0(\all_statistics_counters[5].Debug_Stat_Counter_i/Is_Valid ),
        .I1(\Use_Statistics.Debug_Stat_I_n_7 ),
        .I2(sync_reset),
        .O(\Gen_Access_Counter.c0_stop_valid_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    I_AS_INST_0_i_1
       (.I0(LOCKSTEP_Master_Out[35]),
        .I1(IReady),
        .O(\Serial_Dbg_Intf.if_debug_ready_i_reg_0 ));
  LUT5 #(
    .INIT(32'hFFFFFF08)) 
    \Is_Valid[0]_i_1 
       (.I0(\Use_Statistics.Debug_Stat_I_n_26 ),
        .I1(request),
        .I2(stat_pause),
        .I3(\all_statistics_counters[0].Debug_Stat_Counter_i/Running ),
        .I4(\all_statistics_counters[0].Debug_Stat_Counter_i/Is_Valid ),
        .O(\Is_Valid[0]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFFF08)) 
    \Is_Valid[0]_i_1__0 
       (.I0(\Use_Statistics.Debug_Stat_I_n_29 ),
        .I1(\Use_Statistics.Debug_Stat_I_n_13 ),
        .I2(stat_pause),
        .I3(\all_statistics_counters[1].Debug_Stat_Counter_i/Running ),
        .I4(\all_statistics_counters[1].Debug_Stat_Counter_i/Is_Valid ),
        .O(\Is_Valid[0]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFFF08)) 
    \Is_Valid[0]_i_1__1 
       (.I0(\Use_Statistics.Debug_Stat_I_n_32 ),
        .I1(\Use_Statistics.Debug_Stat_I_n_15 ),
        .I2(stat_pause),
        .I3(\all_statistics_counters[2].Debug_Stat_Counter_i/Running ),
        .I4(\all_statistics_counters[2].Debug_Stat_Counter_i/Is_Valid ),
        .O(\Is_Valid[0]_i_1__1_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFFF08)) 
    \Is_Valid[0]_i_1__2 
       (.I0(\Use_Statistics.Debug_Stat_I_n_35 ),
        .I1(\Use_Statistics.Debug_Stat_I_n_17 ),
        .I2(stat_pause),
        .I3(\all_statistics_counters[3].Debug_Stat_Counter_i/Running ),
        .I4(\all_statistics_counters[3].Debug_Stat_Counter_i/Is_Valid ),
        .O(\Is_Valid[0]_i_1__2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFFF08)) 
    \Is_Valid[0]_i_1__3 
       (.I0(\Use_Statistics.Debug_Stat_I_n_38 ),
        .I1(\Use_Statistics.Debug_Stat_I_n_19 ),
        .I2(stat_pause),
        .I3(\all_statistics_counters[4].Debug_Stat_Counter_i/Running ),
        .I4(\all_statistics_counters[4].Debug_Stat_Counter_i/Is_Valid ),
        .O(\Is_Valid[0]_i_1__3_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFFF08)) 
    \Is_Valid[0]_i_1__4 
       (.I0(\Use_Statistics.Debug_Stat_I_n_41 ),
        .I1(\Use_Statistics.Debug_Stat_I_n_21 ),
        .I2(stat_pause),
        .I3(\all_statistics_counters[5].Debug_Stat_Counter_i/Running ),
        .I4(\all_statistics_counters[5].Debug_Stat_Counter_i/Is_Valid ),
        .O(\Is_Valid[0]_i_1__4_n_0 ));
  LUT3 #(
    .INIT(8'hA8)) 
    \LOCKSTEP_Master_Out[0]_INST_0 
       (.I0(\Serial_Dbg_Intf.status_reg_reg[21]_0 [1]),
        .I1(force_stop_cmd_i),
        .I2(force_stop_cmd_hold),
        .O(LOCKSTEP_Master_Out[37]));
  LUT5 #(
    .INIT(32'h00020000)) 
    \Serial_Dbg_Intf.Instr_Insert_Reg_En_1_i_1 
       (.I0(\Serial_Dbg_Intf.dbg_wakeup_i_i_3_n_0 ),
        .I1(Dbg_Reg_En[7]),
        .I2(Dbg_Reg_En[6]),
        .I3(Dbg_Reg_En[4]),
        .I4(Dbg_Reg_En[5]),
        .O(Instr_Insert_Reg_En));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.Instr_Insert_Reg_En_1_reg 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(Instr_Insert_Reg_En),
        .Q(Instr_Insert_Reg_En_1));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Dbg_Instr2_TCK_reg 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(New_Dbg_Instr_TCK),
        .Q(New_Dbg_Instr2_TCK));
  LUT6 #(
    .INIT(64'h0000000200000000)) 
    \Serial_Dbg_Intf.New_Dbg_Instr_TCK_i_1 
       (.I0(Instr_Insert_Reg_En),
        .I1(instr_read_reg[1]),
        .I2(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I3(instr_read_reg[0]),
        .I4(Dbg_TDO_INST_0_i_14_n_0),
        .I5(\Serial_Dbg_Intf.shift_count_reg_n_0_[4] ),
        .O(New_Dbg_Instr_TCK0));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Dbg_Instr_TCK_reg 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(New_Dbg_Instr_TCK0),
        .Q(New_Dbg_Instr_TCK));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[0] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(shift_datain[1]),
        .Q(LOCKSTEP_Master_Out[31]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[10] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(shift_datain[11]),
        .Q(LOCKSTEP_Master_Out[21]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[11] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(shift_datain[12]),
        .Q(LOCKSTEP_Master_Out[20]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[12] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(shift_datain[13]),
        .Q(LOCKSTEP_Master_Out[19]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[13] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(shift_datain[14]),
        .Q(LOCKSTEP_Master_Out[18]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[14] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(shift_datain[15]),
        .Q(LOCKSTEP_Master_Out[17]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[15] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(shift_datain[16]),
        .Q(LOCKSTEP_Master_Out[16]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[16] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(shift_datain[17]),
        .Q(LOCKSTEP_Master_Out[15]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[17] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(shift_datain[18]),
        .Q(LOCKSTEP_Master_Out[14]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[18] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(shift_datain[19]),
        .Q(LOCKSTEP_Master_Out[13]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[19] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(shift_datain[20]),
        .Q(LOCKSTEP_Master_Out[12]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[1] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(shift_datain[2]),
        .Q(LOCKSTEP_Master_Out[30]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[20] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(shift_datain[21]),
        .Q(LOCKSTEP_Master_Out[11]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[21] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(shift_datain[22]),
        .Q(LOCKSTEP_Master_Out[10]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[22] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(shift_datain[23]),
        .Q(LOCKSTEP_Master_Out[9]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[23] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(shift_datain[24]),
        .Q(LOCKSTEP_Master_Out[8]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[24] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(shift_datain[25]),
        .Q(LOCKSTEP_Master_Out[7]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[25] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(shift_datain[26]),
        .Q(LOCKSTEP_Master_Out[6]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[26] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(shift_datain[27]),
        .Q(LOCKSTEP_Master_Out[5]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[27] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(shift_datain[28]),
        .Q(LOCKSTEP_Master_Out[4]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[28] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(shift_datain[29]),
        .Q(LOCKSTEP_Master_Out[3]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[29] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(shift_datain[30]),
        .Q(LOCKSTEP_Master_Out[2]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[2] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(shift_datain[3]),
        .Q(LOCKSTEP_Master_Out[29]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[30] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(shift_datain[31]),
        .Q(LOCKSTEP_Master_Out[1]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[31] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(Dbg_TDI),
        .Q(LOCKSTEP_Master_Out[0]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[3] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(shift_datain[4]),
        .Q(LOCKSTEP_Master_Out[28]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[4] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(shift_datain[5]),
        .Q(LOCKSTEP_Master_Out[27]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[5] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(shift_datain[6]),
        .Q(LOCKSTEP_Master_Out[26]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[6] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(shift_datain[7]),
        .Q(LOCKSTEP_Master_Out[25]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[7] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(shift_datain[8]),
        .Q(LOCKSTEP_Master_Out[24]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[8] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(shift_datain[9]),
        .Q(LOCKSTEP_Master_Out[23]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[9] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(shift_datain[10]),
        .Q(LOCKSTEP_Master_Out[22]));
  block_design_microblaze_0_0_MB_SRL16E__parameterized2 \Serial_Dbg_Intf.SRL16E_1 
       (.Dbg_Clk(Dbg_Clk),
        .Q({A3,A2,A1,\Serial_Dbg_Intf.shift_count_reg_n_0_[0] }),
        .tdo_config_word1_17(tdo_config_word1_17));
  block_design_microblaze_0_0_MB_SRL16E__parameterized4 \Serial_Dbg_Intf.SRL16E_2 
       (.Dbg_Clk(Dbg_Clk),
        .Q({A3,A2,A1,\Serial_Dbg_Intf.shift_count_reg_n_0_[0] }),
        .tdo_config_word1_16(tdo_config_word1_16));
  block_design_microblaze_0_0_MB_SRL16E__parameterized12 \Serial_Dbg_Intf.SRL16E_3 
       (.Dbg_Clk(Dbg_Clk),
        .Q({A3,A2,A1,\Serial_Dbg_Intf.shift_count_reg_n_0_[0] }),
        .tdo_config_word1_7(tdo_config_word1_7));
  block_design_microblaze_0_0_MB_SRL16E__parameterized14 \Serial_Dbg_Intf.SRL16E_4 
       (.Dbg_Clk(Dbg_Clk),
        .Q({\Serial_Dbg_Intf.shift_count_reg_n_0_[5] ,\Serial_Dbg_Intf.shift_count_reg_n_0_[4] ,A3,A2,A1,\Serial_Dbg_Intf.shift_count_reg_n_0_[0] }),
        .\Serial_Dbg_Intf.shift_count_reg[5] (\Serial_Dbg_Intf.SRL16E_4_n_0 ),
        .tdo_config_word1_7(tdo_config_word1_7),
        .tdo_config_word1_8(tdo_config_word1_8),
        .tdo_config_word1_9(tdo_config_word1_9));
  block_design_microblaze_0_0_MB_SRL16E__parameterized10 \Serial_Dbg_Intf.The_Base_Vector[1].SRL16E_Base_Vector 
       (.Dbg_Clk(Dbg_Clk),
        .Dbg_TDO_INST_0_i_5(\Serial_Dbg_Intf.SRL16E_4_n_0 ),
        .Q({\Serial_Dbg_Intf.shift_count_reg_n_0_[6] ,\Serial_Dbg_Intf.shift_count_reg_n_0_[5] ,\Serial_Dbg_Intf.shift_count_reg_n_0_[4] ,A3,A2,A1,\Serial_Dbg_Intf.shift_count_reg_n_0_[0] }),
        .\Serial_Dbg_Intf.shift_count_reg[5] (\Serial_Dbg_Intf.The_Base_Vector[1].SRL16E_Base_Vector_n_0 ),
        .tdo_config_word1_2(tdo_config_word1_2));
  block_design_microblaze_0_0_MB_SRL16E__parameterized10_18 \Serial_Dbg_Intf.The_Base_Vector[2].SRL16E_Base_Vector 
       (.Dbg_Clk(Dbg_Clk),
        .Q({A3,A2,A1,\Serial_Dbg_Intf.shift_count_reg_n_0_[0] }),
        .tdo_config_word1_2(tdo_config_word1_2));
  block_design_microblaze_0_0_MB_SRL16E__parameterized6 \Serial_Dbg_Intf.The_Cache_Addresses[1].SRL16E_Cache_I 
       (.Dbg_Clk(Dbg_Clk),
        .Q({A3,A2,A1,\Serial_Dbg_Intf.shift_count_reg_n_0_[0] }),
        .tdo_config_word1_15(tdo_config_word1_15));
  block_design_microblaze_0_0_MB_SRL16E__parameterized8 \Serial_Dbg_Intf.The_Cache_Addresses[2].SRL16E_Cache_I 
       (.Dbg_Clk(Dbg_Clk),
        .Dbg_TDO_INST_0_i_5(\Serial_Dbg_Intf.The_Cache_Addresses[6].SRL16E_Cache_I_n_0 ),
        .Q({\Serial_Dbg_Intf.shift_count_reg_n_0_[6] ,\Serial_Dbg_Intf.shift_count_reg_n_0_[5] ,\Serial_Dbg_Intf.shift_count_reg_n_0_[4] ,A3,A2,A1,\Serial_Dbg_Intf.shift_count_reg_n_0_[0] }),
        .\Serial_Dbg_Intf.shift_count_reg[6] (\Serial_Dbg_Intf.The_Cache_Addresses[2].SRL16E_Cache_I_n_0 ),
        .tdo_config_word1_15(tdo_config_word1_15),
        .tdo_config_word1_16(tdo_config_word1_16),
        .tdo_config_word1_17(tdo_config_word1_17));
  block_design_microblaze_0_0_MB_SRL16E__parameterized10_19 \Serial_Dbg_Intf.The_Cache_Addresses[3].SRL16E_Cache_I 
       (.Dbg_Clk(Dbg_Clk),
        .Q({A3,A2,A1,\Serial_Dbg_Intf.shift_count_reg_n_0_[0] }),
        .tdo_config_word1_13(tdo_config_word1_13));
  block_design_microblaze_0_0_MB_SRL16E__parameterized10_20 \Serial_Dbg_Intf.The_Cache_Addresses[4].SRL16E_Cache_I 
       (.Dbg_Clk(Dbg_Clk),
        .Q({A3,A2,A1,\Serial_Dbg_Intf.shift_count_reg_n_0_[0] }),
        .tdo_config_word1_12(tdo_config_word1_12));
  block_design_microblaze_0_0_MB_SRL16E__parameterized6_21 \Serial_Dbg_Intf.The_Cache_Addresses[5].SRL16E_Cache_I 
       (.Dbg_Clk(Dbg_Clk),
        .Q({A3,A2,A1,\Serial_Dbg_Intf.shift_count_reg_n_0_[0] }),
        .tdo_config_word1_11(tdo_config_word1_11));
  block_design_microblaze_0_0_MB_SRL16E__parameterized8_22 \Serial_Dbg_Intf.The_Cache_Addresses[6].SRL16E_Cache_I 
       (.Dbg_Clk(Dbg_Clk),
        .Q({\Serial_Dbg_Intf.shift_count_reg_n_0_[5] ,\Serial_Dbg_Intf.shift_count_reg_n_0_[4] ,A3,A2,A1,\Serial_Dbg_Intf.shift_count_reg_n_0_[0] }),
        .\Serial_Dbg_Intf.shift_count_reg[5] (\Serial_Dbg_Intf.The_Cache_Addresses[6].SRL16E_Cache_I_n_0 ),
        .tdo_config_word1_11(tdo_config_word1_11),
        .tdo_config_word1_12(tdo_config_word1_12),
        .tdo_config_word1_13(tdo_config_word1_13));
  block_design_microblaze_0_0_MB_SRL16E__parameterized10_23 \Serial_Dbg_Intf.The_Cache_Addresses[7].SRL16E_Cache_I 
       (.Dbg_Clk(Dbg_Clk),
        .Q({A3,A2,A1,\Serial_Dbg_Intf.shift_count_reg_n_0_[0] }),
        .tdo_config_word1_9(tdo_config_word1_9));
  block_design_microblaze_0_0_MB_SRL16E__parameterized10_24 \Serial_Dbg_Intf.The_Cache_Addresses[8].SRL16E_Cache_I 
       (.Dbg_Clk(Dbg_Clk),
        .Q({A3,A2,A1,\Serial_Dbg_Intf.shift_count_reg_n_0_[0] }),
        .tdo_config_word1_8(tdo_config_word1_8));
  block_design_microblaze_0_0_MB_SRL16E__parameterized10_25 \Serial_Dbg_Intf.Use_Extended_Features.SRL16E_10 
       (.Dbg_Clk(Dbg_Clk),
        .Q({A3,A2,A1,\Serial_Dbg_Intf.shift_count_reg_n_0_[0] }),
        .tdo_config_word1_0(tdo_config_word1_0));
  block_design_microblaze_0_0_MB_SRL16E__parameterized16 \Serial_Dbg_Intf.Use_Extended_Features.SRL16E_9 
       (.Dbg_Clk(Dbg_Clk),
        .Dbg_Reg_En({Dbg_Reg_En[4],Dbg_Reg_En[5],Dbg_Reg_En[7]}),
        .Dbg_TDO(\Serial_Dbg_Intf.The_Cache_Addresses[2].SRL16E_Cache_I_n_0 ),
        .Dbg_TDO_0(\Serial_Dbg_Intf.The_Base_Vector[1].SRL16E_Base_Vector_n_0 ),
        .Dbg_TDO_1(Dbg_TDO_INST_0_i_19_n_0),
        .Dbg_TDO_INST_0_i_16_0(Dbg_TDO_INST_0_i_45_n_0),
        .Dbg_TDO_INST_0_i_5_0(Dbg_Reg_En_6_sn_1),
        .Q({\Serial_Dbg_Intf.shift_count_reg_n_0_[8] ,\Serial_Dbg_Intf.shift_count_reg_n_0_[7] ,\Serial_Dbg_Intf.shift_count_reg_n_0_[4] ,A3,A2,A1,\Serial_Dbg_Intf.shift_count_reg_n_0_[0] }),
        .\Serial_Dbg_Intf.shift_count_reg[8] (\Serial_Dbg_Intf.Use_Extended_Features.SRL16E_9_n_0 ),
        .tdo_config_word1_0(tdo_config_word1_0),
        .tdo_config_word1_17(tdo_config_word1_17));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.capture_1_reg 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(Dbg_Capture),
        .Q(capture_1));
  LUT2 #(
    .INIT(4'h2)) 
    \Serial_Dbg_Intf.clear_cmd_i_1 
       (.I0(sample_synced_5[0]),
        .I1(p_0_in_4),
        .O(clear_cmd0));
  LUT2 #(
    .INIT(4'h2)) 
    \Serial_Dbg_Intf.clear_cmd_i_1__0 
       (.I0(sample_synced_7[0]),
        .I1(\Use_Trace.Debug_Trace_I_n_43 ),
        .O(clear_cmd0_0));
  LUT2 #(
    .INIT(4'h2)) 
    \Serial_Dbg_Intf.clear_cmd_rep_i_1 
       (.I0(sample_synced_5[0]),
        .I1(p_0_in_4),
        .O(\Serial_Dbg_Intf.clear_cmd_rep_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h0001)) 
    \Serial_Dbg_Intf.command_reg[0]_i_1__1 
       (.I0(Dbg_Reg_En[4]),
        .I1(Dbg_Reg_En[5]),
        .I2(Dbg_Reg_En_6_sn_1),
        .I3(Dbg_Reg_En[7]),
        .O(Command_Reg_En));
  LUT4 #(
    .INIT(16'h0D08)) 
    \Serial_Dbg_Intf.command_reg[0]_i_2__1 
       (.I0(Scan_Reset_Sel),
        .I1(Scan_Reset),
        .I2(Scan_En),
        .I3(command_reg_clear),
        .O(command_reg_rst));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.command_reg_reg[0] 
       (.C(Dbg_Update),
        .CE(Command_Reg_En),
        .CLR(command_reg_rst),
        .D(shift_datain[30]),
        .Q(command_reg[0]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.command_reg_reg[1] 
       (.C(Dbg_Update),
        .CE(Command_Reg_En),
        .CLR(command_reg_rst),
        .D(shift_datain[31]),
        .Q(command_reg[1]));
  LUT4 #(
    .INIT(16'h0D08)) 
    \Serial_Dbg_Intf.continue_from_brk_TClk_i_1 
       (.I0(Scan_Reset_Sel),
        .I1(Scan_Reset),
        .I2(Scan_En),
        .I3(\Serial_Dbg_Intf.continue_from_brk_reg_n_0 ),
        .O(continue_from_brk_rst));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.continue_from_brk_TClk_reg 
       (.C(Dbg_Update),
        .CE(Control_Reg_En),
        .CLR(continue_from_brk_rst),
        .D(shift_datain[24]),
        .Q(continue_from_brk_TClk));
  FDRE \Serial_Dbg_Intf.continue_from_brk_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(continue_from_brk0),
        .Q(\Serial_Dbg_Intf.continue_from_brk_reg_n_0 ),
        .R(sync_reset));
  LUT2 #(
    .INIT(4'h2)) 
    \Serial_Dbg_Intf.control_incr_i_1 
       (.I0(sample_synced_5[5]),
        .I1(\Use_Statistics.Debug_Stat_I_n_93 ),
        .O(control_incr0));
  LUT3 #(
    .INIT(8'h08)) 
    \Serial_Dbg_Intf.control_reg[0]_i_2 
       (.I0(Scan_Reset),
        .I1(Scan_Reset_Sel),
        .I2(Scan_En),
        .O(config_reset_with_scan));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.control_reg_reg[0] 
       (.C(Dbg_Update),
        .CE(Control_Reg_En),
        .CLR(config_with_scan_reset),
        .D(shift_datain[22]),
        .Q(\Serial_Dbg_Intf.control_reg_reg_n_0_[0] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.control_reg_reg[3] 
       (.C(Dbg_Update),
        .CE(Control_Reg_En),
        .CLR(config_with_scan_reset),
        .D(shift_datain[25]),
        .Q(\Serial_Dbg_Intf.control_reg_reg_n_0_[3] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.control_reg_reg[4] 
       (.C(Dbg_Update),
        .CE(Control_Reg_En),
        .CLR(config_with_scan_reset),
        .D(shift_datain[26]),
        .Q(\Serial_Dbg_Intf.control_reg_reg_n_0_[4] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.control_reg_reg[5] 
       (.C(Dbg_Update),
        .CE(Control_Reg_En),
        .CLR(config_with_scan_reset),
        .D(shift_datain[27]),
        .Q(\Serial_Dbg_Intf.control_reg_reg_n_0_[5] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.control_reg_reg[8] 
       (.C(Dbg_Update),
        .CE(Control_Reg_En),
        .CLR(config_with_scan_reset),
        .D(shift_datain[30]),
        .Q(\Serial_Dbg_Intf.control_reg_reg[8]_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[0] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[0]),
        .Q(data_read_reg[0]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[10] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[10]),
        .Q(data_read_reg[10]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[11] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[11]),
        .Q(data_read_reg[11]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[12] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[12]),
        .Q(data_read_reg[12]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[13] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[13]),
        .Q(data_read_reg[13]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[14] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[14]),
        .Q(data_read_reg[14]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[15] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[15]),
        .Q(data_read_reg[15]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[16] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[16]),
        .Q(data_read_reg[16]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[17] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[17]),
        .Q(data_read_reg[17]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[18] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[18]),
        .Q(data_read_reg[18]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[19] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[19]),
        .Q(data_read_reg[19]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[1] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[1]),
        .Q(data_read_reg[1]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[20] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[20]),
        .Q(data_read_reg[20]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[21] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[21]),
        .Q(data_read_reg[21]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[22] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[22]),
        .Q(data_read_reg[22]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[23] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[23]),
        .Q(data_read_reg[23]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[24] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[24]),
        .Q(data_read_reg[24]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[25] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[25]),
        .Q(data_read_reg[25]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[26] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[26]),
        .Q(data_read_reg[26]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[27] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[27]),
        .Q(data_read_reg[27]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[28] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[28]),
        .Q(data_read_reg[28]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[29] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[29]),
        .Q(data_read_reg[29]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[2] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[2]),
        .Q(data_read_reg[2]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[30] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[30]),
        .Q(data_read_reg[30]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[31] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[31]),
        .Q(data_read_reg[31]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[32] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[32]),
        .Q(data_read_reg[32]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[3] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[3]),
        .Q(data_read_reg[3]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[4] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[4]),
        .Q(data_read_reg[4]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[5] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[5]),
        .Q(data_read_reg[5]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[6] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[6]),
        .Q(data_read_reg[6]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[7] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[7]),
        .Q(data_read_reg[7]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[8] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[8]),
        .Q(data_read_reg[8]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[9] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[9]),
        .Q(data_read_reg[9]));
  LUT2 #(
    .INIT(4'h2)) 
    \Serial_Dbg_Intf.data_write_i_1 
       (.I0(sample_synced_5[6]),
        .I1(\Use_Statistics.Debug_Stat_I_n_94 ),
        .O(data_write0));
  FDRE \Serial_Dbg_Intf.dbg_disable_interrupt_i_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(sample_synced[9]),
        .Q(LOCKSTEP_Master_Out[36]),
        .R(sync_reset));
  LUT5 #(
    .INIT(32'h00000200)) 
    \Serial_Dbg_Intf.dbg_wakeup_i_i_1 
       (.I0(\Serial_Dbg_Intf.dbg_wakeup_i_i_3_n_0 ),
        .I1(Dbg_Reg_En[4]),
        .I2(Dbg_Reg_En[5]),
        .I3(Dbg_Reg_En[7]),
        .I4(Dbg_Reg_En[6]),
        .O(Control_Reg_En));
  LUT5 #(
    .INIT(32'h0808080D)) 
    \Serial_Dbg_Intf.dbg_wakeup_i_i_2 
       (.I0(Scan_Reset_Sel),
        .I1(Scan_Reset),
        .I2(Scan_En),
        .I3(Sleep_Out),
        .I4(Sleep_Decode),
        .O(no_sleeping));
  (* SOFT_HLUTNM = "soft_lutpair130" *) 
  LUT4 #(
    .INIT(16'h0001)) 
    \Serial_Dbg_Intf.dbg_wakeup_i_i_3 
       (.I0(Dbg_Reg_En[3]),
        .I1(Dbg_Reg_En[0]),
        .I2(Dbg_Reg_En[1]),
        .I3(Dbg_Reg_En[2]),
        .O(\Serial_Dbg_Intf.dbg_wakeup_i_i_3_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.dbg_wakeup_i_reg 
       (.C(Dbg_Update),
        .CE(Control_Reg_En),
        .CLR(no_sleeping),
        .D(shift_datain[31]),
        .Q(LOCKSTEP_Master_Out[33]));
  LUT5 #(
    .INIT(32'h0D0D0D08)) 
    \Serial_Dbg_Intf.force_stop_TClk_i_1 
       (.I0(Scan_Reset_Sel),
        .I1(Scan_Reset),
        .I2(Scan_En),
        .I3(force_stop_cmd_hold),
        .I4(force_stop_cmd_i),
        .O(force_stop_cmd_rst));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.force_stop_TClk_reg 
       (.C(Dbg_Update),
        .CE(Control_Reg_En),
        .CLR(force_stop_cmd_rst),
        .D(shift_datain[29]),
        .Q(force_stop_TClk));
  FDRE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.force_stop_cmd_i_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(force_stop_cmd_i0),
        .Q(force_stop_cmd_i),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.if_debug_ready_i_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(if_debug_ready_i0),
        .Q(LOCKSTEP_Master_Out[35]),
        .R(sync_reset));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.instr_read_reg_reg[0] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(instr_rd_reg[0]),
        .Q(instr_read_reg[0]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.instr_read_reg_reg[1] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(instr_rd_reg[1]),
        .Q(instr_read_reg[1]));
  FDRE \Serial_Dbg_Intf.new_dbg_instr_shifting_CLK_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Insert_Reg_En_1),
        .Q(\Serial_Dbg_Intf.new_dbg_instr_shifting_CLK_reg_n_0 ),
        .R(sync_reset));
  LUT5 #(
    .INIT(32'h0D0D0D08)) 
    \Serial_Dbg_Intf.normal_stop_TClk_i_1 
       (.I0(Scan_Reset_Sel),
        .I1(Scan_Reset),
        .I2(Scan_En),
        .I3(normal_stop_cmd_hold),
        .I4(normal_stop_cmd_i),
        .O(normal_stop_cmd_rst));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.normal_stop_TClk_reg 
       (.C(Dbg_Update),
        .CE(Control_Reg_En),
        .CLR(normal_stop_cmd_rst),
        .D(shift_datain[28]),
        .Q(normal_stop_TClk));
  FDRE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.normal_stop_cmd_i_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(normal_stop_cmd_i0),
        .Q(normal_stop_cmd_i),
        .R(sync_reset));
  FDRE \Serial_Dbg_Intf.read_register_MSR_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(read_register_MSR0),
        .Q(read_register_MSR),
        .R(sync_reset));
  FDRE \Serial_Dbg_Intf.read_register_PC_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(read_register_PC0),
        .Q(read_register_PC),
        .R(sync_reset));
  LUT2 #(
    .INIT(4'h2)) 
    \Serial_Dbg_Intf.reset_cmd_i_1 
       (.I0(sample_synced_5[4]),
        .I1(\Use_Statistics.Debug_Stat_I_n_92 ),
        .O(reset_cmd0));
  LUT2 #(
    .INIT(4'h2)) 
    \Serial_Dbg_Intf.sample_cmd_i_1 
       (.I0(sample_synced_5[3]),
        .I1(\Use_Statistics.Debug_Stat_I_n_91 ),
        .O(sample_cmd0));
  LUT2 #(
    .INIT(4'h2)) 
    \Serial_Dbg_Intf.sample_cmd_i_1__0 
       (.I0(sample_synced_7[3]),
        .I1(\Use_Trace.Debug_Trace_I_n_46 ),
        .O(sample_cmd0_3));
  FDRE \Serial_Dbg_Intf.sample_synced_1_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(sample_synced[0]),
        .Q(\Serial_Dbg_Intf.sample_synced_1_reg_n_0_[0] ),
        .R(sync_reset));
  FDRE \Serial_Dbg_Intf.sample_synced_1_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(sample_synced[1]),
        .Q(\Serial_Dbg_Intf.sample_synced_1_reg_n_0_[1] ),
        .R(sync_reset));
  FDRE \Serial_Dbg_Intf.sample_synced_1_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sample_synced[2]),
        .Q(p_1_in),
        .R(sync_reset));
  FDRE \Serial_Dbg_Intf.sample_synced_1_reg[3] 
       (.C(Clk),
        .CE(1'b1),
        .D(sample_synced[3]),
        .Q(\Serial_Dbg_Intf.sample_synced_1_reg_n_0_[3] ),
        .R(sync_reset));
  FDRE \Serial_Dbg_Intf.sample_synced_1_reg[4] 
       (.C(Clk),
        .CE(1'b1),
        .D(sample_synced[4]),
        .Q(\Serial_Dbg_Intf.sample_synced_1_reg_n_0_[4] ),
        .R(sync_reset));
  FDRE \Serial_Dbg_Intf.sample_synced_1_reg[5] 
       (.C(Clk),
        .CE(1'b1),
        .D(sample_synced[5]),
        .Q(p_0_in_0),
        .R(sync_reset));
  FDRE \Serial_Dbg_Intf.sample_synced_1_reg[6] 
       (.C(Clk),
        .CE(1'b1),
        .D(sample_synced[6]),
        .Q(\Serial_Dbg_Intf.sample_synced_1_reg_n_0_[6] ),
        .R(sync_reset));
  FDRE \Serial_Dbg_Intf.sample_synced_1_reg[7] 
       (.C(Clk),
        .CE(1'b1),
        .D(sample_synced[7]),
        .Q(p_0_in32_in),
        .R(sync_reset));
  FDRE \Serial_Dbg_Intf.sample_synced_1_reg[8] 
       (.C(Clk),
        .CE(1'b1),
        .D(sample_synced[8]),
        .Q(\Serial_Dbg_Intf.sample_synced_1_reg_n_0_[8] ),
        .R(sync_reset));
  (* SOFT_HLUTNM = "soft_lutpair141" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \Serial_Dbg_Intf.shift_count[0]_i_1 
       (.I0(Dbg_Shift),
        .I1(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .O(p_0_in[0]));
  (* SOFT_HLUTNM = "soft_lutpair141" *) 
  LUT3 #(
    .INIT(8'h28)) 
    \Serial_Dbg_Intf.shift_count[1]_i_1 
       (.I0(Dbg_Shift),
        .I1(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I2(A1),
        .O(p_0_in[1]));
  (* SOFT_HLUTNM = "soft_lutpair133" *) 
  LUT4 #(
    .INIT(16'h2A80)) 
    \Serial_Dbg_Intf.shift_count[2]_i_1 
       (.I0(Dbg_Shift),
        .I1(A1),
        .I2(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I3(A2),
        .O(p_0_in[2]));
  (* SOFT_HLUTNM = "soft_lutpair133" *) 
  LUT5 #(
    .INIT(32'h2AAA8000)) 
    \Serial_Dbg_Intf.shift_count[3]_i_1 
       (.I0(Dbg_Shift),
        .I1(A2),
        .I2(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I3(A1),
        .I4(A3),
        .O(p_0_in[3]));
  LUT6 #(
    .INIT(64'h2AAAAAAA80000000)) 
    \Serial_Dbg_Intf.shift_count[4]_i_1 
       (.I0(Dbg_Shift),
        .I1(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I2(A3),
        .I3(A1),
        .I4(A2),
        .I5(\Serial_Dbg_Intf.shift_count_reg_n_0_[4] ),
        .O(p_0_in[4]));
  (* SOFT_HLUTNM = "soft_lutpair144" *) 
  LUT3 #(
    .INIT(8'h82)) 
    \Serial_Dbg_Intf.shift_count[5]_i_1 
       (.I0(Dbg_Shift),
        .I1(\Serial_Dbg_Intf.shift_count[8]_i_2_n_0 ),
        .I2(\Serial_Dbg_Intf.shift_count_reg_n_0_[5] ),
        .O(p_0_in[5]));
  (* SOFT_HLUTNM = "soft_lutpair135" *) 
  LUT4 #(
    .INIT(16'h8A20)) 
    \Serial_Dbg_Intf.shift_count[6]_i_1 
       (.I0(Dbg_Shift),
        .I1(\Serial_Dbg_Intf.shift_count[8]_i_2_n_0 ),
        .I2(\Serial_Dbg_Intf.shift_count_reg_n_0_[5] ),
        .I3(\Serial_Dbg_Intf.shift_count_reg_n_0_[6] ),
        .O(p_0_in[6]));
  (* SOFT_HLUTNM = "soft_lutpair135" *) 
  LUT5 #(
    .INIT(32'h8AAA2000)) 
    \Serial_Dbg_Intf.shift_count[7]_i_1 
       (.I0(Dbg_Shift),
        .I1(\Serial_Dbg_Intf.shift_count[8]_i_2_n_0 ),
        .I2(\Serial_Dbg_Intf.shift_count_reg_n_0_[6] ),
        .I3(\Serial_Dbg_Intf.shift_count_reg_n_0_[5] ),
        .I4(\Serial_Dbg_Intf.shift_count_reg_n_0_[7] ),
        .O(p_0_in[7]));
  LUT6 #(
    .INIT(64'hAA2AAAAA00800000)) 
    \Serial_Dbg_Intf.shift_count[8]_i_1 
       (.I0(Dbg_Shift),
        .I1(\Serial_Dbg_Intf.shift_count_reg_n_0_[5] ),
        .I2(\Serial_Dbg_Intf.shift_count_reg_n_0_[6] ),
        .I3(\Serial_Dbg_Intf.shift_count[8]_i_2_n_0 ),
        .I4(\Serial_Dbg_Intf.shift_count_reg_n_0_[7] ),
        .I5(\Serial_Dbg_Intf.shift_count_reg_n_0_[8] ),
        .O(p_0_in[8]));
  (* SOFT_HLUTNM = "soft_lutpair134" *) 
  LUT5 #(
    .INIT(32'h7FFFFFFF)) 
    \Serial_Dbg_Intf.shift_count[8]_i_2 
       (.I0(\Serial_Dbg_Intf.shift_count_reg_n_0_[4] ),
        .I1(A2),
        .I2(A1),
        .I3(A3),
        .I4(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .O(\Serial_Dbg_Intf.shift_count[8]_i_2_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_count_reg[0] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(p_0_in[0]),
        .Q(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_count_reg[1] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(p_0_in[1]),
        .Q(A1));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_count_reg[2] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(p_0_in[2]),
        .Q(A2));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_count_reg[3] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(p_0_in[3]),
        .Q(A3));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_count_reg[4] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(p_0_in[4]),
        .Q(\Serial_Dbg_Intf.shift_count_reg_n_0_[4] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_count_reg[5] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(p_0_in[5]),
        .Q(\Serial_Dbg_Intf.shift_count_reg_n_0_[5] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_count_reg[6] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(p_0_in[6]),
        .Q(\Serial_Dbg_Intf.shift_count_reg_n_0_[6] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_count_reg[7] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(p_0_in[7]),
        .Q(\Serial_Dbg_Intf.shift_count_reg_n_0_[7] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_count_reg[8] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(p_0_in[8]),
        .Q(\Serial_Dbg_Intf.shift_count_reg_n_0_[8] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[0] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(shift_datain[1]),
        .Q(shift_datain[0]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[10] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(shift_datain[11]),
        .Q(shift_datain[10]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[11] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(shift_datain[12]),
        .Q(shift_datain[11]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[12] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(shift_datain[13]),
        .Q(shift_datain[12]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[13] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(shift_datain[14]),
        .Q(shift_datain[13]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[14] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(shift_datain[15]),
        .Q(shift_datain[14]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[15] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(shift_datain[16]),
        .Q(shift_datain[15]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[16] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(shift_datain[17]),
        .Q(shift_datain[16]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[17] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(shift_datain[18]),
        .Q(shift_datain[17]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[18] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(shift_datain[19]),
        .Q(shift_datain[18]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[19] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(shift_datain[20]),
        .Q(shift_datain[19]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[1] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(shift_datain[2]),
        .Q(shift_datain[1]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[20] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(shift_datain[21]),
        .Q(shift_datain[20]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[21] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(shift_datain[22]),
        .Q(shift_datain[21]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[22] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(shift_datain[23]),
        .Q(shift_datain[22]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[23] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(shift_datain[24]),
        .Q(shift_datain[23]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[24] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(shift_datain[25]),
        .Q(shift_datain[24]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[25] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(shift_datain[26]),
        .Q(shift_datain[25]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[26] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(shift_datain[27]),
        .Q(shift_datain[26]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[27] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(shift_datain[28]),
        .Q(shift_datain[27]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[28] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(shift_datain[29]),
        .Q(shift_datain[28]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[29] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(shift_datain[30]),
        .Q(shift_datain[29]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[2] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(shift_datain[3]),
        .Q(shift_datain[2]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[30] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(shift_datain[31]),
        .Q(shift_datain[30]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[31] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(Dbg_TDI),
        .Q(shift_datain[31]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[3] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(shift_datain[4]),
        .Q(shift_datain[3]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[4] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(shift_datain[5]),
        .Q(shift_datain[4]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[5] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(shift_datain[6]),
        .Q(shift_datain[5]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[6] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(shift_datain[7]),
        .Q(shift_datain[6]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[7] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(shift_datain[8]),
        .Q(shift_datain[7]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[8] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(shift_datain[9]),
        .Q(shift_datain[8]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[9] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(shift_datain[10]),
        .Q(shift_datain[9]));
  LUT4 #(
    .INIT(16'h0D08)) 
    \Serial_Dbg_Intf.single_Step_TClk_i_1 
       (.I0(Scan_Reset_Sel),
        .I1(Scan_Reset),
        .I2(Scan_En),
        .I3(start_single_step_reg_n_0),
        .O(start_single_step_rst));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.single_Step_TClk_reg 
       (.C(Dbg_Update),
        .CE(Control_Reg_En),
        .CLR(start_single_step_rst),
        .D(shift_datain[23]),
        .Q(single_Step_TClk));
  LUT2 #(
    .INIT(4'h2)) 
    \Serial_Dbg_Intf.start_cmd_i_1 
       (.I0(sample_synced_5[1]),
        .I1(\Use_Statistics.Debug_Stat_I_n_89 ),
        .O(start_cmd0));
  LUT2 #(
    .INIT(4'h2)) 
    \Serial_Dbg_Intf.start_cmd_i_1__0 
       (.I0(sample_synced_7[1]),
        .I1(\Use_Trace.Debug_Trace_I_n_44 ),
        .O(start_cmd0_1));
  FDRE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.start_single_cmd_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(start_single_cmd0),
        .Q(start_single_cmd),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'h1101FFFF0000FFFF)) 
    \Serial_Dbg_Intf.started_i_i_1 
       (.I0(stop_cmd),
        .I1(full_i),
        .I2(sample_synced_7[5]),
        .I3(p_1_in85_in),
        .I4(\Use_Trace.Debug_Trace_I_n_40 ),
        .I5(started_i),
        .O(\Serial_Dbg_Intf.started_i_i_1_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_reg_reg[0] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(sync),
        .Q(\Serial_Dbg_Intf.status_reg_reg_n_0_[0] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_reg_reg[16] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.sync_stop_CPU_n_0 ),
        .Q(\Serial_Dbg_Intf.status_reg_reg_n_0_[16] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_reg_reg[17] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(sync_reset),
        .Q(\Serial_Dbg_Intf.status_reg_reg_n_0_[17] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_reg_reg[18] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(Full_32_bit),
        .Q(\Serial_Dbg_Intf.status_reg_reg_n_0_[18] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_reg_reg[19] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(delay_slot_instr_reg_0),
        .Q(\Serial_Dbg_Intf.status_reg_reg_n_0_[19] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_reg_reg[20] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(Full_32_bit_1),
        .Q(\Serial_Dbg_Intf.status_reg_reg_n_0_[20] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_reg_reg[21] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.status_reg_reg[21]_0 [1]),
        .Q(\Serial_Dbg_Intf.status_reg_reg_n_0_[21] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_reg_reg[22] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.status_reg_reg[21]_0 [0]),
        .Q(\Serial_Dbg_Intf.status_reg_reg_n_0_[22] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_reg_reg[23] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(dbg_brki_hit_synced),
        .Q(\Serial_Dbg_Intf.status_reg_reg_n_0_[23] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_reg_reg[24] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(running_clock_synced),
        .Q(\Serial_Dbg_Intf.status_reg_reg_n_0_[24] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_reg_reg[25] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(D[183]),
        .Q(\Serial_Dbg_Intf.status_reg_reg_n_0_[25] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_reg_reg[27] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(sleep_synced),
        .Q(\Serial_Dbg_Intf.status_reg_reg_n_0_[27] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_reg_reg[28] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(pause_synced),
        .Q(\Serial_Dbg_Intf.status_reg_reg_n_0_[28] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_reg_reg[29] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(unchanged),
        .Q(\Serial_Dbg_Intf.status_reg_reg_n_0_[29] ));
  LUT2 #(
    .INIT(4'h2)) 
    \Serial_Dbg_Intf.stop_cmd_i_1 
       (.I0(sample_synced_5[2]),
        .I1(\Use_Statistics.Debug_Stat_I_n_90 ),
        .O(stop_cmd0));
  LUT2 #(
    .INIT(4'h2)) 
    \Serial_Dbg_Intf.stop_cmd_i_1__0 
       (.I0(sample_synced_7[2]),
        .I1(\Use_Trace.Debug_Trace_I_n_45 ),
        .O(stop_cmd0_2));
  LUT6 #(
    .INIT(64'hFFFF0000EEFE0000)) 
    \Serial_Dbg_Intf.stopped_i_i_1 
       (.I0(stop_cmd),
        .I1(full_i),
        .I2(sample_synced_7[5]),
        .I3(p_1_in85_in),
        .I4(\Use_Trace.Debug_Trace_I_n_40 ),
        .I5(\Use_Trace.Debug_Trace_I_n_13 ),
        .O(\Serial_Dbg_Intf.stopped_i_i_1_n_0 ));
  block_design_microblaze_0_0_mb_sync_bit__parameterized2 \Serial_Dbg_Intf.sync_dbg_brk_hit 
       (.AR(config_with_scan_reset),
        .D(dbg_brki_hit_synced),
        .Dbg_Clk(Dbg_Clk),
        .dbg_brki_hit(dbg_brki_hit));
  block_design_microblaze_0_0_mb_sync_vec \Serial_Dbg_Intf.sync_dbg_hit 
       (.AR(config_with_scan_reset),
        .D(sync),
        .Dbg_Clk(Dbg_Clk),
        .Raw(Raw),
        .Scan_En(Scan_En),
        .Scan_Reset(Scan_Reset),
        .Scan_Reset_Sel(Scan_Reset_Sel));
  block_design_microblaze_0_0_mb_sync_bit__parameterized4 \Serial_Dbg_Intf.sync_dbg_wakeup 
       (.Clk(Clk),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[35],LOCKSTEP_Master_Out[33:32]}),
        .\Serial_Dbg_Intf.continue_from_brk_reg (\Serial_Dbg_Intf.sync_dbg_wakeup_n_0 ),
        .dbg_continue_i_reg(\Area_Debug_Control.dbg_stop_Detected_reg_n_0 ),
        .dbg_continue_i_reg_0(\Serial_Dbg_Intf.continue_from_brk_reg_n_0 ),
        .dbg_continue_i_reg_1(force_stop_cmd_i),
        .dbg_pause(dbg_pause),
        .normal_stop_cmd_i(normal_stop_cmd_i),
        .start_single_cmd(start_single_cmd),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_mb_sync_bit__parameterized2_26 \Serial_Dbg_Intf.sync_pause 
       (.AR(config_with_scan_reset),
        .D(pause_synced),
        .Dbg_Clk(Dbg_Clk),
        .Pause(Pause));
  block_design_microblaze_0_0_mb_sync_bit__parameterized2_27 \Serial_Dbg_Intf.sync_running_clock 
       (.AR(config_with_scan_reset),
        .D(running_clock_synced),
        .Dbg_Clk(Dbg_Clk),
        .running_clock(running_clock));
  block_design_microblaze_0_0_mb_sync_vec__parameterized1 \Serial_Dbg_Intf.sync_sample 
       (.Clk(Clk),
        .D(normal_stop_TClk),
        .Dbg_Trig_Ack_In(Dbg_Trig_Ack_In[4]),
        .Dbg_Trig_Ack_Out(Dbg_Trig_Ack_Out[4]),
        .Dbg_Trig_In(Dbg_Trig_In[4]),
        .Dbg_Trig_Out(Dbg_Trig_Out[4]),
        .Q({\Serial_Dbg_Intf.sample_synced_1_reg_n_0_[0] ,\Serial_Dbg_Intf.sample_synced_1_reg_n_0_[1] ,p_1_in,\Serial_Dbg_Intf.sample_synced_1_reg_n_0_[3] ,\Serial_Dbg_Intf.sample_synced_1_reg_n_0_[4] ,p_0_in_0,p_0_in32_in,\Serial_Dbg_Intf.sample_synced_1_reg_n_0_[8] }),
        .\Serial_Dbg_Intf.if_debug_ready_i_reg (\Serial_Dbg_Intf.sample_synced_1_reg_n_0_[6] ),
        .\Serial_Dbg_Intf.sample_synced_1_reg[8] (\Serial_Dbg_Intf.sync_sample_n_15 ),
        .\Synchronize.use_sync_reset.sync_reg[1] (force_stop_TClk),
        .\Synchronize.use_sync_reset.sync_reg[1]_0 (single_Step_TClk),
        .\Synchronize.use_sync_reset.sync_reg[1]_1 ({command_reg[0],command_reg[1]}),
        .\Synchronize.use_sync_reset.sync_reg[1]_2 (continue_from_brk_TClk),
        .\Synchronize.use_sync_reset.sync_reg[1]_3 (New_Dbg_Instr2_TCK),
        .\Synchronize.use_sync_reset.sync_reg[1]_4 (\Serial_Dbg_Intf.control_reg_reg_n_0_[3] ),
        .\Synchronize.use_sync_reset.sync_reg[2] (\Serial_Dbg_Intf.sync_sample_n_17 ),
        .continue_from_brk0(continue_from_brk0),
        .force_stop_cmd_i0(force_stop_cmd_i0),
        .if_debug_ready_i0(if_debug_ready_i0),
        .normal_stop_cmd_i0(normal_stop_cmd_i0),
        .read_register_MSR0(read_register_MSR0),
        .read_register_PC0(read_register_PC0),
        .sample_synced(sample_synced),
        .start_single_cmd0(start_single_cmd0),
        .sync_reset(sync_reset),
        .trig_in_10(trig_in_10));
  block_design_microblaze_0_0_mb_sync_bit__parameterized2_28 \Serial_Dbg_Intf.sync_sleep 
       (.AR(config_with_scan_reset),
        .D(sleep_synced),
        .Dbg_Clk(Dbg_Clk),
        .Sleep(Sleep));
  block_design_microblaze_0_0_mb_sync_bit__parameterized2_29 \Serial_Dbg_Intf.sync_stop_CPU 
       (.AR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.sync_stop_CPU_n_0 ),
        .Dbg_Clk(Dbg_Clk),
        .LOCKSTEP_Master_Out(LOCKSTEP_Master_Out[34]));
  FDRE \Serial_Dbg_Intf.trig_ack_out_1_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Serial_Dbg_Intf.sync_sample_n_17 ),
        .Q(Dbg_Trig_Ack_Out[4]),
        .R(sync_reset));
  FDRE \Serial_Dbg_Intf.trig_in_1_pulse_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(trig_in_10),
        .Q(trig_in_1_pulse),
        .R(sync_reset));
  FDRE \Serial_Dbg_Intf.trig_in_1_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Serial_Dbg_Intf.sync_sample_n_15 ),
        .Q(Dbg_Trig_In[4]),
        .R(sync_reset));
  LUT5 #(
    .INIT(32'hFFFF0100)) 
    \Serial_Dbg_Intf.unchanged_i_1 
       (.I0(Dbg_Reg_En_6_sn_1),
        .I1(Dbg_Reg_En[4]),
        .I2(Dbg_Reg_En[5]),
        .I3(Dbg_Reg_En[7]),
        .I4(unchanged),
        .O(\Serial_Dbg_Intf.unchanged_i_1_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.unchanged_reg 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.unchanged_i_1_n_0 ),
        .Q(unchanged));
  block_design_microblaze_0_0_Debug_Stat \Use_Statistics.Debug_Stat_I 
       (.Clk(Clk),
        .D({sample_synced_5[0],sample_synced_5[1],sample_synced_5[2],sample_synced_5[3],sample_synced_5[4],sample_synced_5[5],sample_synced_5[6]}),
        .Dbg_Capture(Dbg_Capture),
        .Dbg_Clk(Dbg_Clk),
        .Dbg_Intr(Dbg_Intr),
        .Dbg_Reg_En(Dbg_Reg_En),
        .\Dbg_Reg_En[3]_0 (\Dbg_Reg_En[3]_0 ),
        .Dbg_Reg_En_3_sp_1(Dbg_Reg_En_3_sn_1),
        .Dbg_TDO(Dbg_TDO),
        .Dbg_TDO_0(Dbg_TDO_0),
        .Dbg_TDO_1(Dbg_TDO_1),
        .Dbg_TDO_2(Dbg_TDO_2),
        .Dbg_TDO_3(Dbg_TDO_3),
        .Dbg_TDO_4(Dbg_TDO_INST_0_i_4_n_0),
        .Dbg_TDO_5(\Serial_Dbg_Intf.Use_Extended_Features.SRL16E_9_n_0 ),
        .Dbg_TDO_6(Dbg_TDO_INST_0_i_7_n_0),
        .Dbg_TDO_7(\Use_Trace.Debug_Trace_I_n_28 ),
        .Dbg_Trig_Ack_In(Dbg_Trig_Ack_In[1:0]),
        .Dbg_Trig_Ack_Out(Dbg_Trig_Ack_Out[1:0]),
        .Dbg_Trig_In(Dbg_Trig_In[1:0]),
        .Dbg_Trig_Out(Dbg_Trig_Out[1:0]),
        .Dbg_Update(Dbg_Update),
        .Empty_reg(\Use_Statistics.Debug_Stat_I_n_26 ),
        .Empty_reg_0(\Use_Statistics.Debug_Stat_I_n_29 ),
        .Empty_reg_1(\Use_Statistics.Debug_Stat_I_n_32 ),
        .Empty_reg_10(Empty_i_1__4_n_0),
        .Empty_reg_2(\Use_Statistics.Debug_Stat_I_n_35 ),
        .Empty_reg_3(\Use_Statistics.Debug_Stat_I_n_38 ),
        .Empty_reg_4(\Use_Statistics.Debug_Stat_I_n_41 ),
        .Empty_reg_5(Empty_i_1_n_0),
        .Empty_reg_6(Empty_i_1__0_n_0),
        .Empty_reg_7(Empty_i_1__1_n_0),
        .Empty_reg_8(Empty_i_1__2_n_0),
        .Empty_reg_9(Empty_i_1__3_n_0),
        .\Gen_Access_Counter.Access_Overflow_reg[0] (\Use_Statistics.Debug_Stat_I_n_43 ),
        .\Gen_Access_Counter.c0_no_overflow_reg (\Gen_Access_Counter.c0_no_overflow_i_1_n_0 ),
        .\Gen_Access_Counter.c0_stop_valid_reg (\Gen_Access_Counter.c0_stop_valid_i_1_n_0 ),
        .Instr_Insert_Reg_En(Instr_Insert_Reg_En),
        .Is_Valid(\all_statistics_counters[0].Debug_Stat_Counter_i/Is_Valid ),
        .Is_Valid_1(\all_statistics_counters[1].Debug_Stat_Counter_i/Is_Valid ),
        .Is_Valid_3(\all_statistics_counters[2].Debug_Stat_Counter_i/Is_Valid ),
        .Is_Valid_5(\all_statistics_counters[3].Debug_Stat_Counter_i/Is_Valid ),
        .Is_Valid_7(\all_statistics_counters[4].Debug_Stat_Counter_i/Is_Valid ),
        .Is_Valid_9(\all_statistics_counters[5].Debug_Stat_Counter_i/Is_Valid ),
        .\Is_Valid_reg[0] (\Is_Valid[0]_i_1_n_0 ),
        .\Is_Valid_reg[0]_0 (\Is_Valid[0]_i_1__0_n_0 ),
        .\Is_Valid_reg[0]_1 (\Is_Valid[0]_i_1__1_n_0 ),
        .\Is_Valid_reg[0]_2 (\Is_Valid[0]_i_1__2_n_0 ),
        .\Is_Valid_reg[0]_3 (\Is_Valid[0]_i_1__3_n_0 ),
        .\Is_Valid_reg[0]_4 (\Is_Valid[0]_i_1__4_n_0 ),
        .Q({\Serial_Dbg_Intf.shift_count_reg_n_0_[4] ,A3,A2,A1,\Serial_Dbg_Intf.shift_count_reg_n_0_[0] }),
        .Running(\all_statistics_counters[0].Debug_Stat_Counter_i/Running ),
        .Running_0(\all_statistics_counters[1].Debug_Stat_Counter_i/Running ),
        .Running_2(\all_statistics_counters[2].Debug_Stat_Counter_i/Running ),
        .Running_4(\all_statistics_counters[3].Debug_Stat_Counter_i/Running ),
        .Running_6(\all_statistics_counters[4].Debug_Stat_Counter_i/Running ),
        .Running_8(\all_statistics_counters[5].Debug_Stat_Counter_i/Running ),
        .Scan_En(Scan_En),
        .Scan_Reset(Scan_Reset),
        .Scan_Reset_Sel(Scan_Reset_Sel),
        .\Serial_Dbg_Intf.clear_cmd_reg_rep_0 (\Serial_Dbg_Intf.clear_cmd_rep_i_1_n_0 ),
        .\Serial_Dbg_Intf.data_write_reg_reg[0]_0 ({shift_datain[0],shift_datain[1],shift_datain[2],shift_datain[3],shift_datain[4],shift_datain[5],shift_datain[6],shift_datain[7],shift_datain[8],shift_datain[9],shift_datain[10],shift_datain[11],shift_datain[12],shift_datain[13],shift_datain[14],shift_datain[15],shift_datain[16],shift_datain[17],shift_datain[18],shift_datain[19],shift_datain[20],shift_datain[21],shift_datain[22],shift_datain[23],shift_datain[24],shift_datain[25],shift_datain[26],shift_datain[27],shift_datain[28],shift_datain[29],shift_datain[30],shift_datain[31]}),
        .\Serial_Dbg_Intf.sample_synced_1_reg[0]_0 ({p_0_in_4,\Use_Statistics.Debug_Stat_I_n_89 ,\Use_Statistics.Debug_Stat_I_n_90 ,\Use_Statistics.Debug_Stat_I_n_91 ,\Use_Statistics.Debug_Stat_I_n_92 ,\Use_Statistics.Debug_Stat_I_n_93 ,\Use_Statistics.Debug_Stat_I_n_94 }),
        .Started_Pulse(Started_Pulse),
        .Stopped_Pulse(Stopped_Pulse),
        .Stopping_reg(\Use_Statistics.Debug_Stat_I_n_7 ),
        .\all_statistics_counters[0].ready_reg_0 (\all_statistics_counters[0].ready_reg ),
        .\all_statistics_counters[0].ready_reg_1 (\all_statistics_counters[0].ready_reg_0 ),
        .\all_statistics_counters[0].ready_reg_2 (\all_statistics_counters[0].ready_reg_1 ),
        .\all_statistics_counters[0].request_i_4_0 (\all_statistics_counters[0].request_i_4 ),
        .\all_statistics_counters[0].request_i_7_0 (\event_data_next_reg[12] ),
        .\all_statistics_counters[0].request_reg_i_3_0 (\all_statistics_counters[0].request_reg_i_3 ),
        .\all_statistics_counters[1].ready_reg_0 (\Use_Statistics.Debug_Stat_I_n_14 ),
        .\all_statistics_counters[1].request_reg_0 (\Use_Statistics.Debug_Stat_I_n_13 ),
        .\all_statistics_counters[1].request_reg_1 (\all_statistics_counters[1].request_reg ),
        .\all_statistics_counters[1].request_reg_2 (\all_statistics_counters[1].request_reg_0 ),
        .\all_statistics_counters[1].request_reg_3 (\all_statistics_counters[1].request_reg_1 ),
        .\all_statistics_counters[2].ready_reg_0 (\Use_Statistics.Debug_Stat_I_n_16 ),
        .\all_statistics_counters[2].ready_reg_1 (\all_statistics_counters[2].ready_reg ),
        .\all_statistics_counters[2].ready_reg_2 (\all_statistics_counters[2].ready_reg_0 ),
        .\all_statistics_counters[2].ready_reg_3 (\all_statistics_counters[2].ready_reg_1 ),
        .\all_statistics_counters[2].request_reg_0 (\Use_Statistics.Debug_Stat_I_n_15 ),
        .\all_statistics_counters[3].ready_reg_0 (\Use_Statistics.Debug_Stat_I_n_18 ),
        .\all_statistics_counters[3].ready_reg_1 (\all_statistics_counters[3].ready_reg ),
        .\all_statistics_counters[3].ready_reg_2 (\all_statistics_counters[3].ready_reg_0 ),
        .\all_statistics_counters[3].ready_reg_3 (\all_statistics_counters[3].ready_reg_1 ),
        .\all_statistics_counters[3].request_reg_0 (\Use_Statistics.Debug_Stat_I_n_17 ),
        .\all_statistics_counters[4].ready_reg_0 (\Use_Statistics.Debug_Stat_I_n_20 ),
        .\all_statistics_counters[4].ready_reg_1 (\all_statistics_counters[4].ready_reg ),
        .\all_statistics_counters[4].ready_reg_2 (\all_statistics_counters[4].ready_reg_0 ),
        .\all_statistics_counters[4].ready_reg_3 (\all_statistics_counters[4].ready_reg_1 ),
        .\all_statistics_counters[4].request_reg_0 (\Use_Statistics.Debug_Stat_I_n_19 ),
        .\all_statistics_counters[5].ready_reg_0 (\Use_Statistics.Debug_Stat_I_n_22 ),
        .\all_statistics_counters[5].ready_reg_1 (\all_statistics_counters[5].ready_reg ),
        .\all_statistics_counters[5].ready_reg_2 (\all_statistics_counters[5].ready_reg_0 ),
        .\all_statistics_counters[5].ready_reg_3 (\all_statistics_counters[5].ready_reg_1 ),
        .\all_statistics_counters[5].request_reg_0 (\Use_Statistics.Debug_Stat_I_n_21 ),
        .clear_cmd0(clear_cmd0),
        .cond_ds_branch(cond_ds_branch),
        .control_incr(control_incr),
        .control_incr0(control_incr0),
        .control_rst_reg_0(control_rst_i_1_n_0),
        .data_write(data_write),
        .data_write0(data_write0),
        .data_write_rst_reg_0(data_write_rst_i_1_n_0),
        .in_delay_slot(in_delay_slot),
        .in_delay_slot_reg_0(in_delay_slot_i_1_n_0),
        .inside_handler(inside_handler),
        .interrupt_1(interrupt_1),
        .interrupt_1_reg_0(interrupt_1_i_1_n_0),
        .new_arvalid0(new_arvalid0),
        .new_awvalid0(new_awvalid0),
        .new_bvalid0(new_bvalid0),
        .new_interrupt_reg_0(new_interrupt_i_1_n_0),
        .new_rvalid0(new_rvalid0),
        .p_1_in15_in(p_1_in15_in),
        .ready(ready),
        .request(request),
        .reset_cmd(reset_cmd),
        .reset_cmd0(reset_cmd0),
        .\sample_1_reg[0]_0 ({p_1_in44_in,p_1_in43_in,p_1_in42_in,\Use_Statistics.Debug_Stat_I_n_98 }),
        .\sample_1_reg[1]_0 (\sample_1_reg[1] ),
        .\sample_1_reg[2]_0 ({D[182:160],D[155:150],D[147:121],D[117],D[106],D[73:72],D[2:0]}),
        .\sample_2_reg[0]_0 ({sample_2[0],sample_2[1],sample_2[2],sample_2[3]}),
        .sample_cmd0(sample_cmd0),
        .start_cmd0(start_cmd0),
        .stat130_out(stat130_out),
        .stat2(stat2),
        .stat212_in(stat212_in),
        .stat2_out(stat2_out),
        .stat5_out(stat5_out),
        .stat_pause(stat_pause),
        .\stat_select_reg[0][2]_0 (Q),
        .\stat_select_reg[1][2]_0 (\stat_select_reg[1][2] ),
        .\stat_select_reg[2][2]_0 (\stat_select_reg[2][2] ),
        .\stat_select_reg[3][2]_0 (\stat_select_reg[3][2] ),
        .\stat_select_reg[4][2]_0 (\stat_select_reg[4][2] ),
        .\stat_select_reg[5][2]_0 (\stat_select_reg[5][2] ),
        .stat_stop(stat_stop),
        .stop_cmd0(stop_cmd0),
        .sync_reset(sync_reset),
        .trace_MB_Halted_i_reg_0(\Area_Debug_Control.mb_halted_i_reg_0 ),
        .\trace_instruction_i_reg[0] (\trace_instruction_i_reg[0] ),
        .\trace_instruction_i_reg[0]_0 (\trace_instruction_i_reg[0]_0 ),
        .\trace_instruction_i_reg[0]_1 (\trace_instruction_i_reg[0]_1 ),
        .\trace_instruction_i_reg[4] (\trace_instruction_i_reg[4] ),
        .\trace_pc_i_reg[17] (\trace_pc_i_reg[17] ),
        .\trace_pc_i_reg[1] (\trace_pc_i_reg[1] ),
        .\trace_pc_i_reg[24] (\trace_pc_i_reg[24] ),
        .\trace_pc_i_reg[9] (\trace_pc_i_reg[9] ),
        .uncond_ds_branch(uncond_ds_branch),
        .valid_instr(valid_instr));
  block_design_microblaze_0_0_Debug_Trace \Use_Trace.Debug_Trace_I 
       (.AR(config_reset_with_scan),
        .\Area_Debug_Control.Use_Trace.trace_halt_hold_reg (\Area_Debug_Control.Dbg_Inhibit_EX_FDRSE_n_3 ),
        .Clk(Clk),
        .D({sample_synced_7[0],sample_synced_7[1],sample_synced_7[2],sample_synced_7[3],sample_synced_7[5]}),
        .Dbg_Capture(Dbg_Capture),
        .Dbg_Clk(Dbg_Clk),
        .Dbg_Reg_En(Dbg_Reg_En),
        .Dbg_Reg_En_5_sp_1(\Use_Trace.Debug_Trace_I_n_23 ),
        .Dbg_Reg_En_7_sp_1(Dbg_Reg_En_7_sn_1),
        .Dbg_TDO_INST_0_i_11_0(Dbg_TDO_INST_0_i_24_n_0),
        .Dbg_TDO_INST_0_i_3(Dbg_TDO_INST_0_i_3),
        .Dbg_TDO_INST_0_i_40_0(Dbg_TDO_INST_0_i_67_n_0),
        .Dbg_Trig_Ack_In(Dbg_Trig_Ack_In[3:2]),
        .Dbg_Trig_Ack_Out(Dbg_Trig_Ack_Out[3:2]),
        .Dbg_Trig_In(Dbg_Trig_In[3:2]),
        .Dbg_Trig_Out(Dbg_Trig_Out[3:2]),
        .Dbg_Update(Dbg_Update),
        .E(\Embedded_Trace.rddata[0]_i_1_n_0 ),
        .\Embedded_Trace.Serial_Dbg_Intf.data_read_reg_cs_TCK_reg_0 (\Use_Trace.Debug_Trace_I_n_12 ),
        .\Embedded_Trace.Serial_Dbg_Intf.data_read_reg_cs_TCK_reg_1 (\Embedded_Trace.Serial_Dbg_Intf.data_read_reg_cs_TCK_i_1_n_0 ),
        .\Embedded_Trace.Serial_Dbg_Intf.data_read_reg_reg[0]_0 (\Use_Trace.Debug_Trace_I_n_28 ),
        .\Embedded_Trace.Serial_Dbg_Intf.sample_synced_1_reg_0 (\Use_Trace.Debug_Trace_I_n_6 ),
        .\Embedded_Trace.prev_wr_reg_0 (\Use_Trace.Debug_Trace_I_n_9 ),
        .\Embedded_Trace.trace_din_all_reg[80]_0 (D[180:1]),
        .Q({A3,A2,A1,\Serial_Dbg_Intf.shift_count_reg_n_0_[0] }),
        .S(\Use_Trace.Debug_Trace_I_n_22 ),
        .S_0(S_6),
        .\Serial_Dbg_Intf.control_reg_reg[0]_0 (\Use_Trace.Debug_Trace_I_n_36 ),
        .\Serial_Dbg_Intf.control_reg_reg[0]_1 ({shift_datain[10],shift_datain[26],shift_datain[27],shift_datain[28],shift_datain[29],shift_datain[30],shift_datain[31]}),
        .\Serial_Dbg_Intf.control_reg_reg[16]_0 ({compression_ctrl[0],compression_ctrl[1],\Serial_Dbg_Intf.control_reg_reg[20] }),
        .\Serial_Dbg_Intf.control_reg_reg[16]_1 (\Use_Trace.Debug_Trace_I_n_37 ),
        .\Serial_Dbg_Intf.control_reg_reg[19]_0 (\Use_Trace.Debug_Trace_I_n_42 ),
        .\Serial_Dbg_Intf.control_reg_reg[21]_0 (\Serial_Dbg_Intf.control_reg_reg[21] ),
        .\Serial_Dbg_Intf.control_reg_reg[21]_1 (\Serial_Dbg_Intf.control_reg_reg[21]_0 ),
        .\Serial_Dbg_Intf.normal_stop_cmd_i_reg (\Use_Trace.Debug_Trace_I_n_26 ),
        .\Serial_Dbg_Intf.sample_synced_1_reg[0]_0 ({\Use_Trace.Debug_Trace_I_n_43 ,\Use_Trace.Debug_Trace_I_n_44 ,\Use_Trace.Debug_Trace_I_n_45 ,\Use_Trace.Debug_Trace_I_n_46 ,p_1_in85_in}),
        .\Serial_Dbg_Intf.sample_synced_1_reg[4]_0 (\Use_Trace.Debug_Trace_I_n_40 ),
        .\Serial_Dbg_Intf.started_i_reg_0 (\Serial_Dbg_Intf.started_i_i_1_n_0 ),
        .\Serial_Dbg_Intf.stopped_i_reg_0 (\Use_Trace.Debug_Trace_I_n_13 ),
        .\Serial_Dbg_Intf.stopped_i_reg_1 (\Use_Trace.Debug_Trace_I_n_33 ),
        .\Serial_Dbg_Intf.stopped_i_reg_2 (\Serial_Dbg_Intf.stopped_i_i_1_n_0 ),
        .\Serial_Dbg_Intf.trig_in_1_pulse_reg (\Serial_Dbg_Intf.trig_in_1_pulse_reg_0 ),
        .Started_Pulse(Started_Pulse),
        .Stopped_Pulse(Stopped_Pulse),
        .\Synchronize.use_sync_reset.sync_reg[1] (trace_hit_i),
        .\Using_FPGA.Native (\Area_Debug_Control.force_stop_cmd_hold_reg_0 ),
        .\Using_FPGA.Native_0 (\Using_PC_Breakpoints.All_PC_Brks[0].Serial_Interface_1.address_hit_I_n_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_3 ),
        .\branch_count_reg[3]_0 (\branch_count_reg[3] ),
        .cc_overflow_reg_0(\Use_Trace.Debug_Trace_I_n_10 ),
        .cc_overflow_reg_1(cc_overflow_i_2_n_0),
        .clear_cmd0(clear_cmd0_0),
        .data_read_reg_cs0(data_read_reg_cs0),
        .\event_data_next_reg[12]_0 (\event_data_next_reg[12] ),
        .\event_data_reg[15]_0 (trig_in_0_pulse_reg_n_0),
        .\event_data_reg[7]_0 (\event_data_reg[7] ),
        .full_i(full_i),
        .last_item_reg_0(\Use_Trace.Debug_Trace_I_n_16 ),
        .last_item_reg_1(last_item_i_1_n_0),
        .mb_halted_1(mb_halted_1),
        .normal_stop_cmd_hold(normal_stop_cmd_hold),
        .normal_stop_cmd_i(normal_stop_cmd_i),
        .out(\Use_Trace.Debug_Trace_I_n_5 ),
        .p_0_in38_in(p_0_in38_in),
        .sample_cmd0(sample_cmd0_3),
        .save_event_next_reg_0(save_event_next_reg),
        .save_event_next_reg_1(save_event_next_reg_0),
        .save_pc_next(save_pc_next),
        .save_pc_next_next_reg_0(save_pc_next_next_reg),
        .save_pc_next_next_reg_1(save_pc_next_next_i_1_n_0),
        .save_pc_next_reg_0(save_pc_next_i_1_n_0),
        .\save_sel_reg[0][2]_0 (\save_sel_reg[0][2] ),
        .\save_sel_reg[0][2]_1 (\save_sel_reg[0][2]_0 ),
        .\saved_load_get_reg[31]_0 (\saved_load_get_reg[31] ),
        .\saved_pc_reg[31]_0 (E),
        .start_cmd0(start_cmd0_1),
        .started_i(started_i),
        .stop_cmd(stop_cmd),
        .stop_cmd0(stop_cmd0_2),
        .sync_reset(sync_reset),
        .trace_exception_taken_i_reg(\Use_Trace.Debug_Trace_I_n_41 ),
        .trace_halt_hold(trace_halt_hold),
        .trace_halt_hold0(trace_halt_hold0),
        .\trace_instruction_i_reg[16] (\trace_instruction_i_reg[16] ),
        .\trace_instruction_i_reg[2] (\trace_instruction_i_reg[2] ),
        .\trace_instruction_i_reg[2]_0 (\trace_instruction_i_reg[2]_0 ),
        .trig_in_0_pulse(trig_in_0_pulse),
        .trig_in_0_pulse_reg(\Area_Debug_Control.mb_halted_i_reg_0 ),
        .trig_in_1_pulse(trig_in_1_pulse),
        .\writems[0]_i_7_0 (\writems[0]_i_7 ),
        .\writems_reg[1]_0 (\writems_reg[1] ));
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.Native_i_1__117 
       (.I0(IReady),
        .I1(LOCKSTEP_Master_Out[35]),
        .O(IReady1_out));
  (* SOFT_HLUTNM = "soft_lutpair136" *) 
  LUT4 #(
    .INIT(16'h0002)) 
    \Using_FSL_Links.Using_Extended_FSL.FSL_Will_Break_No_Dbg_i_1 
       (.I0(FSL_Will_Break0),
        .I1(force_stop_cmd_hold),
        .I2(force_stop_cmd_i),
        .I3(sync_reset),
        .O(\Area_Debug_Control.force_stop_cmd_hold_reg_1 ));
  (* SOFT_HLUTNM = "soft_lutpair136" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \Using_FSL_Links.Using_Extended_FSL.FSL_Will_Break_i_3 
       (.I0(force_stop_cmd_hold),
        .I1(force_stop_cmd_i),
        .O(\Area_Debug_Control.force_stop_cmd_hold_reg_0 ));
  block_design_microblaze_0_0_address_hit \Using_PC_Breakpoints.All_PC_Brks[0].Serial_Interface_1.address_hit_I 
       (.\Area_Debug_Control.dbg_hit_i_1_reg[0] (\Use_Trace.Debug_Trace_I_n_36 ),
        .Dbg_Clk(Dbg_Clk),
        .Dbg_Reg_En(Dbg_Reg_En),
        .Dbg_TDI(Dbg_TDI),
        .PC_OF(PC_OF),
        .Q(\Serial_Dbg_Intf.control_reg_reg_n_0_[0] ),
        .S(S_6),
        .\Serial_Dbg_Intf.control_reg_reg[0] (\Using_PC_Breakpoints.All_PC_Brks[0].Serial_Interface_1.address_hit_I_n_0 ),
        .\Serial_Dbg_Intf.control_reg_reg[0]_0 (trace_hit_i),
        .single_Step_N(single_Step_N));
  LUT6 #(
    .INIT(64'hFFFFFFFFFE020000)) 
    cc_overflow_i_2
       (.I0(\Use_Trace.Debug_Trace_I_n_22 ),
        .I1(compression_ctrl[1]),
        .I2(compression_ctrl[0]),
        .I3(p_0_in38_in),
        .I4(started_i),
        .I5(\Use_Trace.Debug_Trace_I_n_10 ),
        .O(cc_overflow_i_2_n_0));
  LUT2 #(
    .INIT(4'hE)) 
    command_reg_clear_i_1
       (.I0(read_register_MSR_1_reg_0),
        .I1(read_register_PC_1_reg_n_0),
        .O(command_reg_clear_i_1_n_0));
  FDRE command_reg_clear_reg
       (.C(Clk),
        .CE(1'b1),
        .D(command_reg_clear_i_1_n_0),
        .Q(command_reg_clear),
        .R(sync_reset));
  (* SOFT_HLUTNM = "soft_lutpair143" *) 
  LUT3 #(
    .INIT(8'h02)) 
    control_rst_i_1
       (.I0(control_incr),
        .I1(reset_cmd),
        .I2(sync_reset),
        .O(control_rst_i_1_n_0));
  LUT5 #(
    .INIT(32'hABBBA888)) 
    \data_rd_reg[32]_i_1 
       (.I0(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_4 ),
        .I1(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_3 ),
        .I2(LOCKSTEP_Master_Out[35]),
        .I3(LOCKSTEP_Master_Out[34]),
        .I4(data_rd_reg[32]),
        .O(\data_rd_reg[32]_i_1_n_0 ));
  FDRE \data_rd_reg_reg[0] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_3 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_5 ),
        .Q(data_rd_reg[0]),
        .R(sync_reset));
  FDRE \data_rd_reg_reg[10] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_3 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_15 ),
        .Q(data_rd_reg[10]),
        .R(sync_reset));
  FDRE \data_rd_reg_reg[11] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_3 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_16 ),
        .Q(data_rd_reg[11]),
        .R(sync_reset));
  FDRE \data_rd_reg_reg[12] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_3 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_17 ),
        .Q(data_rd_reg[12]),
        .R(sync_reset));
  FDRE \data_rd_reg_reg[13] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_3 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_18 ),
        .Q(data_rd_reg[13]),
        .R(sync_reset));
  FDRE \data_rd_reg_reg[14] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_3 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_19 ),
        .Q(data_rd_reg[14]),
        .R(sync_reset));
  FDRE \data_rd_reg_reg[15] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_3 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_20 ),
        .Q(data_rd_reg[15]),
        .R(sync_reset));
  FDRE \data_rd_reg_reg[16] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_3 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_21 ),
        .Q(data_rd_reg[16]),
        .R(sync_reset));
  FDRE \data_rd_reg_reg[17] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_3 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_22 ),
        .Q(data_rd_reg[17]),
        .R(sync_reset));
  FDRE \data_rd_reg_reg[18] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_3 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_23 ),
        .Q(data_rd_reg[18]),
        .R(sync_reset));
  FDRE \data_rd_reg_reg[19] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_3 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_24 ),
        .Q(data_rd_reg[19]),
        .R(sync_reset));
  FDRE \data_rd_reg_reg[1] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_3 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_6 ),
        .Q(data_rd_reg[1]),
        .R(sync_reset));
  FDRE \data_rd_reg_reg[20] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_3 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_25 ),
        .Q(data_rd_reg[20]),
        .R(sync_reset));
  FDRE \data_rd_reg_reg[21] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_3 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_26 ),
        .Q(data_rd_reg[21]),
        .R(sync_reset));
  FDRE \data_rd_reg_reg[22] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_3 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_27 ),
        .Q(data_rd_reg[22]),
        .R(sync_reset));
  FDRE \data_rd_reg_reg[23] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_3 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_28 ),
        .Q(data_rd_reg[23]),
        .R(sync_reset));
  FDRE \data_rd_reg_reg[24] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_3 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_29 ),
        .Q(data_rd_reg[24]),
        .R(sync_reset));
  FDRE \data_rd_reg_reg[25] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_3 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_30 ),
        .Q(data_rd_reg[25]),
        .R(sync_reset));
  FDRE \data_rd_reg_reg[26] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_3 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_31 ),
        .Q(data_rd_reg[26]),
        .R(sync_reset));
  FDRE \data_rd_reg_reg[27] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_3 ),
        .D(\data_rd_reg_reg[27]_0 [3]),
        .Q(data_rd_reg[27]),
        .R(sync_reset));
  FDRE \data_rd_reg_reg[28] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_3 ),
        .D(\data_rd_reg_reg[27]_0 [2]),
        .Q(data_rd_reg[28]),
        .R(sync_reset));
  FDRE \data_rd_reg_reg[29] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_3 ),
        .D(\data_rd_reg_reg[27]_0 [1]),
        .Q(data_rd_reg[29]),
        .R(sync_reset));
  FDRE \data_rd_reg_reg[2] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_3 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_7 ),
        .Q(data_rd_reg[2]),
        .R(sync_reset));
  FDRE \data_rd_reg_reg[30] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_3 ),
        .D(\data_rd_reg_reg[27]_0 [0]),
        .Q(data_rd_reg[30]),
        .R(sync_reset));
  FDRE \data_rd_reg_reg[31] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_3 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_32 ),
        .Q(data_rd_reg[31]),
        .R(sync_reset));
  FDRE \data_rd_reg_reg[32] 
       (.C(Clk),
        .CE(1'b1),
        .D(\data_rd_reg[32]_i_1_n_0 ),
        .Q(data_rd_reg[32]),
        .R(sync_reset));
  FDRE \data_rd_reg_reg[3] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_3 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_8 ),
        .Q(data_rd_reg[3]),
        .R(sync_reset));
  FDRE \data_rd_reg_reg[4] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_3 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_9 ),
        .Q(data_rd_reg[4]),
        .R(sync_reset));
  FDRE \data_rd_reg_reg[5] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_3 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_10 ),
        .Q(data_rd_reg[5]),
        .R(sync_reset));
  FDRE \data_rd_reg_reg[6] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_3 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_11 ),
        .Q(data_rd_reg[6]),
        .R(sync_reset));
  FDRE \data_rd_reg_reg[7] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_3 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_12 ),
        .Q(data_rd_reg[7]),
        .R(sync_reset));
  FDRE \data_rd_reg_reg[8] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_3 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_13 ),
        .Q(data_rd_reg[8]),
        .R(sync_reset));
  FDRE \data_rd_reg_reg[9] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_3 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_14 ),
        .Q(data_rd_reg[9]),
        .R(sync_reset));
  (* SOFT_HLUTNM = "soft_lutpair143" *) 
  LUT3 #(
    .INIT(8'h02)) 
    data_write_rst_i_1
       (.I0(data_write),
        .I1(reset_cmd),
        .I2(sync_reset),
        .O(data_write_rst_i_1_n_0));
  FDRE dbg_continue_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Serial_Dbg_Intf.sync_dbg_wakeup_n_0 ),
        .Q(LOCKSTEP_Master_Out[32]),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'h44444444000F0000)) 
    dbg_halt_reset_mode_i_1
       (.I0(Reset_Mode[1]),
        .I1(Reset_Mode[0]),
        .I2(p_12_in),
        .I3(\Serial_Dbg_Intf.control_reg_reg_n_0_[0] ),
        .I4(dbg_halt_reset_mode_reg_n_0),
        .I5(sync_reset),
        .O(dbg_halt_reset_mode_i_1_n_0));
  FDRE dbg_halt_reset_mode_reg
       (.C(Clk),
        .CE(1'b1),
        .D(dbg_halt_reset_mode_i_1_n_0),
        .Q(dbg_halt_reset_mode_reg_n_0),
        .R(1'b0));
  FDRE dbg_pause_reg
       (.C(Clk),
        .CE(1'b1),
        .D(Pause),
        .Q(dbg_pause),
        .R(sync_reset));
  FDRE delay_slot_instr_reg
       (.C(Clk),
        .CE(OF_PipeRun),
        .D(branch_with_delay),
        .Q(delay_slot_instr_reg_0),
        .R(sync_reset));
  (* SOFT_HLUTNM = "soft_lutpair131" *) 
  LUT3 #(
    .INIT(8'h45)) 
    exception_i_2
       (.I0(force_stop_overrun),
        .I1(has_inhibit_EX),
        .I2(start_dbg_exec_reg_n_0),
        .O(exception_i_2_n_0));
  FDRE exception_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_33 ),
        .Q(instr_rd_reg[1]),
        .R(sync_reset));
  (* SOFT_HLUTNM = "soft_lutpair131" *) 
  LUT5 #(
    .INIT(32'h005D000C)) 
    executing_i_1
       (.I0(D[148]),
        .I1(start_dbg_exec_reg_n_0),
        .I2(has_inhibit_EX),
        .I3(force_stop_overrun),
        .I4(instr_rd_reg[0]),
        .O(executing_i_1_n_0));
  FDRE executing_reg
       (.C(Clk),
        .CE(1'b1),
        .D(executing_i_1_n_0),
        .Q(instr_rd_reg[0]),
        .R(sync_reset));
  LUT5 #(
    .INIT(32'hFFEF00E0)) 
    in_delay_slot_i_1
       (.I0(uncond_ds_branch),
        .I1(cond_ds_branch),
        .I2(valid_instr),
        .I3(\Area_Debug_Control.mb_halted_i_reg_0 ),
        .I4(in_delay_slot),
        .O(in_delay_slot_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair137" *) 
  LUT3 #(
    .INIT(8'h04)) 
    interrupt_1_i_1
       (.I0(inside_handler),
        .I1(Interrupt),
        .I2(sync_reset),
        .O(interrupt_1_i_1_n_0));
  LUT4 #(
    .INIT(16'hB0FF)) 
    last_item_i_1
       (.I0(save_pc_next),
        .I1(\Area_Debug_Control.mb_halted_i_reg_0 ),
        .I2(\Use_Trace.Debug_Trace_I_n_16 ),
        .I3(\event_data_next_reg[12] ),
        .O(last_item_i_1_n_0));
  FDRE mb_halted_1_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Area_Debug_Control.mb_halted_i_reg_0 ),
        .Q(mb_halted_1),
        .R(sync_reset));
  LUT2 #(
    .INIT(4'h2)) 
    new_arvalid_i_1
       (.I0(p_1_in44_in),
        .I1(sample_2[0]),
        .O(new_arvalid0));
  LUT2 #(
    .INIT(4'h2)) 
    new_awvalid_i_1
       (.I0(p_1_in42_in),
        .I1(sample_2[2]),
        .O(new_awvalid0));
  LUT2 #(
    .INIT(4'h2)) 
    new_bvalid_i_1
       (.I0(\Use_Statistics.Debug_Stat_I_n_98 ),
        .I1(sample_2[3]),
        .O(new_bvalid0));
  (* SOFT_HLUTNM = "soft_lutpair137" *) 
  LUT4 #(
    .INIT(16'h0010)) 
    new_interrupt_i_1
       (.I0(inside_handler),
        .I1(interrupt_1),
        .I2(Interrupt),
        .I3(sync_reset),
        .O(new_interrupt_i_1_n_0));
  LUT2 #(
    .INIT(4'h2)) 
    new_rvalid_i_1
       (.I0(p_1_in43_in),
        .I1(sample_2[1]),
        .O(new_rvalid0));
  FDRE read_register_MSR_1_reg
       (.C(Clk),
        .CE(1'b1),
        .D(read_register_MSR),
        .Q(read_register_MSR_1_reg_0),
        .R(sync_reset));
  FDRE read_register_PC_1_reg
       (.C(Clk),
        .CE(1'b1),
        .D(read_register_PC),
        .Q(read_register_PC_1_reg_n_0),
        .R(sync_reset));
  LUT4 #(
    .INIT(16'h0D08)) 
    running_clock_i_1
       (.I0(Scan_Reset_Sel),
        .I1(Scan_Reset),
        .I2(Scan_En),
        .I3(capture_1),
        .O(running_clock_rst));
  FDCE #(
    .INIT(1'b0)) 
    running_clock_reg
       (.C(Clk),
        .CE(1'b1),
        .CLR(running_clock_rst),
        .D(1'b1),
        .Q(running_clock));
  LUT6 #(
    .INIT(64'h8A888AFF8A888A00)) 
    save_pc_next_i_1
       (.I0(\Use_Trace.Debug_Trace_I_n_33 ),
        .I1(\Use_Trace.Debug_Trace_I_n_42 ),
        .I2(D[73]),
        .I3(\Use_Trace.Debug_Trace_I_n_37 ),
        .I4(\Use_Trace.Debug_Trace_I_n_41 ),
        .I5(save_pc_next),
        .O(save_pc_next_i_1_n_0));
  LUT4 #(
    .INIT(16'h80AA)) 
    save_pc_next_next_i_1
       (.I0(\Use_Trace.Debug_Trace_I_n_33 ),
        .I1(save_pc_next_next_reg),
        .I2(\event_data_next_reg[12] ),
        .I3(save_pc_next_next_reg_0),
        .O(save_pc_next_next_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair138" *) 
  LUT4 #(
    .INIT(16'h2F20)) 
    saved_reset_mode_dbg_halt_i_1
       (.I0(Reset_Mode[0]),
        .I1(Reset_Mode[1]),
        .I2(sync_reset),
        .I3(saved_reset_mode_dbg_halt),
        .O(saved_reset_mode_dbg_halt_i_1_n_0));
  FDRE saved_reset_mode_dbg_halt_reg
       (.C(Clk),
        .CE(1'b1),
        .D(saved_reset_mode_dbg_halt_i_1_n_0),
        .Q(saved_reset_mode_dbg_halt),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair138" *) 
  LUT4 #(
    .INIT(16'h2F20)) 
    saved_reset_mode_sleep_i_1
       (.I0(Reset_Mode[1]),
        .I1(Reset_Mode[0]),
        .I2(sync_reset),
        .I3(Sleep_Out),
        .O(saved_reset_mode_sleep_i_1_n_0));
  FDRE saved_reset_mode_sleep_reg
       (.C(Clk),
        .CE(1'b1),
        .D(saved_reset_mode_sleep_i_1_n_0),
        .Q(saved_reset_mode_sleep),
        .R(1'b0));
  LUT5 #(
    .INIT(32'hFDFFFD00)) 
    single_Step_N_i_1
       (.I0(start_single_step_reg_n_0),
        .I1(single_step_count[1]),
        .I2(single_step_count[0]),
        .I3(ok_To_Stop),
        .I4(single_Step_N),
        .O(single_Step_N_i_1_n_0));
  FDSE single_Step_N_reg
       (.C(Clk),
        .CE(1'b1),
        .D(single_Step_N_i_1_n_0),
        .Q(single_Step_N),
        .S(sync_reset));
  LUT5 #(
    .INIT(32'hAACF55C0)) 
    \single_step_count[0]_i_1 
       (.I0(single_step_count[1]),
        .I1(\Serial_Dbg_Intf.control_reg_reg_n_0_[4] ),
        .I2(start_single_cmd),
        .I3(ok_To_Stop),
        .I4(single_step_count[0]),
        .O(\single_step_count[0]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h0BF8)) 
    \single_step_count[1]_i_1 
       (.I0(\Serial_Dbg_Intf.control_reg_reg_n_0_[5] ),
        .I1(start_single_cmd),
        .I2(ok_To_Stop),
        .I3(single_step_count[1]),
        .O(\single_step_count[1]_i_1_n_0 ));
  FDRE \single_step_count_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\single_step_count[0]_i_1_n_0 ),
        .Q(single_step_count[0]),
        .R(sync_reset));
  FDRE \single_step_count_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\single_step_count[1]_i_1_n_0 ),
        .Q(single_step_count[1]),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'h888BBBBB88888888)) 
    sleep_reset_mode_i_1
       (.I0(sleep_reset_mode_i_2_n_0),
        .I1(sync_reset),
        .I2(out),
        .I3(Wakeup),
        .I4(saved_reset_mode_sleep),
        .I5(Sleep_Out),
        .O(sleep_reset_mode_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair139" *) 
  LUT2 #(
    .INIT(4'h2)) 
    sleep_reset_mode_i_2
       (.I0(Reset_Mode[1]),
        .I1(Reset_Mode[0]),
        .O(sleep_reset_mode_i_2_n_0));
  FDRE sleep_reset_mode_reg
       (.C(Clk),
        .CE(1'b1),
        .D(sleep_reset_mode_i_1_n_0),
        .Q(Sleep_Out),
        .R(1'b0));
  FDRE start_dbg_exec_reg
       (.C(Clk),
        .CE(1'b1),
        .D(LOCKSTEP_Master_Out[35]),
        .Q(start_dbg_exec_reg_n_0),
        .R(sync_reset));
  LUT5 #(
    .INIT(32'hEEE2EEEE)) 
    start_single_step_i_1
       (.I0(start_single_cmd),
        .I1(start_single_step_reg_n_0),
        .I2(single_step_count[1]),
        .I3(single_step_count[0]),
        .I4(ok_To_Stop),
        .O(start_single_step_i_1_n_0));
  FDRE start_single_step_reg
       (.C(Clk),
        .CE(1'b1),
        .D(start_single_step_i_1_n_0),
        .Q(start_single_step_reg_n_0),
        .R(sync_reset));
  block_design_microblaze_0_0_mb_sync_bit__parameterized4_30 sync_trig_ack_in_0
       (.Clk(Clk),
        .Dbg_Trig_Ack_In(Dbg_Trig_Ack_In[5]),
        .Dbg_Trig_In(Dbg_Trig_In[5]),
        .mb_halted_1(mb_halted_1),
        .sync_reset(sync_reset),
        .trig_ack_in_0_synced(trig_ack_in_0_synced),
        .trig_ack_in_0_synced_1(trig_ack_in_0_synced_1),
        .trig_ack_in_0_synced_1_reg(sync_trig_ack_in_0_n_1),
        .trig_in_0_reg(\Area_Debug_Control.mb_halted_i_reg_0 ));
  block_design_microblaze_0_0_mb_sync_bit__parameterized4_31 sync_trig_out_0
       (.Clk(Clk),
        .Dbg_Trig_Ack_Out(Dbg_Trig_Ack_Out[5]),
        .Dbg_Trig_Out(Dbg_Trig_Out[5]),
        .\Single_Synchronize.use_sync_reset.sync_reg_0 (sync_trig_out_0_n_1),
        .sync_reset(sync_reset),
        .trig_out_0_synced(trig_out_0_synced),
        .trig_out_0_synced_1(trig_out_0_synced_1));
  FDRE trig_ack_in_0_synced_1_reg
       (.C(Clk),
        .CE(1'b1),
        .D(trig_ack_in_0_synced),
        .Q(trig_ack_in_0_synced_1),
        .R(sync_reset));
  FDRE trig_in_0_pulse_reg
       (.C(Clk),
        .CE(1'b1),
        .D(trig_in_0_pulse),
        .Q(trig_in_0_pulse_reg_n_0),
        .R(sync_reset));
  FDRE trig_in_0_reg
       (.C(Clk),
        .CE(1'b1),
        .D(sync_trig_ack_in_0_n_1),
        .Q(Dbg_Trig_In[5]),
        .R(sync_reset));
endmodule

module block_design_microblaze_0_0_Debug_Stat
   (D,
    Stopping_reg,
    Dbg_Intr,
    Stopped_Pulse,
    Started_Pulse,
    reset_cmd,
    control_incr,
    \all_statistics_counters[1].request_reg_0 ,
    \all_statistics_counters[1].ready_reg_0 ,
    \all_statistics_counters[2].request_reg_0 ,
    \all_statistics_counters[2].ready_reg_0 ,
    \all_statistics_counters[3].request_reg_0 ,
    \all_statistics_counters[3].ready_reg_0 ,
    \all_statistics_counters[4].request_reg_0 ,
    \all_statistics_counters[4].ready_reg_0 ,
    \all_statistics_counters[5].request_reg_0 ,
    \all_statistics_counters[5].ready_reg_0 ,
    request,
    ready,
    data_write,
    Empty_reg,
    Running,
    Is_Valid,
    Empty_reg_0,
    Running_0,
    Is_Valid_1,
    Empty_reg_1,
    Running_2,
    Is_Valid_3,
    Empty_reg_2,
    Running_4,
    Is_Valid_5,
    Empty_reg_3,
    Running_6,
    Is_Valid_7,
    Empty_reg_4,
    Running_8,
    \Gen_Access_Counter.Access_Overflow_reg[0] ,
    Is_Valid_9,
    Dbg_Trig_Ack_Out,
    Dbg_Trig_In,
    interrupt_1,
    stat_pause,
    in_delay_slot,
    inside_handler,
    Dbg_Reg_En_3_sp_1,
    \Dbg_Reg_En[3]_0 ,
    Dbg_TDO,
    \stat_select_reg[0][2]_0 ,
    \stat_select_reg[5][2]_0 ,
    \stat_select_reg[4][2]_0 ,
    \stat_select_reg[3][2]_0 ,
    \stat_select_reg[2][2]_0 ,
    \stat_select_reg[1][2]_0 ,
    \trace_instruction_i_reg[0] ,
    \trace_instruction_i_reg[4] ,
    uncond_ds_branch,
    \trace_instruction_i_reg[0]_0 ,
    \trace_instruction_i_reg[0]_1 ,
    stat212_in,
    stat2,
    stat130_out,
    \trace_pc_i_reg[24] ,
    \trace_pc_i_reg[17] ,
    \trace_pc_i_reg[9] ,
    \trace_pc_i_reg[1] ,
    p_1_in15_in,
    cond_ds_branch,
    \Serial_Dbg_Intf.sample_synced_1_reg[0]_0 ,
    \sample_1_reg[0]_0 ,
    \sample_2_reg[0]_0 ,
    Clk,
    sync_reset,
    Dbg_Update,
    sample_cmd0,
    stop_cmd0,
    start_cmd0,
    reset_cmd0,
    control_incr0,
    new_awvalid0,
    new_arvalid0,
    new_bvalid0,
    new_rvalid0,
    \sample_1_reg[2]_0 ,
    trace_MB_Halted_i_reg_0,
    clear_cmd0,
    data_write0,
    Empty_reg_5,
    \Is_Valid_reg[0] ,
    Empty_reg_6,
    \Is_Valid_reg[0]_0 ,
    Empty_reg_7,
    \Is_Valid_reg[0]_1 ,
    Empty_reg_8,
    \Is_Valid_reg[0]_2 ,
    Empty_reg_9,
    \Is_Valid_reg[0]_3 ,
    Empty_reg_10,
    \Gen_Access_Counter.c0_no_overflow_reg ,
    \Is_Valid_reg[0]_4 ,
    \Gen_Access_Counter.c0_stop_valid_reg ,
    new_interrupt_reg_0,
    interrupt_1_reg_0,
    control_rst_reg_0,
    in_delay_slot_reg_0,
    data_write_rst_reg_0,
    \Serial_Dbg_Intf.clear_cmd_reg_rep_0 ,
    Dbg_Reg_En,
    Dbg_TDO_0,
    Q,
    Dbg_TDO_1,
    Dbg_Capture,
    Dbg_TDO_2,
    Dbg_TDO_3,
    Dbg_TDO_4,
    Dbg_TDO_5,
    Dbg_TDO_6,
    Instr_Insert_Reg_En,
    Dbg_TDO_7,
    valid_instr,
    \all_statistics_counters[0].request_i_7_0 ,
    \all_statistics_counters[0].ready_reg_0 ,
    \all_statistics_counters[0].ready_reg_1 ,
    \all_statistics_counters[5].ready_reg_1 ,
    \all_statistics_counters[5].ready_reg_2 ,
    \all_statistics_counters[4].ready_reg_1 ,
    \all_statistics_counters[4].ready_reg_2 ,
    \all_statistics_counters[3].ready_reg_1 ,
    \all_statistics_counters[3].ready_reg_2 ,
    \all_statistics_counters[2].ready_reg_1 ,
    \all_statistics_counters[2].ready_reg_2 ,
    stat_stop,
    \all_statistics_counters[1].request_reg_1 ,
    \all_statistics_counters[1].request_reg_2 ,
    \all_statistics_counters[0].request_i_4_0 ,
    \all_statistics_counters[0].ready_reg_2 ,
    \all_statistics_counters[5].ready_reg_3 ,
    \all_statistics_counters[4].ready_reg_3 ,
    \all_statistics_counters[3].ready_reg_3 ,
    \all_statistics_counters[2].ready_reg_3 ,
    \all_statistics_counters[1].request_reg_3 ,
    stat2_out,
    \all_statistics_counters[0].request_reg_i_3_0 ,
    stat5_out,
    \Serial_Dbg_Intf.data_write_reg_reg[0]_0 ,
    Dbg_Trig_Out,
    Dbg_Trig_Ack_In,
    Dbg_Clk,
    \sample_1_reg[1]_0 ,
    Scan_Reset_Sel,
    Scan_Reset,
    Scan_En);
  output [6:0]D;
  output Stopping_reg;
  output Dbg_Intr;
  output Stopped_Pulse;
  output Started_Pulse;
  output reset_cmd;
  output control_incr;
  output \all_statistics_counters[1].request_reg_0 ;
  output \all_statistics_counters[1].ready_reg_0 ;
  output \all_statistics_counters[2].request_reg_0 ;
  output \all_statistics_counters[2].ready_reg_0 ;
  output \all_statistics_counters[3].request_reg_0 ;
  output \all_statistics_counters[3].ready_reg_0 ;
  output \all_statistics_counters[4].request_reg_0 ;
  output \all_statistics_counters[4].ready_reg_0 ;
  output \all_statistics_counters[5].request_reg_0 ;
  output \all_statistics_counters[5].ready_reg_0 ;
  output request;
  output ready;
  output data_write;
  output Empty_reg;
  output Running;
  output Is_Valid;
  output Empty_reg_0;
  output Running_0;
  output Is_Valid_1;
  output Empty_reg_1;
  output Running_2;
  output Is_Valid_3;
  output Empty_reg_2;
  output Running_4;
  output Is_Valid_5;
  output Empty_reg_3;
  output Running_6;
  output Is_Valid_7;
  output Empty_reg_4;
  output Running_8;
  output \Gen_Access_Counter.Access_Overflow_reg[0] ;
  output Is_Valid_9;
  output [1:0]Dbg_Trig_Ack_Out;
  output [1:0]Dbg_Trig_In;
  output interrupt_1;
  output stat_pause;
  output in_delay_slot;
  output inside_handler;
  output Dbg_Reg_En_3_sp_1;
  output \Dbg_Reg_En[3]_0 ;
  output Dbg_TDO;
  output [2:0]\stat_select_reg[0][2]_0 ;
  output [2:0]\stat_select_reg[5][2]_0 ;
  output [2:0]\stat_select_reg[4][2]_0 ;
  output [2:0]\stat_select_reg[3][2]_0 ;
  output [2:0]\stat_select_reg[2][2]_0 ;
  output [2:0]\stat_select_reg[1][2]_0 ;
  output \trace_instruction_i_reg[0] ;
  output \trace_instruction_i_reg[4] ;
  output uncond_ds_branch;
  output \trace_instruction_i_reg[0]_0 ;
  output \trace_instruction_i_reg[0]_1 ;
  output stat212_in;
  output stat2;
  output stat130_out;
  output \trace_pc_i_reg[24] ;
  output \trace_pc_i_reg[17] ;
  output \trace_pc_i_reg[9] ;
  output \trace_pc_i_reg[1] ;
  output p_1_in15_in;
  output cond_ds_branch;
  output [6:0]\Serial_Dbg_Intf.sample_synced_1_reg[0]_0 ;
  output [3:0]\sample_1_reg[0]_0 ;
  output [3:0]\sample_2_reg[0]_0 ;
  input Clk;
  input sync_reset;
  input Dbg_Update;
  input sample_cmd0;
  input stop_cmd0;
  input start_cmd0;
  input reset_cmd0;
  input control_incr0;
  input new_awvalid0;
  input new_arvalid0;
  input new_bvalid0;
  input new_rvalid0;
  input [62:0]\sample_1_reg[2]_0 ;
  input trace_MB_Halted_i_reg_0;
  input clear_cmd0;
  input data_write0;
  input Empty_reg_5;
  input \Is_Valid_reg[0] ;
  input Empty_reg_6;
  input \Is_Valid_reg[0]_0 ;
  input Empty_reg_7;
  input \Is_Valid_reg[0]_1 ;
  input Empty_reg_8;
  input \Is_Valid_reg[0]_2 ;
  input Empty_reg_9;
  input \Is_Valid_reg[0]_3 ;
  input Empty_reg_10;
  input \Gen_Access_Counter.c0_no_overflow_reg ;
  input \Is_Valid_reg[0]_4 ;
  input \Gen_Access_Counter.c0_stop_valid_reg ;
  input new_interrupt_reg_0;
  input interrupt_1_reg_0;
  input control_rst_reg_0;
  input in_delay_slot_reg_0;
  input data_write_rst_reg_0;
  input \Serial_Dbg_Intf.clear_cmd_reg_rep_0 ;
  input [0:7]Dbg_Reg_En;
  input Dbg_TDO_0;
  input [4:0]Q;
  input Dbg_TDO_1;
  input Dbg_Capture;
  input Dbg_TDO_2;
  input Dbg_TDO_3;
  input Dbg_TDO_4;
  input Dbg_TDO_5;
  input Dbg_TDO_6;
  input Instr_Insert_Reg_En;
  input Dbg_TDO_7;
  input valid_instr;
  input \all_statistics_counters[0].request_i_7_0 ;
  input \all_statistics_counters[0].ready_reg_0 ;
  input \all_statistics_counters[0].ready_reg_1 ;
  input \all_statistics_counters[5].ready_reg_1 ;
  input \all_statistics_counters[5].ready_reg_2 ;
  input \all_statistics_counters[4].ready_reg_1 ;
  input \all_statistics_counters[4].ready_reg_2 ;
  input \all_statistics_counters[3].ready_reg_1 ;
  input \all_statistics_counters[3].ready_reg_2 ;
  input \all_statistics_counters[2].ready_reg_1 ;
  input \all_statistics_counters[2].ready_reg_2 ;
  input [0:0]stat_stop;
  input \all_statistics_counters[1].request_reg_1 ;
  input \all_statistics_counters[1].request_reg_2 ;
  input \all_statistics_counters[0].request_i_4_0 ;
  input \all_statistics_counters[0].ready_reg_2 ;
  input \all_statistics_counters[5].ready_reg_3 ;
  input \all_statistics_counters[4].ready_reg_3 ;
  input \all_statistics_counters[3].ready_reg_3 ;
  input \all_statistics_counters[2].ready_reg_3 ;
  input \all_statistics_counters[1].request_reg_3 ;
  input stat2_out;
  input \all_statistics_counters[0].request_reg_i_3_0 ;
  input stat5_out;
  input [31:0]\Serial_Dbg_Intf.data_write_reg_reg[0]_0 ;
  input [1:0]Dbg_Trig_Out;
  input [1:0]Dbg_Trig_Ack_In;
  input Dbg_Clk;
  input [1:0]\sample_1_reg[1]_0 ;
  input Scan_Reset_Sel;
  input Scan_Reset;
  input Scan_En;

  wire Clk;
  wire [6:0]D;
  wire Dbg_Capture;
  wire Dbg_Clk;
  wire Dbg_Intr;
  wire Dbg_Intr0__0;
  wire [0:7]Dbg_Reg_En;
  wire \Dbg_Reg_En[3]_0 ;
  wire Dbg_Reg_En_3_sn_1;
  wire Dbg_TDO;
  wire Dbg_TDO_0;
  wire Dbg_TDO_1;
  wire Dbg_TDO_2;
  wire Dbg_TDO_3;
  wire Dbg_TDO_4;
  wire Dbg_TDO_5;
  wire Dbg_TDO_6;
  wire Dbg_TDO_7;
  wire Dbg_TDO_INST_0_i_20_n_0;
  wire Dbg_TDO_INST_0_i_36_n_0;
  wire Dbg_TDO_INST_0_i_37_n_0;
  wire Dbg_TDO_INST_0_i_38_n_0;
  wire Dbg_TDO_INST_0_i_39_n_0;
  wire Dbg_TDO_INST_0_i_3_n_0;
  wire Dbg_TDO_INST_0_i_50_n_0;
  wire Dbg_TDO_INST_0_i_51_n_0;
  wire Dbg_TDO_INST_0_i_52_n_0;
  wire Dbg_TDO_INST_0_i_53_n_0;
  wire Dbg_TDO_INST_0_i_54_n_0;
  wire Dbg_TDO_INST_0_i_55_n_0;
  wire Dbg_TDO_INST_0_i_56_n_0;
  wire Dbg_TDO_INST_0_i_57_n_0;
  wire [1:0]Dbg_Trig_Ack_In;
  wire [1:0]Dbg_Trig_Ack_Out;
  wire [1:0]Dbg_Trig_In;
  wire [1:0]Dbg_Trig_Out;
  wire Dbg_Update;
  wire Empty_reg;
  wire Empty_reg_0;
  wire Empty_reg_1;
  wire Empty_reg_10;
  wire Empty_reg_2;
  wire Empty_reg_3;
  wire Empty_reg_4;
  wire Empty_reg_5;
  wire Empty_reg_6;
  wire Empty_reg_7;
  wire Empty_reg_8;
  wire Empty_reg_9;
  wire \Gen_Access_Counter.Access_Overflow_reg[0] ;
  wire \Gen_Access_Counter.c0_no_overflow_reg ;
  wire \Gen_Access_Counter.c0_stop_valid_reg ;
  wire Instr_Insert_Reg_En;
  wire Is_Valid;
  wire Is_Valid_1;
  wire Is_Valid_3;
  wire Is_Valid_5;
  wire Is_Valid_7;
  wire Is_Valid_9;
  wire \Is_Valid_reg[0] ;
  wire \Is_Valid_reg[0]_0 ;
  wire \Is_Valid_reg[0]_1 ;
  wire \Is_Valid_reg[0]_2 ;
  wire \Is_Valid_reg[0]_3 ;
  wire \Is_Valid_reg[0]_4 ;
  wire [4:0]Q;
  wire Running;
  wire Running_0;
  wire Running_2;
  wire Running_4;
  wire Running_6;
  wire Running_8;
  wire Scan_En;
  wire Scan_Reset;
  wire Scan_Reset_Sel;
  wire \Serial_Dbg_Intf.clear_cmd_reg_rep_0 ;
  wire \Serial_Dbg_Intf.clear_cmd_reg_rep_n_0 ;
  wire \Serial_Dbg_Intf.control_incr_TClk_i_3_n_0 ;
  wire \Serial_Dbg_Intf.control_reg_reg_n_0_[2] ;
  wire \Serial_Dbg_Intf.control_reg_reg_n_0_[3] ;
  wire \Serial_Dbg_Intf.control_reg_reg_n_0_[4] ;
  wire \Serial_Dbg_Intf.control_reg_reg_n_0_[5] ;
  wire \Serial_Dbg_Intf.control_reg_reg_n_0_[6] ;
  wire \Serial_Dbg_Intf.control_reg_reg_n_0_[7] ;
  wire \Serial_Dbg_Intf.data_read_reg[0]_i_2_n_0 ;
  wire \Serial_Dbg_Intf.data_read_reg[0]_i_3_n_0 ;
  wire \Serial_Dbg_Intf.data_read_reg[10]_i_2_n_0 ;
  wire \Serial_Dbg_Intf.data_read_reg[10]_i_3_n_0 ;
  wire \Serial_Dbg_Intf.data_read_reg[11]_i_2_n_0 ;
  wire \Serial_Dbg_Intf.data_read_reg[11]_i_3_n_0 ;
  wire \Serial_Dbg_Intf.data_read_reg[12]_i_2_n_0 ;
  wire \Serial_Dbg_Intf.data_read_reg[12]_i_3_n_0 ;
  wire \Serial_Dbg_Intf.data_read_reg[13]_i_2_n_0 ;
  wire \Serial_Dbg_Intf.data_read_reg[13]_i_3_n_0 ;
  wire \Serial_Dbg_Intf.data_read_reg[14]_i_2_n_0 ;
  wire \Serial_Dbg_Intf.data_read_reg[14]_i_3_n_0 ;
  wire \Serial_Dbg_Intf.data_read_reg[15]_i_2_n_0 ;
  wire \Serial_Dbg_Intf.data_read_reg[15]_i_3_n_0 ;
  wire \Serial_Dbg_Intf.data_read_reg[16]_i_2_n_0 ;
  wire \Serial_Dbg_Intf.data_read_reg[16]_i_3_n_0 ;
  wire \Serial_Dbg_Intf.data_read_reg[17]_i_2_n_0 ;
  wire \Serial_Dbg_Intf.data_read_reg[17]_i_3_n_0 ;
  wire \Serial_Dbg_Intf.data_read_reg[18]_i_2_n_0 ;
  wire \Serial_Dbg_Intf.data_read_reg[18]_i_3_n_0 ;
  wire \Serial_Dbg_Intf.data_read_reg[19]_i_2_n_0 ;
  wire \Serial_Dbg_Intf.data_read_reg[19]_i_3_n_0 ;
  wire \Serial_Dbg_Intf.data_read_reg[1]_i_2_n_0 ;
  wire \Serial_Dbg_Intf.data_read_reg[1]_i_3_n_0 ;
  wire \Serial_Dbg_Intf.data_read_reg[20]_i_2_n_0 ;
  wire \Serial_Dbg_Intf.data_read_reg[20]_i_3_n_0 ;
  wire \Serial_Dbg_Intf.data_read_reg[21]_i_2_n_0 ;
  wire \Serial_Dbg_Intf.data_read_reg[21]_i_3_n_0 ;
  wire \Serial_Dbg_Intf.data_read_reg[22]_i_2_n_0 ;
  wire \Serial_Dbg_Intf.data_read_reg[22]_i_3_n_0 ;
  wire \Serial_Dbg_Intf.data_read_reg[23]_i_2_n_0 ;
  wire \Serial_Dbg_Intf.data_read_reg[23]_i_3_n_0 ;
  wire \Serial_Dbg_Intf.data_read_reg[24]_i_2_n_0 ;
  wire \Serial_Dbg_Intf.data_read_reg[24]_i_3_n_0 ;
  wire \Serial_Dbg_Intf.data_read_reg[25]_i_2_n_0 ;
  wire \Serial_Dbg_Intf.data_read_reg[25]_i_3_n_0 ;
  wire \Serial_Dbg_Intf.data_read_reg[26]_i_2_n_0 ;
  wire \Serial_Dbg_Intf.data_read_reg[26]_i_3_n_0 ;
  wire \Serial_Dbg_Intf.data_read_reg[27]_i_2_n_0 ;
  wire \Serial_Dbg_Intf.data_read_reg[27]_i_3_n_0 ;
  wire \Serial_Dbg_Intf.data_read_reg[28]_i_2_n_0 ;
  wire \Serial_Dbg_Intf.data_read_reg[28]_i_3_n_0 ;
  wire \Serial_Dbg_Intf.data_read_reg[29]_i_2_n_0 ;
  wire \Serial_Dbg_Intf.data_read_reg[29]_i_3_n_0 ;
  wire \Serial_Dbg_Intf.data_read_reg[2]_i_2_n_0 ;
  wire \Serial_Dbg_Intf.data_read_reg[2]_i_3_n_0 ;
  wire \Serial_Dbg_Intf.data_read_reg[30]_i_2_n_0 ;
  wire \Serial_Dbg_Intf.data_read_reg[30]_i_3_n_0 ;
  wire \Serial_Dbg_Intf.data_read_reg[31]_i_2_n_0 ;
  wire \Serial_Dbg_Intf.data_read_reg[31]_i_3_n_0 ;
  wire \Serial_Dbg_Intf.data_read_reg[3]_i_2_n_0 ;
  wire \Serial_Dbg_Intf.data_read_reg[3]_i_3_n_0 ;
  wire \Serial_Dbg_Intf.data_read_reg[4]_i_2_n_0 ;
  wire \Serial_Dbg_Intf.data_read_reg[4]_i_3_n_0 ;
  wire \Serial_Dbg_Intf.data_read_reg[5]_i_2_n_0 ;
  wire \Serial_Dbg_Intf.data_read_reg[5]_i_3_n_0 ;
  wire \Serial_Dbg_Intf.data_read_reg[6]_i_2_n_0 ;
  wire \Serial_Dbg_Intf.data_read_reg[6]_i_3_n_0 ;
  wire \Serial_Dbg_Intf.data_read_reg[7]_i_2_n_0 ;
  wire \Serial_Dbg_Intf.data_read_reg[7]_i_3_n_0 ;
  wire \Serial_Dbg_Intf.data_read_reg[8]_i_2_n_0 ;
  wire \Serial_Dbg_Intf.data_read_reg[8]_i_3_n_0 ;
  wire \Serial_Dbg_Intf.data_read_reg[9]_i_2_n_0 ;
  wire \Serial_Dbg_Intf.data_read_reg[9]_i_3_n_0 ;
  wire \Serial_Dbg_Intf.data_read_select[0]_i_1_n_0 ;
  wire \Serial_Dbg_Intf.data_read_select[1]_i_1_n_0 ;
  wire \Serial_Dbg_Intf.data_read_select[2]_i_1_n_0 ;
  wire \Serial_Dbg_Intf.data_read_select[3]_i_2_n_0 ;
  wire [31:0]\Serial_Dbg_Intf.data_write_reg_reg[0]_0 ;
  wire [6:0]\Serial_Dbg_Intf.sample_synced_1_reg[0]_0 ;
  wire \Serial_Dbg_Intf.sample_synced_1_reg_n_0_[10] ;
  wire \Serial_Dbg_Intf.sample_synced_1_reg_n_0_[9] ;
  wire \Serial_Dbg_Intf.status_reg[0]_i_2_n_0 ;
  wire \Serial_Dbg_Intf.status_reg[1]_i_2_n_0 ;
  wire \Serial_Dbg_Intf.status_select[0]_i_1_n_0 ;
  wire \Serial_Dbg_Intf.status_select[1]_i_1_n_0 ;
  wire \Serial_Dbg_Intf.status_select[2]_i_2_n_0 ;
  wire \Serial_Dbg_Intf.sync_sample_n_11 ;
  wire \Serial_Dbg_Intf.sync_sample_n_14 ;
  wire \Serial_Dbg_Intf.sync_sample_n_15 ;
  wire \Serial_Dbg_Intf.sync_sample_n_16 ;
  wire \Serial_Dbg_Intf.sync_sample_n_17 ;
  wire Started_Pulse;
  wire Stopped_Pulse;
  wire Stopping_reg;
  wire TDO_Reg;
  wire [31:0]access_count;
  wire \all_statistics_counters[0].ready_i_1_n_0 ;
  wire \all_statistics_counters[0].ready_i_2_n_0 ;
  wire \all_statistics_counters[0].ready_reg_0 ;
  wire \all_statistics_counters[0].ready_reg_1 ;
  wire \all_statistics_counters[0].ready_reg_2 ;
  wire \all_statistics_counters[0].request_i_12_n_0 ;
  wire \all_statistics_counters[0].request_i_13_n_0 ;
  wire \all_statistics_counters[0].request_i_1_n_0 ;
  wire \all_statistics_counters[0].request_i_2_n_0 ;
  wire \all_statistics_counters[0].request_i_4_0 ;
  wire \all_statistics_counters[0].request_i_4_n_0 ;
  wire \all_statistics_counters[0].request_i_6_n_0 ;
  wire \all_statistics_counters[0].request_i_7_0 ;
  wire \all_statistics_counters[0].request_i_7_n_0 ;
  wire \all_statistics_counters[0].request_i_9_n_0 ;
  wire \all_statistics_counters[0].request_reg_i_3_0 ;
  wire \all_statistics_counters[0].request_reg_i_3_n_0 ;
  wire \all_statistics_counters[1].Debug_Stat_Counter_i_n_10 ;
  wire \all_statistics_counters[1].Debug_Stat_Counter_i_n_11 ;
  wire \all_statistics_counters[1].Debug_Stat_Counter_i_n_12 ;
  wire \all_statistics_counters[1].Debug_Stat_Counter_i_n_13 ;
  wire \all_statistics_counters[1].Debug_Stat_Counter_i_n_14 ;
  wire \all_statistics_counters[1].Debug_Stat_Counter_i_n_15 ;
  wire \all_statistics_counters[1].Debug_Stat_Counter_i_n_16 ;
  wire \all_statistics_counters[1].Debug_Stat_Counter_i_n_17 ;
  wire \all_statistics_counters[1].Debug_Stat_Counter_i_n_18 ;
  wire \all_statistics_counters[1].Debug_Stat_Counter_i_n_19 ;
  wire \all_statistics_counters[1].Debug_Stat_Counter_i_n_2 ;
  wire \all_statistics_counters[1].Debug_Stat_Counter_i_n_20 ;
  wire \all_statistics_counters[1].Debug_Stat_Counter_i_n_21 ;
  wire \all_statistics_counters[1].Debug_Stat_Counter_i_n_22 ;
  wire \all_statistics_counters[1].Debug_Stat_Counter_i_n_23 ;
  wire \all_statistics_counters[1].Debug_Stat_Counter_i_n_24 ;
  wire \all_statistics_counters[1].Debug_Stat_Counter_i_n_25 ;
  wire \all_statistics_counters[1].Debug_Stat_Counter_i_n_26 ;
  wire \all_statistics_counters[1].Debug_Stat_Counter_i_n_27 ;
  wire \all_statistics_counters[1].Debug_Stat_Counter_i_n_28 ;
  wire \all_statistics_counters[1].Debug_Stat_Counter_i_n_29 ;
  wire \all_statistics_counters[1].Debug_Stat_Counter_i_n_3 ;
  wire \all_statistics_counters[1].Debug_Stat_Counter_i_n_30 ;
  wire \all_statistics_counters[1].Debug_Stat_Counter_i_n_31 ;
  wire \all_statistics_counters[1].Debug_Stat_Counter_i_n_32 ;
  wire \all_statistics_counters[1].Debug_Stat_Counter_i_n_33 ;
  wire \all_statistics_counters[1].Debug_Stat_Counter_i_n_34 ;
  wire \all_statistics_counters[1].Debug_Stat_Counter_i_n_35 ;
  wire \all_statistics_counters[1].Debug_Stat_Counter_i_n_36 ;
  wire \all_statistics_counters[1].Debug_Stat_Counter_i_n_5 ;
  wire \all_statistics_counters[1].Debug_Stat_Counter_i_n_6 ;
  wire \all_statistics_counters[1].Debug_Stat_Counter_i_n_7 ;
  wire \all_statistics_counters[1].Debug_Stat_Counter_i_n_8 ;
  wire \all_statistics_counters[1].Debug_Stat_Counter_i_n_9 ;
  wire \all_statistics_counters[1].ready_i_1_n_0 ;
  wire \all_statistics_counters[1].ready_i_2_n_0 ;
  wire \all_statistics_counters[1].ready_reg_0 ;
  wire \all_statistics_counters[1].request_i_16_n_0 ;
  wire \all_statistics_counters[1].request_i_18_n_0 ;
  wire \all_statistics_counters[1].request_i_1_n_0 ;
  wire \all_statistics_counters[1].request_i_2_n_0 ;
  wire \all_statistics_counters[1].request_i_4_n_0 ;
  wire \all_statistics_counters[1].request_i_50_n_0 ;
  wire \all_statistics_counters[1].request_i_6_n_0 ;
  wire \all_statistics_counters[1].request_i_7_n_0 ;
  wire \all_statistics_counters[1].request_i_9_n_0 ;
  wire \all_statistics_counters[1].request_reg_0 ;
  wire \all_statistics_counters[1].request_reg_1 ;
  wire \all_statistics_counters[1].request_reg_2 ;
  wire \all_statistics_counters[1].request_reg_3 ;
  wire \all_statistics_counters[1].request_reg_i_3_n_0 ;
  wire \all_statistics_counters[2].Debug_Stat_Counter_i_n_10 ;
  wire \all_statistics_counters[2].Debug_Stat_Counter_i_n_11 ;
  wire \all_statistics_counters[2].Debug_Stat_Counter_i_n_12 ;
  wire \all_statistics_counters[2].Debug_Stat_Counter_i_n_13 ;
  wire \all_statistics_counters[2].Debug_Stat_Counter_i_n_14 ;
  wire \all_statistics_counters[2].Debug_Stat_Counter_i_n_15 ;
  wire \all_statistics_counters[2].Debug_Stat_Counter_i_n_16 ;
  wire \all_statistics_counters[2].Debug_Stat_Counter_i_n_17 ;
  wire \all_statistics_counters[2].Debug_Stat_Counter_i_n_18 ;
  wire \all_statistics_counters[2].Debug_Stat_Counter_i_n_19 ;
  wire \all_statistics_counters[2].Debug_Stat_Counter_i_n_2 ;
  wire \all_statistics_counters[2].Debug_Stat_Counter_i_n_20 ;
  wire \all_statistics_counters[2].Debug_Stat_Counter_i_n_21 ;
  wire \all_statistics_counters[2].Debug_Stat_Counter_i_n_22 ;
  wire \all_statistics_counters[2].Debug_Stat_Counter_i_n_23 ;
  wire \all_statistics_counters[2].Debug_Stat_Counter_i_n_24 ;
  wire \all_statistics_counters[2].Debug_Stat_Counter_i_n_25 ;
  wire \all_statistics_counters[2].Debug_Stat_Counter_i_n_26 ;
  wire \all_statistics_counters[2].Debug_Stat_Counter_i_n_27 ;
  wire \all_statistics_counters[2].Debug_Stat_Counter_i_n_28 ;
  wire \all_statistics_counters[2].Debug_Stat_Counter_i_n_29 ;
  wire \all_statistics_counters[2].Debug_Stat_Counter_i_n_3 ;
  wire \all_statistics_counters[2].Debug_Stat_Counter_i_n_30 ;
  wire \all_statistics_counters[2].Debug_Stat_Counter_i_n_31 ;
  wire \all_statistics_counters[2].Debug_Stat_Counter_i_n_32 ;
  wire \all_statistics_counters[2].Debug_Stat_Counter_i_n_33 ;
  wire \all_statistics_counters[2].Debug_Stat_Counter_i_n_34 ;
  wire \all_statistics_counters[2].Debug_Stat_Counter_i_n_35 ;
  wire \all_statistics_counters[2].Debug_Stat_Counter_i_n_36 ;
  wire \all_statistics_counters[2].Debug_Stat_Counter_i_n_5 ;
  wire \all_statistics_counters[2].Debug_Stat_Counter_i_n_6 ;
  wire \all_statistics_counters[2].Debug_Stat_Counter_i_n_7 ;
  wire \all_statistics_counters[2].Debug_Stat_Counter_i_n_8 ;
  wire \all_statistics_counters[2].Debug_Stat_Counter_i_n_9 ;
  wire \all_statistics_counters[2].ready_i_1_n_0 ;
  wire \all_statistics_counters[2].ready_i_2_n_0 ;
  wire \all_statistics_counters[2].ready_reg_0 ;
  wire \all_statistics_counters[2].ready_reg_1 ;
  wire \all_statistics_counters[2].ready_reg_2 ;
  wire \all_statistics_counters[2].ready_reg_3 ;
  wire \all_statistics_counters[2].request_i_12_n_0 ;
  wire \all_statistics_counters[2].request_i_13_n_0 ;
  wire \all_statistics_counters[2].request_i_1_n_0 ;
  wire \all_statistics_counters[2].request_i_2_n_0 ;
  wire \all_statistics_counters[2].request_i_4_n_0 ;
  wire \all_statistics_counters[2].request_i_6_n_0 ;
  wire \all_statistics_counters[2].request_i_7_n_0 ;
  wire \all_statistics_counters[2].request_i_9_n_0 ;
  wire \all_statistics_counters[2].request_reg_0 ;
  wire \all_statistics_counters[2].request_reg_i_3_n_0 ;
  wire \all_statistics_counters[3].Debug_Stat_Counter_i_n_10 ;
  wire \all_statistics_counters[3].Debug_Stat_Counter_i_n_11 ;
  wire \all_statistics_counters[3].Debug_Stat_Counter_i_n_12 ;
  wire \all_statistics_counters[3].Debug_Stat_Counter_i_n_13 ;
  wire \all_statistics_counters[3].Debug_Stat_Counter_i_n_14 ;
  wire \all_statistics_counters[3].Debug_Stat_Counter_i_n_15 ;
  wire \all_statistics_counters[3].Debug_Stat_Counter_i_n_16 ;
  wire \all_statistics_counters[3].Debug_Stat_Counter_i_n_17 ;
  wire \all_statistics_counters[3].Debug_Stat_Counter_i_n_18 ;
  wire \all_statistics_counters[3].Debug_Stat_Counter_i_n_19 ;
  wire \all_statistics_counters[3].Debug_Stat_Counter_i_n_2 ;
  wire \all_statistics_counters[3].Debug_Stat_Counter_i_n_20 ;
  wire \all_statistics_counters[3].Debug_Stat_Counter_i_n_21 ;
  wire \all_statistics_counters[3].Debug_Stat_Counter_i_n_22 ;
  wire \all_statistics_counters[3].Debug_Stat_Counter_i_n_23 ;
  wire \all_statistics_counters[3].Debug_Stat_Counter_i_n_24 ;
  wire \all_statistics_counters[3].Debug_Stat_Counter_i_n_25 ;
  wire \all_statistics_counters[3].Debug_Stat_Counter_i_n_26 ;
  wire \all_statistics_counters[3].Debug_Stat_Counter_i_n_27 ;
  wire \all_statistics_counters[3].Debug_Stat_Counter_i_n_28 ;
  wire \all_statistics_counters[3].Debug_Stat_Counter_i_n_29 ;
  wire \all_statistics_counters[3].Debug_Stat_Counter_i_n_3 ;
  wire \all_statistics_counters[3].Debug_Stat_Counter_i_n_30 ;
  wire \all_statistics_counters[3].Debug_Stat_Counter_i_n_31 ;
  wire \all_statistics_counters[3].Debug_Stat_Counter_i_n_32 ;
  wire \all_statistics_counters[3].Debug_Stat_Counter_i_n_33 ;
  wire \all_statistics_counters[3].Debug_Stat_Counter_i_n_34 ;
  wire \all_statistics_counters[3].Debug_Stat_Counter_i_n_35 ;
  wire \all_statistics_counters[3].Debug_Stat_Counter_i_n_36 ;
  wire \all_statistics_counters[3].Debug_Stat_Counter_i_n_5 ;
  wire \all_statistics_counters[3].Debug_Stat_Counter_i_n_6 ;
  wire \all_statistics_counters[3].Debug_Stat_Counter_i_n_7 ;
  wire \all_statistics_counters[3].Debug_Stat_Counter_i_n_8 ;
  wire \all_statistics_counters[3].Debug_Stat_Counter_i_n_9 ;
  wire \all_statistics_counters[3].ready_i_1_n_0 ;
  wire \all_statistics_counters[3].ready_i_2_n_0 ;
  wire \all_statistics_counters[3].ready_reg_0 ;
  wire \all_statistics_counters[3].ready_reg_1 ;
  wire \all_statistics_counters[3].ready_reg_2 ;
  wire \all_statistics_counters[3].ready_reg_3 ;
  wire \all_statistics_counters[3].request_i_12_n_0 ;
  wire \all_statistics_counters[3].request_i_13_n_0 ;
  wire \all_statistics_counters[3].request_i_1_n_0 ;
  wire \all_statistics_counters[3].request_i_2_n_0 ;
  wire \all_statistics_counters[3].request_i_4_n_0 ;
  wire \all_statistics_counters[3].request_i_6_n_0 ;
  wire \all_statistics_counters[3].request_i_7_n_0 ;
  wire \all_statistics_counters[3].request_i_9_n_0 ;
  wire \all_statistics_counters[3].request_reg_0 ;
  wire \all_statistics_counters[3].request_reg_i_3_n_0 ;
  wire \all_statistics_counters[4].Debug_Stat_Counter_i_n_10 ;
  wire \all_statistics_counters[4].Debug_Stat_Counter_i_n_11 ;
  wire \all_statistics_counters[4].Debug_Stat_Counter_i_n_12 ;
  wire \all_statistics_counters[4].Debug_Stat_Counter_i_n_13 ;
  wire \all_statistics_counters[4].Debug_Stat_Counter_i_n_14 ;
  wire \all_statistics_counters[4].Debug_Stat_Counter_i_n_15 ;
  wire \all_statistics_counters[4].Debug_Stat_Counter_i_n_16 ;
  wire \all_statistics_counters[4].Debug_Stat_Counter_i_n_17 ;
  wire \all_statistics_counters[4].Debug_Stat_Counter_i_n_18 ;
  wire \all_statistics_counters[4].Debug_Stat_Counter_i_n_19 ;
  wire \all_statistics_counters[4].Debug_Stat_Counter_i_n_2 ;
  wire \all_statistics_counters[4].Debug_Stat_Counter_i_n_20 ;
  wire \all_statistics_counters[4].Debug_Stat_Counter_i_n_21 ;
  wire \all_statistics_counters[4].Debug_Stat_Counter_i_n_22 ;
  wire \all_statistics_counters[4].Debug_Stat_Counter_i_n_23 ;
  wire \all_statistics_counters[4].Debug_Stat_Counter_i_n_24 ;
  wire \all_statistics_counters[4].Debug_Stat_Counter_i_n_25 ;
  wire \all_statistics_counters[4].Debug_Stat_Counter_i_n_26 ;
  wire \all_statistics_counters[4].Debug_Stat_Counter_i_n_27 ;
  wire \all_statistics_counters[4].Debug_Stat_Counter_i_n_28 ;
  wire \all_statistics_counters[4].Debug_Stat_Counter_i_n_29 ;
  wire \all_statistics_counters[4].Debug_Stat_Counter_i_n_3 ;
  wire \all_statistics_counters[4].Debug_Stat_Counter_i_n_30 ;
  wire \all_statistics_counters[4].Debug_Stat_Counter_i_n_31 ;
  wire \all_statistics_counters[4].Debug_Stat_Counter_i_n_32 ;
  wire \all_statistics_counters[4].Debug_Stat_Counter_i_n_33 ;
  wire \all_statistics_counters[4].Debug_Stat_Counter_i_n_34 ;
  wire \all_statistics_counters[4].Debug_Stat_Counter_i_n_35 ;
  wire \all_statistics_counters[4].Debug_Stat_Counter_i_n_36 ;
  wire \all_statistics_counters[4].Debug_Stat_Counter_i_n_5 ;
  wire \all_statistics_counters[4].Debug_Stat_Counter_i_n_6 ;
  wire \all_statistics_counters[4].Debug_Stat_Counter_i_n_7 ;
  wire \all_statistics_counters[4].Debug_Stat_Counter_i_n_8 ;
  wire \all_statistics_counters[4].Debug_Stat_Counter_i_n_9 ;
  wire \all_statistics_counters[4].ready_i_1_n_0 ;
  wire \all_statistics_counters[4].ready_i_2_n_0 ;
  wire \all_statistics_counters[4].ready_reg_0 ;
  wire \all_statistics_counters[4].ready_reg_1 ;
  wire \all_statistics_counters[4].ready_reg_2 ;
  wire \all_statistics_counters[4].ready_reg_3 ;
  wire \all_statistics_counters[4].request_i_12_n_0 ;
  wire \all_statistics_counters[4].request_i_13_n_0 ;
  wire \all_statistics_counters[4].request_i_1_n_0 ;
  wire \all_statistics_counters[4].request_i_2_n_0 ;
  wire \all_statistics_counters[4].request_i_4_n_0 ;
  wire \all_statistics_counters[4].request_i_6_n_0 ;
  wire \all_statistics_counters[4].request_i_7_n_0 ;
  wire \all_statistics_counters[4].request_i_9_n_0 ;
  wire \all_statistics_counters[4].request_reg_0 ;
  wire \all_statistics_counters[4].request_reg_i_3_n_0 ;
  wire \all_statistics_counters[5].Debug_Stat_Counter_i_n_10 ;
  wire \all_statistics_counters[5].Debug_Stat_Counter_i_n_11 ;
  wire \all_statistics_counters[5].Debug_Stat_Counter_i_n_12 ;
  wire \all_statistics_counters[5].Debug_Stat_Counter_i_n_13 ;
  wire \all_statistics_counters[5].Debug_Stat_Counter_i_n_14 ;
  wire \all_statistics_counters[5].Debug_Stat_Counter_i_n_15 ;
  wire \all_statistics_counters[5].Debug_Stat_Counter_i_n_16 ;
  wire \all_statistics_counters[5].Debug_Stat_Counter_i_n_17 ;
  wire \all_statistics_counters[5].Debug_Stat_Counter_i_n_18 ;
  wire \all_statistics_counters[5].Debug_Stat_Counter_i_n_19 ;
  wire \all_statistics_counters[5].Debug_Stat_Counter_i_n_20 ;
  wire \all_statistics_counters[5].Debug_Stat_Counter_i_n_21 ;
  wire \all_statistics_counters[5].Debug_Stat_Counter_i_n_22 ;
  wire \all_statistics_counters[5].Debug_Stat_Counter_i_n_23 ;
  wire \all_statistics_counters[5].Debug_Stat_Counter_i_n_24 ;
  wire \all_statistics_counters[5].Debug_Stat_Counter_i_n_25 ;
  wire \all_statistics_counters[5].Debug_Stat_Counter_i_n_26 ;
  wire \all_statistics_counters[5].Debug_Stat_Counter_i_n_27 ;
  wire \all_statistics_counters[5].Debug_Stat_Counter_i_n_28 ;
  wire \all_statistics_counters[5].Debug_Stat_Counter_i_n_29 ;
  wire \all_statistics_counters[5].Debug_Stat_Counter_i_n_30 ;
  wire \all_statistics_counters[5].Debug_Stat_Counter_i_n_31 ;
  wire \all_statistics_counters[5].Debug_Stat_Counter_i_n_32 ;
  wire \all_statistics_counters[5].Debug_Stat_Counter_i_n_33 ;
  wire \all_statistics_counters[5].Debug_Stat_Counter_i_n_34 ;
  wire \all_statistics_counters[5].Debug_Stat_Counter_i_n_35 ;
  wire \all_statistics_counters[5].Debug_Stat_Counter_i_n_36 ;
  wire \all_statistics_counters[5].Debug_Stat_Counter_i_n_5 ;
  wire \all_statistics_counters[5].Debug_Stat_Counter_i_n_6 ;
  wire \all_statistics_counters[5].Debug_Stat_Counter_i_n_69 ;
  wire \all_statistics_counters[5].Debug_Stat_Counter_i_n_7 ;
  wire \all_statistics_counters[5].Debug_Stat_Counter_i_n_70 ;
  wire \all_statistics_counters[5].Debug_Stat_Counter_i_n_8 ;
  wire \all_statistics_counters[5].Debug_Stat_Counter_i_n_9 ;
  wire \all_statistics_counters[5].ready_i_1_n_0 ;
  wire \all_statistics_counters[5].ready_i_2_n_0 ;
  wire \all_statistics_counters[5].ready_reg_0 ;
  wire \all_statistics_counters[5].ready_reg_1 ;
  wire \all_statistics_counters[5].ready_reg_2 ;
  wire \all_statistics_counters[5].ready_reg_3 ;
  wire \all_statistics_counters[5].request_i_12_n_0 ;
  wire \all_statistics_counters[5].request_i_13_n_0 ;
  wire \all_statistics_counters[5].request_i_1_n_0 ;
  wire \all_statistics_counters[5].request_i_2_n_0 ;
  wire \all_statistics_counters[5].request_i_4_n_0 ;
  wire \all_statistics_counters[5].request_i_6_n_0 ;
  wire \all_statistics_counters[5].request_i_7_n_0 ;
  wire \all_statistics_counters[5].request_i_9_n_0 ;
  wire \all_statistics_counters[5].request_reg_0 ;
  wire \all_statistics_counters[5].request_reg_i_3_n_0 ;
  wire any_cmd;
  wire any_cmd0;
  wire clear_cmd;
  wire clear_cmd0;
  wire command_Reg_En;
  wire [0:4]command_reg;
  wire command_reg_clear;
  wire command_reg_rst;
  wire cond_ds_branch;
  wire control_Reg_En;
  wire control_incr;
  wire control_incr0;
  wire control_incr_TClk;
  wire control_reg_rst;
  wire control_rst;
  wire control_rst_reg_0;
  wire [2:0]control_select;
  wire \control_select[0]_i_1_n_0 ;
  wire \control_select[1]_i_1_n_0 ;
  wire \control_select[2]_i_1_n_0 ;
  wire [31:0]cycle_count;
  wire [31:0]cycle_count_2;
  wire data_Write_Reg_En;
  wire [0:31]data_read_reg;
  wire data_read_reg0;
  wire [3:0]data_read_select;
  wire [0:31]\data_sample_reg[0]_23 ;
  wire [31:0]\data_sample_reg_reg[0]_0 ;
  wire [31:0]\data_sample_reg_reg[1]_1 ;
  wire [31:0]\data_sample_reg_reg[2]_2 ;
  wire [31:0]\data_sample_reg_reg[3]_3 ;
  wire [31:0]\data_sample_reg_reg[4]_4 ;
  wire [31:0]\data_sample_reg_reg[5]_5 ;
  wire [31:0]\data_sample_reg_reg[6]_6 ;
  wire [31:0]\data_sample_reg_reg[7]_7 ;
  wire [31:0]\data_sample_reg_reg[8]_8 ;
  wire data_write;
  wire data_write0;
  wire data_write_TClk;
  wire [0:31]data_write_reg;
  wire data_write_reg_rst;
  wire data_write_rst_reg_0;
  wire data_write_rst_reg_n_0;
  wire data_write_select;
  wire \data_write_select[0]_i_1_n_0 ;
  wire \data_write_select[1]_i_1_n_0 ;
  wire \data_write_select[2]_i_1_n_0 ;
  wire \data_write_select[3]_i_2_n_0 ;
  wire \data_write_select_reg_n_0_[0] ;
  wire \data_write_select_reg_n_0_[1] ;
  wire \data_write_select_reg_n_0_[2] ;
  wire \data_write_select_reg_n_0_[3] ;
  wire in_delay_slot;
  wire in_delay_slot_reg_0;
  wire inside_handler;
  wire inside_handler_i_10_n_0;
  wire inside_handler_i_1_n_0;
  wire inside_handler_i_7_n_0;
  wire inside_handler_i_9_n_0;
  wire interrupt_1;
  wire interrupt_1_reg_0;
  wire [31:0]min_max;
  wire new_arvalid0;
  wire new_arvalid__0;
  wire new_awvalid0;
  wire new_awvalid__0;
  wire new_bvalid;
  wire new_bvalid0;
  wire new_interrupt_reg_0;
  wire new_interrupt_reg_n_0;
  wire new_rvalid;
  wire new_rvalid0;
  wire p_1_in15_in;
  wire p_1_in65_in;
  wire p_1_in66_in;
  wire ready;
  wire request;
  wire reset_cmd;
  wire reset_cmd0;
  wire [3:0]\sample_1_reg[0]_0 ;
  wire [1:0]\sample_1_reg[1]_0 ;
  wire [62:0]\sample_1_reg[2]_0 ;
  wire [3:0]\sample_2_reg[0]_0 ;
  wire sample_cmd;
  wire sample_cmd0;
  wire [7:10]sample_synced;
  wire [5:3]sel;
  wire start_cmd;
  wire start_cmd0;
  wire stat130_out;
  wire stat133_out;
  wire stat2;
  wire stat212_in;
  wire stat2_out;
  wire stat5_out;
  wire stat_pause;
  wire stat_pause0;
  wire stat_pause011_out;
  wire \stat_select[0]_34 ;
  wire \stat_select[1]_36 ;
  wire \stat_select[2]_35 ;
  wire \stat_select[3]_32 ;
  wire \stat_select[4]_31 ;
  wire \stat_select[5]_33 ;
  wire [2:0]\stat_select_reg[0][2]_0 ;
  wire [2:0]\stat_select_reg[1][2]_0 ;
  wire [2:0]\stat_select_reg[2][2]_0 ;
  wire [2:0]\stat_select_reg[3][2]_0 ;
  wire [2:0]\stat_select_reg[4][2]_0 ;
  wire [2:0]\stat_select_reg[5][2]_0 ;
  wire \stat_select_reg_n_0_[0][3] ;
  wire \stat_select_reg_n_0_[0][4] ;
  wire \stat_select_reg_n_0_[0][5] ;
  wire \stat_select_reg_n_0_[2][3] ;
  wire \stat_select_reg_n_0_[2][4] ;
  wire \stat_select_reg_n_0_[2][5] ;
  wire \stat_select_reg_n_0_[3][3] ;
  wire \stat_select_reg_n_0_[3][4] ;
  wire \stat_select_reg_n_0_[3][5] ;
  wire \stat_select_reg_n_0_[4][3] ;
  wire \stat_select_reg_n_0_[4][4] ;
  wire \stat_select_reg_n_0_[4][5] ;
  wire \stat_select_reg_n_0_[5][3] ;
  wire \stat_select_reg_n_0_[5][4] ;
  wire \stat_select_reg_n_0_[5][5] ;
  wire [0:0]stat_stop;
  wire [0:1]status;
  wire [0:1]status_reg;
  wire status_reg0;
  wire status_reg_rst;
  wire [0:1]\status_sample_reg[0]_24 ;
  wire [1:0]\status_sample_reg_reg[0]_9 ;
  wire [1:0]\status_sample_reg_reg[1]_10 ;
  wire [1:0]\status_sample_reg_reg[2]_11 ;
  wire [1:0]\status_sample_reg_reg[3]_12 ;
  wire [1:0]\status_sample_reg_reg[4]_13 ;
  wire [1:0]\status_sample_reg_reg[5]_14 ;
  wire [2:0]status_select;
  wire stop_cmd;
  wire stop_cmd0;
  wire sync_reset;
  wire trace_MB_Halted_i;
  wire trace_MB_Halted_i_reg_0;
  wire trace_OF_PipeRun_i;
  wire \trace_instruction_i_reg[0] ;
  wire \trace_instruction_i_reg[0]_0 ;
  wire \trace_instruction_i_reg[0]_1 ;
  wire \trace_instruction_i_reg[4] ;
  wire \trace_pc_i_reg[17] ;
  wire \trace_pc_i_reg[1] ;
  wire \trace_pc_i_reg[24] ;
  wire \trace_pc_i_reg[9] ;
  wire uncond_ds_branch;
  wire valid_instr;

  assign Dbg_Reg_En_3_sp_1 = Dbg_Reg_En_3_sn_1;
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    Dbg_Intr0
       (.I0(\all_statistics_counters[5].Debug_Stat_Counter_i_n_70 ),
        .I1(status[1]),
        .I2(\all_statistics_counters[2].Debug_Stat_Counter_i_n_3 ),
        .I3(\all_statistics_counters[1].Debug_Stat_Counter_i_n_3 ),
        .I4(\all_statistics_counters[4].Debug_Stat_Counter_i_n_3 ),
        .I5(\all_statistics_counters[3].Debug_Stat_Counter_i_n_3 ),
        .O(Dbg_Intr0__0));
  FDRE Dbg_Intr_reg
       (.C(Clk),
        .CE(1'b1),
        .D(Dbg_Intr0__0),
        .Q(Dbg_Intr),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFA800)) 
    Dbg_TDO_INST_0
       (.I0(Dbg_TDO_2),
        .I1(Dbg_Reg_En[4]),
        .I2(Dbg_TDO_3),
        .I3(Dbg_TDO_INST_0_i_3_n_0),
        .I4(Dbg_TDO_4),
        .I5(Dbg_TDO_5),
        .O(Dbg_TDO));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    Dbg_TDO_INST_0_i_20
       (.I0(Dbg_TDO_INST_0_i_36_n_0),
        .I1(Dbg_TDO_INST_0_i_37_n_0),
        .I2(Q[4]),
        .I3(Dbg_TDO_INST_0_i_38_n_0),
        .I4(Q[3]),
        .I5(Dbg_TDO_INST_0_i_39_n_0),
        .O(Dbg_TDO_INST_0_i_20_n_0));
  LUT6 #(
    .INIT(64'hBBB8B8B888B8B8B8)) 
    Dbg_TDO_INST_0_i_3
       (.I0(Dbg_TDO_6),
        .I1(Instr_Insert_Reg_En),
        .I2(TDO_Reg),
        .I3(Dbg_TDO_1),
        .I4(Dbg_TDO_0),
        .I5(Dbg_TDO_7),
        .O(Dbg_TDO_INST_0_i_3_n_0));
  MUXF7 Dbg_TDO_INST_0_i_36
       (.I0(Dbg_TDO_INST_0_i_50_n_0),
        .I1(Dbg_TDO_INST_0_i_51_n_0),
        .O(Dbg_TDO_INST_0_i_36_n_0),
        .S(Q[2]));
  MUXF7 Dbg_TDO_INST_0_i_37
       (.I0(Dbg_TDO_INST_0_i_52_n_0),
        .I1(Dbg_TDO_INST_0_i_53_n_0),
        .O(Dbg_TDO_INST_0_i_37_n_0),
        .S(Q[2]));
  MUXF7 Dbg_TDO_INST_0_i_38
       (.I0(Dbg_TDO_INST_0_i_54_n_0),
        .I1(Dbg_TDO_INST_0_i_55_n_0),
        .O(Dbg_TDO_INST_0_i_38_n_0),
        .S(Q[2]));
  MUXF7 Dbg_TDO_INST_0_i_39
       (.I0(Dbg_TDO_INST_0_i_56_n_0),
        .I1(Dbg_TDO_INST_0_i_57_n_0),
        .O(Dbg_TDO_INST_0_i_39_n_0),
        .S(Q[2]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    Dbg_TDO_INST_0_i_50
       (.I0(data_read_reg[27]),
        .I1(data_read_reg[26]),
        .I2(Q[1]),
        .I3(data_read_reg[25]),
        .I4(Q[0]),
        .I5(data_read_reg[24]),
        .O(Dbg_TDO_INST_0_i_50_n_0));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    Dbg_TDO_INST_0_i_51
       (.I0(data_read_reg[31]),
        .I1(data_read_reg[30]),
        .I2(Q[1]),
        .I3(data_read_reg[29]),
        .I4(Q[0]),
        .I5(data_read_reg[28]),
        .O(Dbg_TDO_INST_0_i_51_n_0));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    Dbg_TDO_INST_0_i_52
       (.I0(data_read_reg[19]),
        .I1(data_read_reg[18]),
        .I2(Q[1]),
        .I3(data_read_reg[17]),
        .I4(Q[0]),
        .I5(data_read_reg[16]),
        .O(Dbg_TDO_INST_0_i_52_n_0));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    Dbg_TDO_INST_0_i_53
       (.I0(data_read_reg[23]),
        .I1(data_read_reg[22]),
        .I2(Q[1]),
        .I3(data_read_reg[21]),
        .I4(Q[0]),
        .I5(data_read_reg[20]),
        .O(Dbg_TDO_INST_0_i_53_n_0));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    Dbg_TDO_INST_0_i_54
       (.I0(data_read_reg[11]),
        .I1(data_read_reg[10]),
        .I2(Q[1]),
        .I3(data_read_reg[9]),
        .I4(Q[0]),
        .I5(data_read_reg[8]),
        .O(Dbg_TDO_INST_0_i_54_n_0));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    Dbg_TDO_INST_0_i_55
       (.I0(data_read_reg[15]),
        .I1(data_read_reg[14]),
        .I2(Q[1]),
        .I3(data_read_reg[13]),
        .I4(Q[0]),
        .I5(data_read_reg[12]),
        .O(Dbg_TDO_INST_0_i_55_n_0));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    Dbg_TDO_INST_0_i_56
       (.I0(data_read_reg[3]),
        .I1(data_read_reg[2]),
        .I2(Q[1]),
        .I3(data_read_reg[1]),
        .I4(Q[0]),
        .I5(data_read_reg[0]),
        .O(Dbg_TDO_INST_0_i_56_n_0));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    Dbg_TDO_INST_0_i_57
       (.I0(data_read_reg[7]),
        .I1(data_read_reg[6]),
        .I2(Q[1]),
        .I3(data_read_reg[5]),
        .I4(Q[0]),
        .I5(data_read_reg[4]),
        .O(Dbg_TDO_INST_0_i_57_n_0));
  LUT6 #(
    .INIT(64'h4540FFFF45404540)) 
    Dbg_TDO_INST_0_i_8
       (.I0(Dbg_TDO_0),
        .I1(status_reg[1]),
        .I2(Q[0]),
        .I3(status_reg[0]),
        .I4(Dbg_TDO_1),
        .I5(Dbg_TDO_INST_0_i_20_n_0),
        .O(TDO_Reg));
  FDRE \Serial_Dbg_Intf.Start_Ack_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Serial_Dbg_Intf.sync_sample_n_17 ),
        .Q(Dbg_Trig_Ack_Out[0]),
        .R(1'b0));
  FDRE \Serial_Dbg_Intf.Started_Pulse_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(stat_pause0),
        .Q(Started_Pulse),
        .R(sync_reset));
  FDRE \Serial_Dbg_Intf.Started_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Serial_Dbg_Intf.sync_sample_n_15 ),
        .Q(Dbg_Trig_In[0]),
        .R(1'b0));
  FDRE \Serial_Dbg_Intf.Stop_Ack_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Serial_Dbg_Intf.sync_sample_n_16 ),
        .Q(Dbg_Trig_Ack_Out[1]),
        .R(1'b0));
  FDRE \Serial_Dbg_Intf.Stopped_Pulse_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(stat_pause011_out),
        .Q(Stopped_Pulse),
        .R(sync_reset));
  FDRE \Serial_Dbg_Intf.Stopped_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Serial_Dbg_Intf.sync_sample_n_11 ),
        .Q(Dbg_Trig_In[1]),
        .R(1'b0));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \Serial_Dbg_Intf.any_cmd_i_1 
       (.I0(stop_cmd),
        .I1(clear_cmd),
        .I2(reset_cmd),
        .I3(sample_cmd),
        .I4(start_cmd),
        .O(any_cmd0));
  FDRE \Serial_Dbg_Intf.any_cmd_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(any_cmd0),
        .Q(any_cmd),
        .R(sync_reset));
  (* ORIG_CELL_NAME = "Serial_Dbg_Intf.clear_cmd_reg" *) 
  FDRE \Serial_Dbg_Intf.clear_cmd_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(clear_cmd0),
        .Q(clear_cmd),
        .R(sync_reset));
  (* ORIG_CELL_NAME = "Serial_Dbg_Intf.clear_cmd_reg" *) 
  FDRE \Serial_Dbg_Intf.clear_cmd_reg_rep 
       (.C(Clk),
        .CE(1'b1),
        .D(\Serial_Dbg_Intf.clear_cmd_reg_rep_0 ),
        .Q(\Serial_Dbg_Intf.clear_cmd_reg_rep_n_0 ),
        .R(sync_reset));
  LUT3 #(
    .INIT(8'h01)) 
    \Serial_Dbg_Intf.command_reg[0]_i_1 
       (.I0(\Dbg_Reg_En[3]_0 ),
        .I1(Dbg_Reg_En[5]),
        .I2(Dbg_Reg_En[2]),
        .O(command_Reg_En));
  LUT4 #(
    .INIT(16'h00E2)) 
    \Serial_Dbg_Intf.command_reg[0]_i_2 
       (.I0(command_reg_clear),
        .I1(Scan_Reset_Sel),
        .I2(Scan_Reset),
        .I3(Scan_En),
        .O(command_reg_rst));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFF7F)) 
    \Serial_Dbg_Intf.command_reg[0]_i_3 
       (.I0(Dbg_Reg_En[3]),
        .I1(Dbg_Reg_En[6]),
        .I2(Dbg_Reg_En[1]),
        .I3(Dbg_Reg_En[0]),
        .I4(Dbg_Reg_En[4]),
        .I5(Dbg_Reg_En[7]),
        .O(\Dbg_Reg_En[3]_0 ));
  FDRE \Serial_Dbg_Intf.command_reg_clear_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(any_cmd),
        .Q(command_reg_clear),
        .R(sync_reset));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.command_reg_reg[0] 
       (.C(Dbg_Update),
        .CE(command_Reg_En),
        .CLR(command_reg_rst),
        .D(\Serial_Dbg_Intf.data_write_reg_reg[0]_0 [4]),
        .Q(command_reg[0]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.command_reg_reg[1] 
       (.C(Dbg_Update),
        .CE(command_Reg_En),
        .CLR(command_reg_rst),
        .D(\Serial_Dbg_Intf.data_write_reg_reg[0]_0 [3]),
        .Q(command_reg[1]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.command_reg_reg[2] 
       (.C(Dbg_Update),
        .CE(command_Reg_En),
        .CLR(command_reg_rst),
        .D(\Serial_Dbg_Intf.data_write_reg_reg[0]_0 [2]),
        .Q(command_reg[2]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.command_reg_reg[3] 
       (.C(Dbg_Update),
        .CE(command_Reg_En),
        .CLR(command_reg_rst),
        .D(\Serial_Dbg_Intf.data_write_reg_reg[0]_0 [1]),
        .Q(command_reg[3]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.command_reg_reg[4] 
       (.C(Dbg_Update),
        .CE(command_Reg_En),
        .CLR(command_reg_rst),
        .D(\Serial_Dbg_Intf.data_write_reg_reg[0]_0 [0]),
        .Q(command_reg[4]));
  LUT5 #(
    .INIT(32'h00001000)) 
    \Serial_Dbg_Intf.control_incr_TClk_i_1 
       (.I0(Dbg_Reg_En[6]),
        .I1(Dbg_Reg_En[5]),
        .I2(Dbg_Reg_En[7]),
        .I3(Dbg_Reg_En[1]),
        .I4(\Serial_Dbg_Intf.control_incr_TClk_i_3_n_0 ),
        .O(control_Reg_En));
  LUT4 #(
    .INIT(16'h00E2)) 
    \Serial_Dbg_Intf.control_incr_TClk_i_2 
       (.I0(control_rst),
        .I1(Scan_Reset_Sel),
        .I2(Scan_Reset),
        .I3(Scan_En),
        .O(control_reg_rst));
  LUT4 #(
    .INIT(16'hFFEF)) 
    \Serial_Dbg_Intf.control_incr_TClk_i_3 
       (.I0(Dbg_Reg_En[4]),
        .I1(Dbg_Reg_En[0]),
        .I2(Dbg_Reg_En[3]),
        .I3(Dbg_Reg_En[2]),
        .O(\Serial_Dbg_Intf.control_incr_TClk_i_3_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.control_incr_TClk_reg 
       (.C(Dbg_Update),
        .CE(control_Reg_En),
        .CLR(control_reg_rst),
        .D(control_Reg_En),
        .Q(control_incr_TClk));
  FDRE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.control_incr_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(control_incr0),
        .Q(control_incr),
        .R(sync_reset));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.control_reg_reg[2] 
       (.C(Dbg_Update),
        .CE(control_Reg_En),
        .CLR(control_reg_rst),
        .D(\Serial_Dbg_Intf.data_write_reg_reg[0]_0 [5]),
        .Q(\Serial_Dbg_Intf.control_reg_reg_n_0_[2] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.control_reg_reg[3] 
       (.C(Dbg_Update),
        .CE(control_Reg_En),
        .CLR(control_reg_rst),
        .D(\Serial_Dbg_Intf.data_write_reg_reg[0]_0 [4]),
        .Q(\Serial_Dbg_Intf.control_reg_reg_n_0_[3] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.control_reg_reg[4] 
       (.C(Dbg_Update),
        .CE(control_Reg_En),
        .CLR(control_reg_rst),
        .D(\Serial_Dbg_Intf.data_write_reg_reg[0]_0 [3]),
        .Q(\Serial_Dbg_Intf.control_reg_reg_n_0_[4] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.control_reg_reg[5] 
       (.C(Dbg_Update),
        .CE(control_Reg_En),
        .CLR(control_reg_rst),
        .D(\Serial_Dbg_Intf.data_write_reg_reg[0]_0 [2]),
        .Q(\Serial_Dbg_Intf.control_reg_reg_n_0_[5] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.control_reg_reg[6] 
       (.C(Dbg_Update),
        .CE(control_Reg_En),
        .CLR(control_reg_rst),
        .D(\Serial_Dbg_Intf.data_write_reg_reg[0]_0 [1]),
        .Q(\Serial_Dbg_Intf.control_reg_reg_n_0_[6] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.control_reg_reg[7] 
       (.C(Dbg_Update),
        .CE(control_Reg_En),
        .CLR(control_reg_rst),
        .D(\Serial_Dbg_Intf.data_write_reg_reg[0]_0 [0]),
        .Q(\Serial_Dbg_Intf.control_reg_reg_n_0_[7] ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Serial_Dbg_Intf.data_read_reg[0]_i_1 
       (.I0(\data_sample_reg_reg[8]_8 [31]),
        .I1(data_read_select[3]),
        .I2(\Serial_Dbg_Intf.data_read_reg[0]_i_2_n_0 ),
        .I3(data_read_select[2]),
        .I4(\Serial_Dbg_Intf.data_read_reg[0]_i_3_n_0 ),
        .O(\data_sample_reg[0]_23 [0]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Serial_Dbg_Intf.data_read_reg[0]_i_2 
       (.I0(\data_sample_reg_reg[7]_7 [31]),
        .I1(\data_sample_reg_reg[6]_6 [31]),
        .I2(data_read_select[1]),
        .I3(\data_sample_reg_reg[5]_5 [31]),
        .I4(data_read_select[0]),
        .I5(\data_sample_reg_reg[4]_4 [31]),
        .O(\Serial_Dbg_Intf.data_read_reg[0]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Serial_Dbg_Intf.data_read_reg[0]_i_3 
       (.I0(\data_sample_reg_reg[3]_3 [31]),
        .I1(\data_sample_reg_reg[2]_2 [31]),
        .I2(data_read_select[1]),
        .I3(\data_sample_reg_reg[1]_1 [31]),
        .I4(data_read_select[0]),
        .I5(\data_sample_reg_reg[0]_0 [31]),
        .O(\Serial_Dbg_Intf.data_read_reg[0]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Serial_Dbg_Intf.data_read_reg[10]_i_1 
       (.I0(\data_sample_reg_reg[8]_8 [21]),
        .I1(data_read_select[3]),
        .I2(\Serial_Dbg_Intf.data_read_reg[10]_i_2_n_0 ),
        .I3(data_read_select[2]),
        .I4(\Serial_Dbg_Intf.data_read_reg[10]_i_3_n_0 ),
        .O(\data_sample_reg[0]_23 [10]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Serial_Dbg_Intf.data_read_reg[10]_i_2 
       (.I0(\data_sample_reg_reg[7]_7 [21]),
        .I1(\data_sample_reg_reg[6]_6 [21]),
        .I2(data_read_select[1]),
        .I3(\data_sample_reg_reg[5]_5 [21]),
        .I4(data_read_select[0]),
        .I5(\data_sample_reg_reg[4]_4 [21]),
        .O(\Serial_Dbg_Intf.data_read_reg[10]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Serial_Dbg_Intf.data_read_reg[10]_i_3 
       (.I0(\data_sample_reg_reg[3]_3 [21]),
        .I1(\data_sample_reg_reg[2]_2 [21]),
        .I2(data_read_select[1]),
        .I3(\data_sample_reg_reg[1]_1 [21]),
        .I4(data_read_select[0]),
        .I5(\data_sample_reg_reg[0]_0 [21]),
        .O(\Serial_Dbg_Intf.data_read_reg[10]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Serial_Dbg_Intf.data_read_reg[11]_i_1 
       (.I0(\data_sample_reg_reg[8]_8 [20]),
        .I1(data_read_select[3]),
        .I2(\Serial_Dbg_Intf.data_read_reg[11]_i_2_n_0 ),
        .I3(data_read_select[2]),
        .I4(\Serial_Dbg_Intf.data_read_reg[11]_i_3_n_0 ),
        .O(\data_sample_reg[0]_23 [11]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Serial_Dbg_Intf.data_read_reg[11]_i_2 
       (.I0(\data_sample_reg_reg[7]_7 [20]),
        .I1(\data_sample_reg_reg[6]_6 [20]),
        .I2(data_read_select[1]),
        .I3(\data_sample_reg_reg[5]_5 [20]),
        .I4(data_read_select[0]),
        .I5(\data_sample_reg_reg[4]_4 [20]),
        .O(\Serial_Dbg_Intf.data_read_reg[11]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Serial_Dbg_Intf.data_read_reg[11]_i_3 
       (.I0(\data_sample_reg_reg[3]_3 [20]),
        .I1(\data_sample_reg_reg[2]_2 [20]),
        .I2(data_read_select[1]),
        .I3(\data_sample_reg_reg[1]_1 [20]),
        .I4(data_read_select[0]),
        .I5(\data_sample_reg_reg[0]_0 [20]),
        .O(\Serial_Dbg_Intf.data_read_reg[11]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Serial_Dbg_Intf.data_read_reg[12]_i_1 
       (.I0(\data_sample_reg_reg[8]_8 [19]),
        .I1(data_read_select[3]),
        .I2(\Serial_Dbg_Intf.data_read_reg[12]_i_2_n_0 ),
        .I3(data_read_select[2]),
        .I4(\Serial_Dbg_Intf.data_read_reg[12]_i_3_n_0 ),
        .O(\data_sample_reg[0]_23 [12]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Serial_Dbg_Intf.data_read_reg[12]_i_2 
       (.I0(\data_sample_reg_reg[7]_7 [19]),
        .I1(\data_sample_reg_reg[6]_6 [19]),
        .I2(data_read_select[1]),
        .I3(\data_sample_reg_reg[5]_5 [19]),
        .I4(data_read_select[0]),
        .I5(\data_sample_reg_reg[4]_4 [19]),
        .O(\Serial_Dbg_Intf.data_read_reg[12]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Serial_Dbg_Intf.data_read_reg[12]_i_3 
       (.I0(\data_sample_reg_reg[3]_3 [19]),
        .I1(\data_sample_reg_reg[2]_2 [19]),
        .I2(data_read_select[1]),
        .I3(\data_sample_reg_reg[1]_1 [19]),
        .I4(data_read_select[0]),
        .I5(\data_sample_reg_reg[0]_0 [19]),
        .O(\Serial_Dbg_Intf.data_read_reg[12]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Serial_Dbg_Intf.data_read_reg[13]_i_1 
       (.I0(\data_sample_reg_reg[8]_8 [18]),
        .I1(data_read_select[3]),
        .I2(\Serial_Dbg_Intf.data_read_reg[13]_i_2_n_0 ),
        .I3(data_read_select[2]),
        .I4(\Serial_Dbg_Intf.data_read_reg[13]_i_3_n_0 ),
        .O(\data_sample_reg[0]_23 [13]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Serial_Dbg_Intf.data_read_reg[13]_i_2 
       (.I0(\data_sample_reg_reg[7]_7 [18]),
        .I1(\data_sample_reg_reg[6]_6 [18]),
        .I2(data_read_select[1]),
        .I3(\data_sample_reg_reg[5]_5 [18]),
        .I4(data_read_select[0]),
        .I5(\data_sample_reg_reg[4]_4 [18]),
        .O(\Serial_Dbg_Intf.data_read_reg[13]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Serial_Dbg_Intf.data_read_reg[13]_i_3 
       (.I0(\data_sample_reg_reg[3]_3 [18]),
        .I1(\data_sample_reg_reg[2]_2 [18]),
        .I2(data_read_select[1]),
        .I3(\data_sample_reg_reg[1]_1 [18]),
        .I4(data_read_select[0]),
        .I5(\data_sample_reg_reg[0]_0 [18]),
        .O(\Serial_Dbg_Intf.data_read_reg[13]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Serial_Dbg_Intf.data_read_reg[14]_i_1 
       (.I0(\data_sample_reg_reg[8]_8 [17]),
        .I1(data_read_select[3]),
        .I2(\Serial_Dbg_Intf.data_read_reg[14]_i_2_n_0 ),
        .I3(data_read_select[2]),
        .I4(\Serial_Dbg_Intf.data_read_reg[14]_i_3_n_0 ),
        .O(\data_sample_reg[0]_23 [14]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Serial_Dbg_Intf.data_read_reg[14]_i_2 
       (.I0(\data_sample_reg_reg[7]_7 [17]),
        .I1(\data_sample_reg_reg[6]_6 [17]),
        .I2(data_read_select[1]),
        .I3(\data_sample_reg_reg[5]_5 [17]),
        .I4(data_read_select[0]),
        .I5(\data_sample_reg_reg[4]_4 [17]),
        .O(\Serial_Dbg_Intf.data_read_reg[14]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Serial_Dbg_Intf.data_read_reg[14]_i_3 
       (.I0(\data_sample_reg_reg[3]_3 [17]),
        .I1(\data_sample_reg_reg[2]_2 [17]),
        .I2(data_read_select[1]),
        .I3(\data_sample_reg_reg[1]_1 [17]),
        .I4(data_read_select[0]),
        .I5(\data_sample_reg_reg[0]_0 [17]),
        .O(\Serial_Dbg_Intf.data_read_reg[14]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Serial_Dbg_Intf.data_read_reg[15]_i_1 
       (.I0(\data_sample_reg_reg[8]_8 [16]),
        .I1(data_read_select[3]),
        .I2(\Serial_Dbg_Intf.data_read_reg[15]_i_2_n_0 ),
        .I3(data_read_select[2]),
        .I4(\Serial_Dbg_Intf.data_read_reg[15]_i_3_n_0 ),
        .O(\data_sample_reg[0]_23 [15]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Serial_Dbg_Intf.data_read_reg[15]_i_2 
       (.I0(\data_sample_reg_reg[7]_7 [16]),
        .I1(\data_sample_reg_reg[6]_6 [16]),
        .I2(data_read_select[1]),
        .I3(\data_sample_reg_reg[5]_5 [16]),
        .I4(data_read_select[0]),
        .I5(\data_sample_reg_reg[4]_4 [16]),
        .O(\Serial_Dbg_Intf.data_read_reg[15]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Serial_Dbg_Intf.data_read_reg[15]_i_3 
       (.I0(\data_sample_reg_reg[3]_3 [16]),
        .I1(\data_sample_reg_reg[2]_2 [16]),
        .I2(data_read_select[1]),
        .I3(\data_sample_reg_reg[1]_1 [16]),
        .I4(data_read_select[0]),
        .I5(\data_sample_reg_reg[0]_0 [16]),
        .O(\Serial_Dbg_Intf.data_read_reg[15]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Serial_Dbg_Intf.data_read_reg[16]_i_1 
       (.I0(\data_sample_reg_reg[8]_8 [15]),
        .I1(data_read_select[3]),
        .I2(\Serial_Dbg_Intf.data_read_reg[16]_i_2_n_0 ),
        .I3(data_read_select[2]),
        .I4(\Serial_Dbg_Intf.data_read_reg[16]_i_3_n_0 ),
        .O(\data_sample_reg[0]_23 [16]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Serial_Dbg_Intf.data_read_reg[16]_i_2 
       (.I0(\data_sample_reg_reg[7]_7 [15]),
        .I1(\data_sample_reg_reg[6]_6 [15]),
        .I2(data_read_select[1]),
        .I3(\data_sample_reg_reg[5]_5 [15]),
        .I4(data_read_select[0]),
        .I5(\data_sample_reg_reg[4]_4 [15]),
        .O(\Serial_Dbg_Intf.data_read_reg[16]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Serial_Dbg_Intf.data_read_reg[16]_i_3 
       (.I0(\data_sample_reg_reg[3]_3 [15]),
        .I1(\data_sample_reg_reg[2]_2 [15]),
        .I2(data_read_select[1]),
        .I3(\data_sample_reg_reg[1]_1 [15]),
        .I4(data_read_select[0]),
        .I5(\data_sample_reg_reg[0]_0 [15]),
        .O(\Serial_Dbg_Intf.data_read_reg[16]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Serial_Dbg_Intf.data_read_reg[17]_i_1 
       (.I0(\data_sample_reg_reg[8]_8 [14]),
        .I1(data_read_select[3]),
        .I2(\Serial_Dbg_Intf.data_read_reg[17]_i_2_n_0 ),
        .I3(data_read_select[2]),
        .I4(\Serial_Dbg_Intf.data_read_reg[17]_i_3_n_0 ),
        .O(\data_sample_reg[0]_23 [17]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Serial_Dbg_Intf.data_read_reg[17]_i_2 
       (.I0(\data_sample_reg_reg[7]_7 [14]),
        .I1(\data_sample_reg_reg[6]_6 [14]),
        .I2(data_read_select[1]),
        .I3(\data_sample_reg_reg[5]_5 [14]),
        .I4(data_read_select[0]),
        .I5(\data_sample_reg_reg[4]_4 [14]),
        .O(\Serial_Dbg_Intf.data_read_reg[17]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Serial_Dbg_Intf.data_read_reg[17]_i_3 
       (.I0(\data_sample_reg_reg[3]_3 [14]),
        .I1(\data_sample_reg_reg[2]_2 [14]),
        .I2(data_read_select[1]),
        .I3(\data_sample_reg_reg[1]_1 [14]),
        .I4(data_read_select[0]),
        .I5(\data_sample_reg_reg[0]_0 [14]),
        .O(\Serial_Dbg_Intf.data_read_reg[17]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Serial_Dbg_Intf.data_read_reg[18]_i_1 
       (.I0(\data_sample_reg_reg[8]_8 [13]),
        .I1(data_read_select[3]),
        .I2(\Serial_Dbg_Intf.data_read_reg[18]_i_2_n_0 ),
        .I3(data_read_select[2]),
        .I4(\Serial_Dbg_Intf.data_read_reg[18]_i_3_n_0 ),
        .O(\data_sample_reg[0]_23 [18]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Serial_Dbg_Intf.data_read_reg[18]_i_2 
       (.I0(\data_sample_reg_reg[7]_7 [13]),
        .I1(\data_sample_reg_reg[6]_6 [13]),
        .I2(data_read_select[1]),
        .I3(\data_sample_reg_reg[5]_5 [13]),
        .I4(data_read_select[0]),
        .I5(\data_sample_reg_reg[4]_4 [13]),
        .O(\Serial_Dbg_Intf.data_read_reg[18]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Serial_Dbg_Intf.data_read_reg[18]_i_3 
       (.I0(\data_sample_reg_reg[3]_3 [13]),
        .I1(\data_sample_reg_reg[2]_2 [13]),
        .I2(data_read_select[1]),
        .I3(\data_sample_reg_reg[1]_1 [13]),
        .I4(data_read_select[0]),
        .I5(\data_sample_reg_reg[0]_0 [13]),
        .O(\Serial_Dbg_Intf.data_read_reg[18]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Serial_Dbg_Intf.data_read_reg[19]_i_1 
       (.I0(\data_sample_reg_reg[8]_8 [12]),
        .I1(data_read_select[3]),
        .I2(\Serial_Dbg_Intf.data_read_reg[19]_i_2_n_0 ),
        .I3(data_read_select[2]),
        .I4(\Serial_Dbg_Intf.data_read_reg[19]_i_3_n_0 ),
        .O(\data_sample_reg[0]_23 [19]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Serial_Dbg_Intf.data_read_reg[19]_i_2 
       (.I0(\data_sample_reg_reg[7]_7 [12]),
        .I1(\data_sample_reg_reg[6]_6 [12]),
        .I2(data_read_select[1]),
        .I3(\data_sample_reg_reg[5]_5 [12]),
        .I4(data_read_select[0]),
        .I5(\data_sample_reg_reg[4]_4 [12]),
        .O(\Serial_Dbg_Intf.data_read_reg[19]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Serial_Dbg_Intf.data_read_reg[19]_i_3 
       (.I0(\data_sample_reg_reg[3]_3 [12]),
        .I1(\data_sample_reg_reg[2]_2 [12]),
        .I2(data_read_select[1]),
        .I3(\data_sample_reg_reg[1]_1 [12]),
        .I4(data_read_select[0]),
        .I5(\data_sample_reg_reg[0]_0 [12]),
        .O(\Serial_Dbg_Intf.data_read_reg[19]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Serial_Dbg_Intf.data_read_reg[1]_i_1 
       (.I0(\data_sample_reg_reg[8]_8 [30]),
        .I1(data_read_select[3]),
        .I2(\Serial_Dbg_Intf.data_read_reg[1]_i_2_n_0 ),
        .I3(data_read_select[2]),
        .I4(\Serial_Dbg_Intf.data_read_reg[1]_i_3_n_0 ),
        .O(\data_sample_reg[0]_23 [1]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Serial_Dbg_Intf.data_read_reg[1]_i_2 
       (.I0(\data_sample_reg_reg[7]_7 [30]),
        .I1(\data_sample_reg_reg[6]_6 [30]),
        .I2(data_read_select[1]),
        .I3(\data_sample_reg_reg[5]_5 [30]),
        .I4(data_read_select[0]),
        .I5(\data_sample_reg_reg[4]_4 [30]),
        .O(\Serial_Dbg_Intf.data_read_reg[1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Serial_Dbg_Intf.data_read_reg[1]_i_3 
       (.I0(\data_sample_reg_reg[3]_3 [30]),
        .I1(\data_sample_reg_reg[2]_2 [30]),
        .I2(data_read_select[1]),
        .I3(\data_sample_reg_reg[1]_1 [30]),
        .I4(data_read_select[0]),
        .I5(\data_sample_reg_reg[0]_0 [30]),
        .O(\Serial_Dbg_Intf.data_read_reg[1]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Serial_Dbg_Intf.data_read_reg[20]_i_1 
       (.I0(\data_sample_reg_reg[8]_8 [11]),
        .I1(data_read_select[3]),
        .I2(\Serial_Dbg_Intf.data_read_reg[20]_i_2_n_0 ),
        .I3(data_read_select[2]),
        .I4(\Serial_Dbg_Intf.data_read_reg[20]_i_3_n_0 ),
        .O(\data_sample_reg[0]_23 [20]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Serial_Dbg_Intf.data_read_reg[20]_i_2 
       (.I0(\data_sample_reg_reg[7]_7 [11]),
        .I1(\data_sample_reg_reg[6]_6 [11]),
        .I2(data_read_select[1]),
        .I3(\data_sample_reg_reg[5]_5 [11]),
        .I4(data_read_select[0]),
        .I5(\data_sample_reg_reg[4]_4 [11]),
        .O(\Serial_Dbg_Intf.data_read_reg[20]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Serial_Dbg_Intf.data_read_reg[20]_i_3 
       (.I0(\data_sample_reg_reg[3]_3 [11]),
        .I1(\data_sample_reg_reg[2]_2 [11]),
        .I2(data_read_select[1]),
        .I3(\data_sample_reg_reg[1]_1 [11]),
        .I4(data_read_select[0]),
        .I5(\data_sample_reg_reg[0]_0 [11]),
        .O(\Serial_Dbg_Intf.data_read_reg[20]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Serial_Dbg_Intf.data_read_reg[21]_i_1 
       (.I0(\data_sample_reg_reg[8]_8 [10]),
        .I1(data_read_select[3]),
        .I2(\Serial_Dbg_Intf.data_read_reg[21]_i_2_n_0 ),
        .I3(data_read_select[2]),
        .I4(\Serial_Dbg_Intf.data_read_reg[21]_i_3_n_0 ),
        .O(\data_sample_reg[0]_23 [21]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Serial_Dbg_Intf.data_read_reg[21]_i_2 
       (.I0(\data_sample_reg_reg[7]_7 [10]),
        .I1(\data_sample_reg_reg[6]_6 [10]),
        .I2(data_read_select[1]),
        .I3(\data_sample_reg_reg[5]_5 [10]),
        .I4(data_read_select[0]),
        .I5(\data_sample_reg_reg[4]_4 [10]),
        .O(\Serial_Dbg_Intf.data_read_reg[21]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Serial_Dbg_Intf.data_read_reg[21]_i_3 
       (.I0(\data_sample_reg_reg[3]_3 [10]),
        .I1(\data_sample_reg_reg[2]_2 [10]),
        .I2(data_read_select[1]),
        .I3(\data_sample_reg_reg[1]_1 [10]),
        .I4(data_read_select[0]),
        .I5(\data_sample_reg_reg[0]_0 [10]),
        .O(\Serial_Dbg_Intf.data_read_reg[21]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Serial_Dbg_Intf.data_read_reg[22]_i_1 
       (.I0(\data_sample_reg_reg[8]_8 [9]),
        .I1(data_read_select[3]),
        .I2(\Serial_Dbg_Intf.data_read_reg[22]_i_2_n_0 ),
        .I3(data_read_select[2]),
        .I4(\Serial_Dbg_Intf.data_read_reg[22]_i_3_n_0 ),
        .O(\data_sample_reg[0]_23 [22]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Serial_Dbg_Intf.data_read_reg[22]_i_2 
       (.I0(\data_sample_reg_reg[7]_7 [9]),
        .I1(\data_sample_reg_reg[6]_6 [9]),
        .I2(data_read_select[1]),
        .I3(\data_sample_reg_reg[5]_5 [9]),
        .I4(data_read_select[0]),
        .I5(\data_sample_reg_reg[4]_4 [9]),
        .O(\Serial_Dbg_Intf.data_read_reg[22]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Serial_Dbg_Intf.data_read_reg[22]_i_3 
       (.I0(\data_sample_reg_reg[3]_3 [9]),
        .I1(\data_sample_reg_reg[2]_2 [9]),
        .I2(data_read_select[1]),
        .I3(\data_sample_reg_reg[1]_1 [9]),
        .I4(data_read_select[0]),
        .I5(\data_sample_reg_reg[0]_0 [9]),
        .O(\Serial_Dbg_Intf.data_read_reg[22]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Serial_Dbg_Intf.data_read_reg[23]_i_1 
       (.I0(\data_sample_reg_reg[8]_8 [8]),
        .I1(data_read_select[3]),
        .I2(\Serial_Dbg_Intf.data_read_reg[23]_i_2_n_0 ),
        .I3(data_read_select[2]),
        .I4(\Serial_Dbg_Intf.data_read_reg[23]_i_3_n_0 ),
        .O(\data_sample_reg[0]_23 [23]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Serial_Dbg_Intf.data_read_reg[23]_i_2 
       (.I0(\data_sample_reg_reg[7]_7 [8]),
        .I1(\data_sample_reg_reg[6]_6 [8]),
        .I2(data_read_select[1]),
        .I3(\data_sample_reg_reg[5]_5 [8]),
        .I4(data_read_select[0]),
        .I5(\data_sample_reg_reg[4]_4 [8]),
        .O(\Serial_Dbg_Intf.data_read_reg[23]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Serial_Dbg_Intf.data_read_reg[23]_i_3 
       (.I0(\data_sample_reg_reg[3]_3 [8]),
        .I1(\data_sample_reg_reg[2]_2 [8]),
        .I2(data_read_select[1]),
        .I3(\data_sample_reg_reg[1]_1 [8]),
        .I4(data_read_select[0]),
        .I5(\data_sample_reg_reg[0]_0 [8]),
        .O(\Serial_Dbg_Intf.data_read_reg[23]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Serial_Dbg_Intf.data_read_reg[24]_i_1 
       (.I0(\data_sample_reg_reg[8]_8 [7]),
        .I1(data_read_select[3]),
        .I2(\Serial_Dbg_Intf.data_read_reg[24]_i_2_n_0 ),
        .I3(data_read_select[2]),
        .I4(\Serial_Dbg_Intf.data_read_reg[24]_i_3_n_0 ),
        .O(\data_sample_reg[0]_23 [24]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Serial_Dbg_Intf.data_read_reg[24]_i_2 
       (.I0(\data_sample_reg_reg[7]_7 [7]),
        .I1(\data_sample_reg_reg[6]_6 [7]),
        .I2(data_read_select[1]),
        .I3(\data_sample_reg_reg[5]_5 [7]),
        .I4(data_read_select[0]),
        .I5(\data_sample_reg_reg[4]_4 [7]),
        .O(\Serial_Dbg_Intf.data_read_reg[24]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Serial_Dbg_Intf.data_read_reg[24]_i_3 
       (.I0(\data_sample_reg_reg[3]_3 [7]),
        .I1(\data_sample_reg_reg[2]_2 [7]),
        .I2(data_read_select[1]),
        .I3(\data_sample_reg_reg[1]_1 [7]),
        .I4(data_read_select[0]),
        .I5(\data_sample_reg_reg[0]_0 [7]),
        .O(\Serial_Dbg_Intf.data_read_reg[24]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Serial_Dbg_Intf.data_read_reg[25]_i_1 
       (.I0(\data_sample_reg_reg[8]_8 [6]),
        .I1(data_read_select[3]),
        .I2(\Serial_Dbg_Intf.data_read_reg[25]_i_2_n_0 ),
        .I3(data_read_select[2]),
        .I4(\Serial_Dbg_Intf.data_read_reg[25]_i_3_n_0 ),
        .O(\data_sample_reg[0]_23 [25]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Serial_Dbg_Intf.data_read_reg[25]_i_2 
       (.I0(\data_sample_reg_reg[7]_7 [6]),
        .I1(\data_sample_reg_reg[6]_6 [6]),
        .I2(data_read_select[1]),
        .I3(\data_sample_reg_reg[5]_5 [6]),
        .I4(data_read_select[0]),
        .I5(\data_sample_reg_reg[4]_4 [6]),
        .O(\Serial_Dbg_Intf.data_read_reg[25]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Serial_Dbg_Intf.data_read_reg[25]_i_3 
       (.I0(\data_sample_reg_reg[3]_3 [6]),
        .I1(\data_sample_reg_reg[2]_2 [6]),
        .I2(data_read_select[1]),
        .I3(\data_sample_reg_reg[1]_1 [6]),
        .I4(data_read_select[0]),
        .I5(\data_sample_reg_reg[0]_0 [6]),
        .O(\Serial_Dbg_Intf.data_read_reg[25]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Serial_Dbg_Intf.data_read_reg[26]_i_1 
       (.I0(\data_sample_reg_reg[8]_8 [5]),
        .I1(data_read_select[3]),
        .I2(\Serial_Dbg_Intf.data_read_reg[26]_i_2_n_0 ),
        .I3(data_read_select[2]),
        .I4(\Serial_Dbg_Intf.data_read_reg[26]_i_3_n_0 ),
        .O(\data_sample_reg[0]_23 [26]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Serial_Dbg_Intf.data_read_reg[26]_i_2 
       (.I0(\data_sample_reg_reg[7]_7 [5]),
        .I1(\data_sample_reg_reg[6]_6 [5]),
        .I2(data_read_select[1]),
        .I3(\data_sample_reg_reg[5]_5 [5]),
        .I4(data_read_select[0]),
        .I5(\data_sample_reg_reg[4]_4 [5]),
        .O(\Serial_Dbg_Intf.data_read_reg[26]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Serial_Dbg_Intf.data_read_reg[26]_i_3 
       (.I0(\data_sample_reg_reg[3]_3 [5]),
        .I1(\data_sample_reg_reg[2]_2 [5]),
        .I2(data_read_select[1]),
        .I3(\data_sample_reg_reg[1]_1 [5]),
        .I4(data_read_select[0]),
        .I5(\data_sample_reg_reg[0]_0 [5]),
        .O(\Serial_Dbg_Intf.data_read_reg[26]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Serial_Dbg_Intf.data_read_reg[27]_i_1 
       (.I0(\data_sample_reg_reg[8]_8 [4]),
        .I1(data_read_select[3]),
        .I2(\Serial_Dbg_Intf.data_read_reg[27]_i_2_n_0 ),
        .I3(data_read_select[2]),
        .I4(\Serial_Dbg_Intf.data_read_reg[27]_i_3_n_0 ),
        .O(\data_sample_reg[0]_23 [27]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Serial_Dbg_Intf.data_read_reg[27]_i_2 
       (.I0(\data_sample_reg_reg[7]_7 [4]),
        .I1(\data_sample_reg_reg[6]_6 [4]),
        .I2(data_read_select[1]),
        .I3(\data_sample_reg_reg[5]_5 [4]),
        .I4(data_read_select[0]),
        .I5(\data_sample_reg_reg[4]_4 [4]),
        .O(\Serial_Dbg_Intf.data_read_reg[27]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Serial_Dbg_Intf.data_read_reg[27]_i_3 
       (.I0(\data_sample_reg_reg[3]_3 [4]),
        .I1(\data_sample_reg_reg[2]_2 [4]),
        .I2(data_read_select[1]),
        .I3(\data_sample_reg_reg[1]_1 [4]),
        .I4(data_read_select[0]),
        .I5(\data_sample_reg_reg[0]_0 [4]),
        .O(\Serial_Dbg_Intf.data_read_reg[27]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Serial_Dbg_Intf.data_read_reg[28]_i_1 
       (.I0(\data_sample_reg_reg[8]_8 [3]),
        .I1(data_read_select[3]),
        .I2(\Serial_Dbg_Intf.data_read_reg[28]_i_2_n_0 ),
        .I3(data_read_select[2]),
        .I4(\Serial_Dbg_Intf.data_read_reg[28]_i_3_n_0 ),
        .O(\data_sample_reg[0]_23 [28]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Serial_Dbg_Intf.data_read_reg[28]_i_2 
       (.I0(\data_sample_reg_reg[7]_7 [3]),
        .I1(\data_sample_reg_reg[6]_6 [3]),
        .I2(data_read_select[1]),
        .I3(\data_sample_reg_reg[5]_5 [3]),
        .I4(data_read_select[0]),
        .I5(\data_sample_reg_reg[4]_4 [3]),
        .O(\Serial_Dbg_Intf.data_read_reg[28]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Serial_Dbg_Intf.data_read_reg[28]_i_3 
       (.I0(\data_sample_reg_reg[3]_3 [3]),
        .I1(\data_sample_reg_reg[2]_2 [3]),
        .I2(data_read_select[1]),
        .I3(\data_sample_reg_reg[1]_1 [3]),
        .I4(data_read_select[0]),
        .I5(\data_sample_reg_reg[0]_0 [3]),
        .O(\Serial_Dbg_Intf.data_read_reg[28]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Serial_Dbg_Intf.data_read_reg[29]_i_1 
       (.I0(\data_sample_reg_reg[8]_8 [2]),
        .I1(data_read_select[3]),
        .I2(\Serial_Dbg_Intf.data_read_reg[29]_i_2_n_0 ),
        .I3(data_read_select[2]),
        .I4(\Serial_Dbg_Intf.data_read_reg[29]_i_3_n_0 ),
        .O(\data_sample_reg[0]_23 [29]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Serial_Dbg_Intf.data_read_reg[29]_i_2 
       (.I0(\data_sample_reg_reg[7]_7 [2]),
        .I1(\data_sample_reg_reg[6]_6 [2]),
        .I2(data_read_select[1]),
        .I3(\data_sample_reg_reg[5]_5 [2]),
        .I4(data_read_select[0]),
        .I5(\data_sample_reg_reg[4]_4 [2]),
        .O(\Serial_Dbg_Intf.data_read_reg[29]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Serial_Dbg_Intf.data_read_reg[29]_i_3 
       (.I0(\data_sample_reg_reg[3]_3 [2]),
        .I1(\data_sample_reg_reg[2]_2 [2]),
        .I2(data_read_select[1]),
        .I3(\data_sample_reg_reg[1]_1 [2]),
        .I4(data_read_select[0]),
        .I5(\data_sample_reg_reg[0]_0 [2]),
        .O(\Serial_Dbg_Intf.data_read_reg[29]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Serial_Dbg_Intf.data_read_reg[2]_i_1 
       (.I0(\data_sample_reg_reg[8]_8 [29]),
        .I1(data_read_select[3]),
        .I2(\Serial_Dbg_Intf.data_read_reg[2]_i_2_n_0 ),
        .I3(data_read_select[2]),
        .I4(\Serial_Dbg_Intf.data_read_reg[2]_i_3_n_0 ),
        .O(\data_sample_reg[0]_23 [2]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Serial_Dbg_Intf.data_read_reg[2]_i_2 
       (.I0(\data_sample_reg_reg[7]_7 [29]),
        .I1(\data_sample_reg_reg[6]_6 [29]),
        .I2(data_read_select[1]),
        .I3(\data_sample_reg_reg[5]_5 [29]),
        .I4(data_read_select[0]),
        .I5(\data_sample_reg_reg[4]_4 [29]),
        .O(\Serial_Dbg_Intf.data_read_reg[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Serial_Dbg_Intf.data_read_reg[2]_i_3 
       (.I0(\data_sample_reg_reg[3]_3 [29]),
        .I1(\data_sample_reg_reg[2]_2 [29]),
        .I2(data_read_select[1]),
        .I3(\data_sample_reg_reg[1]_1 [29]),
        .I4(data_read_select[0]),
        .I5(\data_sample_reg_reg[0]_0 [29]),
        .O(\Serial_Dbg_Intf.data_read_reg[2]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Serial_Dbg_Intf.data_read_reg[30]_i_1 
       (.I0(\data_sample_reg_reg[8]_8 [1]),
        .I1(data_read_select[3]),
        .I2(\Serial_Dbg_Intf.data_read_reg[30]_i_2_n_0 ),
        .I3(data_read_select[2]),
        .I4(\Serial_Dbg_Intf.data_read_reg[30]_i_3_n_0 ),
        .O(\data_sample_reg[0]_23 [30]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Serial_Dbg_Intf.data_read_reg[30]_i_2 
       (.I0(\data_sample_reg_reg[7]_7 [1]),
        .I1(\data_sample_reg_reg[6]_6 [1]),
        .I2(data_read_select[1]),
        .I3(\data_sample_reg_reg[5]_5 [1]),
        .I4(data_read_select[0]),
        .I5(\data_sample_reg_reg[4]_4 [1]),
        .O(\Serial_Dbg_Intf.data_read_reg[30]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Serial_Dbg_Intf.data_read_reg[30]_i_3 
       (.I0(\data_sample_reg_reg[3]_3 [1]),
        .I1(\data_sample_reg_reg[2]_2 [1]),
        .I2(data_read_select[1]),
        .I3(\data_sample_reg_reg[1]_1 [1]),
        .I4(data_read_select[0]),
        .I5(\data_sample_reg_reg[0]_0 [1]),
        .O(\Serial_Dbg_Intf.data_read_reg[30]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Serial_Dbg_Intf.data_read_reg[31]_i_1 
       (.I0(\data_sample_reg_reg[8]_8 [0]),
        .I1(data_read_select[3]),
        .I2(\Serial_Dbg_Intf.data_read_reg[31]_i_2_n_0 ),
        .I3(data_read_select[2]),
        .I4(\Serial_Dbg_Intf.data_read_reg[31]_i_3_n_0 ),
        .O(\data_sample_reg[0]_23 [31]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Serial_Dbg_Intf.data_read_reg[31]_i_2 
       (.I0(\data_sample_reg_reg[7]_7 [0]),
        .I1(\data_sample_reg_reg[6]_6 [0]),
        .I2(data_read_select[1]),
        .I3(\data_sample_reg_reg[5]_5 [0]),
        .I4(data_read_select[0]),
        .I5(\data_sample_reg_reg[4]_4 [0]),
        .O(\Serial_Dbg_Intf.data_read_reg[31]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Serial_Dbg_Intf.data_read_reg[31]_i_3 
       (.I0(\data_sample_reg_reg[3]_3 [0]),
        .I1(\data_sample_reg_reg[2]_2 [0]),
        .I2(data_read_select[1]),
        .I3(\data_sample_reg_reg[1]_1 [0]),
        .I4(data_read_select[0]),
        .I5(\data_sample_reg_reg[0]_0 [0]),
        .O(\Serial_Dbg_Intf.data_read_reg[31]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Serial_Dbg_Intf.data_read_reg[3]_i_1 
       (.I0(\data_sample_reg_reg[8]_8 [28]),
        .I1(data_read_select[3]),
        .I2(\Serial_Dbg_Intf.data_read_reg[3]_i_2_n_0 ),
        .I3(data_read_select[2]),
        .I4(\Serial_Dbg_Intf.data_read_reg[3]_i_3_n_0 ),
        .O(\data_sample_reg[0]_23 [3]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Serial_Dbg_Intf.data_read_reg[3]_i_2 
       (.I0(\data_sample_reg_reg[7]_7 [28]),
        .I1(\data_sample_reg_reg[6]_6 [28]),
        .I2(data_read_select[1]),
        .I3(\data_sample_reg_reg[5]_5 [28]),
        .I4(data_read_select[0]),
        .I5(\data_sample_reg_reg[4]_4 [28]),
        .O(\Serial_Dbg_Intf.data_read_reg[3]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Serial_Dbg_Intf.data_read_reg[3]_i_3 
       (.I0(\data_sample_reg_reg[3]_3 [28]),
        .I1(\data_sample_reg_reg[2]_2 [28]),
        .I2(data_read_select[1]),
        .I3(\data_sample_reg_reg[1]_1 [28]),
        .I4(data_read_select[0]),
        .I5(\data_sample_reg_reg[0]_0 [28]),
        .O(\Serial_Dbg_Intf.data_read_reg[3]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Serial_Dbg_Intf.data_read_reg[4]_i_1 
       (.I0(\data_sample_reg_reg[8]_8 [27]),
        .I1(data_read_select[3]),
        .I2(\Serial_Dbg_Intf.data_read_reg[4]_i_2_n_0 ),
        .I3(data_read_select[2]),
        .I4(\Serial_Dbg_Intf.data_read_reg[4]_i_3_n_0 ),
        .O(\data_sample_reg[0]_23 [4]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Serial_Dbg_Intf.data_read_reg[4]_i_2 
       (.I0(\data_sample_reg_reg[7]_7 [27]),
        .I1(\data_sample_reg_reg[6]_6 [27]),
        .I2(data_read_select[1]),
        .I3(\data_sample_reg_reg[5]_5 [27]),
        .I4(data_read_select[0]),
        .I5(\data_sample_reg_reg[4]_4 [27]),
        .O(\Serial_Dbg_Intf.data_read_reg[4]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Serial_Dbg_Intf.data_read_reg[4]_i_3 
       (.I0(\data_sample_reg_reg[3]_3 [27]),
        .I1(\data_sample_reg_reg[2]_2 [27]),
        .I2(data_read_select[1]),
        .I3(\data_sample_reg_reg[1]_1 [27]),
        .I4(data_read_select[0]),
        .I5(\data_sample_reg_reg[0]_0 [27]),
        .O(\Serial_Dbg_Intf.data_read_reg[4]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Serial_Dbg_Intf.data_read_reg[5]_i_1 
       (.I0(\data_sample_reg_reg[8]_8 [26]),
        .I1(data_read_select[3]),
        .I2(\Serial_Dbg_Intf.data_read_reg[5]_i_2_n_0 ),
        .I3(data_read_select[2]),
        .I4(\Serial_Dbg_Intf.data_read_reg[5]_i_3_n_0 ),
        .O(\data_sample_reg[0]_23 [5]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Serial_Dbg_Intf.data_read_reg[5]_i_2 
       (.I0(\data_sample_reg_reg[7]_7 [26]),
        .I1(\data_sample_reg_reg[6]_6 [26]),
        .I2(data_read_select[1]),
        .I3(\data_sample_reg_reg[5]_5 [26]),
        .I4(data_read_select[0]),
        .I5(\data_sample_reg_reg[4]_4 [26]),
        .O(\Serial_Dbg_Intf.data_read_reg[5]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Serial_Dbg_Intf.data_read_reg[5]_i_3 
       (.I0(\data_sample_reg_reg[3]_3 [26]),
        .I1(\data_sample_reg_reg[2]_2 [26]),
        .I2(data_read_select[1]),
        .I3(\data_sample_reg_reg[1]_1 [26]),
        .I4(data_read_select[0]),
        .I5(\data_sample_reg_reg[0]_0 [26]),
        .O(\Serial_Dbg_Intf.data_read_reg[5]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Serial_Dbg_Intf.data_read_reg[6]_i_1 
       (.I0(\data_sample_reg_reg[8]_8 [25]),
        .I1(data_read_select[3]),
        .I2(\Serial_Dbg_Intf.data_read_reg[6]_i_2_n_0 ),
        .I3(data_read_select[2]),
        .I4(\Serial_Dbg_Intf.data_read_reg[6]_i_3_n_0 ),
        .O(\data_sample_reg[0]_23 [6]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Serial_Dbg_Intf.data_read_reg[6]_i_2 
       (.I0(\data_sample_reg_reg[7]_7 [25]),
        .I1(\data_sample_reg_reg[6]_6 [25]),
        .I2(data_read_select[1]),
        .I3(\data_sample_reg_reg[5]_5 [25]),
        .I4(data_read_select[0]),
        .I5(\data_sample_reg_reg[4]_4 [25]),
        .O(\Serial_Dbg_Intf.data_read_reg[6]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Serial_Dbg_Intf.data_read_reg[6]_i_3 
       (.I0(\data_sample_reg_reg[3]_3 [25]),
        .I1(\data_sample_reg_reg[2]_2 [25]),
        .I2(data_read_select[1]),
        .I3(\data_sample_reg_reg[1]_1 [25]),
        .I4(data_read_select[0]),
        .I5(\data_sample_reg_reg[0]_0 [25]),
        .O(\Serial_Dbg_Intf.data_read_reg[6]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Serial_Dbg_Intf.data_read_reg[7]_i_1 
       (.I0(\data_sample_reg_reg[8]_8 [24]),
        .I1(data_read_select[3]),
        .I2(\Serial_Dbg_Intf.data_read_reg[7]_i_2_n_0 ),
        .I3(data_read_select[2]),
        .I4(\Serial_Dbg_Intf.data_read_reg[7]_i_3_n_0 ),
        .O(\data_sample_reg[0]_23 [7]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Serial_Dbg_Intf.data_read_reg[7]_i_2 
       (.I0(\data_sample_reg_reg[7]_7 [24]),
        .I1(\data_sample_reg_reg[6]_6 [24]),
        .I2(data_read_select[1]),
        .I3(\data_sample_reg_reg[5]_5 [24]),
        .I4(data_read_select[0]),
        .I5(\data_sample_reg_reg[4]_4 [24]),
        .O(\Serial_Dbg_Intf.data_read_reg[7]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Serial_Dbg_Intf.data_read_reg[7]_i_3 
       (.I0(\data_sample_reg_reg[3]_3 [24]),
        .I1(\data_sample_reg_reg[2]_2 [24]),
        .I2(data_read_select[1]),
        .I3(\data_sample_reg_reg[1]_1 [24]),
        .I4(data_read_select[0]),
        .I5(\data_sample_reg_reg[0]_0 [24]),
        .O(\Serial_Dbg_Intf.data_read_reg[7]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Serial_Dbg_Intf.data_read_reg[8]_i_1 
       (.I0(\data_sample_reg_reg[8]_8 [23]),
        .I1(data_read_select[3]),
        .I2(\Serial_Dbg_Intf.data_read_reg[8]_i_2_n_0 ),
        .I3(data_read_select[2]),
        .I4(\Serial_Dbg_Intf.data_read_reg[8]_i_3_n_0 ),
        .O(\data_sample_reg[0]_23 [8]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Serial_Dbg_Intf.data_read_reg[8]_i_2 
       (.I0(\data_sample_reg_reg[7]_7 [23]),
        .I1(\data_sample_reg_reg[6]_6 [23]),
        .I2(data_read_select[1]),
        .I3(\data_sample_reg_reg[5]_5 [23]),
        .I4(data_read_select[0]),
        .I5(\data_sample_reg_reg[4]_4 [23]),
        .O(\Serial_Dbg_Intf.data_read_reg[8]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Serial_Dbg_Intf.data_read_reg[8]_i_3 
       (.I0(\data_sample_reg_reg[3]_3 [23]),
        .I1(\data_sample_reg_reg[2]_2 [23]),
        .I2(data_read_select[1]),
        .I3(\data_sample_reg_reg[1]_1 [23]),
        .I4(data_read_select[0]),
        .I5(\data_sample_reg_reg[0]_0 [23]),
        .O(\Serial_Dbg_Intf.data_read_reg[8]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Serial_Dbg_Intf.data_read_reg[9]_i_1 
       (.I0(\data_sample_reg_reg[8]_8 [22]),
        .I1(data_read_select[3]),
        .I2(\Serial_Dbg_Intf.data_read_reg[9]_i_2_n_0 ),
        .I3(data_read_select[2]),
        .I4(\Serial_Dbg_Intf.data_read_reg[9]_i_3_n_0 ),
        .O(\data_sample_reg[0]_23 [9]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Serial_Dbg_Intf.data_read_reg[9]_i_2 
       (.I0(\data_sample_reg_reg[7]_7 [22]),
        .I1(\data_sample_reg_reg[6]_6 [22]),
        .I2(data_read_select[1]),
        .I3(\data_sample_reg_reg[5]_5 [22]),
        .I4(data_read_select[0]),
        .I5(\data_sample_reg_reg[4]_4 [22]),
        .O(\Serial_Dbg_Intf.data_read_reg[9]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Serial_Dbg_Intf.data_read_reg[9]_i_3 
       (.I0(\data_sample_reg_reg[3]_3 [22]),
        .I1(\data_sample_reg_reg[2]_2 [22]),
        .I2(data_read_select[1]),
        .I3(\data_sample_reg_reg[1]_1 [22]),
        .I4(data_read_select[0]),
        .I5(\data_sample_reg_reg[0]_0 [22]),
        .O(\Serial_Dbg_Intf.data_read_reg[9]_i_3_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[0] 
       (.C(Dbg_Clk),
        .CE(data_read_reg0),
        .CLR(status_reg_rst),
        .D(\data_sample_reg[0]_23 [0]),
        .Q(data_read_reg[0]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[10] 
       (.C(Dbg_Clk),
        .CE(data_read_reg0),
        .CLR(status_reg_rst),
        .D(\data_sample_reg[0]_23 [10]),
        .Q(data_read_reg[10]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[11] 
       (.C(Dbg_Clk),
        .CE(data_read_reg0),
        .CLR(status_reg_rst),
        .D(\data_sample_reg[0]_23 [11]),
        .Q(data_read_reg[11]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[12] 
       (.C(Dbg_Clk),
        .CE(data_read_reg0),
        .CLR(status_reg_rst),
        .D(\data_sample_reg[0]_23 [12]),
        .Q(data_read_reg[12]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[13] 
       (.C(Dbg_Clk),
        .CE(data_read_reg0),
        .CLR(status_reg_rst),
        .D(\data_sample_reg[0]_23 [13]),
        .Q(data_read_reg[13]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[14] 
       (.C(Dbg_Clk),
        .CE(data_read_reg0),
        .CLR(status_reg_rst),
        .D(\data_sample_reg[0]_23 [14]),
        .Q(data_read_reg[14]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[15] 
       (.C(Dbg_Clk),
        .CE(data_read_reg0),
        .CLR(status_reg_rst),
        .D(\data_sample_reg[0]_23 [15]),
        .Q(data_read_reg[15]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[16] 
       (.C(Dbg_Clk),
        .CE(data_read_reg0),
        .CLR(status_reg_rst),
        .D(\data_sample_reg[0]_23 [16]),
        .Q(data_read_reg[16]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[17] 
       (.C(Dbg_Clk),
        .CE(data_read_reg0),
        .CLR(status_reg_rst),
        .D(\data_sample_reg[0]_23 [17]),
        .Q(data_read_reg[17]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[18] 
       (.C(Dbg_Clk),
        .CE(data_read_reg0),
        .CLR(status_reg_rst),
        .D(\data_sample_reg[0]_23 [18]),
        .Q(data_read_reg[18]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[19] 
       (.C(Dbg_Clk),
        .CE(data_read_reg0),
        .CLR(status_reg_rst),
        .D(\data_sample_reg[0]_23 [19]),
        .Q(data_read_reg[19]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[1] 
       (.C(Dbg_Clk),
        .CE(data_read_reg0),
        .CLR(status_reg_rst),
        .D(\data_sample_reg[0]_23 [1]),
        .Q(data_read_reg[1]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[20] 
       (.C(Dbg_Clk),
        .CE(data_read_reg0),
        .CLR(status_reg_rst),
        .D(\data_sample_reg[0]_23 [20]),
        .Q(data_read_reg[20]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[21] 
       (.C(Dbg_Clk),
        .CE(data_read_reg0),
        .CLR(status_reg_rst),
        .D(\data_sample_reg[0]_23 [21]),
        .Q(data_read_reg[21]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[22] 
       (.C(Dbg_Clk),
        .CE(data_read_reg0),
        .CLR(status_reg_rst),
        .D(\data_sample_reg[0]_23 [22]),
        .Q(data_read_reg[22]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[23] 
       (.C(Dbg_Clk),
        .CE(data_read_reg0),
        .CLR(status_reg_rst),
        .D(\data_sample_reg[0]_23 [23]),
        .Q(data_read_reg[23]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[24] 
       (.C(Dbg_Clk),
        .CE(data_read_reg0),
        .CLR(status_reg_rst),
        .D(\data_sample_reg[0]_23 [24]),
        .Q(data_read_reg[24]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[25] 
       (.C(Dbg_Clk),
        .CE(data_read_reg0),
        .CLR(status_reg_rst),
        .D(\data_sample_reg[0]_23 [25]),
        .Q(data_read_reg[25]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[26] 
       (.C(Dbg_Clk),
        .CE(data_read_reg0),
        .CLR(status_reg_rst),
        .D(\data_sample_reg[0]_23 [26]),
        .Q(data_read_reg[26]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[27] 
       (.C(Dbg_Clk),
        .CE(data_read_reg0),
        .CLR(status_reg_rst),
        .D(\data_sample_reg[0]_23 [27]),
        .Q(data_read_reg[27]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[28] 
       (.C(Dbg_Clk),
        .CE(data_read_reg0),
        .CLR(status_reg_rst),
        .D(\data_sample_reg[0]_23 [28]),
        .Q(data_read_reg[28]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[29] 
       (.C(Dbg_Clk),
        .CE(data_read_reg0),
        .CLR(status_reg_rst),
        .D(\data_sample_reg[0]_23 [29]),
        .Q(data_read_reg[29]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[2] 
       (.C(Dbg_Clk),
        .CE(data_read_reg0),
        .CLR(status_reg_rst),
        .D(\data_sample_reg[0]_23 [2]),
        .Q(data_read_reg[2]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[30] 
       (.C(Dbg_Clk),
        .CE(data_read_reg0),
        .CLR(status_reg_rst),
        .D(\data_sample_reg[0]_23 [30]),
        .Q(data_read_reg[30]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[31] 
       (.C(Dbg_Clk),
        .CE(data_read_reg0),
        .CLR(status_reg_rst),
        .D(\data_sample_reg[0]_23 [31]),
        .Q(data_read_reg[31]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[3] 
       (.C(Dbg_Clk),
        .CE(data_read_reg0),
        .CLR(status_reg_rst),
        .D(\data_sample_reg[0]_23 [3]),
        .Q(data_read_reg[3]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[4] 
       (.C(Dbg_Clk),
        .CE(data_read_reg0),
        .CLR(status_reg_rst),
        .D(\data_sample_reg[0]_23 [4]),
        .Q(data_read_reg[4]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[5] 
       (.C(Dbg_Clk),
        .CE(data_read_reg0),
        .CLR(status_reg_rst),
        .D(\data_sample_reg[0]_23 [5]),
        .Q(data_read_reg[5]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[6] 
       (.C(Dbg_Clk),
        .CE(data_read_reg0),
        .CLR(status_reg_rst),
        .D(\data_sample_reg[0]_23 [6]),
        .Q(data_read_reg[6]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[7] 
       (.C(Dbg_Clk),
        .CE(data_read_reg0),
        .CLR(status_reg_rst),
        .D(\data_sample_reg[0]_23 [7]),
        .Q(data_read_reg[7]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[8] 
       (.C(Dbg_Clk),
        .CE(data_read_reg0),
        .CLR(status_reg_rst),
        .D(\data_sample_reg[0]_23 [8]),
        .Q(data_read_reg[8]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[9] 
       (.C(Dbg_Clk),
        .CE(data_read_reg0),
        .CLR(status_reg_rst),
        .D(\data_sample_reg[0]_23 [9]),
        .Q(data_read_reg[9]));
  (* SOFT_HLUTNM = "soft_lutpair80" *) 
  LUT4 #(
    .INIT(16'h00EF)) 
    \Serial_Dbg_Intf.data_read_select[0]_i_1 
       (.I0(data_read_select[1]),
        .I1(data_read_select[2]),
        .I2(data_read_select[3]),
        .I3(data_read_select[0]),
        .O(\Serial_Dbg_Intf.data_read_select[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair81" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \Serial_Dbg_Intf.data_read_select[1]_i_1 
       (.I0(data_read_select[1]),
        .I1(data_read_select[0]),
        .O(\Serial_Dbg_Intf.data_read_select[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair81" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \Serial_Dbg_Intf.data_read_select[2]_i_1 
       (.I0(data_read_select[1]),
        .I1(data_read_select[0]),
        .I2(data_read_select[2]),
        .O(\Serial_Dbg_Intf.data_read_select[2]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h0008)) 
    \Serial_Dbg_Intf.data_read_select[3]_i_1 
       (.I0(Dbg_Capture),
        .I1(Dbg_Reg_En[5]),
        .I2(Dbg_Reg_En[2]),
        .I3(\Dbg_Reg_En[3]_0 ),
        .O(data_read_reg0));
  (* SOFT_HLUTNM = "soft_lutpair80" *) 
  LUT4 #(
    .INIT(16'h7E80)) 
    \Serial_Dbg_Intf.data_read_select[3]_i_2 
       (.I0(data_read_select[1]),
        .I1(data_read_select[0]),
        .I2(data_read_select[2]),
        .I3(data_read_select[3]),
        .O(\Serial_Dbg_Intf.data_read_select[3]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h00E2)) 
    \Serial_Dbg_Intf.data_read_select[3]_i_3 
       (.I0(reset_cmd),
        .I1(Scan_Reset_Sel),
        .I2(Scan_Reset),
        .I3(Scan_En),
        .O(status_reg_rst));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_select_reg[0] 
       (.C(Dbg_Clk),
        .CE(data_read_reg0),
        .CLR(status_reg_rst),
        .D(\Serial_Dbg_Intf.data_read_select[0]_i_1_n_0 ),
        .Q(data_read_select[0]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_select_reg[1] 
       (.C(Dbg_Clk),
        .CE(data_read_reg0),
        .CLR(status_reg_rst),
        .D(\Serial_Dbg_Intf.data_read_select[1]_i_1_n_0 ),
        .Q(data_read_select[1]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_select_reg[2] 
       (.C(Dbg_Clk),
        .CE(data_read_reg0),
        .CLR(status_reg_rst),
        .D(\Serial_Dbg_Intf.data_read_select[2]_i_1_n_0 ),
        .Q(data_read_select[2]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_select_reg[3] 
       (.C(Dbg_Clk),
        .CE(data_read_reg0),
        .CLR(status_reg_rst),
        .D(\Serial_Dbg_Intf.data_read_select[3]_i_2_n_0 ),
        .Q(data_read_select[3]));
  LUT3 #(
    .INIT(8'h04)) 
    \Serial_Dbg_Intf.data_write_TClk_i_1 
       (.I0(Dbg_Reg_En[2]),
        .I1(Dbg_Reg_En[5]),
        .I2(Dbg_Reg_En_3_sn_1),
        .O(data_Write_Reg_En));
  LUT4 #(
    .INIT(16'h00E2)) 
    \Serial_Dbg_Intf.data_write_TClk_i_2 
       (.I0(data_write_rst_reg_n_0),
        .I1(Scan_Reset_Sel),
        .I2(Scan_Reset),
        .I3(Scan_En),
        .O(data_write_reg_rst));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFF7FFF)) 
    \Serial_Dbg_Intf.data_write_TClk_i_3 
       (.I0(Dbg_Reg_En[3]),
        .I1(Dbg_Reg_En[6]),
        .I2(Dbg_Reg_En[1]),
        .I3(Dbg_Reg_En[7]),
        .I4(Dbg_Reg_En[0]),
        .I5(Dbg_Reg_En[4]),
        .O(Dbg_Reg_En_3_sn_1));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_write_TClk_reg 
       (.C(Dbg_Update),
        .CE(data_Write_Reg_En),
        .CLR(data_write_reg_rst),
        .D(data_Write_Reg_En),
        .Q(data_write_TClk));
  FDRE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_write_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(data_write0),
        .Q(data_write),
        .R(sync_reset));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_write_reg_reg[0] 
       (.C(Dbg_Update),
        .CE(data_Write_Reg_En),
        .CLR(data_write_reg_rst),
        .D(\Serial_Dbg_Intf.data_write_reg_reg[0]_0 [31]),
        .Q(data_write_reg[0]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_write_reg_reg[10] 
       (.C(Dbg_Update),
        .CE(data_Write_Reg_En),
        .CLR(data_write_reg_rst),
        .D(\Serial_Dbg_Intf.data_write_reg_reg[0]_0 [21]),
        .Q(data_write_reg[10]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_write_reg_reg[11] 
       (.C(Dbg_Update),
        .CE(data_Write_Reg_En),
        .CLR(data_write_reg_rst),
        .D(\Serial_Dbg_Intf.data_write_reg_reg[0]_0 [20]),
        .Q(data_write_reg[11]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_write_reg_reg[12] 
       (.C(Dbg_Update),
        .CE(data_Write_Reg_En),
        .CLR(data_write_reg_rst),
        .D(\Serial_Dbg_Intf.data_write_reg_reg[0]_0 [19]),
        .Q(data_write_reg[12]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_write_reg_reg[13] 
       (.C(Dbg_Update),
        .CE(data_Write_Reg_En),
        .CLR(data_write_reg_rst),
        .D(\Serial_Dbg_Intf.data_write_reg_reg[0]_0 [18]),
        .Q(data_write_reg[13]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_write_reg_reg[14] 
       (.C(Dbg_Update),
        .CE(data_Write_Reg_En),
        .CLR(data_write_reg_rst),
        .D(\Serial_Dbg_Intf.data_write_reg_reg[0]_0 [17]),
        .Q(data_write_reg[14]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_write_reg_reg[15] 
       (.C(Dbg_Update),
        .CE(data_Write_Reg_En),
        .CLR(data_write_reg_rst),
        .D(\Serial_Dbg_Intf.data_write_reg_reg[0]_0 [16]),
        .Q(data_write_reg[15]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_write_reg_reg[16] 
       (.C(Dbg_Update),
        .CE(data_Write_Reg_En),
        .CLR(data_write_reg_rst),
        .D(\Serial_Dbg_Intf.data_write_reg_reg[0]_0 [15]),
        .Q(data_write_reg[16]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_write_reg_reg[17] 
       (.C(Dbg_Update),
        .CE(data_Write_Reg_En),
        .CLR(data_write_reg_rst),
        .D(\Serial_Dbg_Intf.data_write_reg_reg[0]_0 [14]),
        .Q(data_write_reg[17]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_write_reg_reg[18] 
       (.C(Dbg_Update),
        .CE(data_Write_Reg_En),
        .CLR(data_write_reg_rst),
        .D(\Serial_Dbg_Intf.data_write_reg_reg[0]_0 [13]),
        .Q(data_write_reg[18]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_write_reg_reg[19] 
       (.C(Dbg_Update),
        .CE(data_Write_Reg_En),
        .CLR(data_write_reg_rst),
        .D(\Serial_Dbg_Intf.data_write_reg_reg[0]_0 [12]),
        .Q(data_write_reg[19]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_write_reg_reg[1] 
       (.C(Dbg_Update),
        .CE(data_Write_Reg_En),
        .CLR(data_write_reg_rst),
        .D(\Serial_Dbg_Intf.data_write_reg_reg[0]_0 [30]),
        .Q(data_write_reg[1]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_write_reg_reg[20] 
       (.C(Dbg_Update),
        .CE(data_Write_Reg_En),
        .CLR(data_write_reg_rst),
        .D(\Serial_Dbg_Intf.data_write_reg_reg[0]_0 [11]),
        .Q(data_write_reg[20]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_write_reg_reg[21] 
       (.C(Dbg_Update),
        .CE(data_Write_Reg_En),
        .CLR(data_write_reg_rst),
        .D(\Serial_Dbg_Intf.data_write_reg_reg[0]_0 [10]),
        .Q(data_write_reg[21]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_write_reg_reg[22] 
       (.C(Dbg_Update),
        .CE(data_Write_Reg_En),
        .CLR(data_write_reg_rst),
        .D(\Serial_Dbg_Intf.data_write_reg_reg[0]_0 [9]),
        .Q(data_write_reg[22]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_write_reg_reg[23] 
       (.C(Dbg_Update),
        .CE(data_Write_Reg_En),
        .CLR(data_write_reg_rst),
        .D(\Serial_Dbg_Intf.data_write_reg_reg[0]_0 [8]),
        .Q(data_write_reg[23]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_write_reg_reg[24] 
       (.C(Dbg_Update),
        .CE(data_Write_Reg_En),
        .CLR(data_write_reg_rst),
        .D(\Serial_Dbg_Intf.data_write_reg_reg[0]_0 [7]),
        .Q(data_write_reg[24]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_write_reg_reg[25] 
       (.C(Dbg_Update),
        .CE(data_Write_Reg_En),
        .CLR(data_write_reg_rst),
        .D(\Serial_Dbg_Intf.data_write_reg_reg[0]_0 [6]),
        .Q(data_write_reg[25]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_write_reg_reg[26] 
       (.C(Dbg_Update),
        .CE(data_Write_Reg_En),
        .CLR(data_write_reg_rst),
        .D(\Serial_Dbg_Intf.data_write_reg_reg[0]_0 [5]),
        .Q(data_write_reg[26]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_write_reg_reg[27] 
       (.C(Dbg_Update),
        .CE(data_Write_Reg_En),
        .CLR(data_write_reg_rst),
        .D(\Serial_Dbg_Intf.data_write_reg_reg[0]_0 [4]),
        .Q(data_write_reg[27]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_write_reg_reg[28] 
       (.C(Dbg_Update),
        .CE(data_Write_Reg_En),
        .CLR(data_write_reg_rst),
        .D(\Serial_Dbg_Intf.data_write_reg_reg[0]_0 [3]),
        .Q(data_write_reg[28]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_write_reg_reg[29] 
       (.C(Dbg_Update),
        .CE(data_Write_Reg_En),
        .CLR(data_write_reg_rst),
        .D(\Serial_Dbg_Intf.data_write_reg_reg[0]_0 [2]),
        .Q(data_write_reg[29]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_write_reg_reg[2] 
       (.C(Dbg_Update),
        .CE(data_Write_Reg_En),
        .CLR(data_write_reg_rst),
        .D(\Serial_Dbg_Intf.data_write_reg_reg[0]_0 [29]),
        .Q(data_write_reg[2]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_write_reg_reg[30] 
       (.C(Dbg_Update),
        .CE(data_Write_Reg_En),
        .CLR(data_write_reg_rst),
        .D(\Serial_Dbg_Intf.data_write_reg_reg[0]_0 [1]),
        .Q(data_write_reg[30]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_write_reg_reg[31] 
       (.C(Dbg_Update),
        .CE(data_Write_Reg_En),
        .CLR(data_write_reg_rst),
        .D(\Serial_Dbg_Intf.data_write_reg_reg[0]_0 [0]),
        .Q(data_write_reg[31]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_write_reg_reg[3] 
       (.C(Dbg_Update),
        .CE(data_Write_Reg_En),
        .CLR(data_write_reg_rst),
        .D(\Serial_Dbg_Intf.data_write_reg_reg[0]_0 [28]),
        .Q(data_write_reg[3]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_write_reg_reg[4] 
       (.C(Dbg_Update),
        .CE(data_Write_Reg_En),
        .CLR(data_write_reg_rst),
        .D(\Serial_Dbg_Intf.data_write_reg_reg[0]_0 [27]),
        .Q(data_write_reg[4]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_write_reg_reg[5] 
       (.C(Dbg_Update),
        .CE(data_Write_Reg_En),
        .CLR(data_write_reg_rst),
        .D(\Serial_Dbg_Intf.data_write_reg_reg[0]_0 [26]),
        .Q(data_write_reg[5]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_write_reg_reg[6] 
       (.C(Dbg_Update),
        .CE(data_Write_Reg_En),
        .CLR(data_write_reg_rst),
        .D(\Serial_Dbg_Intf.data_write_reg_reg[0]_0 [25]),
        .Q(data_write_reg[6]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_write_reg_reg[7] 
       (.C(Dbg_Update),
        .CE(data_Write_Reg_En),
        .CLR(data_write_reg_rst),
        .D(\Serial_Dbg_Intf.data_write_reg_reg[0]_0 [24]),
        .Q(data_write_reg[7]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_write_reg_reg[8] 
       (.C(Dbg_Update),
        .CE(data_Write_Reg_En),
        .CLR(data_write_reg_rst),
        .D(\Serial_Dbg_Intf.data_write_reg_reg[0]_0 [23]),
        .Q(data_write_reg[8]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_write_reg_reg[9] 
       (.C(Dbg_Update),
        .CE(data_Write_Reg_En),
        .CLR(data_write_reg_rst),
        .D(\Serial_Dbg_Intf.data_write_reg_reg[0]_0 [22]),
        .Q(data_write_reg[9]));
  FDRE \Serial_Dbg_Intf.reset_cmd_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(reset_cmd0),
        .Q(reset_cmd),
        .R(sync_reset));
  FDRE \Serial_Dbg_Intf.sample_cmd_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(sample_cmd0),
        .Q(sample_cmd),
        .R(sync_reset));
  FDRE \Serial_Dbg_Intf.sample_synced_1_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[6]),
        .Q(\Serial_Dbg_Intf.sample_synced_1_reg[0]_0 [6]),
        .R(sync_reset));
  FDRE \Serial_Dbg_Intf.sample_synced_1_reg[10] 
       (.C(Clk),
        .CE(1'b1),
        .D(sample_synced[10]),
        .Q(\Serial_Dbg_Intf.sample_synced_1_reg_n_0_[10] ),
        .R(sync_reset));
  FDRE \Serial_Dbg_Intf.sample_synced_1_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[5]),
        .Q(\Serial_Dbg_Intf.sample_synced_1_reg[0]_0 [5]),
        .R(sync_reset));
  FDRE \Serial_Dbg_Intf.sample_synced_1_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[4]),
        .Q(\Serial_Dbg_Intf.sample_synced_1_reg[0]_0 [4]),
        .R(sync_reset));
  FDRE \Serial_Dbg_Intf.sample_synced_1_reg[3] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[3]),
        .Q(\Serial_Dbg_Intf.sample_synced_1_reg[0]_0 [3]),
        .R(sync_reset));
  FDRE \Serial_Dbg_Intf.sample_synced_1_reg[4] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[2]),
        .Q(\Serial_Dbg_Intf.sample_synced_1_reg[0]_0 [2]),
        .R(sync_reset));
  FDRE \Serial_Dbg_Intf.sample_synced_1_reg[5] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[1]),
        .Q(\Serial_Dbg_Intf.sample_synced_1_reg[0]_0 [1]),
        .R(sync_reset));
  FDRE \Serial_Dbg_Intf.sample_synced_1_reg[6] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[0]),
        .Q(\Serial_Dbg_Intf.sample_synced_1_reg[0]_0 [0]),
        .R(sync_reset));
  FDRE \Serial_Dbg_Intf.sample_synced_1_reg[7] 
       (.C(Clk),
        .CE(1'b1),
        .D(sample_synced[7]),
        .Q(p_1_in65_in),
        .R(sync_reset));
  FDRE \Serial_Dbg_Intf.sample_synced_1_reg[8] 
       (.C(Clk),
        .CE(1'b1),
        .D(sample_synced[8]),
        .Q(p_1_in66_in),
        .R(sync_reset));
  FDRE \Serial_Dbg_Intf.sample_synced_1_reg[9] 
       (.C(Clk),
        .CE(1'b1),
        .D(sample_synced[9]),
        .Q(\Serial_Dbg_Intf.sample_synced_1_reg_n_0_[9] ),
        .R(sync_reset));
  FDRE \Serial_Dbg_Intf.start_cmd_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(start_cmd0),
        .Q(start_cmd),
        .R(sync_reset));
  FDRE \Serial_Dbg_Intf.stat_pause_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Serial_Dbg_Intf.sync_sample_n_14 ),
        .Q(stat_pause),
        .R(1'b0));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \Serial_Dbg_Intf.status_reg[0]_i_1 
       (.I0(\status_sample_reg_reg[5]_14 [1]),
        .I1(status_select[0]),
        .I2(\status_sample_reg_reg[4]_13 [1]),
        .I3(status_select[2]),
        .I4(\Serial_Dbg_Intf.status_reg[0]_i_2_n_0 ),
        .O(\status_sample_reg[0]_24 [0]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Serial_Dbg_Intf.status_reg[0]_i_2 
       (.I0(\status_sample_reg_reg[3]_12 [1]),
        .I1(\status_sample_reg_reg[2]_11 [1]),
        .I2(status_select[1]),
        .I3(\status_sample_reg_reg[1]_10 [1]),
        .I4(status_select[0]),
        .I5(\status_sample_reg_reg[0]_9 [1]),
        .O(\Serial_Dbg_Intf.status_reg[0]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \Serial_Dbg_Intf.status_reg[1]_i_1 
       (.I0(\status_sample_reg_reg[5]_14 [0]),
        .I1(status_select[0]),
        .I2(\status_sample_reg_reg[4]_13 [0]),
        .I3(status_select[2]),
        .I4(\Serial_Dbg_Intf.status_reg[1]_i_2_n_0 ),
        .O(\status_sample_reg[0]_24 [1]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Serial_Dbg_Intf.status_reg[1]_i_2 
       (.I0(\status_sample_reg_reg[3]_12 [0]),
        .I1(\status_sample_reg_reg[2]_11 [0]),
        .I2(status_select[1]),
        .I3(\status_sample_reg_reg[1]_10 [0]),
        .I4(status_select[0]),
        .I5(\status_sample_reg_reg[0]_9 [0]),
        .O(\Serial_Dbg_Intf.status_reg[1]_i_2_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_reg_reg[0] 
       (.C(Dbg_Clk),
        .CE(status_reg0),
        .CLR(status_reg_rst),
        .D(\status_sample_reg[0]_24 [0]),
        .Q(status_reg[0]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_reg_reg[1] 
       (.C(Dbg_Clk),
        .CE(status_reg0),
        .CLR(status_reg_rst),
        .D(\status_sample_reg[0]_24 [1]),
        .Q(status_reg[1]));
  LUT1 #(
    .INIT(2'h1)) 
    \Serial_Dbg_Intf.status_select[0]_i_1 
       (.I0(status_select[0]),
        .O(\Serial_Dbg_Intf.status_select[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair82" *) 
  LUT3 #(
    .INIT(8'h52)) 
    \Serial_Dbg_Intf.status_select[1]_i_1 
       (.I0(status_select[0]),
        .I1(status_select[2]),
        .I2(status_select[1]),
        .O(\Serial_Dbg_Intf.status_select[1]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h0002)) 
    \Serial_Dbg_Intf.status_select[2]_i_1 
       (.I0(Dbg_Capture),
        .I1(Dbg_Reg_En_3_sn_1),
        .I2(Dbg_Reg_En[2]),
        .I3(Dbg_Reg_En[5]),
        .O(status_reg0));
  (* SOFT_HLUTNM = "soft_lutpair82" *) 
  LUT3 #(
    .INIT(8'h64)) 
    \Serial_Dbg_Intf.status_select[2]_i_2 
       (.I0(status_select[0]),
        .I1(status_select[2]),
        .I2(status_select[1]),
        .O(\Serial_Dbg_Intf.status_select[2]_i_2_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_select_reg[0] 
       (.C(Dbg_Clk),
        .CE(status_reg0),
        .CLR(status_reg_rst),
        .D(\Serial_Dbg_Intf.status_select[0]_i_1_n_0 ),
        .Q(status_select[0]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_select_reg[1] 
       (.C(Dbg_Clk),
        .CE(status_reg0),
        .CLR(status_reg_rst),
        .D(\Serial_Dbg_Intf.status_select[1]_i_1_n_0 ),
        .Q(status_select[1]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_select_reg[2] 
       (.C(Dbg_Clk),
        .CE(status_reg0),
        .CLR(status_reg_rst),
        .D(\Serial_Dbg_Intf.status_select[2]_i_2_n_0 ),
        .Q(status_select[2]));
  FDRE \Serial_Dbg_Intf.stop_cmd_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(stop_cmd0),
        .Q(stop_cmd),
        .R(sync_reset));
  block_design_microblaze_0_0_mb_sync_vec__parameterized3 \Serial_Dbg_Intf.sync_sample 
       (.Clk(Clk),
        .D({D,sample_synced[7],sample_synced[8],sample_synced[9],sample_synced[10]}),
        .Dbg_Trig_Ack_In(Dbg_Trig_Ack_In),
        .Dbg_Trig_Ack_Out(Dbg_Trig_Ack_Out),
        .Dbg_Trig_In(Dbg_Trig_In),
        .Dbg_Trig_Out(Dbg_Trig_Out),
        .Q({p_1_in65_in,p_1_in66_in,\Serial_Dbg_Intf.sample_synced_1_reg_n_0_[9] ,\Serial_Dbg_Intf.sample_synced_1_reg_n_0_[10] }),
        .\Serial_Dbg_Intf.sample_synced_1_reg[7] (\Serial_Dbg_Intf.sync_sample_n_17 ),
        .\Serial_Dbg_Intf.sample_synced_1_reg[8] (\Serial_Dbg_Intf.sync_sample_n_16 ),
        .\Serial_Dbg_Intf.sample_synced_1_reg[9] (\Serial_Dbg_Intf.sync_sample_n_15 ),
        .\Serial_Dbg_Intf.start_cmd_reg (\Serial_Dbg_Intf.sync_sample_n_14 ),
        .\Serial_Dbg_Intf.stat_pause_reg (stat_pause),
        .\Synchronize.use_sync_reset.sync_reg[1] ({command_reg[0],command_reg[1],command_reg[2],command_reg[3],command_reg[4]}),
        .\Synchronize.use_sync_reset.sync_reg[1]_0 (control_incr_TClk),
        .\Synchronize.use_sync_reset.sync_reg[1]_1 (data_write_TClk),
        .\Synchronize.use_sync_reset.sync_reg[2] (\Serial_Dbg_Intf.sync_sample_n_11 ),
        .start_cmd(start_cmd),
        .stat_pause0(stat_pause0),
        .stat_pause011_out(stat_pause011_out),
        .stop_cmd(stop_cmd),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_debug_stat_counter \all_statistics_counters[0].Debug_Stat_Counter_i 
       (.Clk(Clk),
        .D({status[0],status[1]}),
        .E(data_write),
        .Empty_reg_0(Empty_reg),
        .Empty_reg_1(Empty_reg_5),
        .\Gen_Simple_Counter.Access_Count_i_reg[0]_0 ({data_write_reg[0],data_write_reg[1],data_write_reg[2],data_write_reg[3],data_write_reg[4],data_write_reg[5],data_write_reg[6],data_write_reg[7],data_write_reg[8],data_write_reg[9],data_write_reg[10],data_write_reg[11],data_write_reg[12],data_write_reg[13],data_write_reg[14],data_write_reg[15],data_write_reg[16],data_write_reg[17],data_write_reg[18],data_write_reg[19],data_write_reg[20],data_write_reg[21],data_write_reg[22],data_write_reg[23],data_write_reg[24],data_write_reg[25],data_write_reg[26],data_write_reg[27],data_write_reg[28],data_write_reg[29],data_write_reg[30],data_write_reg[31]}),
        .\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ({\data_write_select_reg_n_0_[3] ,\data_write_select_reg_n_0_[2] ,\data_write_select_reg_n_0_[1] ,\data_write_select_reg_n_0_[0] }),
        .\Gen_Simple_Counter.Access_Count_i_reg[3]_0 (\Serial_Dbg_Intf.clear_cmd_reg_rep_n_0 ),
        .Is_Valid(Is_Valid),
        .\Is_Valid_reg[0]_0 (\Is_Valid_reg[0] ),
        .Q(access_count),
        .\Running_reg[0]_0 (Running),
        .Stopping_reg_0(stat_pause),
        .Stopping_reg_1(request),
        .clear_cmd(clear_cmd),
        .ready(ready),
        .sync_reset(sync_reset));
  LUT6 #(
    .INIT(64'h8F80FFFF8F800000)) 
    \all_statistics_counters[0].ready_i_1 
       (.I0(\stat_select_reg_n_0_[0][3] ),
        .I1(\all_statistics_counters[0].ready_i_2_n_0 ),
        .I2(\stat_select_reg_n_0_[0][4] ),
        .I3(\all_statistics_counters[0].request_reg_i_3_n_0 ),
        .I4(\stat_select_reg_n_0_[0][5] ),
        .I5(\all_statistics_counters[0].request_i_4_n_0 ),
        .O(\all_statistics_counters[0].ready_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hC0C0A0A00F000000)) 
    \all_statistics_counters[0].ready_i_2 
       (.I0(new_rvalid),
        .I1(new_bvalid),
        .I2(\stat_select_reg[0][2]_0 [2]),
        .I3(stat_stop),
        .I4(\stat_select_reg[0][2]_0 [0]),
        .I5(\stat_select_reg[0][2]_0 [1]),
        .O(\all_statistics_counters[0].ready_i_2_n_0 ));
  FDRE \all_statistics_counters[0].ready_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\all_statistics_counters[0].ready_i_1_n_0 ),
        .Q(ready),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h8F80FFFF8F800000)) 
    \all_statistics_counters[0].request_i_1 
       (.I0(\stat_select_reg_n_0_[0][3] ),
        .I1(\all_statistics_counters[0].request_i_2_n_0 ),
        .I2(\stat_select_reg_n_0_[0][4] ),
        .I3(\all_statistics_counters[0].request_reg_i_3_n_0 ),
        .I4(\stat_select_reg_n_0_[0][5] ),
        .I5(\all_statistics_counters[0].request_i_4_n_0 ),
        .O(\all_statistics_counters[0].request_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h3000BB3330008800)) 
    \all_statistics_counters[0].request_i_12 
       (.I0(\sample_1_reg[2]_0 [1]),
        .I1(\stat_select_reg[0][2]_0 [1]),
        .I2(\sample_1_reg[2]_0 [2]),
        .I3(valid_instr),
        .I4(\stat_select_reg[0][2]_0 [0]),
        .I5(stat5_out),
        .O(\all_statistics_counters[0].request_i_12_n_0 ));
  LUT6 #(
    .INIT(64'h00000000020202F2)) 
    \all_statistics_counters[0].request_i_13 
       (.I0(\sample_1_reg[2]_0 [4]),
        .I1(\all_statistics_counters[0].request_i_7_0 ),
        .I2(\stat_select_reg[0][2]_0 [0]),
        .I3(trace_OF_PipeRun_i),
        .I4(trace_MB_Halted_i),
        .I5(\stat_select_reg[0][2]_0 [1]),
        .O(\all_statistics_counters[0].request_i_13_n_0 ));
  LUT6 #(
    .INIT(64'hC0C0A0A00F000000)) 
    \all_statistics_counters[0].request_i_2 
       (.I0(new_arvalid__0),
        .I1(new_awvalid__0),
        .I2(\stat_select_reg[0][2]_0 [2]),
        .I3(new_interrupt_reg_n_0),
        .I4(\stat_select_reg[0][2]_0 [0]),
        .I5(\stat_select_reg[0][2]_0 [1]),
        .O(\all_statistics_counters[0].request_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \all_statistics_counters[0].request_i_4 
       (.I0(\all_statistics_counters[0].request_i_7_n_0 ),
        .I1(\all_statistics_counters[0].ready_reg_0 ),
        .I2(\stat_select_reg_n_0_[0][4] ),
        .I3(\all_statistics_counters[0].request_i_9_n_0 ),
        .I4(\stat_select_reg_n_0_[0][3] ),
        .I5(\all_statistics_counters[0].ready_reg_1 ),
        .O(\all_statistics_counters[0].request_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h00E2FFFF00E20000)) 
    \all_statistics_counters[0].request_i_6 
       (.I0(stat2_out),
        .I1(\stat_select_reg[0][2]_0 [0]),
        .I2(\all_statistics_counters[0].request_reg_i_3_0 ),
        .I3(\stat_select_reg[0][2]_0 [1]),
        .I4(\stat_select_reg[0][2]_0 [2]),
        .I5(\all_statistics_counters[0].request_i_12_n_0 ),
        .O(\all_statistics_counters[0].request_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hA202FFFFA2020000)) 
    \all_statistics_counters[0].request_i_7 
       (.I0(\stat_select_reg[0][2]_0 [1]),
        .I1(trace_MB_Halted_i_reg_0),
        .I2(\stat_select_reg[0][2]_0 [0]),
        .I3(\all_statistics_counters[0].request_i_4_0 ),
        .I4(\stat_select_reg[0][2]_0 [2]),
        .I5(\all_statistics_counters[0].request_i_13_n_0 ),
        .O(\all_statistics_counters[0].request_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h0000000010400000)) 
    \all_statistics_counters[0].request_i_9 
       (.I0(\stat_select_reg[0][2]_0 [1]),
        .I1(\stat_select_reg[0][2]_0 [0]),
        .I2(stat133_out),
        .I3(\sample_1_reg[2]_0 [3]),
        .I4(valid_instr),
        .I5(\stat_select_reg[0][2]_0 [2]),
        .O(\all_statistics_counters[0].request_i_9_n_0 ));
  FDRE \all_statistics_counters[0].request_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\all_statistics_counters[0].request_i_1_n_0 ),
        .Q(request),
        .R(1'b0));
  MUXF7 \all_statistics_counters[0].request_reg_i_3 
       (.I0(\all_statistics_counters[0].ready_reg_2 ),
        .I1(\all_statistics_counters[0].request_i_6_n_0 ),
        .O(\all_statistics_counters[0].request_reg_i_3_n_0 ),
        .S(\stat_select_reg_n_0_[0][3] ));
  block_design_microblaze_0_0_debug_stat_counter_61 \all_statistics_counters[1].Debug_Stat_Counter_i 
       (.Clk(Clk),
        .D({\all_statistics_counters[1].Debug_Stat_Counter_i_n_2 ,\all_statistics_counters[1].Debug_Stat_Counter_i_n_3 }),
        .E(data_write),
        .Empty_reg_0(Empty_reg_0),
        .Empty_reg_1(Empty_reg_6),
        .\Gen_Simple_Counter.Access_Count_i_reg[0]_0 ({data_write_reg[0],data_write_reg[1],data_write_reg[2],data_write_reg[3],data_write_reg[4],data_write_reg[5],data_write_reg[6],data_write_reg[7],data_write_reg[8],data_write_reg[9],data_write_reg[10],data_write_reg[11],data_write_reg[12],data_write_reg[13],data_write_reg[14],data_write_reg[15],data_write_reg[16],data_write_reg[17],data_write_reg[18],data_write_reg[19],data_write_reg[20],data_write_reg[21],data_write_reg[22],data_write_reg[23],data_write_reg[24],data_write_reg[25],data_write_reg[26],data_write_reg[27],data_write_reg[28],data_write_reg[29],data_write_reg[30],data_write_reg[31]}),
        .\Gen_Simple_Counter.Access_Count_i_reg[31]_0 (\Serial_Dbg_Intf.clear_cmd_reg_rep_n_0 ),
        .\Gen_Simple_Counter.Overflow_reg_0 ({\data_write_select_reg_n_0_[3] ,\data_write_select_reg_n_0_[2] ,\data_write_select_reg_n_0_[1] ,\data_write_select_reg_n_0_[0] }),
        .Is_Valid_1(Is_Valid_1),
        .\Is_Valid_reg[0]_0 (\Is_Valid_reg[0]_0 ),
        .Q({\all_statistics_counters[1].Debug_Stat_Counter_i_n_5 ,\all_statistics_counters[1].Debug_Stat_Counter_i_n_6 ,\all_statistics_counters[1].Debug_Stat_Counter_i_n_7 ,\all_statistics_counters[1].Debug_Stat_Counter_i_n_8 ,\all_statistics_counters[1].Debug_Stat_Counter_i_n_9 ,\all_statistics_counters[1].Debug_Stat_Counter_i_n_10 ,\all_statistics_counters[1].Debug_Stat_Counter_i_n_11 ,\all_statistics_counters[1].Debug_Stat_Counter_i_n_12 ,\all_statistics_counters[1].Debug_Stat_Counter_i_n_13 ,\all_statistics_counters[1].Debug_Stat_Counter_i_n_14 ,\all_statistics_counters[1].Debug_Stat_Counter_i_n_15 ,\all_statistics_counters[1].Debug_Stat_Counter_i_n_16 ,\all_statistics_counters[1].Debug_Stat_Counter_i_n_17 ,\all_statistics_counters[1].Debug_Stat_Counter_i_n_18 ,\all_statistics_counters[1].Debug_Stat_Counter_i_n_19 ,\all_statistics_counters[1].Debug_Stat_Counter_i_n_20 ,\all_statistics_counters[1].Debug_Stat_Counter_i_n_21 ,\all_statistics_counters[1].Debug_Stat_Counter_i_n_22 ,\all_statistics_counters[1].Debug_Stat_Counter_i_n_23 ,\all_statistics_counters[1].Debug_Stat_Counter_i_n_24 ,\all_statistics_counters[1].Debug_Stat_Counter_i_n_25 ,\all_statistics_counters[1].Debug_Stat_Counter_i_n_26 ,\all_statistics_counters[1].Debug_Stat_Counter_i_n_27 ,\all_statistics_counters[1].Debug_Stat_Counter_i_n_28 ,\all_statistics_counters[1].Debug_Stat_Counter_i_n_29 ,\all_statistics_counters[1].Debug_Stat_Counter_i_n_30 ,\all_statistics_counters[1].Debug_Stat_Counter_i_n_31 ,\all_statistics_counters[1].Debug_Stat_Counter_i_n_32 ,\all_statistics_counters[1].Debug_Stat_Counter_i_n_33 ,\all_statistics_counters[1].Debug_Stat_Counter_i_n_34 ,\all_statistics_counters[1].Debug_Stat_Counter_i_n_35 ,\all_statistics_counters[1].Debug_Stat_Counter_i_n_36 }),
        .\Running_reg[0]_0 (Running_0),
        .Stopping_reg_0(\all_statistics_counters[1].ready_reg_0 ),
        .Stopping_reg_1(stat_pause),
        .Stopping_reg_2(\all_statistics_counters[1].request_reg_0 ),
        .clear_cmd(clear_cmd),
        .sync_reset(sync_reset));
  LUT6 #(
    .INIT(64'h8F80FFFF8F800000)) 
    \all_statistics_counters[1].ready_i_1 
       (.I0(sel[3]),
        .I1(\all_statistics_counters[1].ready_i_2_n_0 ),
        .I2(sel[4]),
        .I3(\all_statistics_counters[1].request_reg_i_3_n_0 ),
        .I4(sel[5]),
        .I5(\all_statistics_counters[1].request_i_4_n_0 ),
        .O(\all_statistics_counters[1].ready_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hC0C0A0A00F000000)) 
    \all_statistics_counters[1].ready_i_2 
       (.I0(new_rvalid),
        .I1(new_bvalid),
        .I2(\stat_select_reg[1][2]_0 [2]),
        .I3(stat_stop),
        .I4(\stat_select_reg[1][2]_0 [0]),
        .I5(\stat_select_reg[1][2]_0 [1]),
        .O(\all_statistics_counters[1].ready_i_2_n_0 ));
  FDRE \all_statistics_counters[1].ready_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\all_statistics_counters[1].ready_i_1_n_0 ),
        .Q(\all_statistics_counters[1].ready_reg_0 ),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h8F80FFFF8F800000)) 
    \all_statistics_counters[1].request_i_1 
       (.I0(sel[3]),
        .I1(\all_statistics_counters[1].request_i_2_n_0 ),
        .I2(sel[4]),
        .I3(\all_statistics_counters[1].request_reg_i_3_n_0 ),
        .I4(sel[5]),
        .I5(\all_statistics_counters[1].request_i_4_n_0 ),
        .O(\all_statistics_counters[1].request_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h3000BB3330008800)) 
    \all_statistics_counters[1].request_i_16 
       (.I0(\sample_1_reg[2]_0 [1]),
        .I1(\stat_select_reg[1][2]_0 [1]),
        .I2(\sample_1_reg[2]_0 [2]),
        .I3(valid_instr),
        .I4(\stat_select_reg[1][2]_0 [0]),
        .I5(stat5_out),
        .O(\all_statistics_counters[1].request_i_16_n_0 ));
  LUT6 #(
    .INIT(64'h00000000020202F2)) 
    \all_statistics_counters[1].request_i_18 
       (.I0(\sample_1_reg[2]_0 [4]),
        .I1(\all_statistics_counters[0].request_i_7_0 ),
        .I2(\stat_select_reg[1][2]_0 [0]),
        .I3(trace_OF_PipeRun_i),
        .I4(trace_MB_Halted_i),
        .I5(\stat_select_reg[1][2]_0 [1]),
        .O(\all_statistics_counters[1].request_i_18_n_0 ));
  LUT6 #(
    .INIT(64'hC0C0A0A00F000000)) 
    \all_statistics_counters[1].request_i_2 
       (.I0(new_arvalid__0),
        .I1(new_awvalid__0),
        .I2(\stat_select_reg[1][2]_0 [2]),
        .I3(new_interrupt_reg_n_0),
        .I4(\stat_select_reg[1][2]_0 [0]),
        .I5(\stat_select_reg[1][2]_0 [1]),
        .O(\all_statistics_counters[1].request_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair78" *) 
  LUT5 #(
    .INIT(32'h00800000)) 
    \all_statistics_counters[1].request_i_21 
       (.I0(\sample_1_reg[2]_0 [57]),
        .I1(\sample_1_reg[2]_0 [56]),
        .I2(\sample_1_reg[2]_0 [60]),
        .I3(\sample_1_reg[2]_0 [59]),
        .I4(\sample_1_reg[2]_0 [55]),
        .O(stat133_out));
  LUT6 #(
    .INIT(64'h0000000000001000)) 
    \all_statistics_counters[1].request_i_28 
       (.I0(\sample_1_reg[2]_0 [56]),
        .I1(\sample_1_reg[2]_0 [59]),
        .I2(\sample_1_reg[2]_0 [60]),
        .I3(\sample_1_reg[2]_0 [57]),
        .I4(\sample_1_reg[2]_0 [58]),
        .I5(\sample_1_reg[2]_0 [55]),
        .O(\trace_instruction_i_reg[4] ));
  LUT6 #(
    .INIT(64'h0000000000001000)) 
    \all_statistics_counters[1].request_i_29 
       (.I0(\sample_1_reg[2]_0 [34]),
        .I1(\sample_1_reg[2]_0 [35]),
        .I2(\sample_1_reg[2]_0 [38]),
        .I3(\sample_1_reg[2]_0 [39]),
        .I4(\sample_1_reg[2]_0 [37]),
        .I5(\sample_1_reg[2]_0 [36]),
        .O(stat212_in));
  LUT6 #(
    .INIT(64'h1000000000000000)) 
    \all_statistics_counters[1].request_i_30 
       (.I0(\sample_1_reg[2]_0 [56]),
        .I1(\sample_1_reg[2]_0 [59]),
        .I2(\sample_1_reg[2]_0 [60]),
        .I3(\sample_1_reg[2]_0 [57]),
        .I4(\sample_1_reg[2]_0 [58]),
        .I5(\sample_1_reg[2]_0 [55]),
        .O(p_1_in15_in));
  (* SOFT_HLUTNM = "soft_lutpair78" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \all_statistics_counters[1].request_i_32 
       (.I0(\sample_1_reg[2]_0 [60]),
        .I1(\sample_1_reg[2]_0 [57]),
        .O(\trace_instruction_i_reg[0]_1 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \all_statistics_counters[1].request_i_4 
       (.I0(\all_statistics_counters[1].request_i_7_n_0 ),
        .I1(\all_statistics_counters[1].request_reg_1 ),
        .I2(sel[4]),
        .I3(\all_statistics_counters[1].request_i_9_n_0 ),
        .I4(sel[3]),
        .I5(\all_statistics_counters[1].request_reg_2 ),
        .O(\all_statistics_counters[1].request_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000002)) 
    \all_statistics_counters[1].request_i_47 
       (.I0(\sample_1_reg[2]_0 [60]),
        .I1(\sample_1_reg[2]_0 [59]),
        .I2(\sample_1_reg[2]_0 [56]),
        .I3(\sample_1_reg[2]_0 [55]),
        .I4(\sample_1_reg[2]_0 [58]),
        .I5(\sample_1_reg[2]_0 [57]),
        .O(\trace_instruction_i_reg[0] ));
  LUT5 #(
    .INIT(32'h00000001)) 
    \all_statistics_counters[1].request_i_48 
       (.I0(\sample_1_reg[2]_0 [53]),
        .I1(\sample_1_reg[2]_0 [51]),
        .I2(\sample_1_reg[2]_0 [50]),
        .I3(\sample_1_reg[2]_0 [54]),
        .I4(\sample_1_reg[2]_0 [52]),
        .O(stat2));
  LUT6 #(
    .INIT(64'hFFFFFFFF00010000)) 
    \all_statistics_counters[1].request_i_49 
       (.I0(\sample_1_reg[2]_0 [49]),
        .I1(\sample_1_reg[2]_0 [48]),
        .I2(\sample_1_reg[2]_0 [46]),
        .I3(\sample_1_reg[2]_0 [47]),
        .I4(\sample_1_reg[2]_0 [45]),
        .I5(\all_statistics_counters[1].request_i_50_n_0 ),
        .O(stat130_out));
  LUT6 #(
    .INIT(64'h0000000000010000)) 
    \all_statistics_counters[1].request_i_50 
       (.I0(\sample_1_reg[2]_0 [44]),
        .I1(\sample_1_reg[2]_0 [43]),
        .I2(\sample_1_reg[2]_0 [41]),
        .I3(\sample_1_reg[2]_0 [42]),
        .I4(\sample_1_reg[2]_0 [40]),
        .I5(\sample_1_reg[2]_0 [58]),
        .O(\all_statistics_counters[1].request_i_50_n_0 ));
  LUT6 #(
    .INIT(64'h00E2FFFF00E20000)) 
    \all_statistics_counters[1].request_i_6 
       (.I0(stat2_out),
        .I1(\stat_select_reg[1][2]_0 [0]),
        .I2(\all_statistics_counters[0].request_reg_i_3_0 ),
        .I3(\stat_select_reg[1][2]_0 [1]),
        .I4(\stat_select_reg[1][2]_0 [2]),
        .I5(\all_statistics_counters[1].request_i_16_n_0 ),
        .O(\all_statistics_counters[1].request_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hA202FFFFA2020000)) 
    \all_statistics_counters[1].request_i_7 
       (.I0(\stat_select_reg[1][2]_0 [1]),
        .I1(trace_MB_Halted_i_reg_0),
        .I2(\stat_select_reg[1][2]_0 [0]),
        .I3(\all_statistics_counters[0].request_i_4_0 ),
        .I4(\stat_select_reg[1][2]_0 [2]),
        .I5(\all_statistics_counters[1].request_i_18_n_0 ),
        .O(\all_statistics_counters[1].request_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h0000000010400000)) 
    \all_statistics_counters[1].request_i_9 
       (.I0(\stat_select_reg[1][2]_0 [1]),
        .I1(\stat_select_reg[1][2]_0 [0]),
        .I2(stat133_out),
        .I3(\sample_1_reg[2]_0 [3]),
        .I4(valid_instr),
        .I5(\stat_select_reg[1][2]_0 [2]),
        .O(\all_statistics_counters[1].request_i_9_n_0 ));
  FDRE \all_statistics_counters[1].request_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\all_statistics_counters[1].request_i_1_n_0 ),
        .Q(\all_statistics_counters[1].request_reg_0 ),
        .R(1'b0));
  MUXF7 \all_statistics_counters[1].request_reg_i_3 
       (.I0(\all_statistics_counters[1].request_reg_3 ),
        .I1(\all_statistics_counters[1].request_i_6_n_0 ),
        .O(\all_statistics_counters[1].request_reg_i_3_n_0 ),
        .S(sel[3]));
  block_design_microblaze_0_0_debug_stat_counter_62 \all_statistics_counters[2].Debug_Stat_Counter_i 
       (.Clk(Clk),
        .D({\all_statistics_counters[2].Debug_Stat_Counter_i_n_2 ,\all_statistics_counters[2].Debug_Stat_Counter_i_n_3 }),
        .E(data_write),
        .Empty_reg_0(Empty_reg_1),
        .Empty_reg_1(Empty_reg_7),
        .\Gen_Simple_Counter.Access_Count_i_reg[0]_0 ({data_write_reg[0],data_write_reg[1],data_write_reg[2],data_write_reg[3],data_write_reg[4],data_write_reg[5],data_write_reg[6],data_write_reg[7],data_write_reg[8],data_write_reg[9],data_write_reg[10],data_write_reg[11],data_write_reg[12],data_write_reg[13],data_write_reg[14],data_write_reg[15],data_write_reg[16],data_write_reg[17],data_write_reg[18],data_write_reg[19],data_write_reg[20],data_write_reg[21],data_write_reg[22],data_write_reg[23],data_write_reg[24],data_write_reg[25],data_write_reg[26],data_write_reg[27],data_write_reg[28],data_write_reg[29],data_write_reg[30],data_write_reg[31]}),
        .\Gen_Simple_Counter.Access_Count_i_reg[31]_0 (\Serial_Dbg_Intf.clear_cmd_reg_rep_n_0 ),
        .\Gen_Simple_Counter.Overflow_reg_0 ({\data_write_select_reg_n_0_[3] ,\data_write_select_reg_n_0_[2] ,\data_write_select_reg_n_0_[1] ,\data_write_select_reg_n_0_[0] }),
        .Is_Valid_3(Is_Valid_3),
        .\Is_Valid_reg[0]_0 (\Is_Valid_reg[0]_1 ),
        .Q({\all_statistics_counters[2].Debug_Stat_Counter_i_n_5 ,\all_statistics_counters[2].Debug_Stat_Counter_i_n_6 ,\all_statistics_counters[2].Debug_Stat_Counter_i_n_7 ,\all_statistics_counters[2].Debug_Stat_Counter_i_n_8 ,\all_statistics_counters[2].Debug_Stat_Counter_i_n_9 ,\all_statistics_counters[2].Debug_Stat_Counter_i_n_10 ,\all_statistics_counters[2].Debug_Stat_Counter_i_n_11 ,\all_statistics_counters[2].Debug_Stat_Counter_i_n_12 ,\all_statistics_counters[2].Debug_Stat_Counter_i_n_13 ,\all_statistics_counters[2].Debug_Stat_Counter_i_n_14 ,\all_statistics_counters[2].Debug_Stat_Counter_i_n_15 ,\all_statistics_counters[2].Debug_Stat_Counter_i_n_16 ,\all_statistics_counters[2].Debug_Stat_Counter_i_n_17 ,\all_statistics_counters[2].Debug_Stat_Counter_i_n_18 ,\all_statistics_counters[2].Debug_Stat_Counter_i_n_19 ,\all_statistics_counters[2].Debug_Stat_Counter_i_n_20 ,\all_statistics_counters[2].Debug_Stat_Counter_i_n_21 ,\all_statistics_counters[2].Debug_Stat_Counter_i_n_22 ,\all_statistics_counters[2].Debug_Stat_Counter_i_n_23 ,\all_statistics_counters[2].Debug_Stat_Counter_i_n_24 ,\all_statistics_counters[2].Debug_Stat_Counter_i_n_25 ,\all_statistics_counters[2].Debug_Stat_Counter_i_n_26 ,\all_statistics_counters[2].Debug_Stat_Counter_i_n_27 ,\all_statistics_counters[2].Debug_Stat_Counter_i_n_28 ,\all_statistics_counters[2].Debug_Stat_Counter_i_n_29 ,\all_statistics_counters[2].Debug_Stat_Counter_i_n_30 ,\all_statistics_counters[2].Debug_Stat_Counter_i_n_31 ,\all_statistics_counters[2].Debug_Stat_Counter_i_n_32 ,\all_statistics_counters[2].Debug_Stat_Counter_i_n_33 ,\all_statistics_counters[2].Debug_Stat_Counter_i_n_34 ,\all_statistics_counters[2].Debug_Stat_Counter_i_n_35 ,\all_statistics_counters[2].Debug_Stat_Counter_i_n_36 }),
        .\Running_reg[0]_0 (Running_2),
        .Stopping_reg_0(\all_statistics_counters[2].ready_reg_0 ),
        .Stopping_reg_1(stat_pause),
        .Stopping_reg_2(\all_statistics_counters[2].request_reg_0 ),
        .clear_cmd(clear_cmd),
        .sync_reset(sync_reset));
  LUT6 #(
    .INIT(64'h8F80FFFF8F800000)) 
    \all_statistics_counters[2].ready_i_1 
       (.I0(\stat_select_reg_n_0_[2][3] ),
        .I1(\all_statistics_counters[2].ready_i_2_n_0 ),
        .I2(\stat_select_reg_n_0_[2][4] ),
        .I3(\all_statistics_counters[2].request_reg_i_3_n_0 ),
        .I4(\stat_select_reg_n_0_[2][5] ),
        .I5(\all_statistics_counters[2].request_i_4_n_0 ),
        .O(\all_statistics_counters[2].ready_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hC0C0A0A00F000000)) 
    \all_statistics_counters[2].ready_i_2 
       (.I0(new_rvalid),
        .I1(new_bvalid),
        .I2(\stat_select_reg[2][2]_0 [2]),
        .I3(stat_stop),
        .I4(\stat_select_reg[2][2]_0 [0]),
        .I5(\stat_select_reg[2][2]_0 [1]),
        .O(\all_statistics_counters[2].ready_i_2_n_0 ));
  FDRE \all_statistics_counters[2].ready_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\all_statistics_counters[2].ready_i_1_n_0 ),
        .Q(\all_statistics_counters[2].ready_reg_0 ),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h8F80FFFF8F800000)) 
    \all_statistics_counters[2].request_i_1 
       (.I0(\stat_select_reg_n_0_[2][3] ),
        .I1(\all_statistics_counters[2].request_i_2_n_0 ),
        .I2(\stat_select_reg_n_0_[2][4] ),
        .I3(\all_statistics_counters[2].request_reg_i_3_n_0 ),
        .I4(\stat_select_reg_n_0_[2][5] ),
        .I5(\all_statistics_counters[2].request_i_4_n_0 ),
        .O(\all_statistics_counters[2].request_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h3000BB3330008800)) 
    \all_statistics_counters[2].request_i_12 
       (.I0(\sample_1_reg[2]_0 [1]),
        .I1(\stat_select_reg[2][2]_0 [1]),
        .I2(\sample_1_reg[2]_0 [2]),
        .I3(valid_instr),
        .I4(\stat_select_reg[2][2]_0 [0]),
        .I5(stat5_out),
        .O(\all_statistics_counters[2].request_i_12_n_0 ));
  LUT6 #(
    .INIT(64'h00000000020202F2)) 
    \all_statistics_counters[2].request_i_13 
       (.I0(\sample_1_reg[2]_0 [4]),
        .I1(\all_statistics_counters[0].request_i_7_0 ),
        .I2(\stat_select_reg[2][2]_0 [0]),
        .I3(trace_OF_PipeRun_i),
        .I4(trace_MB_Halted_i),
        .I5(\stat_select_reg[2][2]_0 [1]),
        .O(\all_statistics_counters[2].request_i_13_n_0 ));
  LUT6 #(
    .INIT(64'hC0C0A0A00F000000)) 
    \all_statistics_counters[2].request_i_2 
       (.I0(new_arvalid__0),
        .I1(new_awvalid__0),
        .I2(\stat_select_reg[2][2]_0 [2]),
        .I3(new_interrupt_reg_n_0),
        .I4(\stat_select_reg[2][2]_0 [0]),
        .I5(\stat_select_reg[2][2]_0 [1]),
        .O(\all_statistics_counters[2].request_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \all_statistics_counters[2].request_i_4 
       (.I0(\all_statistics_counters[2].request_i_7_n_0 ),
        .I1(\all_statistics_counters[2].ready_reg_1 ),
        .I2(\stat_select_reg_n_0_[2][4] ),
        .I3(\all_statistics_counters[2].request_i_9_n_0 ),
        .I4(\stat_select_reg_n_0_[2][3] ),
        .I5(\all_statistics_counters[2].ready_reg_2 ),
        .O(\all_statistics_counters[2].request_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h00E2FFFF00E20000)) 
    \all_statistics_counters[2].request_i_6 
       (.I0(stat2_out),
        .I1(\stat_select_reg[2][2]_0 [0]),
        .I2(\all_statistics_counters[0].request_reg_i_3_0 ),
        .I3(\stat_select_reg[2][2]_0 [1]),
        .I4(\stat_select_reg[2][2]_0 [2]),
        .I5(\all_statistics_counters[2].request_i_12_n_0 ),
        .O(\all_statistics_counters[2].request_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hA202FFFFA2020000)) 
    \all_statistics_counters[2].request_i_7 
       (.I0(\stat_select_reg[2][2]_0 [1]),
        .I1(trace_MB_Halted_i_reg_0),
        .I2(\stat_select_reg[2][2]_0 [0]),
        .I3(\all_statistics_counters[0].request_i_4_0 ),
        .I4(\stat_select_reg[2][2]_0 [2]),
        .I5(\all_statistics_counters[2].request_i_13_n_0 ),
        .O(\all_statistics_counters[2].request_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h0000000010400000)) 
    \all_statistics_counters[2].request_i_9 
       (.I0(\stat_select_reg[2][2]_0 [1]),
        .I1(\stat_select_reg[2][2]_0 [0]),
        .I2(stat133_out),
        .I3(\sample_1_reg[2]_0 [3]),
        .I4(valid_instr),
        .I5(\stat_select_reg[2][2]_0 [2]),
        .O(\all_statistics_counters[2].request_i_9_n_0 ));
  FDRE \all_statistics_counters[2].request_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\all_statistics_counters[2].request_i_1_n_0 ),
        .Q(\all_statistics_counters[2].request_reg_0 ),
        .R(1'b0));
  MUXF7 \all_statistics_counters[2].request_reg_i_3 
       (.I0(\all_statistics_counters[2].ready_reg_3 ),
        .I1(\all_statistics_counters[2].request_i_6_n_0 ),
        .O(\all_statistics_counters[2].request_reg_i_3_n_0 ),
        .S(\stat_select_reg_n_0_[2][3] ));
  block_design_microblaze_0_0_debug_stat_counter_63 \all_statistics_counters[3].Debug_Stat_Counter_i 
       (.Clk(Clk),
        .D({\all_statistics_counters[3].Debug_Stat_Counter_i_n_2 ,\all_statistics_counters[3].Debug_Stat_Counter_i_n_3 }),
        .E(data_write),
        .Empty_reg_0(Empty_reg_2),
        .Empty_reg_1(Empty_reg_8),
        .\Gen_Simple_Counter.Access_Count_i_reg[0]_0 ({data_write_reg[0],data_write_reg[1],data_write_reg[2],data_write_reg[3],data_write_reg[4],data_write_reg[5],data_write_reg[6],data_write_reg[7],data_write_reg[8],data_write_reg[9],data_write_reg[10],data_write_reg[11],data_write_reg[12],data_write_reg[13],data_write_reg[14],data_write_reg[15],data_write_reg[16],data_write_reg[17],data_write_reg[18],data_write_reg[19],data_write_reg[20],data_write_reg[21],data_write_reg[22],data_write_reg[23],data_write_reg[24],data_write_reg[25],data_write_reg[26],data_write_reg[27],data_write_reg[28],data_write_reg[29],data_write_reg[30],data_write_reg[31]}),
        .\Gen_Simple_Counter.Access_Count_i_reg[31]_0 (\Serial_Dbg_Intf.clear_cmd_reg_rep_n_0 ),
        .\Gen_Simple_Counter.Overflow_reg_0 ({\data_write_select_reg_n_0_[3] ,\data_write_select_reg_n_0_[2] ,\data_write_select_reg_n_0_[1] ,\data_write_select_reg_n_0_[0] }),
        .Is_Valid_5(Is_Valid_5),
        .\Is_Valid_reg[0]_0 (\Is_Valid_reg[0]_2 ),
        .Q({\all_statistics_counters[3].Debug_Stat_Counter_i_n_5 ,\all_statistics_counters[3].Debug_Stat_Counter_i_n_6 ,\all_statistics_counters[3].Debug_Stat_Counter_i_n_7 ,\all_statistics_counters[3].Debug_Stat_Counter_i_n_8 ,\all_statistics_counters[3].Debug_Stat_Counter_i_n_9 ,\all_statistics_counters[3].Debug_Stat_Counter_i_n_10 ,\all_statistics_counters[3].Debug_Stat_Counter_i_n_11 ,\all_statistics_counters[3].Debug_Stat_Counter_i_n_12 ,\all_statistics_counters[3].Debug_Stat_Counter_i_n_13 ,\all_statistics_counters[3].Debug_Stat_Counter_i_n_14 ,\all_statistics_counters[3].Debug_Stat_Counter_i_n_15 ,\all_statistics_counters[3].Debug_Stat_Counter_i_n_16 ,\all_statistics_counters[3].Debug_Stat_Counter_i_n_17 ,\all_statistics_counters[3].Debug_Stat_Counter_i_n_18 ,\all_statistics_counters[3].Debug_Stat_Counter_i_n_19 ,\all_statistics_counters[3].Debug_Stat_Counter_i_n_20 ,\all_statistics_counters[3].Debug_Stat_Counter_i_n_21 ,\all_statistics_counters[3].Debug_Stat_Counter_i_n_22 ,\all_statistics_counters[3].Debug_Stat_Counter_i_n_23 ,\all_statistics_counters[3].Debug_Stat_Counter_i_n_24 ,\all_statistics_counters[3].Debug_Stat_Counter_i_n_25 ,\all_statistics_counters[3].Debug_Stat_Counter_i_n_26 ,\all_statistics_counters[3].Debug_Stat_Counter_i_n_27 ,\all_statistics_counters[3].Debug_Stat_Counter_i_n_28 ,\all_statistics_counters[3].Debug_Stat_Counter_i_n_29 ,\all_statistics_counters[3].Debug_Stat_Counter_i_n_30 ,\all_statistics_counters[3].Debug_Stat_Counter_i_n_31 ,\all_statistics_counters[3].Debug_Stat_Counter_i_n_32 ,\all_statistics_counters[3].Debug_Stat_Counter_i_n_33 ,\all_statistics_counters[3].Debug_Stat_Counter_i_n_34 ,\all_statistics_counters[3].Debug_Stat_Counter_i_n_35 ,\all_statistics_counters[3].Debug_Stat_Counter_i_n_36 }),
        .\Running_reg[0]_0 (Running_4),
        .Stopping_reg_0(\all_statistics_counters[3].ready_reg_0 ),
        .Stopping_reg_1(stat_pause),
        .Stopping_reg_2(\all_statistics_counters[3].request_reg_0 ),
        .clear_cmd(clear_cmd),
        .sync_reset(sync_reset));
  LUT6 #(
    .INIT(64'h8F80FFFF8F800000)) 
    \all_statistics_counters[3].ready_i_1 
       (.I0(\stat_select_reg_n_0_[3][3] ),
        .I1(\all_statistics_counters[3].ready_i_2_n_0 ),
        .I2(\stat_select_reg_n_0_[3][4] ),
        .I3(\all_statistics_counters[3].request_reg_i_3_n_0 ),
        .I4(\stat_select_reg_n_0_[3][5] ),
        .I5(\all_statistics_counters[3].request_i_4_n_0 ),
        .O(\all_statistics_counters[3].ready_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hC0C0A0A00F000000)) 
    \all_statistics_counters[3].ready_i_2 
       (.I0(new_rvalid),
        .I1(new_bvalid),
        .I2(\stat_select_reg[3][2]_0 [2]),
        .I3(stat_stop),
        .I4(\stat_select_reg[3][2]_0 [0]),
        .I5(\stat_select_reg[3][2]_0 [1]),
        .O(\all_statistics_counters[3].ready_i_2_n_0 ));
  FDRE \all_statistics_counters[3].ready_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\all_statistics_counters[3].ready_i_1_n_0 ),
        .Q(\all_statistics_counters[3].ready_reg_0 ),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h8F80FFFF8F800000)) 
    \all_statistics_counters[3].request_i_1 
       (.I0(\stat_select_reg_n_0_[3][3] ),
        .I1(\all_statistics_counters[3].request_i_2_n_0 ),
        .I2(\stat_select_reg_n_0_[3][4] ),
        .I3(\all_statistics_counters[3].request_reg_i_3_n_0 ),
        .I4(\stat_select_reg_n_0_[3][5] ),
        .I5(\all_statistics_counters[3].request_i_4_n_0 ),
        .O(\all_statistics_counters[3].request_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h3000BB3330008800)) 
    \all_statistics_counters[3].request_i_12 
       (.I0(\sample_1_reg[2]_0 [1]),
        .I1(\stat_select_reg[3][2]_0 [1]),
        .I2(\sample_1_reg[2]_0 [2]),
        .I3(valid_instr),
        .I4(\stat_select_reg[3][2]_0 [0]),
        .I5(stat5_out),
        .O(\all_statistics_counters[3].request_i_12_n_0 ));
  LUT6 #(
    .INIT(64'h00000000020202F2)) 
    \all_statistics_counters[3].request_i_13 
       (.I0(\sample_1_reg[2]_0 [4]),
        .I1(\all_statistics_counters[0].request_i_7_0 ),
        .I2(\stat_select_reg[3][2]_0 [0]),
        .I3(trace_OF_PipeRun_i),
        .I4(trace_MB_Halted_i),
        .I5(\stat_select_reg[3][2]_0 [1]),
        .O(\all_statistics_counters[3].request_i_13_n_0 ));
  LUT6 #(
    .INIT(64'hC0C0A0A00F000000)) 
    \all_statistics_counters[3].request_i_2 
       (.I0(new_arvalid__0),
        .I1(new_awvalid__0),
        .I2(\stat_select_reg[3][2]_0 [2]),
        .I3(new_interrupt_reg_n_0),
        .I4(\stat_select_reg[3][2]_0 [0]),
        .I5(\stat_select_reg[3][2]_0 [1]),
        .O(\all_statistics_counters[3].request_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \all_statistics_counters[3].request_i_4 
       (.I0(\all_statistics_counters[3].request_i_7_n_0 ),
        .I1(\all_statistics_counters[3].ready_reg_1 ),
        .I2(\stat_select_reg_n_0_[3][4] ),
        .I3(\all_statistics_counters[3].request_i_9_n_0 ),
        .I4(\stat_select_reg_n_0_[3][3] ),
        .I5(\all_statistics_counters[3].ready_reg_2 ),
        .O(\all_statistics_counters[3].request_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h00E2FFFF00E20000)) 
    \all_statistics_counters[3].request_i_6 
       (.I0(stat2_out),
        .I1(\stat_select_reg[3][2]_0 [0]),
        .I2(\all_statistics_counters[0].request_reg_i_3_0 ),
        .I3(\stat_select_reg[3][2]_0 [1]),
        .I4(\stat_select_reg[3][2]_0 [2]),
        .I5(\all_statistics_counters[3].request_i_12_n_0 ),
        .O(\all_statistics_counters[3].request_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hA202FFFFA2020000)) 
    \all_statistics_counters[3].request_i_7 
       (.I0(\stat_select_reg[3][2]_0 [1]),
        .I1(trace_MB_Halted_i_reg_0),
        .I2(\stat_select_reg[3][2]_0 [0]),
        .I3(\all_statistics_counters[0].request_i_4_0 ),
        .I4(\stat_select_reg[3][2]_0 [2]),
        .I5(\all_statistics_counters[3].request_i_13_n_0 ),
        .O(\all_statistics_counters[3].request_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h0000000010400000)) 
    \all_statistics_counters[3].request_i_9 
       (.I0(\stat_select_reg[3][2]_0 [1]),
        .I1(\stat_select_reg[3][2]_0 [0]),
        .I2(stat133_out),
        .I3(\sample_1_reg[2]_0 [3]),
        .I4(valid_instr),
        .I5(\stat_select_reg[3][2]_0 [2]),
        .O(\all_statistics_counters[3].request_i_9_n_0 ));
  FDRE \all_statistics_counters[3].request_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\all_statistics_counters[3].request_i_1_n_0 ),
        .Q(\all_statistics_counters[3].request_reg_0 ),
        .R(1'b0));
  MUXF7 \all_statistics_counters[3].request_reg_i_3 
       (.I0(\all_statistics_counters[3].ready_reg_3 ),
        .I1(\all_statistics_counters[3].request_i_6_n_0 ),
        .O(\all_statistics_counters[3].request_reg_i_3_n_0 ),
        .S(\stat_select_reg_n_0_[3][3] ));
  block_design_microblaze_0_0_debug_stat_counter_64 \all_statistics_counters[4].Debug_Stat_Counter_i 
       (.Clk(Clk),
        .D({\all_statistics_counters[4].Debug_Stat_Counter_i_n_2 ,\all_statistics_counters[4].Debug_Stat_Counter_i_n_3 }),
        .E(data_write),
        .Empty_reg_0(Empty_reg_3),
        .Empty_reg_1(Empty_reg_9),
        .\Gen_Simple_Counter.Access_Count_i_reg[0]_0 ({data_write_reg[0],data_write_reg[1],data_write_reg[2],data_write_reg[3],data_write_reg[4],data_write_reg[5],data_write_reg[6],data_write_reg[7],data_write_reg[8],data_write_reg[9],data_write_reg[10],data_write_reg[11],data_write_reg[12],data_write_reg[13],data_write_reg[14],data_write_reg[15],data_write_reg[16],data_write_reg[17],data_write_reg[18],data_write_reg[19],data_write_reg[20],data_write_reg[21],data_write_reg[22],data_write_reg[23],data_write_reg[24],data_write_reg[25],data_write_reg[26],data_write_reg[27],data_write_reg[28],data_write_reg[29],data_write_reg[30],data_write_reg[31]}),
        .\Gen_Simple_Counter.Overflow_reg_0 ({\data_write_select_reg_n_0_[3] ,\data_write_select_reg_n_0_[2] ,\data_write_select_reg_n_0_[1] ,\data_write_select_reg_n_0_[0] }),
        .Is_Valid_7(Is_Valid_7),
        .\Is_Valid_reg[0]_0 (\Is_Valid_reg[0]_3 ),
        .Q({\all_statistics_counters[4].Debug_Stat_Counter_i_n_5 ,\all_statistics_counters[4].Debug_Stat_Counter_i_n_6 ,\all_statistics_counters[4].Debug_Stat_Counter_i_n_7 ,\all_statistics_counters[4].Debug_Stat_Counter_i_n_8 ,\all_statistics_counters[4].Debug_Stat_Counter_i_n_9 ,\all_statistics_counters[4].Debug_Stat_Counter_i_n_10 ,\all_statistics_counters[4].Debug_Stat_Counter_i_n_11 ,\all_statistics_counters[4].Debug_Stat_Counter_i_n_12 ,\all_statistics_counters[4].Debug_Stat_Counter_i_n_13 ,\all_statistics_counters[4].Debug_Stat_Counter_i_n_14 ,\all_statistics_counters[4].Debug_Stat_Counter_i_n_15 ,\all_statistics_counters[4].Debug_Stat_Counter_i_n_16 ,\all_statistics_counters[4].Debug_Stat_Counter_i_n_17 ,\all_statistics_counters[4].Debug_Stat_Counter_i_n_18 ,\all_statistics_counters[4].Debug_Stat_Counter_i_n_19 ,\all_statistics_counters[4].Debug_Stat_Counter_i_n_20 ,\all_statistics_counters[4].Debug_Stat_Counter_i_n_21 ,\all_statistics_counters[4].Debug_Stat_Counter_i_n_22 ,\all_statistics_counters[4].Debug_Stat_Counter_i_n_23 ,\all_statistics_counters[4].Debug_Stat_Counter_i_n_24 ,\all_statistics_counters[4].Debug_Stat_Counter_i_n_25 ,\all_statistics_counters[4].Debug_Stat_Counter_i_n_26 ,\all_statistics_counters[4].Debug_Stat_Counter_i_n_27 ,\all_statistics_counters[4].Debug_Stat_Counter_i_n_28 ,\all_statistics_counters[4].Debug_Stat_Counter_i_n_29 ,\all_statistics_counters[4].Debug_Stat_Counter_i_n_30 ,\all_statistics_counters[4].Debug_Stat_Counter_i_n_31 ,\all_statistics_counters[4].Debug_Stat_Counter_i_n_32 ,\all_statistics_counters[4].Debug_Stat_Counter_i_n_33 ,\all_statistics_counters[4].Debug_Stat_Counter_i_n_34 ,\all_statistics_counters[4].Debug_Stat_Counter_i_n_35 ,\all_statistics_counters[4].Debug_Stat_Counter_i_n_36 }),
        .\Running_reg[0]_0 (Running_6),
        .Stopping_reg_0(\all_statistics_counters[4].ready_reg_0 ),
        .Stopping_reg_1(stat_pause),
        .Stopping_reg_2(\all_statistics_counters[4].request_reg_0 ),
        .clear_cmd(clear_cmd),
        .sync_reset(sync_reset));
  LUT6 #(
    .INIT(64'h8F80FFFF8F800000)) 
    \all_statistics_counters[4].ready_i_1 
       (.I0(\stat_select_reg_n_0_[4][3] ),
        .I1(\all_statistics_counters[4].ready_i_2_n_0 ),
        .I2(\stat_select_reg_n_0_[4][4] ),
        .I3(\all_statistics_counters[4].request_reg_i_3_n_0 ),
        .I4(\stat_select_reg_n_0_[4][5] ),
        .I5(\all_statistics_counters[4].request_i_4_n_0 ),
        .O(\all_statistics_counters[4].ready_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hC0C0A0A00F000000)) 
    \all_statistics_counters[4].ready_i_2 
       (.I0(new_rvalid),
        .I1(new_bvalid),
        .I2(\stat_select_reg[4][2]_0 [2]),
        .I3(stat_stop),
        .I4(\stat_select_reg[4][2]_0 [0]),
        .I5(\stat_select_reg[4][2]_0 [1]),
        .O(\all_statistics_counters[4].ready_i_2_n_0 ));
  FDRE \all_statistics_counters[4].ready_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\all_statistics_counters[4].ready_i_1_n_0 ),
        .Q(\all_statistics_counters[4].ready_reg_0 ),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h8F80FFFF8F800000)) 
    \all_statistics_counters[4].request_i_1 
       (.I0(\stat_select_reg_n_0_[4][3] ),
        .I1(\all_statistics_counters[4].request_i_2_n_0 ),
        .I2(\stat_select_reg_n_0_[4][4] ),
        .I3(\all_statistics_counters[4].request_reg_i_3_n_0 ),
        .I4(\stat_select_reg_n_0_[4][5] ),
        .I5(\all_statistics_counters[4].request_i_4_n_0 ),
        .O(\all_statistics_counters[4].request_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h3000BB3330008800)) 
    \all_statistics_counters[4].request_i_12 
       (.I0(\sample_1_reg[2]_0 [1]),
        .I1(\stat_select_reg[4][2]_0 [1]),
        .I2(\sample_1_reg[2]_0 [2]),
        .I3(valid_instr),
        .I4(\stat_select_reg[4][2]_0 [0]),
        .I5(stat5_out),
        .O(\all_statistics_counters[4].request_i_12_n_0 ));
  LUT6 #(
    .INIT(64'h00000000020202F2)) 
    \all_statistics_counters[4].request_i_13 
       (.I0(\sample_1_reg[2]_0 [4]),
        .I1(\all_statistics_counters[0].request_i_7_0 ),
        .I2(\stat_select_reg[4][2]_0 [0]),
        .I3(trace_OF_PipeRun_i),
        .I4(trace_MB_Halted_i),
        .I5(\stat_select_reg[4][2]_0 [1]),
        .O(\all_statistics_counters[4].request_i_13_n_0 ));
  LUT6 #(
    .INIT(64'hC0C0A0A00F000000)) 
    \all_statistics_counters[4].request_i_2 
       (.I0(new_arvalid__0),
        .I1(new_awvalid__0),
        .I2(\stat_select_reg[4][2]_0 [2]),
        .I3(new_interrupt_reg_n_0),
        .I4(\stat_select_reg[4][2]_0 [0]),
        .I5(\stat_select_reg[4][2]_0 [1]),
        .O(\all_statistics_counters[4].request_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \all_statistics_counters[4].request_i_4 
       (.I0(\all_statistics_counters[4].request_i_7_n_0 ),
        .I1(\all_statistics_counters[4].ready_reg_1 ),
        .I2(\stat_select_reg_n_0_[4][4] ),
        .I3(\all_statistics_counters[4].request_i_9_n_0 ),
        .I4(\stat_select_reg_n_0_[4][3] ),
        .I5(\all_statistics_counters[4].ready_reg_2 ),
        .O(\all_statistics_counters[4].request_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h00E2FFFF00E20000)) 
    \all_statistics_counters[4].request_i_6 
       (.I0(stat2_out),
        .I1(\stat_select_reg[4][2]_0 [0]),
        .I2(\all_statistics_counters[0].request_reg_i_3_0 ),
        .I3(\stat_select_reg[4][2]_0 [1]),
        .I4(\stat_select_reg[4][2]_0 [2]),
        .I5(\all_statistics_counters[4].request_i_12_n_0 ),
        .O(\all_statistics_counters[4].request_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hA202FFFFA2020000)) 
    \all_statistics_counters[4].request_i_7 
       (.I0(\stat_select_reg[4][2]_0 [1]),
        .I1(trace_MB_Halted_i_reg_0),
        .I2(\stat_select_reg[4][2]_0 [0]),
        .I3(\all_statistics_counters[0].request_i_4_0 ),
        .I4(\stat_select_reg[4][2]_0 [2]),
        .I5(\all_statistics_counters[4].request_i_13_n_0 ),
        .O(\all_statistics_counters[4].request_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h0000000010400000)) 
    \all_statistics_counters[4].request_i_9 
       (.I0(\stat_select_reg[4][2]_0 [1]),
        .I1(\stat_select_reg[4][2]_0 [0]),
        .I2(stat133_out),
        .I3(\sample_1_reg[2]_0 [3]),
        .I4(valid_instr),
        .I5(\stat_select_reg[4][2]_0 [2]),
        .O(\all_statistics_counters[4].request_i_9_n_0 ));
  FDRE \all_statistics_counters[4].request_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\all_statistics_counters[4].request_i_1_n_0 ),
        .Q(\all_statistics_counters[4].request_reg_0 ),
        .R(1'b0));
  MUXF7 \all_statistics_counters[4].request_reg_i_3 
       (.I0(\all_statistics_counters[4].ready_reg_3 ),
        .I1(\all_statistics_counters[4].request_i_6_n_0 ),
        .O(\all_statistics_counters[4].request_reg_i_3_n_0 ),
        .S(\stat_select_reg_n_0_[4][3] ));
  block_design_microblaze_0_0_debug_stat_counter__parameterized2 \all_statistics_counters[5].Debug_Stat_Counter_i 
       (.Clk(Clk),
        .D(min_max),
        .E(data_write),
        .Empty_reg_0(Empty_reg_4),
        .Empty_reg_1(Empty_reg_10),
        .Full_reg_0({\all_statistics_counters[5].Debug_Stat_Counter_i_n_69 ,\all_statistics_counters[5].Debug_Stat_Counter_i_n_70 }),
        .\Gen_Access_Counter.Access_Overflow_reg[0]_0 (\Gen_Access_Counter.Access_Overflow_reg[0] ),
        .\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 (cycle_count_2),
        .\Gen_Access_Counter.Cycle_Count_i_reg[0]_0 (cycle_count),
        .\Gen_Access_Counter.Minimum_reg[0]_0 ({data_write_reg[0],data_write_reg[1],data_write_reg[2],data_write_reg[3],data_write_reg[4],data_write_reg[5],data_write_reg[6],data_write_reg[7],data_write_reg[8],data_write_reg[9],data_write_reg[10],data_write_reg[11],data_write_reg[12],data_write_reg[13],data_write_reg[14],data_write_reg[15],data_write_reg[16],data_write_reg[17],data_write_reg[18],data_write_reg[19],data_write_reg[20],data_write_reg[21],data_write_reg[22],data_write_reg[23],data_write_reg[24],data_write_reg[25],data_write_reg[26],data_write_reg[27],data_write_reg[28],data_write_reg[29],data_write_reg[30],data_write_reg[31]}),
        .\Gen_Access_Counter.Overflow_reg_0 ({\data_write_select_reg_n_0_[3] ,\data_write_select_reg_n_0_[2] ,\data_write_select_reg_n_0_[1] ,\data_write_select_reg_n_0_[0] }),
        .\Gen_Access_Counter.c0_no_overflow_reg_0 (\Gen_Access_Counter.c0_no_overflow_reg ),
        .\Gen_Access_Counter.c0_stop_valid_reg_0 (\Gen_Access_Counter.c0_stop_valid_reg ),
        .Is_Valid_9(Is_Valid_9),
        .\Is_Valid_reg[0]_0 (\Is_Valid_reg[0]_4 ),
        .Q({\all_statistics_counters[5].Debug_Stat_Counter_i_n_5 ,\all_statistics_counters[5].Debug_Stat_Counter_i_n_6 ,\all_statistics_counters[5].Debug_Stat_Counter_i_n_7 ,\all_statistics_counters[5].Debug_Stat_Counter_i_n_8 ,\all_statistics_counters[5].Debug_Stat_Counter_i_n_9 ,\all_statistics_counters[5].Debug_Stat_Counter_i_n_10 ,\all_statistics_counters[5].Debug_Stat_Counter_i_n_11 ,\all_statistics_counters[5].Debug_Stat_Counter_i_n_12 ,\all_statistics_counters[5].Debug_Stat_Counter_i_n_13 ,\all_statistics_counters[5].Debug_Stat_Counter_i_n_14 ,\all_statistics_counters[5].Debug_Stat_Counter_i_n_15 ,\all_statistics_counters[5].Debug_Stat_Counter_i_n_16 ,\all_statistics_counters[5].Debug_Stat_Counter_i_n_17 ,\all_statistics_counters[5].Debug_Stat_Counter_i_n_18 ,\all_statistics_counters[5].Debug_Stat_Counter_i_n_19 ,\all_statistics_counters[5].Debug_Stat_Counter_i_n_20 ,\all_statistics_counters[5].Debug_Stat_Counter_i_n_21 ,\all_statistics_counters[5].Debug_Stat_Counter_i_n_22 ,\all_statistics_counters[5].Debug_Stat_Counter_i_n_23 ,\all_statistics_counters[5].Debug_Stat_Counter_i_n_24 ,\all_statistics_counters[5].Debug_Stat_Counter_i_n_25 ,\all_statistics_counters[5].Debug_Stat_Counter_i_n_26 ,\all_statistics_counters[5].Debug_Stat_Counter_i_n_27 ,\all_statistics_counters[5].Debug_Stat_Counter_i_n_28 ,\all_statistics_counters[5].Debug_Stat_Counter_i_n_29 ,\all_statistics_counters[5].Debug_Stat_Counter_i_n_30 ,\all_statistics_counters[5].Debug_Stat_Counter_i_n_31 ,\all_statistics_counters[5].Debug_Stat_Counter_i_n_32 ,\all_statistics_counters[5].Debug_Stat_Counter_i_n_33 ,\all_statistics_counters[5].Debug_Stat_Counter_i_n_34 ,\all_statistics_counters[5].Debug_Stat_Counter_i_n_35 ,\all_statistics_counters[5].Debug_Stat_Counter_i_n_36 }),
        .\Running_reg[0]_0 (Running_8),
        .Stopping_reg_0(Stopping_reg),
        .Stopping_reg_1(\all_statistics_counters[5].ready_reg_0 ),
        .Stopping_reg_2(stat_pause),
        .Stopping_reg_3(\all_statistics_counters[5].request_reg_0 ),
        .clear_cmd(clear_cmd),
        .sync_reset(sync_reset));
  LUT6 #(
    .INIT(64'h8F80FFFF8F800000)) 
    \all_statistics_counters[5].ready_i_1 
       (.I0(\stat_select_reg_n_0_[5][3] ),
        .I1(\all_statistics_counters[5].ready_i_2_n_0 ),
        .I2(\stat_select_reg_n_0_[5][4] ),
        .I3(\all_statistics_counters[5].request_reg_i_3_n_0 ),
        .I4(\stat_select_reg_n_0_[5][5] ),
        .I5(\all_statistics_counters[5].request_i_4_n_0 ),
        .O(\all_statistics_counters[5].ready_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hC0C0A0A00F000000)) 
    \all_statistics_counters[5].ready_i_2 
       (.I0(new_rvalid),
        .I1(new_bvalid),
        .I2(\stat_select_reg[5][2]_0 [2]),
        .I3(stat_stop),
        .I4(\stat_select_reg[5][2]_0 [0]),
        .I5(\stat_select_reg[5][2]_0 [1]),
        .O(\all_statistics_counters[5].ready_i_2_n_0 ));
  FDRE \all_statistics_counters[5].ready_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\all_statistics_counters[5].ready_i_1_n_0 ),
        .Q(\all_statistics_counters[5].ready_reg_0 ),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h8F80FFFF8F800000)) 
    \all_statistics_counters[5].request_i_1 
       (.I0(\stat_select_reg_n_0_[5][3] ),
        .I1(\all_statistics_counters[5].request_i_2_n_0 ),
        .I2(\stat_select_reg_n_0_[5][4] ),
        .I3(\all_statistics_counters[5].request_reg_i_3_n_0 ),
        .I4(\stat_select_reg_n_0_[5][5] ),
        .I5(\all_statistics_counters[5].request_i_4_n_0 ),
        .O(\all_statistics_counters[5].request_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h3000BB3330008800)) 
    \all_statistics_counters[5].request_i_12 
       (.I0(\sample_1_reg[2]_0 [1]),
        .I1(\stat_select_reg[5][2]_0 [1]),
        .I2(\sample_1_reg[2]_0 [2]),
        .I3(valid_instr),
        .I4(\stat_select_reg[5][2]_0 [0]),
        .I5(stat5_out),
        .O(\all_statistics_counters[5].request_i_12_n_0 ));
  LUT6 #(
    .INIT(64'h00000000020202F2)) 
    \all_statistics_counters[5].request_i_13 
       (.I0(\sample_1_reg[2]_0 [4]),
        .I1(\all_statistics_counters[0].request_i_7_0 ),
        .I2(\stat_select_reg[5][2]_0 [0]),
        .I3(trace_OF_PipeRun_i),
        .I4(trace_MB_Halted_i),
        .I5(\stat_select_reg[5][2]_0 [1]),
        .O(\all_statistics_counters[5].request_i_13_n_0 ));
  LUT6 #(
    .INIT(64'hC0C0A0A00F000000)) 
    \all_statistics_counters[5].request_i_2 
       (.I0(new_arvalid__0),
        .I1(new_awvalid__0),
        .I2(\stat_select_reg[5][2]_0 [2]),
        .I3(new_interrupt_reg_n_0),
        .I4(\stat_select_reg[5][2]_0 [0]),
        .I5(\stat_select_reg[5][2]_0 [1]),
        .O(\all_statistics_counters[5].request_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \all_statistics_counters[5].request_i_4 
       (.I0(\all_statistics_counters[5].request_i_7_n_0 ),
        .I1(\all_statistics_counters[5].ready_reg_1 ),
        .I2(\stat_select_reg_n_0_[5][4] ),
        .I3(\all_statistics_counters[5].request_i_9_n_0 ),
        .I4(\stat_select_reg_n_0_[5][3] ),
        .I5(\all_statistics_counters[5].ready_reg_2 ),
        .O(\all_statistics_counters[5].request_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h00E2FFFF00E20000)) 
    \all_statistics_counters[5].request_i_6 
       (.I0(stat2_out),
        .I1(\stat_select_reg[5][2]_0 [0]),
        .I2(\all_statistics_counters[0].request_reg_i_3_0 ),
        .I3(\stat_select_reg[5][2]_0 [1]),
        .I4(\stat_select_reg[5][2]_0 [2]),
        .I5(\all_statistics_counters[5].request_i_12_n_0 ),
        .O(\all_statistics_counters[5].request_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hA202FFFFA2020000)) 
    \all_statistics_counters[5].request_i_7 
       (.I0(\stat_select_reg[5][2]_0 [1]),
        .I1(trace_MB_Halted_i_reg_0),
        .I2(\stat_select_reg[5][2]_0 [0]),
        .I3(\all_statistics_counters[0].request_i_4_0 ),
        .I4(\stat_select_reg[5][2]_0 [2]),
        .I5(\all_statistics_counters[5].request_i_13_n_0 ),
        .O(\all_statistics_counters[5].request_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h0000000010400000)) 
    \all_statistics_counters[5].request_i_9 
       (.I0(\stat_select_reg[5][2]_0 [1]),
        .I1(\stat_select_reg[5][2]_0 [0]),
        .I2(stat133_out),
        .I3(\sample_1_reg[2]_0 [3]),
        .I4(valid_instr),
        .I5(\stat_select_reg[5][2]_0 [2]),
        .O(\all_statistics_counters[5].request_i_9_n_0 ));
  FDRE \all_statistics_counters[5].request_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\all_statistics_counters[5].request_i_1_n_0 ),
        .Q(\all_statistics_counters[5].request_reg_0 ),
        .R(1'b0));
  MUXF7 \all_statistics_counters[5].request_reg_i_3 
       (.I0(\all_statistics_counters[5].ready_reg_3 ),
        .I1(\all_statistics_counters[5].request_i_6_n_0 ),
        .O(\all_statistics_counters[5].request_reg_i_3_n_0 ),
        .S(\stat_select_reg_n_0_[5][3] ));
  FDRE control_rst_reg
       (.C(Clk),
        .CE(1'b1),
        .D(control_rst_reg_0),
        .Q(control_rst),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h0006)) 
    \control_select[0]_i_1 
       (.I0(control_select[0]),
        .I1(control_incr),
        .I2(reset_cmd),
        .I3(sync_reset),
        .O(\control_select[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h00000000000026AA)) 
    \control_select[1]_i_1 
       (.I0(control_select[1]),
        .I1(control_incr),
        .I2(control_select[2]),
        .I3(control_select[0]),
        .I4(reset_cmd),
        .I5(sync_reset),
        .O(\control_select[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000006A2A)) 
    \control_select[2]_i_1 
       (.I0(control_select[2]),
        .I1(control_incr),
        .I2(control_select[0]),
        .I3(control_select[1]),
        .I4(reset_cmd),
        .I5(sync_reset),
        .O(\control_select[2]_i_1_n_0 ));
  FDRE \control_select_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\control_select[0]_i_1_n_0 ),
        .Q(control_select[0]),
        .R(1'b0));
  FDRE \control_select_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\control_select[1]_i_1_n_0 ),
        .Q(control_select[1]),
        .R(1'b0));
  FDRE \control_select_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(\control_select[2]_i_1_n_0 ),
        .Q(control_select[2]),
        .R(1'b0));
  FDRE \data_sample_reg_reg[0][0] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(access_count[31]),
        .Q(\data_sample_reg_reg[0]_0 [31]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[0][10] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(access_count[21]),
        .Q(\data_sample_reg_reg[0]_0 [21]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[0][11] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(access_count[20]),
        .Q(\data_sample_reg_reg[0]_0 [20]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[0][12] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(access_count[19]),
        .Q(\data_sample_reg_reg[0]_0 [19]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[0][13] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(access_count[18]),
        .Q(\data_sample_reg_reg[0]_0 [18]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[0][14] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(access_count[17]),
        .Q(\data_sample_reg_reg[0]_0 [17]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[0][15] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(access_count[16]),
        .Q(\data_sample_reg_reg[0]_0 [16]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[0][16] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(access_count[15]),
        .Q(\data_sample_reg_reg[0]_0 [15]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[0][17] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(access_count[14]),
        .Q(\data_sample_reg_reg[0]_0 [14]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[0][18] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(access_count[13]),
        .Q(\data_sample_reg_reg[0]_0 [13]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[0][19] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(access_count[12]),
        .Q(\data_sample_reg_reg[0]_0 [12]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[0][1] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(access_count[30]),
        .Q(\data_sample_reg_reg[0]_0 [30]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[0][20] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(access_count[11]),
        .Q(\data_sample_reg_reg[0]_0 [11]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[0][21] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(access_count[10]),
        .Q(\data_sample_reg_reg[0]_0 [10]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[0][22] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(access_count[9]),
        .Q(\data_sample_reg_reg[0]_0 [9]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[0][23] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(access_count[8]),
        .Q(\data_sample_reg_reg[0]_0 [8]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[0][24] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(access_count[7]),
        .Q(\data_sample_reg_reg[0]_0 [7]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[0][25] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(access_count[6]),
        .Q(\data_sample_reg_reg[0]_0 [6]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[0][26] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(access_count[5]),
        .Q(\data_sample_reg_reg[0]_0 [5]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[0][27] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(access_count[4]),
        .Q(\data_sample_reg_reg[0]_0 [4]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[0][28] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(access_count[3]),
        .Q(\data_sample_reg_reg[0]_0 [3]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[0][29] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(access_count[2]),
        .Q(\data_sample_reg_reg[0]_0 [2]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[0][2] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(access_count[29]),
        .Q(\data_sample_reg_reg[0]_0 [29]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[0][30] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(access_count[1]),
        .Q(\data_sample_reg_reg[0]_0 [1]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[0][31] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(access_count[0]),
        .Q(\data_sample_reg_reg[0]_0 [0]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[0][3] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(access_count[28]),
        .Q(\data_sample_reg_reg[0]_0 [28]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[0][4] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(access_count[27]),
        .Q(\data_sample_reg_reg[0]_0 [27]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[0][5] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(access_count[26]),
        .Q(\data_sample_reg_reg[0]_0 [26]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[0][6] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(access_count[25]),
        .Q(\data_sample_reg_reg[0]_0 [25]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[0][7] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(access_count[24]),
        .Q(\data_sample_reg_reg[0]_0 [24]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[0][8] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(access_count[23]),
        .Q(\data_sample_reg_reg[0]_0 [23]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[0][9] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(access_count[22]),
        .Q(\data_sample_reg_reg[0]_0 [22]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[1][0] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[1].Debug_Stat_Counter_i_n_5 ),
        .Q(\data_sample_reg_reg[1]_1 [31]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[1][10] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[1].Debug_Stat_Counter_i_n_15 ),
        .Q(\data_sample_reg_reg[1]_1 [21]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[1][11] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[1].Debug_Stat_Counter_i_n_16 ),
        .Q(\data_sample_reg_reg[1]_1 [20]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[1][12] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[1].Debug_Stat_Counter_i_n_17 ),
        .Q(\data_sample_reg_reg[1]_1 [19]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[1][13] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[1].Debug_Stat_Counter_i_n_18 ),
        .Q(\data_sample_reg_reg[1]_1 [18]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[1][14] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[1].Debug_Stat_Counter_i_n_19 ),
        .Q(\data_sample_reg_reg[1]_1 [17]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[1][15] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[1].Debug_Stat_Counter_i_n_20 ),
        .Q(\data_sample_reg_reg[1]_1 [16]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[1][16] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[1].Debug_Stat_Counter_i_n_21 ),
        .Q(\data_sample_reg_reg[1]_1 [15]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[1][17] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[1].Debug_Stat_Counter_i_n_22 ),
        .Q(\data_sample_reg_reg[1]_1 [14]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[1][18] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[1].Debug_Stat_Counter_i_n_23 ),
        .Q(\data_sample_reg_reg[1]_1 [13]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[1][19] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[1].Debug_Stat_Counter_i_n_24 ),
        .Q(\data_sample_reg_reg[1]_1 [12]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[1][1] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[1].Debug_Stat_Counter_i_n_6 ),
        .Q(\data_sample_reg_reg[1]_1 [30]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[1][20] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[1].Debug_Stat_Counter_i_n_25 ),
        .Q(\data_sample_reg_reg[1]_1 [11]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[1][21] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[1].Debug_Stat_Counter_i_n_26 ),
        .Q(\data_sample_reg_reg[1]_1 [10]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[1][22] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[1].Debug_Stat_Counter_i_n_27 ),
        .Q(\data_sample_reg_reg[1]_1 [9]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[1][23] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[1].Debug_Stat_Counter_i_n_28 ),
        .Q(\data_sample_reg_reg[1]_1 [8]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[1][24] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[1].Debug_Stat_Counter_i_n_29 ),
        .Q(\data_sample_reg_reg[1]_1 [7]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[1][25] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[1].Debug_Stat_Counter_i_n_30 ),
        .Q(\data_sample_reg_reg[1]_1 [6]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[1][26] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[1].Debug_Stat_Counter_i_n_31 ),
        .Q(\data_sample_reg_reg[1]_1 [5]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[1][27] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[1].Debug_Stat_Counter_i_n_32 ),
        .Q(\data_sample_reg_reg[1]_1 [4]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[1][28] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[1].Debug_Stat_Counter_i_n_33 ),
        .Q(\data_sample_reg_reg[1]_1 [3]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[1][29] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[1].Debug_Stat_Counter_i_n_34 ),
        .Q(\data_sample_reg_reg[1]_1 [2]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[1][2] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[1].Debug_Stat_Counter_i_n_7 ),
        .Q(\data_sample_reg_reg[1]_1 [29]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[1][30] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[1].Debug_Stat_Counter_i_n_35 ),
        .Q(\data_sample_reg_reg[1]_1 [1]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[1][31] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[1].Debug_Stat_Counter_i_n_36 ),
        .Q(\data_sample_reg_reg[1]_1 [0]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[1][3] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[1].Debug_Stat_Counter_i_n_8 ),
        .Q(\data_sample_reg_reg[1]_1 [28]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[1][4] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[1].Debug_Stat_Counter_i_n_9 ),
        .Q(\data_sample_reg_reg[1]_1 [27]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[1][5] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[1].Debug_Stat_Counter_i_n_10 ),
        .Q(\data_sample_reg_reg[1]_1 [26]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[1][6] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[1].Debug_Stat_Counter_i_n_11 ),
        .Q(\data_sample_reg_reg[1]_1 [25]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[1][7] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[1].Debug_Stat_Counter_i_n_12 ),
        .Q(\data_sample_reg_reg[1]_1 [24]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[1][8] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[1].Debug_Stat_Counter_i_n_13 ),
        .Q(\data_sample_reg_reg[1]_1 [23]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[1][9] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[1].Debug_Stat_Counter_i_n_14 ),
        .Q(\data_sample_reg_reg[1]_1 [22]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[2][0] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[2].Debug_Stat_Counter_i_n_5 ),
        .Q(\data_sample_reg_reg[2]_2 [31]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[2][10] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[2].Debug_Stat_Counter_i_n_15 ),
        .Q(\data_sample_reg_reg[2]_2 [21]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[2][11] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[2].Debug_Stat_Counter_i_n_16 ),
        .Q(\data_sample_reg_reg[2]_2 [20]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[2][12] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[2].Debug_Stat_Counter_i_n_17 ),
        .Q(\data_sample_reg_reg[2]_2 [19]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[2][13] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[2].Debug_Stat_Counter_i_n_18 ),
        .Q(\data_sample_reg_reg[2]_2 [18]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[2][14] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[2].Debug_Stat_Counter_i_n_19 ),
        .Q(\data_sample_reg_reg[2]_2 [17]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[2][15] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[2].Debug_Stat_Counter_i_n_20 ),
        .Q(\data_sample_reg_reg[2]_2 [16]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[2][16] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[2].Debug_Stat_Counter_i_n_21 ),
        .Q(\data_sample_reg_reg[2]_2 [15]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[2][17] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[2].Debug_Stat_Counter_i_n_22 ),
        .Q(\data_sample_reg_reg[2]_2 [14]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[2][18] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[2].Debug_Stat_Counter_i_n_23 ),
        .Q(\data_sample_reg_reg[2]_2 [13]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[2][19] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[2].Debug_Stat_Counter_i_n_24 ),
        .Q(\data_sample_reg_reg[2]_2 [12]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[2][1] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[2].Debug_Stat_Counter_i_n_6 ),
        .Q(\data_sample_reg_reg[2]_2 [30]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[2][20] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[2].Debug_Stat_Counter_i_n_25 ),
        .Q(\data_sample_reg_reg[2]_2 [11]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[2][21] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[2].Debug_Stat_Counter_i_n_26 ),
        .Q(\data_sample_reg_reg[2]_2 [10]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[2][22] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[2].Debug_Stat_Counter_i_n_27 ),
        .Q(\data_sample_reg_reg[2]_2 [9]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[2][23] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[2].Debug_Stat_Counter_i_n_28 ),
        .Q(\data_sample_reg_reg[2]_2 [8]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[2][24] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[2].Debug_Stat_Counter_i_n_29 ),
        .Q(\data_sample_reg_reg[2]_2 [7]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[2][25] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[2].Debug_Stat_Counter_i_n_30 ),
        .Q(\data_sample_reg_reg[2]_2 [6]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[2][26] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[2].Debug_Stat_Counter_i_n_31 ),
        .Q(\data_sample_reg_reg[2]_2 [5]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[2][27] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[2].Debug_Stat_Counter_i_n_32 ),
        .Q(\data_sample_reg_reg[2]_2 [4]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[2][28] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[2].Debug_Stat_Counter_i_n_33 ),
        .Q(\data_sample_reg_reg[2]_2 [3]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[2][29] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[2].Debug_Stat_Counter_i_n_34 ),
        .Q(\data_sample_reg_reg[2]_2 [2]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[2][2] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[2].Debug_Stat_Counter_i_n_7 ),
        .Q(\data_sample_reg_reg[2]_2 [29]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[2][30] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[2].Debug_Stat_Counter_i_n_35 ),
        .Q(\data_sample_reg_reg[2]_2 [1]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[2][31] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[2].Debug_Stat_Counter_i_n_36 ),
        .Q(\data_sample_reg_reg[2]_2 [0]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[2][3] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[2].Debug_Stat_Counter_i_n_8 ),
        .Q(\data_sample_reg_reg[2]_2 [28]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[2][4] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[2].Debug_Stat_Counter_i_n_9 ),
        .Q(\data_sample_reg_reg[2]_2 [27]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[2][5] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[2].Debug_Stat_Counter_i_n_10 ),
        .Q(\data_sample_reg_reg[2]_2 [26]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[2][6] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[2].Debug_Stat_Counter_i_n_11 ),
        .Q(\data_sample_reg_reg[2]_2 [25]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[2][7] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[2].Debug_Stat_Counter_i_n_12 ),
        .Q(\data_sample_reg_reg[2]_2 [24]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[2][8] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[2].Debug_Stat_Counter_i_n_13 ),
        .Q(\data_sample_reg_reg[2]_2 [23]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[2][9] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[2].Debug_Stat_Counter_i_n_14 ),
        .Q(\data_sample_reg_reg[2]_2 [22]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[3][0] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[3].Debug_Stat_Counter_i_n_5 ),
        .Q(\data_sample_reg_reg[3]_3 [31]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[3][10] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[3].Debug_Stat_Counter_i_n_15 ),
        .Q(\data_sample_reg_reg[3]_3 [21]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[3][11] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[3].Debug_Stat_Counter_i_n_16 ),
        .Q(\data_sample_reg_reg[3]_3 [20]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[3][12] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[3].Debug_Stat_Counter_i_n_17 ),
        .Q(\data_sample_reg_reg[3]_3 [19]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[3][13] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[3].Debug_Stat_Counter_i_n_18 ),
        .Q(\data_sample_reg_reg[3]_3 [18]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[3][14] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[3].Debug_Stat_Counter_i_n_19 ),
        .Q(\data_sample_reg_reg[3]_3 [17]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[3][15] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[3].Debug_Stat_Counter_i_n_20 ),
        .Q(\data_sample_reg_reg[3]_3 [16]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[3][16] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[3].Debug_Stat_Counter_i_n_21 ),
        .Q(\data_sample_reg_reg[3]_3 [15]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[3][17] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[3].Debug_Stat_Counter_i_n_22 ),
        .Q(\data_sample_reg_reg[3]_3 [14]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[3][18] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[3].Debug_Stat_Counter_i_n_23 ),
        .Q(\data_sample_reg_reg[3]_3 [13]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[3][19] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[3].Debug_Stat_Counter_i_n_24 ),
        .Q(\data_sample_reg_reg[3]_3 [12]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[3][1] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[3].Debug_Stat_Counter_i_n_6 ),
        .Q(\data_sample_reg_reg[3]_3 [30]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[3][20] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[3].Debug_Stat_Counter_i_n_25 ),
        .Q(\data_sample_reg_reg[3]_3 [11]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[3][21] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[3].Debug_Stat_Counter_i_n_26 ),
        .Q(\data_sample_reg_reg[3]_3 [10]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[3][22] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[3].Debug_Stat_Counter_i_n_27 ),
        .Q(\data_sample_reg_reg[3]_3 [9]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[3][23] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[3].Debug_Stat_Counter_i_n_28 ),
        .Q(\data_sample_reg_reg[3]_3 [8]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[3][24] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[3].Debug_Stat_Counter_i_n_29 ),
        .Q(\data_sample_reg_reg[3]_3 [7]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[3][25] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[3].Debug_Stat_Counter_i_n_30 ),
        .Q(\data_sample_reg_reg[3]_3 [6]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[3][26] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[3].Debug_Stat_Counter_i_n_31 ),
        .Q(\data_sample_reg_reg[3]_3 [5]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[3][27] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[3].Debug_Stat_Counter_i_n_32 ),
        .Q(\data_sample_reg_reg[3]_3 [4]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[3][28] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[3].Debug_Stat_Counter_i_n_33 ),
        .Q(\data_sample_reg_reg[3]_3 [3]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[3][29] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[3].Debug_Stat_Counter_i_n_34 ),
        .Q(\data_sample_reg_reg[3]_3 [2]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[3][2] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[3].Debug_Stat_Counter_i_n_7 ),
        .Q(\data_sample_reg_reg[3]_3 [29]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[3][30] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[3].Debug_Stat_Counter_i_n_35 ),
        .Q(\data_sample_reg_reg[3]_3 [1]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[3][31] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[3].Debug_Stat_Counter_i_n_36 ),
        .Q(\data_sample_reg_reg[3]_3 [0]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[3][3] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[3].Debug_Stat_Counter_i_n_8 ),
        .Q(\data_sample_reg_reg[3]_3 [28]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[3][4] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[3].Debug_Stat_Counter_i_n_9 ),
        .Q(\data_sample_reg_reg[3]_3 [27]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[3][5] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[3].Debug_Stat_Counter_i_n_10 ),
        .Q(\data_sample_reg_reg[3]_3 [26]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[3][6] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[3].Debug_Stat_Counter_i_n_11 ),
        .Q(\data_sample_reg_reg[3]_3 [25]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[3][7] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[3].Debug_Stat_Counter_i_n_12 ),
        .Q(\data_sample_reg_reg[3]_3 [24]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[3][8] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[3].Debug_Stat_Counter_i_n_13 ),
        .Q(\data_sample_reg_reg[3]_3 [23]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[3][9] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[3].Debug_Stat_Counter_i_n_14 ),
        .Q(\data_sample_reg_reg[3]_3 [22]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[4][0] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[4].Debug_Stat_Counter_i_n_5 ),
        .Q(\data_sample_reg_reg[4]_4 [31]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[4][10] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[4].Debug_Stat_Counter_i_n_15 ),
        .Q(\data_sample_reg_reg[4]_4 [21]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[4][11] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[4].Debug_Stat_Counter_i_n_16 ),
        .Q(\data_sample_reg_reg[4]_4 [20]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[4][12] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[4].Debug_Stat_Counter_i_n_17 ),
        .Q(\data_sample_reg_reg[4]_4 [19]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[4][13] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[4].Debug_Stat_Counter_i_n_18 ),
        .Q(\data_sample_reg_reg[4]_4 [18]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[4][14] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[4].Debug_Stat_Counter_i_n_19 ),
        .Q(\data_sample_reg_reg[4]_4 [17]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[4][15] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[4].Debug_Stat_Counter_i_n_20 ),
        .Q(\data_sample_reg_reg[4]_4 [16]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[4][16] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[4].Debug_Stat_Counter_i_n_21 ),
        .Q(\data_sample_reg_reg[4]_4 [15]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[4][17] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[4].Debug_Stat_Counter_i_n_22 ),
        .Q(\data_sample_reg_reg[4]_4 [14]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[4][18] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[4].Debug_Stat_Counter_i_n_23 ),
        .Q(\data_sample_reg_reg[4]_4 [13]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[4][19] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[4].Debug_Stat_Counter_i_n_24 ),
        .Q(\data_sample_reg_reg[4]_4 [12]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[4][1] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[4].Debug_Stat_Counter_i_n_6 ),
        .Q(\data_sample_reg_reg[4]_4 [30]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[4][20] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[4].Debug_Stat_Counter_i_n_25 ),
        .Q(\data_sample_reg_reg[4]_4 [11]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[4][21] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[4].Debug_Stat_Counter_i_n_26 ),
        .Q(\data_sample_reg_reg[4]_4 [10]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[4][22] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[4].Debug_Stat_Counter_i_n_27 ),
        .Q(\data_sample_reg_reg[4]_4 [9]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[4][23] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[4].Debug_Stat_Counter_i_n_28 ),
        .Q(\data_sample_reg_reg[4]_4 [8]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[4][24] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[4].Debug_Stat_Counter_i_n_29 ),
        .Q(\data_sample_reg_reg[4]_4 [7]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[4][25] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[4].Debug_Stat_Counter_i_n_30 ),
        .Q(\data_sample_reg_reg[4]_4 [6]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[4][26] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[4].Debug_Stat_Counter_i_n_31 ),
        .Q(\data_sample_reg_reg[4]_4 [5]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[4][27] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[4].Debug_Stat_Counter_i_n_32 ),
        .Q(\data_sample_reg_reg[4]_4 [4]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[4][28] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[4].Debug_Stat_Counter_i_n_33 ),
        .Q(\data_sample_reg_reg[4]_4 [3]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[4][29] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[4].Debug_Stat_Counter_i_n_34 ),
        .Q(\data_sample_reg_reg[4]_4 [2]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[4][2] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[4].Debug_Stat_Counter_i_n_7 ),
        .Q(\data_sample_reg_reg[4]_4 [29]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[4][30] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[4].Debug_Stat_Counter_i_n_35 ),
        .Q(\data_sample_reg_reg[4]_4 [1]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[4][31] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[4].Debug_Stat_Counter_i_n_36 ),
        .Q(\data_sample_reg_reg[4]_4 [0]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[4][3] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[4].Debug_Stat_Counter_i_n_8 ),
        .Q(\data_sample_reg_reg[4]_4 [28]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[4][4] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[4].Debug_Stat_Counter_i_n_9 ),
        .Q(\data_sample_reg_reg[4]_4 [27]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[4][5] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[4].Debug_Stat_Counter_i_n_10 ),
        .Q(\data_sample_reg_reg[4]_4 [26]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[4][6] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[4].Debug_Stat_Counter_i_n_11 ),
        .Q(\data_sample_reg_reg[4]_4 [25]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[4][7] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[4].Debug_Stat_Counter_i_n_12 ),
        .Q(\data_sample_reg_reg[4]_4 [24]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[4][8] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[4].Debug_Stat_Counter_i_n_13 ),
        .Q(\data_sample_reg_reg[4]_4 [23]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[4][9] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[4].Debug_Stat_Counter_i_n_14 ),
        .Q(\data_sample_reg_reg[4]_4 [22]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[5][0] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[5].Debug_Stat_Counter_i_n_5 ),
        .Q(\data_sample_reg_reg[5]_5 [31]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[5][10] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[5].Debug_Stat_Counter_i_n_15 ),
        .Q(\data_sample_reg_reg[5]_5 [21]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[5][11] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[5].Debug_Stat_Counter_i_n_16 ),
        .Q(\data_sample_reg_reg[5]_5 [20]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[5][12] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[5].Debug_Stat_Counter_i_n_17 ),
        .Q(\data_sample_reg_reg[5]_5 [19]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[5][13] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[5].Debug_Stat_Counter_i_n_18 ),
        .Q(\data_sample_reg_reg[5]_5 [18]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[5][14] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[5].Debug_Stat_Counter_i_n_19 ),
        .Q(\data_sample_reg_reg[5]_5 [17]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[5][15] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[5].Debug_Stat_Counter_i_n_20 ),
        .Q(\data_sample_reg_reg[5]_5 [16]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[5][16] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[5].Debug_Stat_Counter_i_n_21 ),
        .Q(\data_sample_reg_reg[5]_5 [15]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[5][17] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[5].Debug_Stat_Counter_i_n_22 ),
        .Q(\data_sample_reg_reg[5]_5 [14]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[5][18] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[5].Debug_Stat_Counter_i_n_23 ),
        .Q(\data_sample_reg_reg[5]_5 [13]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[5][19] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[5].Debug_Stat_Counter_i_n_24 ),
        .Q(\data_sample_reg_reg[5]_5 [12]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[5][1] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[5].Debug_Stat_Counter_i_n_6 ),
        .Q(\data_sample_reg_reg[5]_5 [30]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[5][20] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[5].Debug_Stat_Counter_i_n_25 ),
        .Q(\data_sample_reg_reg[5]_5 [11]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[5][21] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[5].Debug_Stat_Counter_i_n_26 ),
        .Q(\data_sample_reg_reg[5]_5 [10]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[5][22] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[5].Debug_Stat_Counter_i_n_27 ),
        .Q(\data_sample_reg_reg[5]_5 [9]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[5][23] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[5].Debug_Stat_Counter_i_n_28 ),
        .Q(\data_sample_reg_reg[5]_5 [8]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[5][24] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[5].Debug_Stat_Counter_i_n_29 ),
        .Q(\data_sample_reg_reg[5]_5 [7]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[5][25] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[5].Debug_Stat_Counter_i_n_30 ),
        .Q(\data_sample_reg_reg[5]_5 [6]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[5][26] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[5].Debug_Stat_Counter_i_n_31 ),
        .Q(\data_sample_reg_reg[5]_5 [5]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[5][27] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[5].Debug_Stat_Counter_i_n_32 ),
        .Q(\data_sample_reg_reg[5]_5 [4]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[5][28] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[5].Debug_Stat_Counter_i_n_33 ),
        .Q(\data_sample_reg_reg[5]_5 [3]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[5][29] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[5].Debug_Stat_Counter_i_n_34 ),
        .Q(\data_sample_reg_reg[5]_5 [2]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[5][2] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[5].Debug_Stat_Counter_i_n_7 ),
        .Q(\data_sample_reg_reg[5]_5 [29]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[5][30] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[5].Debug_Stat_Counter_i_n_35 ),
        .Q(\data_sample_reg_reg[5]_5 [1]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[5][31] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[5].Debug_Stat_Counter_i_n_36 ),
        .Q(\data_sample_reg_reg[5]_5 [0]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[5][3] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[5].Debug_Stat_Counter_i_n_8 ),
        .Q(\data_sample_reg_reg[5]_5 [28]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[5][4] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[5].Debug_Stat_Counter_i_n_9 ),
        .Q(\data_sample_reg_reg[5]_5 [27]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[5][5] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[5].Debug_Stat_Counter_i_n_10 ),
        .Q(\data_sample_reg_reg[5]_5 [26]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[5][6] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[5].Debug_Stat_Counter_i_n_11 ),
        .Q(\data_sample_reg_reg[5]_5 [25]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[5][7] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[5].Debug_Stat_Counter_i_n_12 ),
        .Q(\data_sample_reg_reg[5]_5 [24]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[5][8] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[5].Debug_Stat_Counter_i_n_13 ),
        .Q(\data_sample_reg_reg[5]_5 [23]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[5][9] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[5].Debug_Stat_Counter_i_n_14 ),
        .Q(\data_sample_reg_reg[5]_5 [22]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[6][0] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(cycle_count[31]),
        .Q(\data_sample_reg_reg[6]_6 [31]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[6][10] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(cycle_count[21]),
        .Q(\data_sample_reg_reg[6]_6 [21]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[6][11] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(cycle_count[20]),
        .Q(\data_sample_reg_reg[6]_6 [20]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[6][12] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(cycle_count[19]),
        .Q(\data_sample_reg_reg[6]_6 [19]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[6][13] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(cycle_count[18]),
        .Q(\data_sample_reg_reg[6]_6 [18]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[6][14] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(cycle_count[17]),
        .Q(\data_sample_reg_reg[6]_6 [17]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[6][15] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(cycle_count[16]),
        .Q(\data_sample_reg_reg[6]_6 [16]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[6][16] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(cycle_count[15]),
        .Q(\data_sample_reg_reg[6]_6 [15]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[6][17] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(cycle_count[14]),
        .Q(\data_sample_reg_reg[6]_6 [14]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[6][18] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(cycle_count[13]),
        .Q(\data_sample_reg_reg[6]_6 [13]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[6][19] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(cycle_count[12]),
        .Q(\data_sample_reg_reg[6]_6 [12]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[6][1] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(cycle_count[30]),
        .Q(\data_sample_reg_reg[6]_6 [30]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[6][20] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(cycle_count[11]),
        .Q(\data_sample_reg_reg[6]_6 [11]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[6][21] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(cycle_count[10]),
        .Q(\data_sample_reg_reg[6]_6 [10]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[6][22] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(cycle_count[9]),
        .Q(\data_sample_reg_reg[6]_6 [9]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[6][23] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(cycle_count[8]),
        .Q(\data_sample_reg_reg[6]_6 [8]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[6][24] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(cycle_count[7]),
        .Q(\data_sample_reg_reg[6]_6 [7]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[6][25] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(cycle_count[6]),
        .Q(\data_sample_reg_reg[6]_6 [6]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[6][26] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(cycle_count[5]),
        .Q(\data_sample_reg_reg[6]_6 [5]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[6][27] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(cycle_count[4]),
        .Q(\data_sample_reg_reg[6]_6 [4]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[6][28] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(cycle_count[3]),
        .Q(\data_sample_reg_reg[6]_6 [3]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[6][29] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(cycle_count[2]),
        .Q(\data_sample_reg_reg[6]_6 [2]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[6][2] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(cycle_count[29]),
        .Q(\data_sample_reg_reg[6]_6 [29]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[6][30] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(cycle_count[1]),
        .Q(\data_sample_reg_reg[6]_6 [1]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[6][31] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(cycle_count[0]),
        .Q(\data_sample_reg_reg[6]_6 [0]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[6][3] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(cycle_count[28]),
        .Q(\data_sample_reg_reg[6]_6 [28]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[6][4] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(cycle_count[27]),
        .Q(\data_sample_reg_reg[6]_6 [27]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[6][5] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(cycle_count[26]),
        .Q(\data_sample_reg_reg[6]_6 [26]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[6][6] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(cycle_count[25]),
        .Q(\data_sample_reg_reg[6]_6 [25]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[6][7] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(cycle_count[24]),
        .Q(\data_sample_reg_reg[6]_6 [24]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[6][8] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(cycle_count[23]),
        .Q(\data_sample_reg_reg[6]_6 [23]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[6][9] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(cycle_count[22]),
        .Q(\data_sample_reg_reg[6]_6 [22]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[7][0] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(cycle_count_2[31]),
        .Q(\data_sample_reg_reg[7]_7 [31]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[7][10] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(cycle_count_2[21]),
        .Q(\data_sample_reg_reg[7]_7 [21]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[7][11] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(cycle_count_2[20]),
        .Q(\data_sample_reg_reg[7]_7 [20]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[7][12] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(cycle_count_2[19]),
        .Q(\data_sample_reg_reg[7]_7 [19]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[7][13] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(cycle_count_2[18]),
        .Q(\data_sample_reg_reg[7]_7 [18]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[7][14] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(cycle_count_2[17]),
        .Q(\data_sample_reg_reg[7]_7 [17]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[7][15] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(cycle_count_2[16]),
        .Q(\data_sample_reg_reg[7]_7 [16]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[7][16] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(cycle_count_2[15]),
        .Q(\data_sample_reg_reg[7]_7 [15]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[7][17] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(cycle_count_2[14]),
        .Q(\data_sample_reg_reg[7]_7 [14]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[7][18] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(cycle_count_2[13]),
        .Q(\data_sample_reg_reg[7]_7 [13]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[7][19] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(cycle_count_2[12]),
        .Q(\data_sample_reg_reg[7]_7 [12]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[7][1] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(cycle_count_2[30]),
        .Q(\data_sample_reg_reg[7]_7 [30]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[7][20] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(cycle_count_2[11]),
        .Q(\data_sample_reg_reg[7]_7 [11]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[7][21] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(cycle_count_2[10]),
        .Q(\data_sample_reg_reg[7]_7 [10]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[7][22] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(cycle_count_2[9]),
        .Q(\data_sample_reg_reg[7]_7 [9]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[7][23] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(cycle_count_2[8]),
        .Q(\data_sample_reg_reg[7]_7 [8]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[7][24] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(cycle_count_2[7]),
        .Q(\data_sample_reg_reg[7]_7 [7]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[7][25] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(cycle_count_2[6]),
        .Q(\data_sample_reg_reg[7]_7 [6]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[7][26] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(cycle_count_2[5]),
        .Q(\data_sample_reg_reg[7]_7 [5]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[7][27] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(cycle_count_2[4]),
        .Q(\data_sample_reg_reg[7]_7 [4]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[7][28] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(cycle_count_2[3]),
        .Q(\data_sample_reg_reg[7]_7 [3]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[7][29] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(cycle_count_2[2]),
        .Q(\data_sample_reg_reg[7]_7 [2]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[7][2] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(cycle_count_2[29]),
        .Q(\data_sample_reg_reg[7]_7 [29]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[7][30] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(cycle_count_2[1]),
        .Q(\data_sample_reg_reg[7]_7 [1]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[7][31] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(cycle_count_2[0]),
        .Q(\data_sample_reg_reg[7]_7 [0]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[7][3] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(cycle_count_2[28]),
        .Q(\data_sample_reg_reg[7]_7 [28]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[7][4] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(cycle_count_2[27]),
        .Q(\data_sample_reg_reg[7]_7 [27]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[7][5] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(cycle_count_2[26]),
        .Q(\data_sample_reg_reg[7]_7 [26]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[7][6] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(cycle_count_2[25]),
        .Q(\data_sample_reg_reg[7]_7 [25]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[7][7] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(cycle_count_2[24]),
        .Q(\data_sample_reg_reg[7]_7 [24]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[7][8] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(cycle_count_2[23]),
        .Q(\data_sample_reg_reg[7]_7 [23]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[7][9] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(cycle_count_2[22]),
        .Q(\data_sample_reg_reg[7]_7 [22]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[8][0] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(min_max[31]),
        .Q(\data_sample_reg_reg[8]_8 [31]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[8][10] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(min_max[21]),
        .Q(\data_sample_reg_reg[8]_8 [21]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[8][11] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(min_max[20]),
        .Q(\data_sample_reg_reg[8]_8 [20]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[8][12] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(min_max[19]),
        .Q(\data_sample_reg_reg[8]_8 [19]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[8][13] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(min_max[18]),
        .Q(\data_sample_reg_reg[8]_8 [18]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[8][14] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(min_max[17]),
        .Q(\data_sample_reg_reg[8]_8 [17]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[8][15] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(min_max[16]),
        .Q(\data_sample_reg_reg[8]_8 [16]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[8][16] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(min_max[15]),
        .Q(\data_sample_reg_reg[8]_8 [15]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[8][17] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(min_max[14]),
        .Q(\data_sample_reg_reg[8]_8 [14]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[8][18] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(min_max[13]),
        .Q(\data_sample_reg_reg[8]_8 [13]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[8][19] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(min_max[12]),
        .Q(\data_sample_reg_reg[8]_8 [12]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[8][1] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(min_max[30]),
        .Q(\data_sample_reg_reg[8]_8 [30]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[8][20] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(min_max[11]),
        .Q(\data_sample_reg_reg[8]_8 [11]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[8][21] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(min_max[10]),
        .Q(\data_sample_reg_reg[8]_8 [10]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[8][22] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(min_max[9]),
        .Q(\data_sample_reg_reg[8]_8 [9]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[8][23] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(min_max[8]),
        .Q(\data_sample_reg_reg[8]_8 [8]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[8][24] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(min_max[7]),
        .Q(\data_sample_reg_reg[8]_8 [7]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[8][25] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(min_max[6]),
        .Q(\data_sample_reg_reg[8]_8 [6]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[8][26] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(min_max[5]),
        .Q(\data_sample_reg_reg[8]_8 [5]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[8][27] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(min_max[4]),
        .Q(\data_sample_reg_reg[8]_8 [4]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[8][28] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(min_max[3]),
        .Q(\data_sample_reg_reg[8]_8 [3]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[8][29] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(min_max[2]),
        .Q(\data_sample_reg_reg[8]_8 [2]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[8][2] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(min_max[29]),
        .Q(\data_sample_reg_reg[8]_8 [29]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[8][30] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(min_max[1]),
        .Q(\data_sample_reg_reg[8]_8 [1]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[8][31] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(min_max[0]),
        .Q(\data_sample_reg_reg[8]_8 [0]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[8][3] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(min_max[28]),
        .Q(\data_sample_reg_reg[8]_8 [28]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[8][4] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(min_max[27]),
        .Q(\data_sample_reg_reg[8]_8 [27]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[8][5] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(min_max[26]),
        .Q(\data_sample_reg_reg[8]_8 [26]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[8][6] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(min_max[25]),
        .Q(\data_sample_reg_reg[8]_8 [25]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[8][7] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(min_max[24]),
        .Q(\data_sample_reg_reg[8]_8 [24]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[8][8] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(min_max[23]),
        .Q(\data_sample_reg_reg[8]_8 [23]),
        .R(sync_reset));
  FDRE \data_sample_reg_reg[8][9] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(min_max[22]),
        .Q(\data_sample_reg_reg[8]_8 [22]),
        .R(sync_reset));
  FDRE data_write_rst_reg
       (.C(Clk),
        .CE(1'b1),
        .D(data_write_rst_reg_0),
        .Q(data_write_rst_reg_n_0),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair79" *) 
  LUT4 #(
    .INIT(16'h00EF)) 
    \data_write_select[0]_i_1 
       (.I0(\data_write_select_reg_n_0_[1] ),
        .I1(\data_write_select_reg_n_0_[2] ),
        .I2(\data_write_select_reg_n_0_[3] ),
        .I3(\data_write_select_reg_n_0_[0] ),
        .O(\data_write_select[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair83" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \data_write_select[1]_i_1 
       (.I0(\data_write_select_reg_n_0_[0] ),
        .I1(\data_write_select_reg_n_0_[1] ),
        .O(\data_write_select[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair83" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \data_write_select[2]_i_1 
       (.I0(\data_write_select_reg_n_0_[2] ),
        .I1(\data_write_select_reg_n_0_[1] ),
        .I2(\data_write_select_reg_n_0_[0] ),
        .O(\data_write_select[2]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \data_write_select[3]_i_1 
       (.I0(sync_reset),
        .I1(reset_cmd),
        .O(data_write_select));
  (* SOFT_HLUTNM = "soft_lutpair79" *) 
  LUT4 #(
    .INIT(16'h7E80)) 
    \data_write_select[3]_i_2 
       (.I0(\data_write_select_reg_n_0_[1] ),
        .I1(\data_write_select_reg_n_0_[0] ),
        .I2(\data_write_select_reg_n_0_[2] ),
        .I3(\data_write_select_reg_n_0_[3] ),
        .O(\data_write_select[3]_i_2_n_0 ));
  FDRE \data_write_select_reg[0] 
       (.C(Clk),
        .CE(data_write),
        .D(\data_write_select[0]_i_1_n_0 ),
        .Q(\data_write_select_reg_n_0_[0] ),
        .R(data_write_select));
  FDRE \data_write_select_reg[1] 
       (.C(Clk),
        .CE(data_write),
        .D(\data_write_select[1]_i_1_n_0 ),
        .Q(\data_write_select_reg_n_0_[1] ),
        .R(data_write_select));
  FDRE \data_write_select_reg[2] 
       (.C(Clk),
        .CE(data_write),
        .D(\data_write_select[2]_i_1_n_0 ),
        .Q(\data_write_select_reg_n_0_[2] ),
        .R(data_write_select));
  FDRE \data_write_select_reg[3] 
       (.C(Clk),
        .CE(data_write),
        .D(\data_write_select[3]_i_2_n_0 ),
        .Q(\data_write_select_reg_n_0_[3] ),
        .R(data_write_select));
  LUT6 #(
    .INIT(64'h5080000000800000)) 
    in_delay_slot_i_2
       (.I0(\sample_1_reg[2]_0 [55]),
        .I1(\sample_1_reg[2]_0 [58]),
        .I2(\sample_1_reg[2]_0 [57]),
        .I3(\sample_1_reg[2]_0 [56]),
        .I4(\trace_instruction_i_reg[0]_0 ),
        .I5(\sample_1_reg[2]_0 [49]),
        .O(uncond_ds_branch));
  LUT5 #(
    .INIT(32'h80000000)) 
    in_delay_slot_i_3
       (.I0(\sample_1_reg[2]_0 [54]),
        .I1(\sample_1_reg[2]_0 [55]),
        .I2(\trace_instruction_i_reg[0]_0 ),
        .I3(\sample_1_reg[2]_0 [56]),
        .I4(\sample_1_reg[2]_0 [57]),
        .O(cond_ds_branch));
  LUT2 #(
    .INIT(4'h2)) 
    in_delay_slot_i_5
       (.I0(\sample_1_reg[2]_0 [60]),
        .I1(\sample_1_reg[2]_0 [59]),
        .O(\trace_instruction_i_reg[0]_0 ));
  FDRE in_delay_slot_reg
       (.C(Clk),
        .CE(1'b1),
        .D(in_delay_slot_reg_0),
        .Q(in_delay_slot),
        .R(sync_reset));
  LUT3 #(
    .INIT(8'h0E)) 
    inside_handler_i_1
       (.I0(inside_handler),
        .I1(stat_stop),
        .I2(\sample_1_reg[2]_0 [5]),
        .O(inside_handler_i_1_n_0));
  LUT4 #(
    .INIT(16'hFFFE)) 
    inside_handler_i_10
       (.I0(\sample_1_reg[2]_0 [21]),
        .I1(\sample_1_reg[2]_0 [22]),
        .I2(\sample_1_reg[2]_0 [19]),
        .I3(\sample_1_reg[2]_0 [20]),
        .O(inside_handler_i_10_n_0));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    inside_handler_i_3
       (.I0(\sample_1_reg[2]_0 [16]),
        .I1(\sample_1_reg[2]_0 [15]),
        .I2(\sample_1_reg[2]_0 [18]),
        .I3(\sample_1_reg[2]_0 [17]),
        .I4(inside_handler_i_7_n_0),
        .O(\trace_pc_i_reg[17] ));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    inside_handler_i_5
       (.I0(\sample_1_reg[2]_0 [32]),
        .I1(\sample_1_reg[2]_0 [31]),
        .I2(\sample_1_reg[2]_0 [33]),
        .I3(\sample_1_reg[2]_0 [6]),
        .I4(inside_handler_i_9_n_0),
        .O(\trace_pc_i_reg[1] ));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    inside_handler_i_6
       (.I0(\sample_1_reg[2]_0 [24]),
        .I1(\sample_1_reg[2]_0 [23]),
        .I2(\sample_1_reg[2]_0 [26]),
        .I3(\sample_1_reg[2]_0 [25]),
        .I4(inside_handler_i_10_n_0),
        .O(\trace_pc_i_reg[9] ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    inside_handler_i_7
       (.I0(\sample_1_reg[2]_0 [13]),
        .I1(\sample_1_reg[2]_0 [14]),
        .I2(\sample_1_reg[2]_0 [11]),
        .I3(\sample_1_reg[2]_0 [12]),
        .O(inside_handler_i_7_n_0));
  LUT4 #(
    .INIT(16'hFFFE)) 
    inside_handler_i_8
       (.I0(\sample_1_reg[2]_0 [9]),
        .I1(\sample_1_reg[2]_0 [10]),
        .I2(\sample_1_reg[2]_0 [7]),
        .I3(\sample_1_reg[2]_0 [8]),
        .O(\trace_pc_i_reg[24] ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    inside_handler_i_9
       (.I0(\sample_1_reg[2]_0 [29]),
        .I1(\sample_1_reg[2]_0 [30]),
        .I2(\sample_1_reg[2]_0 [27]),
        .I3(\sample_1_reg[2]_0 [28]),
        .O(inside_handler_i_9_n_0));
  FDRE inside_handler_reg
       (.C(Clk),
        .CE(1'b1),
        .D(inside_handler_i_1_n_0),
        .Q(inside_handler),
        .R(sync_reset));
  FDRE interrupt_1_reg
       (.C(Clk),
        .CE(1'b1),
        .D(interrupt_1_reg_0),
        .Q(interrupt_1),
        .R(1'b0));
  FDRE new_arvalid_reg
       (.C(Clk),
        .CE(1'b1),
        .D(new_arvalid0),
        .Q(new_arvalid__0),
        .R(sync_reset));
  FDRE new_awvalid_reg
       (.C(Clk),
        .CE(1'b1),
        .D(new_awvalid0),
        .Q(new_awvalid__0),
        .R(sync_reset));
  FDRE new_bvalid_reg
       (.C(Clk),
        .CE(1'b1),
        .D(new_bvalid0),
        .Q(new_bvalid),
        .R(sync_reset));
  FDRE new_interrupt_reg
       (.C(Clk),
        .CE(1'b1),
        .D(new_interrupt_reg_0),
        .Q(new_interrupt_reg_n_0),
        .R(1'b0));
  FDRE new_rvalid_reg
       (.C(Clk),
        .CE(1'b1),
        .D(new_rvalid0),
        .Q(new_rvalid),
        .R(sync_reset));
  FDRE \sample_1_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\sample_1_reg[2]_0 [61]),
        .Q(\sample_1_reg[0]_0 [3]),
        .R(sync_reset));
  FDRE \sample_1_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\sample_1_reg[1]_0 [1]),
        .Q(\sample_1_reg[0]_0 [2]),
        .R(sync_reset));
  FDRE \sample_1_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(\sample_1_reg[2]_0 [62]),
        .Q(\sample_1_reg[0]_0 [1]),
        .R(sync_reset));
  FDRE \sample_1_reg[3] 
       (.C(Clk),
        .CE(1'b1),
        .D(\sample_1_reg[1]_0 [0]),
        .Q(\sample_1_reg[0]_0 [0]),
        .R(sync_reset));
  FDRE \sample_2_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\sample_1_reg[0]_0 [3]),
        .Q(\sample_2_reg[0]_0 [3]),
        .R(sync_reset));
  FDRE \sample_2_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\sample_1_reg[0]_0 [2]),
        .Q(\sample_2_reg[0]_0 [2]),
        .R(sync_reset));
  FDRE \sample_2_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(\sample_1_reg[0]_0 [1]),
        .Q(\sample_2_reg[0]_0 [1]),
        .R(sync_reset));
  FDRE \sample_2_reg[3] 
       (.C(Clk),
        .CE(1'b1),
        .D(\sample_1_reg[0]_0 [0]),
        .Q(\sample_2_reg[0]_0 [0]),
        .R(sync_reset));
  LUT5 #(
    .INIT(32'h00000100)) 
    \stat_select[0][5]_i_1 
       (.I0(control_select[1]),
        .I1(control_select[0]),
        .I2(reset_cmd),
        .I3(control_incr),
        .I4(control_select[2]),
        .O(\stat_select[0]_34 ));
  LUT5 #(
    .INIT(32'h00000400)) 
    \stat_select[1][5]_i_1 
       (.I0(control_select[1]),
        .I1(control_select[0]),
        .I2(reset_cmd),
        .I3(control_incr),
        .I4(control_select[2]),
        .O(\stat_select[1]_36 ));
  LUT5 #(
    .INIT(32'h00000400)) 
    \stat_select[2][5]_i_1 
       (.I0(control_select[0]),
        .I1(control_select[1]),
        .I2(reset_cmd),
        .I3(control_incr),
        .I4(control_select[2]),
        .O(\stat_select[2]_35 ));
  LUT5 #(
    .INIT(32'h00000800)) 
    \stat_select[3][5]_i_1 
       (.I0(control_select[1]),
        .I1(control_select[0]),
        .I2(reset_cmd),
        .I3(control_incr),
        .I4(control_select[2]),
        .O(\stat_select[3]_32 ));
  LUT5 #(
    .INIT(32'h00000400)) 
    \stat_select[4][5]_i_1 
       (.I0(control_select[0]),
        .I1(control_select[2]),
        .I2(reset_cmd),
        .I3(control_incr),
        .I4(control_select[1]),
        .O(\stat_select[4]_31 ));
  LUT5 #(
    .INIT(32'h00000800)) 
    \stat_select[5][5]_i_1 
       (.I0(control_select[0]),
        .I1(control_select[2]),
        .I2(reset_cmd),
        .I3(control_incr),
        .I4(control_select[1]),
        .O(\stat_select[5]_33 ));
  FDRE \stat_select_reg[0][0] 
       (.C(Clk),
        .CE(\stat_select[0]_34 ),
        .D(\Serial_Dbg_Intf.control_reg_reg_n_0_[7] ),
        .Q(\stat_select_reg[0][2]_0 [0]),
        .R(sync_reset));
  FDSE \stat_select_reg[0][1] 
       (.C(Clk),
        .CE(\stat_select[0]_34 ),
        .D(\Serial_Dbg_Intf.control_reg_reg_n_0_[6] ),
        .Q(\stat_select_reg[0][2]_0 [1]),
        .S(sync_reset));
  FDSE \stat_select_reg[0][2] 
       (.C(Clk),
        .CE(\stat_select[0]_34 ),
        .D(\Serial_Dbg_Intf.control_reg_reg_n_0_[5] ),
        .Q(\stat_select_reg[0][2]_0 [2]),
        .S(sync_reset));
  FDSE \stat_select_reg[0][3] 
       (.C(Clk),
        .CE(\stat_select[0]_34 ),
        .D(\Serial_Dbg_Intf.control_reg_reg_n_0_[4] ),
        .Q(\stat_select_reg_n_0_[0][3] ),
        .S(sync_reset));
  FDSE \stat_select_reg[0][4] 
       (.C(Clk),
        .CE(\stat_select[0]_34 ),
        .D(\Serial_Dbg_Intf.control_reg_reg_n_0_[3] ),
        .Q(\stat_select_reg_n_0_[0][4] ),
        .S(sync_reset));
  FDRE \stat_select_reg[0][5] 
       (.C(Clk),
        .CE(\stat_select[0]_34 ),
        .D(\Serial_Dbg_Intf.control_reg_reg_n_0_[2] ),
        .Q(\stat_select_reg_n_0_[0][5] ),
        .R(sync_reset));
  FDRE \stat_select_reg[1][0] 
       (.C(Clk),
        .CE(\stat_select[1]_36 ),
        .D(\Serial_Dbg_Intf.control_reg_reg_n_0_[7] ),
        .Q(\stat_select_reg[1][2]_0 [0]),
        .R(sync_reset));
  FDRE \stat_select_reg[1][1] 
       (.C(Clk),
        .CE(\stat_select[1]_36 ),
        .D(\Serial_Dbg_Intf.control_reg_reg_n_0_[6] ),
        .Q(\stat_select_reg[1][2]_0 [1]),
        .R(sync_reset));
  FDRE \stat_select_reg[1][2] 
       (.C(Clk),
        .CE(\stat_select[1]_36 ),
        .D(\Serial_Dbg_Intf.control_reg_reg_n_0_[5] ),
        .Q(\stat_select_reg[1][2]_0 [2]),
        .R(sync_reset));
  FDRE \stat_select_reg[1][3] 
       (.C(Clk),
        .CE(\stat_select[1]_36 ),
        .D(\Serial_Dbg_Intf.control_reg_reg_n_0_[4] ),
        .Q(sel[3]),
        .R(sync_reset));
  FDRE \stat_select_reg[1][4] 
       (.C(Clk),
        .CE(\stat_select[1]_36 ),
        .D(\Serial_Dbg_Intf.control_reg_reg_n_0_[3] ),
        .Q(sel[4]),
        .R(sync_reset));
  FDRE \stat_select_reg[1][5] 
       (.C(Clk),
        .CE(\stat_select[1]_36 ),
        .D(\Serial_Dbg_Intf.control_reg_reg_n_0_[2] ),
        .Q(sel[5]),
        .R(sync_reset));
  FDSE \stat_select_reg[2][0] 
       (.C(Clk),
        .CE(\stat_select[2]_35 ),
        .D(\Serial_Dbg_Intf.control_reg_reg_n_0_[7] ),
        .Q(\stat_select_reg[2][2]_0 [0]),
        .S(sync_reset));
  FDSE \stat_select_reg[2][1] 
       (.C(Clk),
        .CE(\stat_select[2]_35 ),
        .D(\Serial_Dbg_Intf.control_reg_reg_n_0_[6] ),
        .Q(\stat_select_reg[2][2]_0 [1]),
        .S(sync_reset));
  FDRE \stat_select_reg[2][2] 
       (.C(Clk),
        .CE(\stat_select[2]_35 ),
        .D(\Serial_Dbg_Intf.control_reg_reg_n_0_[5] ),
        .Q(\stat_select_reg[2][2]_0 [2]),
        .R(sync_reset));
  FDRE \stat_select_reg[2][3] 
       (.C(Clk),
        .CE(\stat_select[2]_35 ),
        .D(\Serial_Dbg_Intf.control_reg_reg_n_0_[4] ),
        .Q(\stat_select_reg_n_0_[2][3] ),
        .R(sync_reset));
  FDSE \stat_select_reg[2][4] 
       (.C(Clk),
        .CE(\stat_select[2]_35 ),
        .D(\Serial_Dbg_Intf.control_reg_reg_n_0_[3] ),
        .Q(\stat_select_reg_n_0_[2][4] ),
        .S(sync_reset));
  FDSE \stat_select_reg[2][5] 
       (.C(Clk),
        .CE(\stat_select[2]_35 ),
        .D(\Serial_Dbg_Intf.control_reg_reg_n_0_[2] ),
        .Q(\stat_select_reg_n_0_[2][5] ),
        .S(sync_reset));
  FDRE \stat_select_reg[3][0] 
       (.C(Clk),
        .CE(\stat_select[3]_32 ),
        .D(\Serial_Dbg_Intf.control_reg_reg_n_0_[7] ),
        .Q(\stat_select_reg[3][2]_0 [0]),
        .R(sync_reset));
  FDRE \stat_select_reg[3][1] 
       (.C(Clk),
        .CE(\stat_select[3]_32 ),
        .D(\Serial_Dbg_Intf.control_reg_reg_n_0_[6] ),
        .Q(\stat_select_reg[3][2]_0 [1]),
        .R(sync_reset));
  FDSE \stat_select_reg[3][2] 
       (.C(Clk),
        .CE(\stat_select[3]_32 ),
        .D(\Serial_Dbg_Intf.control_reg_reg_n_0_[5] ),
        .Q(\stat_select_reg[3][2]_0 [2]),
        .S(sync_reset));
  FDSE \stat_select_reg[3][3] 
       (.C(Clk),
        .CE(\stat_select[3]_32 ),
        .D(\Serial_Dbg_Intf.control_reg_reg_n_0_[4] ),
        .Q(\stat_select_reg_n_0_[3][3] ),
        .S(sync_reset));
  FDRE \stat_select_reg[3][4] 
       (.C(Clk),
        .CE(\stat_select[3]_32 ),
        .D(\Serial_Dbg_Intf.control_reg_reg_n_0_[3] ),
        .Q(\stat_select_reg_n_0_[3][4] ),
        .R(sync_reset));
  FDSE \stat_select_reg[3][5] 
       (.C(Clk),
        .CE(\stat_select[3]_32 ),
        .D(\Serial_Dbg_Intf.control_reg_reg_n_0_[2] ),
        .Q(\stat_select_reg_n_0_[3][5] ),
        .S(sync_reset));
  FDSE \stat_select_reg[4][0] 
       (.C(Clk),
        .CE(\stat_select[4]_31 ),
        .D(\Serial_Dbg_Intf.control_reg_reg_n_0_[7] ),
        .Q(\stat_select_reg[4][2]_0 [0]),
        .S(sync_reset));
  FDRE \stat_select_reg[4][1] 
       (.C(Clk),
        .CE(\stat_select[4]_31 ),
        .D(\Serial_Dbg_Intf.control_reg_reg_n_0_[6] ),
        .Q(\stat_select_reg[4][2]_0 [1]),
        .R(sync_reset));
  FDSE \stat_select_reg[4][2] 
       (.C(Clk),
        .CE(\stat_select[4]_31 ),
        .D(\Serial_Dbg_Intf.control_reg_reg_n_0_[5] ),
        .Q(\stat_select_reg[4][2]_0 [2]),
        .S(sync_reset));
  FDSE \stat_select_reg[4][3] 
       (.C(Clk),
        .CE(\stat_select[4]_31 ),
        .D(\Serial_Dbg_Intf.control_reg_reg_n_0_[4] ),
        .Q(\stat_select_reg_n_0_[4][3] ),
        .S(sync_reset));
  FDRE \stat_select_reg[4][4] 
       (.C(Clk),
        .CE(\stat_select[4]_31 ),
        .D(\Serial_Dbg_Intf.control_reg_reg_n_0_[3] ),
        .Q(\stat_select_reg_n_0_[4][4] ),
        .R(sync_reset));
  FDSE \stat_select_reg[4][5] 
       (.C(Clk),
        .CE(\stat_select[4]_31 ),
        .D(\Serial_Dbg_Intf.control_reg_reg_n_0_[2] ),
        .Q(\stat_select_reg_n_0_[4][5] ),
        .S(sync_reset));
  FDSE \stat_select_reg[5][0] 
       (.C(Clk),
        .CE(\stat_select[5]_33 ),
        .D(\Serial_Dbg_Intf.control_reg_reg_n_0_[7] ),
        .Q(\stat_select_reg[5][2]_0 [0]),
        .S(sync_reset));
  FDRE \stat_select_reg[5][1] 
       (.C(Clk),
        .CE(\stat_select[5]_33 ),
        .D(\Serial_Dbg_Intf.control_reg_reg_n_0_[6] ),
        .Q(\stat_select_reg[5][2]_0 [1]),
        .R(sync_reset));
  FDRE \stat_select_reg[5][2] 
       (.C(Clk),
        .CE(\stat_select[5]_33 ),
        .D(\Serial_Dbg_Intf.control_reg_reg_n_0_[5] ),
        .Q(\stat_select_reg[5][2]_0 [2]),
        .R(sync_reset));
  FDSE \stat_select_reg[5][3] 
       (.C(Clk),
        .CE(\stat_select[5]_33 ),
        .D(\Serial_Dbg_Intf.control_reg_reg_n_0_[4] ),
        .Q(\stat_select_reg_n_0_[5][3] ),
        .S(sync_reset));
  FDSE \stat_select_reg[5][4] 
       (.C(Clk),
        .CE(\stat_select[5]_33 ),
        .D(\Serial_Dbg_Intf.control_reg_reg_n_0_[3] ),
        .Q(\stat_select_reg_n_0_[5][4] ),
        .S(sync_reset));
  FDSE \stat_select_reg[5][5] 
       (.C(Clk),
        .CE(\stat_select[5]_33 ),
        .D(\Serial_Dbg_Intf.control_reg_reg_n_0_[2] ),
        .Q(\stat_select_reg_n_0_[5][5] ),
        .S(sync_reset));
  FDRE \status_sample_reg_reg[0][0] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(status[0]),
        .Q(\status_sample_reg_reg[0]_9 [1]),
        .R(sync_reset));
  FDRE \status_sample_reg_reg[0][1] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(status[1]),
        .Q(\status_sample_reg_reg[0]_9 [0]),
        .R(sync_reset));
  FDRE \status_sample_reg_reg[1][0] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[1].Debug_Stat_Counter_i_n_2 ),
        .Q(\status_sample_reg_reg[1]_10 [1]),
        .R(sync_reset));
  FDRE \status_sample_reg_reg[1][1] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[1].Debug_Stat_Counter_i_n_3 ),
        .Q(\status_sample_reg_reg[1]_10 [0]),
        .R(sync_reset));
  FDRE \status_sample_reg_reg[2][0] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[2].Debug_Stat_Counter_i_n_2 ),
        .Q(\status_sample_reg_reg[2]_11 [1]),
        .R(sync_reset));
  FDRE \status_sample_reg_reg[2][1] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[2].Debug_Stat_Counter_i_n_3 ),
        .Q(\status_sample_reg_reg[2]_11 [0]),
        .R(sync_reset));
  FDRE \status_sample_reg_reg[3][0] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[3].Debug_Stat_Counter_i_n_2 ),
        .Q(\status_sample_reg_reg[3]_12 [1]),
        .R(sync_reset));
  FDRE \status_sample_reg_reg[3][1] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[3].Debug_Stat_Counter_i_n_3 ),
        .Q(\status_sample_reg_reg[3]_12 [0]),
        .R(sync_reset));
  FDRE \status_sample_reg_reg[4][0] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[4].Debug_Stat_Counter_i_n_2 ),
        .Q(\status_sample_reg_reg[4]_13 [1]),
        .R(sync_reset));
  FDRE \status_sample_reg_reg[4][1] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[4].Debug_Stat_Counter_i_n_3 ),
        .Q(\status_sample_reg_reg[4]_13 [0]),
        .R(sync_reset));
  FDRE \status_sample_reg_reg[5][0] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[5].Debug_Stat_Counter_i_n_69 ),
        .Q(\status_sample_reg_reg[5]_14 [1]),
        .R(sync_reset));
  FDRE \status_sample_reg_reg[5][1] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\all_statistics_counters[5].Debug_Stat_Counter_i_n_70 ),
        .Q(\status_sample_reg_reg[5]_14 [0]),
        .R(sync_reset));
  FDRE trace_MB_Halted_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(trace_MB_Halted_i_reg_0),
        .Q(trace_MB_Halted_i),
        .R(1'b0));
  FDRE trace_OF_PipeRun_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\sample_1_reg[2]_0 [0]),
        .Q(trace_OF_PipeRun_i),
        .R(1'b0));
endmodule

module block_design_microblaze_0_0_Debug_Trace
   (D,
    out,
    \Embedded_Trace.Serial_Dbg_Intf.sample_synced_1_reg_0 ,
    full_i,
    stop_cmd,
    \Embedded_Trace.prev_wr_reg_0 ,
    cc_overflow_reg_0,
    started_i,
    \Embedded_Trace.Serial_Dbg_Intf.data_read_reg_cs_TCK_reg_0 ,
    \Serial_Dbg_Intf.stopped_i_reg_0 ,
    save_pc_next_next_reg_0,
    save_pc_next,
    last_item_reg_0,
    Dbg_Trig_Ack_Out,
    Dbg_Trig_In,
    p_0_in38_in,
    S,
    Dbg_Reg_En_5_sp_1,
    Dbg_Reg_En_7_sp_1,
    trace_halt_hold0,
    \Serial_Dbg_Intf.normal_stop_cmd_i_reg ,
    trig_in_0_pulse,
    \Embedded_Trace.Serial_Dbg_Intf.data_read_reg_reg[0]_0 ,
    \Serial_Dbg_Intf.control_reg_reg[16]_0 ,
    \Serial_Dbg_Intf.control_reg_reg[21]_0 ,
    \Serial_Dbg_Intf.stopped_i_reg_1 ,
    \Serial_Dbg_Intf.trig_in_1_pulse_reg ,
    S_0,
    \Serial_Dbg_Intf.control_reg_reg[0]_0 ,
    \Serial_Dbg_Intf.control_reg_reg[16]_1 ,
    \Serial_Dbg_Intf.control_reg_reg[21]_1 ,
    \trace_instruction_i_reg[2] ,
    \Serial_Dbg_Intf.sample_synced_1_reg[4]_0 ,
    trace_exception_taken_i_reg,
    \Serial_Dbg_Intf.control_reg_reg[19]_0 ,
    \Serial_Dbg_Intf.sample_synced_1_reg[0]_0 ,
    \trace_instruction_i_reg[2]_0 ,
    \trace_instruction_i_reg[16] ,
    sync_reset,
    Clk,
    data_read_reg_cs0,
    clear_cmd0,
    start_cmd0,
    stop_cmd0,
    sample_cmd0,
    Dbg_Clk,
    AR,
    \Serial_Dbg_Intf.started_i_reg_0 ,
    \Embedded_Trace.Serial_Dbg_Intf.data_read_reg_cs_TCK_reg_1 ,
    \Serial_Dbg_Intf.stopped_i_reg_2 ,
    save_pc_next_next_reg_1,
    save_pc_next_reg_0,
    last_item_reg_1,
    Q,
    Dbg_TDO_INST_0_i_11_0,
    Dbg_Reg_En,
    Dbg_TDO_INST_0_i_40_0,
    trace_halt_hold,
    \Area_Debug_Control.Use_Trace.trace_halt_hold_reg ,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    normal_stop_cmd_i,
    normal_stop_cmd_hold,
    \Using_FPGA.Native_1 ,
    mb_halted_1,
    trig_in_0_pulse_reg,
    Dbg_TDO_INST_0_i_3,
    \Embedded_Trace.trace_din_all_reg[80]_0 ,
    \event_data_next_reg[12]_0 ,
    trig_in_1_pulse,
    save_event_next_reg_0,
    save_event_next_reg_1,
    \branch_count_reg[3]_0 ,
    \event_data_reg[15]_0 ,
    Stopped_Pulse,
    Started_Pulse,
    \save_sel_reg[0][2]_0 ,
    \save_sel_reg[0][2]_1 ,
    \saved_load_get_reg[31]_0 ,
    \writems_reg[1]_0 ,
    cc_overflow_reg_1,
    \writems[0]_i_7_0 ,
    \event_data_reg[7]_0 ,
    \Serial_Dbg_Intf.control_reg_reg[0]_1 ,
    Dbg_Update,
    Dbg_Trig_Out,
    \Synchronize.use_sync_reset.sync_reg[1] ,
    Dbg_Trig_Ack_In,
    E,
    Dbg_Capture,
    \saved_pc_reg[31]_0 );
  output [4:0]D;
  output [0:0]out;
  output \Embedded_Trace.Serial_Dbg_Intf.sample_synced_1_reg_0 ;
  output full_i;
  output stop_cmd;
  output \Embedded_Trace.prev_wr_reg_0 ;
  output cc_overflow_reg_0;
  output started_i;
  output [0:0]\Embedded_Trace.Serial_Dbg_Intf.data_read_reg_cs_TCK_reg_0 ;
  output \Serial_Dbg_Intf.stopped_i_reg_0 ;
  output save_pc_next_next_reg_0;
  output save_pc_next;
  output last_item_reg_0;
  output [1:0]Dbg_Trig_Ack_Out;
  output [1:0]Dbg_Trig_In;
  output p_0_in38_in;
  output [0:0]S;
  output Dbg_Reg_En_5_sp_1;
  output Dbg_Reg_En_7_sp_1;
  output trace_halt_hold0;
  output \Serial_Dbg_Intf.normal_stop_cmd_i_reg ;
  output trig_in_0_pulse;
  output \Embedded_Trace.Serial_Dbg_Intf.data_read_reg_reg[0]_0 ;
  output [2:0]\Serial_Dbg_Intf.control_reg_reg[16]_0 ;
  output \Serial_Dbg_Intf.control_reg_reg[21]_0 ;
  output \Serial_Dbg_Intf.stopped_i_reg_1 ;
  output \Serial_Dbg_Intf.trig_in_1_pulse_reg ;
  output S_0;
  output \Serial_Dbg_Intf.control_reg_reg[0]_0 ;
  output \Serial_Dbg_Intf.control_reg_reg[16]_1 ;
  output \Serial_Dbg_Intf.control_reg_reg[21]_1 ;
  output \trace_instruction_i_reg[2] ;
  output \Serial_Dbg_Intf.sample_synced_1_reg[4]_0 ;
  output trace_exception_taken_i_reg;
  output \Serial_Dbg_Intf.control_reg_reg[19]_0 ;
  output [4:0]\Serial_Dbg_Intf.sample_synced_1_reg[0]_0 ;
  output \trace_instruction_i_reg[2]_0 ;
  output \trace_instruction_i_reg[16] ;
  input sync_reset;
  input Clk;
  input data_read_reg_cs0;
  input clear_cmd0;
  input start_cmd0;
  input stop_cmd0;
  input sample_cmd0;
  input Dbg_Clk;
  input [0:0]AR;
  input \Serial_Dbg_Intf.started_i_reg_0 ;
  input \Embedded_Trace.Serial_Dbg_Intf.data_read_reg_cs_TCK_reg_1 ;
  input \Serial_Dbg_Intf.stopped_i_reg_2 ;
  input save_pc_next_next_reg_1;
  input save_pc_next_reg_0;
  input last_item_reg_1;
  input [3:0]Q;
  input Dbg_TDO_INST_0_i_11_0;
  input [0:7]Dbg_Reg_En;
  input Dbg_TDO_INST_0_i_40_0;
  input trace_halt_hold;
  input \Area_Debug_Control.Use_Trace.trace_halt_hold_reg ;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input normal_stop_cmd_i;
  input normal_stop_cmd_hold;
  input \Using_FPGA.Native_1 ;
  input mb_halted_1;
  input trig_in_0_pulse_reg;
  input Dbg_TDO_INST_0_i_3;
  input [179:0]\Embedded_Trace.trace_din_all_reg[80]_0 ;
  input \event_data_next_reg[12]_0 ;
  input trig_in_1_pulse;
  input save_event_next_reg_0;
  input save_event_next_reg_1;
  input \branch_count_reg[3]_0 ;
  input \event_data_reg[15]_0 ;
  input Stopped_Pulse;
  input Started_Pulse;
  input \save_sel_reg[0][2]_0 ;
  input \save_sel_reg[0][2]_1 ;
  input \saved_load_get_reg[31]_0 ;
  input \writems_reg[1]_0 ;
  input cc_overflow_reg_1;
  input \writems[0]_i_7_0 ;
  input \event_data_reg[7]_0 ;
  input [6:0]\Serial_Dbg_Intf.control_reg_reg[0]_1 ;
  input Dbg_Update;
  input [1:0]Dbg_Trig_Out;
  input [0:0]\Synchronize.use_sync_reset.sync_reg[1] ;
  input [1:0]Dbg_Trig_Ack_In;
  input [0:0]E;
  input Dbg_Capture;
  input [0:0]\saved_pc_reg[31]_0 ;

  wire [1:9]ADDRB;
  wire [0:0]AR;
  wire \Area_Debug_Control.Use_Trace.trace_halt_hold_reg ;
  wire Clk;
  wire Command_Reg_En;
  wire Control_Reg_En;
  wire [4:0]D;
  wire [0:71]DATA_INA;
  wire Dbg_Capture;
  wire Dbg_Clk;
  wire [0:7]Dbg_Reg_En;
  wire Dbg_Reg_En_5_sn_1;
  wire Dbg_Reg_En_7_sn_1;
  wire Dbg_TDO_INST_0_i_11_0;
  wire Dbg_TDO_INST_0_i_21_n_0;
  wire Dbg_TDO_INST_0_i_22_n_0;
  wire Dbg_TDO_INST_0_i_23_n_0;
  wire Dbg_TDO_INST_0_i_3;
  wire Dbg_TDO_INST_0_i_40_0;
  wire Dbg_TDO_INST_0_i_40_n_0;
  wire Dbg_TDO_INST_0_i_41_n_0;
  wire Dbg_TDO_INST_0_i_42_n_0;
  wire Dbg_TDO_INST_0_i_43_n_0;
  wire Dbg_TDO_INST_0_i_58_n_0;
  wire Dbg_TDO_INST_0_i_59_n_0;
  wire Dbg_TDO_INST_0_i_68_n_0;
  wire Dbg_TDO_INST_0_i_69_n_0;
  wire Dbg_TDO_INST_0_i_70_n_0;
  wire Dbg_TDO_INST_0_i_71_n_0;
  wire [1:0]Dbg_Trig_Ack_In;
  wire [1:0]Dbg_Trig_Ack_Out;
  wire [1:0]Dbg_Trig_In;
  wire [1:0]Dbg_Trig_Out;
  wire Dbg_Update;
  wire [0:0]E;
  wire [0:0]\Embedded_Trace.Serial_Dbg_Intf.data_read_reg_cs_TCK_reg_0 ;
  wire \Embedded_Trace.Serial_Dbg_Intf.data_read_reg_cs_TCK_reg_1 ;
  wire \Embedded_Trace.Serial_Dbg_Intf.data_read_reg_reg[0]_0 ;
  wire \Embedded_Trace.Serial_Dbg_Intf.sample_synced_1_reg_0 ;
  wire \Embedded_Trace.full_i_i_2_n_0 ;
  wire \Embedded_Trace.prev_wr_reg_0 ;
  wire \Embedded_Trace.rdaddr[0]_i_2_n_0 ;
  wire [11:0]\Embedded_Trace.rdaddr_reg ;
  wire \Embedded_Trace.rdaddr_reg[0]_i_1_n_0 ;
  wire \Embedded_Trace.rdaddr_reg[0]_i_1_n_1 ;
  wire \Embedded_Trace.rdaddr_reg[0]_i_1_n_2 ;
  wire \Embedded_Trace.rdaddr_reg[0]_i_1_n_3 ;
  wire \Embedded_Trace.rdaddr_reg[0]_i_1_n_4 ;
  wire \Embedded_Trace.rdaddr_reg[0]_i_1_n_5 ;
  wire \Embedded_Trace.rdaddr_reg[0]_i_1_n_6 ;
  wire \Embedded_Trace.rdaddr_reg[0]_i_1_n_7 ;
  wire \Embedded_Trace.rdaddr_reg[4]_i_1_n_0 ;
  wire \Embedded_Trace.rdaddr_reg[4]_i_1_n_1 ;
  wire \Embedded_Trace.rdaddr_reg[4]_i_1_n_2 ;
  wire \Embedded_Trace.rdaddr_reg[4]_i_1_n_3 ;
  wire \Embedded_Trace.rdaddr_reg[4]_i_1_n_4 ;
  wire \Embedded_Trace.rdaddr_reg[4]_i_1_n_5 ;
  wire \Embedded_Trace.rdaddr_reg[4]_i_1_n_6 ;
  wire \Embedded_Trace.rdaddr_reg[4]_i_1_n_7 ;
  wire \Embedded_Trace.rdaddr_reg[8]_i_1_n_1 ;
  wire \Embedded_Trace.rdaddr_reg[8]_i_1_n_2 ;
  wire \Embedded_Trace.rdaddr_reg[8]_i_1_n_3 ;
  wire \Embedded_Trace.rdaddr_reg[8]_i_1_n_4 ;
  wire \Embedded_Trace.rdaddr_reg[8]_i_1_n_5 ;
  wire \Embedded_Trace.rdaddr_reg[8]_i_1_n_6 ;
  wire \Embedded_Trace.rdaddr_reg[8]_i_1_n_7 ;
  wire \Embedded_Trace.rddata_reg_n_0_[0] ;
  wire \Embedded_Trace.rddata_reg_n_0_[10] ;
  wire \Embedded_Trace.rddata_reg_n_0_[11] ;
  wire \Embedded_Trace.rddata_reg_n_0_[12] ;
  wire \Embedded_Trace.rddata_reg_n_0_[13] ;
  wire \Embedded_Trace.rddata_reg_n_0_[14] ;
  wire \Embedded_Trace.rddata_reg_n_0_[15] ;
  wire \Embedded_Trace.rddata_reg_n_0_[16] ;
  wire \Embedded_Trace.rddata_reg_n_0_[17] ;
  wire \Embedded_Trace.rddata_reg_n_0_[1] ;
  wire \Embedded_Trace.rddata_reg_n_0_[2] ;
  wire \Embedded_Trace.rddata_reg_n_0_[3] ;
  wire \Embedded_Trace.rddata_reg_n_0_[4] ;
  wire \Embedded_Trace.rddata_reg_n_0_[5] ;
  wire \Embedded_Trace.rddata_reg_n_0_[6] ;
  wire \Embedded_Trace.rddata_reg_n_0_[7] ;
  wire \Embedded_Trace.rddata_reg_n_0_[8] ;
  wire \Embedded_Trace.rddata_reg_n_0_[9] ;
  wire \Embedded_Trace.trace_addr[0]_i_1_n_0 ;
  wire \Embedded_Trace.trace_addr[1]_i_1_n_0 ;
  wire \Embedded_Trace.trace_addr[2]_i_1_n_0 ;
  wire \Embedded_Trace.trace_addr[3]_i_1_n_0 ;
  wire \Embedded_Trace.trace_addr[4]_i_1_n_0 ;
  wire \Embedded_Trace.trace_addr[5]_i_1_n_0 ;
  wire \Embedded_Trace.trace_addr[6]_i_1_n_0 ;
  wire \Embedded_Trace.trace_addr[7]_i_1_n_0 ;
  wire \Embedded_Trace.trace_addr[8]_i_1_n_0 ;
  wire \Embedded_Trace.trace_count[0]_i_1_n_0 ;
  wire \Embedded_Trace.trace_count[0]_i_3_n_0 ;
  wire \Embedded_Trace.trace_count[0]_i_4_n_0 ;
  wire \Embedded_Trace.trace_count[0]_i_5_n_0 ;
  wire \Embedded_Trace.trace_count[0]_i_6_n_0 ;
  wire \Embedded_Trace.trace_count[4]_i_2_n_0 ;
  wire \Embedded_Trace.trace_count[4]_i_3_n_0 ;
  wire \Embedded_Trace.trace_count[4]_i_4_n_0 ;
  wire \Embedded_Trace.trace_count[4]_i_5_n_0 ;
  wire \Embedded_Trace.trace_count[8]_i_2_n_0 ;
  wire \Embedded_Trace.trace_count[8]_i_3_n_0 ;
  wire \Embedded_Trace.trace_count[8]_i_4_n_0 ;
  wire \Embedded_Trace.trace_count[8]_i_5_n_0 ;
  wire [5:3]\Embedded_Trace.trace_count_reg ;
  wire \Embedded_Trace.trace_count_reg[0]_i_2_n_0 ;
  wire \Embedded_Trace.trace_count_reg[0]_i_2_n_1 ;
  wire \Embedded_Trace.trace_count_reg[0]_i_2_n_2 ;
  wire \Embedded_Trace.trace_count_reg[0]_i_2_n_3 ;
  wire \Embedded_Trace.trace_count_reg[0]_i_2_n_4 ;
  wire \Embedded_Trace.trace_count_reg[0]_i_2_n_5 ;
  wire \Embedded_Trace.trace_count_reg[0]_i_2_n_6 ;
  wire \Embedded_Trace.trace_count_reg[0]_i_2_n_7 ;
  wire \Embedded_Trace.trace_count_reg[4]_i_1_n_0 ;
  wire \Embedded_Trace.trace_count_reg[4]_i_1_n_1 ;
  wire \Embedded_Trace.trace_count_reg[4]_i_1_n_2 ;
  wire \Embedded_Trace.trace_count_reg[4]_i_1_n_3 ;
  wire \Embedded_Trace.trace_count_reg[4]_i_1_n_4 ;
  wire \Embedded_Trace.trace_count_reg[4]_i_1_n_5 ;
  wire \Embedded_Trace.trace_count_reg[4]_i_1_n_6 ;
  wire \Embedded_Trace.trace_count_reg[4]_i_1_n_7 ;
  wire \Embedded_Trace.trace_count_reg[8]_i_1_n_1 ;
  wire \Embedded_Trace.trace_count_reg[8]_i_1_n_2 ;
  wire \Embedded_Trace.trace_count_reg[8]_i_1_n_3 ;
  wire \Embedded_Trace.trace_count_reg[8]_i_1_n_4 ;
  wire \Embedded_Trace.trace_count_reg[8]_i_1_n_5 ;
  wire \Embedded_Trace.trace_count_reg[8]_i_1_n_6 ;
  wire \Embedded_Trace.trace_count_reg[8]_i_1_n_7 ;
  wire [11:0]\Embedded_Trace.trace_count_reg__0 ;
  wire \Embedded_Trace.trace_din_all[0]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[100]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[100]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[100]_i_4_n_0 ;
  wire \Embedded_Trace.trace_din_all[101]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[101]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[101]_i_4_n_0 ;
  wire \Embedded_Trace.trace_din_all[102]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[102]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[102]_i_4_n_0 ;
  wire \Embedded_Trace.trace_din_all[103]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[103]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[103]_i_4_n_0 ;
  wire \Embedded_Trace.trace_din_all[104]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[104]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[104]_i_4_n_0 ;
  wire \Embedded_Trace.trace_din_all[105]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[105]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[105]_i_4_n_0 ;
  wire \Embedded_Trace.trace_din_all[106]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[106]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[106]_i_4_n_0 ;
  wire \Embedded_Trace.trace_din_all[107]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[107]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[107]_i_4_n_0 ;
  wire \Embedded_Trace.trace_din_all[108]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[108]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[109]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[109]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[10]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[10]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[110]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[110]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[110]_i_4_n_0 ;
  wire \Embedded_Trace.trace_din_all[111]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[111]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[111]_i_4_n_0 ;
  wire \Embedded_Trace.trace_din_all[112]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[112]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[113]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[113]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[114]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[114]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[115]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[115]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[116]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[116]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[117]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[117]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[118]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[118]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[119]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[119]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[11]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[11]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[120]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[120]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[121]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[121]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[122]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[122]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[123]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[123]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[124]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[124]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[125]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[125]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[126]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[127]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[128]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[128]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[129]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[129]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[12]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[12]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[130]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[130]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[131]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[131]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[132]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[132]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[133]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[133]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[134]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[134]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[135]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[135]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[136]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[136]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[137]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[137]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[138]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[138]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[139]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[139]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[13]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[13]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[140]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[140]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[141]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[141]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[142]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[142]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[143]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[143]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[144]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[144]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[145]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[146]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[146]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[146]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[147]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[147]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[147]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[148]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[148]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[148]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[149]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[149]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[149]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[14]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[14]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[150]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[150]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[150]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[151]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[151]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[151]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[152]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[152]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[152]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[153]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[153]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[153]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[154]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[154]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[154]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[155]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[155]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[155]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[156]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[156]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[156]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[157]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[157]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[157]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[158]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[158]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[158]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[159]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[159]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[159]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[15]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[15]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[160]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[160]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[160]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[161]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[161]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[161]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[162]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[162]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[163]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[164]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[164]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[165]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[165]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[166]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[166]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[167]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[167]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[168]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[168]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[169]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[169]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[16]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[16]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[170]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[170]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[171]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[171]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[172]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[172]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[173]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[173]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[174]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[174]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[175]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[175]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[176]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[176]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[177]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[177]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[178]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[178]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[179]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[179]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[17]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[17]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[180]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[180]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[181]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[182]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[183]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[184]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[185]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[186]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[187]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[188]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[189]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[18]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[190]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[191]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[192]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[193]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[194]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[195]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[196]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[19]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[1]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[20]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[20]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[21]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[21]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[22]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[22]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[23]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[23]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[24]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[24]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[25]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[25]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[26]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[26]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[27]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[27]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[28]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[28]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[29]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[29]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[2]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[2]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[30]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[30]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[31]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[31]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[32]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[32]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[33]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[33]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[34]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[34]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[35]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[35]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[36]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[37]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[38]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[38]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[39]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[39]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[3]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[3]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[40]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[40]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[41]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[41]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[42]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[42]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[43]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[43]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[44]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[44]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[45]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[45]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[46]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[46]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[47]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[47]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[48]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[48]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[48]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[48]_i_4_n_0 ;
  wire \Embedded_Trace.trace_din_all[49]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[49]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[49]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[49]_i_4_n_0 ;
  wire \Embedded_Trace.trace_din_all[4]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[4]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[50]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[50]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[50]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[50]_i_4_n_0 ;
  wire \Embedded_Trace.trace_din_all[51]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[51]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[51]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[51]_i_4_n_0 ;
  wire \Embedded_Trace.trace_din_all[52]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[52]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[52]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[52]_i_4_n_0 ;
  wire \Embedded_Trace.trace_din_all[53]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[53]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[53]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[53]_i_4_n_0 ;
  wire \Embedded_Trace.trace_din_all[54]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[54]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[55]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[55]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[56]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[56]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[56]_i_4_n_0 ;
  wire \Embedded_Trace.trace_din_all[57]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[57]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[57]_i_4_n_0 ;
  wire \Embedded_Trace.trace_din_all[58]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[58]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[58]_i_4_n_0 ;
  wire \Embedded_Trace.trace_din_all[59]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[59]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[59]_i_4_n_0 ;
  wire \Embedded_Trace.trace_din_all[5]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[5]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[60]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[60]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[60]_i_4_n_0 ;
  wire \Embedded_Trace.trace_din_all[61]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[61]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[61]_i_4_n_0 ;
  wire \Embedded_Trace.trace_din_all[62]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[62]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[62]_i_4_n_0 ;
  wire \Embedded_Trace.trace_din_all[63]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[63]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[63]_i_4_n_0 ;
  wire \Embedded_Trace.trace_din_all[64]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[64]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[64]_i_4_n_0 ;
  wire \Embedded_Trace.trace_din_all[65]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[65]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[65]_i_4_n_0 ;
  wire \Embedded_Trace.trace_din_all[66]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[66]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[66]_i_4_n_0 ;
  wire \Embedded_Trace.trace_din_all[67]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[67]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[67]_i_4_n_0 ;
  wire \Embedded_Trace.trace_din_all[68]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[68]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[68]_i_4_n_0 ;
  wire \Embedded_Trace.trace_din_all[69]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[69]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[69]_i_4_n_0 ;
  wire \Embedded_Trace.trace_din_all[6]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[6]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[70]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[70]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[70]_i_4_n_0 ;
  wire \Embedded_Trace.trace_din_all[71]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[71]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[71]_i_4_n_0 ;
  wire \Embedded_Trace.trace_din_all[72]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[72]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[73]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[73]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[74]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[74]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[74]_i_4_n_0 ;
  wire \Embedded_Trace.trace_din_all[75]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[75]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[75]_i_4_n_0 ;
  wire \Embedded_Trace.trace_din_all[76]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[76]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[76]_i_4_n_0 ;
  wire \Embedded_Trace.trace_din_all[77]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[77]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[77]_i_4_n_0 ;
  wire \Embedded_Trace.trace_din_all[78]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[78]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[78]_i_4_n_0 ;
  wire \Embedded_Trace.trace_din_all[79]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[79]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[79]_i_4_n_0 ;
  wire \Embedded_Trace.trace_din_all[7]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[7]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[80]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[80]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[80]_i_4_n_0 ;
  wire \Embedded_Trace.trace_din_all[81]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[81]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[81]_i_4_n_0 ;
  wire \Embedded_Trace.trace_din_all[82]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[82]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[82]_i_4_n_0 ;
  wire \Embedded_Trace.trace_din_all[83]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[83]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[83]_i_4_n_0 ;
  wire \Embedded_Trace.trace_din_all[84]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[84]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[84]_i_4_n_0 ;
  wire \Embedded_Trace.trace_din_all[85]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[85]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[85]_i_4_n_0 ;
  wire \Embedded_Trace.trace_din_all[86]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[86]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[86]_i_4_n_0 ;
  wire \Embedded_Trace.trace_din_all[87]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[87]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[87]_i_4_n_0 ;
  wire \Embedded_Trace.trace_din_all[88]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[88]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[88]_i_4_n_0 ;
  wire \Embedded_Trace.trace_din_all[89]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[89]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[89]_i_4_n_0 ;
  wire \Embedded_Trace.trace_din_all[8]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[8]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[90]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[90]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[91]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all[91]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[92]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[92]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[92]_i_4_n_0 ;
  wire \Embedded_Trace.trace_din_all[93]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[93]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[93]_i_4_n_0 ;
  wire \Embedded_Trace.trace_din_all[94]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[94]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[94]_i_4_n_0 ;
  wire \Embedded_Trace.trace_din_all[95]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[95]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[95]_i_4_n_0 ;
  wire \Embedded_Trace.trace_din_all[96]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[96]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[96]_i_4_n_0 ;
  wire \Embedded_Trace.trace_din_all[97]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[97]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[97]_i_4_n_0 ;
  wire \Embedded_Trace.trace_din_all[98]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[98]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[98]_i_4_n_0 ;
  wire \Embedded_Trace.trace_din_all[99]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[99]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all[99]_i_4_n_0 ;
  wire \Embedded_Trace.trace_din_all[9]_i_2_n_0 ;
  wire \Embedded_Trace.trace_din_all[9]_i_3_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[100]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[101]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[102]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[103]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[104]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[105]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[106]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[107]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[10]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[110]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[111]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[112]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[113]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[114]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[115]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[116]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[117]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[118]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[119]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[11]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[120]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[121]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[122]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[123]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[124]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[125]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[128]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[129]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[12]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[130]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[131]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[132]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[133]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[134]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[135]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[136]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[137]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[138]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[139]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[13]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[140]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[141]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[142]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[143]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[14]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[15]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[16]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[17]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[20]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[21]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[22]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[23]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[24]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[25]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[26]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[27]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[28]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[29]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[2]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[30]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[31]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[32]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[33]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[34]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[35]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[38]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[39]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[3]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[40]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[41]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[42]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[43]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[44]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[45]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[46]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[47]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[4]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[56]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[57]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[58]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[59]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[5]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[60]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[61]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[62]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[63]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[64]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[65]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[66]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[67]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[68]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[69]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[6]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[70]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[71]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[74]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[75]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[76]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[77]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[78]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[79]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[7]_i_1_n_0 ;
  wire [179:0]\Embedded_Trace.trace_din_all_reg[80]_0 ;
  wire \Embedded_Trace.trace_din_all_reg[80]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[81]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[82]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[83]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[84]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[85]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[86]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[87]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[88]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[89]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[8]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[92]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[93]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[94]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[95]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[96]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[97]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[98]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[99]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg[9]_i_1_n_0 ;
  wire \Embedded_Trace.trace_din_all_reg_n_0_[143] ;
  wire \Embedded_Trace.trace_din_all_reg_n_0_[144] ;
  wire \Embedded_Trace.trace_din_all_reg_n_0_[145] ;
  wire \Embedded_Trace.trace_din_all_reg_n_0_[146] ;
  wire \Embedded_Trace.trace_din_all_reg_n_0_[147] ;
  wire \Embedded_Trace.trace_din_all_reg_n_0_[148] ;
  wire \Embedded_Trace.trace_din_all_reg_n_0_[149] ;
  wire \Embedded_Trace.trace_din_all_reg_n_0_[150] ;
  wire \Embedded_Trace.trace_din_all_reg_n_0_[151] ;
  wire \Embedded_Trace.trace_din_all_reg_n_0_[152] ;
  wire \Embedded_Trace.trace_din_all_reg_n_0_[153] ;
  wire \Embedded_Trace.trace_din_all_reg_n_0_[154] ;
  wire \Embedded_Trace.trace_din_all_reg_n_0_[155] ;
  wire \Embedded_Trace.trace_din_all_reg_n_0_[156] ;
  wire \Embedded_Trace.trace_din_all_reg_n_0_[157] ;
  wire \Embedded_Trace.trace_din_all_reg_n_0_[158] ;
  wire \Embedded_Trace.trace_din_all_reg_n_0_[159] ;
  wire \Embedded_Trace.trace_din_all_reg_n_0_[160] ;
  wire \Embedded_Trace.trace_din_all_reg_n_0_[161] ;
  wire \Embedded_Trace.trace_din_all_reg_n_0_[162] ;
  wire \Embedded_Trace.trace_din_all_reg_n_0_[163] ;
  wire \Embedded_Trace.trace_din_all_reg_n_0_[164] ;
  wire \Embedded_Trace.trace_din_all_reg_n_0_[165] ;
  wire \Embedded_Trace.trace_din_all_reg_n_0_[166] ;
  wire \Embedded_Trace.trace_din_all_reg_n_0_[167] ;
  wire \Embedded_Trace.trace_din_all_reg_n_0_[168] ;
  wire \Embedded_Trace.trace_din_all_reg_n_0_[169] ;
  wire \Embedded_Trace.trace_din_all_reg_n_0_[170] ;
  wire \Embedded_Trace.trace_din_all_reg_n_0_[171] ;
  wire \Embedded_Trace.trace_din_all_reg_n_0_[172] ;
  wire \Embedded_Trace.trace_din_all_reg_n_0_[173] ;
  wire \Embedded_Trace.trace_din_all_reg_n_0_[174] ;
  wire \Embedded_Trace.trace_din_all_reg_n_0_[175] ;
  wire \Embedded_Trace.trace_din_all_reg_n_0_[176] ;
  wire \Embedded_Trace.trace_din_all_reg_n_0_[177] ;
  wire \Embedded_Trace.trace_din_all_reg_n_0_[178] ;
  wire \Embedded_Trace.trace_din_all_reg_n_0_[179] ;
  wire \Embedded_Trace.trace_din_all_reg_n_0_[180] ;
  wire \Embedded_Trace.trace_din_all_reg_n_0_[181] ;
  wire \Embedded_Trace.trace_din_all_reg_n_0_[182] ;
  wire \Embedded_Trace.trace_din_all_reg_n_0_[183] ;
  wire \Embedded_Trace.trace_din_all_reg_n_0_[184] ;
  wire \Embedded_Trace.trace_din_all_reg_n_0_[185] ;
  wire \Embedded_Trace.trace_din_all_reg_n_0_[186] ;
  wire \Embedded_Trace.trace_din_all_reg_n_0_[187] ;
  wire \Embedded_Trace.trace_din_all_reg_n_0_[188] ;
  wire \Embedded_Trace.trace_din_all_reg_n_0_[189] ;
  wire \Embedded_Trace.trace_din_all_reg_n_0_[190] ;
  wire \Embedded_Trace.trace_din_all_reg_n_0_[191] ;
  wire \Embedded_Trace.trace_din_all_reg_n_0_[192] ;
  wire \Embedded_Trace.trace_din_all_reg_n_0_[193] ;
  wire \Embedded_Trace.trace_din_all_reg_n_0_[194] ;
  wire \Embedded_Trace.trace_din_all_reg_n_0_[195] ;
  wire \Embedded_Trace.trace_din_all_reg_n_0_[197] ;
  wire \Embedded_Trace.trace_wen_keep[0]_i_2_n_0 ;
  wire \Embedded_Trace.trace_wen_keep[0]_i_3_n_0 ;
  wire \Embedded_Trace.trace_wen_keep[2]_i_1_n_0 ;
  wire \Embedded_Trace.trace_wen_keep[4]_i_1_n_0 ;
  wire \Embedded_Trace.trace_wen_keep_reg_n_0_[2] ;
  wire \Embedded_Trace.trace_wen_keep_reg_n_0_[4] ;
  wire \Embedded_Trace.trace_wen_reg_n_0_[10] ;
  wire \Embedded_Trace.trace_wen_reg_n_0_[12] ;
  wire \Embedded_Trace.trace_wen_reg_n_0_[14] ;
  wire \Embedded_Trace.trace_wen_reg_n_0_[8] ;
  wire \Embedded_Trace.wraddr[0]_i_1_n_0 ;
  wire \Embedded_Trace.wraddr[11]_i_4_n_0 ;
  wire \Embedded_Trace.wraddr[1]_i_1_n_0 ;
  wire \Embedded_Trace.wraddr[2]_i_1_n_0 ;
  wire \Embedded_Trace.wraddr[3]_i_2_n_0 ;
  wire \Embedded_Trace.wraddr[3]_i_3_n_0 ;
  wire \Embedded_Trace.wraddr[3]_i_4_n_0 ;
  wire \Embedded_Trace.wraddr[3]_i_5_n_0 ;
  wire \Embedded_Trace.wraddr_reg[11]_i_3_n_1 ;
  wire \Embedded_Trace.wraddr_reg[11]_i_3_n_2 ;
  wire \Embedded_Trace.wraddr_reg[11]_i_3_n_3 ;
  wire \Embedded_Trace.wraddr_reg[3]_i_1_n_0 ;
  wire \Embedded_Trace.wraddr_reg[3]_i_1_n_1 ;
  wire \Embedded_Trace.wraddr_reg[3]_i_1_n_2 ;
  wire \Embedded_Trace.wraddr_reg[3]_i_1_n_3 ;
  wire \Embedded_Trace.wraddr_reg[7]_i_1_n_0 ;
  wire \Embedded_Trace.wraddr_reg[7]_i_1_n_1 ;
  wire \Embedded_Trace.wraddr_reg[7]_i_1_n_2 ;
  wire \Embedded_Trace.wraddr_reg[7]_i_1_n_3 ;
  wire [3:0]Q;
  wire [0:0]S;
  wire S_0;
  wire \Serial_Dbg_Intf.Started_Pulse_reg_n_0 ;
  wire \Serial_Dbg_Intf.Stopped_Pulse_reg_n_0 ;
  wire \Serial_Dbg_Intf.command_reg[0]_i_2__0_n_0 ;
  wire \Serial_Dbg_Intf.control_reg_reg[0]_0 ;
  wire [6:0]\Serial_Dbg_Intf.control_reg_reg[0]_1 ;
  wire [2:0]\Serial_Dbg_Intf.control_reg_reg[16]_0 ;
  wire \Serial_Dbg_Intf.control_reg_reg[16]_1 ;
  wire \Serial_Dbg_Intf.control_reg_reg[19]_0 ;
  wire \Serial_Dbg_Intf.control_reg_reg[21]_0 ;
  wire \Serial_Dbg_Intf.control_reg_reg[21]_1 ;
  wire \Serial_Dbg_Intf.normal_stop_cmd_i_reg ;
  wire [4:0]\Serial_Dbg_Intf.sample_synced_1_reg[0]_0 ;
  wire \Serial_Dbg_Intf.sample_synced_1_reg[4]_0 ;
  wire \Serial_Dbg_Intf.sample_synced_1_reg_n_0_[6] ;
  wire \Serial_Dbg_Intf.sample_synced_1_reg_n_0_[7] ;
  wire \Serial_Dbg_Intf.sample_synced_1_reg_n_0_[8] ;
  wire \Serial_Dbg_Intf.started_i_reg_0 ;
  wire \Serial_Dbg_Intf.stopped_i_reg_0 ;
  wire \Serial_Dbg_Intf.stopped_i_reg_1 ;
  wire \Serial_Dbg_Intf.stopped_i_reg_2 ;
  wire \Serial_Dbg_Intf.sync_cc_overflow_n_0 ;
  wire \Serial_Dbg_Intf.sync_sample_n_12 ;
  wire \Serial_Dbg_Intf.sync_sample_n_14 ;
  wire \Serial_Dbg_Intf.sync_sample_n_15 ;
  wire \Serial_Dbg_Intf.sync_sample_n_9 ;
  wire \Serial_Dbg_Intf.trig_in_1_pulse_reg ;
  wire Started_Pulse;
  wire Stopped_Pulse;
  wire [0:0]\Synchronize.use_sync_reset.sync_reg[1] ;
  wire Trace_Sel;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_i_7__2_n_0 ;
  wire [0:6]WEA;
  wire [0:3]branch_count;
  wire \branch_count[0]_i_1_n_0 ;
  wire \branch_count[0]_i_2_n_0 ;
  wire \branch_count[0]_i_3_n_0 ;
  wire \branch_count[0]_i_4_n_0 ;
  wire \branch_count[0]_i_5_n_0 ;
  wire \branch_count[0]_i_7_n_0 ;
  wire \branch_count[1]_i_1_n_0 ;
  wire \branch_count[2]_i_1_n_0 ;
  wire \branch_count[3]_i_1_n_0 ;
  wire \branch_count[3]_i_2_n_0 ;
  wire \branch_count[3]_i_3_n_0 ;
  wire \branch_count[3]_i_4_n_0 ;
  wire \branch_count_reg[3]_0 ;
  wire \branch_data[0]_i_1_n_0 ;
  wire \branch_data[0]_i_2_n_0 ;
  wire \branch_data[0]_i_3_n_0 ;
  wire \branch_data[0]_i_4_n_0 ;
  wire \branch_data[10]_i_1_n_0 ;
  wire \branch_data[10]_i_2_n_0 ;
  wire \branch_data[10]_i_3_n_0 ;
  wire \branch_data[11]_i_1_n_0 ;
  wire \branch_data[11]_i_2_n_0 ;
  wire \branch_data[11]_i_3_n_0 ;
  wire \branch_data[11]_i_4_n_0 ;
  wire \branch_data[12]_i_1_n_0 ;
  wire \branch_data[12]_i_2_n_0 ;
  wire \branch_data[12]_i_3_n_0 ;
  wire \branch_data[12]_i_4_n_0 ;
  wire \branch_data[13]_i_1_n_0 ;
  wire \branch_data[13]_i_3_n_0 ;
  wire \branch_data[14]_i_1_n_0 ;
  wire \branch_data[14]_i_2_n_0 ;
  wire \branch_data[14]_i_3_n_0 ;
  wire \branch_data[15]_i_1_n_0 ;
  wire \branch_data[15]_i_2_n_0 ;
  wire \branch_data[15]_i_3_n_0 ;
  wire \branch_data[1]_i_1_n_0 ;
  wire \branch_data[1]_i_2_n_0 ;
  wire \branch_data[1]_i_3_n_0 ;
  wire \branch_data[2]_i_1_n_0 ;
  wire \branch_data[2]_i_2_n_0 ;
  wire \branch_data[2]_i_3_n_0 ;
  wire \branch_data[2]_i_4_n_0 ;
  wire \branch_data[2]_i_5_n_0 ;
  wire \branch_data[3]_i_1_n_0 ;
  wire \branch_data[3]_i_2_n_0 ;
  wire \branch_data[3]_i_3_n_0 ;
  wire \branch_data[3]_i_4_n_0 ;
  wire \branch_data[4]_i_1_n_0 ;
  wire \branch_data[4]_i_2_n_0 ;
  wire \branch_data[4]_i_3_n_0 ;
  wire \branch_data[4]_i_4_n_0 ;
  wire \branch_data[4]_i_5_n_0 ;
  wire \branch_data[5]_i_1_n_0 ;
  wire \branch_data[5]_i_2_n_0 ;
  wire \branch_data[5]_i_3_n_0 ;
  wire \branch_data[6]_i_1_n_0 ;
  wire \branch_data[6]_i_2_n_0 ;
  wire \branch_data[6]_i_3_n_0 ;
  wire \branch_data[7]_i_1_n_0 ;
  wire \branch_data[7]_i_2_n_0 ;
  wire \branch_data[7]_i_3_n_0 ;
  wire \branch_data[8]_i_1_n_0 ;
  wire \branch_data[8]_i_2_n_0 ;
  wire \branch_data[8]_i_3_n_0 ;
  wire \branch_data[9]_i_1_n_0 ;
  wire \branch_data[9]_i_3_n_0 ;
  wire \branch_data[9]_i_4_n_0 ;
  wire \branch_data[9]_i_5_n_0 ;
  wire branch_data_first;
  wire \branch_data_first_reg_n_0_[0] ;
  wire \branch_data_first_reg_n_0_[1] ;
  wire \branch_data_first_reg_n_0_[2] ;
  wire \branch_data_first_reg_n_0_[3] ;
  wire \branch_data_first_reg_n_0_[4] ;
  wire \branch_data_first_reg_n_0_[5] ;
  wire \branch_data_first_reg_n_0_[6] ;
  wire \branch_data_first_reg_n_0_[8] ;
  wire \branch_data_reg_n_0_[10] ;
  wire \branch_data_reg_n_0_[11] ;
  wire \branch_data_reg_n_0_[12] ;
  wire \branch_data_reg_n_0_[13] ;
  wire \branch_data_reg_n_0_[14] ;
  wire \branch_data_reg_n_0_[15] ;
  wire \branch_data_reg_n_0_[9] ;
  wire branch_event;
  wire branch_event0;
  wire branch_event_i_1_n_0;
  wire cc_clear_i_1_n_0;
  wire cc_clear_i_2_n_0;
  wire cc_clear_i_3_n_0;
  wire cc_clear_i_4_n_0;
  wire cc_clear_reg_n_0;
  wire cc_overflow_i_1_n_0;
  wire cc_overflow_reg_0;
  wire cc_overflow_reg_1;
  wire clear_cmd;
  wire clear_cmd0;
  wire [0:3]command_reg;
  wire \cycle_count[15]_i_1_n_0 ;
  wire \cycle_count[15]_i_4_n_0 ;
  wire [1:15]cycle_count_reg;
  wire \cycle_count_reg[11]_i_1_n_0 ;
  wire \cycle_count_reg[11]_i_1_n_1 ;
  wire \cycle_count_reg[11]_i_1_n_2 ;
  wire \cycle_count_reg[11]_i_1_n_3 ;
  wire \cycle_count_reg[11]_i_1_n_4 ;
  wire \cycle_count_reg[11]_i_1_n_5 ;
  wire \cycle_count_reg[11]_i_1_n_6 ;
  wire \cycle_count_reg[11]_i_1_n_7 ;
  wire \cycle_count_reg[15]_i_2_n_0 ;
  wire \cycle_count_reg[15]_i_2_n_1 ;
  wire \cycle_count_reg[15]_i_2_n_2 ;
  wire \cycle_count_reg[15]_i_2_n_3 ;
  wire \cycle_count_reg[15]_i_2_n_4 ;
  wire \cycle_count_reg[15]_i_2_n_5 ;
  wire \cycle_count_reg[15]_i_2_n_6 ;
  wire \cycle_count_reg[15]_i_2_n_7 ;
  wire \cycle_count_reg[3]_i_1_n_1 ;
  wire \cycle_count_reg[3]_i_1_n_2 ;
  wire \cycle_count_reg[3]_i_1_n_3 ;
  wire \cycle_count_reg[3]_i_1_n_4 ;
  wire \cycle_count_reg[3]_i_1_n_5 ;
  wire \cycle_count_reg[3]_i_1_n_6 ;
  wire \cycle_count_reg[3]_i_1_n_7 ;
  wire \cycle_count_reg[7]_i_1_n_0 ;
  wire \cycle_count_reg[7]_i_1_n_1 ;
  wire \cycle_count_reg[7]_i_1_n_2 ;
  wire \cycle_count_reg[7]_i_1_n_3 ;
  wire \cycle_count_reg[7]_i_1_n_4 ;
  wire \cycle_count_reg[7]_i_1_n_5 ;
  wire \cycle_count_reg[7]_i_1_n_6 ;
  wire \cycle_count_reg[7]_i_1_n_7 ;
  wire data0;
  wire data3;
  wire data4;
  wire data5;
  wire data6;
  wire data7;
  wire [0:17]data_read_reg;
  wire data_read_reg_cs;
  wire data_read_reg_cs0;
  wire [0:15]event_data;
  wire \event_data[0]_i_1_n_0 ;
  wire \event_data[0]_i_2_n_0 ;
  wire \event_data[0]_i_3_n_0 ;
  wire \event_data[0]_i_5_n_0 ;
  wire \event_data[10]_i_1_n_0 ;
  wire \event_data[10]_i_2_n_0 ;
  wire \event_data[11]_i_1_n_0 ;
  wire \event_data[12]_i_1_n_0 ;
  wire \event_data[13]_i_1_n_0 ;
  wire \event_data[14]_i_1_n_0 ;
  wire \event_data[15]_i_1_n_0 ;
  wire \event_data[1]_i_1_n_0 ;
  wire \event_data[2]_i_1_n_0 ;
  wire \event_data[2]_i_2_n_0 ;
  wire \event_data[3]_i_1_n_0 ;
  wire \event_data[4]_i_1_n_0 ;
  wire \event_data[5]_i_1_n_0 ;
  wire \event_data[6]_i_1_n_0 ;
  wire \event_data[7]_i_1_n_0 ;
  wire \event_data[8]_i_1_n_0 ;
  wire \event_data[9]_i_1_n_0 ;
  wire \event_data_next[0]_i_1_n_0 ;
  wire \event_data_next[10]_i_1_n_0 ;
  wire \event_data_next[11]_i_1_n_0 ;
  wire \event_data_next[11]_i_2_n_0 ;
  wire \event_data_next[12]_i_1_n_0 ;
  wire \event_data_next[13]_i_1_n_0 ;
  wire \event_data_next[14]_i_1_n_0 ;
  wire \event_data_next[14]_i_2_n_0 ;
  wire \event_data_next[15]_i_1_n_0 ;
  wire \event_data_next[1]_i_1_n_0 ;
  wire \event_data_next[1]_i_2_n_0 ;
  wire \event_data_next[2]_i_1_n_0 ;
  wire [0:15]event_data_next__0;
  wire \event_data_next_reg[12]_0 ;
  wire \event_data_reg[15]_0 ;
  wire \event_data_reg[7]_0 ;
  wire event_trace;
  wire first_item;
  wire first_item_i_1_n_0;
  wire first_item_i_2_n_0;
  wire full_i;
  wire fullhalt_ctrl;
  wire halt_i;
  wire halt_i0;
  wire last_item_reg_0;
  wire last_item_reg_1;
  wire mb_halted_1;
  wire [0:14]next_wen;
  wire normal_stop_cmd_hold;
  wire normal_stop_cmd_i;
  wire [0:0]out;
  wire p_0_in34_in;
  wire p_0_in38_in;
  wire [8:0]p_0_in__0;
  wire p_10_out;
  wire [7:0]p_11_out;
  wire p_14_out;
  wire [7:0]p_15_out;
  wire p_18_out;
  wire [7:0]p_19_out;
  wire [6:2]p_1_in;
  wire p_1_in84_in;
  wire p_22_out;
  wire [7:0]p_23_out;
  wire p_26_out;
  wire [7:0]p_27_out;
  wire p_30_in;
  wire p_30_out;
  wire [7:0]p_31_out;
  wire [7:0]p_3_out;
  wire p_6_out;
  wire [7:0]p_7_out;
  wire [11:0]plusOp;
  wire [0:17]rddata;
  wire sample_cmd;
  wire sample_cmd0;
  wire [4:8]sample_synced;
  wire save_event_cc;
  wire save_event_cc0;
  wire save_event_cc_i_1_n_0;
  wire save_event_cc_reg_n_0;
  wire save_event_next_i_1_n_0;
  wire save_event_next_reg_0;
  wire save_event_next_reg_1;
  wire save_event_next_reg_n_0;
  wire save_pc_next;
  wire save_pc_next_i_4_n_0;
  wire save_pc_next_next_reg_0;
  wire save_pc_next_next_reg_1;
  wire save_pc_next_reg_0;
  wire \save_sel[0][0]_i_1_n_0 ;
  wire \save_sel[0][0]_i_2_n_0 ;
  wire \save_sel[0][1]_i_1_n_0 ;
  wire \save_sel[0][1]_i_2_n_0 ;
  wire \save_sel[0][2]_i_1_n_0 ;
  wire \save_sel[10][1]_i_1_n_0 ;
  wire \save_sel[10][1]_i_2_n_0 ;
  wire \save_sel[1][0]_i_1_n_0 ;
  wire \save_sel[1][0]_i_2_n_0 ;
  wire \save_sel[1][0]_i_3_n_0 ;
  wire \save_sel[1][0]_i_4_n_0 ;
  wire \save_sel[1][1]_i_1_n_0 ;
  wire \save_sel[1][1]_i_2_n_0 ;
  wire \save_sel[1][1]_i_3_n_0 ;
  wire \save_sel[1][1]_i_4_n_0 ;
  wire \save_sel[1][1]_i_5_n_0 ;
  wire \save_sel[1][1]_i_6_n_0 ;
  wire \save_sel[1][2]_i_1_n_0 ;
  wire \save_sel[1][2]_i_2_n_0 ;
  wire \save_sel[1][2]_i_3_n_0 ;
  wire \save_sel[1][2]_i_4_n_0 ;
  wire \save_sel[2][0]_i_1_n_0 ;
  wire \save_sel[2][0]_i_2_n_0 ;
  wire \save_sel[2][0]_i_3_n_0 ;
  wire \save_sel[2][1]_i_1_n_0 ;
  wire \save_sel[2][1]_i_2_n_0 ;
  wire \save_sel[2][1]_i_3_n_0 ;
  wire \save_sel[2][1]_i_4_n_0 ;
  wire \save_sel[2][1]_i_5_n_0 ;
  wire \save_sel[2][1]_i_6_n_0 ;
  wire \save_sel[2][1]_i_7_n_0 ;
  wire \save_sel[2][1]_i_8_n_0 ;
  wire \save_sel[2][2]_i_1_n_0 ;
  wire \save_sel[2][2]_i_2_n_0 ;
  wire \save_sel[2][2]_i_3_n_0 ;
  wire \save_sel[2][2]_i_4_n_0 ;
  wire \save_sel[3][0]_i_1_n_0 ;
  wire \save_sel[3][0]_i_2_n_0 ;
  wire \save_sel[3][0]_i_3_n_0 ;
  wire \save_sel[3][1]_i_1_n_0 ;
  wire \save_sel[3][1]_i_2_n_0 ;
  wire \save_sel[3][1]_i_3_n_0 ;
  wire \save_sel[3][1]_i_4_n_0 ;
  wire \save_sel[3][2]_i_10_n_0 ;
  wire \save_sel[3][2]_i_1_n_0 ;
  wire \save_sel[3][2]_i_2_n_0 ;
  wire \save_sel[3][2]_i_3_n_0 ;
  wire \save_sel[3][2]_i_4_n_0 ;
  wire \save_sel[3][2]_i_5_n_0 ;
  wire \save_sel[3][2]_i_6_n_0 ;
  wire \save_sel[3][2]_i_7_n_0 ;
  wire \save_sel[3][2]_i_8_n_0 ;
  wire \save_sel[3][2]_i_9_n_0 ;
  wire \save_sel[4][0]_i_1_n_0 ;
  wire \save_sel[4][0]_i_2_n_0 ;
  wire \save_sel[4][0]_i_3_n_0 ;
  wire \save_sel[4][1]_i_1_n_0 ;
  wire \save_sel[4][1]_i_2_n_0 ;
  wire \save_sel[4][1]_i_3_n_0 ;
  wire \save_sel[4][1]_i_4_n_0 ;
  wire \save_sel[4][1]_i_5_n_0 ;
  wire \save_sel[4][1]_i_6_n_0 ;
  wire \save_sel[4][1]_i_7_n_0 ;
  wire \save_sel[4][2]_i_1_n_0 ;
  wire \save_sel[4][2]_i_2_n_0 ;
  wire \save_sel[4][2]_i_3_n_0 ;
  wire \save_sel[4][2]_i_4_n_0 ;
  wire \save_sel[4][2]_i_5_n_0 ;
  wire \save_sel[4][2]_i_6_n_0 ;
  wire \save_sel[4][2]_i_7_n_0 ;
  wire \save_sel[5][0]_i_1_n_0 ;
  wire \save_sel[5][0]_i_2_n_0 ;
  wire \save_sel[5][0]_i_3_n_0 ;
  wire \save_sel[5][0]_i_4_n_0 ;
  wire \save_sel[5][0]_i_5_n_0 ;
  wire \save_sel[5][1]_i_1_n_0 ;
  wire \save_sel[5][1]_i_2_n_0 ;
  wire \save_sel[5][2]_i_1_n_0 ;
  wire \save_sel[5][2]_i_2_n_0 ;
  wire \save_sel[5][2]_i_3_n_0 ;
  wire \save_sel[5][2]_i_4_n_0 ;
  wire \save_sel[5][2]_i_5_n_0 ;
  wire \save_sel[5][2]_i_6_n_0 ;
  wire \save_sel[5][2]_i_7_n_0 ;
  wire \save_sel[6][0]_i_1_n_0 ;
  wire \save_sel[6][0]_i_2_n_0 ;
  wire \save_sel[6][0]_i_3_n_0 ;
  wire \save_sel[6][0]_i_4_n_0 ;
  wire \save_sel[6][1]_i_1_n_0 ;
  wire \save_sel[6][1]_i_2_n_0 ;
  wire \save_sel[6][1]_i_3_n_0 ;
  wire \save_sel[6][1]_i_4_n_0 ;
  wire \save_sel[6][1]_i_5_n_0 ;
  wire \save_sel[6][1]_i_6_n_0 ;
  wire \save_sel[6][2]_i_1_n_0 ;
  wire \save_sel[6][2]_i_2_n_0 ;
  wire \save_sel[6][2]_i_3_n_0 ;
  wire \save_sel[6][2]_i_4_n_0 ;
  wire \save_sel[6][2]_i_5_n_0 ;
  wire \save_sel[6][2]_i_6_n_0 ;
  wire \save_sel[7][0]_i_1_n_0 ;
  wire \save_sel[7][0]_i_2_n_0 ;
  wire \save_sel[7][0]_i_3_n_0 ;
  wire \save_sel[7][0]_i_4_n_0 ;
  wire \save_sel[7][0]_i_5_n_0 ;
  wire \save_sel[7][1]_i_1_n_0 ;
  wire \save_sel[7][1]_i_2_n_0 ;
  wire \save_sel[7][1]_i_3_n_0 ;
  wire \save_sel[7][1]_i_4_n_0 ;
  wire \save_sel[7][1]_i_5_n_0 ;
  wire \save_sel[7][1]_i_6_n_0 ;
  wire \save_sel[7][1]_i_7_n_0 ;
  wire \save_sel[7][2]_i_1_n_0 ;
  wire \save_sel[7][2]_i_2_n_0 ;
  wire \save_sel[7][2]_i_3_n_0 ;
  wire \save_sel[7][2]_i_4_n_0 ;
  wire \save_sel[7][2]_i_5_n_0 ;
  wire \save_sel[8][0]_i_1_n_0 ;
  wire \save_sel[8][1]_i_1_n_0 ;
  wire \save_sel[8][1]_i_2_n_0 ;
  wire \save_sel[8][1]_i_3_n_0 ;
  wire \save_sel[8][1]_i_4_n_0 ;
  wire \save_sel[8][1]_i_5_n_0 ;
  wire \save_sel[8][1]_i_6_n_0 ;
  wire \save_sel[8][2]_i_1_n_0 ;
  wire \save_sel[8][2]_i_2_n_0 ;
  wire \save_sel[8][2]_i_3_n_0 ;
  wire \save_sel[8][2]_i_4_n_0 ;
  wire \save_sel[9][0]_i_1_n_0 ;
  wire \save_sel[9][1]_i_1_n_0 ;
  wire \save_sel[9][1]_i_2_n_0 ;
  wire \save_sel[9][1]_i_3_n_0 ;
  wire \save_sel[9][1]_i_4_n_0 ;
  wire \save_sel[9][1]_i_5_n_0 ;
  wire \save_sel[9][2]_i_1_n_0 ;
  wire \save_sel[9][2]_i_2_n_0 ;
  wire \save_sel[9][2]_i_3_n_0 ;
  wire \save_sel[9][2]_i_4_n_0 ;
  wire \save_sel[9][2]_i_5_n_0 ;
  wire \save_sel_reg[0][2]_0 ;
  wire \save_sel_reg[0][2]_1 ;
  wire [2:0]\save_sel_reg[0]_22 ;
  wire [2:0]\save_sel_reg[1]_21 ;
  wire [2:0]\save_sel_reg[2]_20 ;
  wire [2:0]\save_sel_reg[3]_19 ;
  wire [2:0]\save_sel_reg[4]_18 ;
  wire [2:0]\save_sel_reg[5]_17 ;
  wire [2:0]\save_sel_reg[6]_16 ;
  wire [2:0]\save_sel_reg[7]_15 ;
  wire \save_sel_reg_n_0_[10][1] ;
  wire \save_sel_reg_n_0_[8][0] ;
  wire \save_sel_reg_n_0_[8][1] ;
  wire \save_sel_reg_n_0_[8][2] ;
  wire \save_sel_reg_n_0_[9][0] ;
  wire \save_sel_reg_n_0_[9][1] ;
  wire \save_sel_reg_n_0_[9][2] ;
  wire \saved_load_get[0]_i_10_n_0 ;
  wire \saved_load_get[0]_i_11_n_0 ;
  wire \saved_load_get[0]_i_12_n_0 ;
  wire \saved_load_get[0]_i_13_n_0 ;
  wire \saved_load_get[0]_i_14_n_0 ;
  wire \saved_load_get[0]_i_15_n_0 ;
  wire \saved_load_get[0]_i_16_n_0 ;
  wire \saved_load_get[0]_i_1_n_0 ;
  wire \saved_load_get[0]_i_8_n_0 ;
  wire \saved_load_get[0]_i_9_n_0 ;
  wire \saved_load_get_reg[31]_0 ;
  wire \saved_load_get_reg_n_0_[0] ;
  wire \saved_load_get_reg_n_0_[10] ;
  wire \saved_load_get_reg_n_0_[11] ;
  wire \saved_load_get_reg_n_0_[12] ;
  wire \saved_load_get_reg_n_0_[13] ;
  wire \saved_load_get_reg_n_0_[14] ;
  wire \saved_load_get_reg_n_0_[16] ;
  wire \saved_load_get_reg_n_0_[17] ;
  wire \saved_load_get_reg_n_0_[18] ;
  wire \saved_load_get_reg_n_0_[19] ;
  wire \saved_load_get_reg_n_0_[1] ;
  wire \saved_load_get_reg_n_0_[20] ;
  wire \saved_load_get_reg_n_0_[21] ;
  wire \saved_load_get_reg_n_0_[22] ;
  wire \saved_load_get_reg_n_0_[23] ;
  wire \saved_load_get_reg_n_0_[24] ;
  wire \saved_load_get_reg_n_0_[25] ;
  wire \saved_load_get_reg_n_0_[26] ;
  wire \saved_load_get_reg_n_0_[27] ;
  wire \saved_load_get_reg_n_0_[28] ;
  wire \saved_load_get_reg_n_0_[29] ;
  wire \saved_load_get_reg_n_0_[2] ;
  wire \saved_load_get_reg_n_0_[31] ;
  wire \saved_load_get_reg_n_0_[3] ;
  wire \saved_load_get_reg_n_0_[4] ;
  wire \saved_load_get_reg_n_0_[5] ;
  wire \saved_load_get_reg_n_0_[6] ;
  wire \saved_load_get_reg_n_0_[7] ;
  wire \saved_load_get_reg_n_0_[8] ;
  wire \saved_load_get_reg_n_0_[9] ;
  wire [0:0]\saved_pc_reg[31]_0 ;
  wire \saved_pc_reg_n_0_[0] ;
  wire \saved_pc_reg_n_0_[10] ;
  wire \saved_pc_reg_n_0_[11] ;
  wire \saved_pc_reg_n_0_[12] ;
  wire \saved_pc_reg_n_0_[13] ;
  wire \saved_pc_reg_n_0_[14] ;
  wire \saved_pc_reg_n_0_[16] ;
  wire \saved_pc_reg_n_0_[17] ;
  wire \saved_pc_reg_n_0_[18] ;
  wire \saved_pc_reg_n_0_[19] ;
  wire \saved_pc_reg_n_0_[1] ;
  wire \saved_pc_reg_n_0_[20] ;
  wire \saved_pc_reg_n_0_[21] ;
  wire \saved_pc_reg_n_0_[22] ;
  wire \saved_pc_reg_n_0_[23] ;
  wire \saved_pc_reg_n_0_[24] ;
  wire \saved_pc_reg_n_0_[25] ;
  wire \saved_pc_reg_n_0_[26] ;
  wire \saved_pc_reg_n_0_[27] ;
  wire \saved_pc_reg_n_0_[28] ;
  wire \saved_pc_reg_n_0_[29] ;
  wire \saved_pc_reg_n_0_[2] ;
  wire \saved_pc_reg_n_0_[31] ;
  wire \saved_pc_reg_n_0_[3] ;
  wire \saved_pc_reg_n_0_[4] ;
  wire \saved_pc_reg_n_0_[5] ;
  wire \saved_pc_reg_n_0_[6] ;
  wire \saved_pc_reg_n_0_[7] ;
  wire \saved_pc_reg_n_0_[8] ;
  wire \saved_pc_reg_n_0_[9] ;
  wire savepc_ctrl;
  wire saveret_ctrl;
  wire start_cmd;
  wire start_cmd0;
  wire started_i;
  wire [11:0]status_count;
  wire [0:17]status_reg;
  wire stop_cmd;
  wire stop_cmd0;
  wire stopped_i0;
  wire stopped_i1;
  wire sync;
  wire sync_reset;
  wire trace_count;
  wire trace_count_max;
  wire trace_din_muxed;
  wire trace_exception_taken_i_reg;
  wire trace_halt_hold;
  wire trace_halt_hold0;
  wire \trace_instruction_i_reg[16] ;
  wire \trace_instruction_i_reg[2] ;
  wire \trace_instruction_i_reg[2]_0 ;
  wire trace_wen_keep;
  wire trace_wr;
  wire trig_in_0_pulse;
  wire trig_in_0_pulse_reg;
  wire trig_in_1_pulse;
  wire [11:0]wraddr;
  wire [3:0]writems;
  wire \writems[0]_i_1_n_0 ;
  wire \writems[0]_i_2_n_0 ;
  wire \writems[0]_i_3_n_0 ;
  wire \writems[0]_i_4_n_0 ;
  wire \writems[0]_i_5_n_0 ;
  wire \writems[0]_i_6_n_0 ;
  wire \writems[0]_i_7_0 ;
  wire \writems[0]_i_7_n_0 ;
  wire \writems[0]_i_8_n_0 ;
  wire \writems[0]_i_9_n_0 ;
  wire \writems[1]_i_1_n_0 ;
  wire \writems[1]_i_2_n_0 ;
  wire \writems[2]_i_1_n_0 ;
  wire \writems[2]_i_2_n_0 ;
  wire \writems[2]_i_3_n_0 ;
  wire \writems[2]_i_4_n_0 ;
  wire \writems[2]_i_6_n_0 ;
  wire \writems[3]_i_1_n_0 ;
  wire \writems_reg[1]_0 ;
  wire [3:3]\NLW_Embedded_Trace.rdaddr_reg[8]_i_1_CO_UNCONNECTED ;
  wire [3:3]\NLW_Embedded_Trace.trace_count_reg[8]_i_1_CO_UNCONNECTED ;
  wire [3:3]\NLW_Embedded_Trace.wraddr_reg[11]_i_3_CO_UNCONNECTED ;
  wire [3:3]\NLW_cycle_count_reg[3]_i_1_CO_UNCONNECTED ;

  assign Dbg_Reg_En_5_sp_1 = Dbg_Reg_En_5_sn_1;
  assign Dbg_Reg_En_7_sp_1 = Dbg_Reg_En_7_sn_1;
  (* SOFT_HLUTNM = "soft_lutpair96" *) 
  LUT5 #(
    .INIT(32'h0000EEEA)) 
    \Area_Debug_Control.Use_Trace.trace_halt_hold_i_1 
       (.I0(trace_halt_hold),
        .I1(fullhalt_ctrl),
        .I2(halt_i),
        .I3(cc_overflow_reg_0),
        .I4(\Area_Debug_Control.Use_Trace.trace_halt_hold_reg ),
        .O(trace_halt_hold0));
  LUT6 #(
    .INIT(64'hFAEEFAEEAAAA0000)) 
    Dbg_TDO_INST_0_i_11
       (.I0(Dbg_TDO_INST_0_i_21_n_0),
        .I1(Dbg_TDO_INST_0_i_22_n_0),
        .I2(Dbg_TDO_INST_0_i_23_n_0),
        .I3(Dbg_TDO_INST_0_i_11_0),
        .I4(Dbg_Reg_En_5_sn_1),
        .I5(Dbg_TDO_INST_0_i_3),
        .O(\Embedded_Trace.Serial_Dbg_Intf.data_read_reg_reg[0]_0 ));
  LUT6 #(
    .INIT(64'hFC0CAAAA00000000)) 
    Dbg_TDO_INST_0_i_21
       (.I0(Dbg_TDO_INST_0_i_40_n_0),
        .I1(data_read_reg[0]),
        .I2(Q[0]),
        .I3(data_read_reg[1]),
        .I4(Dbg_TDO_INST_0_i_11_0),
        .I5(Dbg_Reg_En_5_sn_1),
        .O(Dbg_TDO_INST_0_i_21_n_0));
  LUT6 #(
    .INIT(64'hFE833E80C2830280)) 
    Dbg_TDO_INST_0_i_22
       (.I0(Dbg_TDO_INST_0_i_41_n_0),
        .I1(Q[1]),
        .I2(Q[2]),
        .I3(Q[3]),
        .I4(Dbg_TDO_INST_0_i_42_n_0),
        .I5(Dbg_TDO_INST_0_i_43_n_0),
        .O(Dbg_TDO_INST_0_i_22_n_0));
  LUT3 #(
    .INIT(8'hB8)) 
    Dbg_TDO_INST_0_i_23
       (.I0(status_reg[1]),
        .I1(Q[0]),
        .I2(status_reg[0]),
        .O(Dbg_TDO_INST_0_i_23_n_0));
  LUT5 #(
    .INIT(32'hFF1EE100)) 
    Dbg_TDO_INST_0_i_40
       (.I0(Q[1]),
        .I1(Q[2]),
        .I2(Q[3]),
        .I3(Dbg_TDO_INST_0_i_58_n_0),
        .I4(Dbg_TDO_INST_0_i_59_n_0),
        .O(Dbg_TDO_INST_0_i_40_n_0));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    Dbg_TDO_INST_0_i_41
       (.I0(status_reg[7]),
        .I1(status_reg[6]),
        .I2(Q[1]),
        .I3(status_reg[9]),
        .I4(Q[0]),
        .I5(status_reg[8]),
        .O(Dbg_TDO_INST_0_i_41_n_0));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    Dbg_TDO_INST_0_i_42
       (.I0(status_reg[15]),
        .I1(status_reg[14]),
        .I2(Q[1]),
        .I3(status_reg[17]),
        .I4(Q[0]),
        .I5(status_reg[16]),
        .O(Dbg_TDO_INST_0_i_42_n_0));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    Dbg_TDO_INST_0_i_43
       (.I0(status_reg[11]),
        .I1(status_reg[10]),
        .I2(Q[1]),
        .I3(status_reg[13]),
        .I4(Q[0]),
        .I5(status_reg[12]),
        .O(Dbg_TDO_INST_0_i_43_n_0));
  MUXF7 Dbg_TDO_INST_0_i_58
       (.I0(Dbg_TDO_INST_0_i_68_n_0),
        .I1(Dbg_TDO_INST_0_i_69_n_0),
        .O(Dbg_TDO_INST_0_i_58_n_0),
        .S(Dbg_TDO_INST_0_i_40_0));
  MUXF7 Dbg_TDO_INST_0_i_59
       (.I0(Dbg_TDO_INST_0_i_70_n_0),
        .I1(Dbg_TDO_INST_0_i_71_n_0),
        .O(Dbg_TDO_INST_0_i_59_n_0),
        .S(Dbg_TDO_INST_0_i_40_0));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    Dbg_TDO_INST_0_i_68
       (.I0(data_read_reg[11]),
        .I1(data_read_reg[10]),
        .I2(Q[1]),
        .I3(data_read_reg[13]),
        .I4(Q[0]),
        .I5(data_read_reg[12]),
        .O(Dbg_TDO_INST_0_i_68_n_0));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    Dbg_TDO_INST_0_i_69
       (.I0(data_read_reg[15]),
        .I1(data_read_reg[14]),
        .I2(Q[1]),
        .I3(data_read_reg[17]),
        .I4(Q[0]),
        .I5(data_read_reg[16]),
        .O(Dbg_TDO_INST_0_i_69_n_0));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    Dbg_TDO_INST_0_i_70
       (.I0(data_read_reg[3]),
        .I1(data_read_reg[2]),
        .I2(Q[1]),
        .I3(data_read_reg[5]),
        .I4(Q[0]),
        .I5(data_read_reg[4]),
        .O(Dbg_TDO_INST_0_i_70_n_0));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    Dbg_TDO_INST_0_i_71
       (.I0(data_read_reg[7]),
        .I1(data_read_reg[6]),
        .I2(Q[1]),
        .I3(data_read_reg[9]),
        .I4(Q[0]),
        .I5(data_read_reg[8]),
        .O(Dbg_TDO_INST_0_i_71_n_0));
  block_design_microblaze_0_0_RAM_Module \Embedded_Trace.Embedded_Trace_Buffer 
       (.Clk(Clk),
        .D({rddata[0],rddata[1],rddata[2],rddata[3],rddata[4],rddata[5],rddata[6],rddata[7],rddata[8],rddata[9],rddata[10],rddata[11],rddata[12],rddata[13],rddata[14],rddata[15],rddata[16],rddata[17]}),
        .\Embedded_Trace.rdaddr_reg (\Embedded_Trace.rdaddr_reg [2:0]),
        .Q({ADDRB[1],ADDRB[2],ADDRB[3],ADDRB[4],ADDRB[5],ADDRB[6],ADDRB[7],ADDRB[8],ADDRB[9]}),
        .\Using_FPGA.Native ({DATA_INA[0],DATA_INA[1],DATA_INA[2],DATA_INA[3],DATA_INA[4],DATA_INA[5],DATA_INA[6],DATA_INA[7],DATA_INA[64],DATA_INA[8],DATA_INA[9],DATA_INA[10],DATA_INA[11],DATA_INA[12],DATA_INA[13],DATA_INA[14],DATA_INA[15],DATA_INA[65],DATA_INA[16],DATA_INA[17],DATA_INA[18],DATA_INA[19],DATA_INA[20],DATA_INA[21],DATA_INA[22],DATA_INA[23],DATA_INA[66],DATA_INA[24],DATA_INA[25],DATA_INA[26],DATA_INA[27],DATA_INA[28],DATA_INA[29],DATA_INA[30],DATA_INA[31],DATA_INA[67],DATA_INA[32],DATA_INA[33],DATA_INA[34],DATA_INA[35],DATA_INA[36],DATA_INA[37],DATA_INA[38],DATA_INA[39],DATA_INA[68],DATA_INA[40],DATA_INA[41],DATA_INA[42],DATA_INA[43],DATA_INA[44],DATA_INA[45],DATA_INA[46],DATA_INA[47],DATA_INA[69],DATA_INA[48],DATA_INA[49],DATA_INA[50],DATA_INA[51],DATA_INA[52],DATA_INA[53],DATA_INA[54],DATA_INA[55],DATA_INA[70],DATA_INA[56],DATA_INA[57],DATA_INA[58],DATA_INA[59],DATA_INA[60],DATA_INA[61],DATA_INA[62],DATA_INA[63],DATA_INA[71],p_31_out,p_30_out,p_27_out,p_26_out,p_23_out,p_22_out,p_19_out,p_18_out,p_15_out,p_14_out,p_11_out,p_10_out,p_7_out,p_6_out,p_3_out,\Embedded_Trace.trace_din_all_reg_n_0_[143] }),
        .\Using_FPGA.Native_0 ({WEA[0],WEA[2],WEA[4],WEA[6],\Embedded_Trace.trace_wen_reg_n_0_[8] ,\Embedded_Trace.trace_wen_reg_n_0_[10] ,\Embedded_Trace.trace_wen_reg_n_0_[12] ,\Embedded_Trace.trace_wen_reg_n_0_[14] }));
  LUT3 #(
    .INIT(8'h04)) 
    \Embedded_Trace.Serial_Dbg_Intf.data_read_reg_cs_TCK_i_2 
       (.I0(\Serial_Dbg_Intf.command_reg[0]_i_2__0_n_0 ),
        .I1(Dbg_Reg_En[5]),
        .I2(Dbg_Reg_En[0]),
        .O(Dbg_Reg_En_5_sn_1));
  FDCE #(
    .INIT(1'b0)) 
    \Embedded_Trace.Serial_Dbg_Intf.data_read_reg_cs_TCK_reg 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(AR),
        .D(\Embedded_Trace.Serial_Dbg_Intf.data_read_reg_cs_TCK_reg_1 ),
        .Q(\Embedded_Trace.Serial_Dbg_Intf.data_read_reg_cs_TCK_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \Embedded_Trace.Serial_Dbg_Intf.data_read_reg_cs_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(data_read_reg_cs0),
        .Q(data_read_reg_cs),
        .R(sync_reset));
  FDCE #(
    .INIT(1'b0)) 
    \Embedded_Trace.Serial_Dbg_Intf.data_read_reg_reg[0] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(AR),
        .D(\Embedded_Trace.rddata_reg_n_0_[0] ),
        .Q(data_read_reg[0]));
  FDCE #(
    .INIT(1'b0)) 
    \Embedded_Trace.Serial_Dbg_Intf.data_read_reg_reg[10] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(AR),
        .D(\Embedded_Trace.rddata_reg_n_0_[10] ),
        .Q(data_read_reg[10]));
  FDCE #(
    .INIT(1'b0)) 
    \Embedded_Trace.Serial_Dbg_Intf.data_read_reg_reg[11] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(AR),
        .D(\Embedded_Trace.rddata_reg_n_0_[11] ),
        .Q(data_read_reg[11]));
  FDCE #(
    .INIT(1'b0)) 
    \Embedded_Trace.Serial_Dbg_Intf.data_read_reg_reg[12] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(AR),
        .D(\Embedded_Trace.rddata_reg_n_0_[12] ),
        .Q(data_read_reg[12]));
  FDCE #(
    .INIT(1'b0)) 
    \Embedded_Trace.Serial_Dbg_Intf.data_read_reg_reg[13] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(AR),
        .D(\Embedded_Trace.rddata_reg_n_0_[13] ),
        .Q(data_read_reg[13]));
  FDCE #(
    .INIT(1'b0)) 
    \Embedded_Trace.Serial_Dbg_Intf.data_read_reg_reg[14] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(AR),
        .D(\Embedded_Trace.rddata_reg_n_0_[14] ),
        .Q(data_read_reg[14]));
  FDCE #(
    .INIT(1'b0)) 
    \Embedded_Trace.Serial_Dbg_Intf.data_read_reg_reg[15] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(AR),
        .D(\Embedded_Trace.rddata_reg_n_0_[15] ),
        .Q(data_read_reg[15]));
  FDCE #(
    .INIT(1'b0)) 
    \Embedded_Trace.Serial_Dbg_Intf.data_read_reg_reg[16] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(AR),
        .D(\Embedded_Trace.rddata_reg_n_0_[16] ),
        .Q(data_read_reg[16]));
  FDCE #(
    .INIT(1'b0)) 
    \Embedded_Trace.Serial_Dbg_Intf.data_read_reg_reg[17] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(AR),
        .D(\Embedded_Trace.rddata_reg_n_0_[17] ),
        .Q(data_read_reg[17]));
  FDCE #(
    .INIT(1'b0)) 
    \Embedded_Trace.Serial_Dbg_Intf.data_read_reg_reg[1] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(AR),
        .D(\Embedded_Trace.rddata_reg_n_0_[1] ),
        .Q(data_read_reg[1]));
  FDCE #(
    .INIT(1'b0)) 
    \Embedded_Trace.Serial_Dbg_Intf.data_read_reg_reg[2] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(AR),
        .D(\Embedded_Trace.rddata_reg_n_0_[2] ),
        .Q(data_read_reg[2]));
  FDCE #(
    .INIT(1'b0)) 
    \Embedded_Trace.Serial_Dbg_Intf.data_read_reg_reg[3] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(AR),
        .D(\Embedded_Trace.rddata_reg_n_0_[3] ),
        .Q(data_read_reg[3]));
  FDCE #(
    .INIT(1'b0)) 
    \Embedded_Trace.Serial_Dbg_Intf.data_read_reg_reg[4] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(AR),
        .D(\Embedded_Trace.rddata_reg_n_0_[4] ),
        .Q(data_read_reg[4]));
  FDCE #(
    .INIT(1'b0)) 
    \Embedded_Trace.Serial_Dbg_Intf.data_read_reg_reg[5] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(AR),
        .D(\Embedded_Trace.rddata_reg_n_0_[5] ),
        .Q(data_read_reg[5]));
  FDCE #(
    .INIT(1'b0)) 
    \Embedded_Trace.Serial_Dbg_Intf.data_read_reg_reg[6] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(AR),
        .D(\Embedded_Trace.rddata_reg_n_0_[6] ),
        .Q(data_read_reg[6]));
  FDCE #(
    .INIT(1'b0)) 
    \Embedded_Trace.Serial_Dbg_Intf.data_read_reg_reg[7] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(AR),
        .D(\Embedded_Trace.rddata_reg_n_0_[7] ),
        .Q(data_read_reg[7]));
  FDCE #(
    .INIT(1'b0)) 
    \Embedded_Trace.Serial_Dbg_Intf.data_read_reg_reg[8] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(AR),
        .D(\Embedded_Trace.rddata_reg_n_0_[8] ),
        .Q(data_read_reg[8]));
  FDCE #(
    .INIT(1'b0)) 
    \Embedded_Trace.Serial_Dbg_Intf.data_read_reg_reg[9] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(AR),
        .D(\Embedded_Trace.rddata_reg_n_0_[9] ),
        .Q(data_read_reg[9]));
  FDRE \Embedded_Trace.Serial_Dbg_Intf.sample_synced_1_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(out),
        .Q(\Embedded_Trace.Serial_Dbg_Intf.sample_synced_1_reg_0 ),
        .R(sync_reset));
  block_design_microblaze_0_0_mb_sync_bit_48 \Embedded_Trace.Serial_Dbg_Intf.sync_sample 
       (.Clk(Clk),
        .\Synchronize.use_sync_reset.sync_reg[1]_0 (\Embedded_Trace.Serial_Dbg_Intf.data_read_reg_cs_TCK_reg_0 ),
        .out(out),
        .sync_reset(sync_reset));
  (* SOFT_HLUTNM = "soft_lutpair116" *) 
  LUT4 #(
    .INIT(16'h4000)) 
    \Embedded_Trace.full_i_i_1 
       (.I0(\Embedded_Trace.full_i_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_count_reg [5]),
        .I2(\Embedded_Trace.trace_count_reg [3]),
        .I3(\Embedded_Trace.trace_count_reg [4]),
        .O(trace_count_max));
  LUT6 #(
    .INIT(64'h7FFFFFFFFFFFFFFF)) 
    \Embedded_Trace.full_i_i_2 
       (.I0(\Embedded_Trace.trace_count_reg__0 [10]),
        .I1(\Embedded_Trace.trace_count_reg__0 [7]),
        .I2(\Embedded_Trace.trace_count_reg__0 [6]),
        .I3(\Embedded_Trace.trace_count_reg__0 [9]),
        .I4(\Embedded_Trace.trace_count_reg__0 [11]),
        .I5(\Embedded_Trace.trace_count_reg__0 [8]),
        .O(\Embedded_Trace.full_i_i_2_n_0 ));
  FDRE \Embedded_Trace.full_i_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(trace_count_max),
        .Q(full_i),
        .R(sync_reset));
  (* SOFT_HLUTNM = "soft_lutpair116" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \Embedded_Trace.halt_i_i_1 
       (.I0(p_0_in34_in),
        .I1(\Embedded_Trace.full_i_i_2_n_0 ),
        .O(halt_i0));
  FDRE \Embedded_Trace.halt_i_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(halt_i0),
        .Q(halt_i),
        .R(sync_reset));
  FDRE \Embedded_Trace.prev_wr_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(trace_wr),
        .Q(\Embedded_Trace.prev_wr_reg_0 ),
        .R(trace_wen_keep));
  LUT1 #(
    .INIT(2'h1)) 
    \Embedded_Trace.rdaddr[0]_i_2 
       (.I0(\Embedded_Trace.rdaddr_reg [0]),
        .O(\Embedded_Trace.rdaddr[0]_i_2_n_0 ));
  FDRE \Embedded_Trace.rdaddr_reg[0] 
       (.C(Clk),
        .CE(data_read_reg_cs),
        .D(\Embedded_Trace.rdaddr_reg[0]_i_1_n_7 ),
        .Q(\Embedded_Trace.rdaddr_reg [0]),
        .R(trace_count));
  CARRY4 \Embedded_Trace.rdaddr_reg[0]_i_1 
       (.CI(1'b0),
        .CO({\Embedded_Trace.rdaddr_reg[0]_i_1_n_0 ,\Embedded_Trace.rdaddr_reg[0]_i_1_n_1 ,\Embedded_Trace.rdaddr_reg[0]_i_1_n_2 ,\Embedded_Trace.rdaddr_reg[0]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b1}),
        .O({\Embedded_Trace.rdaddr_reg[0]_i_1_n_4 ,\Embedded_Trace.rdaddr_reg[0]_i_1_n_5 ,\Embedded_Trace.rdaddr_reg[0]_i_1_n_6 ,\Embedded_Trace.rdaddr_reg[0]_i_1_n_7 }),
        .S({\Embedded_Trace.rdaddr_reg [3:1],\Embedded_Trace.rdaddr[0]_i_2_n_0 }));
  FDRE \Embedded_Trace.rdaddr_reg[10] 
       (.C(Clk),
        .CE(data_read_reg_cs),
        .D(\Embedded_Trace.rdaddr_reg[8]_i_1_n_5 ),
        .Q(\Embedded_Trace.rdaddr_reg [10]),
        .R(trace_count));
  FDRE \Embedded_Trace.rdaddr_reg[11] 
       (.C(Clk),
        .CE(data_read_reg_cs),
        .D(\Embedded_Trace.rdaddr_reg[8]_i_1_n_4 ),
        .Q(\Embedded_Trace.rdaddr_reg [11]),
        .R(trace_count));
  FDRE \Embedded_Trace.rdaddr_reg[1] 
       (.C(Clk),
        .CE(data_read_reg_cs),
        .D(\Embedded_Trace.rdaddr_reg[0]_i_1_n_6 ),
        .Q(\Embedded_Trace.rdaddr_reg [1]),
        .R(trace_count));
  FDRE \Embedded_Trace.rdaddr_reg[2] 
       (.C(Clk),
        .CE(data_read_reg_cs),
        .D(\Embedded_Trace.rdaddr_reg[0]_i_1_n_5 ),
        .Q(\Embedded_Trace.rdaddr_reg [2]),
        .R(trace_count));
  FDRE \Embedded_Trace.rdaddr_reg[3] 
       (.C(Clk),
        .CE(data_read_reg_cs),
        .D(\Embedded_Trace.rdaddr_reg[0]_i_1_n_4 ),
        .Q(\Embedded_Trace.rdaddr_reg [3]),
        .R(trace_count));
  FDRE \Embedded_Trace.rdaddr_reg[4] 
       (.C(Clk),
        .CE(data_read_reg_cs),
        .D(\Embedded_Trace.rdaddr_reg[4]_i_1_n_7 ),
        .Q(\Embedded_Trace.rdaddr_reg [4]),
        .R(trace_count));
  CARRY4 \Embedded_Trace.rdaddr_reg[4]_i_1 
       (.CI(\Embedded_Trace.rdaddr_reg[0]_i_1_n_0 ),
        .CO({\Embedded_Trace.rdaddr_reg[4]_i_1_n_0 ,\Embedded_Trace.rdaddr_reg[4]_i_1_n_1 ,\Embedded_Trace.rdaddr_reg[4]_i_1_n_2 ,\Embedded_Trace.rdaddr_reg[4]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\Embedded_Trace.rdaddr_reg[4]_i_1_n_4 ,\Embedded_Trace.rdaddr_reg[4]_i_1_n_5 ,\Embedded_Trace.rdaddr_reg[4]_i_1_n_6 ,\Embedded_Trace.rdaddr_reg[4]_i_1_n_7 }),
        .S(\Embedded_Trace.rdaddr_reg [7:4]));
  FDRE \Embedded_Trace.rdaddr_reg[5] 
       (.C(Clk),
        .CE(data_read_reg_cs),
        .D(\Embedded_Trace.rdaddr_reg[4]_i_1_n_6 ),
        .Q(\Embedded_Trace.rdaddr_reg [5]),
        .R(trace_count));
  FDRE \Embedded_Trace.rdaddr_reg[6] 
       (.C(Clk),
        .CE(data_read_reg_cs),
        .D(\Embedded_Trace.rdaddr_reg[4]_i_1_n_5 ),
        .Q(\Embedded_Trace.rdaddr_reg [6]),
        .R(trace_count));
  FDRE \Embedded_Trace.rdaddr_reg[7] 
       (.C(Clk),
        .CE(data_read_reg_cs),
        .D(\Embedded_Trace.rdaddr_reg[4]_i_1_n_4 ),
        .Q(\Embedded_Trace.rdaddr_reg [7]),
        .R(trace_count));
  FDRE \Embedded_Trace.rdaddr_reg[8] 
       (.C(Clk),
        .CE(data_read_reg_cs),
        .D(\Embedded_Trace.rdaddr_reg[8]_i_1_n_7 ),
        .Q(\Embedded_Trace.rdaddr_reg [8]),
        .R(trace_count));
  CARRY4 \Embedded_Trace.rdaddr_reg[8]_i_1 
       (.CI(\Embedded_Trace.rdaddr_reg[4]_i_1_n_0 ),
        .CO({\NLW_Embedded_Trace.rdaddr_reg[8]_i_1_CO_UNCONNECTED [3],\Embedded_Trace.rdaddr_reg[8]_i_1_n_1 ,\Embedded_Trace.rdaddr_reg[8]_i_1_n_2 ,\Embedded_Trace.rdaddr_reg[8]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\Embedded_Trace.rdaddr_reg[8]_i_1_n_4 ,\Embedded_Trace.rdaddr_reg[8]_i_1_n_5 ,\Embedded_Trace.rdaddr_reg[8]_i_1_n_6 ,\Embedded_Trace.rdaddr_reg[8]_i_1_n_7 }),
        .S(\Embedded_Trace.rdaddr_reg [11:8]));
  FDRE \Embedded_Trace.rdaddr_reg[9] 
       (.C(Clk),
        .CE(data_read_reg_cs),
        .D(\Embedded_Trace.rdaddr_reg[8]_i_1_n_6 ),
        .Q(\Embedded_Trace.rdaddr_reg [9]),
        .R(trace_count));
  FDRE \Embedded_Trace.rddata_reg[0] 
       (.C(Clk),
        .CE(E),
        .D(rddata[0]),
        .Q(\Embedded_Trace.rddata_reg_n_0_[0] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.rddata_reg[10] 
       (.C(Clk),
        .CE(E),
        .D(rddata[10]),
        .Q(\Embedded_Trace.rddata_reg_n_0_[10] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.rddata_reg[11] 
       (.C(Clk),
        .CE(E),
        .D(rddata[11]),
        .Q(\Embedded_Trace.rddata_reg_n_0_[11] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.rddata_reg[12] 
       (.C(Clk),
        .CE(E),
        .D(rddata[12]),
        .Q(\Embedded_Trace.rddata_reg_n_0_[12] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.rddata_reg[13] 
       (.C(Clk),
        .CE(E),
        .D(rddata[13]),
        .Q(\Embedded_Trace.rddata_reg_n_0_[13] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.rddata_reg[14] 
       (.C(Clk),
        .CE(E),
        .D(rddata[14]),
        .Q(\Embedded_Trace.rddata_reg_n_0_[14] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.rddata_reg[15] 
       (.C(Clk),
        .CE(E),
        .D(rddata[15]),
        .Q(\Embedded_Trace.rddata_reg_n_0_[15] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.rddata_reg[16] 
       (.C(Clk),
        .CE(E),
        .D(rddata[16]),
        .Q(\Embedded_Trace.rddata_reg_n_0_[16] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.rddata_reg[17] 
       (.C(Clk),
        .CE(E),
        .D(rddata[17]),
        .Q(\Embedded_Trace.rddata_reg_n_0_[17] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.rddata_reg[1] 
       (.C(Clk),
        .CE(E),
        .D(rddata[1]),
        .Q(\Embedded_Trace.rddata_reg_n_0_[1] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.rddata_reg[2] 
       (.C(Clk),
        .CE(E),
        .D(rddata[2]),
        .Q(\Embedded_Trace.rddata_reg_n_0_[2] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.rddata_reg[3] 
       (.C(Clk),
        .CE(E),
        .D(rddata[3]),
        .Q(\Embedded_Trace.rddata_reg_n_0_[3] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.rddata_reg[4] 
       (.C(Clk),
        .CE(E),
        .D(rddata[4]),
        .Q(\Embedded_Trace.rddata_reg_n_0_[4] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.rddata_reg[5] 
       (.C(Clk),
        .CE(E),
        .D(rddata[5]),
        .Q(\Embedded_Trace.rddata_reg_n_0_[5] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.rddata_reg[6] 
       (.C(Clk),
        .CE(E),
        .D(rddata[6]),
        .Q(\Embedded_Trace.rddata_reg_n_0_[6] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.rddata_reg[7] 
       (.C(Clk),
        .CE(E),
        .D(rddata[7]),
        .Q(\Embedded_Trace.rddata_reg_n_0_[7] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.rddata_reg[8] 
       (.C(Clk),
        .CE(E),
        .D(rddata[8]),
        .Q(\Embedded_Trace.rddata_reg_n_0_[8] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.rddata_reg[9] 
       (.C(Clk),
        .CE(E),
        .D(rddata[9]),
        .Q(\Embedded_Trace.rddata_reg_n_0_[9] ),
        .R(sync_reset));
  (* SOFT_HLUTNM = "soft_lutpair123" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Embedded_Trace.trace_addr[0]_i_1 
       (.I0(wraddr[3]),
        .I1(p_30_in),
        .I2(\Embedded_Trace.rdaddr_reg [3]),
        .O(\Embedded_Trace.trace_addr[0]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Embedded_Trace.trace_addr[1]_i_1 
       (.I0(wraddr[4]),
        .I1(p_30_in),
        .I2(\Embedded_Trace.rdaddr_reg [4]),
        .O(\Embedded_Trace.trace_addr[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair125" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Embedded_Trace.trace_addr[2]_i_1 
       (.I0(wraddr[5]),
        .I1(p_30_in),
        .I2(\Embedded_Trace.rdaddr_reg [5]),
        .O(\Embedded_Trace.trace_addr[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair126" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Embedded_Trace.trace_addr[3]_i_1 
       (.I0(wraddr[6]),
        .I1(p_30_in),
        .I2(\Embedded_Trace.rdaddr_reg [6]),
        .O(\Embedded_Trace.trace_addr[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair127" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Embedded_Trace.trace_addr[4]_i_1 
       (.I0(wraddr[7]),
        .I1(p_30_in),
        .I2(\Embedded_Trace.rdaddr_reg [7]),
        .O(\Embedded_Trace.trace_addr[4]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair127" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Embedded_Trace.trace_addr[5]_i_1 
       (.I0(wraddr[8]),
        .I1(p_30_in),
        .I2(\Embedded_Trace.rdaddr_reg [8]),
        .O(\Embedded_Trace.trace_addr[5]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair126" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Embedded_Trace.trace_addr[6]_i_1 
       (.I0(wraddr[9]),
        .I1(p_30_in),
        .I2(\Embedded_Trace.rdaddr_reg [9]),
        .O(\Embedded_Trace.trace_addr[6]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair125" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Embedded_Trace.trace_addr[7]_i_1 
       (.I0(wraddr[10]),
        .I1(p_30_in),
        .I2(\Embedded_Trace.rdaddr_reg [10]),
        .O(\Embedded_Trace.trace_addr[7]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair123" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Embedded_Trace.trace_addr[8]_i_1 
       (.I0(wraddr[11]),
        .I1(p_30_in),
        .I2(\Embedded_Trace.rdaddr_reg [11]),
        .O(\Embedded_Trace.trace_addr[8]_i_1_n_0 ));
  FDRE \Embedded_Trace.trace_addr_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_addr[0]_i_1_n_0 ),
        .Q(ADDRB[9]),
        .R(1'b0));
  FDRE \Embedded_Trace.trace_addr_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_addr[1]_i_1_n_0 ),
        .Q(ADDRB[8]),
        .R(1'b0));
  FDRE \Embedded_Trace.trace_addr_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_addr[2]_i_1_n_0 ),
        .Q(ADDRB[7]),
        .R(1'b0));
  FDRE \Embedded_Trace.trace_addr_reg[3] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_addr[3]_i_1_n_0 ),
        .Q(ADDRB[6]),
        .R(1'b0));
  FDRE \Embedded_Trace.trace_addr_reg[4] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_addr[4]_i_1_n_0 ),
        .Q(ADDRB[5]),
        .R(1'b0));
  FDRE \Embedded_Trace.trace_addr_reg[5] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_addr[5]_i_1_n_0 ),
        .Q(ADDRB[4]),
        .R(1'b0));
  FDRE \Embedded_Trace.trace_addr_reg[6] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_addr[6]_i_1_n_0 ),
        .Q(ADDRB[3]),
        .R(1'b0));
  FDRE \Embedded_Trace.trace_addr_reg[7] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_addr[7]_i_1_n_0 ),
        .Q(ADDRB[2]),
        .R(1'b0));
  FDRE \Embedded_Trace.trace_addr_reg[8] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_addr[8]_i_1_n_0 ),
        .Q(ADDRB[1]),
        .R(1'b0));
  LUT5 #(
    .INIT(32'hFFFFBFFF)) 
    \Embedded_Trace.trace_count[0]_i_1 
       (.I0(data_read_reg_cs),
        .I1(\Embedded_Trace.trace_count_reg [4]),
        .I2(\Embedded_Trace.trace_count_reg [3]),
        .I3(\Embedded_Trace.trace_count_reg [5]),
        .I4(\Embedded_Trace.full_i_i_2_n_0 ),
        .O(\Embedded_Trace.trace_count[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h00005755FFFFA8AA)) 
    \Embedded_Trace.trace_count[0]_i_3 
       (.I0(writems[3]),
        .I1(\Serial_Dbg_Intf.control_reg_reg[16]_0 [1]),
        .I2(\Serial_Dbg_Intf.control_reg_reg[16]_0 [2]),
        .I3(\event_data_next_reg[12]_0 ),
        .I4(data_read_reg_cs),
        .I5(\Embedded_Trace.trace_count_reg [3]),
        .O(\Embedded_Trace.trace_count[0]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h00005755FFFFA8AA)) 
    \Embedded_Trace.trace_count[0]_i_4 
       (.I0(writems[2]),
        .I1(\Serial_Dbg_Intf.control_reg_reg[16]_0 [1]),
        .I2(\Serial_Dbg_Intf.control_reg_reg[16]_0 [2]),
        .I3(\event_data_next_reg[12]_0 ),
        .I4(data_read_reg_cs),
        .I5(\Embedded_Trace.trace_count_reg__0 [2]),
        .O(\Embedded_Trace.trace_count[0]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h00005755FFFFA8AA)) 
    \Embedded_Trace.trace_count[0]_i_5 
       (.I0(writems[1]),
        .I1(\Serial_Dbg_Intf.control_reg_reg[16]_0 [1]),
        .I2(\Serial_Dbg_Intf.control_reg_reg[16]_0 [2]),
        .I3(\event_data_next_reg[12]_0 ),
        .I4(data_read_reg_cs),
        .I5(\Embedded_Trace.trace_count_reg__0 [1]),
        .O(\Embedded_Trace.trace_count[0]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h00005755FFFFA8AA)) 
    \Embedded_Trace.trace_count[0]_i_6 
       (.I0(writems[0]),
        .I1(\Serial_Dbg_Intf.control_reg_reg[16]_0 [1]),
        .I2(\Serial_Dbg_Intf.control_reg_reg[16]_0 [2]),
        .I3(\event_data_next_reg[12]_0 ),
        .I4(data_read_reg_cs),
        .I5(\Embedded_Trace.trace_count_reg__0 [0]),
        .O(\Embedded_Trace.trace_count[0]_i_6_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \Embedded_Trace.trace_count[4]_i_2 
       (.I0(data_read_reg_cs),
        .I1(\Embedded_Trace.trace_count_reg__0 [7]),
        .O(\Embedded_Trace.trace_count[4]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \Embedded_Trace.trace_count[4]_i_3 
       (.I0(data_read_reg_cs),
        .I1(\Embedded_Trace.trace_count_reg__0 [6]),
        .O(\Embedded_Trace.trace_count[4]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \Embedded_Trace.trace_count[4]_i_4 
       (.I0(data_read_reg_cs),
        .I1(\Embedded_Trace.trace_count_reg [5]),
        .O(\Embedded_Trace.trace_count[4]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \Embedded_Trace.trace_count[4]_i_5 
       (.I0(data_read_reg_cs),
        .I1(\Embedded_Trace.trace_count_reg [4]),
        .O(\Embedded_Trace.trace_count[4]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \Embedded_Trace.trace_count[8]_i_2 
       (.I0(data_read_reg_cs),
        .I1(\Embedded_Trace.trace_count_reg__0 [11]),
        .O(\Embedded_Trace.trace_count[8]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \Embedded_Trace.trace_count[8]_i_3 
       (.I0(data_read_reg_cs),
        .I1(\Embedded_Trace.trace_count_reg__0 [10]),
        .O(\Embedded_Trace.trace_count[8]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \Embedded_Trace.trace_count[8]_i_4 
       (.I0(data_read_reg_cs),
        .I1(\Embedded_Trace.trace_count_reg__0 [9]),
        .O(\Embedded_Trace.trace_count[8]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \Embedded_Trace.trace_count[8]_i_5 
       (.I0(data_read_reg_cs),
        .I1(\Embedded_Trace.trace_count_reg__0 [8]),
        .O(\Embedded_Trace.trace_count[8]_i_5_n_0 ));
  FDRE \Embedded_Trace.trace_count_reg[0] 
       (.C(Clk),
        .CE(\Embedded_Trace.trace_count[0]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_count_reg[0]_i_2_n_7 ),
        .Q(\Embedded_Trace.trace_count_reg__0 [0]),
        .R(trace_count));
  CARRY4 \Embedded_Trace.trace_count_reg[0]_i_2 
       (.CI(1'b0),
        .CO({\Embedded_Trace.trace_count_reg[0]_i_2_n_0 ,\Embedded_Trace.trace_count_reg[0]_i_2_n_1 ,\Embedded_Trace.trace_count_reg[0]_i_2_n_2 ,\Embedded_Trace.trace_count_reg[0]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({\Embedded_Trace.trace_count_reg [3],\Embedded_Trace.trace_count_reg__0 [2:0]}),
        .O({\Embedded_Trace.trace_count_reg[0]_i_2_n_4 ,\Embedded_Trace.trace_count_reg[0]_i_2_n_5 ,\Embedded_Trace.trace_count_reg[0]_i_2_n_6 ,\Embedded_Trace.trace_count_reg[0]_i_2_n_7 }),
        .S({\Embedded_Trace.trace_count[0]_i_3_n_0 ,\Embedded_Trace.trace_count[0]_i_4_n_0 ,\Embedded_Trace.trace_count[0]_i_5_n_0 ,\Embedded_Trace.trace_count[0]_i_6_n_0 }));
  FDRE \Embedded_Trace.trace_count_reg[10] 
       (.C(Clk),
        .CE(\Embedded_Trace.trace_count[0]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_count_reg[8]_i_1_n_5 ),
        .Q(\Embedded_Trace.trace_count_reg__0 [10]),
        .R(trace_count));
  FDRE \Embedded_Trace.trace_count_reg[11] 
       (.C(Clk),
        .CE(\Embedded_Trace.trace_count[0]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_count_reg[8]_i_1_n_4 ),
        .Q(\Embedded_Trace.trace_count_reg__0 [11]),
        .R(trace_count));
  FDRE \Embedded_Trace.trace_count_reg[1] 
       (.C(Clk),
        .CE(\Embedded_Trace.trace_count[0]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_count_reg[0]_i_2_n_6 ),
        .Q(\Embedded_Trace.trace_count_reg__0 [1]),
        .R(trace_count));
  FDRE \Embedded_Trace.trace_count_reg[2] 
       (.C(Clk),
        .CE(\Embedded_Trace.trace_count[0]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_count_reg[0]_i_2_n_5 ),
        .Q(\Embedded_Trace.trace_count_reg__0 [2]),
        .R(trace_count));
  FDRE \Embedded_Trace.trace_count_reg[3] 
       (.C(Clk),
        .CE(\Embedded_Trace.trace_count[0]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_count_reg[0]_i_2_n_4 ),
        .Q(\Embedded_Trace.trace_count_reg [3]),
        .R(trace_count));
  FDRE \Embedded_Trace.trace_count_reg[4] 
       (.C(Clk),
        .CE(\Embedded_Trace.trace_count[0]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_count_reg[4]_i_1_n_7 ),
        .Q(\Embedded_Trace.trace_count_reg [4]),
        .R(trace_count));
  CARRY4 \Embedded_Trace.trace_count_reg[4]_i_1 
       (.CI(\Embedded_Trace.trace_count_reg[0]_i_2_n_0 ),
        .CO({\Embedded_Trace.trace_count_reg[4]_i_1_n_0 ,\Embedded_Trace.trace_count_reg[4]_i_1_n_1 ,\Embedded_Trace.trace_count_reg[4]_i_1_n_2 ,\Embedded_Trace.trace_count_reg[4]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({data_read_reg_cs,data_read_reg_cs,data_read_reg_cs,data_read_reg_cs}),
        .O({\Embedded_Trace.trace_count_reg[4]_i_1_n_4 ,\Embedded_Trace.trace_count_reg[4]_i_1_n_5 ,\Embedded_Trace.trace_count_reg[4]_i_1_n_6 ,\Embedded_Trace.trace_count_reg[4]_i_1_n_7 }),
        .S({\Embedded_Trace.trace_count[4]_i_2_n_0 ,\Embedded_Trace.trace_count[4]_i_3_n_0 ,\Embedded_Trace.trace_count[4]_i_4_n_0 ,\Embedded_Trace.trace_count[4]_i_5_n_0 }));
  FDRE \Embedded_Trace.trace_count_reg[5] 
       (.C(Clk),
        .CE(\Embedded_Trace.trace_count[0]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_count_reg[4]_i_1_n_6 ),
        .Q(\Embedded_Trace.trace_count_reg [5]),
        .R(trace_count));
  FDRE \Embedded_Trace.trace_count_reg[6] 
       (.C(Clk),
        .CE(\Embedded_Trace.trace_count[0]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_count_reg[4]_i_1_n_5 ),
        .Q(\Embedded_Trace.trace_count_reg__0 [6]),
        .R(trace_count));
  FDRE \Embedded_Trace.trace_count_reg[7] 
       (.C(Clk),
        .CE(\Embedded_Trace.trace_count[0]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_count_reg[4]_i_1_n_4 ),
        .Q(\Embedded_Trace.trace_count_reg__0 [7]),
        .R(trace_count));
  FDRE \Embedded_Trace.trace_count_reg[8] 
       (.C(Clk),
        .CE(\Embedded_Trace.trace_count[0]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_count_reg[8]_i_1_n_7 ),
        .Q(\Embedded_Trace.trace_count_reg__0 [8]),
        .R(trace_count));
  CARRY4 \Embedded_Trace.trace_count_reg[8]_i_1 
       (.CI(\Embedded_Trace.trace_count_reg[4]_i_1_n_0 ),
        .CO({\NLW_Embedded_Trace.trace_count_reg[8]_i_1_CO_UNCONNECTED [3],\Embedded_Trace.trace_count_reg[8]_i_1_n_1 ,\Embedded_Trace.trace_count_reg[8]_i_1_n_2 ,\Embedded_Trace.trace_count_reg[8]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,data_read_reg_cs,data_read_reg_cs,data_read_reg_cs}),
        .O({\Embedded_Trace.trace_count_reg[8]_i_1_n_4 ,\Embedded_Trace.trace_count_reg[8]_i_1_n_5 ,\Embedded_Trace.trace_count_reg[8]_i_1_n_6 ,\Embedded_Trace.trace_count_reg[8]_i_1_n_7 }),
        .S({\Embedded_Trace.trace_count[8]_i_2_n_0 ,\Embedded_Trace.trace_count[8]_i_3_n_0 ,\Embedded_Trace.trace_count[8]_i_4_n_0 ,\Embedded_Trace.trace_count[8]_i_5_n_0 }));
  FDRE \Embedded_Trace.trace_count_reg[9] 
       (.C(Clk),
        .CE(\Embedded_Trace.trace_count[0]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_count_reg[8]_i_1_n_6 ),
        .Q(\Embedded_Trace.trace_count_reg__0 [9]),
        .R(trace_count));
  LUT6 #(
    .INIT(64'h33CC33CC30BB3088)) 
    \Embedded_Trace.trace_din_all[0]_i_1 
       (.I0(cycle_count_reg[1]),
        .I1(\save_sel_reg[0]_22 [0]),
        .I2(branch_event),
        .I3(\save_sel_reg[0]_22 [1]),
        .I4(\Embedded_Trace.trace_din_all_reg_n_0_[144] ),
        .I5(\save_sel_reg[0]_22 [2]),
        .O(\Embedded_Trace.trace_din_all[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8888888B888)) 
    \Embedded_Trace.trace_din_all[100]_i_2 
       (.I0(\Embedded_Trace.trace_din_all[100]_i_4_n_0 ),
        .I1(\save_sel_reg[5]_17 [1]),
        .I2(\save_sel_reg[5]_17 [0]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [159]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [2]),
        .I5(\Embedded_Trace.trace_din_all_reg[80]_0 [50]),
        .O(\Embedded_Trace.trace_din_all[100]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[100]_i_3 
       (.I0(\branch_data_first_reg_n_0_[8] ),
        .I1(\saved_load_get_reg_n_0_[24] ),
        .I2(\save_sel_reg[5]_17 [1]),
        .I3(\saved_load_get_reg_n_0_[8] ),
        .I4(\save_sel_reg[5]_17 [0]),
        .I5(\saved_pc_reg_n_0_[24] ),
        .O(\Embedded_Trace.trace_din_all[100]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair109" *) 
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Embedded_Trace.trace_din_all[100]_i_4 
       (.I0(\saved_pc_reg_n_0_[8] ),
        .I1(\save_sel_reg[5]_17 [0]),
        .I2(event_data[8]),
        .I3(branch_event),
        .I4(p_0_in__0[0]),
        .O(\Embedded_Trace.trace_din_all[100]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8888888B888)) 
    \Embedded_Trace.trace_din_all[101]_i_2 
       (.I0(\Embedded_Trace.trace_din_all[101]_i_4_n_0 ),
        .I1(\save_sel_reg[5]_17 [1]),
        .I2(\save_sel_reg[5]_17 [0]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [158]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [2]),
        .I5(\Embedded_Trace.trace_din_all_reg[80]_0 [49]),
        .O(\Embedded_Trace.trace_din_all[101]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h30BB3088)) 
    \Embedded_Trace.trace_din_all[101]_i_3 
       (.I0(\saved_load_get_reg_n_0_[25] ),
        .I1(\save_sel_reg[5]_17 [1]),
        .I2(\saved_load_get_reg_n_0_[9] ),
        .I3(\save_sel_reg[5]_17 [0]),
        .I4(\saved_pc_reg_n_0_[25] ),
        .O(\Embedded_Trace.trace_din_all[101]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Embedded_Trace.trace_din_all[101]_i_4 
       (.I0(\saved_pc_reg_n_0_[9] ),
        .I1(\save_sel_reg[5]_17 [0]),
        .I2(event_data[9]),
        .I3(branch_event),
        .I4(\branch_data_reg_n_0_[9] ),
        .O(\Embedded_Trace.trace_din_all[101]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8888888B888)) 
    \Embedded_Trace.trace_din_all[102]_i_2 
       (.I0(\Embedded_Trace.trace_din_all[102]_i_4_n_0 ),
        .I1(\save_sel_reg[5]_17 [1]),
        .I2(\save_sel_reg[5]_17 [0]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [157]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [2]),
        .I5(\Embedded_Trace.trace_din_all_reg[80]_0 [48]),
        .O(\Embedded_Trace.trace_din_all[102]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h30BB3088)) 
    \Embedded_Trace.trace_din_all[102]_i_3 
       (.I0(\saved_load_get_reg_n_0_[26] ),
        .I1(\save_sel_reg[5]_17 [1]),
        .I2(\saved_load_get_reg_n_0_[10] ),
        .I3(\save_sel_reg[5]_17 [0]),
        .I4(\saved_pc_reg_n_0_[26] ),
        .O(\Embedded_Trace.trace_din_all[102]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair110" *) 
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Embedded_Trace.trace_din_all[102]_i_4 
       (.I0(\saved_pc_reg_n_0_[10] ),
        .I1(\save_sel_reg[5]_17 [0]),
        .I2(event_data[10]),
        .I3(branch_event),
        .I4(\branch_data_reg_n_0_[10] ),
        .O(\Embedded_Trace.trace_din_all[102]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8888888B888)) 
    \Embedded_Trace.trace_din_all[103]_i_2 
       (.I0(\Embedded_Trace.trace_din_all[103]_i_4_n_0 ),
        .I1(\save_sel_reg[5]_17 [1]),
        .I2(\save_sel_reg[5]_17 [0]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [156]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [2]),
        .I5(\Embedded_Trace.trace_din_all_reg[80]_0 [47]),
        .O(\Embedded_Trace.trace_din_all[103]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h30BB3088)) 
    \Embedded_Trace.trace_din_all[103]_i_3 
       (.I0(\saved_load_get_reg_n_0_[27] ),
        .I1(\save_sel_reg[5]_17 [1]),
        .I2(\saved_load_get_reg_n_0_[11] ),
        .I3(\save_sel_reg[5]_17 [0]),
        .I4(\saved_pc_reg_n_0_[27] ),
        .O(\Embedded_Trace.trace_din_all[103]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Embedded_Trace.trace_din_all[103]_i_4 
       (.I0(\saved_pc_reg_n_0_[11] ),
        .I1(\save_sel_reg[5]_17 [0]),
        .I2(event_data[11]),
        .I3(branch_event),
        .I4(\branch_data_reg_n_0_[11] ),
        .O(\Embedded_Trace.trace_din_all[103]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8888888B888)) 
    \Embedded_Trace.trace_din_all[104]_i_2 
       (.I0(\Embedded_Trace.trace_din_all[104]_i_4_n_0 ),
        .I1(\save_sel_reg[5]_17 [1]),
        .I2(\save_sel_reg[5]_17 [0]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [155]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [2]),
        .I5(\Embedded_Trace.trace_din_all_reg[80]_0 [46]),
        .O(\Embedded_Trace.trace_din_all[104]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h30BB3088)) 
    \Embedded_Trace.trace_din_all[104]_i_3 
       (.I0(\saved_load_get_reg_n_0_[28] ),
        .I1(\save_sel_reg[5]_17 [1]),
        .I2(\saved_load_get_reg_n_0_[12] ),
        .I3(\save_sel_reg[5]_17 [0]),
        .I4(\saved_pc_reg_n_0_[28] ),
        .O(\Embedded_Trace.trace_din_all[104]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair99" *) 
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Embedded_Trace.trace_din_all[104]_i_4 
       (.I0(\saved_pc_reg_n_0_[12] ),
        .I1(\save_sel_reg[5]_17 [0]),
        .I2(event_data[12]),
        .I3(branch_event),
        .I4(\branch_data_reg_n_0_[12] ),
        .O(\Embedded_Trace.trace_din_all[104]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8888888B888)) 
    \Embedded_Trace.trace_din_all[105]_i_2 
       (.I0(\Embedded_Trace.trace_din_all[105]_i_4_n_0 ),
        .I1(\save_sel_reg[5]_17 [1]),
        .I2(\save_sel_reg[5]_17 [0]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [154]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [2]),
        .I5(\Embedded_Trace.trace_din_all_reg[80]_0 [45]),
        .O(\Embedded_Trace.trace_din_all[105]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h30BB3088)) 
    \Embedded_Trace.trace_din_all[105]_i_3 
       (.I0(\saved_load_get_reg_n_0_[29] ),
        .I1(\save_sel_reg[5]_17 [1]),
        .I2(\saved_load_get_reg_n_0_[13] ),
        .I3(\save_sel_reg[5]_17 [0]),
        .I4(\saved_pc_reg_n_0_[29] ),
        .O(\Embedded_Trace.trace_din_all[105]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Embedded_Trace.trace_din_all[105]_i_4 
       (.I0(\saved_pc_reg_n_0_[13] ),
        .I1(\save_sel_reg[5]_17 [0]),
        .I2(event_data[13]),
        .I3(branch_event),
        .I4(\branch_data_reg_n_0_[13] ),
        .O(\Embedded_Trace.trace_din_all[105]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8888888B888)) 
    \Embedded_Trace.trace_din_all[106]_i_2 
       (.I0(\Embedded_Trace.trace_din_all[106]_i_4_n_0 ),
        .I1(\save_sel_reg[5]_17 [1]),
        .I2(\save_sel_reg[5]_17 [0]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [153]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [2]),
        .I5(\Embedded_Trace.trace_din_all_reg[80]_0 [44]),
        .O(\Embedded_Trace.trace_din_all[106]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h30BB3088)) 
    \Embedded_Trace.trace_din_all[106]_i_3 
       (.I0(data6),
        .I1(\save_sel_reg[5]_17 [1]),
        .I2(\saved_load_get_reg_n_0_[14] ),
        .I3(\save_sel_reg[5]_17 [0]),
        .I4(data4),
        .O(\Embedded_Trace.trace_din_all[106]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair111" *) 
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Embedded_Trace.trace_din_all[106]_i_4 
       (.I0(\saved_pc_reg_n_0_[14] ),
        .I1(\save_sel_reg[5]_17 [0]),
        .I2(event_data[14]),
        .I3(branch_event),
        .I4(\branch_data_reg_n_0_[14] ),
        .O(\Embedded_Trace.trace_din_all[106]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8888888B888)) 
    \Embedded_Trace.trace_din_all[107]_i_2 
       (.I0(\Embedded_Trace.trace_din_all[107]_i_4_n_0 ),
        .I1(\save_sel_reg[5]_17 [1]),
        .I2(\save_sel_reg[5]_17 [0]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [152]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [2]),
        .I5(\Embedded_Trace.trace_din_all_reg[80]_0 [43]),
        .O(\Embedded_Trace.trace_din_all[107]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h30BB3088)) 
    \Embedded_Trace.trace_din_all[107]_i_3 
       (.I0(\saved_load_get_reg_n_0_[31] ),
        .I1(\save_sel_reg[5]_17 [1]),
        .I2(data5),
        .I3(\save_sel_reg[5]_17 [0]),
        .I4(\saved_pc_reg_n_0_[31] ),
        .O(\Embedded_Trace.trace_din_all[107]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair112" *) 
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Embedded_Trace.trace_din_all[107]_i_4 
       (.I0(data3),
        .I1(\save_sel_reg[5]_17 [0]),
        .I2(event_data[15]),
        .I3(branch_event),
        .I4(\branch_data_reg_n_0_[15] ),
        .O(\Embedded_Trace.trace_din_all[107]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF4440)) 
    \Embedded_Trace.trace_din_all[108]_i_1 
       (.I0(\save_sel_reg[6]_16 [0]),
        .I1(\save_sel_reg[6]_16 [1]),
        .I2(\save_sel_reg[6]_16 [2]),
        .I3(branch_event),
        .I4(\Embedded_Trace.trace_din_all[108]_i_2_n_0 ),
        .O(\Embedded_Trace.trace_din_all[108]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h4444444440444000)) 
    \Embedded_Trace.trace_din_all[108]_i_2 
       (.I0(\save_sel_reg[6]_16 [1]),
        .I1(\save_sel_reg[6]_16 [0]),
        .I2(\Embedded_Trace.trace_din_all_reg[80]_0 [42]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [2]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [151]),
        .I5(\save_sel_reg[6]_16 [2]),
        .O(\Embedded_Trace.trace_din_all[108]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h1F10)) 
    \Embedded_Trace.trace_din_all[109]_i_1 
       (.I0(\save_sel_reg[6]_16 [1]),
        .I1(\save_sel_reg[6]_16 [0]),
        .I2(\save_sel_reg[6]_16 [2]),
        .I3(\Embedded_Trace.trace_din_all[109]_i_2_n_0 ),
        .O(\Embedded_Trace.trace_din_all[109]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFF00B800B800)) 
    \Embedded_Trace.trace_din_all[109]_i_2 
       (.I0(\Embedded_Trace.trace_din_all_reg[80]_0 [41]),
        .I1(\Embedded_Trace.trace_din_all_reg[80]_0 [2]),
        .I2(\Embedded_Trace.trace_din_all_reg[80]_0 [150]),
        .I3(\save_sel_reg[6]_16 [0]),
        .I4(branch_event),
        .I5(\save_sel_reg[6]_16 [1]),
        .O(\Embedded_Trace.trace_din_all[109]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[10]_i_2 
       (.I0(\saved_pc_reg_n_0_[8] ),
        .I1(\Embedded_Trace.trace_din_all[154]_i_3_n_0 ),
        .I2(\save_sel_reg[0]_22 [1]),
        .I3(cycle_count_reg[11]),
        .I4(\save_sel_reg[0]_22 [0]),
        .I5(\Embedded_Trace.trace_din_all_reg_n_0_[154] ),
        .O(\Embedded_Trace.trace_din_all[10]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[10]_i_3 
       (.I0(\branch_data_first_reg_n_0_[8] ),
        .I1(\saved_load_get_reg_n_0_[24] ),
        .I2(\save_sel_reg[0]_22 [1]),
        .I3(\saved_load_get_reg_n_0_[8] ),
        .I4(\save_sel_reg[0]_22 [0]),
        .I5(\saved_pc_reg_n_0_[24] ),
        .O(\Embedded_Trace.trace_din_all[10]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8888888B888)) 
    \Embedded_Trace.trace_din_all[110]_i_2 
       (.I0(\Embedded_Trace.trace_din_all[110]_i_4_n_0 ),
        .I1(\save_sel_reg[6]_16 [1]),
        .I2(\save_sel_reg[6]_16 [0]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [149]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [2]),
        .I5(\Embedded_Trace.trace_din_all_reg[80]_0 [40]),
        .O(\Embedded_Trace.trace_din_all[110]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[110]_i_3 
       (.I0(\branch_data_first_reg_n_0_[0] ),
        .I1(\saved_load_get_reg_n_0_[16] ),
        .I2(\save_sel_reg[6]_16 [1]),
        .I3(\saved_load_get_reg_n_0_[0] ),
        .I4(\save_sel_reg[6]_16 [0]),
        .I5(\saved_pc_reg_n_0_[16] ),
        .O(\Embedded_Trace.trace_din_all[110]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair101" *) 
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Embedded_Trace.trace_din_all[110]_i_4 
       (.I0(\saved_pc_reg_n_0_[0] ),
        .I1(\save_sel_reg[6]_16 [0]),
        .I2(event_data[0]),
        .I3(branch_event),
        .I4(p_0_in__0[8]),
        .O(\Embedded_Trace.trace_din_all[110]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8888888B888)) 
    \Embedded_Trace.trace_din_all[111]_i_2 
       (.I0(\Embedded_Trace.trace_din_all[111]_i_4_n_0 ),
        .I1(\save_sel_reg[6]_16 [1]),
        .I2(\save_sel_reg[6]_16 [0]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [148]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [2]),
        .I5(\Embedded_Trace.trace_din_all_reg[80]_0 [39]),
        .O(\Embedded_Trace.trace_din_all[111]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[111]_i_3 
       (.I0(\branch_data_first_reg_n_0_[1] ),
        .I1(\saved_load_get_reg_n_0_[17] ),
        .I2(\save_sel_reg[6]_16 [1]),
        .I3(\saved_load_get_reg_n_0_[1] ),
        .I4(\save_sel_reg[6]_16 [0]),
        .I5(\saved_pc_reg_n_0_[17] ),
        .O(\Embedded_Trace.trace_din_all[111]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair102" *) 
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Embedded_Trace.trace_din_all[111]_i_4 
       (.I0(\saved_pc_reg_n_0_[1] ),
        .I1(\save_sel_reg[6]_16 [0]),
        .I2(event_data[1]),
        .I3(branch_event),
        .I4(p_0_in__0[7]),
        .O(\Embedded_Trace.trace_din_all[111]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'hAFC0A0C0)) 
    \Embedded_Trace.trace_din_all[112]_i_2 
       (.I0(\saved_pc_reg_n_0_[2] ),
        .I1(\Embedded_Trace.trace_din_all[148]_i_3_n_0 ),
        .I2(\save_sel_reg[6]_16 [1]),
        .I3(\save_sel_reg[6]_16 [0]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [146]),
        .O(\Embedded_Trace.trace_din_all[112]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[112]_i_3 
       (.I0(\branch_data_first_reg_n_0_[2] ),
        .I1(\saved_load_get_reg_n_0_[18] ),
        .I2(\save_sel_reg[6]_16 [1]),
        .I3(\saved_load_get_reg_n_0_[2] ),
        .I4(\save_sel_reg[6]_16 [0]),
        .I5(\saved_pc_reg_n_0_[18] ),
        .O(\Embedded_Trace.trace_din_all[112]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hAFC0A0C0)) 
    \Embedded_Trace.trace_din_all[113]_i_2 
       (.I0(\saved_pc_reg_n_0_[3] ),
        .I1(\Embedded_Trace.trace_din_all[149]_i_3_n_0 ),
        .I2(\save_sel_reg[6]_16 [1]),
        .I3(\save_sel_reg[6]_16 [0]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [145]),
        .O(\Embedded_Trace.trace_din_all[113]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[113]_i_3 
       (.I0(\branch_data_first_reg_n_0_[3] ),
        .I1(\saved_load_get_reg_n_0_[19] ),
        .I2(\save_sel_reg[6]_16 [1]),
        .I3(\saved_load_get_reg_n_0_[3] ),
        .I4(\save_sel_reg[6]_16 [0]),
        .I5(\saved_pc_reg_n_0_[19] ),
        .O(\Embedded_Trace.trace_din_all[113]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hAFC0A0C0)) 
    \Embedded_Trace.trace_din_all[114]_i_2 
       (.I0(\saved_pc_reg_n_0_[4] ),
        .I1(\Embedded_Trace.trace_din_all[150]_i_3_n_0 ),
        .I2(\save_sel_reg[6]_16 [1]),
        .I3(\save_sel_reg[6]_16 [0]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [144]),
        .O(\Embedded_Trace.trace_din_all[114]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[114]_i_3 
       (.I0(\branch_data_first_reg_n_0_[4] ),
        .I1(\saved_load_get_reg_n_0_[20] ),
        .I2(\save_sel_reg[6]_16 [1]),
        .I3(\saved_load_get_reg_n_0_[4] ),
        .I4(\save_sel_reg[6]_16 [0]),
        .I5(\saved_pc_reg_n_0_[20] ),
        .O(\Embedded_Trace.trace_din_all[114]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hAFC0A0C0)) 
    \Embedded_Trace.trace_din_all[115]_i_2 
       (.I0(\saved_pc_reg_n_0_[5] ),
        .I1(\Embedded_Trace.trace_din_all[151]_i_3_n_0 ),
        .I2(\save_sel_reg[6]_16 [1]),
        .I3(\save_sel_reg[6]_16 [0]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [143]),
        .O(\Embedded_Trace.trace_din_all[115]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[115]_i_3 
       (.I0(\branch_data_first_reg_n_0_[5] ),
        .I1(\saved_load_get_reg_n_0_[21] ),
        .I2(\save_sel_reg[6]_16 [1]),
        .I3(\saved_load_get_reg_n_0_[5] ),
        .I4(\save_sel_reg[6]_16 [0]),
        .I5(\saved_pc_reg_n_0_[21] ),
        .O(\Embedded_Trace.trace_din_all[115]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hAFC0A0C0)) 
    \Embedded_Trace.trace_din_all[116]_i_2 
       (.I0(\saved_pc_reg_n_0_[6] ),
        .I1(\Embedded_Trace.trace_din_all[152]_i_3_n_0 ),
        .I2(\save_sel_reg[6]_16 [1]),
        .I3(\save_sel_reg[6]_16 [0]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [142]),
        .O(\Embedded_Trace.trace_din_all[116]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[116]_i_3 
       (.I0(\branch_data_first_reg_n_0_[6] ),
        .I1(\saved_load_get_reg_n_0_[22] ),
        .I2(\save_sel_reg[6]_16 [1]),
        .I3(\saved_load_get_reg_n_0_[6] ),
        .I4(\save_sel_reg[6]_16 [0]),
        .I5(\saved_pc_reg_n_0_[22] ),
        .O(\Embedded_Trace.trace_din_all[116]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hAFC0A0C0)) 
    \Embedded_Trace.trace_din_all[117]_i_2 
       (.I0(\saved_pc_reg_n_0_[7] ),
        .I1(\Embedded_Trace.trace_din_all[153]_i_2_n_0 ),
        .I2(\save_sel_reg[6]_16 [1]),
        .I3(\save_sel_reg[6]_16 [0]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [141]),
        .O(\Embedded_Trace.trace_din_all[117]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[117]_i_3 
       (.I0(data7),
        .I1(\saved_load_get_reg_n_0_[23] ),
        .I2(\save_sel_reg[6]_16 [1]),
        .I3(\saved_load_get_reg_n_0_[7] ),
        .I4(\save_sel_reg[6]_16 [0]),
        .I5(\saved_pc_reg_n_0_[23] ),
        .O(\Embedded_Trace.trace_din_all[117]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hAFC0A0C0)) 
    \Embedded_Trace.trace_din_all[118]_i_2 
       (.I0(\saved_pc_reg_n_0_[8] ),
        .I1(\Embedded_Trace.trace_din_all[154]_i_3_n_0 ),
        .I2(\save_sel_reg[6]_16 [1]),
        .I3(\save_sel_reg[6]_16 [0]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [140]),
        .O(\Embedded_Trace.trace_din_all[118]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[118]_i_3 
       (.I0(\branch_data_first_reg_n_0_[8] ),
        .I1(\saved_load_get_reg_n_0_[24] ),
        .I2(\save_sel_reg[6]_16 [1]),
        .I3(\saved_load_get_reg_n_0_[8] ),
        .I4(\save_sel_reg[6]_16 [0]),
        .I5(\saved_pc_reg_n_0_[24] ),
        .O(\Embedded_Trace.trace_din_all[118]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hAFC0A0C0)) 
    \Embedded_Trace.trace_din_all[119]_i_2 
       (.I0(\saved_pc_reg_n_0_[9] ),
        .I1(\Embedded_Trace.trace_din_all[155]_i_3_n_0 ),
        .I2(\save_sel_reg[6]_16 [1]),
        .I3(\save_sel_reg[6]_16 [0]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [139]),
        .O(\Embedded_Trace.trace_din_all[119]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h30BB3088)) 
    \Embedded_Trace.trace_din_all[119]_i_3 
       (.I0(\saved_load_get_reg_n_0_[25] ),
        .I1(\save_sel_reg[6]_16 [1]),
        .I2(\saved_load_get_reg_n_0_[9] ),
        .I3(\save_sel_reg[6]_16 [0]),
        .I4(\saved_pc_reg_n_0_[25] ),
        .O(\Embedded_Trace.trace_din_all[119]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[11]_i_2 
       (.I0(\saved_pc_reg_n_0_[9] ),
        .I1(\Embedded_Trace.trace_din_all[155]_i_3_n_0 ),
        .I2(\save_sel_reg[0]_22 [1]),
        .I3(cycle_count_reg[12]),
        .I4(\save_sel_reg[0]_22 [0]),
        .I5(\Embedded_Trace.trace_din_all_reg_n_0_[155] ),
        .O(\Embedded_Trace.trace_din_all[11]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h30BB3088)) 
    \Embedded_Trace.trace_din_all[11]_i_3 
       (.I0(\saved_load_get_reg_n_0_[25] ),
        .I1(\save_sel_reg[0]_22 [1]),
        .I2(\saved_load_get_reg_n_0_[9] ),
        .I3(\save_sel_reg[0]_22 [0]),
        .I4(\saved_pc_reg_n_0_[25] ),
        .O(\Embedded_Trace.trace_din_all[11]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hAFC0A0C0)) 
    \Embedded_Trace.trace_din_all[120]_i_2 
       (.I0(\saved_pc_reg_n_0_[10] ),
        .I1(\Embedded_Trace.trace_din_all[156]_i_3_n_0 ),
        .I2(\save_sel_reg[6]_16 [1]),
        .I3(\save_sel_reg[6]_16 [0]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [138]),
        .O(\Embedded_Trace.trace_din_all[120]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h30BB3088)) 
    \Embedded_Trace.trace_din_all[120]_i_3 
       (.I0(\saved_load_get_reg_n_0_[26] ),
        .I1(\save_sel_reg[6]_16 [1]),
        .I2(\saved_load_get_reg_n_0_[10] ),
        .I3(\save_sel_reg[6]_16 [0]),
        .I4(\saved_pc_reg_n_0_[26] ),
        .O(\Embedded_Trace.trace_din_all[120]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hAFC0A0C0)) 
    \Embedded_Trace.trace_din_all[121]_i_2 
       (.I0(\saved_pc_reg_n_0_[11] ),
        .I1(\Embedded_Trace.trace_din_all[157]_i_3_n_0 ),
        .I2(\save_sel_reg[6]_16 [1]),
        .I3(\save_sel_reg[6]_16 [0]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [137]),
        .O(\Embedded_Trace.trace_din_all[121]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h30BB3088)) 
    \Embedded_Trace.trace_din_all[121]_i_3 
       (.I0(\saved_load_get_reg_n_0_[27] ),
        .I1(\save_sel_reg[6]_16 [1]),
        .I2(\saved_load_get_reg_n_0_[11] ),
        .I3(\save_sel_reg[6]_16 [0]),
        .I4(\saved_pc_reg_n_0_[27] ),
        .O(\Embedded_Trace.trace_din_all[121]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hAFC0A0C0)) 
    \Embedded_Trace.trace_din_all[122]_i_2 
       (.I0(\saved_pc_reg_n_0_[12] ),
        .I1(\Embedded_Trace.trace_din_all[158]_i_3_n_0 ),
        .I2(\save_sel_reg[6]_16 [1]),
        .I3(\save_sel_reg[6]_16 [0]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [136]),
        .O(\Embedded_Trace.trace_din_all[122]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h30BB3088)) 
    \Embedded_Trace.trace_din_all[122]_i_3 
       (.I0(\saved_load_get_reg_n_0_[28] ),
        .I1(\save_sel_reg[6]_16 [1]),
        .I2(\saved_load_get_reg_n_0_[12] ),
        .I3(\save_sel_reg[6]_16 [0]),
        .I4(\saved_pc_reg_n_0_[28] ),
        .O(\Embedded_Trace.trace_din_all[122]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hAFC0A0C0)) 
    \Embedded_Trace.trace_din_all[123]_i_2 
       (.I0(\saved_pc_reg_n_0_[13] ),
        .I1(\Embedded_Trace.trace_din_all[159]_i_2_n_0 ),
        .I2(\save_sel_reg[6]_16 [1]),
        .I3(\save_sel_reg[6]_16 [0]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [135]),
        .O(\Embedded_Trace.trace_din_all[123]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h30BB3088)) 
    \Embedded_Trace.trace_din_all[123]_i_3 
       (.I0(\saved_load_get_reg_n_0_[29] ),
        .I1(\save_sel_reg[6]_16 [1]),
        .I2(\saved_load_get_reg_n_0_[13] ),
        .I3(\save_sel_reg[6]_16 [0]),
        .I4(\saved_pc_reg_n_0_[29] ),
        .O(\Embedded_Trace.trace_din_all[123]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hAFC0A0C0)) 
    \Embedded_Trace.trace_din_all[124]_i_2 
       (.I0(\saved_pc_reg_n_0_[14] ),
        .I1(\Embedded_Trace.trace_din_all[160]_i_3_n_0 ),
        .I2(\save_sel_reg[6]_16 [1]),
        .I3(\save_sel_reg[6]_16 [0]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [134]),
        .O(\Embedded_Trace.trace_din_all[124]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h30BB3088)) 
    \Embedded_Trace.trace_din_all[124]_i_3 
       (.I0(data6),
        .I1(\save_sel_reg[6]_16 [1]),
        .I2(\saved_load_get_reg_n_0_[14] ),
        .I3(\save_sel_reg[6]_16 [0]),
        .I4(data4),
        .O(\Embedded_Trace.trace_din_all[124]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hAFC0A0C0)) 
    \Embedded_Trace.trace_din_all[125]_i_2 
       (.I0(data3),
        .I1(\Embedded_Trace.trace_din_all[161]_i_2_n_0 ),
        .I2(\save_sel_reg[6]_16 [1]),
        .I3(\save_sel_reg[6]_16 [0]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [133]),
        .O(\Embedded_Trace.trace_din_all[125]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h30BB3088)) 
    \Embedded_Trace.trace_din_all[125]_i_3 
       (.I0(\saved_load_get_reg_n_0_[31] ),
        .I1(\save_sel_reg[6]_16 [1]),
        .I2(data5),
        .I3(\save_sel_reg[6]_16 [0]),
        .I4(\saved_pc_reg_n_0_[31] ),
        .O(\Embedded_Trace.trace_din_all[125]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h3C3C3808)) 
    \Embedded_Trace.trace_din_all[126]_i_1 
       (.I0(\Embedded_Trace.trace_din_all_reg[80]_0 [132]),
        .I1(\save_sel_reg[7]_15 [0]),
        .I2(\save_sel_reg[7]_15 [1]),
        .I3(branch_event),
        .I4(\save_sel_reg[7]_15 [2]),
        .O(\Embedded_Trace.trace_din_all[126]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h54545A0A)) 
    \Embedded_Trace.trace_din_all[127]_i_1 
       (.I0(\save_sel_reg[7]_15 [2]),
        .I1(branch_event),
        .I2(\save_sel_reg[7]_15 [0]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [131]),
        .I4(\save_sel_reg[7]_15 [1]),
        .O(\Embedded_Trace.trace_din_all[127]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hAFC0A0C0)) 
    \Embedded_Trace.trace_din_all[128]_i_2 
       (.I0(\saved_pc_reg_n_0_[0] ),
        .I1(\Embedded_Trace.trace_din_all[146]_i_3_n_0 ),
        .I2(\save_sel_reg[7]_15 [1]),
        .I3(\save_sel_reg[7]_15 [0]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [130]),
        .O(\Embedded_Trace.trace_din_all[128]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[128]_i_3 
       (.I0(\branch_data_first_reg_n_0_[0] ),
        .I1(\saved_load_get_reg_n_0_[16] ),
        .I2(\save_sel_reg[7]_15 [1]),
        .I3(\saved_load_get_reg_n_0_[0] ),
        .I4(\save_sel_reg[7]_15 [0]),
        .I5(\saved_pc_reg_n_0_[16] ),
        .O(\Embedded_Trace.trace_din_all[128]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hAFC0A0C0)) 
    \Embedded_Trace.trace_din_all[129]_i_2 
       (.I0(\saved_pc_reg_n_0_[1] ),
        .I1(\Embedded_Trace.trace_din_all[147]_i_3_n_0 ),
        .I2(\save_sel_reg[7]_15 [1]),
        .I3(\save_sel_reg[7]_15 [0]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [129]),
        .O(\Embedded_Trace.trace_din_all[129]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[129]_i_3 
       (.I0(\branch_data_first_reg_n_0_[1] ),
        .I1(\saved_load_get_reg_n_0_[17] ),
        .I2(\save_sel_reg[7]_15 [1]),
        .I3(\saved_load_get_reg_n_0_[1] ),
        .I4(\save_sel_reg[7]_15 [0]),
        .I5(\saved_pc_reg_n_0_[17] ),
        .O(\Embedded_Trace.trace_din_all[129]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[12]_i_2 
       (.I0(\saved_pc_reg_n_0_[10] ),
        .I1(\Embedded_Trace.trace_din_all[156]_i_3_n_0 ),
        .I2(\save_sel_reg[0]_22 [1]),
        .I3(cycle_count_reg[13]),
        .I4(\save_sel_reg[0]_22 [0]),
        .I5(\Embedded_Trace.trace_din_all_reg_n_0_[156] ),
        .O(\Embedded_Trace.trace_din_all[12]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h30BB3088)) 
    \Embedded_Trace.trace_din_all[12]_i_3 
       (.I0(\saved_load_get_reg_n_0_[26] ),
        .I1(\save_sel_reg[0]_22 [1]),
        .I2(\saved_load_get_reg_n_0_[10] ),
        .I3(\save_sel_reg[0]_22 [0]),
        .I4(\saved_pc_reg_n_0_[26] ),
        .O(\Embedded_Trace.trace_din_all[12]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hAFC0A0C0)) 
    \Embedded_Trace.trace_din_all[130]_i_2 
       (.I0(\saved_pc_reg_n_0_[2] ),
        .I1(\Embedded_Trace.trace_din_all[148]_i_3_n_0 ),
        .I2(\save_sel_reg[7]_15 [1]),
        .I3(\save_sel_reg[7]_15 [0]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [128]),
        .O(\Embedded_Trace.trace_din_all[130]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[130]_i_3 
       (.I0(\branch_data_first_reg_n_0_[2] ),
        .I1(\saved_load_get_reg_n_0_[18] ),
        .I2(\save_sel_reg[7]_15 [1]),
        .I3(\saved_load_get_reg_n_0_[2] ),
        .I4(\save_sel_reg[7]_15 [0]),
        .I5(\saved_pc_reg_n_0_[18] ),
        .O(\Embedded_Trace.trace_din_all[130]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hAFC0A0C0)) 
    \Embedded_Trace.trace_din_all[131]_i_2 
       (.I0(\saved_pc_reg_n_0_[3] ),
        .I1(\Embedded_Trace.trace_din_all[149]_i_3_n_0 ),
        .I2(\save_sel_reg[7]_15 [1]),
        .I3(\save_sel_reg[7]_15 [0]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [127]),
        .O(\Embedded_Trace.trace_din_all[131]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[131]_i_3 
       (.I0(\branch_data_first_reg_n_0_[3] ),
        .I1(\saved_load_get_reg_n_0_[19] ),
        .I2(\save_sel_reg[7]_15 [1]),
        .I3(\saved_load_get_reg_n_0_[3] ),
        .I4(\save_sel_reg[7]_15 [0]),
        .I5(\saved_pc_reg_n_0_[19] ),
        .O(\Embedded_Trace.trace_din_all[131]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hAFC0A0C0)) 
    \Embedded_Trace.trace_din_all[132]_i_2 
       (.I0(\saved_pc_reg_n_0_[4] ),
        .I1(\Embedded_Trace.trace_din_all[150]_i_3_n_0 ),
        .I2(\save_sel_reg[7]_15 [1]),
        .I3(\save_sel_reg[7]_15 [0]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [126]),
        .O(\Embedded_Trace.trace_din_all[132]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[132]_i_3 
       (.I0(\branch_data_first_reg_n_0_[4] ),
        .I1(\saved_load_get_reg_n_0_[20] ),
        .I2(\save_sel_reg[7]_15 [1]),
        .I3(\saved_load_get_reg_n_0_[4] ),
        .I4(\save_sel_reg[7]_15 [0]),
        .I5(\saved_pc_reg_n_0_[20] ),
        .O(\Embedded_Trace.trace_din_all[132]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hAFC0A0C0)) 
    \Embedded_Trace.trace_din_all[133]_i_2 
       (.I0(\saved_pc_reg_n_0_[5] ),
        .I1(\Embedded_Trace.trace_din_all[151]_i_3_n_0 ),
        .I2(\save_sel_reg[7]_15 [1]),
        .I3(\save_sel_reg[7]_15 [0]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [125]),
        .O(\Embedded_Trace.trace_din_all[133]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[133]_i_3 
       (.I0(\branch_data_first_reg_n_0_[5] ),
        .I1(\saved_load_get_reg_n_0_[21] ),
        .I2(\save_sel_reg[7]_15 [1]),
        .I3(\saved_load_get_reg_n_0_[5] ),
        .I4(\save_sel_reg[7]_15 [0]),
        .I5(\saved_pc_reg_n_0_[21] ),
        .O(\Embedded_Trace.trace_din_all[133]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hAFC0A0C0)) 
    \Embedded_Trace.trace_din_all[134]_i_2 
       (.I0(\saved_pc_reg_n_0_[6] ),
        .I1(\Embedded_Trace.trace_din_all[152]_i_3_n_0 ),
        .I2(\save_sel_reg[7]_15 [1]),
        .I3(\save_sel_reg[7]_15 [0]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [124]),
        .O(\Embedded_Trace.trace_din_all[134]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[134]_i_3 
       (.I0(\branch_data_first_reg_n_0_[6] ),
        .I1(\saved_load_get_reg_n_0_[22] ),
        .I2(\save_sel_reg[7]_15 [1]),
        .I3(\saved_load_get_reg_n_0_[6] ),
        .I4(\save_sel_reg[7]_15 [0]),
        .I5(\saved_pc_reg_n_0_[22] ),
        .O(\Embedded_Trace.trace_din_all[134]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hAFC0A0C0)) 
    \Embedded_Trace.trace_din_all[135]_i_2 
       (.I0(\saved_pc_reg_n_0_[7] ),
        .I1(\Embedded_Trace.trace_din_all[153]_i_2_n_0 ),
        .I2(\save_sel_reg[7]_15 [1]),
        .I3(\save_sel_reg[7]_15 [0]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [123]),
        .O(\Embedded_Trace.trace_din_all[135]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[135]_i_3 
       (.I0(data7),
        .I1(\saved_load_get_reg_n_0_[23] ),
        .I2(\save_sel_reg[7]_15 [1]),
        .I3(\saved_load_get_reg_n_0_[7] ),
        .I4(\save_sel_reg[7]_15 [0]),
        .I5(\saved_pc_reg_n_0_[23] ),
        .O(\Embedded_Trace.trace_din_all[135]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hAFC0A0C0)) 
    \Embedded_Trace.trace_din_all[136]_i_2 
       (.I0(\saved_pc_reg_n_0_[8] ),
        .I1(\Embedded_Trace.trace_din_all[154]_i_3_n_0 ),
        .I2(\save_sel_reg[7]_15 [1]),
        .I3(\save_sel_reg[7]_15 [0]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [122]),
        .O(\Embedded_Trace.trace_din_all[136]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[136]_i_3 
       (.I0(\branch_data_first_reg_n_0_[8] ),
        .I1(\saved_load_get_reg_n_0_[24] ),
        .I2(\save_sel_reg[7]_15 [1]),
        .I3(\saved_load_get_reg_n_0_[8] ),
        .I4(\save_sel_reg[7]_15 [0]),
        .I5(\saved_pc_reg_n_0_[24] ),
        .O(\Embedded_Trace.trace_din_all[136]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hAFC0A0C0)) 
    \Embedded_Trace.trace_din_all[137]_i_2 
       (.I0(\saved_pc_reg_n_0_[9] ),
        .I1(\Embedded_Trace.trace_din_all[155]_i_3_n_0 ),
        .I2(\save_sel_reg[7]_15 [1]),
        .I3(\save_sel_reg[7]_15 [0]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [121]),
        .O(\Embedded_Trace.trace_din_all[137]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h30BB3088)) 
    \Embedded_Trace.trace_din_all[137]_i_3 
       (.I0(\saved_load_get_reg_n_0_[25] ),
        .I1(\save_sel_reg[7]_15 [1]),
        .I2(\saved_load_get_reg_n_0_[9] ),
        .I3(\save_sel_reg[7]_15 [0]),
        .I4(\saved_pc_reg_n_0_[25] ),
        .O(\Embedded_Trace.trace_din_all[137]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hAFC0A0C0)) 
    \Embedded_Trace.trace_din_all[138]_i_2 
       (.I0(\saved_pc_reg_n_0_[10] ),
        .I1(\Embedded_Trace.trace_din_all[156]_i_3_n_0 ),
        .I2(\save_sel_reg[7]_15 [1]),
        .I3(\save_sel_reg[7]_15 [0]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [120]),
        .O(\Embedded_Trace.trace_din_all[138]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h30BB3088)) 
    \Embedded_Trace.trace_din_all[138]_i_3 
       (.I0(\saved_load_get_reg_n_0_[26] ),
        .I1(\save_sel_reg[7]_15 [1]),
        .I2(\saved_load_get_reg_n_0_[10] ),
        .I3(\save_sel_reg[7]_15 [0]),
        .I4(\saved_pc_reg_n_0_[26] ),
        .O(\Embedded_Trace.trace_din_all[138]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hAFC0A0C0)) 
    \Embedded_Trace.trace_din_all[139]_i_2 
       (.I0(\saved_pc_reg_n_0_[11] ),
        .I1(\Embedded_Trace.trace_din_all[157]_i_3_n_0 ),
        .I2(\save_sel_reg[7]_15 [1]),
        .I3(\save_sel_reg[7]_15 [0]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [119]),
        .O(\Embedded_Trace.trace_din_all[139]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h30BB3088)) 
    \Embedded_Trace.trace_din_all[139]_i_3 
       (.I0(\saved_load_get_reg_n_0_[27] ),
        .I1(\save_sel_reg[7]_15 [1]),
        .I2(\saved_load_get_reg_n_0_[11] ),
        .I3(\save_sel_reg[7]_15 [0]),
        .I4(\saved_pc_reg_n_0_[27] ),
        .O(\Embedded_Trace.trace_din_all[139]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[13]_i_2 
       (.I0(\saved_pc_reg_n_0_[11] ),
        .I1(\Embedded_Trace.trace_din_all[157]_i_3_n_0 ),
        .I2(\save_sel_reg[0]_22 [1]),
        .I3(cycle_count_reg[14]),
        .I4(\save_sel_reg[0]_22 [0]),
        .I5(\Embedded_Trace.trace_din_all_reg_n_0_[157] ),
        .O(\Embedded_Trace.trace_din_all[13]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h30BB3088)) 
    \Embedded_Trace.trace_din_all[13]_i_3 
       (.I0(\saved_load_get_reg_n_0_[27] ),
        .I1(\save_sel_reg[0]_22 [1]),
        .I2(\saved_load_get_reg_n_0_[11] ),
        .I3(\save_sel_reg[0]_22 [0]),
        .I4(\saved_pc_reg_n_0_[27] ),
        .O(\Embedded_Trace.trace_din_all[13]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hAFC0A0C0)) 
    \Embedded_Trace.trace_din_all[140]_i_2 
       (.I0(\saved_pc_reg_n_0_[12] ),
        .I1(\Embedded_Trace.trace_din_all[158]_i_3_n_0 ),
        .I2(\save_sel_reg[7]_15 [1]),
        .I3(\save_sel_reg[7]_15 [0]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [118]),
        .O(\Embedded_Trace.trace_din_all[140]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h30BB3088)) 
    \Embedded_Trace.trace_din_all[140]_i_3 
       (.I0(\saved_load_get_reg_n_0_[28] ),
        .I1(\save_sel_reg[7]_15 [1]),
        .I2(\saved_load_get_reg_n_0_[12] ),
        .I3(\save_sel_reg[7]_15 [0]),
        .I4(\saved_pc_reg_n_0_[28] ),
        .O(\Embedded_Trace.trace_din_all[140]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hAFC0A0C0)) 
    \Embedded_Trace.trace_din_all[141]_i_2 
       (.I0(\saved_pc_reg_n_0_[13] ),
        .I1(\Embedded_Trace.trace_din_all[159]_i_2_n_0 ),
        .I2(\save_sel_reg[7]_15 [1]),
        .I3(\save_sel_reg[7]_15 [0]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [117]),
        .O(\Embedded_Trace.trace_din_all[141]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h30BB3088)) 
    \Embedded_Trace.trace_din_all[141]_i_3 
       (.I0(\saved_load_get_reg_n_0_[29] ),
        .I1(\save_sel_reg[7]_15 [1]),
        .I2(\saved_load_get_reg_n_0_[13] ),
        .I3(\save_sel_reg[7]_15 [0]),
        .I4(\saved_pc_reg_n_0_[29] ),
        .O(\Embedded_Trace.trace_din_all[141]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hAFC0A0C0)) 
    \Embedded_Trace.trace_din_all[142]_i_2 
       (.I0(\saved_pc_reg_n_0_[14] ),
        .I1(\Embedded_Trace.trace_din_all[160]_i_3_n_0 ),
        .I2(\save_sel_reg[7]_15 [1]),
        .I3(\save_sel_reg[7]_15 [0]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [116]),
        .O(\Embedded_Trace.trace_din_all[142]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h30BB3088)) 
    \Embedded_Trace.trace_din_all[142]_i_3 
       (.I0(data6),
        .I1(\save_sel_reg[7]_15 [1]),
        .I2(\saved_load_get_reg_n_0_[14] ),
        .I3(\save_sel_reg[7]_15 [0]),
        .I4(data4),
        .O(\Embedded_Trace.trace_din_all[142]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hAFC0A0C0)) 
    \Embedded_Trace.trace_din_all[143]_i_2 
       (.I0(data3),
        .I1(\Embedded_Trace.trace_din_all[161]_i_2_n_0 ),
        .I2(\save_sel_reg[7]_15 [1]),
        .I3(\save_sel_reg[7]_15 [0]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [115]),
        .O(\Embedded_Trace.trace_din_all[143]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h30BB3088)) 
    \Embedded_Trace.trace_din_all[143]_i_3 
       (.I0(\saved_load_get_reg_n_0_[31] ),
        .I1(\save_sel_reg[7]_15 [1]),
        .I2(data5),
        .I3(\save_sel_reg[7]_15 [0]),
        .I4(\saved_pc_reg_n_0_[31] ),
        .O(\Embedded_Trace.trace_din_all[143]_i_3_n_0 ));
  LUT3 #(
    .INIT(8'hFE)) 
    \Embedded_Trace.trace_din_all[144]_i_1 
       (.I0(\save_sel_reg_n_0_[8][2] ),
        .I1(\save_sel_reg_n_0_[8][1] ),
        .I2(\save_sel_reg_n_0_[8][0] ),
        .O(\Embedded_Trace.trace_din_all[144]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair118" *) 
  LUT4 #(
    .INIT(16'h5A08)) 
    \Embedded_Trace.trace_din_all[144]_i_2 
       (.I0(\save_sel_reg_n_0_[8][1] ),
        .I1(branch_event),
        .I2(\save_sel_reg_n_0_[8][0] ),
        .I3(\save_sel_reg_n_0_[8][2] ),
        .O(\Embedded_Trace.trace_din_all[144]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair118" *) 
  LUT4 #(
    .INIT(16'h05E5)) 
    \Embedded_Trace.trace_din_all[145]_i_1 
       (.I0(\save_sel_reg_n_0_[8][0] ),
        .I1(branch_event),
        .I2(\save_sel_reg_n_0_[8][1] ),
        .I3(\save_sel_reg_n_0_[8][2] ),
        .O(\Embedded_Trace.trace_din_all[145]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hACA0ACACACA0A0A0)) 
    \Embedded_Trace.trace_din_all[146]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[146]_i_2_n_0 ),
        .I1(\save_sel_reg_n_0_[8][1] ),
        .I2(\save_sel_reg_n_0_[8][2] ),
        .I3(\saved_pc_reg_n_0_[0] ),
        .I4(\save_sel_reg_n_0_[8][0] ),
        .I5(\Embedded_Trace.trace_din_all[146]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all[146]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[146]_i_2 
       (.I0(\branch_data_first_reg_n_0_[0] ),
        .I1(\saved_load_get_reg_n_0_[16] ),
        .I2(\save_sel_reg_n_0_[8][1] ),
        .I3(\saved_load_get_reg_n_0_[0] ),
        .I4(\save_sel_reg_n_0_[8][0] ),
        .I5(\saved_pc_reg_n_0_[16] ),
        .O(\Embedded_Trace.trace_din_all[146]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair101" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Embedded_Trace.trace_din_all[146]_i_3 
       (.I0(event_data[0]),
        .I1(branch_event),
        .I2(p_0_in__0[8]),
        .O(\Embedded_Trace.trace_din_all[146]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hACA0ACACACA0A0A0)) 
    \Embedded_Trace.trace_din_all[147]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[147]_i_2_n_0 ),
        .I1(\save_sel_reg_n_0_[8][1] ),
        .I2(\save_sel_reg_n_0_[8][2] ),
        .I3(\saved_pc_reg_n_0_[1] ),
        .I4(\save_sel_reg_n_0_[8][0] ),
        .I5(\Embedded_Trace.trace_din_all[147]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all[147]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[147]_i_2 
       (.I0(\branch_data_first_reg_n_0_[1] ),
        .I1(\saved_load_get_reg_n_0_[17] ),
        .I2(\save_sel_reg_n_0_[8][1] ),
        .I3(\saved_load_get_reg_n_0_[1] ),
        .I4(\save_sel_reg_n_0_[8][0] ),
        .I5(\saved_pc_reg_n_0_[17] ),
        .O(\Embedded_Trace.trace_din_all[147]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair102" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Embedded_Trace.trace_din_all[147]_i_3 
       (.I0(event_data[1]),
        .I1(branch_event),
        .I2(p_0_in__0[7]),
        .O(\Embedded_Trace.trace_din_all[147]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hACA0ACACACA0A0A0)) 
    \Embedded_Trace.trace_din_all[148]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[148]_i_2_n_0 ),
        .I1(\save_sel_reg_n_0_[8][1] ),
        .I2(\save_sel_reg_n_0_[8][2] ),
        .I3(\saved_pc_reg_n_0_[2] ),
        .I4(\save_sel_reg_n_0_[8][0] ),
        .I5(\Embedded_Trace.trace_din_all[148]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all[148]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[148]_i_2 
       (.I0(\branch_data_first_reg_n_0_[2] ),
        .I1(\saved_load_get_reg_n_0_[18] ),
        .I2(\save_sel_reg_n_0_[8][1] ),
        .I3(\saved_load_get_reg_n_0_[2] ),
        .I4(\save_sel_reg_n_0_[8][0] ),
        .I5(\saved_pc_reg_n_0_[18] ),
        .O(\Embedded_Trace.trace_din_all[148]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair103" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Embedded_Trace.trace_din_all[148]_i_3 
       (.I0(event_data[2]),
        .I1(branch_event),
        .I2(p_0_in__0[6]),
        .O(\Embedded_Trace.trace_din_all[148]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hACA0ACACACA0A0A0)) 
    \Embedded_Trace.trace_din_all[149]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[149]_i_2_n_0 ),
        .I1(\save_sel_reg_n_0_[8][1] ),
        .I2(\save_sel_reg_n_0_[8][2] ),
        .I3(\saved_pc_reg_n_0_[3] ),
        .I4(\save_sel_reg_n_0_[8][0] ),
        .I5(\Embedded_Trace.trace_din_all[149]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all[149]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[149]_i_2 
       (.I0(\branch_data_first_reg_n_0_[3] ),
        .I1(\saved_load_get_reg_n_0_[19] ),
        .I2(\save_sel_reg_n_0_[8][1] ),
        .I3(\saved_load_get_reg_n_0_[3] ),
        .I4(\save_sel_reg_n_0_[8][0] ),
        .I5(\saved_pc_reg_n_0_[19] ),
        .O(\Embedded_Trace.trace_din_all[149]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair104" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Embedded_Trace.trace_din_all[149]_i_3 
       (.I0(event_data[3]),
        .I1(branch_event),
        .I2(p_0_in__0[5]),
        .O(\Embedded_Trace.trace_din_all[149]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[14]_i_2 
       (.I0(\saved_pc_reg_n_0_[12] ),
        .I1(\Embedded_Trace.trace_din_all[158]_i_3_n_0 ),
        .I2(\save_sel_reg[0]_22 [1]),
        .I3(cycle_count_reg[15]),
        .I4(\save_sel_reg[0]_22 [0]),
        .I5(\Embedded_Trace.trace_din_all_reg_n_0_[158] ),
        .O(\Embedded_Trace.trace_din_all[14]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h30BB3088)) 
    \Embedded_Trace.trace_din_all[14]_i_3 
       (.I0(\saved_load_get_reg_n_0_[28] ),
        .I1(\save_sel_reg[0]_22 [1]),
        .I2(\saved_load_get_reg_n_0_[12] ),
        .I3(\save_sel_reg[0]_22 [0]),
        .I4(\saved_pc_reg_n_0_[28] ),
        .O(\Embedded_Trace.trace_din_all[14]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hACA0ACACACA0A0A0)) 
    \Embedded_Trace.trace_din_all[150]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[150]_i_2_n_0 ),
        .I1(\save_sel_reg_n_0_[8][1] ),
        .I2(\save_sel_reg_n_0_[8][2] ),
        .I3(\saved_pc_reg_n_0_[4] ),
        .I4(\save_sel_reg_n_0_[8][0] ),
        .I5(\Embedded_Trace.trace_din_all[150]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all[150]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[150]_i_2 
       (.I0(\branch_data_first_reg_n_0_[4] ),
        .I1(\saved_load_get_reg_n_0_[20] ),
        .I2(\save_sel_reg_n_0_[8][1] ),
        .I3(\saved_load_get_reg_n_0_[4] ),
        .I4(\save_sel_reg_n_0_[8][0] ),
        .I5(\saved_pc_reg_n_0_[20] ),
        .O(\Embedded_Trace.trace_din_all[150]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair105" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Embedded_Trace.trace_din_all[150]_i_3 
       (.I0(event_data[4]),
        .I1(branch_event),
        .I2(p_0_in__0[4]),
        .O(\Embedded_Trace.trace_din_all[150]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hACA0ACACACA0A0A0)) 
    \Embedded_Trace.trace_din_all[151]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[151]_i_2_n_0 ),
        .I1(\save_sel_reg_n_0_[8][1] ),
        .I2(\save_sel_reg_n_0_[8][2] ),
        .I3(\saved_pc_reg_n_0_[5] ),
        .I4(\save_sel_reg_n_0_[8][0] ),
        .I5(\Embedded_Trace.trace_din_all[151]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all[151]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[151]_i_2 
       (.I0(\branch_data_first_reg_n_0_[5] ),
        .I1(\saved_load_get_reg_n_0_[21] ),
        .I2(\save_sel_reg_n_0_[8][1] ),
        .I3(\saved_load_get_reg_n_0_[5] ),
        .I4(\save_sel_reg_n_0_[8][0] ),
        .I5(\saved_pc_reg_n_0_[21] ),
        .O(\Embedded_Trace.trace_din_all[151]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair106" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Embedded_Trace.trace_din_all[151]_i_3 
       (.I0(event_data[5]),
        .I1(branch_event),
        .I2(p_0_in__0[3]),
        .O(\Embedded_Trace.trace_din_all[151]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hACA0ACACACA0A0A0)) 
    \Embedded_Trace.trace_din_all[152]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[152]_i_2_n_0 ),
        .I1(\save_sel_reg_n_0_[8][1] ),
        .I2(\save_sel_reg_n_0_[8][2] ),
        .I3(\saved_pc_reg_n_0_[6] ),
        .I4(\save_sel_reg_n_0_[8][0] ),
        .I5(\Embedded_Trace.trace_din_all[152]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all[152]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[152]_i_2 
       (.I0(\branch_data_first_reg_n_0_[6] ),
        .I1(\saved_load_get_reg_n_0_[22] ),
        .I2(\save_sel_reg_n_0_[8][1] ),
        .I3(\saved_load_get_reg_n_0_[6] ),
        .I4(\save_sel_reg_n_0_[8][0] ),
        .I5(\saved_pc_reg_n_0_[22] ),
        .O(\Embedded_Trace.trace_din_all[152]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair107" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Embedded_Trace.trace_din_all[152]_i_3 
       (.I0(event_data[6]),
        .I1(branch_event),
        .I2(p_0_in__0[2]),
        .O(\Embedded_Trace.trace_din_all[152]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF8A8000008A80)) 
    \Embedded_Trace.trace_din_all[153]_i_1 
       (.I0(\save_sel_reg_n_0_[8][1] ),
        .I1(\saved_pc_reg_n_0_[7] ),
        .I2(\save_sel_reg_n_0_[8][0] ),
        .I3(\Embedded_Trace.trace_din_all[153]_i_2_n_0 ),
        .I4(\save_sel_reg_n_0_[8][2] ),
        .I5(\Embedded_Trace.trace_din_all[153]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all[153]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair108" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Embedded_Trace.trace_din_all[153]_i_2 
       (.I0(event_data[7]),
        .I1(branch_event),
        .I2(p_0_in__0[1]),
        .O(\Embedded_Trace.trace_din_all[153]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[153]_i_3 
       (.I0(data7),
        .I1(\saved_load_get_reg_n_0_[23] ),
        .I2(\save_sel_reg_n_0_[8][1] ),
        .I3(\saved_load_get_reg_n_0_[7] ),
        .I4(\save_sel_reg_n_0_[8][0] ),
        .I5(\saved_pc_reg_n_0_[23] ),
        .O(\Embedded_Trace.trace_din_all[153]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hACA0ACACACA0A0A0)) 
    \Embedded_Trace.trace_din_all[154]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[154]_i_2_n_0 ),
        .I1(\save_sel_reg_n_0_[8][1] ),
        .I2(\save_sel_reg_n_0_[8][2] ),
        .I3(\saved_pc_reg_n_0_[8] ),
        .I4(\save_sel_reg_n_0_[8][0] ),
        .I5(\Embedded_Trace.trace_din_all[154]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all[154]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[154]_i_2 
       (.I0(\branch_data_first_reg_n_0_[8] ),
        .I1(\saved_load_get_reg_n_0_[24] ),
        .I2(\save_sel_reg_n_0_[8][1] ),
        .I3(\saved_load_get_reg_n_0_[8] ),
        .I4(\save_sel_reg_n_0_[8][0] ),
        .I5(\saved_pc_reg_n_0_[24] ),
        .O(\Embedded_Trace.trace_din_all[154]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair109" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Embedded_Trace.trace_din_all[154]_i_3 
       (.I0(event_data[8]),
        .I1(branch_event),
        .I2(p_0_in__0[0]),
        .O(\Embedded_Trace.trace_din_all[154]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAEAAAEAEAEAAAAAA)) 
    \Embedded_Trace.trace_din_all[155]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[155]_i_2_n_0 ),
        .I1(\save_sel_reg_n_0_[8][1] ),
        .I2(\save_sel_reg_n_0_[8][2] ),
        .I3(\saved_pc_reg_n_0_[9] ),
        .I4(\save_sel_reg_n_0_[8][0] ),
        .I5(\Embedded_Trace.trace_din_all[155]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all[155]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h33E200E200000000)) 
    \Embedded_Trace.trace_din_all[155]_i_2 
       (.I0(\saved_pc_reg_n_0_[25] ),
        .I1(\save_sel_reg_n_0_[8][0] ),
        .I2(\saved_load_get_reg_n_0_[9] ),
        .I3(\save_sel_reg_n_0_[8][1] ),
        .I4(\saved_load_get_reg_n_0_[25] ),
        .I5(\save_sel_reg_n_0_[8][2] ),
        .O(\Embedded_Trace.trace_din_all[155]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair97" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Embedded_Trace.trace_din_all[155]_i_3 
       (.I0(event_data[9]),
        .I1(branch_event),
        .I2(\branch_data_reg_n_0_[9] ),
        .O(\Embedded_Trace.trace_din_all[155]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAEAAAEAEAEAAAAAA)) 
    \Embedded_Trace.trace_din_all[156]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[156]_i_2_n_0 ),
        .I1(\save_sel_reg_n_0_[8][1] ),
        .I2(\save_sel_reg_n_0_[8][2] ),
        .I3(\saved_pc_reg_n_0_[10] ),
        .I4(\save_sel_reg_n_0_[8][0] ),
        .I5(\Embedded_Trace.trace_din_all[156]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all[156]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h33E200E200000000)) 
    \Embedded_Trace.trace_din_all[156]_i_2 
       (.I0(\saved_pc_reg_n_0_[26] ),
        .I1(\save_sel_reg_n_0_[8][0] ),
        .I2(\saved_load_get_reg_n_0_[10] ),
        .I3(\save_sel_reg_n_0_[8][1] ),
        .I4(\saved_load_get_reg_n_0_[26] ),
        .I5(\save_sel_reg_n_0_[8][2] ),
        .O(\Embedded_Trace.trace_din_all[156]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair110" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Embedded_Trace.trace_din_all[156]_i_3 
       (.I0(event_data[10]),
        .I1(branch_event),
        .I2(\branch_data_reg_n_0_[10] ),
        .O(\Embedded_Trace.trace_din_all[156]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAEAAAEAEAEAAAAAA)) 
    \Embedded_Trace.trace_din_all[157]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[157]_i_2_n_0 ),
        .I1(\save_sel_reg_n_0_[8][1] ),
        .I2(\save_sel_reg_n_0_[8][2] ),
        .I3(\saved_pc_reg_n_0_[11] ),
        .I4(\save_sel_reg_n_0_[8][0] ),
        .I5(\Embedded_Trace.trace_din_all[157]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all[157]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h33E200E200000000)) 
    \Embedded_Trace.trace_din_all[157]_i_2 
       (.I0(\saved_pc_reg_n_0_[27] ),
        .I1(\save_sel_reg_n_0_[8][0] ),
        .I2(\saved_load_get_reg_n_0_[11] ),
        .I3(\save_sel_reg_n_0_[8][1] ),
        .I4(\saved_load_get_reg_n_0_[27] ),
        .I5(\save_sel_reg_n_0_[8][2] ),
        .O(\Embedded_Trace.trace_din_all[157]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair98" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Embedded_Trace.trace_din_all[157]_i_3 
       (.I0(event_data[11]),
        .I1(branch_event),
        .I2(\branch_data_reg_n_0_[11] ),
        .O(\Embedded_Trace.trace_din_all[157]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAEAAAEAEAEAAAAAA)) 
    \Embedded_Trace.trace_din_all[158]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[158]_i_2_n_0 ),
        .I1(\save_sel_reg_n_0_[8][1] ),
        .I2(\save_sel_reg_n_0_[8][2] ),
        .I3(\saved_pc_reg_n_0_[12] ),
        .I4(\save_sel_reg_n_0_[8][0] ),
        .I5(\Embedded_Trace.trace_din_all[158]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all[158]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h33E200E200000000)) 
    \Embedded_Trace.trace_din_all[158]_i_2 
       (.I0(\saved_pc_reg_n_0_[28] ),
        .I1(\save_sel_reg_n_0_[8][0] ),
        .I2(\saved_load_get_reg_n_0_[12] ),
        .I3(\save_sel_reg_n_0_[8][1] ),
        .I4(\saved_load_get_reg_n_0_[28] ),
        .I5(\save_sel_reg_n_0_[8][2] ),
        .O(\Embedded_Trace.trace_din_all[158]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair99" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Embedded_Trace.trace_din_all[158]_i_3 
       (.I0(event_data[12]),
        .I1(branch_event),
        .I2(\branch_data_reg_n_0_[12] ),
        .O(\Embedded_Trace.trace_din_all[158]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF20222000)) 
    \Embedded_Trace.trace_din_all[159]_i_1 
       (.I0(\save_sel_reg_n_0_[8][1] ),
        .I1(\save_sel_reg_n_0_[8][2] ),
        .I2(\saved_pc_reg_n_0_[13] ),
        .I3(\save_sel_reg_n_0_[8][0] ),
        .I4(\Embedded_Trace.trace_din_all[159]_i_2_n_0 ),
        .I5(\Embedded_Trace.trace_din_all[159]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all[159]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair100" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Embedded_Trace.trace_din_all[159]_i_2 
       (.I0(event_data[13]),
        .I1(branch_event),
        .I2(\branch_data_reg_n_0_[13] ),
        .O(\Embedded_Trace.trace_din_all[159]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h33E200E200000000)) 
    \Embedded_Trace.trace_din_all[159]_i_3 
       (.I0(\saved_pc_reg_n_0_[29] ),
        .I1(\save_sel_reg_n_0_[8][0] ),
        .I2(\saved_load_get_reg_n_0_[13] ),
        .I3(\save_sel_reg_n_0_[8][1] ),
        .I4(\saved_load_get_reg_n_0_[29] ),
        .I5(\save_sel_reg_n_0_[8][2] ),
        .O(\Embedded_Trace.trace_din_all[159]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hA0A0CFC0)) 
    \Embedded_Trace.trace_din_all[15]_i_2 
       (.I0(\saved_pc_reg_n_0_[13] ),
        .I1(\Embedded_Trace.trace_din_all[159]_i_2_n_0 ),
        .I2(\save_sel_reg[0]_22 [1]),
        .I3(\Embedded_Trace.trace_din_all_reg_n_0_[159] ),
        .I4(\save_sel_reg[0]_22 [0]),
        .O(\Embedded_Trace.trace_din_all[15]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h30BB3088)) 
    \Embedded_Trace.trace_din_all[15]_i_3 
       (.I0(\saved_load_get_reg_n_0_[29] ),
        .I1(\save_sel_reg[0]_22 [1]),
        .I2(\saved_load_get_reg_n_0_[13] ),
        .I3(\save_sel_reg[0]_22 [0]),
        .I4(\saved_pc_reg_n_0_[29] ),
        .O(\Embedded_Trace.trace_din_all[15]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAEAAAEAEAEAAAAAA)) 
    \Embedded_Trace.trace_din_all[160]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[160]_i_2_n_0 ),
        .I1(\save_sel_reg_n_0_[8][1] ),
        .I2(\save_sel_reg_n_0_[8][2] ),
        .I3(\saved_pc_reg_n_0_[14] ),
        .I4(\save_sel_reg_n_0_[8][0] ),
        .I5(\Embedded_Trace.trace_din_all[160]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all[160]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h33E200E200000000)) 
    \Embedded_Trace.trace_din_all[160]_i_2 
       (.I0(data4),
        .I1(\save_sel_reg_n_0_[8][0] ),
        .I2(\saved_load_get_reg_n_0_[14] ),
        .I3(\save_sel_reg_n_0_[8][1] ),
        .I4(data6),
        .I5(\save_sel_reg_n_0_[8][2] ),
        .O(\Embedded_Trace.trace_din_all[160]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair111" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Embedded_Trace.trace_din_all[160]_i_3 
       (.I0(event_data[14]),
        .I1(branch_event),
        .I2(\branch_data_reg_n_0_[14] ),
        .O(\Embedded_Trace.trace_din_all[160]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF20222000)) 
    \Embedded_Trace.trace_din_all[161]_i_1 
       (.I0(\save_sel_reg_n_0_[8][1] ),
        .I1(\save_sel_reg_n_0_[8][2] ),
        .I2(data3),
        .I3(\save_sel_reg_n_0_[8][0] ),
        .I4(\Embedded_Trace.trace_din_all[161]_i_2_n_0 ),
        .I5(\Embedded_Trace.trace_din_all[161]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all[161]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair112" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Embedded_Trace.trace_din_all[161]_i_2 
       (.I0(event_data[15]),
        .I1(branch_event),
        .I2(\branch_data_reg_n_0_[15] ),
        .O(\Embedded_Trace.trace_din_all[161]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h33E200E200000000)) 
    \Embedded_Trace.trace_din_all[161]_i_3 
       (.I0(\saved_pc_reg_n_0_[31] ),
        .I1(\save_sel_reg_n_0_[8][0] ),
        .I2(data5),
        .I3(\save_sel_reg_n_0_[8][1] ),
        .I4(\saved_load_get_reg_n_0_[31] ),
        .I5(\save_sel_reg_n_0_[8][2] ),
        .O(\Embedded_Trace.trace_din_all[161]_i_3_n_0 ));
  LUT3 #(
    .INIT(8'hFE)) 
    \Embedded_Trace.trace_din_all[162]_i_1 
       (.I0(\save_sel_reg_n_0_[9][2] ),
        .I1(\save_sel_reg_n_0_[9][1] ),
        .I2(\save_sel_reg_n_0_[9][0] ),
        .O(\Embedded_Trace.trace_din_all[162]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair114" *) 
  LUT4 #(
    .INIT(16'h0CE0)) 
    \Embedded_Trace.trace_din_all[162]_i_2 
       (.I0(branch_event),
        .I1(\save_sel_reg_n_0_[9][2] ),
        .I2(\save_sel_reg_n_0_[9][1] ),
        .I3(\save_sel_reg_n_0_[9][0] ),
        .O(\Embedded_Trace.trace_din_all[162]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair114" *) 
  LUT4 #(
    .INIT(16'h4743)) 
    \Embedded_Trace.trace_din_all[163]_i_1 
       (.I0(\save_sel_reg_n_0_[9][2] ),
        .I1(\save_sel_reg_n_0_[9][1] ),
        .I2(\save_sel_reg_n_0_[9][0] ),
        .I3(branch_event),
        .O(\Embedded_Trace.trace_din_all[163]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hB888B8B8B8888888)) 
    \Embedded_Trace.trace_din_all[164]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[164]_i_2_n_0 ),
        .I1(\save_sel_reg_n_0_[9][2] ),
        .I2(\save_sel_reg_n_0_[9][1] ),
        .I3(\saved_pc_reg_n_0_[0] ),
        .I4(\save_sel_reg_n_0_[9][0] ),
        .I5(\Embedded_Trace.trace_din_all[146]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all[164]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[164]_i_2 
       (.I0(\branch_data_first_reg_n_0_[0] ),
        .I1(\saved_load_get_reg_n_0_[16] ),
        .I2(\save_sel_reg_n_0_[9][1] ),
        .I3(\saved_load_get_reg_n_0_[0] ),
        .I4(\save_sel_reg_n_0_[9][0] ),
        .I5(\saved_pc_reg_n_0_[16] ),
        .O(\Embedded_Trace.trace_din_all[164]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hB888B8B8B8888888)) 
    \Embedded_Trace.trace_din_all[165]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[165]_i_2_n_0 ),
        .I1(\save_sel_reg_n_0_[9][2] ),
        .I2(\save_sel_reg_n_0_[9][1] ),
        .I3(\saved_pc_reg_n_0_[1] ),
        .I4(\save_sel_reg_n_0_[9][0] ),
        .I5(\Embedded_Trace.trace_din_all[147]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all[165]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[165]_i_2 
       (.I0(\branch_data_first_reg_n_0_[1] ),
        .I1(\saved_load_get_reg_n_0_[17] ),
        .I2(\save_sel_reg_n_0_[9][1] ),
        .I3(\saved_load_get_reg_n_0_[1] ),
        .I4(\save_sel_reg_n_0_[9][0] ),
        .I5(\saved_pc_reg_n_0_[17] ),
        .O(\Embedded_Trace.trace_din_all[165]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hB888B8B8B8888888)) 
    \Embedded_Trace.trace_din_all[166]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[166]_i_2_n_0 ),
        .I1(\save_sel_reg_n_0_[9][2] ),
        .I2(\save_sel_reg_n_0_[9][1] ),
        .I3(\saved_pc_reg_n_0_[2] ),
        .I4(\save_sel_reg_n_0_[9][0] ),
        .I5(\Embedded_Trace.trace_din_all[148]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all[166]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[166]_i_2 
       (.I0(\branch_data_first_reg_n_0_[2] ),
        .I1(\saved_load_get_reg_n_0_[18] ),
        .I2(\save_sel_reg_n_0_[9][1] ),
        .I3(\saved_load_get_reg_n_0_[2] ),
        .I4(\save_sel_reg_n_0_[9][0] ),
        .I5(\saved_pc_reg_n_0_[18] ),
        .O(\Embedded_Trace.trace_din_all[166]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hB888B8B8B8888888)) 
    \Embedded_Trace.trace_din_all[167]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[167]_i_2_n_0 ),
        .I1(\save_sel_reg_n_0_[9][2] ),
        .I2(\save_sel_reg_n_0_[9][1] ),
        .I3(\saved_pc_reg_n_0_[3] ),
        .I4(\save_sel_reg_n_0_[9][0] ),
        .I5(\Embedded_Trace.trace_din_all[149]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all[167]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[167]_i_2 
       (.I0(\branch_data_first_reg_n_0_[3] ),
        .I1(\saved_load_get_reg_n_0_[19] ),
        .I2(\save_sel_reg_n_0_[9][1] ),
        .I3(\saved_load_get_reg_n_0_[3] ),
        .I4(\save_sel_reg_n_0_[9][0] ),
        .I5(\saved_pc_reg_n_0_[19] ),
        .O(\Embedded_Trace.trace_din_all[167]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hB888B8B8B8888888)) 
    \Embedded_Trace.trace_din_all[168]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[168]_i_2_n_0 ),
        .I1(\save_sel_reg_n_0_[9][2] ),
        .I2(\save_sel_reg_n_0_[9][1] ),
        .I3(\saved_pc_reg_n_0_[4] ),
        .I4(\save_sel_reg_n_0_[9][0] ),
        .I5(\Embedded_Trace.trace_din_all[150]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all[168]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[168]_i_2 
       (.I0(\branch_data_first_reg_n_0_[4] ),
        .I1(\saved_load_get_reg_n_0_[20] ),
        .I2(\save_sel_reg_n_0_[9][1] ),
        .I3(\saved_load_get_reg_n_0_[4] ),
        .I4(\save_sel_reg_n_0_[9][0] ),
        .I5(\saved_pc_reg_n_0_[20] ),
        .O(\Embedded_Trace.trace_din_all[168]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hB888B8B8B8888888)) 
    \Embedded_Trace.trace_din_all[169]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[169]_i_2_n_0 ),
        .I1(\save_sel_reg_n_0_[9][2] ),
        .I2(\save_sel_reg_n_0_[9][1] ),
        .I3(\saved_pc_reg_n_0_[5] ),
        .I4(\save_sel_reg_n_0_[9][0] ),
        .I5(\Embedded_Trace.trace_din_all[151]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all[169]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[169]_i_2 
       (.I0(\branch_data_first_reg_n_0_[5] ),
        .I1(\saved_load_get_reg_n_0_[21] ),
        .I2(\save_sel_reg_n_0_[9][1] ),
        .I3(\saved_load_get_reg_n_0_[5] ),
        .I4(\save_sel_reg_n_0_[9][0] ),
        .I5(\saved_pc_reg_n_0_[21] ),
        .O(\Embedded_Trace.trace_din_all[169]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hA0A0CFC0)) 
    \Embedded_Trace.trace_din_all[16]_i_2 
       (.I0(\saved_pc_reg_n_0_[14] ),
        .I1(\Embedded_Trace.trace_din_all[160]_i_3_n_0 ),
        .I2(\save_sel_reg[0]_22 [1]),
        .I3(\Embedded_Trace.trace_din_all_reg_n_0_[160] ),
        .I4(\save_sel_reg[0]_22 [0]),
        .O(\Embedded_Trace.trace_din_all[16]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h30BB3088)) 
    \Embedded_Trace.trace_din_all[16]_i_3 
       (.I0(data6),
        .I1(\save_sel_reg[0]_22 [1]),
        .I2(\saved_load_get_reg_n_0_[14] ),
        .I3(\save_sel_reg[0]_22 [0]),
        .I4(data4),
        .O(\Embedded_Trace.trace_din_all[16]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hB888B8B8B8888888)) 
    \Embedded_Trace.trace_din_all[170]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[170]_i_2_n_0 ),
        .I1(\save_sel_reg_n_0_[9][2] ),
        .I2(\save_sel_reg_n_0_[9][1] ),
        .I3(\saved_pc_reg_n_0_[6] ),
        .I4(\save_sel_reg_n_0_[9][0] ),
        .I5(\Embedded_Trace.trace_din_all[152]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all[170]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[170]_i_2 
       (.I0(\branch_data_first_reg_n_0_[6] ),
        .I1(\saved_load_get_reg_n_0_[22] ),
        .I2(\save_sel_reg_n_0_[9][1] ),
        .I3(\saved_load_get_reg_n_0_[6] ),
        .I4(\save_sel_reg_n_0_[9][0] ),
        .I5(\saved_pc_reg_n_0_[22] ),
        .O(\Embedded_Trace.trace_din_all[170]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hB888B8B8B8888888)) 
    \Embedded_Trace.trace_din_all[171]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[171]_i_2_n_0 ),
        .I1(\save_sel_reg_n_0_[9][2] ),
        .I2(\save_sel_reg_n_0_[9][1] ),
        .I3(\saved_pc_reg_n_0_[7] ),
        .I4(\save_sel_reg_n_0_[9][0] ),
        .I5(\Embedded_Trace.trace_din_all[153]_i_2_n_0 ),
        .O(\Embedded_Trace.trace_din_all[171]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[171]_i_2 
       (.I0(data7),
        .I1(\saved_load_get_reg_n_0_[23] ),
        .I2(\save_sel_reg_n_0_[9][1] ),
        .I3(\saved_load_get_reg_n_0_[7] ),
        .I4(\save_sel_reg_n_0_[9][0] ),
        .I5(\saved_pc_reg_n_0_[23] ),
        .O(\Embedded_Trace.trace_din_all[171]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hB888B8B8B8888888)) 
    \Embedded_Trace.trace_din_all[172]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[172]_i_2_n_0 ),
        .I1(\save_sel_reg_n_0_[9][2] ),
        .I2(\save_sel_reg_n_0_[9][1] ),
        .I3(\saved_pc_reg_n_0_[8] ),
        .I4(\save_sel_reg_n_0_[9][0] ),
        .I5(\Embedded_Trace.trace_din_all[154]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all[172]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[172]_i_2 
       (.I0(\branch_data_first_reg_n_0_[8] ),
        .I1(\saved_load_get_reg_n_0_[24] ),
        .I2(\save_sel_reg_n_0_[9][1] ),
        .I3(\saved_load_get_reg_n_0_[8] ),
        .I4(\save_sel_reg_n_0_[9][0] ),
        .I5(\saved_pc_reg_n_0_[24] ),
        .O(\Embedded_Trace.trace_din_all[172]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF40444000)) 
    \Embedded_Trace.trace_din_all[173]_i_1 
       (.I0(\save_sel_reg_n_0_[9][2] ),
        .I1(\save_sel_reg_n_0_[9][1] ),
        .I2(\saved_pc_reg_n_0_[9] ),
        .I3(\save_sel_reg_n_0_[9][0] ),
        .I4(\Embedded_Trace.trace_din_all[155]_i_3_n_0 ),
        .I5(\Embedded_Trace.trace_din_all[173]_i_2_n_0 ),
        .O(\Embedded_Trace.trace_din_all[173]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h33E200E200000000)) 
    \Embedded_Trace.trace_din_all[173]_i_2 
       (.I0(\saved_pc_reg_n_0_[25] ),
        .I1(\save_sel_reg_n_0_[9][0] ),
        .I2(\saved_load_get_reg_n_0_[9] ),
        .I3(\save_sel_reg_n_0_[9][1] ),
        .I4(\saved_load_get_reg_n_0_[25] ),
        .I5(\save_sel_reg_n_0_[9][2] ),
        .O(\Embedded_Trace.trace_din_all[173]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hBAAABABABAAAAAAA)) 
    \Embedded_Trace.trace_din_all[174]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[174]_i_2_n_0 ),
        .I1(\save_sel_reg_n_0_[9][2] ),
        .I2(\save_sel_reg_n_0_[9][1] ),
        .I3(\saved_pc_reg_n_0_[10] ),
        .I4(\save_sel_reg_n_0_[9][0] ),
        .I5(\Embedded_Trace.trace_din_all[156]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all[174]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h33E200E200000000)) 
    \Embedded_Trace.trace_din_all[174]_i_2 
       (.I0(\saved_pc_reg_n_0_[26] ),
        .I1(\save_sel_reg_n_0_[9][0] ),
        .I2(\saved_load_get_reg_n_0_[10] ),
        .I3(\save_sel_reg_n_0_[9][1] ),
        .I4(\saved_load_get_reg_n_0_[26] ),
        .I5(\save_sel_reg_n_0_[9][2] ),
        .O(\Embedded_Trace.trace_din_all[174]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF40444000)) 
    \Embedded_Trace.trace_din_all[175]_i_1 
       (.I0(\save_sel_reg_n_0_[9][2] ),
        .I1(\save_sel_reg_n_0_[9][1] ),
        .I2(\saved_pc_reg_n_0_[11] ),
        .I3(\save_sel_reg_n_0_[9][0] ),
        .I4(\Embedded_Trace.trace_din_all[157]_i_3_n_0 ),
        .I5(\Embedded_Trace.trace_din_all[175]_i_2_n_0 ),
        .O(\Embedded_Trace.trace_din_all[175]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h33E200E200000000)) 
    \Embedded_Trace.trace_din_all[175]_i_2 
       (.I0(\saved_pc_reg_n_0_[27] ),
        .I1(\save_sel_reg_n_0_[9][0] ),
        .I2(\saved_load_get_reg_n_0_[11] ),
        .I3(\save_sel_reg_n_0_[9][1] ),
        .I4(\saved_load_get_reg_n_0_[27] ),
        .I5(\save_sel_reg_n_0_[9][2] ),
        .O(\Embedded_Trace.trace_din_all[175]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF40444000)) 
    \Embedded_Trace.trace_din_all[176]_i_1 
       (.I0(\save_sel_reg_n_0_[9][2] ),
        .I1(\save_sel_reg_n_0_[9][1] ),
        .I2(\saved_pc_reg_n_0_[12] ),
        .I3(\save_sel_reg_n_0_[9][0] ),
        .I4(\Embedded_Trace.trace_din_all[158]_i_3_n_0 ),
        .I5(\Embedded_Trace.trace_din_all[176]_i_2_n_0 ),
        .O(\Embedded_Trace.trace_din_all[176]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h33E200E200000000)) 
    \Embedded_Trace.trace_din_all[176]_i_2 
       (.I0(\saved_pc_reg_n_0_[28] ),
        .I1(\save_sel_reg_n_0_[9][0] ),
        .I2(\saved_load_get_reg_n_0_[12] ),
        .I3(\save_sel_reg_n_0_[9][1] ),
        .I4(\saved_load_get_reg_n_0_[28] ),
        .I5(\save_sel_reg_n_0_[9][2] ),
        .O(\Embedded_Trace.trace_din_all[176]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hBAAABABABAAAAAAA)) 
    \Embedded_Trace.trace_din_all[177]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[177]_i_2_n_0 ),
        .I1(\save_sel_reg_n_0_[9][2] ),
        .I2(\save_sel_reg_n_0_[9][1] ),
        .I3(\saved_pc_reg_n_0_[13] ),
        .I4(\save_sel_reg_n_0_[9][0] ),
        .I5(\Embedded_Trace.trace_din_all[159]_i_2_n_0 ),
        .O(\Embedded_Trace.trace_din_all[177]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h33E200E200000000)) 
    \Embedded_Trace.trace_din_all[177]_i_2 
       (.I0(\saved_pc_reg_n_0_[29] ),
        .I1(\save_sel_reg_n_0_[9][0] ),
        .I2(\saved_load_get_reg_n_0_[13] ),
        .I3(\save_sel_reg_n_0_[9][1] ),
        .I4(\saved_load_get_reg_n_0_[29] ),
        .I5(\save_sel_reg_n_0_[9][2] ),
        .O(\Embedded_Trace.trace_din_all[177]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hBAAABABABAAAAAAA)) 
    \Embedded_Trace.trace_din_all[178]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[178]_i_2_n_0 ),
        .I1(\save_sel_reg_n_0_[9][2] ),
        .I2(\save_sel_reg_n_0_[9][1] ),
        .I3(\saved_pc_reg_n_0_[14] ),
        .I4(\save_sel_reg_n_0_[9][0] ),
        .I5(\Embedded_Trace.trace_din_all[160]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all[178]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h33E200E200000000)) 
    \Embedded_Trace.trace_din_all[178]_i_2 
       (.I0(data4),
        .I1(\save_sel_reg_n_0_[9][0] ),
        .I2(\saved_load_get_reg_n_0_[14] ),
        .I3(\save_sel_reg_n_0_[9][1] ),
        .I4(data6),
        .I5(\save_sel_reg_n_0_[9][2] ),
        .O(\Embedded_Trace.trace_din_all[178]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hBAAABABABAAAAAAA)) 
    \Embedded_Trace.trace_din_all[179]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[179]_i_2_n_0 ),
        .I1(\save_sel_reg_n_0_[9][2] ),
        .I2(\save_sel_reg_n_0_[9][1] ),
        .I3(data3),
        .I4(\save_sel_reg_n_0_[9][0] ),
        .I5(\Embedded_Trace.trace_din_all[161]_i_2_n_0 ),
        .O(\Embedded_Trace.trace_din_all[179]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h33E200E200000000)) 
    \Embedded_Trace.trace_din_all[179]_i_2 
       (.I0(\saved_pc_reg_n_0_[31] ),
        .I1(\save_sel_reg_n_0_[9][0] ),
        .I2(data5),
        .I3(\save_sel_reg_n_0_[9][1] ),
        .I4(\saved_load_get_reg_n_0_[31] ),
        .I5(\save_sel_reg_n_0_[9][2] ),
        .O(\Embedded_Trace.trace_din_all[179]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hA0A0CFC0)) 
    \Embedded_Trace.trace_din_all[17]_i_2 
       (.I0(data3),
        .I1(\Embedded_Trace.trace_din_all[161]_i_2_n_0 ),
        .I2(\save_sel_reg[0]_22 [1]),
        .I3(\Embedded_Trace.trace_din_all_reg_n_0_[161] ),
        .I4(\save_sel_reg[0]_22 [0]),
        .O(\Embedded_Trace.trace_din_all[17]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h30BB3088)) 
    \Embedded_Trace.trace_din_all[17]_i_3 
       (.I0(\saved_load_get_reg_n_0_[31] ),
        .I1(\save_sel_reg[0]_22 [1]),
        .I2(data5),
        .I3(\save_sel_reg[0]_22 [0]),
        .I4(\saved_pc_reg_n_0_[31] ),
        .O(\Embedded_Trace.trace_din_all[17]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \Embedded_Trace.trace_din_all[180]_i_1 
       (.I0(\save_sel_reg_n_0_[9][0] ),
        .I1(\save_sel_reg_n_0_[10][1] ),
        .O(\Embedded_Trace.trace_din_all[180]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair129" *) 
  LUT3 #(
    .INIT(8'hA8)) 
    \Embedded_Trace.trace_din_all[180]_i_2 
       (.I0(\save_sel_reg_n_0_[10][1] ),
        .I1(branch_event),
        .I2(\save_sel_reg_n_0_[9][0] ),
        .O(\Embedded_Trace.trace_din_all[180]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair129" *) 
  LUT3 #(
    .INIT(8'h4F)) 
    \Embedded_Trace.trace_din_all[181]_i_1 
       (.I0(\save_sel_reg_n_0_[9][0] ),
        .I1(branch_event),
        .I2(\save_sel_reg_n_0_[10][1] ),
        .O(\Embedded_Trace.trace_din_all[181]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hE2CCE200)) 
    \Embedded_Trace.trace_din_all[182]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[146]_i_3_n_0 ),
        .I1(\save_sel_reg_n_0_[9][0] ),
        .I2(\saved_load_get_reg_n_0_[16] ),
        .I3(\save_sel_reg_n_0_[10][1] ),
        .I4(\saved_pc_reg_n_0_[16] ),
        .O(\Embedded_Trace.trace_din_all[182]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hE2CCE200)) 
    \Embedded_Trace.trace_din_all[183]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[147]_i_3_n_0 ),
        .I1(\save_sel_reg_n_0_[9][0] ),
        .I2(\saved_load_get_reg_n_0_[17] ),
        .I3(\save_sel_reg_n_0_[10][1] ),
        .I4(\saved_pc_reg_n_0_[17] ),
        .O(\Embedded_Trace.trace_din_all[183]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hE2CCE200)) 
    \Embedded_Trace.trace_din_all[184]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[148]_i_3_n_0 ),
        .I1(\save_sel_reg_n_0_[9][0] ),
        .I2(\saved_load_get_reg_n_0_[18] ),
        .I3(\save_sel_reg_n_0_[10][1] ),
        .I4(\saved_pc_reg_n_0_[18] ),
        .O(\Embedded_Trace.trace_din_all[184]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hE2CCE200)) 
    \Embedded_Trace.trace_din_all[185]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[149]_i_3_n_0 ),
        .I1(\save_sel_reg_n_0_[9][0] ),
        .I2(\saved_load_get_reg_n_0_[19] ),
        .I3(\save_sel_reg_n_0_[10][1] ),
        .I4(\saved_pc_reg_n_0_[19] ),
        .O(\Embedded_Trace.trace_din_all[185]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hE2CCE200)) 
    \Embedded_Trace.trace_din_all[186]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[150]_i_3_n_0 ),
        .I1(\save_sel_reg_n_0_[9][0] ),
        .I2(\saved_load_get_reg_n_0_[20] ),
        .I3(\save_sel_reg_n_0_[10][1] ),
        .I4(\saved_pc_reg_n_0_[20] ),
        .O(\Embedded_Trace.trace_din_all[186]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hE2CCE200)) 
    \Embedded_Trace.trace_din_all[187]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[151]_i_3_n_0 ),
        .I1(\save_sel_reg_n_0_[9][0] ),
        .I2(\saved_load_get_reg_n_0_[21] ),
        .I3(\save_sel_reg_n_0_[10][1] ),
        .I4(\saved_pc_reg_n_0_[21] ),
        .O(\Embedded_Trace.trace_din_all[187]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hE2CCE200)) 
    \Embedded_Trace.trace_din_all[188]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[152]_i_3_n_0 ),
        .I1(\save_sel_reg_n_0_[9][0] ),
        .I2(\saved_load_get_reg_n_0_[22] ),
        .I3(\save_sel_reg_n_0_[10][1] ),
        .I4(\saved_pc_reg_n_0_[22] ),
        .O(\Embedded_Trace.trace_din_all[188]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hE2CCE200)) 
    \Embedded_Trace.trace_din_all[189]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[153]_i_2_n_0 ),
        .I1(\save_sel_reg_n_0_[9][0] ),
        .I2(\saved_load_get_reg_n_0_[23] ),
        .I3(\save_sel_reg_n_0_[10][1] ),
        .I4(\saved_pc_reg_n_0_[23] ),
        .O(\Embedded_Trace.trace_din_all[189]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h5A5A4540)) 
    \Embedded_Trace.trace_din_all[18]_i_1 
       (.I0(\save_sel_reg[1]_21 [0]),
        .I1(branch_event),
        .I2(\save_sel_reg[1]_21 [1]),
        .I3(\Embedded_Trace.trace_din_all_reg_n_0_[162] ),
        .I4(\save_sel_reg[1]_21 [2]),
        .O(\Embedded_Trace.trace_din_all[18]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hE2CCE200)) 
    \Embedded_Trace.trace_din_all[190]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[154]_i_3_n_0 ),
        .I1(\save_sel_reg_n_0_[9][0] ),
        .I2(\saved_load_get_reg_n_0_[24] ),
        .I3(\save_sel_reg_n_0_[10][1] ),
        .I4(\saved_pc_reg_n_0_[24] ),
        .O(\Embedded_Trace.trace_din_all[190]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hE2CCE200)) 
    \Embedded_Trace.trace_din_all[191]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[155]_i_3_n_0 ),
        .I1(\save_sel_reg_n_0_[9][0] ),
        .I2(\saved_load_get_reg_n_0_[25] ),
        .I3(\save_sel_reg_n_0_[10][1] ),
        .I4(\saved_pc_reg_n_0_[25] ),
        .O(\Embedded_Trace.trace_din_all[191]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hE2CCE200)) 
    \Embedded_Trace.trace_din_all[192]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[156]_i_3_n_0 ),
        .I1(\save_sel_reg_n_0_[9][0] ),
        .I2(\saved_load_get_reg_n_0_[26] ),
        .I3(\save_sel_reg_n_0_[10][1] ),
        .I4(\saved_pc_reg_n_0_[26] ),
        .O(\Embedded_Trace.trace_din_all[192]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hE2CCE200)) 
    \Embedded_Trace.trace_din_all[193]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[157]_i_3_n_0 ),
        .I1(\save_sel_reg_n_0_[9][0] ),
        .I2(\saved_load_get_reg_n_0_[27] ),
        .I3(\save_sel_reg_n_0_[10][1] ),
        .I4(\saved_pc_reg_n_0_[27] ),
        .O(\Embedded_Trace.trace_din_all[193]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hE2CCE200)) 
    \Embedded_Trace.trace_din_all[194]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[158]_i_3_n_0 ),
        .I1(\save_sel_reg_n_0_[9][0] ),
        .I2(\saved_load_get_reg_n_0_[28] ),
        .I3(\save_sel_reg_n_0_[10][1] ),
        .I4(\saved_pc_reg_n_0_[28] ),
        .O(\Embedded_Trace.trace_din_all[194]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hE2CCE200)) 
    \Embedded_Trace.trace_din_all[195]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[159]_i_2_n_0 ),
        .I1(\save_sel_reg_n_0_[9][0] ),
        .I2(\saved_load_get_reg_n_0_[29] ),
        .I3(\save_sel_reg_n_0_[10][1] ),
        .I4(\saved_pc_reg_n_0_[29] ),
        .O(\Embedded_Trace.trace_din_all[195]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hE2CCE200)) 
    \Embedded_Trace.trace_din_all[196]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[160]_i_3_n_0 ),
        .I1(\save_sel_reg_n_0_[9][0] ),
        .I2(data6),
        .I3(\save_sel_reg_n_0_[10][1] ),
        .I4(data4),
        .O(\Embedded_Trace.trace_din_all[196]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hE2CCE200)) 
    \Embedded_Trace.trace_din_all[197]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[161]_i_2_n_0 ),
        .I1(\save_sel_reg_n_0_[9][0] ),
        .I2(\saved_load_get_reg_n_0_[31] ),
        .I3(\save_sel_reg_n_0_[10][1] ),
        .I4(\saved_pc_reg_n_0_[31] ),
        .O(trace_din_muxed));
  LUT5 #(
    .INIT(32'h0033FC22)) 
    \Embedded_Trace.trace_din_all[19]_i_1 
       (.I0(\Embedded_Trace.trace_din_all_reg_n_0_[163] ),
        .I1(\save_sel_reg[1]_21 [0]),
        .I2(branch_event),
        .I3(\save_sel_reg[1]_21 [1]),
        .I4(\save_sel_reg[1]_21 [2]),
        .O(\Embedded_Trace.trace_din_all[19]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h33303E3E33300E0E)) 
    \Embedded_Trace.trace_din_all[1]_i_1 
       (.I0(\Embedded_Trace.trace_din_all_reg_n_0_[145] ),
        .I1(\save_sel_reg[0]_22 [2]),
        .I2(\save_sel_reg[0]_22 [1]),
        .I3(p_0_in38_in),
        .I4(\save_sel_reg[0]_22 [0]),
        .I5(branch_event),
        .O(\Embedded_Trace.trace_din_all[1]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hA0A0CFC0)) 
    \Embedded_Trace.trace_din_all[20]_i_2 
       (.I0(\saved_pc_reg_n_0_[0] ),
        .I1(\Embedded_Trace.trace_din_all[146]_i_3_n_0 ),
        .I2(\save_sel_reg[1]_21 [1]),
        .I3(\Embedded_Trace.trace_din_all_reg_n_0_[164] ),
        .I4(\save_sel_reg[1]_21 [0]),
        .O(\Embedded_Trace.trace_din_all[20]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[20]_i_3 
       (.I0(\branch_data_first_reg_n_0_[0] ),
        .I1(\saved_load_get_reg_n_0_[16] ),
        .I2(\save_sel_reg[1]_21 [1]),
        .I3(\saved_load_get_reg_n_0_[0] ),
        .I4(\save_sel_reg[1]_21 [0]),
        .I5(\saved_pc_reg_n_0_[16] ),
        .O(\Embedded_Trace.trace_din_all[20]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hA0A0CFC0)) 
    \Embedded_Trace.trace_din_all[21]_i_2 
       (.I0(\saved_pc_reg_n_0_[1] ),
        .I1(\Embedded_Trace.trace_din_all[147]_i_3_n_0 ),
        .I2(\save_sel_reg[1]_21 [1]),
        .I3(\Embedded_Trace.trace_din_all_reg_n_0_[165] ),
        .I4(\save_sel_reg[1]_21 [0]),
        .O(\Embedded_Trace.trace_din_all[21]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[21]_i_3 
       (.I0(\branch_data_first_reg_n_0_[1] ),
        .I1(\saved_load_get_reg_n_0_[17] ),
        .I2(\save_sel_reg[1]_21 [1]),
        .I3(\saved_load_get_reg_n_0_[1] ),
        .I4(\save_sel_reg[1]_21 [0]),
        .I5(\saved_pc_reg_n_0_[17] ),
        .O(\Embedded_Trace.trace_din_all[21]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hA0A0CFC0)) 
    \Embedded_Trace.trace_din_all[22]_i_2 
       (.I0(\saved_pc_reg_n_0_[2] ),
        .I1(\Embedded_Trace.trace_din_all[148]_i_3_n_0 ),
        .I2(\save_sel_reg[1]_21 [1]),
        .I3(\Embedded_Trace.trace_din_all_reg_n_0_[166] ),
        .I4(\save_sel_reg[1]_21 [0]),
        .O(\Embedded_Trace.trace_din_all[22]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[22]_i_3 
       (.I0(\branch_data_first_reg_n_0_[2] ),
        .I1(\saved_load_get_reg_n_0_[18] ),
        .I2(\save_sel_reg[1]_21 [1]),
        .I3(\saved_load_get_reg_n_0_[2] ),
        .I4(\save_sel_reg[1]_21 [0]),
        .I5(\saved_pc_reg_n_0_[18] ),
        .O(\Embedded_Trace.trace_din_all[22]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hA0A0CFC0)) 
    \Embedded_Trace.trace_din_all[23]_i_2 
       (.I0(\saved_pc_reg_n_0_[3] ),
        .I1(\Embedded_Trace.trace_din_all[149]_i_3_n_0 ),
        .I2(\save_sel_reg[1]_21 [1]),
        .I3(\Embedded_Trace.trace_din_all_reg_n_0_[167] ),
        .I4(\save_sel_reg[1]_21 [0]),
        .O(\Embedded_Trace.trace_din_all[23]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[23]_i_3 
       (.I0(\branch_data_first_reg_n_0_[3] ),
        .I1(\saved_load_get_reg_n_0_[19] ),
        .I2(\save_sel_reg[1]_21 [1]),
        .I3(\saved_load_get_reg_n_0_[3] ),
        .I4(\save_sel_reg[1]_21 [0]),
        .I5(\saved_pc_reg_n_0_[19] ),
        .O(\Embedded_Trace.trace_din_all[23]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hA0A0CFC0)) 
    \Embedded_Trace.trace_din_all[24]_i_2 
       (.I0(\saved_pc_reg_n_0_[4] ),
        .I1(\Embedded_Trace.trace_din_all[150]_i_3_n_0 ),
        .I2(\save_sel_reg[1]_21 [1]),
        .I3(\Embedded_Trace.trace_din_all_reg_n_0_[168] ),
        .I4(\save_sel_reg[1]_21 [0]),
        .O(\Embedded_Trace.trace_din_all[24]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[24]_i_3 
       (.I0(\branch_data_first_reg_n_0_[4] ),
        .I1(\saved_load_get_reg_n_0_[20] ),
        .I2(\save_sel_reg[1]_21 [1]),
        .I3(\saved_load_get_reg_n_0_[4] ),
        .I4(\save_sel_reg[1]_21 [0]),
        .I5(\saved_pc_reg_n_0_[20] ),
        .O(\Embedded_Trace.trace_din_all[24]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[25]_i_2 
       (.I0(\saved_pc_reg_n_0_[5] ),
        .I1(\Embedded_Trace.trace_din_all[151]_i_3_n_0 ),
        .I2(\save_sel_reg[1]_21 [1]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [108]),
        .I4(\save_sel_reg[1]_21 [0]),
        .I5(\Embedded_Trace.trace_din_all_reg_n_0_[169] ),
        .O(\Embedded_Trace.trace_din_all[25]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[25]_i_3 
       (.I0(\branch_data_first_reg_n_0_[5] ),
        .I1(\saved_load_get_reg_n_0_[21] ),
        .I2(\save_sel_reg[1]_21 [1]),
        .I3(\saved_load_get_reg_n_0_[5] ),
        .I4(\save_sel_reg[1]_21 [0]),
        .I5(\saved_pc_reg_n_0_[21] ),
        .O(\Embedded_Trace.trace_din_all[25]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[26]_i_2 
       (.I0(\saved_pc_reg_n_0_[6] ),
        .I1(\Embedded_Trace.trace_din_all[152]_i_3_n_0 ),
        .I2(\save_sel_reg[1]_21 [1]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [107]),
        .I4(\save_sel_reg[1]_21 [0]),
        .I5(\Embedded_Trace.trace_din_all_reg_n_0_[170] ),
        .O(\Embedded_Trace.trace_din_all[26]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[26]_i_3 
       (.I0(\branch_data_first_reg_n_0_[6] ),
        .I1(\saved_load_get_reg_n_0_[22] ),
        .I2(\save_sel_reg[1]_21 [1]),
        .I3(\saved_load_get_reg_n_0_[6] ),
        .I4(\save_sel_reg[1]_21 [0]),
        .I5(\saved_pc_reg_n_0_[22] ),
        .O(\Embedded_Trace.trace_din_all[26]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[27]_i_2 
       (.I0(\saved_pc_reg_n_0_[7] ),
        .I1(\Embedded_Trace.trace_din_all[153]_i_2_n_0 ),
        .I2(\save_sel_reg[1]_21 [1]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [106]),
        .I4(\save_sel_reg[1]_21 [0]),
        .I5(\Embedded_Trace.trace_din_all_reg_n_0_[171] ),
        .O(\Embedded_Trace.trace_din_all[27]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[27]_i_3 
       (.I0(data7),
        .I1(\saved_load_get_reg_n_0_[23] ),
        .I2(\save_sel_reg[1]_21 [1]),
        .I3(\saved_load_get_reg_n_0_[7] ),
        .I4(\save_sel_reg[1]_21 [0]),
        .I5(\saved_pc_reg_n_0_[23] ),
        .O(\Embedded_Trace.trace_din_all[27]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[28]_i_2 
       (.I0(\saved_pc_reg_n_0_[8] ),
        .I1(\Embedded_Trace.trace_din_all[154]_i_3_n_0 ),
        .I2(\save_sel_reg[1]_21 [1]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [105]),
        .I4(\save_sel_reg[1]_21 [0]),
        .I5(\Embedded_Trace.trace_din_all_reg_n_0_[172] ),
        .O(\Embedded_Trace.trace_din_all[28]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[28]_i_3 
       (.I0(\branch_data_first_reg_n_0_[8] ),
        .I1(\saved_load_get_reg_n_0_[24] ),
        .I2(\save_sel_reg[1]_21 [1]),
        .I3(\saved_load_get_reg_n_0_[8] ),
        .I4(\save_sel_reg[1]_21 [0]),
        .I5(\saved_pc_reg_n_0_[24] ),
        .O(\Embedded_Trace.trace_din_all[28]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hA0A0CFC0)) 
    \Embedded_Trace.trace_din_all[29]_i_2 
       (.I0(\saved_pc_reg_n_0_[9] ),
        .I1(\Embedded_Trace.trace_din_all[155]_i_3_n_0 ),
        .I2(\save_sel_reg[1]_21 [1]),
        .I3(\Embedded_Trace.trace_din_all_reg_n_0_[173] ),
        .I4(\save_sel_reg[1]_21 [0]),
        .O(\Embedded_Trace.trace_din_all[29]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h30BB3088)) 
    \Embedded_Trace.trace_din_all[29]_i_3 
       (.I0(\saved_load_get_reg_n_0_[25] ),
        .I1(\save_sel_reg[1]_21 [1]),
        .I2(\saved_load_get_reg_n_0_[9] ),
        .I3(\save_sel_reg[1]_21 [0]),
        .I4(\saved_pc_reg_n_0_[25] ),
        .O(\Embedded_Trace.trace_din_all[29]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[2]_i_2 
       (.I0(\saved_pc_reg_n_0_[0] ),
        .I1(\Embedded_Trace.trace_din_all[146]_i_3_n_0 ),
        .I2(\save_sel_reg[0]_22 [1]),
        .I3(cycle_count_reg[3]),
        .I4(\save_sel_reg[0]_22 [0]),
        .I5(\Embedded_Trace.trace_din_all_reg_n_0_[146] ),
        .O(\Embedded_Trace.trace_din_all[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[2]_i_3 
       (.I0(\branch_data_first_reg_n_0_[0] ),
        .I1(\saved_load_get_reg_n_0_[16] ),
        .I2(\save_sel_reg[0]_22 [1]),
        .I3(\saved_load_get_reg_n_0_[0] ),
        .I4(\save_sel_reg[0]_22 [0]),
        .I5(\saved_pc_reg_n_0_[16] ),
        .O(\Embedded_Trace.trace_din_all[2]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[30]_i_2 
       (.I0(\saved_pc_reg_n_0_[10] ),
        .I1(\Embedded_Trace.trace_din_all[156]_i_3_n_0 ),
        .I2(\save_sel_reg[1]_21 [1]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [113]),
        .I4(\save_sel_reg[1]_21 [0]),
        .I5(\Embedded_Trace.trace_din_all_reg_n_0_[174] ),
        .O(\Embedded_Trace.trace_din_all[30]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h30BB3088)) 
    \Embedded_Trace.trace_din_all[30]_i_3 
       (.I0(\saved_load_get_reg_n_0_[26] ),
        .I1(\save_sel_reg[1]_21 [1]),
        .I2(\saved_load_get_reg_n_0_[10] ),
        .I3(\save_sel_reg[1]_21 [0]),
        .I4(\saved_pc_reg_n_0_[26] ),
        .O(\Embedded_Trace.trace_din_all[30]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[31]_i_2 
       (.I0(\saved_pc_reg_n_0_[11] ),
        .I1(\Embedded_Trace.trace_din_all[157]_i_3_n_0 ),
        .I2(\save_sel_reg[1]_21 [1]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [112]),
        .I4(\save_sel_reg[1]_21 [0]),
        .I5(\Embedded_Trace.trace_din_all_reg_n_0_[175] ),
        .O(\Embedded_Trace.trace_din_all[31]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h30BB3088)) 
    \Embedded_Trace.trace_din_all[31]_i_3 
       (.I0(\saved_load_get_reg_n_0_[27] ),
        .I1(\save_sel_reg[1]_21 [1]),
        .I2(\saved_load_get_reg_n_0_[11] ),
        .I3(\save_sel_reg[1]_21 [0]),
        .I4(\saved_pc_reg_n_0_[27] ),
        .O(\Embedded_Trace.trace_din_all[31]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[32]_i_2 
       (.I0(\saved_pc_reg_n_0_[12] ),
        .I1(\Embedded_Trace.trace_din_all[158]_i_3_n_0 ),
        .I2(\save_sel_reg[1]_21 [1]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [111]),
        .I4(\save_sel_reg[1]_21 [0]),
        .I5(\Embedded_Trace.trace_din_all_reg_n_0_[176] ),
        .O(\Embedded_Trace.trace_din_all[32]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h30BB3088)) 
    \Embedded_Trace.trace_din_all[32]_i_3 
       (.I0(\saved_load_get_reg_n_0_[28] ),
        .I1(\save_sel_reg[1]_21 [1]),
        .I2(\saved_load_get_reg_n_0_[12] ),
        .I3(\save_sel_reg[1]_21 [0]),
        .I4(\saved_pc_reg_n_0_[28] ),
        .O(\Embedded_Trace.trace_din_all[32]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[33]_i_2 
       (.I0(\saved_pc_reg_n_0_[13] ),
        .I1(\Embedded_Trace.trace_din_all[159]_i_2_n_0 ),
        .I2(\save_sel_reg[1]_21 [1]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [110]),
        .I4(\save_sel_reg[1]_21 [0]),
        .I5(\Embedded_Trace.trace_din_all_reg_n_0_[177] ),
        .O(\Embedded_Trace.trace_din_all[33]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h30BB3088)) 
    \Embedded_Trace.trace_din_all[33]_i_3 
       (.I0(\saved_load_get_reg_n_0_[29] ),
        .I1(\save_sel_reg[1]_21 [1]),
        .I2(\saved_load_get_reg_n_0_[13] ),
        .I3(\save_sel_reg[1]_21 [0]),
        .I4(\saved_pc_reg_n_0_[29] ),
        .O(\Embedded_Trace.trace_din_all[33]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[34]_i_2 
       (.I0(\saved_pc_reg_n_0_[14] ),
        .I1(\Embedded_Trace.trace_din_all[160]_i_3_n_0 ),
        .I2(\save_sel_reg[1]_21 [1]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [109]),
        .I4(\save_sel_reg[1]_21 [0]),
        .I5(\Embedded_Trace.trace_din_all_reg_n_0_[178] ),
        .O(\Embedded_Trace.trace_din_all[34]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h30BB3088)) 
    \Embedded_Trace.trace_din_all[34]_i_3 
       (.I0(data6),
        .I1(\save_sel_reg[1]_21 [1]),
        .I2(\saved_load_get_reg_n_0_[14] ),
        .I3(\save_sel_reg[1]_21 [0]),
        .I4(data4),
        .O(\Embedded_Trace.trace_din_all[34]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[35]_i_2 
       (.I0(data3),
        .I1(\Embedded_Trace.trace_din_all[161]_i_2_n_0 ),
        .I2(\save_sel_reg[1]_21 [1]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [114]),
        .I4(\save_sel_reg[1]_21 [0]),
        .I5(\Embedded_Trace.trace_din_all_reg_n_0_[179] ),
        .O(\Embedded_Trace.trace_din_all[35]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h30BB3088)) 
    \Embedded_Trace.trace_din_all[35]_i_3 
       (.I0(\saved_load_get_reg_n_0_[31] ),
        .I1(\save_sel_reg[1]_21 [1]),
        .I2(data5),
        .I3(\save_sel_reg[1]_21 [0]),
        .I4(\saved_pc_reg_n_0_[31] ),
        .O(\Embedded_Trace.trace_din_all[35]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h00F0FC0A)) 
    \Embedded_Trace.trace_din_all[36]_i_1 
       (.I0(\Embedded_Trace.trace_din_all_reg_n_0_[180] ),
        .I1(branch_event),
        .I2(\save_sel_reg[2]_20 [2]),
        .I3(\save_sel_reg[2]_20 [1]),
        .I4(\save_sel_reg[2]_20 [0]),
        .O(\Embedded_Trace.trace_din_all[36]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h333033EE333000EE)) 
    \Embedded_Trace.trace_din_all[37]_i_1 
       (.I0(\Embedded_Trace.trace_din_all_reg_n_0_[181] ),
        .I1(\save_sel_reg[2]_20 [2]),
        .I2(branch_event),
        .I3(\save_sel_reg[2]_20 [0]),
        .I4(\save_sel_reg[2]_20 [1]),
        .I5(\Embedded_Trace.trace_din_all_reg[80]_0 [72]),
        .O(\Embedded_Trace.trace_din_all[37]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hA0A0CFC0)) 
    \Embedded_Trace.trace_din_all[38]_i_2 
       (.I0(\saved_pc_reg_n_0_[0] ),
        .I1(\Embedded_Trace.trace_din_all[146]_i_3_n_0 ),
        .I2(\save_sel_reg[2]_20 [1]),
        .I3(\Embedded_Trace.trace_din_all_reg_n_0_[182] ),
        .I4(\save_sel_reg[2]_20 [0]),
        .O(\Embedded_Trace.trace_din_all[38]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[38]_i_3 
       (.I0(\branch_data_first_reg_n_0_[0] ),
        .I1(\saved_load_get_reg_n_0_[16] ),
        .I2(\save_sel_reg[2]_20 [1]),
        .I3(\saved_load_get_reg_n_0_[0] ),
        .I4(\save_sel_reg[2]_20 [0]),
        .I5(\saved_pc_reg_n_0_[16] ),
        .O(\Embedded_Trace.trace_din_all[38]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAACCFFF0AACC00F0)) 
    \Embedded_Trace.trace_din_all[39]_i_2 
       (.I0(\saved_pc_reg_n_0_[1] ),
        .I1(\Embedded_Trace.trace_din_all[147]_i_3_n_0 ),
        .I2(\Embedded_Trace.trace_din_all_reg_n_0_[183] ),
        .I3(\save_sel_reg[2]_20 [0]),
        .I4(\save_sel_reg[2]_20 [1]),
        .I5(\Embedded_Trace.trace_din_all_reg[80]_0 [72]),
        .O(\Embedded_Trace.trace_din_all[39]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[39]_i_3 
       (.I0(\branch_data_first_reg_n_0_[1] ),
        .I1(\saved_load_get_reg_n_0_[17] ),
        .I2(\save_sel_reg[2]_20 [1]),
        .I3(\saved_load_get_reg_n_0_[1] ),
        .I4(\save_sel_reg[2]_20 [0]),
        .I5(\saved_pc_reg_n_0_[17] ),
        .O(\Embedded_Trace.trace_din_all[39]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[3]_i_2 
       (.I0(\saved_pc_reg_n_0_[1] ),
        .I1(\Embedded_Trace.trace_din_all[147]_i_3_n_0 ),
        .I2(\save_sel_reg[0]_22 [1]),
        .I3(cycle_count_reg[4]),
        .I4(\save_sel_reg[0]_22 [0]),
        .I5(\Embedded_Trace.trace_din_all_reg_n_0_[147] ),
        .O(\Embedded_Trace.trace_din_all[3]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[3]_i_3 
       (.I0(\branch_data_first_reg_n_0_[1] ),
        .I1(\saved_load_get_reg_n_0_[17] ),
        .I2(\save_sel_reg[0]_22 [1]),
        .I3(\saved_load_get_reg_n_0_[1] ),
        .I4(\save_sel_reg[0]_22 [0]),
        .I5(\saved_pc_reg_n_0_[17] ),
        .O(\Embedded_Trace.trace_din_all[3]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hA0A0CFC0)) 
    \Embedded_Trace.trace_din_all[40]_i_2 
       (.I0(\saved_pc_reg_n_0_[2] ),
        .I1(\Embedded_Trace.trace_din_all[148]_i_3_n_0 ),
        .I2(\save_sel_reg[2]_20 [1]),
        .I3(\Embedded_Trace.trace_din_all_reg_n_0_[184] ),
        .I4(\save_sel_reg[2]_20 [0]),
        .O(\Embedded_Trace.trace_din_all[40]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[40]_i_3 
       (.I0(\branch_data_first_reg_n_0_[2] ),
        .I1(\saved_load_get_reg_n_0_[18] ),
        .I2(\save_sel_reg[2]_20 [1]),
        .I3(\saved_load_get_reg_n_0_[2] ),
        .I4(\save_sel_reg[2]_20 [0]),
        .I5(\saved_pc_reg_n_0_[18] ),
        .O(\Embedded_Trace.trace_din_all[40]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAACCFFF0AACC00F0)) 
    \Embedded_Trace.trace_din_all[41]_i_2 
       (.I0(\saved_pc_reg_n_0_[3] ),
        .I1(\Embedded_Trace.trace_din_all[149]_i_3_n_0 ),
        .I2(\Embedded_Trace.trace_din_all_reg_n_0_[185] ),
        .I3(\save_sel_reg[2]_20 [0]),
        .I4(\save_sel_reg[2]_20 [1]),
        .I5(\Embedded_Trace.trace_din_all_reg[80]_0 [72]),
        .O(\Embedded_Trace.trace_din_all[41]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[41]_i_3 
       (.I0(\branch_data_first_reg_n_0_[3] ),
        .I1(\saved_load_get_reg_n_0_[19] ),
        .I2(\save_sel_reg[2]_20 [1]),
        .I3(\saved_load_get_reg_n_0_[3] ),
        .I4(\save_sel_reg[2]_20 [0]),
        .I5(\saved_pc_reg_n_0_[19] ),
        .O(\Embedded_Trace.trace_din_all[41]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[42]_i_2 
       (.I0(\saved_pc_reg_n_0_[4] ),
        .I1(\Embedded_Trace.trace_din_all[150]_i_3_n_0 ),
        .I2(\save_sel_reg[2]_20 [1]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [1]),
        .I4(\save_sel_reg[2]_20 [0]),
        .I5(\Embedded_Trace.trace_din_all_reg_n_0_[186] ),
        .O(\Embedded_Trace.trace_din_all[42]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[42]_i_3 
       (.I0(\branch_data_first_reg_n_0_[4] ),
        .I1(\saved_load_get_reg_n_0_[20] ),
        .I2(\save_sel_reg[2]_20 [1]),
        .I3(\saved_load_get_reg_n_0_[4] ),
        .I4(\save_sel_reg[2]_20 [0]),
        .I5(\saved_pc_reg_n_0_[20] ),
        .O(\Embedded_Trace.trace_din_all[42]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[43]_i_2 
       (.I0(\saved_pc_reg_n_0_[5] ),
        .I1(\Embedded_Trace.trace_din_all[151]_i_3_n_0 ),
        .I2(\save_sel_reg[2]_20 [1]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [0]),
        .I4(\save_sel_reg[2]_20 [0]),
        .I5(\Embedded_Trace.trace_din_all_reg_n_0_[187] ),
        .O(\Embedded_Trace.trace_din_all[43]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[43]_i_3 
       (.I0(\branch_data_first_reg_n_0_[5] ),
        .I1(\saved_load_get_reg_n_0_[21] ),
        .I2(\save_sel_reg[2]_20 [1]),
        .I3(\saved_load_get_reg_n_0_[5] ),
        .I4(\save_sel_reg[2]_20 [0]),
        .I5(\saved_pc_reg_n_0_[21] ),
        .O(\Embedded_Trace.trace_din_all[43]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[44]_i_2 
       (.I0(\saved_pc_reg_n_0_[6] ),
        .I1(\Embedded_Trace.trace_din_all[152]_i_3_n_0 ),
        .I2(\save_sel_reg[2]_20 [1]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [6]),
        .I4(\save_sel_reg[2]_20 [0]),
        .I5(\Embedded_Trace.trace_din_all_reg_n_0_[188] ),
        .O(\Embedded_Trace.trace_din_all[44]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[44]_i_3 
       (.I0(\branch_data_first_reg_n_0_[6] ),
        .I1(\saved_load_get_reg_n_0_[22] ),
        .I2(\save_sel_reg[2]_20 [1]),
        .I3(\saved_load_get_reg_n_0_[6] ),
        .I4(\save_sel_reg[2]_20 [0]),
        .I5(\saved_pc_reg_n_0_[22] ),
        .O(\Embedded_Trace.trace_din_all[44]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[45]_i_2 
       (.I0(\saved_pc_reg_n_0_[7] ),
        .I1(\Embedded_Trace.trace_din_all[153]_i_2_n_0 ),
        .I2(\save_sel_reg[2]_20 [1]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [5]),
        .I4(\save_sel_reg[2]_20 [0]),
        .I5(\Embedded_Trace.trace_din_all_reg_n_0_[189] ),
        .O(\Embedded_Trace.trace_din_all[45]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[45]_i_3 
       (.I0(data7),
        .I1(\saved_load_get_reg_n_0_[23] ),
        .I2(\save_sel_reg[2]_20 [1]),
        .I3(\saved_load_get_reg_n_0_[7] ),
        .I4(\save_sel_reg[2]_20 [0]),
        .I5(\saved_pc_reg_n_0_[23] ),
        .O(\Embedded_Trace.trace_din_all[45]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[46]_i_2 
       (.I0(\saved_pc_reg_n_0_[8] ),
        .I1(\Embedded_Trace.trace_din_all[154]_i_3_n_0 ),
        .I2(\save_sel_reg[2]_20 [1]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [4]),
        .I4(\save_sel_reg[2]_20 [0]),
        .I5(\Embedded_Trace.trace_din_all_reg_n_0_[190] ),
        .O(\Embedded_Trace.trace_din_all[46]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[46]_i_3 
       (.I0(\branch_data_first_reg_n_0_[8] ),
        .I1(\saved_load_get_reg_n_0_[24] ),
        .I2(\save_sel_reg[2]_20 [1]),
        .I3(\saved_load_get_reg_n_0_[8] ),
        .I4(\save_sel_reg[2]_20 [0]),
        .I5(\saved_pc_reg_n_0_[24] ),
        .O(\Embedded_Trace.trace_din_all[46]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[47]_i_2 
       (.I0(\saved_pc_reg_n_0_[9] ),
        .I1(\Embedded_Trace.trace_din_all[155]_i_3_n_0 ),
        .I2(\save_sel_reg[2]_20 [1]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [3]),
        .I4(\save_sel_reg[2]_20 [0]),
        .I5(\Embedded_Trace.trace_din_all_reg_n_0_[191] ),
        .O(\Embedded_Trace.trace_din_all[47]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h30BB3088)) 
    \Embedded_Trace.trace_din_all[47]_i_3 
       (.I0(\saved_load_get_reg_n_0_[25] ),
        .I1(\save_sel_reg[2]_20 [1]),
        .I2(\saved_load_get_reg_n_0_[9] ),
        .I3(\save_sel_reg[2]_20 [0]),
        .I4(\saved_pc_reg_n_0_[25] ),
        .O(\Embedded_Trace.trace_din_all[47]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Embedded_Trace.trace_din_all[48]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[48]_i_2_n_0 ),
        .I1(\save_sel_reg[2]_20 [2]),
        .I2(\Embedded_Trace.trace_din_all[48]_i_3_n_0 ),
        .I3(\save_sel_reg[2]_20 [1]),
        .I4(\Embedded_Trace.trace_din_all[48]_i_4_n_0 ),
        .O(\Embedded_Trace.trace_din_all[48]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h30BB3088)) 
    \Embedded_Trace.trace_din_all[48]_i_2 
       (.I0(\saved_load_get_reg_n_0_[26] ),
        .I1(\save_sel_reg[2]_20 [1]),
        .I2(\saved_load_get_reg_n_0_[10] ),
        .I3(\save_sel_reg[2]_20 [0]),
        .I4(\saved_pc_reg_n_0_[26] ),
        .O(\Embedded_Trace.trace_din_all[48]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Embedded_Trace.trace_din_all[48]_i_3 
       (.I0(\saved_pc_reg_n_0_[10] ),
        .I1(\save_sel_reg[2]_20 [0]),
        .I2(event_data[10]),
        .I3(branch_event),
        .I4(\branch_data_reg_n_0_[10] ),
        .O(\Embedded_Trace.trace_din_all[48]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \Embedded_Trace.trace_din_all[48]_i_4 
       (.I0(\Embedded_Trace.trace_din_all_reg[80]_0 [38]),
        .I1(\Embedded_Trace.trace_din_all_reg[80]_0 [0]),
        .I2(\Embedded_Trace.trace_din_all_reg[80]_0 [104]),
        .I3(\save_sel_reg[2]_20 [0]),
        .I4(\Embedded_Trace.trace_din_all_reg_n_0_[192] ),
        .O(\Embedded_Trace.trace_din_all[48]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Embedded_Trace.trace_din_all[49]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[49]_i_2_n_0 ),
        .I1(\save_sel_reg[2]_20 [2]),
        .I2(\Embedded_Trace.trace_din_all[49]_i_3_n_0 ),
        .I3(\save_sel_reg[2]_20 [1]),
        .I4(\Embedded_Trace.trace_din_all[49]_i_4_n_0 ),
        .O(\Embedded_Trace.trace_din_all[49]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h30BB3088)) 
    \Embedded_Trace.trace_din_all[49]_i_2 
       (.I0(\saved_load_get_reg_n_0_[27] ),
        .I1(\save_sel_reg[2]_20 [1]),
        .I2(\saved_load_get_reg_n_0_[11] ),
        .I3(\save_sel_reg[2]_20 [0]),
        .I4(\saved_pc_reg_n_0_[27] ),
        .O(\Embedded_Trace.trace_din_all[49]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Embedded_Trace.trace_din_all[49]_i_3 
       (.I0(\saved_pc_reg_n_0_[11] ),
        .I1(\save_sel_reg[2]_20 [0]),
        .I2(event_data[11]),
        .I3(branch_event),
        .I4(\branch_data_reg_n_0_[11] ),
        .O(\Embedded_Trace.trace_din_all[49]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \Embedded_Trace.trace_din_all[49]_i_4 
       (.I0(\Embedded_Trace.trace_din_all_reg[80]_0 [37]),
        .I1(\Embedded_Trace.trace_din_all_reg[80]_0 [0]),
        .I2(\Embedded_Trace.trace_din_all_reg[80]_0 [103]),
        .I3(\save_sel_reg[2]_20 [0]),
        .I4(\Embedded_Trace.trace_din_all_reg_n_0_[193] ),
        .O(\Embedded_Trace.trace_din_all[49]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[4]_i_2 
       (.I0(\saved_pc_reg_n_0_[2] ),
        .I1(\Embedded_Trace.trace_din_all[148]_i_3_n_0 ),
        .I2(\save_sel_reg[0]_22 [1]),
        .I3(cycle_count_reg[5]),
        .I4(\save_sel_reg[0]_22 [0]),
        .I5(\Embedded_Trace.trace_din_all_reg_n_0_[148] ),
        .O(\Embedded_Trace.trace_din_all[4]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[4]_i_3 
       (.I0(\branch_data_first_reg_n_0_[2] ),
        .I1(\saved_load_get_reg_n_0_[18] ),
        .I2(\save_sel_reg[0]_22 [1]),
        .I3(\saved_load_get_reg_n_0_[2] ),
        .I4(\save_sel_reg[0]_22 [0]),
        .I5(\saved_pc_reg_n_0_[18] ),
        .O(\Embedded_Trace.trace_din_all[4]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Embedded_Trace.trace_din_all[50]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[50]_i_2_n_0 ),
        .I1(\save_sel_reg[2]_20 [2]),
        .I2(\Embedded_Trace.trace_din_all[50]_i_3_n_0 ),
        .I3(\save_sel_reg[2]_20 [1]),
        .I4(\Embedded_Trace.trace_din_all[50]_i_4_n_0 ),
        .O(\Embedded_Trace.trace_din_all[50]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h30BB3088)) 
    \Embedded_Trace.trace_din_all[50]_i_2 
       (.I0(\saved_load_get_reg_n_0_[28] ),
        .I1(\save_sel_reg[2]_20 [1]),
        .I2(\saved_load_get_reg_n_0_[12] ),
        .I3(\save_sel_reg[2]_20 [0]),
        .I4(\saved_pc_reg_n_0_[28] ),
        .O(\Embedded_Trace.trace_din_all[50]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Embedded_Trace.trace_din_all[50]_i_3 
       (.I0(\saved_pc_reg_n_0_[12] ),
        .I1(\save_sel_reg[2]_20 [0]),
        .I2(event_data[12]),
        .I3(branch_event),
        .I4(\branch_data_reg_n_0_[12] ),
        .O(\Embedded_Trace.trace_din_all[50]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \Embedded_Trace.trace_din_all[50]_i_4 
       (.I0(\Embedded_Trace.trace_din_all_reg[80]_0 [36]),
        .I1(\Embedded_Trace.trace_din_all_reg[80]_0 [0]),
        .I2(\Embedded_Trace.trace_din_all_reg[80]_0 [102]),
        .I3(\save_sel_reg[2]_20 [0]),
        .I4(\Embedded_Trace.trace_din_all_reg_n_0_[194] ),
        .O(\Embedded_Trace.trace_din_all[50]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Embedded_Trace.trace_din_all[51]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[51]_i_2_n_0 ),
        .I1(\save_sel_reg[2]_20 [2]),
        .I2(\Embedded_Trace.trace_din_all[51]_i_3_n_0 ),
        .I3(\save_sel_reg[2]_20 [1]),
        .I4(\Embedded_Trace.trace_din_all[51]_i_4_n_0 ),
        .O(\Embedded_Trace.trace_din_all[51]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h30BB3088)) 
    \Embedded_Trace.trace_din_all[51]_i_2 
       (.I0(\saved_load_get_reg_n_0_[29] ),
        .I1(\save_sel_reg[2]_20 [1]),
        .I2(\saved_load_get_reg_n_0_[13] ),
        .I3(\save_sel_reg[2]_20 [0]),
        .I4(\saved_pc_reg_n_0_[29] ),
        .O(\Embedded_Trace.trace_din_all[51]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair100" *) 
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Embedded_Trace.trace_din_all[51]_i_3 
       (.I0(\saved_pc_reg_n_0_[13] ),
        .I1(\save_sel_reg[2]_20 [0]),
        .I2(event_data[13]),
        .I3(branch_event),
        .I4(\branch_data_reg_n_0_[13] ),
        .O(\Embedded_Trace.trace_din_all[51]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \Embedded_Trace.trace_din_all[51]_i_4 
       (.I0(\Embedded_Trace.trace_din_all_reg[80]_0 [35]),
        .I1(\Embedded_Trace.trace_din_all_reg[80]_0 [0]),
        .I2(\Embedded_Trace.trace_din_all_reg[80]_0 [101]),
        .I3(\save_sel_reg[2]_20 [0]),
        .I4(\Embedded_Trace.trace_din_all_reg_n_0_[195] ),
        .O(\Embedded_Trace.trace_din_all[51]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Embedded_Trace.trace_din_all[52]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[52]_i_2_n_0 ),
        .I1(\save_sel_reg[2]_20 [2]),
        .I2(\Embedded_Trace.trace_din_all[52]_i_3_n_0 ),
        .I3(\save_sel_reg[2]_20 [1]),
        .I4(\Embedded_Trace.trace_din_all[52]_i_4_n_0 ),
        .O(\Embedded_Trace.trace_din_all[52]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h30BB3088)) 
    \Embedded_Trace.trace_din_all[52]_i_2 
       (.I0(data6),
        .I1(\save_sel_reg[2]_20 [1]),
        .I2(\saved_load_get_reg_n_0_[14] ),
        .I3(\save_sel_reg[2]_20 [0]),
        .I4(data4),
        .O(\Embedded_Trace.trace_din_all[52]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Embedded_Trace.trace_din_all[52]_i_3 
       (.I0(\saved_pc_reg_n_0_[14] ),
        .I1(\save_sel_reg[2]_20 [0]),
        .I2(event_data[14]),
        .I3(branch_event),
        .I4(\branch_data_reg_n_0_[14] ),
        .O(\Embedded_Trace.trace_din_all[52]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \Embedded_Trace.trace_din_all[52]_i_4 
       (.I0(\Embedded_Trace.trace_din_all_reg[80]_0 [34]),
        .I1(\Embedded_Trace.trace_din_all_reg[80]_0 [0]),
        .I2(\Embedded_Trace.trace_din_all_reg[80]_0 [100]),
        .I3(\save_sel_reg[2]_20 [0]),
        .I4(data0),
        .O(\Embedded_Trace.trace_din_all[52]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Embedded_Trace.trace_din_all[53]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[53]_i_2_n_0 ),
        .I1(\save_sel_reg[2]_20 [2]),
        .I2(\Embedded_Trace.trace_din_all[53]_i_3_n_0 ),
        .I3(\save_sel_reg[2]_20 [1]),
        .I4(\Embedded_Trace.trace_din_all[53]_i_4_n_0 ),
        .O(\Embedded_Trace.trace_din_all[53]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h30BB3088)) 
    \Embedded_Trace.trace_din_all[53]_i_2 
       (.I0(\saved_load_get_reg_n_0_[31] ),
        .I1(\save_sel_reg[2]_20 [1]),
        .I2(data5),
        .I3(\save_sel_reg[2]_20 [0]),
        .I4(\saved_pc_reg_n_0_[31] ),
        .O(\Embedded_Trace.trace_din_all[53]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Embedded_Trace.trace_din_all[53]_i_3 
       (.I0(data3),
        .I1(\save_sel_reg[2]_20 [0]),
        .I2(event_data[15]),
        .I3(branch_event),
        .I4(\branch_data_reg_n_0_[15] ),
        .O(\Embedded_Trace.trace_din_all[53]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \Embedded_Trace.trace_din_all[53]_i_4 
       (.I0(\Embedded_Trace.trace_din_all_reg[80]_0 [33]),
        .I1(\Embedded_Trace.trace_din_all_reg[80]_0 [0]),
        .I2(\Embedded_Trace.trace_din_all_reg[80]_0 [99]),
        .I3(\save_sel_reg[2]_20 [0]),
        .I4(\Embedded_Trace.trace_din_all_reg_n_0_[197] ),
        .O(\Embedded_Trace.trace_din_all[53]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF4440)) 
    \Embedded_Trace.trace_din_all[54]_i_1 
       (.I0(\save_sel_reg[3]_19 [0]),
        .I1(\save_sel_reg[3]_19 [1]),
        .I2(\save_sel_reg[3]_19 [2]),
        .I3(branch_event),
        .I4(\Embedded_Trace.trace_din_all[54]_i_2_n_0 ),
        .O(\Embedded_Trace.trace_din_all[54]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h4444444440444000)) 
    \Embedded_Trace.trace_din_all[54]_i_2 
       (.I0(\save_sel_reg[3]_19 [1]),
        .I1(\save_sel_reg[3]_19 [0]),
        .I2(\Embedded_Trace.trace_din_all_reg[80]_0 [32]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [0]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [98]),
        .I5(\save_sel_reg[3]_19 [2]),
        .O(\Embedded_Trace.trace_din_all[54]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h1F10)) 
    \Embedded_Trace.trace_din_all[55]_i_1 
       (.I0(\save_sel_reg[3]_19 [1]),
        .I1(\save_sel_reg[3]_19 [0]),
        .I2(\save_sel_reg[3]_19 [2]),
        .I3(\Embedded_Trace.trace_din_all[55]_i_2_n_0 ),
        .O(\Embedded_Trace.trace_din_all[55]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFF00B800B800)) 
    \Embedded_Trace.trace_din_all[55]_i_2 
       (.I0(\Embedded_Trace.trace_din_all_reg[80]_0 [31]),
        .I1(\Embedded_Trace.trace_din_all_reg[80]_0 [0]),
        .I2(\Embedded_Trace.trace_din_all_reg[80]_0 [97]),
        .I3(\save_sel_reg[3]_19 [0]),
        .I4(branch_event),
        .I5(\save_sel_reg[3]_19 [1]),
        .O(\Embedded_Trace.trace_din_all[55]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8888888B888)) 
    \Embedded_Trace.trace_din_all[56]_i_2 
       (.I0(\Embedded_Trace.trace_din_all[56]_i_4_n_0 ),
        .I1(\save_sel_reg[3]_19 [1]),
        .I2(\save_sel_reg[3]_19 [0]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [96]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [0]),
        .I5(\Embedded_Trace.trace_din_all_reg[80]_0 [30]),
        .O(\Embedded_Trace.trace_din_all[56]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[56]_i_3 
       (.I0(\branch_data_first_reg_n_0_[0] ),
        .I1(\saved_load_get_reg_n_0_[16] ),
        .I2(\save_sel_reg[3]_19 [1]),
        .I3(\saved_load_get_reg_n_0_[0] ),
        .I4(\save_sel_reg[3]_19 [0]),
        .I5(\saved_pc_reg_n_0_[16] ),
        .O(\Embedded_Trace.trace_din_all[56]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Embedded_Trace.trace_din_all[56]_i_4 
       (.I0(\saved_pc_reg_n_0_[0] ),
        .I1(\save_sel_reg[3]_19 [0]),
        .I2(event_data[0]),
        .I3(branch_event),
        .I4(p_0_in__0[8]),
        .O(\Embedded_Trace.trace_din_all[56]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8888888B888)) 
    \Embedded_Trace.trace_din_all[57]_i_2 
       (.I0(\Embedded_Trace.trace_din_all[57]_i_4_n_0 ),
        .I1(\save_sel_reg[3]_19 [1]),
        .I2(\save_sel_reg[3]_19 [0]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [95]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [0]),
        .I5(\Embedded_Trace.trace_din_all_reg[80]_0 [29]),
        .O(\Embedded_Trace.trace_din_all[57]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[57]_i_3 
       (.I0(\branch_data_first_reg_n_0_[1] ),
        .I1(\saved_load_get_reg_n_0_[17] ),
        .I2(\save_sel_reg[3]_19 [1]),
        .I3(\saved_load_get_reg_n_0_[1] ),
        .I4(\save_sel_reg[3]_19 [0]),
        .I5(\saved_pc_reg_n_0_[17] ),
        .O(\Embedded_Trace.trace_din_all[57]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Embedded_Trace.trace_din_all[57]_i_4 
       (.I0(\saved_pc_reg_n_0_[1] ),
        .I1(\save_sel_reg[3]_19 [0]),
        .I2(event_data[1]),
        .I3(branch_event),
        .I4(p_0_in__0[7]),
        .O(\Embedded_Trace.trace_din_all[57]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8888888B888)) 
    \Embedded_Trace.trace_din_all[58]_i_2 
       (.I0(\Embedded_Trace.trace_din_all[58]_i_4_n_0 ),
        .I1(\save_sel_reg[3]_19 [1]),
        .I2(\save_sel_reg[3]_19 [0]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [94]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [0]),
        .I5(\Embedded_Trace.trace_din_all_reg[80]_0 [28]),
        .O(\Embedded_Trace.trace_din_all[58]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[58]_i_3 
       (.I0(\branch_data_first_reg_n_0_[2] ),
        .I1(\saved_load_get_reg_n_0_[18] ),
        .I2(\save_sel_reg[3]_19 [1]),
        .I3(\saved_load_get_reg_n_0_[2] ),
        .I4(\save_sel_reg[3]_19 [0]),
        .I5(\saved_pc_reg_n_0_[18] ),
        .O(\Embedded_Trace.trace_din_all[58]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Embedded_Trace.trace_din_all[58]_i_4 
       (.I0(\saved_pc_reg_n_0_[2] ),
        .I1(\save_sel_reg[3]_19 [0]),
        .I2(event_data[2]),
        .I3(branch_event),
        .I4(p_0_in__0[6]),
        .O(\Embedded_Trace.trace_din_all[58]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8888888B888)) 
    \Embedded_Trace.trace_din_all[59]_i_2 
       (.I0(\Embedded_Trace.trace_din_all[59]_i_4_n_0 ),
        .I1(\save_sel_reg[3]_19 [1]),
        .I2(\save_sel_reg[3]_19 [0]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [93]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [0]),
        .I5(\Embedded_Trace.trace_din_all_reg[80]_0 [27]),
        .O(\Embedded_Trace.trace_din_all[59]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[59]_i_3 
       (.I0(\branch_data_first_reg_n_0_[3] ),
        .I1(\saved_load_get_reg_n_0_[19] ),
        .I2(\save_sel_reg[3]_19 [1]),
        .I3(\saved_load_get_reg_n_0_[3] ),
        .I4(\save_sel_reg[3]_19 [0]),
        .I5(\saved_pc_reg_n_0_[19] ),
        .O(\Embedded_Trace.trace_din_all[59]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Embedded_Trace.trace_din_all[59]_i_4 
       (.I0(\saved_pc_reg_n_0_[3] ),
        .I1(\save_sel_reg[3]_19 [0]),
        .I2(event_data[3]),
        .I3(branch_event),
        .I4(p_0_in__0[5]),
        .O(\Embedded_Trace.trace_din_all[59]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[5]_i_2 
       (.I0(\saved_pc_reg_n_0_[3] ),
        .I1(\Embedded_Trace.trace_din_all[149]_i_3_n_0 ),
        .I2(\save_sel_reg[0]_22 [1]),
        .I3(cycle_count_reg[6]),
        .I4(\save_sel_reg[0]_22 [0]),
        .I5(\Embedded_Trace.trace_din_all_reg_n_0_[149] ),
        .O(\Embedded_Trace.trace_din_all[5]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[5]_i_3 
       (.I0(\branch_data_first_reg_n_0_[3] ),
        .I1(\saved_load_get_reg_n_0_[19] ),
        .I2(\save_sel_reg[0]_22 [1]),
        .I3(\saved_load_get_reg_n_0_[3] ),
        .I4(\save_sel_reg[0]_22 [0]),
        .I5(\saved_pc_reg_n_0_[19] ),
        .O(\Embedded_Trace.trace_din_all[5]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8888888B888)) 
    \Embedded_Trace.trace_din_all[60]_i_2 
       (.I0(\Embedded_Trace.trace_din_all[60]_i_4_n_0 ),
        .I1(\save_sel_reg[3]_19 [1]),
        .I2(\save_sel_reg[3]_19 [0]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [92]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [0]),
        .I5(\Embedded_Trace.trace_din_all_reg[80]_0 [26]),
        .O(\Embedded_Trace.trace_din_all[60]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[60]_i_3 
       (.I0(\branch_data_first_reg_n_0_[4] ),
        .I1(\saved_load_get_reg_n_0_[20] ),
        .I2(\save_sel_reg[3]_19 [1]),
        .I3(\saved_load_get_reg_n_0_[4] ),
        .I4(\save_sel_reg[3]_19 [0]),
        .I5(\saved_pc_reg_n_0_[20] ),
        .O(\Embedded_Trace.trace_din_all[60]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Embedded_Trace.trace_din_all[60]_i_4 
       (.I0(\saved_pc_reg_n_0_[4] ),
        .I1(\save_sel_reg[3]_19 [0]),
        .I2(event_data[4]),
        .I3(branch_event),
        .I4(p_0_in__0[4]),
        .O(\Embedded_Trace.trace_din_all[60]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8888888B888)) 
    \Embedded_Trace.trace_din_all[61]_i_2 
       (.I0(\Embedded_Trace.trace_din_all[61]_i_4_n_0 ),
        .I1(\save_sel_reg[3]_19 [1]),
        .I2(\save_sel_reg[3]_19 [0]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [91]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [0]),
        .I5(\Embedded_Trace.trace_din_all_reg[80]_0 [25]),
        .O(\Embedded_Trace.trace_din_all[61]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[61]_i_3 
       (.I0(\branch_data_first_reg_n_0_[5] ),
        .I1(\saved_load_get_reg_n_0_[21] ),
        .I2(\save_sel_reg[3]_19 [1]),
        .I3(\saved_load_get_reg_n_0_[5] ),
        .I4(\save_sel_reg[3]_19 [0]),
        .I5(\saved_pc_reg_n_0_[21] ),
        .O(\Embedded_Trace.trace_din_all[61]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Embedded_Trace.trace_din_all[61]_i_4 
       (.I0(\saved_pc_reg_n_0_[5] ),
        .I1(\save_sel_reg[3]_19 [0]),
        .I2(event_data[5]),
        .I3(branch_event),
        .I4(p_0_in__0[3]),
        .O(\Embedded_Trace.trace_din_all[61]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8888888B888)) 
    \Embedded_Trace.trace_din_all[62]_i_2 
       (.I0(\Embedded_Trace.trace_din_all[62]_i_4_n_0 ),
        .I1(\save_sel_reg[3]_19 [1]),
        .I2(\save_sel_reg[3]_19 [0]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [90]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [0]),
        .I5(\Embedded_Trace.trace_din_all_reg[80]_0 [24]),
        .O(\Embedded_Trace.trace_din_all[62]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[62]_i_3 
       (.I0(\branch_data_first_reg_n_0_[6] ),
        .I1(\saved_load_get_reg_n_0_[22] ),
        .I2(\save_sel_reg[3]_19 [1]),
        .I3(\saved_load_get_reg_n_0_[6] ),
        .I4(\save_sel_reg[3]_19 [0]),
        .I5(\saved_pc_reg_n_0_[22] ),
        .O(\Embedded_Trace.trace_din_all[62]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Embedded_Trace.trace_din_all[62]_i_4 
       (.I0(\saved_pc_reg_n_0_[6] ),
        .I1(\save_sel_reg[3]_19 [0]),
        .I2(event_data[6]),
        .I3(branch_event),
        .I4(p_0_in__0[2]),
        .O(\Embedded_Trace.trace_din_all[62]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8888888B888)) 
    \Embedded_Trace.trace_din_all[63]_i_2 
       (.I0(\Embedded_Trace.trace_din_all[63]_i_4_n_0 ),
        .I1(\save_sel_reg[3]_19 [1]),
        .I2(\save_sel_reg[3]_19 [0]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [89]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [0]),
        .I5(\Embedded_Trace.trace_din_all_reg[80]_0 [23]),
        .O(\Embedded_Trace.trace_din_all[63]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[63]_i_3 
       (.I0(data7),
        .I1(\saved_load_get_reg_n_0_[23] ),
        .I2(\save_sel_reg[3]_19 [1]),
        .I3(\saved_load_get_reg_n_0_[7] ),
        .I4(\save_sel_reg[3]_19 [0]),
        .I5(\saved_pc_reg_n_0_[23] ),
        .O(\Embedded_Trace.trace_din_all[63]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Embedded_Trace.trace_din_all[63]_i_4 
       (.I0(\saved_pc_reg_n_0_[7] ),
        .I1(\save_sel_reg[3]_19 [0]),
        .I2(event_data[7]),
        .I3(branch_event),
        .I4(p_0_in__0[1]),
        .O(\Embedded_Trace.trace_din_all[63]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8888888B888)) 
    \Embedded_Trace.trace_din_all[64]_i_2 
       (.I0(\Embedded_Trace.trace_din_all[64]_i_4_n_0 ),
        .I1(\save_sel_reg[3]_19 [1]),
        .I2(\save_sel_reg[3]_19 [0]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [88]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [0]),
        .I5(\Embedded_Trace.trace_din_all_reg[80]_0 [22]),
        .O(\Embedded_Trace.trace_din_all[64]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[64]_i_3 
       (.I0(\branch_data_first_reg_n_0_[8] ),
        .I1(\saved_load_get_reg_n_0_[24] ),
        .I2(\save_sel_reg[3]_19 [1]),
        .I3(\saved_load_get_reg_n_0_[8] ),
        .I4(\save_sel_reg[3]_19 [0]),
        .I5(\saved_pc_reg_n_0_[24] ),
        .O(\Embedded_Trace.trace_din_all[64]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Embedded_Trace.trace_din_all[64]_i_4 
       (.I0(\saved_pc_reg_n_0_[8] ),
        .I1(\save_sel_reg[3]_19 [0]),
        .I2(event_data[8]),
        .I3(branch_event),
        .I4(p_0_in__0[0]),
        .O(\Embedded_Trace.trace_din_all[64]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8888888B888)) 
    \Embedded_Trace.trace_din_all[65]_i_2 
       (.I0(\Embedded_Trace.trace_din_all[65]_i_4_n_0 ),
        .I1(\save_sel_reg[3]_19 [1]),
        .I2(\save_sel_reg[3]_19 [0]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [87]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [0]),
        .I5(\Embedded_Trace.trace_din_all_reg[80]_0 [21]),
        .O(\Embedded_Trace.trace_din_all[65]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h30BB3088)) 
    \Embedded_Trace.trace_din_all[65]_i_3 
       (.I0(\saved_load_get_reg_n_0_[25] ),
        .I1(\save_sel_reg[3]_19 [1]),
        .I2(\saved_load_get_reg_n_0_[9] ),
        .I3(\save_sel_reg[3]_19 [0]),
        .I4(\saved_pc_reg_n_0_[25] ),
        .O(\Embedded_Trace.trace_din_all[65]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Embedded_Trace.trace_din_all[65]_i_4 
       (.I0(\saved_pc_reg_n_0_[9] ),
        .I1(\save_sel_reg[3]_19 [0]),
        .I2(event_data[9]),
        .I3(branch_event),
        .I4(\branch_data_reg_n_0_[9] ),
        .O(\Embedded_Trace.trace_din_all[65]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8888888B888)) 
    \Embedded_Trace.trace_din_all[66]_i_2 
       (.I0(\Embedded_Trace.trace_din_all[66]_i_4_n_0 ),
        .I1(\save_sel_reg[3]_19 [1]),
        .I2(\save_sel_reg[3]_19 [0]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [86]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [0]),
        .I5(\Embedded_Trace.trace_din_all_reg[80]_0 [20]),
        .O(\Embedded_Trace.trace_din_all[66]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h30BB3088)) 
    \Embedded_Trace.trace_din_all[66]_i_3 
       (.I0(\saved_load_get_reg_n_0_[26] ),
        .I1(\save_sel_reg[3]_19 [1]),
        .I2(\saved_load_get_reg_n_0_[10] ),
        .I3(\save_sel_reg[3]_19 [0]),
        .I4(\saved_pc_reg_n_0_[26] ),
        .O(\Embedded_Trace.trace_din_all[66]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Embedded_Trace.trace_din_all[66]_i_4 
       (.I0(\saved_pc_reg_n_0_[10] ),
        .I1(\save_sel_reg[3]_19 [0]),
        .I2(event_data[10]),
        .I3(branch_event),
        .I4(\branch_data_reg_n_0_[10] ),
        .O(\Embedded_Trace.trace_din_all[66]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8888888B888)) 
    \Embedded_Trace.trace_din_all[67]_i_2 
       (.I0(\Embedded_Trace.trace_din_all[67]_i_4_n_0 ),
        .I1(\save_sel_reg[3]_19 [1]),
        .I2(\save_sel_reg[3]_19 [0]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [85]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [0]),
        .I5(\Embedded_Trace.trace_din_all_reg[80]_0 [19]),
        .O(\Embedded_Trace.trace_din_all[67]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h30BB3088)) 
    \Embedded_Trace.trace_din_all[67]_i_3 
       (.I0(\saved_load_get_reg_n_0_[27] ),
        .I1(\save_sel_reg[3]_19 [1]),
        .I2(\saved_load_get_reg_n_0_[11] ),
        .I3(\save_sel_reg[3]_19 [0]),
        .I4(\saved_pc_reg_n_0_[27] ),
        .O(\Embedded_Trace.trace_din_all[67]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair98" *) 
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Embedded_Trace.trace_din_all[67]_i_4 
       (.I0(\saved_pc_reg_n_0_[11] ),
        .I1(\save_sel_reg[3]_19 [0]),
        .I2(event_data[11]),
        .I3(branch_event),
        .I4(\branch_data_reg_n_0_[11] ),
        .O(\Embedded_Trace.trace_din_all[67]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8888888B888)) 
    \Embedded_Trace.trace_din_all[68]_i_2 
       (.I0(\Embedded_Trace.trace_din_all[68]_i_4_n_0 ),
        .I1(\save_sel_reg[3]_19 [1]),
        .I2(\save_sel_reg[3]_19 [0]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [84]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [0]),
        .I5(\Embedded_Trace.trace_din_all_reg[80]_0 [18]),
        .O(\Embedded_Trace.trace_din_all[68]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h30BB3088)) 
    \Embedded_Trace.trace_din_all[68]_i_3 
       (.I0(\saved_load_get_reg_n_0_[28] ),
        .I1(\save_sel_reg[3]_19 [1]),
        .I2(\saved_load_get_reg_n_0_[12] ),
        .I3(\save_sel_reg[3]_19 [0]),
        .I4(\saved_pc_reg_n_0_[28] ),
        .O(\Embedded_Trace.trace_din_all[68]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Embedded_Trace.trace_din_all[68]_i_4 
       (.I0(\saved_pc_reg_n_0_[12] ),
        .I1(\save_sel_reg[3]_19 [0]),
        .I2(event_data[12]),
        .I3(branch_event),
        .I4(\branch_data_reg_n_0_[12] ),
        .O(\Embedded_Trace.trace_din_all[68]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8888888B888)) 
    \Embedded_Trace.trace_din_all[69]_i_2 
       (.I0(\Embedded_Trace.trace_din_all[69]_i_4_n_0 ),
        .I1(\save_sel_reg[3]_19 [1]),
        .I2(\save_sel_reg[3]_19 [0]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [83]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [0]),
        .I5(\Embedded_Trace.trace_din_all_reg[80]_0 [17]),
        .O(\Embedded_Trace.trace_din_all[69]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h30BB3088)) 
    \Embedded_Trace.trace_din_all[69]_i_3 
       (.I0(\saved_load_get_reg_n_0_[29] ),
        .I1(\save_sel_reg[3]_19 [1]),
        .I2(\saved_load_get_reg_n_0_[13] ),
        .I3(\save_sel_reg[3]_19 [0]),
        .I4(\saved_pc_reg_n_0_[29] ),
        .O(\Embedded_Trace.trace_din_all[69]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Embedded_Trace.trace_din_all[69]_i_4 
       (.I0(\saved_pc_reg_n_0_[13] ),
        .I1(\save_sel_reg[3]_19 [0]),
        .I2(event_data[13]),
        .I3(branch_event),
        .I4(\branch_data_reg_n_0_[13] ),
        .O(\Embedded_Trace.trace_din_all[69]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[6]_i_2 
       (.I0(\saved_pc_reg_n_0_[4] ),
        .I1(\Embedded_Trace.trace_din_all[150]_i_3_n_0 ),
        .I2(\save_sel_reg[0]_22 [1]),
        .I3(cycle_count_reg[7]),
        .I4(\save_sel_reg[0]_22 [0]),
        .I5(\Embedded_Trace.trace_din_all_reg_n_0_[150] ),
        .O(\Embedded_Trace.trace_din_all[6]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[6]_i_3 
       (.I0(\branch_data_first_reg_n_0_[4] ),
        .I1(\saved_load_get_reg_n_0_[20] ),
        .I2(\save_sel_reg[0]_22 [1]),
        .I3(\saved_load_get_reg_n_0_[4] ),
        .I4(\save_sel_reg[0]_22 [0]),
        .I5(\saved_pc_reg_n_0_[20] ),
        .O(\Embedded_Trace.trace_din_all[6]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8888888B888)) 
    \Embedded_Trace.trace_din_all[70]_i_2 
       (.I0(\Embedded_Trace.trace_din_all[70]_i_4_n_0 ),
        .I1(\save_sel_reg[3]_19 [1]),
        .I2(\save_sel_reg[3]_19 [0]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [82]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [0]),
        .I5(\Embedded_Trace.trace_din_all_reg[80]_0 [16]),
        .O(\Embedded_Trace.trace_din_all[70]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h30BB3088)) 
    \Embedded_Trace.trace_din_all[70]_i_3 
       (.I0(data6),
        .I1(\save_sel_reg[3]_19 [1]),
        .I2(\saved_load_get_reg_n_0_[14] ),
        .I3(\save_sel_reg[3]_19 [0]),
        .I4(data4),
        .O(\Embedded_Trace.trace_din_all[70]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Embedded_Trace.trace_din_all[70]_i_4 
       (.I0(\saved_pc_reg_n_0_[14] ),
        .I1(\save_sel_reg[3]_19 [0]),
        .I2(event_data[14]),
        .I3(branch_event),
        .I4(\branch_data_reg_n_0_[14] ),
        .O(\Embedded_Trace.trace_din_all[70]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8888888B888)) 
    \Embedded_Trace.trace_din_all[71]_i_2 
       (.I0(\Embedded_Trace.trace_din_all[71]_i_4_n_0 ),
        .I1(\save_sel_reg[3]_19 [1]),
        .I2(\save_sel_reg[3]_19 [0]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [81]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [0]),
        .I5(\Embedded_Trace.trace_din_all_reg[80]_0 [15]),
        .O(\Embedded_Trace.trace_din_all[71]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h30BB3088)) 
    \Embedded_Trace.trace_din_all[71]_i_3 
       (.I0(\saved_load_get_reg_n_0_[31] ),
        .I1(\save_sel_reg[3]_19 [1]),
        .I2(data5),
        .I3(\save_sel_reg[3]_19 [0]),
        .I4(\saved_pc_reg_n_0_[31] ),
        .O(\Embedded_Trace.trace_din_all[71]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Embedded_Trace.trace_din_all[71]_i_4 
       (.I0(data3),
        .I1(\save_sel_reg[3]_19 [0]),
        .I2(event_data[15]),
        .I3(branch_event),
        .I4(\branch_data_reg_n_0_[15] ),
        .O(\Embedded_Trace.trace_din_all[71]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF4440)) 
    \Embedded_Trace.trace_din_all[72]_i_1 
       (.I0(\save_sel_reg[4]_18 [0]),
        .I1(\save_sel_reg[4]_18 [1]),
        .I2(\save_sel_reg[4]_18 [2]),
        .I3(branch_event),
        .I4(\Embedded_Trace.trace_din_all[72]_i_2_n_0 ),
        .O(\Embedded_Trace.trace_din_all[72]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h4444444440444000)) 
    \Embedded_Trace.trace_din_all[72]_i_2 
       (.I0(\save_sel_reg[4]_18 [1]),
        .I1(\save_sel_reg[4]_18 [0]),
        .I2(\Embedded_Trace.trace_din_all_reg[80]_0 [14]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [0]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [80]),
        .I5(\save_sel_reg[4]_18 [2]),
        .O(\Embedded_Trace.trace_din_all[72]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h1F10)) 
    \Embedded_Trace.trace_din_all[73]_i_1 
       (.I0(\save_sel_reg[4]_18 [1]),
        .I1(\save_sel_reg[4]_18 [0]),
        .I2(\save_sel_reg[4]_18 [2]),
        .I3(\Embedded_Trace.trace_din_all[73]_i_2_n_0 ),
        .O(\Embedded_Trace.trace_din_all[73]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFF00B800B800)) 
    \Embedded_Trace.trace_din_all[73]_i_2 
       (.I0(\Embedded_Trace.trace_din_all_reg[80]_0 [13]),
        .I1(\Embedded_Trace.trace_din_all_reg[80]_0 [0]),
        .I2(\Embedded_Trace.trace_din_all_reg[80]_0 [79]),
        .I3(\save_sel_reg[4]_18 [0]),
        .I4(branch_event),
        .I5(\save_sel_reg[4]_18 [1]),
        .O(\Embedded_Trace.trace_din_all[73]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8888888B888)) 
    \Embedded_Trace.trace_din_all[74]_i_2 
       (.I0(\Embedded_Trace.trace_din_all[74]_i_4_n_0 ),
        .I1(\save_sel_reg[4]_18 [1]),
        .I2(\save_sel_reg[4]_18 [0]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [78]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [0]),
        .I5(\Embedded_Trace.trace_din_all_reg[80]_0 [12]),
        .O(\Embedded_Trace.trace_din_all[74]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[74]_i_3 
       (.I0(\branch_data_first_reg_n_0_[0] ),
        .I1(\saved_load_get_reg_n_0_[16] ),
        .I2(\save_sel_reg[4]_18 [1]),
        .I3(\saved_load_get_reg_n_0_[0] ),
        .I4(\save_sel_reg[4]_18 [0]),
        .I5(\saved_pc_reg_n_0_[16] ),
        .O(\Embedded_Trace.trace_din_all[74]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Embedded_Trace.trace_din_all[74]_i_4 
       (.I0(\saved_pc_reg_n_0_[0] ),
        .I1(\save_sel_reg[4]_18 [0]),
        .I2(event_data[0]),
        .I3(branch_event),
        .I4(p_0_in__0[8]),
        .O(\Embedded_Trace.trace_din_all[74]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8888888B888)) 
    \Embedded_Trace.trace_din_all[75]_i_2 
       (.I0(\Embedded_Trace.trace_din_all[75]_i_4_n_0 ),
        .I1(\save_sel_reg[4]_18 [1]),
        .I2(\save_sel_reg[4]_18 [0]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [77]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [0]),
        .I5(\Embedded_Trace.trace_din_all_reg[80]_0 [11]),
        .O(\Embedded_Trace.trace_din_all[75]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[75]_i_3 
       (.I0(\branch_data_first_reg_n_0_[1] ),
        .I1(\saved_load_get_reg_n_0_[17] ),
        .I2(\save_sel_reg[4]_18 [1]),
        .I3(\saved_load_get_reg_n_0_[1] ),
        .I4(\save_sel_reg[4]_18 [0]),
        .I5(\saved_pc_reg_n_0_[17] ),
        .O(\Embedded_Trace.trace_din_all[75]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Embedded_Trace.trace_din_all[75]_i_4 
       (.I0(\saved_pc_reg_n_0_[1] ),
        .I1(\save_sel_reg[4]_18 [0]),
        .I2(event_data[1]),
        .I3(branch_event),
        .I4(p_0_in__0[7]),
        .O(\Embedded_Trace.trace_din_all[75]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8888888B888)) 
    \Embedded_Trace.trace_din_all[76]_i_2 
       (.I0(\Embedded_Trace.trace_din_all[76]_i_4_n_0 ),
        .I1(\save_sel_reg[4]_18 [1]),
        .I2(\save_sel_reg[4]_18 [0]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [76]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [0]),
        .I5(\Embedded_Trace.trace_din_all_reg[80]_0 [10]),
        .O(\Embedded_Trace.trace_din_all[76]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[76]_i_3 
       (.I0(\branch_data_first_reg_n_0_[2] ),
        .I1(\saved_load_get_reg_n_0_[18] ),
        .I2(\save_sel_reg[4]_18 [1]),
        .I3(\saved_load_get_reg_n_0_[2] ),
        .I4(\save_sel_reg[4]_18 [0]),
        .I5(\saved_pc_reg_n_0_[18] ),
        .O(\Embedded_Trace.trace_din_all[76]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Embedded_Trace.trace_din_all[76]_i_4 
       (.I0(\saved_pc_reg_n_0_[2] ),
        .I1(\save_sel_reg[4]_18 [0]),
        .I2(event_data[2]),
        .I3(branch_event),
        .I4(p_0_in__0[6]),
        .O(\Embedded_Trace.trace_din_all[76]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8888888B888)) 
    \Embedded_Trace.trace_din_all[77]_i_2 
       (.I0(\Embedded_Trace.trace_din_all[77]_i_4_n_0 ),
        .I1(\save_sel_reg[4]_18 [1]),
        .I2(\save_sel_reg[4]_18 [0]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [75]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [0]),
        .I5(\Embedded_Trace.trace_din_all_reg[80]_0 [9]),
        .O(\Embedded_Trace.trace_din_all[77]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[77]_i_3 
       (.I0(\branch_data_first_reg_n_0_[3] ),
        .I1(\saved_load_get_reg_n_0_[19] ),
        .I2(\save_sel_reg[4]_18 [1]),
        .I3(\saved_load_get_reg_n_0_[3] ),
        .I4(\save_sel_reg[4]_18 [0]),
        .I5(\saved_pc_reg_n_0_[19] ),
        .O(\Embedded_Trace.trace_din_all[77]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Embedded_Trace.trace_din_all[77]_i_4 
       (.I0(\saved_pc_reg_n_0_[3] ),
        .I1(\save_sel_reg[4]_18 [0]),
        .I2(event_data[3]),
        .I3(branch_event),
        .I4(p_0_in__0[5]),
        .O(\Embedded_Trace.trace_din_all[77]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8888888B888)) 
    \Embedded_Trace.trace_din_all[78]_i_2 
       (.I0(\Embedded_Trace.trace_din_all[78]_i_4_n_0 ),
        .I1(\save_sel_reg[4]_18 [1]),
        .I2(\save_sel_reg[4]_18 [0]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [74]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [0]),
        .I5(\Embedded_Trace.trace_din_all_reg[80]_0 [8]),
        .O(\Embedded_Trace.trace_din_all[78]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[78]_i_3 
       (.I0(\branch_data_first_reg_n_0_[4] ),
        .I1(\saved_load_get_reg_n_0_[20] ),
        .I2(\save_sel_reg[4]_18 [1]),
        .I3(\saved_load_get_reg_n_0_[4] ),
        .I4(\save_sel_reg[4]_18 [0]),
        .I5(\saved_pc_reg_n_0_[20] ),
        .O(\Embedded_Trace.trace_din_all[78]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Embedded_Trace.trace_din_all[78]_i_4 
       (.I0(\saved_pc_reg_n_0_[4] ),
        .I1(\save_sel_reg[4]_18 [0]),
        .I2(event_data[4]),
        .I3(branch_event),
        .I4(p_0_in__0[4]),
        .O(\Embedded_Trace.trace_din_all[78]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8888888B888)) 
    \Embedded_Trace.trace_din_all[79]_i_2 
       (.I0(\Embedded_Trace.trace_din_all[79]_i_4_n_0 ),
        .I1(\save_sel_reg[4]_18 [1]),
        .I2(\save_sel_reg[4]_18 [0]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [73]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [0]),
        .I5(\Embedded_Trace.trace_din_all_reg[80]_0 [7]),
        .O(\Embedded_Trace.trace_din_all[79]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[79]_i_3 
       (.I0(\branch_data_first_reg_n_0_[5] ),
        .I1(\saved_load_get_reg_n_0_[21] ),
        .I2(\save_sel_reg[4]_18 [1]),
        .I3(\saved_load_get_reg_n_0_[5] ),
        .I4(\save_sel_reg[4]_18 [0]),
        .I5(\saved_pc_reg_n_0_[21] ),
        .O(\Embedded_Trace.trace_din_all[79]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Embedded_Trace.trace_din_all[79]_i_4 
       (.I0(\saved_pc_reg_n_0_[5] ),
        .I1(\save_sel_reg[4]_18 [0]),
        .I2(event_data[5]),
        .I3(branch_event),
        .I4(p_0_in__0[3]),
        .O(\Embedded_Trace.trace_din_all[79]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[7]_i_2 
       (.I0(\saved_pc_reg_n_0_[5] ),
        .I1(\Embedded_Trace.trace_din_all[151]_i_3_n_0 ),
        .I2(\save_sel_reg[0]_22 [1]),
        .I3(cycle_count_reg[8]),
        .I4(\save_sel_reg[0]_22 [0]),
        .I5(\Embedded_Trace.trace_din_all_reg_n_0_[151] ),
        .O(\Embedded_Trace.trace_din_all[7]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[7]_i_3 
       (.I0(\branch_data_first_reg_n_0_[5] ),
        .I1(\saved_load_get_reg_n_0_[21] ),
        .I2(\save_sel_reg[0]_22 [1]),
        .I3(\saved_load_get_reg_n_0_[5] ),
        .I4(\save_sel_reg[0]_22 [0]),
        .I5(\saved_pc_reg_n_0_[21] ),
        .O(\Embedded_Trace.trace_din_all[7]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8888888B888)) 
    \Embedded_Trace.trace_din_all[80]_i_2 
       (.I0(\Embedded_Trace.trace_din_all[80]_i_4_n_0 ),
        .I1(\save_sel_reg[4]_18 [1]),
        .I2(\save_sel_reg[4]_18 [0]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [179]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [2]),
        .I5(\Embedded_Trace.trace_din_all_reg[80]_0 [70]),
        .O(\Embedded_Trace.trace_din_all[80]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[80]_i_3 
       (.I0(\branch_data_first_reg_n_0_[6] ),
        .I1(\saved_load_get_reg_n_0_[22] ),
        .I2(\save_sel_reg[4]_18 [1]),
        .I3(\saved_load_get_reg_n_0_[6] ),
        .I4(\save_sel_reg[4]_18 [0]),
        .I5(\saved_pc_reg_n_0_[22] ),
        .O(\Embedded_Trace.trace_din_all[80]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Embedded_Trace.trace_din_all[80]_i_4 
       (.I0(\saved_pc_reg_n_0_[6] ),
        .I1(\save_sel_reg[4]_18 [0]),
        .I2(event_data[6]),
        .I3(branch_event),
        .I4(p_0_in__0[2]),
        .O(\Embedded_Trace.trace_din_all[80]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8888888B888)) 
    \Embedded_Trace.trace_din_all[81]_i_2 
       (.I0(\Embedded_Trace.trace_din_all[81]_i_4_n_0 ),
        .I1(\save_sel_reg[4]_18 [1]),
        .I2(\save_sel_reg[4]_18 [0]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [178]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [2]),
        .I5(\Embedded_Trace.trace_din_all_reg[80]_0 [69]),
        .O(\Embedded_Trace.trace_din_all[81]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[81]_i_3 
       (.I0(data7),
        .I1(\saved_load_get_reg_n_0_[23] ),
        .I2(\save_sel_reg[4]_18 [1]),
        .I3(\saved_load_get_reg_n_0_[7] ),
        .I4(\save_sel_reg[4]_18 [0]),
        .I5(\saved_pc_reg_n_0_[23] ),
        .O(\Embedded_Trace.trace_din_all[81]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Embedded_Trace.trace_din_all[81]_i_4 
       (.I0(\saved_pc_reg_n_0_[7] ),
        .I1(\save_sel_reg[4]_18 [0]),
        .I2(event_data[7]),
        .I3(branch_event),
        .I4(p_0_in__0[1]),
        .O(\Embedded_Trace.trace_din_all[81]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8888888B888)) 
    \Embedded_Trace.trace_din_all[82]_i_2 
       (.I0(\Embedded_Trace.trace_din_all[82]_i_4_n_0 ),
        .I1(\save_sel_reg[4]_18 [1]),
        .I2(\save_sel_reg[4]_18 [0]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [177]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [2]),
        .I5(\Embedded_Trace.trace_din_all_reg[80]_0 [68]),
        .O(\Embedded_Trace.trace_din_all[82]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[82]_i_3 
       (.I0(\branch_data_first_reg_n_0_[8] ),
        .I1(\saved_load_get_reg_n_0_[24] ),
        .I2(\save_sel_reg[4]_18 [1]),
        .I3(\saved_load_get_reg_n_0_[8] ),
        .I4(\save_sel_reg[4]_18 [0]),
        .I5(\saved_pc_reg_n_0_[24] ),
        .O(\Embedded_Trace.trace_din_all[82]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Embedded_Trace.trace_din_all[82]_i_4 
       (.I0(\saved_pc_reg_n_0_[8] ),
        .I1(\save_sel_reg[4]_18 [0]),
        .I2(event_data[8]),
        .I3(branch_event),
        .I4(p_0_in__0[0]),
        .O(\Embedded_Trace.trace_din_all[82]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8888888B888)) 
    \Embedded_Trace.trace_din_all[83]_i_2 
       (.I0(\Embedded_Trace.trace_din_all[83]_i_4_n_0 ),
        .I1(\save_sel_reg[4]_18 [1]),
        .I2(\save_sel_reg[4]_18 [0]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [176]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [2]),
        .I5(\Embedded_Trace.trace_din_all_reg[80]_0 [67]),
        .O(\Embedded_Trace.trace_din_all[83]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h30BB3088)) 
    \Embedded_Trace.trace_din_all[83]_i_3 
       (.I0(\saved_load_get_reg_n_0_[25] ),
        .I1(\save_sel_reg[4]_18 [1]),
        .I2(\saved_load_get_reg_n_0_[9] ),
        .I3(\save_sel_reg[4]_18 [0]),
        .I4(\saved_pc_reg_n_0_[25] ),
        .O(\Embedded_Trace.trace_din_all[83]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair97" *) 
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Embedded_Trace.trace_din_all[83]_i_4 
       (.I0(\saved_pc_reg_n_0_[9] ),
        .I1(\save_sel_reg[4]_18 [0]),
        .I2(event_data[9]),
        .I3(branch_event),
        .I4(\branch_data_reg_n_0_[9] ),
        .O(\Embedded_Trace.trace_din_all[83]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8888888B888)) 
    \Embedded_Trace.trace_din_all[84]_i_2 
       (.I0(\Embedded_Trace.trace_din_all[84]_i_4_n_0 ),
        .I1(\save_sel_reg[4]_18 [1]),
        .I2(\save_sel_reg[4]_18 [0]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [175]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [2]),
        .I5(\Embedded_Trace.trace_din_all_reg[80]_0 [66]),
        .O(\Embedded_Trace.trace_din_all[84]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h30BB3088)) 
    \Embedded_Trace.trace_din_all[84]_i_3 
       (.I0(\saved_load_get_reg_n_0_[26] ),
        .I1(\save_sel_reg[4]_18 [1]),
        .I2(\saved_load_get_reg_n_0_[10] ),
        .I3(\save_sel_reg[4]_18 [0]),
        .I4(\saved_pc_reg_n_0_[26] ),
        .O(\Embedded_Trace.trace_din_all[84]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Embedded_Trace.trace_din_all[84]_i_4 
       (.I0(\saved_pc_reg_n_0_[10] ),
        .I1(\save_sel_reg[4]_18 [0]),
        .I2(event_data[10]),
        .I3(branch_event),
        .I4(\branch_data_reg_n_0_[10] ),
        .O(\Embedded_Trace.trace_din_all[84]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8888888B888)) 
    \Embedded_Trace.trace_din_all[85]_i_2 
       (.I0(\Embedded_Trace.trace_din_all[85]_i_4_n_0 ),
        .I1(\save_sel_reg[4]_18 [1]),
        .I2(\save_sel_reg[4]_18 [0]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [174]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [2]),
        .I5(\Embedded_Trace.trace_din_all_reg[80]_0 [65]),
        .O(\Embedded_Trace.trace_din_all[85]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h30BB3088)) 
    \Embedded_Trace.trace_din_all[85]_i_3 
       (.I0(\saved_load_get_reg_n_0_[27] ),
        .I1(\save_sel_reg[4]_18 [1]),
        .I2(\saved_load_get_reg_n_0_[11] ),
        .I3(\save_sel_reg[4]_18 [0]),
        .I4(\saved_pc_reg_n_0_[27] ),
        .O(\Embedded_Trace.trace_din_all[85]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Embedded_Trace.trace_din_all[85]_i_4 
       (.I0(\saved_pc_reg_n_0_[11] ),
        .I1(\save_sel_reg[4]_18 [0]),
        .I2(event_data[11]),
        .I3(branch_event),
        .I4(\branch_data_reg_n_0_[11] ),
        .O(\Embedded_Trace.trace_din_all[85]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8888888B888)) 
    \Embedded_Trace.trace_din_all[86]_i_2 
       (.I0(\Embedded_Trace.trace_din_all[86]_i_4_n_0 ),
        .I1(\save_sel_reg[4]_18 [1]),
        .I2(\save_sel_reg[4]_18 [0]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [173]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [2]),
        .I5(\Embedded_Trace.trace_din_all_reg[80]_0 [64]),
        .O(\Embedded_Trace.trace_din_all[86]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h30BB3088)) 
    \Embedded_Trace.trace_din_all[86]_i_3 
       (.I0(\saved_load_get_reg_n_0_[28] ),
        .I1(\save_sel_reg[4]_18 [1]),
        .I2(\saved_load_get_reg_n_0_[12] ),
        .I3(\save_sel_reg[4]_18 [0]),
        .I4(\saved_pc_reg_n_0_[28] ),
        .O(\Embedded_Trace.trace_din_all[86]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Embedded_Trace.trace_din_all[86]_i_4 
       (.I0(\saved_pc_reg_n_0_[12] ),
        .I1(\save_sel_reg[4]_18 [0]),
        .I2(event_data[12]),
        .I3(branch_event),
        .I4(\branch_data_reg_n_0_[12] ),
        .O(\Embedded_Trace.trace_din_all[86]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8888888B888)) 
    \Embedded_Trace.trace_din_all[87]_i_2 
       (.I0(\Embedded_Trace.trace_din_all[87]_i_4_n_0 ),
        .I1(\save_sel_reg[4]_18 [1]),
        .I2(\save_sel_reg[4]_18 [0]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [172]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [2]),
        .I5(\Embedded_Trace.trace_din_all_reg[80]_0 [63]),
        .O(\Embedded_Trace.trace_din_all[87]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h30BB3088)) 
    \Embedded_Trace.trace_din_all[87]_i_3 
       (.I0(\saved_load_get_reg_n_0_[29] ),
        .I1(\save_sel_reg[4]_18 [1]),
        .I2(\saved_load_get_reg_n_0_[13] ),
        .I3(\save_sel_reg[4]_18 [0]),
        .I4(\saved_pc_reg_n_0_[29] ),
        .O(\Embedded_Trace.trace_din_all[87]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Embedded_Trace.trace_din_all[87]_i_4 
       (.I0(\saved_pc_reg_n_0_[13] ),
        .I1(\save_sel_reg[4]_18 [0]),
        .I2(event_data[13]),
        .I3(branch_event),
        .I4(\branch_data_reg_n_0_[13] ),
        .O(\Embedded_Trace.trace_din_all[87]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8888888B888)) 
    \Embedded_Trace.trace_din_all[88]_i_2 
       (.I0(\Embedded_Trace.trace_din_all[88]_i_4_n_0 ),
        .I1(\save_sel_reg[4]_18 [1]),
        .I2(\save_sel_reg[4]_18 [0]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [171]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [2]),
        .I5(\Embedded_Trace.trace_din_all_reg[80]_0 [62]),
        .O(\Embedded_Trace.trace_din_all[88]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h30BB3088)) 
    \Embedded_Trace.trace_din_all[88]_i_3 
       (.I0(data6),
        .I1(\save_sel_reg[4]_18 [1]),
        .I2(\saved_load_get_reg_n_0_[14] ),
        .I3(\save_sel_reg[4]_18 [0]),
        .I4(data4),
        .O(\Embedded_Trace.trace_din_all[88]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Embedded_Trace.trace_din_all[88]_i_4 
       (.I0(\saved_pc_reg_n_0_[14] ),
        .I1(\save_sel_reg[4]_18 [0]),
        .I2(event_data[14]),
        .I3(branch_event),
        .I4(\branch_data_reg_n_0_[14] ),
        .O(\Embedded_Trace.trace_din_all[88]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8888888B888)) 
    \Embedded_Trace.trace_din_all[89]_i_2 
       (.I0(\Embedded_Trace.trace_din_all[89]_i_4_n_0 ),
        .I1(\save_sel_reg[4]_18 [1]),
        .I2(\save_sel_reg[4]_18 [0]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [170]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [2]),
        .I5(\Embedded_Trace.trace_din_all_reg[80]_0 [61]),
        .O(\Embedded_Trace.trace_din_all[89]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h30BB3088)) 
    \Embedded_Trace.trace_din_all[89]_i_3 
       (.I0(\saved_load_get_reg_n_0_[31] ),
        .I1(\save_sel_reg[4]_18 [1]),
        .I2(data5),
        .I3(\save_sel_reg[4]_18 [0]),
        .I4(\saved_pc_reg_n_0_[31] ),
        .O(\Embedded_Trace.trace_din_all[89]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Embedded_Trace.trace_din_all[89]_i_4 
       (.I0(data3),
        .I1(\save_sel_reg[4]_18 [0]),
        .I2(event_data[15]),
        .I3(branch_event),
        .I4(\branch_data_reg_n_0_[15] ),
        .O(\Embedded_Trace.trace_din_all[89]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[8]_i_2 
       (.I0(\saved_pc_reg_n_0_[6] ),
        .I1(\Embedded_Trace.trace_din_all[152]_i_3_n_0 ),
        .I2(\save_sel_reg[0]_22 [1]),
        .I3(cycle_count_reg[9]),
        .I4(\save_sel_reg[0]_22 [0]),
        .I5(\Embedded_Trace.trace_din_all_reg_n_0_[152] ),
        .O(\Embedded_Trace.trace_din_all[8]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[8]_i_3 
       (.I0(\branch_data_first_reg_n_0_[6] ),
        .I1(\saved_load_get_reg_n_0_[22] ),
        .I2(\save_sel_reg[0]_22 [1]),
        .I3(\saved_load_get_reg_n_0_[6] ),
        .I4(\save_sel_reg[0]_22 [0]),
        .I5(\saved_pc_reg_n_0_[22] ),
        .O(\Embedded_Trace.trace_din_all[8]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF4440)) 
    \Embedded_Trace.trace_din_all[90]_i_1 
       (.I0(\save_sel_reg[5]_17 [0]),
        .I1(\save_sel_reg[5]_17 [1]),
        .I2(\save_sel_reg[5]_17 [2]),
        .I3(branch_event),
        .I4(\Embedded_Trace.trace_din_all[90]_i_2_n_0 ),
        .O(\Embedded_Trace.trace_din_all[90]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h4444444440444000)) 
    \Embedded_Trace.trace_din_all[90]_i_2 
       (.I0(\save_sel_reg[5]_17 [1]),
        .I1(\save_sel_reg[5]_17 [0]),
        .I2(\Embedded_Trace.trace_din_all_reg[80]_0 [60]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [2]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [169]),
        .I5(\save_sel_reg[5]_17 [2]),
        .O(\Embedded_Trace.trace_din_all[90]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h1F10)) 
    \Embedded_Trace.trace_din_all[91]_i_1 
       (.I0(\save_sel_reg[5]_17 [1]),
        .I1(\save_sel_reg[5]_17 [0]),
        .I2(\save_sel_reg[5]_17 [2]),
        .I3(\Embedded_Trace.trace_din_all[91]_i_2_n_0 ),
        .O(\Embedded_Trace.trace_din_all[91]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFF00B800B800)) 
    \Embedded_Trace.trace_din_all[91]_i_2 
       (.I0(\Embedded_Trace.trace_din_all_reg[80]_0 [59]),
        .I1(\Embedded_Trace.trace_din_all_reg[80]_0 [2]),
        .I2(\Embedded_Trace.trace_din_all_reg[80]_0 [168]),
        .I3(\save_sel_reg[5]_17 [0]),
        .I4(branch_event),
        .I5(\save_sel_reg[5]_17 [1]),
        .O(\Embedded_Trace.trace_din_all[91]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8888888B888)) 
    \Embedded_Trace.trace_din_all[92]_i_2 
       (.I0(\Embedded_Trace.trace_din_all[92]_i_4_n_0 ),
        .I1(\save_sel_reg[5]_17 [1]),
        .I2(\save_sel_reg[5]_17 [0]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [167]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [2]),
        .I5(\Embedded_Trace.trace_din_all_reg[80]_0 [58]),
        .O(\Embedded_Trace.trace_din_all[92]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[92]_i_3 
       (.I0(\branch_data_first_reg_n_0_[0] ),
        .I1(\saved_load_get_reg_n_0_[16] ),
        .I2(\save_sel_reg[5]_17 [1]),
        .I3(\saved_load_get_reg_n_0_[0] ),
        .I4(\save_sel_reg[5]_17 [0]),
        .I5(\saved_pc_reg_n_0_[16] ),
        .O(\Embedded_Trace.trace_din_all[92]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Embedded_Trace.trace_din_all[92]_i_4 
       (.I0(\saved_pc_reg_n_0_[0] ),
        .I1(\save_sel_reg[5]_17 [0]),
        .I2(event_data[0]),
        .I3(branch_event),
        .I4(p_0_in__0[8]),
        .O(\Embedded_Trace.trace_din_all[92]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8888888B888)) 
    \Embedded_Trace.trace_din_all[93]_i_2 
       (.I0(\Embedded_Trace.trace_din_all[93]_i_4_n_0 ),
        .I1(\save_sel_reg[5]_17 [1]),
        .I2(\save_sel_reg[5]_17 [0]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [166]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [2]),
        .I5(\Embedded_Trace.trace_din_all_reg[80]_0 [57]),
        .O(\Embedded_Trace.trace_din_all[93]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[93]_i_3 
       (.I0(\branch_data_first_reg_n_0_[1] ),
        .I1(\saved_load_get_reg_n_0_[17] ),
        .I2(\save_sel_reg[5]_17 [1]),
        .I3(\saved_load_get_reg_n_0_[1] ),
        .I4(\save_sel_reg[5]_17 [0]),
        .I5(\saved_pc_reg_n_0_[17] ),
        .O(\Embedded_Trace.trace_din_all[93]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Embedded_Trace.trace_din_all[93]_i_4 
       (.I0(\saved_pc_reg_n_0_[1] ),
        .I1(\save_sel_reg[5]_17 [0]),
        .I2(event_data[1]),
        .I3(branch_event),
        .I4(p_0_in__0[7]),
        .O(\Embedded_Trace.trace_din_all[93]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8888888B888)) 
    \Embedded_Trace.trace_din_all[94]_i_2 
       (.I0(\Embedded_Trace.trace_din_all[94]_i_4_n_0 ),
        .I1(\save_sel_reg[5]_17 [1]),
        .I2(\save_sel_reg[5]_17 [0]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [165]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [2]),
        .I5(\Embedded_Trace.trace_din_all_reg[80]_0 [56]),
        .O(\Embedded_Trace.trace_din_all[94]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[94]_i_3 
       (.I0(\branch_data_first_reg_n_0_[2] ),
        .I1(\saved_load_get_reg_n_0_[18] ),
        .I2(\save_sel_reg[5]_17 [1]),
        .I3(\saved_load_get_reg_n_0_[2] ),
        .I4(\save_sel_reg[5]_17 [0]),
        .I5(\saved_pc_reg_n_0_[18] ),
        .O(\Embedded_Trace.trace_din_all[94]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair103" *) 
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Embedded_Trace.trace_din_all[94]_i_4 
       (.I0(\saved_pc_reg_n_0_[2] ),
        .I1(\save_sel_reg[5]_17 [0]),
        .I2(event_data[2]),
        .I3(branch_event),
        .I4(p_0_in__0[6]),
        .O(\Embedded_Trace.trace_din_all[94]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8888888B888)) 
    \Embedded_Trace.trace_din_all[95]_i_2 
       (.I0(\Embedded_Trace.trace_din_all[95]_i_4_n_0 ),
        .I1(\save_sel_reg[5]_17 [1]),
        .I2(\save_sel_reg[5]_17 [0]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [164]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [2]),
        .I5(\Embedded_Trace.trace_din_all_reg[80]_0 [55]),
        .O(\Embedded_Trace.trace_din_all[95]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[95]_i_3 
       (.I0(\branch_data_first_reg_n_0_[3] ),
        .I1(\saved_load_get_reg_n_0_[19] ),
        .I2(\save_sel_reg[5]_17 [1]),
        .I3(\saved_load_get_reg_n_0_[3] ),
        .I4(\save_sel_reg[5]_17 [0]),
        .I5(\saved_pc_reg_n_0_[19] ),
        .O(\Embedded_Trace.trace_din_all[95]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair104" *) 
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Embedded_Trace.trace_din_all[95]_i_4 
       (.I0(\saved_pc_reg_n_0_[3] ),
        .I1(\save_sel_reg[5]_17 [0]),
        .I2(event_data[3]),
        .I3(branch_event),
        .I4(p_0_in__0[5]),
        .O(\Embedded_Trace.trace_din_all[95]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8888888B888)) 
    \Embedded_Trace.trace_din_all[96]_i_2 
       (.I0(\Embedded_Trace.trace_din_all[96]_i_4_n_0 ),
        .I1(\save_sel_reg[5]_17 [1]),
        .I2(\save_sel_reg[5]_17 [0]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [163]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [2]),
        .I5(\Embedded_Trace.trace_din_all_reg[80]_0 [54]),
        .O(\Embedded_Trace.trace_din_all[96]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[96]_i_3 
       (.I0(\branch_data_first_reg_n_0_[4] ),
        .I1(\saved_load_get_reg_n_0_[20] ),
        .I2(\save_sel_reg[5]_17 [1]),
        .I3(\saved_load_get_reg_n_0_[4] ),
        .I4(\save_sel_reg[5]_17 [0]),
        .I5(\saved_pc_reg_n_0_[20] ),
        .O(\Embedded_Trace.trace_din_all[96]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair105" *) 
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Embedded_Trace.trace_din_all[96]_i_4 
       (.I0(\saved_pc_reg_n_0_[4] ),
        .I1(\save_sel_reg[5]_17 [0]),
        .I2(event_data[4]),
        .I3(branch_event),
        .I4(p_0_in__0[4]),
        .O(\Embedded_Trace.trace_din_all[96]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8888888B888)) 
    \Embedded_Trace.trace_din_all[97]_i_2 
       (.I0(\Embedded_Trace.trace_din_all[97]_i_4_n_0 ),
        .I1(\save_sel_reg[5]_17 [1]),
        .I2(\save_sel_reg[5]_17 [0]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [162]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [2]),
        .I5(\Embedded_Trace.trace_din_all_reg[80]_0 [53]),
        .O(\Embedded_Trace.trace_din_all[97]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[97]_i_3 
       (.I0(\branch_data_first_reg_n_0_[5] ),
        .I1(\saved_load_get_reg_n_0_[21] ),
        .I2(\save_sel_reg[5]_17 [1]),
        .I3(\saved_load_get_reg_n_0_[5] ),
        .I4(\save_sel_reg[5]_17 [0]),
        .I5(\saved_pc_reg_n_0_[21] ),
        .O(\Embedded_Trace.trace_din_all[97]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair106" *) 
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Embedded_Trace.trace_din_all[97]_i_4 
       (.I0(\saved_pc_reg_n_0_[5] ),
        .I1(\save_sel_reg[5]_17 [0]),
        .I2(event_data[5]),
        .I3(branch_event),
        .I4(p_0_in__0[3]),
        .O(\Embedded_Trace.trace_din_all[97]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8888888B888)) 
    \Embedded_Trace.trace_din_all[98]_i_2 
       (.I0(\Embedded_Trace.trace_din_all[98]_i_4_n_0 ),
        .I1(\save_sel_reg[5]_17 [1]),
        .I2(\save_sel_reg[5]_17 [0]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [161]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [2]),
        .I5(\Embedded_Trace.trace_din_all_reg[80]_0 [52]),
        .O(\Embedded_Trace.trace_din_all[98]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[98]_i_3 
       (.I0(\branch_data_first_reg_n_0_[6] ),
        .I1(\saved_load_get_reg_n_0_[22] ),
        .I2(\save_sel_reg[5]_17 [1]),
        .I3(\saved_load_get_reg_n_0_[6] ),
        .I4(\save_sel_reg[5]_17 [0]),
        .I5(\saved_pc_reg_n_0_[22] ),
        .O(\Embedded_Trace.trace_din_all[98]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair107" *) 
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Embedded_Trace.trace_din_all[98]_i_4 
       (.I0(\saved_pc_reg_n_0_[6] ),
        .I1(\save_sel_reg[5]_17 [0]),
        .I2(event_data[6]),
        .I3(branch_event),
        .I4(p_0_in__0[2]),
        .O(\Embedded_Trace.trace_din_all[98]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8888888B888)) 
    \Embedded_Trace.trace_din_all[99]_i_2 
       (.I0(\Embedded_Trace.trace_din_all[99]_i_4_n_0 ),
        .I1(\save_sel_reg[5]_17 [1]),
        .I2(\save_sel_reg[5]_17 [0]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [160]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [2]),
        .I5(\Embedded_Trace.trace_din_all_reg[80]_0 [51]),
        .O(\Embedded_Trace.trace_din_all[99]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[99]_i_3 
       (.I0(data7),
        .I1(\saved_load_get_reg_n_0_[23] ),
        .I2(\save_sel_reg[5]_17 [1]),
        .I3(\saved_load_get_reg_n_0_[7] ),
        .I4(\save_sel_reg[5]_17 [0]),
        .I5(\saved_pc_reg_n_0_[23] ),
        .O(\Embedded_Trace.trace_din_all[99]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair108" *) 
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Embedded_Trace.trace_din_all[99]_i_4 
       (.I0(\saved_pc_reg_n_0_[7] ),
        .I1(\save_sel_reg[5]_17 [0]),
        .I2(event_data[7]),
        .I3(branch_event),
        .I4(p_0_in__0[1]),
        .O(\Embedded_Trace.trace_din_all[99]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[9]_i_2 
       (.I0(\saved_pc_reg_n_0_[7] ),
        .I1(\Embedded_Trace.trace_din_all[153]_i_2_n_0 ),
        .I2(\save_sel_reg[0]_22 [1]),
        .I3(cycle_count_reg[10]),
        .I4(\save_sel_reg[0]_22 [0]),
        .I5(\Embedded_Trace.trace_din_all_reg_n_0_[153] ),
        .O(\Embedded_Trace.trace_din_all[9]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.trace_din_all[9]_i_3 
       (.I0(data7),
        .I1(\saved_load_get_reg_n_0_[23] ),
        .I2(\save_sel_reg[0]_22 [1]),
        .I3(\saved_load_get_reg_n_0_[7] ),
        .I4(\save_sel_reg[0]_22 [0]),
        .I5(\saved_pc_reg_n_0_[23] ),
        .O(\Embedded_Trace.trace_din_all[9]_i_3_n_0 ));
  FDRE \Embedded_Trace.trace_din_all_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all[0]_i_1_n_0 ),
        .Q(DATA_INA[0]),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[100] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[100]_i_1_n_0 ),
        .Q(p_19_out[6]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[100]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[100]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[100]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[100]_i_1_n_0 ),
        .S(\save_sel_reg[5]_17 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[101] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[101]_i_1_n_0 ),
        .Q(p_19_out[5]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[101]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[101]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[101]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[101]_i_1_n_0 ),
        .S(\save_sel_reg[5]_17 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[102] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[102]_i_1_n_0 ),
        .Q(p_19_out[4]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[102]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[102]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[102]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[102]_i_1_n_0 ),
        .S(\save_sel_reg[5]_17 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[103] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[103]_i_1_n_0 ),
        .Q(p_19_out[3]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[103]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[103]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[103]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[103]_i_1_n_0 ),
        .S(\save_sel_reg[5]_17 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[104] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[104]_i_1_n_0 ),
        .Q(p_19_out[2]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[104]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[104]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[104]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[104]_i_1_n_0 ),
        .S(\save_sel_reg[5]_17 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[105] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[105]_i_1_n_0 ),
        .Q(p_19_out[1]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[105]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[105]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[105]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[105]_i_1_n_0 ),
        .S(\save_sel_reg[5]_17 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[106] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[106]_i_1_n_0 ),
        .Q(p_19_out[0]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[106]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[106]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[106]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[106]_i_1_n_0 ),
        .S(\save_sel_reg[5]_17 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[107] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[107]_i_1_n_0 ),
        .Q(p_18_out),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[107]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[107]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[107]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[107]_i_1_n_0 ),
        .S(\save_sel_reg[5]_17 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[108] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all[108]_i_1_n_0 ),
        .Q(p_15_out[7]),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[109] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all[109]_i_1_n_0 ),
        .Q(p_15_out[6]),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[10] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[10]_i_1_n_0 ),
        .Q(DATA_INA[9]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[10]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[10]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[10]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[10]_i_1_n_0 ),
        .S(\save_sel_reg[0]_22 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[110] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[110]_i_1_n_0 ),
        .Q(p_15_out[5]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[110]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[110]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[110]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[110]_i_1_n_0 ),
        .S(\save_sel_reg[6]_16 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[111] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[111]_i_1_n_0 ),
        .Q(p_15_out[4]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[111]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[111]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[111]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[111]_i_1_n_0 ),
        .S(\save_sel_reg[6]_16 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[112] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[112]_i_1_n_0 ),
        .Q(p_15_out[3]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[112]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[112]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[112]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[112]_i_1_n_0 ),
        .S(\save_sel_reg[6]_16 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[113] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[113]_i_1_n_0 ),
        .Q(p_15_out[2]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[113]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[113]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[113]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[113]_i_1_n_0 ),
        .S(\save_sel_reg[6]_16 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[114] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[114]_i_1_n_0 ),
        .Q(p_15_out[1]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[114]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[114]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[114]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[114]_i_1_n_0 ),
        .S(\save_sel_reg[6]_16 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[115] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[115]_i_1_n_0 ),
        .Q(p_15_out[0]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[115]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[115]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[115]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[115]_i_1_n_0 ),
        .S(\save_sel_reg[6]_16 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[116] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[116]_i_1_n_0 ),
        .Q(p_14_out),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[116]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[116]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[116]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[116]_i_1_n_0 ),
        .S(\save_sel_reg[6]_16 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[117] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[117]_i_1_n_0 ),
        .Q(p_11_out[7]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[117]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[117]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[117]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[117]_i_1_n_0 ),
        .S(\save_sel_reg[6]_16 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[118] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[118]_i_1_n_0 ),
        .Q(p_11_out[6]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[118]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[118]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[118]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[118]_i_1_n_0 ),
        .S(\save_sel_reg[6]_16 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[119] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[119]_i_1_n_0 ),
        .Q(p_11_out[5]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[119]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[119]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[119]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[119]_i_1_n_0 ),
        .S(\save_sel_reg[6]_16 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[11] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[11]_i_1_n_0 ),
        .Q(DATA_INA[10]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[11]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[11]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[11]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[11]_i_1_n_0 ),
        .S(\save_sel_reg[0]_22 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[120] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[120]_i_1_n_0 ),
        .Q(p_11_out[4]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[120]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[120]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[120]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[120]_i_1_n_0 ),
        .S(\save_sel_reg[6]_16 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[121] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[121]_i_1_n_0 ),
        .Q(p_11_out[3]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[121]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[121]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[121]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[121]_i_1_n_0 ),
        .S(\save_sel_reg[6]_16 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[122] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[122]_i_1_n_0 ),
        .Q(p_11_out[2]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[122]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[122]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[122]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[122]_i_1_n_0 ),
        .S(\save_sel_reg[6]_16 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[123] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[123]_i_1_n_0 ),
        .Q(p_11_out[1]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[123]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[123]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[123]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[123]_i_1_n_0 ),
        .S(\save_sel_reg[6]_16 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[124] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[124]_i_1_n_0 ),
        .Q(p_11_out[0]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[124]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[124]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[124]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[124]_i_1_n_0 ),
        .S(\save_sel_reg[6]_16 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[125] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[125]_i_1_n_0 ),
        .Q(p_10_out),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[125]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[125]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[125]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[125]_i_1_n_0 ),
        .S(\save_sel_reg[6]_16 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[126] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all[126]_i_1_n_0 ),
        .Q(p_7_out[7]),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[127] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all[127]_i_1_n_0 ),
        .Q(p_7_out[6]),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[128] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[128]_i_1_n_0 ),
        .Q(p_7_out[5]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[128]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[128]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[128]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[128]_i_1_n_0 ),
        .S(\save_sel_reg[7]_15 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[129] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[129]_i_1_n_0 ),
        .Q(p_7_out[4]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[129]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[129]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[129]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[129]_i_1_n_0 ),
        .S(\save_sel_reg[7]_15 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[12] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[12]_i_1_n_0 ),
        .Q(DATA_INA[11]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[12]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[12]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[12]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[12]_i_1_n_0 ),
        .S(\save_sel_reg[0]_22 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[130] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[130]_i_1_n_0 ),
        .Q(p_7_out[3]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[130]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[130]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[130]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[130]_i_1_n_0 ),
        .S(\save_sel_reg[7]_15 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[131] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[131]_i_1_n_0 ),
        .Q(p_7_out[2]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[131]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[131]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[131]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[131]_i_1_n_0 ),
        .S(\save_sel_reg[7]_15 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[132] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[132]_i_1_n_0 ),
        .Q(p_7_out[1]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[132]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[132]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[132]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[132]_i_1_n_0 ),
        .S(\save_sel_reg[7]_15 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[133] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[133]_i_1_n_0 ),
        .Q(p_7_out[0]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[133]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[133]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[133]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[133]_i_1_n_0 ),
        .S(\save_sel_reg[7]_15 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[134] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[134]_i_1_n_0 ),
        .Q(p_6_out),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[134]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[134]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[134]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[134]_i_1_n_0 ),
        .S(\save_sel_reg[7]_15 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[135] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[135]_i_1_n_0 ),
        .Q(p_3_out[7]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[135]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[135]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[135]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[135]_i_1_n_0 ),
        .S(\save_sel_reg[7]_15 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[136] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[136]_i_1_n_0 ),
        .Q(p_3_out[6]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[136]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[136]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[136]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[136]_i_1_n_0 ),
        .S(\save_sel_reg[7]_15 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[137] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[137]_i_1_n_0 ),
        .Q(p_3_out[5]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[137]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[137]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[137]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[137]_i_1_n_0 ),
        .S(\save_sel_reg[7]_15 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[138] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[138]_i_1_n_0 ),
        .Q(p_3_out[4]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[138]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[138]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[138]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[138]_i_1_n_0 ),
        .S(\save_sel_reg[7]_15 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[139] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[139]_i_1_n_0 ),
        .Q(p_3_out[3]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[139]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[139]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[139]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[139]_i_1_n_0 ),
        .S(\save_sel_reg[7]_15 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[13] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[13]_i_1_n_0 ),
        .Q(DATA_INA[12]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[13]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[13]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[13]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[13]_i_1_n_0 ),
        .S(\save_sel_reg[0]_22 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[140] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[140]_i_1_n_0 ),
        .Q(p_3_out[2]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[140]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[140]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[140]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[140]_i_1_n_0 ),
        .S(\save_sel_reg[7]_15 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[141] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[141]_i_1_n_0 ),
        .Q(p_3_out[1]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[141]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[141]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[141]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[141]_i_1_n_0 ),
        .S(\save_sel_reg[7]_15 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[142] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[142]_i_1_n_0 ),
        .Q(p_3_out[0]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[142]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[142]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[142]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[142]_i_1_n_0 ),
        .S(\save_sel_reg[7]_15 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[143] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[143]_i_1_n_0 ),
        .Q(\Embedded_Trace.trace_din_all_reg_n_0_[143] ),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[143]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[143]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[143]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[143]_i_1_n_0 ),
        .S(\save_sel_reg[7]_15 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[144] 
       (.C(Clk),
        .CE(\Embedded_Trace.trace_din_all[144]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all[144]_i_2_n_0 ),
        .Q(\Embedded_Trace.trace_din_all_reg_n_0_[144] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[145] 
       (.C(Clk),
        .CE(\Embedded_Trace.trace_din_all[144]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all[145]_i_1_n_0 ),
        .Q(\Embedded_Trace.trace_din_all_reg_n_0_[145] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[146] 
       (.C(Clk),
        .CE(\Embedded_Trace.trace_din_all[144]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all[146]_i_1_n_0 ),
        .Q(\Embedded_Trace.trace_din_all_reg_n_0_[146] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[147] 
       (.C(Clk),
        .CE(\Embedded_Trace.trace_din_all[144]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all[147]_i_1_n_0 ),
        .Q(\Embedded_Trace.trace_din_all_reg_n_0_[147] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[148] 
       (.C(Clk),
        .CE(\Embedded_Trace.trace_din_all[144]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all[148]_i_1_n_0 ),
        .Q(\Embedded_Trace.trace_din_all_reg_n_0_[148] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[149] 
       (.C(Clk),
        .CE(\Embedded_Trace.trace_din_all[144]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all[149]_i_1_n_0 ),
        .Q(\Embedded_Trace.trace_din_all_reg_n_0_[149] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[14] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[14]_i_1_n_0 ),
        .Q(DATA_INA[13]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[14]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[14]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[14]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[14]_i_1_n_0 ),
        .S(\save_sel_reg[0]_22 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[150] 
       (.C(Clk),
        .CE(\Embedded_Trace.trace_din_all[144]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all[150]_i_1_n_0 ),
        .Q(\Embedded_Trace.trace_din_all_reg_n_0_[150] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[151] 
       (.C(Clk),
        .CE(\Embedded_Trace.trace_din_all[144]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all[151]_i_1_n_0 ),
        .Q(\Embedded_Trace.trace_din_all_reg_n_0_[151] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[152] 
       (.C(Clk),
        .CE(\Embedded_Trace.trace_din_all[144]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all[152]_i_1_n_0 ),
        .Q(\Embedded_Trace.trace_din_all_reg_n_0_[152] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[153] 
       (.C(Clk),
        .CE(\Embedded_Trace.trace_din_all[144]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all[153]_i_1_n_0 ),
        .Q(\Embedded_Trace.trace_din_all_reg_n_0_[153] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[154] 
       (.C(Clk),
        .CE(\Embedded_Trace.trace_din_all[144]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all[154]_i_1_n_0 ),
        .Q(\Embedded_Trace.trace_din_all_reg_n_0_[154] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[155] 
       (.C(Clk),
        .CE(\Embedded_Trace.trace_din_all[144]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all[155]_i_1_n_0 ),
        .Q(\Embedded_Trace.trace_din_all_reg_n_0_[155] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[156] 
       (.C(Clk),
        .CE(\Embedded_Trace.trace_din_all[144]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all[156]_i_1_n_0 ),
        .Q(\Embedded_Trace.trace_din_all_reg_n_0_[156] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[157] 
       (.C(Clk),
        .CE(\Embedded_Trace.trace_din_all[144]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all[157]_i_1_n_0 ),
        .Q(\Embedded_Trace.trace_din_all_reg_n_0_[157] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[158] 
       (.C(Clk),
        .CE(\Embedded_Trace.trace_din_all[144]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all[158]_i_1_n_0 ),
        .Q(\Embedded_Trace.trace_din_all_reg_n_0_[158] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[159] 
       (.C(Clk),
        .CE(\Embedded_Trace.trace_din_all[144]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all[159]_i_1_n_0 ),
        .Q(\Embedded_Trace.trace_din_all_reg_n_0_[159] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[15] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[15]_i_1_n_0 ),
        .Q(DATA_INA[14]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[15]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[15]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[15]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[15]_i_1_n_0 ),
        .S(\save_sel_reg[0]_22 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[160] 
       (.C(Clk),
        .CE(\Embedded_Trace.trace_din_all[144]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all[160]_i_1_n_0 ),
        .Q(\Embedded_Trace.trace_din_all_reg_n_0_[160] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[161] 
       (.C(Clk),
        .CE(\Embedded_Trace.trace_din_all[144]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all[161]_i_1_n_0 ),
        .Q(\Embedded_Trace.trace_din_all_reg_n_0_[161] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[162] 
       (.C(Clk),
        .CE(\Embedded_Trace.trace_din_all[162]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all[162]_i_2_n_0 ),
        .Q(\Embedded_Trace.trace_din_all_reg_n_0_[162] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[163] 
       (.C(Clk),
        .CE(\Embedded_Trace.trace_din_all[162]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all[163]_i_1_n_0 ),
        .Q(\Embedded_Trace.trace_din_all_reg_n_0_[163] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[164] 
       (.C(Clk),
        .CE(\Embedded_Trace.trace_din_all[162]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all[164]_i_1_n_0 ),
        .Q(\Embedded_Trace.trace_din_all_reg_n_0_[164] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[165] 
       (.C(Clk),
        .CE(\Embedded_Trace.trace_din_all[162]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all[165]_i_1_n_0 ),
        .Q(\Embedded_Trace.trace_din_all_reg_n_0_[165] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[166] 
       (.C(Clk),
        .CE(\Embedded_Trace.trace_din_all[162]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all[166]_i_1_n_0 ),
        .Q(\Embedded_Trace.trace_din_all_reg_n_0_[166] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[167] 
       (.C(Clk),
        .CE(\Embedded_Trace.trace_din_all[162]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all[167]_i_1_n_0 ),
        .Q(\Embedded_Trace.trace_din_all_reg_n_0_[167] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[168] 
       (.C(Clk),
        .CE(\Embedded_Trace.trace_din_all[162]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all[168]_i_1_n_0 ),
        .Q(\Embedded_Trace.trace_din_all_reg_n_0_[168] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[169] 
       (.C(Clk),
        .CE(\Embedded_Trace.trace_din_all[162]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all[169]_i_1_n_0 ),
        .Q(\Embedded_Trace.trace_din_all_reg_n_0_[169] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[16] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[16]_i_1_n_0 ),
        .Q(DATA_INA[15]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[16]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[16]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[16]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[16]_i_1_n_0 ),
        .S(\save_sel_reg[0]_22 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[170] 
       (.C(Clk),
        .CE(\Embedded_Trace.trace_din_all[162]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all[170]_i_1_n_0 ),
        .Q(\Embedded_Trace.trace_din_all_reg_n_0_[170] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[171] 
       (.C(Clk),
        .CE(\Embedded_Trace.trace_din_all[162]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all[171]_i_1_n_0 ),
        .Q(\Embedded_Trace.trace_din_all_reg_n_0_[171] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[172] 
       (.C(Clk),
        .CE(\Embedded_Trace.trace_din_all[162]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all[172]_i_1_n_0 ),
        .Q(\Embedded_Trace.trace_din_all_reg_n_0_[172] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[173] 
       (.C(Clk),
        .CE(\Embedded_Trace.trace_din_all[162]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all[173]_i_1_n_0 ),
        .Q(\Embedded_Trace.trace_din_all_reg_n_0_[173] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[174] 
       (.C(Clk),
        .CE(\Embedded_Trace.trace_din_all[162]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all[174]_i_1_n_0 ),
        .Q(\Embedded_Trace.trace_din_all_reg_n_0_[174] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[175] 
       (.C(Clk),
        .CE(\Embedded_Trace.trace_din_all[162]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all[175]_i_1_n_0 ),
        .Q(\Embedded_Trace.trace_din_all_reg_n_0_[175] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[176] 
       (.C(Clk),
        .CE(\Embedded_Trace.trace_din_all[162]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all[176]_i_1_n_0 ),
        .Q(\Embedded_Trace.trace_din_all_reg_n_0_[176] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[177] 
       (.C(Clk),
        .CE(\Embedded_Trace.trace_din_all[162]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all[177]_i_1_n_0 ),
        .Q(\Embedded_Trace.trace_din_all_reg_n_0_[177] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[178] 
       (.C(Clk),
        .CE(\Embedded_Trace.trace_din_all[162]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all[178]_i_1_n_0 ),
        .Q(\Embedded_Trace.trace_din_all_reg_n_0_[178] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[179] 
       (.C(Clk),
        .CE(\Embedded_Trace.trace_din_all[162]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all[179]_i_1_n_0 ),
        .Q(\Embedded_Trace.trace_din_all_reg_n_0_[179] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[17] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[17]_i_1_n_0 ),
        .Q(DATA_INA[65]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[17]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[17]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[17]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[17]_i_1_n_0 ),
        .S(\save_sel_reg[0]_22 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[180] 
       (.C(Clk),
        .CE(\Embedded_Trace.trace_din_all[180]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all[180]_i_2_n_0 ),
        .Q(\Embedded_Trace.trace_din_all_reg_n_0_[180] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[181] 
       (.C(Clk),
        .CE(\Embedded_Trace.trace_din_all[180]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all[181]_i_1_n_0 ),
        .Q(\Embedded_Trace.trace_din_all_reg_n_0_[181] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[182] 
       (.C(Clk),
        .CE(\Embedded_Trace.trace_din_all[180]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all[182]_i_1_n_0 ),
        .Q(\Embedded_Trace.trace_din_all_reg_n_0_[182] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[183] 
       (.C(Clk),
        .CE(\Embedded_Trace.trace_din_all[180]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all[183]_i_1_n_0 ),
        .Q(\Embedded_Trace.trace_din_all_reg_n_0_[183] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[184] 
       (.C(Clk),
        .CE(\Embedded_Trace.trace_din_all[180]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all[184]_i_1_n_0 ),
        .Q(\Embedded_Trace.trace_din_all_reg_n_0_[184] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[185] 
       (.C(Clk),
        .CE(\Embedded_Trace.trace_din_all[180]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all[185]_i_1_n_0 ),
        .Q(\Embedded_Trace.trace_din_all_reg_n_0_[185] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[186] 
       (.C(Clk),
        .CE(\Embedded_Trace.trace_din_all[180]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all[186]_i_1_n_0 ),
        .Q(\Embedded_Trace.trace_din_all_reg_n_0_[186] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[187] 
       (.C(Clk),
        .CE(\Embedded_Trace.trace_din_all[180]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all[187]_i_1_n_0 ),
        .Q(\Embedded_Trace.trace_din_all_reg_n_0_[187] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[188] 
       (.C(Clk),
        .CE(\Embedded_Trace.trace_din_all[180]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all[188]_i_1_n_0 ),
        .Q(\Embedded_Trace.trace_din_all_reg_n_0_[188] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[189] 
       (.C(Clk),
        .CE(\Embedded_Trace.trace_din_all[180]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all[189]_i_1_n_0 ),
        .Q(\Embedded_Trace.trace_din_all_reg_n_0_[189] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[18] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all[18]_i_1_n_0 ),
        .Q(DATA_INA[16]),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[190] 
       (.C(Clk),
        .CE(\Embedded_Trace.trace_din_all[180]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all[190]_i_1_n_0 ),
        .Q(\Embedded_Trace.trace_din_all_reg_n_0_[190] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[191] 
       (.C(Clk),
        .CE(\Embedded_Trace.trace_din_all[180]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all[191]_i_1_n_0 ),
        .Q(\Embedded_Trace.trace_din_all_reg_n_0_[191] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[192] 
       (.C(Clk),
        .CE(\Embedded_Trace.trace_din_all[180]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all[192]_i_1_n_0 ),
        .Q(\Embedded_Trace.trace_din_all_reg_n_0_[192] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[193] 
       (.C(Clk),
        .CE(\Embedded_Trace.trace_din_all[180]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all[193]_i_1_n_0 ),
        .Q(\Embedded_Trace.trace_din_all_reg_n_0_[193] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[194] 
       (.C(Clk),
        .CE(\Embedded_Trace.trace_din_all[180]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all[194]_i_1_n_0 ),
        .Q(\Embedded_Trace.trace_din_all_reg_n_0_[194] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[195] 
       (.C(Clk),
        .CE(\Embedded_Trace.trace_din_all[180]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all[195]_i_1_n_0 ),
        .Q(\Embedded_Trace.trace_din_all_reg_n_0_[195] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[196] 
       (.C(Clk),
        .CE(\Embedded_Trace.trace_din_all[180]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all[196]_i_1_n_0 ),
        .Q(data0),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[197] 
       (.C(Clk),
        .CE(\Embedded_Trace.trace_din_all[180]_i_1_n_0 ),
        .D(trace_din_muxed),
        .Q(\Embedded_Trace.trace_din_all_reg_n_0_[197] ),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[19] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all[19]_i_1_n_0 ),
        .Q(DATA_INA[17]),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all[1]_i_1_n_0 ),
        .Q(DATA_INA[1]),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[20] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[20]_i_1_n_0 ),
        .Q(DATA_INA[18]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[20]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[20]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[20]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[20]_i_1_n_0 ),
        .S(\save_sel_reg[1]_21 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[21] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[21]_i_1_n_0 ),
        .Q(DATA_INA[19]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[21]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[21]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[21]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[21]_i_1_n_0 ),
        .S(\save_sel_reg[1]_21 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[22] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[22]_i_1_n_0 ),
        .Q(DATA_INA[20]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[22]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[22]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[22]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[22]_i_1_n_0 ),
        .S(\save_sel_reg[1]_21 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[23] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[23]_i_1_n_0 ),
        .Q(DATA_INA[21]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[23]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[23]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[23]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[23]_i_1_n_0 ),
        .S(\save_sel_reg[1]_21 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[24] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[24]_i_1_n_0 ),
        .Q(DATA_INA[22]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[24]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[24]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[24]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[24]_i_1_n_0 ),
        .S(\save_sel_reg[1]_21 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[25] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[25]_i_1_n_0 ),
        .Q(DATA_INA[23]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[25]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[25]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[25]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[25]_i_1_n_0 ),
        .S(\save_sel_reg[1]_21 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[26] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[26]_i_1_n_0 ),
        .Q(DATA_INA[66]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[26]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[26]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[26]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[26]_i_1_n_0 ),
        .S(\save_sel_reg[1]_21 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[27] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[27]_i_1_n_0 ),
        .Q(DATA_INA[24]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[27]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[27]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[27]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[27]_i_1_n_0 ),
        .S(\save_sel_reg[1]_21 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[28] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[28]_i_1_n_0 ),
        .Q(DATA_INA[25]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[28]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[28]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[28]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[28]_i_1_n_0 ),
        .S(\save_sel_reg[1]_21 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[29] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[29]_i_1_n_0 ),
        .Q(DATA_INA[26]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[29]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[29]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[29]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[29]_i_1_n_0 ),
        .S(\save_sel_reg[1]_21 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[2]_i_1_n_0 ),
        .Q(DATA_INA[2]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[2]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[2]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[2]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[2]_i_1_n_0 ),
        .S(\save_sel_reg[0]_22 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[30] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[30]_i_1_n_0 ),
        .Q(DATA_INA[27]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[30]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[30]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[30]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[30]_i_1_n_0 ),
        .S(\save_sel_reg[1]_21 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[31] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[31]_i_1_n_0 ),
        .Q(DATA_INA[28]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[31]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[31]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[31]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[31]_i_1_n_0 ),
        .S(\save_sel_reg[1]_21 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[32] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[32]_i_1_n_0 ),
        .Q(DATA_INA[29]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[32]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[32]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[32]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[32]_i_1_n_0 ),
        .S(\save_sel_reg[1]_21 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[33] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[33]_i_1_n_0 ),
        .Q(DATA_INA[30]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[33]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[33]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[33]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[33]_i_1_n_0 ),
        .S(\save_sel_reg[1]_21 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[34] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[34]_i_1_n_0 ),
        .Q(DATA_INA[31]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[34]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[34]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[34]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[34]_i_1_n_0 ),
        .S(\save_sel_reg[1]_21 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[35] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[35]_i_1_n_0 ),
        .Q(DATA_INA[67]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[35]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[35]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[35]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[35]_i_1_n_0 ),
        .S(\save_sel_reg[1]_21 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[36] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all[36]_i_1_n_0 ),
        .Q(DATA_INA[32]),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[37] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all[37]_i_1_n_0 ),
        .Q(DATA_INA[33]),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[38] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[38]_i_1_n_0 ),
        .Q(DATA_INA[34]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[38]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[38]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[38]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[38]_i_1_n_0 ),
        .S(\save_sel_reg[2]_20 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[39] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[39]_i_1_n_0 ),
        .Q(DATA_INA[35]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[39]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[39]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[39]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[39]_i_1_n_0 ),
        .S(\save_sel_reg[2]_20 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[3] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[3]_i_1_n_0 ),
        .Q(DATA_INA[3]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[3]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[3]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[3]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[3]_i_1_n_0 ),
        .S(\save_sel_reg[0]_22 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[40] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[40]_i_1_n_0 ),
        .Q(DATA_INA[36]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[40]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[40]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[40]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[40]_i_1_n_0 ),
        .S(\save_sel_reg[2]_20 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[41] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[41]_i_1_n_0 ),
        .Q(DATA_INA[37]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[41]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[41]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[41]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[41]_i_1_n_0 ),
        .S(\save_sel_reg[2]_20 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[42] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[42]_i_1_n_0 ),
        .Q(DATA_INA[38]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[42]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[42]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[42]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[42]_i_1_n_0 ),
        .S(\save_sel_reg[2]_20 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[43] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[43]_i_1_n_0 ),
        .Q(DATA_INA[39]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[43]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[43]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[43]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[43]_i_1_n_0 ),
        .S(\save_sel_reg[2]_20 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[44] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[44]_i_1_n_0 ),
        .Q(DATA_INA[68]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[44]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[44]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[44]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[44]_i_1_n_0 ),
        .S(\save_sel_reg[2]_20 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[45] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[45]_i_1_n_0 ),
        .Q(DATA_INA[40]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[45]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[45]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[45]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[45]_i_1_n_0 ),
        .S(\save_sel_reg[2]_20 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[46] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[46]_i_1_n_0 ),
        .Q(DATA_INA[41]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[46]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[46]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[46]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[46]_i_1_n_0 ),
        .S(\save_sel_reg[2]_20 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[47] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[47]_i_1_n_0 ),
        .Q(DATA_INA[42]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[47]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[47]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[47]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[47]_i_1_n_0 ),
        .S(\save_sel_reg[2]_20 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[48] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all[48]_i_1_n_0 ),
        .Q(DATA_INA[43]),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[49] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all[49]_i_1_n_0 ),
        .Q(DATA_INA[44]),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[4] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[4]_i_1_n_0 ),
        .Q(DATA_INA[4]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[4]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[4]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[4]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[4]_i_1_n_0 ),
        .S(\save_sel_reg[0]_22 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[50] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all[50]_i_1_n_0 ),
        .Q(DATA_INA[45]),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[51] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all[51]_i_1_n_0 ),
        .Q(DATA_INA[46]),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[52] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all[52]_i_1_n_0 ),
        .Q(DATA_INA[47]),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[53] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all[53]_i_1_n_0 ),
        .Q(DATA_INA[69]),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[54] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all[54]_i_1_n_0 ),
        .Q(DATA_INA[48]),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[55] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all[55]_i_1_n_0 ),
        .Q(DATA_INA[49]),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[56] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[56]_i_1_n_0 ),
        .Q(DATA_INA[50]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[56]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[56]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[56]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[56]_i_1_n_0 ),
        .S(\save_sel_reg[3]_19 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[57] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[57]_i_1_n_0 ),
        .Q(DATA_INA[51]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[57]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[57]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[57]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[57]_i_1_n_0 ),
        .S(\save_sel_reg[3]_19 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[58] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[58]_i_1_n_0 ),
        .Q(DATA_INA[52]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[58]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[58]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[58]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[58]_i_1_n_0 ),
        .S(\save_sel_reg[3]_19 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[59] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[59]_i_1_n_0 ),
        .Q(DATA_INA[53]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[59]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[59]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[59]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[59]_i_1_n_0 ),
        .S(\save_sel_reg[3]_19 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[5] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[5]_i_1_n_0 ),
        .Q(DATA_INA[5]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[5]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[5]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[5]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[5]_i_1_n_0 ),
        .S(\save_sel_reg[0]_22 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[60] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[60]_i_1_n_0 ),
        .Q(DATA_INA[54]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[60]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[60]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[60]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[60]_i_1_n_0 ),
        .S(\save_sel_reg[3]_19 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[61] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[61]_i_1_n_0 ),
        .Q(DATA_INA[55]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[61]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[61]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[61]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[61]_i_1_n_0 ),
        .S(\save_sel_reg[3]_19 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[62] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[62]_i_1_n_0 ),
        .Q(DATA_INA[70]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[62]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[62]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[62]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[62]_i_1_n_0 ),
        .S(\save_sel_reg[3]_19 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[63] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[63]_i_1_n_0 ),
        .Q(DATA_INA[56]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[63]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[63]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[63]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[63]_i_1_n_0 ),
        .S(\save_sel_reg[3]_19 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[64] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[64]_i_1_n_0 ),
        .Q(DATA_INA[57]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[64]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[64]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[64]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[64]_i_1_n_0 ),
        .S(\save_sel_reg[3]_19 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[65] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[65]_i_1_n_0 ),
        .Q(DATA_INA[58]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[65]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[65]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[65]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[65]_i_1_n_0 ),
        .S(\save_sel_reg[3]_19 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[66] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[66]_i_1_n_0 ),
        .Q(DATA_INA[59]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[66]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[66]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[66]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[66]_i_1_n_0 ),
        .S(\save_sel_reg[3]_19 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[67] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[67]_i_1_n_0 ),
        .Q(DATA_INA[60]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[67]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[67]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[67]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[67]_i_1_n_0 ),
        .S(\save_sel_reg[3]_19 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[68] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[68]_i_1_n_0 ),
        .Q(DATA_INA[61]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[68]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[68]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[68]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[68]_i_1_n_0 ),
        .S(\save_sel_reg[3]_19 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[69] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[69]_i_1_n_0 ),
        .Q(DATA_INA[62]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[69]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[69]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[69]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[69]_i_1_n_0 ),
        .S(\save_sel_reg[3]_19 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[6] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[6]_i_1_n_0 ),
        .Q(DATA_INA[6]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[6]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[6]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[6]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[6]_i_1_n_0 ),
        .S(\save_sel_reg[0]_22 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[70] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[70]_i_1_n_0 ),
        .Q(DATA_INA[63]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[70]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[70]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[70]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[70]_i_1_n_0 ),
        .S(\save_sel_reg[3]_19 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[71] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[71]_i_1_n_0 ),
        .Q(DATA_INA[71]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[71]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[71]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[71]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[71]_i_1_n_0 ),
        .S(\save_sel_reg[3]_19 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[72] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all[72]_i_1_n_0 ),
        .Q(p_31_out[7]),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[73] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all[73]_i_1_n_0 ),
        .Q(p_31_out[6]),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[74] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[74]_i_1_n_0 ),
        .Q(p_31_out[5]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[74]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[74]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[74]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[74]_i_1_n_0 ),
        .S(\save_sel_reg[4]_18 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[75] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[75]_i_1_n_0 ),
        .Q(p_31_out[4]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[75]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[75]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[75]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[75]_i_1_n_0 ),
        .S(\save_sel_reg[4]_18 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[76] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[76]_i_1_n_0 ),
        .Q(p_31_out[3]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[76]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[76]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[76]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[76]_i_1_n_0 ),
        .S(\save_sel_reg[4]_18 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[77] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[77]_i_1_n_0 ),
        .Q(p_31_out[2]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[77]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[77]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[77]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[77]_i_1_n_0 ),
        .S(\save_sel_reg[4]_18 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[78] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[78]_i_1_n_0 ),
        .Q(p_31_out[1]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[78]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[78]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[78]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[78]_i_1_n_0 ),
        .S(\save_sel_reg[4]_18 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[79] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[79]_i_1_n_0 ),
        .Q(p_31_out[0]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[79]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[79]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[79]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[79]_i_1_n_0 ),
        .S(\save_sel_reg[4]_18 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[7] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[7]_i_1_n_0 ),
        .Q(DATA_INA[7]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[7]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[7]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[7]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[7]_i_1_n_0 ),
        .S(\save_sel_reg[0]_22 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[80] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[80]_i_1_n_0 ),
        .Q(p_30_out),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[80]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[80]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[80]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[80]_i_1_n_0 ),
        .S(\save_sel_reg[4]_18 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[81] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[81]_i_1_n_0 ),
        .Q(p_27_out[7]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[81]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[81]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[81]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[81]_i_1_n_0 ),
        .S(\save_sel_reg[4]_18 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[82] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[82]_i_1_n_0 ),
        .Q(p_27_out[6]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[82]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[82]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[82]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[82]_i_1_n_0 ),
        .S(\save_sel_reg[4]_18 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[83] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[83]_i_1_n_0 ),
        .Q(p_27_out[5]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[83]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[83]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[83]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[83]_i_1_n_0 ),
        .S(\save_sel_reg[4]_18 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[84] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[84]_i_1_n_0 ),
        .Q(p_27_out[4]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[84]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[84]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[84]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[84]_i_1_n_0 ),
        .S(\save_sel_reg[4]_18 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[85] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[85]_i_1_n_0 ),
        .Q(p_27_out[3]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[85]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[85]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[85]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[85]_i_1_n_0 ),
        .S(\save_sel_reg[4]_18 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[86] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[86]_i_1_n_0 ),
        .Q(p_27_out[2]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[86]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[86]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[86]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[86]_i_1_n_0 ),
        .S(\save_sel_reg[4]_18 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[87] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[87]_i_1_n_0 ),
        .Q(p_27_out[1]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[87]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[87]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[87]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[87]_i_1_n_0 ),
        .S(\save_sel_reg[4]_18 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[88] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[88]_i_1_n_0 ),
        .Q(p_27_out[0]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[88]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[88]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[88]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[88]_i_1_n_0 ),
        .S(\save_sel_reg[4]_18 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[89] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[89]_i_1_n_0 ),
        .Q(p_26_out),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[89]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[89]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[89]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[89]_i_1_n_0 ),
        .S(\save_sel_reg[4]_18 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[8] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[8]_i_1_n_0 ),
        .Q(DATA_INA[64]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[8]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[8]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[8]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[8]_i_1_n_0 ),
        .S(\save_sel_reg[0]_22 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[90] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all[90]_i_1_n_0 ),
        .Q(p_23_out[7]),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[91] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all[91]_i_1_n_0 ),
        .Q(p_23_out[6]),
        .R(sync_reset));
  FDRE \Embedded_Trace.trace_din_all_reg[92] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[92]_i_1_n_0 ),
        .Q(p_23_out[5]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[92]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[92]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[92]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[92]_i_1_n_0 ),
        .S(\save_sel_reg[5]_17 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[93] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[93]_i_1_n_0 ),
        .Q(p_23_out[4]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[93]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[93]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[93]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[93]_i_1_n_0 ),
        .S(\save_sel_reg[5]_17 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[94] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[94]_i_1_n_0 ),
        .Q(p_23_out[3]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[94]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[94]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[94]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[94]_i_1_n_0 ),
        .S(\save_sel_reg[5]_17 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[95] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[95]_i_1_n_0 ),
        .Q(p_23_out[2]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[95]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[95]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[95]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[95]_i_1_n_0 ),
        .S(\save_sel_reg[5]_17 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[96] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[96]_i_1_n_0 ),
        .Q(p_23_out[1]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[96]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[96]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[96]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[96]_i_1_n_0 ),
        .S(\save_sel_reg[5]_17 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[97] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[97]_i_1_n_0 ),
        .Q(p_23_out[0]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[97]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[97]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[97]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[97]_i_1_n_0 ),
        .S(\save_sel_reg[5]_17 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[98] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[98]_i_1_n_0 ),
        .Q(p_22_out),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[98]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[98]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[98]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[98]_i_1_n_0 ),
        .S(\save_sel_reg[5]_17 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[99] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[99]_i_1_n_0 ),
        .Q(p_19_out[7]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[99]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[99]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[99]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[99]_i_1_n_0 ),
        .S(\save_sel_reg[5]_17 [2]));
  FDRE \Embedded_Trace.trace_din_all_reg[9] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_din_all_reg[9]_i_1_n_0 ),
        .Q(DATA_INA[8]),
        .R(sync_reset));
  MUXF7 \Embedded_Trace.trace_din_all_reg[9]_i_1 
       (.I0(\Embedded_Trace.trace_din_all[9]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all[9]_i_3_n_0 ),
        .O(\Embedded_Trace.trace_din_all_reg[9]_i_1_n_0 ),
        .S(\save_sel_reg[0]_22 [2]));
  LUT6 #(
    .INIT(64'hAAAAAAAAAAAAAAA8)) 
    \Embedded_Trace.trace_wen[0]_i_1 
       (.I0(p_30_in),
        .I1(p_0_in34_in),
        .I2(\save_sel[1][0]_i_2_n_0 ),
        .I3(\save_sel_reg[0]_22 [0]),
        .I4(\save_sel_reg[0]_22 [1]),
        .I5(\save_sel_reg[0]_22 [2]),
        .O(next_wen[0]));
  LUT6 #(
    .INIT(64'hAAA8AAA8AAA8AAAA)) 
    \Embedded_Trace.trace_wen[10]_i_1 
       (.I0(p_30_in),
        .I1(\save_sel_reg[5]_17 [2]),
        .I2(\save_sel_reg[5]_17 [0]),
        .I3(\save_sel_reg[5]_17 [1]),
        .I4(\Serial_Dbg_Intf.control_reg_reg[16]_0 [1]),
        .I5(\Serial_Dbg_Intf.control_reg_reg[16]_0 [2]),
        .O(next_wen[10]));
  LUT6 #(
    .INIT(64'hAAA8AAA8AAA8AAAA)) 
    \Embedded_Trace.trace_wen[12]_i_1 
       (.I0(p_30_in),
        .I1(\save_sel_reg[6]_16 [2]),
        .I2(\save_sel_reg[6]_16 [0]),
        .I3(\save_sel_reg[6]_16 [1]),
        .I4(\Serial_Dbg_Intf.control_reg_reg[16]_0 [1]),
        .I5(\Serial_Dbg_Intf.control_reg_reg[16]_0 [2]),
        .O(next_wen[12]));
  LUT6 #(
    .INIT(64'hAAA8AAA8AAA8AAAA)) 
    \Embedded_Trace.trace_wen[14]_i_1 
       (.I0(p_30_in),
        .I1(\save_sel_reg[7]_15 [2]),
        .I2(\save_sel_reg[7]_15 [0]),
        .I3(\save_sel_reg[7]_15 [1]),
        .I4(\Serial_Dbg_Intf.control_reg_reg[16]_0 [1]),
        .I5(\Serial_Dbg_Intf.control_reg_reg[16]_0 [2]),
        .O(next_wen[14]));
  LUT6 #(
    .INIT(64'hAAAAAAAAAAAAAAA8)) 
    \Embedded_Trace.trace_wen[2]_i_1 
       (.I0(p_30_in),
        .I1(\Embedded_Trace.trace_wen_keep_reg_n_0_[2] ),
        .I2(\save_sel[1][0]_i_2_n_0 ),
        .I3(\save_sel_reg[1]_21 [0]),
        .I4(\save_sel_reg[1]_21 [1]),
        .I5(\save_sel_reg[1]_21 [2]),
        .O(next_wen[2]));
  LUT6 #(
    .INIT(64'hAAAAAAAAAAAAAAA8)) 
    \Embedded_Trace.trace_wen[4]_i_1 
       (.I0(p_30_in),
        .I1(\save_sel_reg[2]_20 [0]),
        .I2(\save_sel_reg[2]_20 [1]),
        .I3(\save_sel_reg[2]_20 [2]),
        .I4(\Embedded_Trace.trace_wen_keep_reg_n_0_[4] ),
        .I5(\save_sel[1][0]_i_2_n_0 ),
        .O(next_wen[4]));
  LUT6 #(
    .INIT(64'hAAA8AAA8AAA8AAAA)) 
    \Embedded_Trace.trace_wen[6]_i_1 
       (.I0(p_30_in),
        .I1(\save_sel_reg[3]_19 [2]),
        .I2(\save_sel_reg[3]_19 [0]),
        .I3(\save_sel_reg[3]_19 [1]),
        .I4(\Serial_Dbg_Intf.control_reg_reg[16]_0 [1]),
        .I5(\Serial_Dbg_Intf.control_reg_reg[16]_0 [2]),
        .O(next_wen[6]));
  LUT6 #(
    .INIT(64'hAAA8AAA8AAA8AAAA)) 
    \Embedded_Trace.trace_wen[8]_i_1 
       (.I0(p_30_in),
        .I1(\save_sel_reg[4]_18 [2]),
        .I2(\save_sel_reg[4]_18 [0]),
        .I3(\save_sel_reg[4]_18 [1]),
        .I4(\Serial_Dbg_Intf.control_reg_reg[16]_0 [1]),
        .I5(\Serial_Dbg_Intf.control_reg_reg[16]_0 [2]),
        .O(next_wen[8]));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFF0080)) 
    \Embedded_Trace.trace_wen_keep[0]_i_1 
       (.I0(\Embedded_Trace.trace_count_reg [4]),
        .I1(\Embedded_Trace.trace_count_reg [3]),
        .I2(\Embedded_Trace.trace_count_reg [5]),
        .I3(\Embedded_Trace.full_i_i_2_n_0 ),
        .I4(clear_cmd),
        .I5(sync_reset),
        .O(trace_wen_keep));
  LUT6 #(
    .INIT(64'h00FEFFFF00FE0000)) 
    \Embedded_Trace.trace_wen_keep[0]_i_2 
       (.I0(\save_sel_reg_n_0_[8][0] ),
        .I1(\save_sel_reg_n_0_[8][1] ),
        .I2(\save_sel_reg_n_0_[8][2] ),
        .I3(\Embedded_Trace.trace_wen_keep[0]_i_3_n_0 ),
        .I4(p_30_in),
        .I5(p_0_in34_in),
        .O(\Embedded_Trace.trace_wen_keep[0]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair128" *) 
  LUT3 #(
    .INIT(8'hF1)) 
    \Embedded_Trace.trace_wen_keep[0]_i_3 
       (.I0(\Serial_Dbg_Intf.control_reg_reg[16]_0 [2]),
        .I1(\Serial_Dbg_Intf.control_reg_reg[16]_0 [1]),
        .I2(\Embedded_Trace.wraddr[11]_i_4_n_0 ),
        .O(\Embedded_Trace.trace_wen_keep[0]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h00FEFFFF00FE0000)) 
    \Embedded_Trace.trace_wen_keep[2]_i_1 
       (.I0(\save_sel_reg_n_0_[9][0] ),
        .I1(\save_sel_reg_n_0_[9][1] ),
        .I2(\save_sel_reg_n_0_[9][2] ),
        .I3(\Embedded_Trace.trace_wen_keep[0]_i_3_n_0 ),
        .I4(p_30_in),
        .I5(\Embedded_Trace.trace_wen_keep_reg_n_0_[2] ),
        .O(\Embedded_Trace.trace_wen_keep[2]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h0EFF0E00)) 
    \Embedded_Trace.trace_wen_keep[4]_i_1 
       (.I0(\save_sel_reg_n_0_[10][1] ),
        .I1(\save_sel_reg_n_0_[9][0] ),
        .I2(\Embedded_Trace.trace_wen_keep[0]_i_3_n_0 ),
        .I3(p_30_in),
        .I4(\Embedded_Trace.trace_wen_keep_reg_n_0_[4] ),
        .O(\Embedded_Trace.trace_wen_keep[4]_i_1_n_0 ));
  FDRE \Embedded_Trace.trace_wen_keep_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_wen_keep[0]_i_2_n_0 ),
        .Q(p_0_in34_in),
        .R(trace_wen_keep));
  FDRE \Embedded_Trace.trace_wen_keep_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_wen_keep[2]_i_1_n_0 ),
        .Q(\Embedded_Trace.trace_wen_keep_reg_n_0_[2] ),
        .R(trace_wen_keep));
  FDRE \Embedded_Trace.trace_wen_keep_reg[4] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.trace_wen_keep[4]_i_1_n_0 ),
        .Q(\Embedded_Trace.trace_wen_keep_reg_n_0_[4] ),
        .R(trace_wen_keep));
  FDRE \Embedded_Trace.trace_wen_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(next_wen[0]),
        .Q(WEA[0]),
        .R(trace_wen_keep));
  FDRE \Embedded_Trace.trace_wen_reg[10] 
       (.C(Clk),
        .CE(1'b1),
        .D(next_wen[10]),
        .Q(\Embedded_Trace.trace_wen_reg_n_0_[10] ),
        .R(trace_wen_keep));
  FDRE \Embedded_Trace.trace_wen_reg[12] 
       (.C(Clk),
        .CE(1'b1),
        .D(next_wen[12]),
        .Q(\Embedded_Trace.trace_wen_reg_n_0_[12] ),
        .R(trace_wen_keep));
  FDRE \Embedded_Trace.trace_wen_reg[14] 
       (.C(Clk),
        .CE(1'b1),
        .D(next_wen[14]),
        .Q(\Embedded_Trace.trace_wen_reg_n_0_[14] ),
        .R(trace_wen_keep));
  FDRE \Embedded_Trace.trace_wen_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(next_wen[2]),
        .Q(WEA[2]),
        .R(trace_wen_keep));
  FDRE \Embedded_Trace.trace_wen_reg[4] 
       (.C(Clk),
        .CE(1'b1),
        .D(next_wen[4]),
        .Q(WEA[4]),
        .R(trace_wen_keep));
  FDRE \Embedded_Trace.trace_wen_reg[6] 
       (.C(Clk),
        .CE(1'b1),
        .D(next_wen[6]),
        .Q(WEA[6]),
        .R(trace_wen_keep));
  FDRE \Embedded_Trace.trace_wen_reg[8] 
       (.C(Clk),
        .CE(1'b1),
        .D(next_wen[8]),
        .Q(\Embedded_Trace.trace_wen_reg_n_0_[8] ),
        .R(trace_wen_keep));
  FDRE \Embedded_Trace.trace_wr_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(p_30_in),
        .Q(trace_wr),
        .R(trace_wen_keep));
  LUT5 #(
    .INIT(32'h000000E2)) 
    \Embedded_Trace.wraddr[0]_i_1 
       (.I0(wraddr[0]),
        .I1(p_30_in),
        .I2(plusOp[0]),
        .I3(clear_cmd),
        .I4(sync_reset),
        .O(\Embedded_Trace.wraddr[0]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \Embedded_Trace.wraddr[11]_i_1 
       (.I0(sync_reset),
        .I1(clear_cmd),
        .O(trace_count));
  LUT4 #(
    .INIT(16'h5455)) 
    \Embedded_Trace.wraddr[11]_i_2 
       (.I0(\Embedded_Trace.wraddr[11]_i_4_n_0 ),
        .I1(\Serial_Dbg_Intf.control_reg_reg[16]_0 [1]),
        .I2(\Serial_Dbg_Intf.control_reg_reg[16]_0 [2]),
        .I3(\event_data_next_reg[12]_0 ),
        .O(p_30_in));
  LUT6 #(
    .INIT(64'h0000000000000007)) 
    \Embedded_Trace.wraddr[11]_i_4 
       (.I0(p_0_in34_in),
        .I1(trig_in_0_pulse_reg),
        .I2(writems[1]),
        .I3(writems[0]),
        .I4(writems[2]),
        .I5(writems[3]),
        .O(\Embedded_Trace.wraddr[11]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair91" *) 
  LUT5 #(
    .INIT(32'h000000E2)) 
    \Embedded_Trace.wraddr[1]_i_1 
       (.I0(wraddr[1]),
        .I1(p_30_in),
        .I2(plusOp[1]),
        .I3(clear_cmd),
        .I4(sync_reset),
        .O(\Embedded_Trace.wraddr[1]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h000000E2)) 
    \Embedded_Trace.wraddr[2]_i_1 
       (.I0(wraddr[2]),
        .I1(p_30_in),
        .I2(plusOp[2]),
        .I3(clear_cmd),
        .I4(sync_reset),
        .O(\Embedded_Trace.wraddr[2]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \Embedded_Trace.wraddr[3]_i_2 
       (.I0(wraddr[3]),
        .I1(writems[3]),
        .O(\Embedded_Trace.wraddr[3]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \Embedded_Trace.wraddr[3]_i_3 
       (.I0(wraddr[2]),
        .I1(writems[2]),
        .O(\Embedded_Trace.wraddr[3]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \Embedded_Trace.wraddr[3]_i_4 
       (.I0(wraddr[1]),
        .I1(writems[1]),
        .O(\Embedded_Trace.wraddr[3]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \Embedded_Trace.wraddr[3]_i_5 
       (.I0(wraddr[0]),
        .I1(writems[0]),
        .O(\Embedded_Trace.wraddr[3]_i_5_n_0 ));
  FDRE \Embedded_Trace.wraddr_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.wraddr[0]_i_1_n_0 ),
        .Q(wraddr[0]),
        .R(1'b0));
  FDRE \Embedded_Trace.wraddr_reg[10] 
       (.C(Clk),
        .CE(p_30_in),
        .D(plusOp[10]),
        .Q(wraddr[10]),
        .R(trace_count));
  FDRE \Embedded_Trace.wraddr_reg[11] 
       (.C(Clk),
        .CE(p_30_in),
        .D(plusOp[11]),
        .Q(wraddr[11]),
        .R(trace_count));
  CARRY4 \Embedded_Trace.wraddr_reg[11]_i_3 
       (.CI(\Embedded_Trace.wraddr_reg[7]_i_1_n_0 ),
        .CO({\NLW_Embedded_Trace.wraddr_reg[11]_i_3_CO_UNCONNECTED [3],\Embedded_Trace.wraddr_reg[11]_i_3_n_1 ,\Embedded_Trace.wraddr_reg[11]_i_3_n_2 ,\Embedded_Trace.wraddr_reg[11]_i_3_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(plusOp[11:8]),
        .S(wraddr[11:8]));
  FDRE \Embedded_Trace.wraddr_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.wraddr[1]_i_1_n_0 ),
        .Q(wraddr[1]),
        .R(1'b0));
  FDRE \Embedded_Trace.wraddr_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Embedded_Trace.wraddr[2]_i_1_n_0 ),
        .Q(wraddr[2]),
        .R(1'b0));
  FDRE \Embedded_Trace.wraddr_reg[3] 
       (.C(Clk),
        .CE(p_30_in),
        .D(plusOp[3]),
        .Q(wraddr[3]),
        .R(trace_count));
  CARRY4 \Embedded_Trace.wraddr_reg[3]_i_1 
       (.CI(1'b0),
        .CO({\Embedded_Trace.wraddr_reg[3]_i_1_n_0 ,\Embedded_Trace.wraddr_reg[3]_i_1_n_1 ,\Embedded_Trace.wraddr_reg[3]_i_1_n_2 ,\Embedded_Trace.wraddr_reg[3]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI(wraddr[3:0]),
        .O(plusOp[3:0]),
        .S({\Embedded_Trace.wraddr[3]_i_2_n_0 ,\Embedded_Trace.wraddr[3]_i_3_n_0 ,\Embedded_Trace.wraddr[3]_i_4_n_0 ,\Embedded_Trace.wraddr[3]_i_5_n_0 }));
  FDRE \Embedded_Trace.wraddr_reg[4] 
       (.C(Clk),
        .CE(p_30_in),
        .D(plusOp[4]),
        .Q(wraddr[4]),
        .R(trace_count));
  FDRE \Embedded_Trace.wraddr_reg[5] 
       (.C(Clk),
        .CE(p_30_in),
        .D(plusOp[5]),
        .Q(wraddr[5]),
        .R(trace_count));
  FDRE \Embedded_Trace.wraddr_reg[6] 
       (.C(Clk),
        .CE(p_30_in),
        .D(plusOp[6]),
        .Q(wraddr[6]),
        .R(trace_count));
  FDRE \Embedded_Trace.wraddr_reg[7] 
       (.C(Clk),
        .CE(p_30_in),
        .D(plusOp[7]),
        .Q(wraddr[7]),
        .R(trace_count));
  CARRY4 \Embedded_Trace.wraddr_reg[7]_i_1 
       (.CI(\Embedded_Trace.wraddr_reg[3]_i_1_n_0 ),
        .CO({\Embedded_Trace.wraddr_reg[7]_i_1_n_0 ,\Embedded_Trace.wraddr_reg[7]_i_1_n_1 ,\Embedded_Trace.wraddr_reg[7]_i_1_n_2 ,\Embedded_Trace.wraddr_reg[7]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(plusOp[7:4]),
        .S(wraddr[7:4]));
  FDRE \Embedded_Trace.wraddr_reg[8] 
       (.C(Clk),
        .CE(p_30_in),
        .D(plusOp[8]),
        .Q(wraddr[8]),
        .R(trace_count));
  FDRE \Embedded_Trace.wraddr_reg[9] 
       (.C(Clk),
        .CE(p_30_in),
        .D(plusOp[9]),
        .Q(wraddr[9]),
        .R(trace_count));
  FDRE \Serial_Dbg_Intf.Start_Ack_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Serial_Dbg_Intf.sync_sample_n_14 ),
        .Q(Dbg_Trig_Ack_Out[0]),
        .R(1'b0));
  FDRE \Serial_Dbg_Intf.Started_Pulse_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(stopped_i1),
        .Q(\Serial_Dbg_Intf.Started_Pulse_reg_n_0 ),
        .R(sync_reset));
  FDRE \Serial_Dbg_Intf.Started_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Serial_Dbg_Intf.sync_sample_n_9 ),
        .Q(Dbg_Trig_In[0]),
        .R(1'b0));
  FDRE \Serial_Dbg_Intf.Stop_Ack_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Serial_Dbg_Intf.sync_sample_n_15 ),
        .Q(Dbg_Trig_Ack_Out[1]),
        .R(1'b0));
  FDRE \Serial_Dbg_Intf.Stopped_Pulse_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(stopped_i0),
        .Q(\Serial_Dbg_Intf.Stopped_Pulse_reg_n_0 ),
        .R(sync_reset));
  FDRE \Serial_Dbg_Intf.Stopped_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Serial_Dbg_Intf.sync_sample_n_12 ),
        .Q(Dbg_Trig_In[1]),
        .R(1'b0));
  FDRE \Serial_Dbg_Intf.clear_cmd_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(clear_cmd0),
        .Q(clear_cmd),
        .R(sync_reset));
  LUT3 #(
    .INIT(8'h01)) 
    \Serial_Dbg_Intf.command_reg[0]_i_1__0 
       (.I0(Dbg_Reg_En[5]),
        .I1(Dbg_Reg_En[0]),
        .I2(\Serial_Dbg_Intf.command_reg[0]_i_2__0_n_0 ),
        .O(Command_Reg_En));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFDFFFFF)) 
    \Serial_Dbg_Intf.command_reg[0]_i_2__0 
       (.I0(Dbg_Reg_En[2]),
        .I1(Dbg_Reg_En[4]),
        .I2(Dbg_Reg_En[1]),
        .I3(Dbg_Reg_En[3]),
        .I4(Dbg_Reg_En[6]),
        .I5(Dbg_Reg_En[7]),
        .O(\Serial_Dbg_Intf.command_reg[0]_i_2__0_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.command_reg_reg[0] 
       (.C(Dbg_Update),
        .CE(Command_Reg_En),
        .CLR(AR),
        .D(\Serial_Dbg_Intf.control_reg_reg[0]_1 [3]),
        .Q(command_reg[0]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.command_reg_reg[1] 
       (.C(Dbg_Update),
        .CE(Command_Reg_En),
        .CLR(AR),
        .D(\Serial_Dbg_Intf.control_reg_reg[0]_1 [2]),
        .Q(command_reg[1]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.command_reg_reg[2] 
       (.C(Dbg_Update),
        .CE(Command_Reg_En),
        .CLR(AR),
        .D(\Serial_Dbg_Intf.control_reg_reg[0]_1 [1]),
        .Q(command_reg[2]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.command_reg_reg[3] 
       (.C(Dbg_Update),
        .CE(Command_Reg_En),
        .CLR(AR),
        .D(\Serial_Dbg_Intf.control_reg_reg[0]_1 [0]),
        .Q(command_reg[3]));
  LUT5 #(
    .INIT(32'h00000002)) 
    \Serial_Dbg_Intf.control_reg[0]_i_1 
       (.I0(Dbg_Reg_En_7_sn_1),
        .I1(Dbg_Reg_En[3]),
        .I2(Dbg_Reg_En[6]),
        .I3(Dbg_Reg_En[0]),
        .I4(Dbg_Reg_En[5]),
        .O(Control_Reg_En));
  LUT4 #(
    .INIT(16'h0800)) 
    \Serial_Dbg_Intf.control_reg[0]_i_3 
       (.I0(Dbg_Reg_En[7]),
        .I1(Dbg_Reg_En[2]),
        .I2(Dbg_Reg_En[4]),
        .I3(Dbg_Reg_En[1]),
        .O(Dbg_Reg_En_7_sn_1));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.control_reg_reg[0] 
       (.C(Dbg_Update),
        .CE(Control_Reg_En),
        .CLR(AR),
        .D(\Serial_Dbg_Intf.control_reg_reg[0]_1 [6]),
        .Q(Trace_Sel));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.control_reg_reg[16] 
       (.C(Dbg_Update),
        .CE(Control_Reg_En),
        .CLR(AR),
        .D(\Serial_Dbg_Intf.control_reg_reg[0]_1 [5]),
        .Q(\Serial_Dbg_Intf.control_reg_reg[16]_0 [2]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.control_reg_reg[17] 
       (.C(Dbg_Update),
        .CE(Control_Reg_En),
        .CLR(AR),
        .D(\Serial_Dbg_Intf.control_reg_reg[0]_1 [4]),
        .Q(\Serial_Dbg_Intf.control_reg_reg[16]_0 [1]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.control_reg_reg[18] 
       (.C(Dbg_Update),
        .CE(Control_Reg_En),
        .CLR(AR),
        .D(\Serial_Dbg_Intf.control_reg_reg[0]_1 [3]),
        .Q(fullhalt_ctrl));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.control_reg_reg[19] 
       (.C(Dbg_Update),
        .CE(Control_Reg_En),
        .CLR(AR),
        .D(\Serial_Dbg_Intf.control_reg_reg[0]_1 [2]),
        .Q(savepc_ctrl));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.control_reg_reg[20] 
       (.C(Dbg_Update),
        .CE(Control_Reg_En),
        .CLR(AR),
        .D(\Serial_Dbg_Intf.control_reg_reg[0]_1 [1]),
        .Q(\Serial_Dbg_Intf.control_reg_reg[16]_0 [0]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.control_reg_reg[21] 
       (.C(Dbg_Update),
        .CE(Control_Reg_En),
        .CLR(AR),
        .D(\Serial_Dbg_Intf.control_reg_reg[0]_1 [0]),
        .Q(saveret_ctrl));
  FDRE \Serial_Dbg_Intf.sample_cmd_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(sample_cmd0),
        .Q(sample_cmd),
        .R(sync_reset));
  FDRE \Serial_Dbg_Intf.sample_synced_1_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[4]),
        .Q(\Serial_Dbg_Intf.sample_synced_1_reg[0]_0 [4]),
        .R(sync_reset));
  FDRE \Serial_Dbg_Intf.sample_synced_1_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[3]),
        .Q(\Serial_Dbg_Intf.sample_synced_1_reg[0]_0 [3]),
        .R(sync_reset));
  FDRE \Serial_Dbg_Intf.sample_synced_1_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[2]),
        .Q(\Serial_Dbg_Intf.sample_synced_1_reg[0]_0 [2]),
        .R(sync_reset));
  FDRE \Serial_Dbg_Intf.sample_synced_1_reg[3] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[1]),
        .Q(\Serial_Dbg_Intf.sample_synced_1_reg[0]_0 [1]),
        .R(sync_reset));
  FDRE \Serial_Dbg_Intf.sample_synced_1_reg[4] 
       (.C(Clk),
        .CE(1'b1),
        .D(sample_synced[4]),
        .Q(p_1_in84_in),
        .R(sync_reset));
  FDRE \Serial_Dbg_Intf.sample_synced_1_reg[5] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[0]),
        .Q(\Serial_Dbg_Intf.sample_synced_1_reg[0]_0 [0]),
        .R(sync_reset));
  FDRE \Serial_Dbg_Intf.sample_synced_1_reg[6] 
       (.C(Clk),
        .CE(1'b1),
        .D(sample_synced[6]),
        .Q(\Serial_Dbg_Intf.sample_synced_1_reg_n_0_[6] ),
        .R(sync_reset));
  FDRE \Serial_Dbg_Intf.sample_synced_1_reg[7] 
       (.C(Clk),
        .CE(1'b1),
        .D(sample_synced[7]),
        .Q(\Serial_Dbg_Intf.sample_synced_1_reg_n_0_[7] ),
        .R(sync_reset));
  FDRE \Serial_Dbg_Intf.sample_synced_1_reg[8] 
       (.C(Clk),
        .CE(1'b1),
        .D(sample_synced[8]),
        .Q(\Serial_Dbg_Intf.sample_synced_1_reg_n_0_[8] ),
        .R(sync_reset));
  FDRE \Serial_Dbg_Intf.start_cmd_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(start_cmd0),
        .Q(start_cmd),
        .R(sync_reset));
  FDRE \Serial_Dbg_Intf.started_i_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Serial_Dbg_Intf.started_i_reg_0 ),
        .Q(started_i),
        .R(sync_reset));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_reg_reg[0] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(AR),
        .D(sync),
        .Q(status_reg[0]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_reg_reg[10] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(AR),
        .D(status_count[7]),
        .Q(status_reg[10]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_reg_reg[11] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(AR),
        .D(status_count[6]),
        .Q(status_reg[11]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_reg_reg[12] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(AR),
        .D(status_count[5]),
        .Q(status_reg[12]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_reg_reg[13] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(AR),
        .D(status_count[4]),
        .Q(status_reg[13]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_reg_reg[14] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(AR),
        .D(status_count[3]),
        .Q(status_reg[14]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_reg_reg[15] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(AR),
        .D(status_count[2]),
        .Q(status_reg[15]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_reg_reg[16] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(AR),
        .D(status_count[1]),
        .Q(status_reg[16]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_reg_reg[17] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(AR),
        .D(status_count[0]),
        .Q(status_reg[17]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_reg_reg[1] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(AR),
        .D(\Serial_Dbg_Intf.sync_cc_overflow_n_0 ),
        .Q(status_reg[1]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_reg_reg[6] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(AR),
        .D(status_count[11]),
        .Q(status_reg[6]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_reg_reg[7] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(AR),
        .D(status_count[10]),
        .Q(status_reg[7]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_reg_reg[8] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(AR),
        .D(status_count[9]),
        .Q(status_reg[8]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_reg_reg[9] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(AR),
        .D(status_count[8]),
        .Q(status_reg[9]));
  FDRE \Serial_Dbg_Intf.stop_cmd_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(stop_cmd0),
        .Q(stop_cmd),
        .R(sync_reset));
  FDSE \Serial_Dbg_Intf.stopped_i_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Serial_Dbg_Intf.stopped_i_reg_2 ),
        .Q(\Serial_Dbg_Intf.stopped_i_reg_0 ),
        .S(sync_reset));
  block_design_microblaze_0_0_mb_sync_bit__parameterized2_49 \Serial_Dbg_Intf.sync_cc_overflow 
       (.AR(AR),
        .D(\Serial_Dbg_Intf.sync_cc_overflow_n_0 ),
        .Dbg_Clk(Dbg_Clk),
        .\Single_Synchronize.use_async_reset.sync_reg_0 (cc_overflow_reg_0));
  block_design_microblaze_0_0_mb_sync_vec__parameterized5 \Serial_Dbg_Intf.sync_sample 
       (.Clk(Clk),
        .D({D[4:1],sample_synced[4],D[0],sample_synced[6],sample_synced[7],sample_synced[8]}),
        .Dbg_Trig_Ack_In(Dbg_Trig_Ack_In),
        .Dbg_Trig_Ack_Out(Dbg_Trig_Ack_Out),
        .Dbg_Trig_In(Dbg_Trig_In),
        .Dbg_Trig_Out(Dbg_Trig_Out),
        .Q({p_1_in84_in,\Serial_Dbg_Intf.sample_synced_1_reg[0]_0 [0],\Serial_Dbg_Intf.sample_synced_1_reg_n_0_[6] ,\Serial_Dbg_Intf.sample_synced_1_reg_n_0_[7] ,\Serial_Dbg_Intf.sample_synced_1_reg_n_0_[8] }),
        .\Serial_Dbg_Intf.sample_synced_1_reg[4] (\Serial_Dbg_Intf.sample_synced_1_reg[4]_0 ),
        .\Serial_Dbg_Intf.sample_synced_1_reg[4]_0 (\Serial_Dbg_Intf.sync_sample_n_14 ),
        .\Serial_Dbg_Intf.sample_synced_1_reg[5] (\Serial_Dbg_Intf.sync_sample_n_15 ),
        .\Synchronize.use_sync_reset.sync_reg[1] ({command_reg[0],command_reg[1],command_reg[2],command_reg[3]}),
        .\Synchronize.use_sync_reset.sync_reg[1]_0 (\Synchronize.use_sync_reset.sync_reg[1] ),
        .\Synchronize.use_sync_reset.sync_reg[2] (\Serial_Dbg_Intf.sync_sample_n_9 ),
        .\Use_Async_Reset.sync_reset_reg (\Serial_Dbg_Intf.sync_sample_n_12 ),
        .full_i(full_i),
        .start_cmd(start_cmd),
        .stop_cmd(stop_cmd),
        .stopped_i0(stopped_i0),
        .stopped_i1(stopped_i1),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_mb_sync_bit__parameterized2_50 \Serial_Dbg_Intf.sync_started 
       (.AR(AR),
        .D(sync),
        .Dbg_Clk(Dbg_Clk),
        .\Single_Synchronize.use_async_reset.sync_reg_0 (started_i));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.Native_i_1__165 
       (.I0(Trace_Sel),
        .O(S_0));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.Native_i_1__169 
       (.I0(Trace_Sel),
        .O(\Serial_Dbg_Intf.control_reg_reg[0]_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFB)) 
    \Using_FPGA.Native_i_6__3 
       (.I0(\Using_FPGA.Native_i_7__2_n_0 ),
        .I1(\Using_FPGA.Native ),
        .I2(\Using_FPGA.Native_0 ),
        .I3(normal_stop_cmd_i),
        .I4(normal_stop_cmd_hold),
        .I5(\Using_FPGA.Native_1 ),
        .O(\Serial_Dbg_Intf.normal_stop_cmd_i_reg ));
  (* SOFT_HLUTNM = "soft_lutpair96" *) 
  LUT4 #(
    .INIT(16'hFFE0)) 
    \Using_FPGA.Native_i_7__2 
       (.I0(cc_overflow_reg_0),
        .I1(halt_i),
        .I2(fullhalt_ctrl),
        .I3(trace_halt_hold),
        .O(\Using_FPGA.Native_i_7__2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFEEFEFFFFFFFF)) 
    \branch_count[0]_i_1 
       (.I0(\branch_count[0]_i_3_n_0 ),
        .I1(\branch_count[0]_i_4_n_0 ),
        .I2(save_pc_next_next_reg_0),
        .I3(\event_data_next_reg[12]_0 ),
        .I4(\branch_count[0]_i_5_n_0 ),
        .I5(\branch_count_reg[3]_0 ),
        .O(\branch_count[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair90" *) 
  LUT5 #(
    .INIT(32'h2A2A8000)) 
    \branch_count[0]_i_2 
       (.I0(\branch_count[0]_i_7_n_0 ),
        .I1(branch_count[3]),
        .I2(branch_count[2]),
        .I3(branch_count[1]),
        .I4(branch_count[0]),
        .O(\branch_count[0]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair84" *) 
  LUT5 #(
    .INIT(32'hFFFFFFAB)) 
    \branch_count[0]_i_3 
       (.I0(\Serial_Dbg_Intf.trig_in_1_pulse_reg ),
        .I1(\Serial_Dbg_Intf.control_reg_reg[16]_0 [1]),
        .I2(\Serial_Dbg_Intf.control_reg_reg[16]_0 [2]),
        .I3(sync_reset),
        .I4(\Serial_Dbg_Intf.stopped_i_reg_0 ),
        .O(\branch_count[0]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair89" *) 
  LUT3 #(
    .INIT(8'h08)) 
    \branch_count[0]_i_4 
       (.I0(last_item_reg_0),
        .I1(trig_in_0_pulse_reg),
        .I2(save_pc_next),
        .O(\branch_count[0]_i_4_n_0 ));
  LUT4 #(
    .INIT(16'hFF5D)) 
    \branch_count[0]_i_5 
       (.I0(\Serial_Dbg_Intf.control_reg_reg[21]_0 ),
        .I1(\Embedded_Trace.trace_din_all_reg[80]_0 [72]),
        .I2(\event_data_next_reg[12]_0 ),
        .I3(\Serial_Dbg_Intf.control_reg_reg[16]_1 ),
        .O(\branch_count[0]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000040000)) 
    \branch_count[0]_i_7 
       (.I0(\Serial_Dbg_Intf.trig_in_1_pulse_reg ),
        .I1(\Serial_Dbg_Intf.control_reg_reg[16]_0 [1]),
        .I2(sync_reset),
        .I3(\Serial_Dbg_Intf.stopped_i_reg_0 ),
        .I4(cc_clear_i_4_n_0),
        .I5(\Serial_Dbg_Intf.control_reg_reg[16]_0 [2]),
        .O(\branch_count[0]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFD)) 
    \branch_count[0]_i_9 
       (.I0(\Embedded_Trace.trace_din_all_reg[80]_0 [177]),
        .I1(\Embedded_Trace.trace_din_all_reg[80]_0 [176]),
        .I2(\Embedded_Trace.trace_din_all_reg[80]_0 [171]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [169]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [173]),
        .I5(\Embedded_Trace.trace_din_all_reg[80]_0 [174]),
        .O(\trace_instruction_i_reg[2]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair90" *) 
  LUT5 #(
    .INIT(32'h0CCC4000)) 
    \branch_count[1]_i_1 
       (.I0(branch_count[0]),
        .I1(\branch_count[0]_i_7_n_0 ),
        .I2(branch_count[2]),
        .I3(branch_count[3]),
        .I4(branch_count[1]),
        .O(\branch_count[1]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h28)) 
    \branch_count[2]_i_1 
       (.I0(\branch_count[0]_i_7_n_0 ),
        .I1(branch_count[3]),
        .I2(branch_count[2]),
        .O(\branch_count[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h80C0000000FF0000)) 
    \branch_count[3]_i_1 
       (.I0(branch_count[2]),
        .I1(\branch_count[3]_i_2_n_0 ),
        .I2(\Serial_Dbg_Intf.control_reg_reg[16]_0 [1]),
        .I3(branch_count[3]),
        .I4(\branch_count[3]_i_3_n_0 ),
        .I5(\Serial_Dbg_Intf.control_reg_reg[16]_0 [2]),
        .O(\branch_count[3]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00000001)) 
    \branch_count[3]_i_2 
       (.I0(cycle_count_reg[3]),
        .I1(cycle_count_reg[1]),
        .I2(cycle_count_reg[4]),
        .I3(cycle_count_reg[9]),
        .I4(\branch_count[3]_i_4_n_0 ),
        .O(\branch_count[3]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000002020200)) 
    \branch_count[3]_i_3 
       (.I0(cc_clear_i_4_n_0),
        .I1(\Serial_Dbg_Intf.stopped_i_reg_0 ),
        .I2(sync_reset),
        .I3(\Serial_Dbg_Intf.control_reg_reg[16]_0 [2]),
        .I4(\Serial_Dbg_Intf.control_reg_reg[16]_0 [1]),
        .I5(\Serial_Dbg_Intf.trig_in_1_pulse_reg ),
        .O(\branch_count[3]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \branch_count[3]_i_4 
       (.I0(S),
        .I1(p_0_in38_in),
        .I2(cycle_count_reg[6]),
        .I3(cycle_count_reg[7]),
        .I4(cycle_count_reg[5]),
        .I5(cycle_count_reg[8]),
        .O(\branch_count[3]_i_4_n_0 ));
  FDRE \branch_count_reg[0] 
       (.C(Clk),
        .CE(\branch_count[0]_i_1_n_0 ),
        .D(\branch_count[0]_i_2_n_0 ),
        .Q(branch_count[0]),
        .R(1'b0));
  FDRE \branch_count_reg[1] 
       (.C(Clk),
        .CE(\branch_count[0]_i_1_n_0 ),
        .D(\branch_count[1]_i_1_n_0 ),
        .Q(branch_count[1]),
        .R(1'b0));
  FDRE \branch_count_reg[2] 
       (.C(Clk),
        .CE(\branch_count[0]_i_1_n_0 ),
        .D(\branch_count[2]_i_1_n_0 ),
        .Q(branch_count[2]),
        .R(1'b0));
  FDRE \branch_count_reg[3] 
       (.C(Clk),
        .CE(\branch_count[0]_i_1_n_0 ),
        .D(\branch_count[3]_i_1_n_0 ),
        .Q(branch_count[3]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h1011FFFF10110000)) 
    \branch_data[0]_i_1 
       (.I0(\Serial_Dbg_Intf.stopped_i_reg_0 ),
        .I1(sync_reset),
        .I2(\branch_data[0]_i_2_n_0 ),
        .I3(\branch_data[0]_i_3_n_0 ),
        .I4(\branch_data[0]_i_4_n_0 ),
        .I5(p_0_in__0[8]),
        .O(\branch_data[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h000000007F806F80)) 
    \branch_data[0]_i_2 
       (.I0(branch_count[3]),
        .I1(branch_count[2]),
        .I2(branch_count[1]),
        .I3(branch_count[0]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [71]),
        .I5(\branch_data[4]_i_4_n_0 ),
        .O(\branch_data[0]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair87" *) 
  LUT5 #(
    .INIT(32'hD0FFFFFF)) 
    \branch_data[0]_i_3 
       (.I0(branch_count[3]),
        .I1(branch_count[2]),
        .I2(\branch_count[3]_i_2_n_0 ),
        .I3(\Serial_Dbg_Intf.control_reg_reg[16]_0 [2]),
        .I4(\Serial_Dbg_Intf.control_reg_reg[16]_0 [1]),
        .O(\branch_data[0]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFF111F)) 
    \branch_data[0]_i_4 
       (.I0(\Embedded_Trace.trace_din_all_reg[80]_0 [72]),
        .I1(\Serial_Dbg_Intf.control_reg_reg[21]_0 ),
        .I2(\Serial_Dbg_Intf.control_reg_reg[16]_0 [1]),
        .I3(\Serial_Dbg_Intf.control_reg_reg[16]_0 [2]),
        .I4(sync_reset),
        .I5(\Serial_Dbg_Intf.stopped_i_reg_0 ),
        .O(\branch_data[0]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h2FFF2F2F20002020)) 
    \branch_data[10]_i_1 
       (.I0(\save_sel[5][0]_i_3_n_0 ),
        .I1(\branch_data[10]_i_2_n_0 ),
        .I2(\branch_data[0]_i_4_n_0 ),
        .I3(\branch_data[10]_i_3_n_0 ),
        .I4(\branch_data[0]_i_3_n_0 ),
        .I5(\branch_data_reg_n_0_[10] ),
        .O(\branch_data[10]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h7777777777077777)) 
    \branch_data[10]_i_2 
       (.I0(cc_clear_i_3_n_0),
        .I1(cycle_count_reg[11]),
        .I2(\branch_data[4]_i_5_n_0 ),
        .I3(\branch_data[9]_i_4_n_0 ),
        .I4(branch_count[2]),
        .I5(branch_count[3]),
        .O(\branch_data[10]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h00000400FFFFFFFF)) 
    \branch_data[10]_i_3 
       (.I0(cc_clear_i_3_n_0),
        .I1(branch_count[1]),
        .I2(branch_count[0]),
        .I3(branch_count[2]),
        .I4(branch_count[3]),
        .I5(\Serial_Dbg_Intf.stopped_i_reg_1 ),
        .O(\branch_data[10]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h2FFF2F2F20002020)) 
    \branch_data[11]_i_1 
       (.I0(\save_sel[5][0]_i_3_n_0 ),
        .I1(\branch_data[11]_i_2_n_0 ),
        .I2(\branch_data[0]_i_4_n_0 ),
        .I3(\branch_data[11]_i_3_n_0 ),
        .I4(\branch_data[0]_i_3_n_0 ),
        .I5(\branch_data_reg_n_0_[11] ),
        .O(\branch_data[11]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h7777777707777777)) 
    \branch_data[11]_i_2 
       (.I0(cc_clear_i_3_n_0),
        .I1(cycle_count_reg[12]),
        .I2(\branch_data[4]_i_5_n_0 ),
        .I3(\branch_data[11]_i_4_n_0 ),
        .I4(branch_count[1]),
        .I5(branch_count[0]),
        .O(\branch_data[11]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h00004000FFFFFFFF)) 
    \branch_data[11]_i_3 
       (.I0(cc_clear_i_3_n_0),
        .I1(branch_count[3]),
        .I2(branch_count[2]),
        .I3(branch_count[1]),
        .I4(branch_count[0]),
        .I5(\Serial_Dbg_Intf.stopped_i_reg_1 ),
        .O(\branch_data[11]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \branch_data[11]_i_4 
       (.I0(branch_count[2]),
        .I1(branch_count[3]),
        .O(\branch_data[11]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h2FFF2F2F20002020)) 
    \branch_data[12]_i_1 
       (.I0(\save_sel[5][0]_i_3_n_0 ),
        .I1(\branch_data[12]_i_2_n_0 ),
        .I2(\branch_data[0]_i_4_n_0 ),
        .I3(\branch_data[12]_i_3_n_0 ),
        .I4(\branch_data[0]_i_3_n_0 ),
        .I5(\branch_data_reg_n_0_[12] ),
        .O(\branch_data[12]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h7777777777777707)) 
    \branch_data[12]_i_2 
       (.I0(cc_clear_i_3_n_0),
        .I1(cycle_count_reg[13]),
        .I2(\branch_data[4]_i_5_n_0 ),
        .I3(branch_count[3]),
        .I4(branch_count[2]),
        .I5(\branch_data[12]_i_4_n_0 ),
        .O(\branch_data[12]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h00000100FFFFFFFF)) 
    \branch_data[12]_i_3 
       (.I0(cc_clear_i_3_n_0),
        .I1(branch_count[3]),
        .I2(branch_count[2]),
        .I3(branch_count[0]),
        .I4(branch_count[1]),
        .I5(\Serial_Dbg_Intf.stopped_i_reg_1 ),
        .O(\branch_data[12]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair120" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \branch_data[12]_i_4 
       (.I0(branch_count[1]),
        .I1(branch_count[0]),
        .O(\branch_data[12]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hBFBBBBBB80888888)) 
    \branch_data[13]_i_1 
       (.I0(p_1_in[2]),
        .I1(\branch_data[0]_i_4_n_0 ),
        .I2(\branch_data[13]_i_3_n_0 ),
        .I3(\Serial_Dbg_Intf.stopped_i_reg_1 ),
        .I4(\branch_data[0]_i_3_n_0 ),
        .I5(\branch_data_reg_n_0_[13] ),
        .O(\branch_data[13]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAAAA200020002000)) 
    \branch_data[13]_i_2 
       (.I0(\save_sel[5][0]_i_3_n_0 ),
        .I1(\branch_data[12]_i_4_n_0 ),
        .I2(\branch_data[9]_i_5_n_0 ),
        .I3(\branch_data[4]_i_5_n_0 ),
        .I4(cycle_count_reg[14]),
        .I5(cc_clear_i_3_n_0),
        .O(p_1_in[2]));
  (* SOFT_HLUTNM = "soft_lutpair115" *) 
  LUT4 #(
    .INIT(16'h0040)) 
    \branch_data[13]_i_3 
       (.I0(branch_count[2]),
        .I1(branch_count[3]),
        .I2(branch_count[0]),
        .I3(branch_count[1]),
        .O(\branch_data[13]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h2FFF2F2F20002020)) 
    \branch_data[14]_i_1 
       (.I0(\save_sel[5][0]_i_3_n_0 ),
        .I1(\branch_data[14]_i_2_n_0 ),
        .I2(\branch_data[0]_i_4_n_0 ),
        .I3(\branch_data[14]_i_3_n_0 ),
        .I4(\branch_data[0]_i_3_n_0 ),
        .I5(\branch_data_reg_n_0_[14] ),
        .O(\branch_data[14]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h7777777777077777)) 
    \branch_data[14]_i_2 
       (.I0(cc_clear_i_3_n_0),
        .I1(cycle_count_reg[15]),
        .I2(\branch_data[4]_i_5_n_0 ),
        .I3(\branch_data[12]_i_4_n_0 ),
        .I4(branch_count[2]),
        .I5(branch_count[3]),
        .O(\branch_data[14]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h00000400FFFFFFFF)) 
    \branch_data[14]_i_3 
       (.I0(cc_clear_i_3_n_0),
        .I1(branch_count[0]),
        .I2(branch_count[1]),
        .I3(branch_count[2]),
        .I4(branch_count[3]),
        .I5(\Serial_Dbg_Intf.stopped_i_reg_1 ),
        .O(\branch_data[14]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFB333300080000)) 
    \branch_data[15]_i_1 
       (.I0(\Embedded_Trace.trace_din_all_reg[80]_0 [71]),
        .I1(\branch_data[0]_i_4_n_0 ),
        .I2(\branch_data[15]_i_2_n_0 ),
        .I3(\branch_data[15]_i_3_n_0 ),
        .I4(\Serial_Dbg_Intf.stopped_i_reg_1 ),
        .I5(\branch_data_reg_n_0_[15] ),
        .O(\branch_data[15]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h7077777777777777)) 
    \branch_data[15]_i_2 
       (.I0(\Serial_Dbg_Intf.control_reg_reg[16]_0 [2]),
        .I1(\Serial_Dbg_Intf.control_reg_reg[16]_0 [1]),
        .I2(branch_count[1]),
        .I3(branch_count[0]),
        .I4(branch_count[2]),
        .I5(branch_count[3]),
        .O(\branch_data[15]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair87" *) 
  LUT5 #(
    .INIT(32'hD0000000)) 
    \branch_data[15]_i_3 
       (.I0(branch_count[3]),
        .I1(branch_count[2]),
        .I2(\branch_count[3]_i_2_n_0 ),
        .I3(\Serial_Dbg_Intf.control_reg_reg[16]_0 [2]),
        .I4(\Serial_Dbg_Intf.control_reg_reg[16]_0 [1]),
        .O(\branch_data[15]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h1011FFFF10110000)) 
    \branch_data[1]_i_1 
       (.I0(\Serial_Dbg_Intf.stopped_i_reg_0 ),
        .I1(sync_reset),
        .I2(\branch_data[1]_i_2_n_0 ),
        .I3(\branch_data[1]_i_3_n_0 ),
        .I4(\branch_data[0]_i_4_n_0 ),
        .I5(p_0_in__0[7]),
        .O(\branch_data[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h000000000FF0B0F0)) 
    \branch_data[1]_i_2 
       (.I0(\Embedded_Trace.trace_din_all_reg[80]_0 [71]),
        .I1(branch_count[0]),
        .I2(branch_count[1]),
        .I3(branch_count[3]),
        .I4(branch_count[2]),
        .I5(\branch_data[4]_i_4_n_0 ),
        .O(\branch_data[1]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair88" *) 
  LUT5 #(
    .INIT(32'h20FFFFFF)) 
    \branch_data[1]_i_3 
       (.I0(branch_count[3]),
        .I1(branch_count[2]),
        .I2(\branch_count[3]_i_2_n_0 ),
        .I3(\Serial_Dbg_Intf.control_reg_reg[16]_0 [2]),
        .I4(\Serial_Dbg_Intf.control_reg_reg[16]_0 [1]),
        .O(\branch_data[1]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h8A88FFFF8A880000)) 
    \branch_data[2]_i_1 
       (.I0(\save_sel[5][0]_i_3_n_0 ),
        .I1(\branch_data[2]_i_2_n_0 ),
        .I2(\branch_data[2]_i_3_n_0 ),
        .I3(\branch_count[3]_i_2_n_0 ),
        .I4(\branch_data[2]_i_4_n_0 ),
        .I5(p_0_in__0[6]),
        .O(\branch_data[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h80BCBC808080BC80)) 
    \branch_data[2]_i_2 
       (.I0(cycle_count_reg[3]),
        .I1(\Serial_Dbg_Intf.control_reg_reg[16]_0 [2]),
        .I2(\Serial_Dbg_Intf.control_reg_reg[16]_0 [1]),
        .I3(branch_count[3]),
        .I4(branch_count[2]),
        .I5(\branch_data[2]_i_5_n_0 ),
        .O(\branch_data[2]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair128" *) 
  LUT3 #(
    .INIT(8'h7F)) 
    \branch_data[2]_i_3 
       (.I0(cycle_count_reg[10]),
        .I1(\Serial_Dbg_Intf.control_reg_reg[16]_0 [2]),
        .I2(\Serial_Dbg_Intf.control_reg_reg[16]_0 [1]),
        .O(\branch_data[2]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAA2AAAAAAAAAAAAA)) 
    \branch_data[2]_i_4 
       (.I0(\branch_data[0]_i_4_n_0 ),
        .I1(cc_clear_i_3_n_0),
        .I2(branch_count[3]),
        .I3(branch_count[2]),
        .I4(\save_sel[5][0]_i_3_n_0 ),
        .I5(\branch_count[3]_i_2_n_0 ),
        .O(\branch_data[2]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair122" *) 
  LUT3 #(
    .INIT(8'hBF)) 
    \branch_data[2]_i_5 
       (.I0(\Embedded_Trace.trace_din_all_reg[80]_0 [71]),
        .I1(branch_count[0]),
        .I2(branch_count[1]),
        .O(\branch_data[2]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h8A88FFFF8A880000)) 
    \branch_data[3]_i_1 
       (.I0(\save_sel[5][0]_i_3_n_0 ),
        .I1(\branch_data[3]_i_2_n_0 ),
        .I2(\branch_data[3]_i_3_n_0 ),
        .I3(\branch_count[3]_i_2_n_0 ),
        .I4(\branch_data[2]_i_4_n_0 ),
        .I5(p_0_in__0[5]),
        .O(\branch_data[3]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0444400F0FFFF00)) 
    \branch_data[3]_i_2 
       (.I0(\branch_data[3]_i_4_n_0 ),
        .I1(\Embedded_Trace.trace_din_all_reg[80]_0 [71]),
        .I2(cycle_count_reg[4]),
        .I3(\Serial_Dbg_Intf.control_reg_reg[16]_0 [2]),
        .I4(\Serial_Dbg_Intf.control_reg_reg[16]_0 [1]),
        .I5(branch_count[3]),
        .O(\branch_data[3]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair124" *) 
  LUT3 #(
    .INIT(8'h7F)) 
    \branch_data[3]_i_3 
       (.I0(cycle_count_reg[11]),
        .I1(\Serial_Dbg_Intf.control_reg_reg[16]_0 [2]),
        .I2(\Serial_Dbg_Intf.control_reg_reg[16]_0 [1]),
        .O(\branch_data[3]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair120" *) 
  LUT4 #(
    .INIT(16'h7FFF)) 
    \branch_data[3]_i_4 
       (.I0(branch_count[0]),
        .I1(branch_count[1]),
        .I2(branch_count[3]),
        .I3(branch_count[2]),
        .O(\branch_data[3]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h77337F3344004000)) 
    \branch_data[4]_i_1 
       (.I0(\branch_data[4]_i_2_n_0 ),
        .I1(\branch_data[2]_i_4_n_0 ),
        .I2(\branch_data[4]_i_3_n_0 ),
        .I3(\save_sel[5][0]_i_3_n_0 ),
        .I4(\branch_data[4]_i_4_n_0 ),
        .I5(p_0_in__0[4]),
        .O(\branch_data[4]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h000007FF07FF07FF)) 
    \branch_data[4]_i_2 
       (.I0(\branch_count[3]_i_2_n_0 ),
        .I1(cycle_count_reg[12]),
        .I2(cycle_count_reg[5]),
        .I3(cc_clear_i_3_n_0),
        .I4(\branch_data[4]_i_3_n_0 ),
        .I5(\branch_data[4]_i_5_n_0 ),
        .O(\branch_data[4]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair94" *) 
  LUT4 #(
    .INIT(16'h0001)) 
    \branch_data[4]_i_3 
       (.I0(branch_count[0]),
        .I1(branch_count[1]),
        .I2(branch_count[3]),
        .I3(branch_count[2]),
        .O(\branch_data[4]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair84" *) 
  LUT2 #(
    .INIT(4'h9)) 
    \branch_data[4]_i_4 
       (.I0(\Serial_Dbg_Intf.control_reg_reg[16]_0 [1]),
        .I1(\Serial_Dbg_Intf.control_reg_reg[16]_0 [2]),
        .O(\branch_data[4]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair121" *) 
  LUT3 #(
    .INIT(8'h28)) 
    \branch_data[4]_i_5 
       (.I0(\Embedded_Trace.trace_din_all_reg[80]_0 [71]),
        .I1(\Serial_Dbg_Intf.control_reg_reg[16]_0 [2]),
        .I2(\Serial_Dbg_Intf.control_reg_reg[16]_0 [1]),
        .O(\branch_data[4]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h77337F3344004000)) 
    \branch_data[5]_i_1 
       (.I0(\branch_data[5]_i_2_n_0 ),
        .I1(\branch_data[2]_i_4_n_0 ),
        .I2(\branch_data[5]_i_3_n_0 ),
        .I3(\save_sel[5][0]_i_3_n_0 ),
        .I4(\branch_data[4]_i_4_n_0 ),
        .I5(p_0_in__0[3]),
        .O(\branch_data[5]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h000007770FFF0FFF)) 
    \branch_data[5]_i_2 
       (.I0(\branch_count[3]_i_2_n_0 ),
        .I1(cycle_count_reg[13]),
        .I2(\branch_data[5]_i_3_n_0 ),
        .I3(\branch_data[4]_i_5_n_0 ),
        .I4(cycle_count_reg[6]),
        .I5(cc_clear_i_3_n_0),
        .O(\branch_data[5]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair115" *) 
  LUT4 #(
    .INIT(16'h0100)) 
    \branch_data[5]_i_3 
       (.I0(branch_count[0]),
        .I1(branch_count[1]),
        .I2(branch_count[2]),
        .I3(branch_count[3]),
        .O(\branch_data[5]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h77337F3344004000)) 
    \branch_data[6]_i_1 
       (.I0(\branch_data[6]_i_2_n_0 ),
        .I1(\branch_data[2]_i_4_n_0 ),
        .I2(\branch_data[6]_i_3_n_0 ),
        .I3(\save_sel[5][0]_i_3_n_0 ),
        .I4(\branch_data[4]_i_4_n_0 ),
        .I5(p_0_in__0[2]),
        .O(\branch_data[6]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h000007FF07FF07FF)) 
    \branch_data[6]_i_2 
       (.I0(\branch_count[3]_i_2_n_0 ),
        .I1(cycle_count_reg[14]),
        .I2(cycle_count_reg[7]),
        .I3(cc_clear_i_3_n_0),
        .I4(\branch_data[6]_i_3_n_0 ),
        .I5(\branch_data[4]_i_5_n_0 ),
        .O(\branch_data[6]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair119" *) 
  LUT4 #(
    .INIT(16'h0010)) 
    \branch_data[6]_i_3 
       (.I0(branch_count[0]),
        .I1(branch_count[1]),
        .I2(branch_count[2]),
        .I3(branch_count[3]),
        .O(\branch_data[6]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h77337F3344004000)) 
    \branch_data[7]_i_1 
       (.I0(\branch_data[7]_i_2_n_0 ),
        .I1(\branch_data[2]_i_4_n_0 ),
        .I2(\branch_data[7]_i_3_n_0 ),
        .I3(\save_sel[5][0]_i_3_n_0 ),
        .I4(\branch_data[4]_i_4_n_0 ),
        .I5(p_0_in__0[1]),
        .O(\branch_data[7]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0007777770777777)) 
    \branch_data[7]_i_2 
       (.I0(\branch_data[4]_i_5_n_0 ),
        .I1(\branch_data[7]_i_3_n_0 ),
        .I2(\branch_count[3]_i_2_n_0 ),
        .I3(cycle_count_reg[8]),
        .I4(cc_clear_i_3_n_0),
        .I5(cycle_count_reg[15]),
        .O(\branch_data[7]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair117" *) 
  LUT4 #(
    .INIT(16'h1000)) 
    \branch_data[7]_i_3 
       (.I0(branch_count[0]),
        .I1(branch_count[1]),
        .I2(branch_count[3]),
        .I3(branch_count[2]),
        .O(\branch_data[7]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h77337F3344004000)) 
    \branch_data[8]_i_1 
       (.I0(\branch_data[8]_i_2_n_0 ),
        .I1(\branch_data[2]_i_4_n_0 ),
        .I2(\branch_data[8]_i_3_n_0 ),
        .I3(\save_sel[5][0]_i_3_n_0 ),
        .I4(\branch_data[4]_i_4_n_0 ),
        .I5(p_0_in__0[0]),
        .O(\branch_data[8]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h150F0FFF15FFFFFF)) 
    \branch_data[8]_i_2 
       (.I0(cycle_count_reg[9]),
        .I1(\branch_count[3]_i_2_n_0 ),
        .I2(\Embedded_Trace.trace_din_all_reg[80]_0 [71]),
        .I3(\Serial_Dbg_Intf.control_reg_reg[16]_0 [2]),
        .I4(\Serial_Dbg_Intf.control_reg_reg[16]_0 [1]),
        .I5(\branch_data[8]_i_3_n_0 ),
        .O(\branch_data[8]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair117" *) 
  LUT4 #(
    .INIT(16'h0010)) 
    \branch_data[8]_i_3 
       (.I0(branch_count[3]),
        .I1(branch_count[2]),
        .I2(branch_count[1]),
        .I3(branch_count[0]),
        .O(\branch_data[8]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hBFBBBBBB80888888)) 
    \branch_data[9]_i_1 
       (.I0(p_1_in[6]),
        .I1(\branch_data[0]_i_4_n_0 ),
        .I2(\branch_data[9]_i_3_n_0 ),
        .I3(\Serial_Dbg_Intf.stopped_i_reg_1 ),
        .I4(\branch_data[0]_i_3_n_0 ),
        .I5(\branch_data_reg_n_0_[9] ),
        .O(\branch_data[9]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAAAA200020002000)) 
    \branch_data[9]_i_2 
       (.I0(\save_sel[5][0]_i_3_n_0 ),
        .I1(\branch_data[9]_i_4_n_0 ),
        .I2(\branch_data[9]_i_5_n_0 ),
        .I3(\branch_data[4]_i_5_n_0 ),
        .I4(cycle_count_reg[10]),
        .I5(cc_clear_i_3_n_0),
        .O(p_1_in[6]));
  (* SOFT_HLUTNM = "soft_lutpair119" *) 
  LUT4 #(
    .INIT(16'h0040)) 
    \branch_data[9]_i_3 
       (.I0(branch_count[2]),
        .I1(branch_count[3]),
        .I2(branch_count[1]),
        .I3(branch_count[0]),
        .O(\branch_data[9]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair122" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \branch_data[9]_i_4 
       (.I0(branch_count[0]),
        .I1(branch_count[1]),
        .O(\branch_data[9]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair88" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \branch_data[9]_i_5 
       (.I0(branch_count[3]),
        .I1(branch_count[2]),
        .O(\branch_data[9]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h0000000020000000)) 
    \branch_data_first[0]_i_1 
       (.I0(cc_clear_i_4_n_0),
        .I1(branch_count[2]),
        .I2(branch_count[3]),
        .I3(\Serial_Dbg_Intf.control_reg_reg[16]_0 [2]),
        .I4(\Serial_Dbg_Intf.control_reg_reg[16]_0 [1]),
        .I5(\branch_count[3]_i_2_n_0 ),
        .O(branch_data_first));
  FDRE \branch_data_first_reg[0] 
       (.C(Clk),
        .CE(branch_data_first),
        .D(p_0_in__0[8]),
        .Q(\branch_data_first_reg_n_0_[0] ),
        .R(first_item_i_1_n_0));
  FDRE \branch_data_first_reg[1] 
       (.C(Clk),
        .CE(branch_data_first),
        .D(p_0_in__0[7]),
        .Q(\branch_data_first_reg_n_0_[1] ),
        .R(first_item_i_1_n_0));
  FDRE \branch_data_first_reg[2] 
       (.C(Clk),
        .CE(branch_data_first),
        .D(p_0_in__0[6]),
        .Q(\branch_data_first_reg_n_0_[2] ),
        .R(first_item_i_1_n_0));
  FDRE \branch_data_first_reg[3] 
       (.C(Clk),
        .CE(branch_data_first),
        .D(p_0_in__0[5]),
        .Q(\branch_data_first_reg_n_0_[3] ),
        .R(first_item_i_1_n_0));
  FDRE \branch_data_first_reg[4] 
       (.C(Clk),
        .CE(branch_data_first),
        .D(p_0_in__0[4]),
        .Q(\branch_data_first_reg_n_0_[4] ),
        .R(first_item_i_1_n_0));
  FDRE \branch_data_first_reg[5] 
       (.C(Clk),
        .CE(branch_data_first),
        .D(p_0_in__0[3]),
        .Q(\branch_data_first_reg_n_0_[5] ),
        .R(first_item_i_1_n_0));
  FDRE \branch_data_first_reg[6] 
       (.C(Clk),
        .CE(branch_data_first),
        .D(p_0_in__0[2]),
        .Q(\branch_data_first_reg_n_0_[6] ),
        .R(first_item_i_1_n_0));
  FDRE \branch_data_first_reg[7] 
       (.C(Clk),
        .CE(branch_data_first),
        .D(p_0_in__0[1]),
        .Q(data7),
        .R(first_item_i_1_n_0));
  FDRE \branch_data_first_reg[8] 
       (.C(Clk),
        .CE(branch_data_first),
        .D(p_0_in__0[0]),
        .Q(\branch_data_first_reg_n_0_[8] ),
        .R(first_item_i_1_n_0));
  FDRE \branch_data_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\branch_data[0]_i_1_n_0 ),
        .Q(p_0_in__0[8]),
        .R(1'b0));
  FDRE \branch_data_reg[10] 
       (.C(Clk),
        .CE(1'b1),
        .D(\branch_data[10]_i_1_n_0 ),
        .Q(\branch_data_reg_n_0_[10] ),
        .R(1'b0));
  FDRE \branch_data_reg[11] 
       (.C(Clk),
        .CE(1'b1),
        .D(\branch_data[11]_i_1_n_0 ),
        .Q(\branch_data_reg_n_0_[11] ),
        .R(1'b0));
  FDRE \branch_data_reg[12] 
       (.C(Clk),
        .CE(1'b1),
        .D(\branch_data[12]_i_1_n_0 ),
        .Q(\branch_data_reg_n_0_[12] ),
        .R(1'b0));
  FDRE \branch_data_reg[13] 
       (.C(Clk),
        .CE(1'b1),
        .D(\branch_data[13]_i_1_n_0 ),
        .Q(\branch_data_reg_n_0_[13] ),
        .R(1'b0));
  FDRE \branch_data_reg[14] 
       (.C(Clk),
        .CE(1'b1),
        .D(\branch_data[14]_i_1_n_0 ),
        .Q(\branch_data_reg_n_0_[14] ),
        .R(1'b0));
  FDRE \branch_data_reg[15] 
       (.C(Clk),
        .CE(1'b1),
        .D(\branch_data[15]_i_1_n_0 ),
        .Q(\branch_data_reg_n_0_[15] ),
        .R(1'b0));
  FDRE \branch_data_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\branch_data[1]_i_1_n_0 ),
        .Q(p_0_in__0[7]),
        .R(1'b0));
  FDRE \branch_data_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(\branch_data[2]_i_1_n_0 ),
        .Q(p_0_in__0[6]),
        .R(1'b0));
  FDRE \branch_data_reg[3] 
       (.C(Clk),
        .CE(1'b1),
        .D(\branch_data[3]_i_1_n_0 ),
        .Q(p_0_in__0[5]),
        .R(1'b0));
  FDRE \branch_data_reg[4] 
       (.C(Clk),
        .CE(1'b1),
        .D(\branch_data[4]_i_1_n_0 ),
        .Q(p_0_in__0[4]),
        .R(1'b0));
  FDRE \branch_data_reg[5] 
       (.C(Clk),
        .CE(1'b1),
        .D(\branch_data[5]_i_1_n_0 ),
        .Q(p_0_in__0[3]),
        .R(1'b0));
  FDRE \branch_data_reg[6] 
       (.C(Clk),
        .CE(1'b1),
        .D(\branch_data[6]_i_1_n_0 ),
        .Q(p_0_in__0[2]),
        .R(1'b0));
  FDRE \branch_data_reg[7] 
       (.C(Clk),
        .CE(1'b1),
        .D(\branch_data[7]_i_1_n_0 ),
        .Q(p_0_in__0[1]),
        .R(1'b0));
  FDRE \branch_data_reg[8] 
       (.C(Clk),
        .CE(1'b1),
        .D(\branch_data[8]_i_1_n_0 ),
        .Q(p_0_in__0[0]),
        .R(1'b0));
  FDRE \branch_data_reg[9] 
       (.C(Clk),
        .CE(1'b1),
        .D(\branch_data[9]_i_1_n_0 ),
        .Q(\branch_data_reg_n_0_[9] ),
        .R(1'b0));
  LUT5 #(
    .INIT(32'hFFF2F2F2)) 
    branch_event_i_1
       (.I0(save_event_cc_reg_n_0),
        .I1(\event_data[0]_i_3_n_0 ),
        .I2(branch_event0),
        .I3(first_item),
        .I4(trig_in_1_pulse),
        .O(branch_event_i_1_n_0));
  FDRE branch_event_reg
       (.C(Clk),
        .CE(1'b1),
        .D(branch_event_i_1_n_0),
        .Q(branch_event),
        .R(first_item_i_1_n_0));
  LUT6 #(
    .INIT(64'hFBFFAAAAAAAAAAAA)) 
    cc_clear_i_1
       (.I0(cc_clear_i_2_n_0),
        .I1(branch_count[3]),
        .I2(branch_count[2]),
        .I3(\branch_count[3]_i_2_n_0 ),
        .I4(cc_clear_i_3_n_0),
        .I5(cc_clear_i_4_n_0),
        .O(cc_clear_i_1_n_0));
  LUT2 #(
    .INIT(4'h2)) 
    cc_clear_i_2
       (.I0(save_event_cc_reg_n_0),
        .I1(\event_data[0]_i_3_n_0 ),
        .O(cc_clear_i_2_n_0));
  LUT2 #(
    .INIT(4'h8)) 
    cc_clear_i_3
       (.I0(\Serial_Dbg_Intf.control_reg_reg[16]_0 [1]),
        .I1(\Serial_Dbg_Intf.control_reg_reg[16]_0 [2]),
        .O(cc_clear_i_3_n_0));
  LUT2 #(
    .INIT(4'h1)) 
    cc_clear_i_4
       (.I0(\Embedded_Trace.trace_din_all_reg[80]_0 [72]),
        .I1(\Serial_Dbg_Intf.control_reg_reg[21]_0 ),
        .O(cc_clear_i_4_n_0));
  FDRE cc_clear_reg
       (.C(Clk),
        .CE(1'b1),
        .D(cc_clear_i_1_n_0),
        .Q(cc_clear_reg_n_0),
        .R(first_item_i_1_n_0));
  LUT6 #(
    .INIT(64'h00000000FDDF0000)) 
    cc_overflow_i_1
       (.I0(started_i),
        .I1(cc_overflow_reg_0),
        .I2(\Serial_Dbg_Intf.control_reg_reg[16]_0 [1]),
        .I3(\Serial_Dbg_Intf.control_reg_reg[16]_0 [2]),
        .I4(cc_overflow_reg_1),
        .I5(trace_count),
        .O(cc_overflow_i_1_n_0));
  FDRE cc_overflow_reg
       (.C(Clk),
        .CE(1'b1),
        .D(cc_overflow_i_1_n_0),
        .Q(cc_overflow_reg_0),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFF4FF)) 
    \cycle_count[15]_i_1 
       (.I0(event_trace),
        .I1(p_30_in),
        .I2(cc_clear_reg_n_0),
        .I3(started_i),
        .I4(trig_in_0_pulse_reg),
        .I5(trace_count),
        .O(\cycle_count[15]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \cycle_count[15]_i_3 
       (.I0(\Serial_Dbg_Intf.control_reg_reg[16]_0 [2]),
        .I1(\Serial_Dbg_Intf.control_reg_reg[16]_0 [1]),
        .O(event_trace));
  LUT1 #(
    .INIT(2'h1)) 
    \cycle_count[15]_i_4 
       (.I0(cycle_count_reg[15]),
        .O(\cycle_count[15]_i_4_n_0 ));
  FDRE \cycle_count_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\cycle_count_reg[3]_i_1_n_4 ),
        .Q(S),
        .R(\cycle_count[15]_i_1_n_0 ));
  FDRE \cycle_count_reg[10] 
       (.C(Clk),
        .CE(1'b1),
        .D(\cycle_count_reg[11]_i_1_n_6 ),
        .Q(cycle_count_reg[10]),
        .R(\cycle_count[15]_i_1_n_0 ));
  FDRE \cycle_count_reg[11] 
       (.C(Clk),
        .CE(1'b1),
        .D(\cycle_count_reg[11]_i_1_n_7 ),
        .Q(cycle_count_reg[11]),
        .R(\cycle_count[15]_i_1_n_0 ));
  CARRY4 \cycle_count_reg[11]_i_1 
       (.CI(\cycle_count_reg[15]_i_2_n_0 ),
        .CO({\cycle_count_reg[11]_i_1_n_0 ,\cycle_count_reg[11]_i_1_n_1 ,\cycle_count_reg[11]_i_1_n_2 ,\cycle_count_reg[11]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\cycle_count_reg[11]_i_1_n_4 ,\cycle_count_reg[11]_i_1_n_5 ,\cycle_count_reg[11]_i_1_n_6 ,\cycle_count_reg[11]_i_1_n_7 }),
        .S({cycle_count_reg[8],cycle_count_reg[9],cycle_count_reg[10],cycle_count_reg[11]}));
  FDRE \cycle_count_reg[12] 
       (.C(Clk),
        .CE(1'b1),
        .D(\cycle_count_reg[15]_i_2_n_4 ),
        .Q(cycle_count_reg[12]),
        .R(\cycle_count[15]_i_1_n_0 ));
  FDRE \cycle_count_reg[13] 
       (.C(Clk),
        .CE(1'b1),
        .D(\cycle_count_reg[15]_i_2_n_5 ),
        .Q(cycle_count_reg[13]),
        .R(\cycle_count[15]_i_1_n_0 ));
  FDRE \cycle_count_reg[14] 
       (.C(Clk),
        .CE(1'b1),
        .D(\cycle_count_reg[15]_i_2_n_6 ),
        .Q(cycle_count_reg[14]),
        .R(\cycle_count[15]_i_1_n_0 ));
  FDRE \cycle_count_reg[15] 
       (.C(Clk),
        .CE(1'b1),
        .D(\cycle_count_reg[15]_i_2_n_7 ),
        .Q(cycle_count_reg[15]),
        .R(\cycle_count[15]_i_1_n_0 ));
  CARRY4 \cycle_count_reg[15]_i_2 
       (.CI(1'b0),
        .CO({\cycle_count_reg[15]_i_2_n_0 ,\cycle_count_reg[15]_i_2_n_1 ,\cycle_count_reg[15]_i_2_n_2 ,\cycle_count_reg[15]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b1}),
        .O({\cycle_count_reg[15]_i_2_n_4 ,\cycle_count_reg[15]_i_2_n_5 ,\cycle_count_reg[15]_i_2_n_6 ,\cycle_count_reg[15]_i_2_n_7 }),
        .S({cycle_count_reg[12],cycle_count_reg[13],cycle_count_reg[14],\cycle_count[15]_i_4_n_0 }));
  FDRE \cycle_count_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\cycle_count_reg[3]_i_1_n_5 ),
        .Q(cycle_count_reg[1]),
        .R(\cycle_count[15]_i_1_n_0 ));
  FDRE \cycle_count_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(\cycle_count_reg[3]_i_1_n_6 ),
        .Q(p_0_in38_in),
        .R(\cycle_count[15]_i_1_n_0 ));
  FDRE \cycle_count_reg[3] 
       (.C(Clk),
        .CE(1'b1),
        .D(\cycle_count_reg[3]_i_1_n_7 ),
        .Q(cycle_count_reg[3]),
        .R(\cycle_count[15]_i_1_n_0 ));
  CARRY4 \cycle_count_reg[3]_i_1 
       (.CI(\cycle_count_reg[7]_i_1_n_0 ),
        .CO({\NLW_cycle_count_reg[3]_i_1_CO_UNCONNECTED [3],\cycle_count_reg[3]_i_1_n_1 ,\cycle_count_reg[3]_i_1_n_2 ,\cycle_count_reg[3]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\cycle_count_reg[3]_i_1_n_4 ,\cycle_count_reg[3]_i_1_n_5 ,\cycle_count_reg[3]_i_1_n_6 ,\cycle_count_reg[3]_i_1_n_7 }),
        .S({S,cycle_count_reg[1],p_0_in38_in,cycle_count_reg[3]}));
  FDRE \cycle_count_reg[4] 
       (.C(Clk),
        .CE(1'b1),
        .D(\cycle_count_reg[7]_i_1_n_4 ),
        .Q(cycle_count_reg[4]),
        .R(\cycle_count[15]_i_1_n_0 ));
  FDRE \cycle_count_reg[5] 
       (.C(Clk),
        .CE(1'b1),
        .D(\cycle_count_reg[7]_i_1_n_5 ),
        .Q(cycle_count_reg[5]),
        .R(\cycle_count[15]_i_1_n_0 ));
  FDRE \cycle_count_reg[6] 
       (.C(Clk),
        .CE(1'b1),
        .D(\cycle_count_reg[7]_i_1_n_6 ),
        .Q(cycle_count_reg[6]),
        .R(\cycle_count[15]_i_1_n_0 ));
  FDRE \cycle_count_reg[7] 
       (.C(Clk),
        .CE(1'b1),
        .D(\cycle_count_reg[7]_i_1_n_7 ),
        .Q(cycle_count_reg[7]),
        .R(\cycle_count[15]_i_1_n_0 ));
  CARRY4 \cycle_count_reg[7]_i_1 
       (.CI(\cycle_count_reg[11]_i_1_n_0 ),
        .CO({\cycle_count_reg[7]_i_1_n_0 ,\cycle_count_reg[7]_i_1_n_1 ,\cycle_count_reg[7]_i_1_n_2 ,\cycle_count_reg[7]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\cycle_count_reg[7]_i_1_n_4 ,\cycle_count_reg[7]_i_1_n_5 ,\cycle_count_reg[7]_i_1_n_6 ,\cycle_count_reg[7]_i_1_n_7 }),
        .S({cycle_count_reg[4],cycle_count_reg[5],cycle_count_reg[6],cycle_count_reg[7]}));
  FDRE \cycle_count_reg[8] 
       (.C(Clk),
        .CE(1'b1),
        .D(\cycle_count_reg[11]_i_1_n_4 ),
        .Q(cycle_count_reg[8]),
        .R(\cycle_count[15]_i_1_n_0 ));
  FDRE \cycle_count_reg[9] 
       (.C(Clk),
        .CE(1'b1),
        .D(\cycle_count_reg[11]_i_1_n_5 ),
        .Q(cycle_count_reg[9]),
        .R(\cycle_count[15]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFF222FFFF)) 
    \event_data[0]_i_1 
       (.I0(save_event_cc_reg_n_0),
        .I1(\event_data[0]_i_3_n_0 ),
        .I2(first_item),
        .I3(trig_in_1_pulse),
        .I4(\Serial_Dbg_Intf.stopped_i_reg_1 ),
        .I5(branch_event0),
        .O(\event_data[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hD0D0D0D0D0000000)) 
    \event_data[0]_i_2 
       (.I0(save_event_cc_reg_n_0),
        .I1(\event_data[0]_i_3_n_0 ),
        .I2(\Serial_Dbg_Intf.stopped_i_reg_1 ),
        .I3(first_item),
        .I4(trig_in_1_pulse),
        .I5(event_data_next__0[0]),
        .O(\event_data[0]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hBBBABBBABBBBBBBA)) 
    \event_data[0]_i_3 
       (.I0(\writems[0]_i_7_n_0 ),
        .I1(\event_data[0]_i_5_n_0 ),
        .I2(save_event_next_reg_0),
        .I3(\Serial_Dbg_Intf.control_reg_reg[16]_1 ),
        .I4(\Serial_Dbg_Intf.control_reg_reg[21]_0 ),
        .I5(\branch_count_reg[3]_0 ),
        .O(\event_data[0]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000010000)) 
    \event_data[0]_i_4 
       (.I0(branch_count[2]),
        .I1(branch_count[3]),
        .I2(branch_count[1]),
        .I3(branch_count[0]),
        .I4(save_event_next_reg_n_0),
        .I5(\event_data_reg[7]_0 ),
        .O(branch_event0));
  (* SOFT_HLUTNM = "soft_lutpair94" *) 
  LUT5 #(
    .INIT(32'h00000001)) 
    \event_data[0]_i_5 
       (.I0(branch_count[2]),
        .I1(branch_count[3]),
        .I2(branch_count[1]),
        .I3(branch_count[0]),
        .I4(save_event_next_reg_n_0),
        .O(\event_data[0]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hFF00B8000000B800)) 
    \event_data[10]_i_1 
       (.I0(Started_Pulse),
        .I1(\event_data[10]_i_2_n_0 ),
        .I2(event_data_next__0[10]),
        .I3(\Serial_Dbg_Intf.stopped_i_reg_1 ),
        .I4(cc_clear_i_2_n_0),
        .I5(cycle_count_reg[10]),
        .O(\event_data[10]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair113" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \event_data[10]_i_2 
       (.I0(first_item),
        .I1(trig_in_1_pulse),
        .O(\event_data[10]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFF00B8000000B800)) 
    \event_data[11]_i_1 
       (.I0(Stopped_Pulse),
        .I1(\event_data[10]_i_2_n_0 ),
        .I2(event_data_next__0[11]),
        .I3(\Serial_Dbg_Intf.stopped_i_reg_1 ),
        .I4(cc_clear_i_2_n_0),
        .I5(cycle_count_reg[11]),
        .O(\event_data[11]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFF00B8000000B800)) 
    \event_data[12]_i_1 
       (.I0(\Serial_Dbg_Intf.Started_Pulse_reg_n_0 ),
        .I1(\event_data[10]_i_2_n_0 ),
        .I2(event_data_next__0[12]),
        .I3(\Serial_Dbg_Intf.stopped_i_reg_1 ),
        .I4(cc_clear_i_2_n_0),
        .I5(cycle_count_reg[12]),
        .O(\event_data[12]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFF00B8000000B800)) 
    \event_data[13]_i_1 
       (.I0(\Serial_Dbg_Intf.Stopped_Pulse_reg_n_0 ),
        .I1(\event_data[10]_i_2_n_0 ),
        .I2(event_data_next__0[13]),
        .I3(\Serial_Dbg_Intf.stopped_i_reg_1 ),
        .I4(cc_clear_i_2_n_0),
        .I5(cycle_count_reg[13]),
        .O(\event_data[13]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFF00F8000000F800)) 
    \event_data[14]_i_1 
       (.I0(trig_in_1_pulse),
        .I1(first_item),
        .I2(event_data_next__0[14]),
        .I3(\Serial_Dbg_Intf.stopped_i_reg_1 ),
        .I4(cc_clear_i_2_n_0),
        .I5(cycle_count_reg[14]),
        .O(\event_data[14]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFF00B8000000B800)) 
    \event_data[15]_i_1 
       (.I0(\event_data_reg[15]_0 ),
        .I1(\event_data[10]_i_2_n_0 ),
        .I2(event_data_next__0[15]),
        .I3(\Serial_Dbg_Intf.stopped_i_reg_1 ),
        .I4(cc_clear_i_2_n_0),
        .I5(cycle_count_reg[15]),
        .O(\event_data[15]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h2020F020F020F020)) 
    \event_data[1]_i_1 
       (.I0(save_event_cc_reg_n_0),
        .I1(\event_data[0]_i_3_n_0 ),
        .I2(\Serial_Dbg_Intf.stopped_i_reg_1 ),
        .I3(event_data_next__0[1]),
        .I4(trig_in_1_pulse),
        .I5(first_item),
        .O(\event_data[1]_i_1_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \event_data[2]_i_1 
       (.I0(\Serial_Dbg_Intf.stopped_i_reg_1 ),
        .O(\event_data[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h2020FD20FD20FD20)) 
    \event_data[2]_i_2 
       (.I0(save_event_cc_reg_n_0),
        .I1(\event_data[0]_i_3_n_0 ),
        .I2(p_0_in38_in),
        .I3(event_data_next__0[2]),
        .I4(trig_in_1_pulse),
        .I5(first_item),
        .O(\event_data[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h2020FD20FD20FD20)) 
    \event_data[3]_i_1 
       (.I0(save_event_cc_reg_n_0),
        .I1(\event_data[0]_i_3_n_0 ),
        .I2(cycle_count_reg[3]),
        .I3(event_data_next__0[3]),
        .I4(trig_in_1_pulse),
        .I5(first_item),
        .O(\event_data[3]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h2020FD20FD20FD20)) 
    \event_data[4]_i_1 
       (.I0(save_event_cc_reg_n_0),
        .I1(\event_data[0]_i_3_n_0 ),
        .I2(cycle_count_reg[4]),
        .I3(event_data_next__0[4]),
        .I4(trig_in_1_pulse),
        .I5(first_item),
        .O(\event_data[4]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h2020FD20FD20FD20)) 
    \event_data[5]_i_1 
       (.I0(save_event_cc_reg_n_0),
        .I1(\event_data[0]_i_3_n_0 ),
        .I2(cycle_count_reg[5]),
        .I3(event_data_next__0[5]),
        .I4(trig_in_1_pulse),
        .I5(first_item),
        .O(\event_data[5]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h2020FD20FD20FD20)) 
    \event_data[6]_i_1 
       (.I0(save_event_cc_reg_n_0),
        .I1(\event_data[0]_i_3_n_0 ),
        .I2(cycle_count_reg[6]),
        .I3(event_data_next__0[6]),
        .I4(trig_in_1_pulse),
        .I5(first_item),
        .O(\event_data[6]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h2020FD20FD20FD20)) 
    \event_data[7]_i_1 
       (.I0(save_event_cc_reg_n_0),
        .I1(\event_data[0]_i_3_n_0 ),
        .I2(cycle_count_reg[7]),
        .I3(event_data_next__0[7]),
        .I4(trig_in_1_pulse),
        .I5(first_item),
        .O(\event_data[7]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAAAA088800000888)) 
    \event_data[8]_i_1 
       (.I0(\Serial_Dbg_Intf.stopped_i_reg_1 ),
        .I1(event_data_next__0[8]),
        .I2(first_item),
        .I3(trig_in_1_pulse),
        .I4(cc_clear_i_2_n_0),
        .I5(cycle_count_reg[8]),
        .O(\event_data[8]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAAAA088800000888)) 
    \event_data[9]_i_1 
       (.I0(\Serial_Dbg_Intf.stopped_i_reg_1 ),
        .I1(event_data_next__0[9]),
        .I2(first_item),
        .I3(trig_in_1_pulse),
        .I4(cc_clear_i_2_n_0),
        .I5(cycle_count_reg[9]),
        .O(\event_data[9]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hC0AA)) 
    \event_data_next[0]_i_1 
       (.I0(event_data_next__0[0]),
        .I1(save_event_next_reg_0),
        .I2(\Serial_Dbg_Intf.stopped_i_reg_1 ),
        .I3(\event_data_next[1]_i_1_n_0 ),
        .O(\event_data_next[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBB8B000088880000)) 
    \event_data_next[10]_i_1 
       (.I0(Started_Pulse),
        .I1(\Serial_Dbg_Intf.trig_in_1_pulse_reg ),
        .I2(\Embedded_Trace.trace_din_all_reg[80]_0 [72]),
        .I3(\event_data_next_reg[12]_0 ),
        .I4(\Serial_Dbg_Intf.stopped_i_reg_1 ),
        .I5(\Embedded_Trace.trace_din_all_reg[80]_0 [78]),
        .O(\event_data_next[10]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h8F008800)) 
    \event_data_next[11]_i_1 
       (.I0(Stopped_Pulse),
        .I1(\event_data_next[11]_i_2_n_0 ),
        .I2(save_event_next_reg_0),
        .I3(\Serial_Dbg_Intf.stopped_i_reg_1 ),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [77]),
        .O(\event_data_next[11]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair113" *) 
  LUT5 #(
    .INIT(32'h00F7FFFF)) 
    \event_data_next[11]_i_2 
       (.I0(last_item_reg_0),
        .I1(trig_in_0_pulse_reg),
        .I2(save_pc_next),
        .I3(first_item),
        .I4(trig_in_1_pulse),
        .O(\event_data_next[11]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFF00F4000000F400)) 
    \event_data_next[12]_i_1 
       (.I0(\event_data_next_reg[12]_0 ),
        .I1(\Embedded_Trace.trace_din_all_reg[80]_0 [72]),
        .I2(\Embedded_Trace.trace_din_all_reg[80]_0 [76]),
        .I3(\Serial_Dbg_Intf.stopped_i_reg_1 ),
        .I4(\Serial_Dbg_Intf.trig_in_1_pulse_reg ),
        .I5(\Serial_Dbg_Intf.Started_Pulse_reg_n_0 ),
        .O(\event_data_next[12]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h8F008800)) 
    \event_data_next[13]_i_1 
       (.I0(\Serial_Dbg_Intf.Stopped_Pulse_reg_n_0 ),
        .I1(\event_data_next[11]_i_2_n_0 ),
        .I2(save_event_next_reg_0),
        .I3(\Serial_Dbg_Intf.stopped_i_reg_1 ),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [75]),
        .O(\event_data_next[13]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hE0E0E000)) 
    \event_data_next[14]_i_1 
       (.I0(save_event_next_reg_0),
        .I1(\Embedded_Trace.trace_din_all_reg[80]_0 [74]),
        .I2(\Serial_Dbg_Intf.stopped_i_reg_1 ),
        .I3(trig_in_1_pulse),
        .I4(\event_data_next[14]_i_2_n_0 ),
        .O(\event_data_next[14]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \event_data_next[14]_i_2 
       (.I0(\event_data_reg[15]_0 ),
        .I1(\Serial_Dbg_Intf.Started_Pulse_reg_n_0 ),
        .I2(trig_in_1_pulse),
        .I3(\Serial_Dbg_Intf.Stopped_Pulse_reg_n_0 ),
        .I4(Stopped_Pulse),
        .I5(Started_Pulse),
        .O(\event_data_next[14]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hBB8B000088880000)) 
    \event_data_next[15]_i_1 
       (.I0(\event_data_reg[15]_0 ),
        .I1(\Serial_Dbg_Intf.trig_in_1_pulse_reg ),
        .I2(\Embedded_Trace.trace_din_all_reg[80]_0 [72]),
        .I3(\event_data_next_reg[12]_0 ),
        .I4(\Serial_Dbg_Intf.stopped_i_reg_1 ),
        .I5(\Embedded_Trace.trace_din_all_reg[80]_0 [73]),
        .O(\event_data_next[15]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFEEEF)) 
    \event_data_next[1]_i_1 
       (.I0(save_event_next_reg_0),
        .I1(save_event_next_reg_1),
        .I2(\Serial_Dbg_Intf.control_reg_reg[16]_0 [1]),
        .I3(\Serial_Dbg_Intf.control_reg_reg[16]_0 [2]),
        .I4(sync_reset),
        .I5(\Serial_Dbg_Intf.stopped_i_reg_0 ),
        .O(\event_data_next[1]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h0040)) 
    \event_data_next[1]_i_2 
       (.I0(\event_data_next_reg[12]_0 ),
        .I1(\Embedded_Trace.trace_din_all_reg[80]_0 [72]),
        .I2(\Serial_Dbg_Intf.stopped_i_reg_1 ),
        .I3(\Serial_Dbg_Intf.trig_in_1_pulse_reg ),
        .O(\event_data_next[1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000075777777)) 
    \event_data_next[1]_i_5 
       (.I0(trig_in_1_pulse),
        .I1(first_item),
        .I2(save_pc_next),
        .I3(trig_in_0_pulse_reg),
        .I4(last_item_reg_0),
        .I5(\event_data_next[14]_i_2_n_0 ),
        .O(\Serial_Dbg_Intf.trig_in_1_pulse_reg ));
  LUT6 #(
    .INIT(64'hFFFFEEEF00000000)) 
    \event_data_next[2]_i_1 
       (.I0(\Serial_Dbg_Intf.stopped_i_reg_0 ),
        .I1(sync_reset),
        .I2(\Serial_Dbg_Intf.control_reg_reg[16]_0 [2]),
        .I3(\Serial_Dbg_Intf.control_reg_reg[16]_0 [1]),
        .I4(save_event_next_reg_0),
        .I5(\event_data_next[1]_i_1_n_0 ),
        .O(\event_data_next[2]_i_1_n_0 ));
  FDRE \event_data_next_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\event_data_next[0]_i_1_n_0 ),
        .Q(event_data_next__0[0]),
        .R(1'b0));
  FDRE \event_data_next_reg[10] 
       (.C(Clk),
        .CE(\event_data_next[1]_i_1_n_0 ),
        .D(\event_data_next[10]_i_1_n_0 ),
        .Q(event_data_next__0[10]),
        .R(1'b0));
  FDRE \event_data_next_reg[11] 
       (.C(Clk),
        .CE(\event_data_next[1]_i_1_n_0 ),
        .D(\event_data_next[11]_i_1_n_0 ),
        .Q(event_data_next__0[11]),
        .R(1'b0));
  FDRE \event_data_next_reg[12] 
       (.C(Clk),
        .CE(\event_data_next[1]_i_1_n_0 ),
        .D(\event_data_next[12]_i_1_n_0 ),
        .Q(event_data_next__0[12]),
        .R(1'b0));
  FDRE \event_data_next_reg[13] 
       (.C(Clk),
        .CE(\event_data_next[1]_i_1_n_0 ),
        .D(\event_data_next[13]_i_1_n_0 ),
        .Q(event_data_next__0[13]),
        .R(1'b0));
  FDRE \event_data_next_reg[14] 
       (.C(Clk),
        .CE(\event_data_next[1]_i_1_n_0 ),
        .D(\event_data_next[14]_i_1_n_0 ),
        .Q(event_data_next__0[14]),
        .R(1'b0));
  FDRE \event_data_next_reg[15] 
       (.C(Clk),
        .CE(\event_data_next[1]_i_1_n_0 ),
        .D(\event_data_next[15]_i_1_n_0 ),
        .Q(event_data_next__0[15]),
        .R(1'b0));
  FDRE \event_data_next_reg[1] 
       (.C(Clk),
        .CE(\event_data_next[1]_i_1_n_0 ),
        .D(\event_data_next[1]_i_2_n_0 ),
        .Q(event_data_next__0[1]),
        .R(1'b0));
  FDRE \event_data_next_reg[2] 
       (.C(Clk),
        .CE(\event_data_next[1]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [86]),
        .Q(event_data_next__0[2]),
        .R(\event_data_next[2]_i_1_n_0 ));
  FDRE \event_data_next_reg[3] 
       (.C(Clk),
        .CE(\event_data_next[1]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [85]),
        .Q(event_data_next__0[3]),
        .R(\event_data_next[2]_i_1_n_0 ));
  FDRE \event_data_next_reg[4] 
       (.C(Clk),
        .CE(\event_data_next[1]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [84]),
        .Q(event_data_next__0[4]),
        .R(\event_data_next[2]_i_1_n_0 ));
  FDRE \event_data_next_reg[5] 
       (.C(Clk),
        .CE(\event_data_next[1]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [83]),
        .Q(event_data_next__0[5]),
        .R(\event_data_next[2]_i_1_n_0 ));
  FDRE \event_data_next_reg[6] 
       (.C(Clk),
        .CE(\event_data_next[1]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [82]),
        .Q(event_data_next__0[6]),
        .R(\event_data_next[2]_i_1_n_0 ));
  FDRE \event_data_next_reg[7] 
       (.C(Clk),
        .CE(\event_data_next[1]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [81]),
        .Q(event_data_next__0[7]),
        .R(\event_data_next[2]_i_1_n_0 ));
  FDRE \event_data_next_reg[8] 
       (.C(Clk),
        .CE(\event_data_next[1]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [80]),
        .Q(event_data_next__0[8]),
        .R(\event_data_next[2]_i_1_n_0 ));
  FDRE \event_data_next_reg[9] 
       (.C(Clk),
        .CE(\event_data_next[1]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [79]),
        .Q(event_data_next__0[9]),
        .R(\event_data_next[2]_i_1_n_0 ));
  FDRE \event_data_reg[0] 
       (.C(Clk),
        .CE(\event_data[0]_i_1_n_0 ),
        .D(\event_data[0]_i_2_n_0 ),
        .Q(event_data[0]),
        .R(1'b0));
  FDRE \event_data_reg[10] 
       (.C(Clk),
        .CE(\event_data[0]_i_1_n_0 ),
        .D(\event_data[10]_i_1_n_0 ),
        .Q(event_data[10]),
        .R(1'b0));
  FDRE \event_data_reg[11] 
       (.C(Clk),
        .CE(\event_data[0]_i_1_n_0 ),
        .D(\event_data[11]_i_1_n_0 ),
        .Q(event_data[11]),
        .R(1'b0));
  FDRE \event_data_reg[12] 
       (.C(Clk),
        .CE(\event_data[0]_i_1_n_0 ),
        .D(\event_data[12]_i_1_n_0 ),
        .Q(event_data[12]),
        .R(1'b0));
  FDRE \event_data_reg[13] 
       (.C(Clk),
        .CE(\event_data[0]_i_1_n_0 ),
        .D(\event_data[13]_i_1_n_0 ),
        .Q(event_data[13]),
        .R(1'b0));
  FDRE \event_data_reg[14] 
       (.C(Clk),
        .CE(\event_data[0]_i_1_n_0 ),
        .D(\event_data[14]_i_1_n_0 ),
        .Q(event_data[14]),
        .R(1'b0));
  FDRE \event_data_reg[15] 
       (.C(Clk),
        .CE(\event_data[0]_i_1_n_0 ),
        .D(\event_data[15]_i_1_n_0 ),
        .Q(event_data[15]),
        .R(1'b0));
  FDRE \event_data_reg[1] 
       (.C(Clk),
        .CE(\event_data[0]_i_1_n_0 ),
        .D(\event_data[1]_i_1_n_0 ),
        .Q(event_data[1]),
        .R(1'b0));
  FDRE \event_data_reg[2] 
       (.C(Clk),
        .CE(\event_data[0]_i_1_n_0 ),
        .D(\event_data[2]_i_2_n_0 ),
        .Q(event_data[2]),
        .R(\event_data[2]_i_1_n_0 ));
  FDRE \event_data_reg[3] 
       (.C(Clk),
        .CE(\event_data[0]_i_1_n_0 ),
        .D(\event_data[3]_i_1_n_0 ),
        .Q(event_data[3]),
        .R(\event_data[2]_i_1_n_0 ));
  FDRE \event_data_reg[4] 
       (.C(Clk),
        .CE(\event_data[0]_i_1_n_0 ),
        .D(\event_data[4]_i_1_n_0 ),
        .Q(event_data[4]),
        .R(\event_data[2]_i_1_n_0 ));
  FDRE \event_data_reg[5] 
       (.C(Clk),
        .CE(\event_data[0]_i_1_n_0 ),
        .D(\event_data[5]_i_1_n_0 ),
        .Q(event_data[5]),
        .R(\event_data[2]_i_1_n_0 ));
  FDRE \event_data_reg[6] 
       (.C(Clk),
        .CE(\event_data[0]_i_1_n_0 ),
        .D(\event_data[6]_i_1_n_0 ),
        .Q(event_data[6]),
        .R(\event_data[2]_i_1_n_0 ));
  FDRE \event_data_reg[7] 
       (.C(Clk),
        .CE(\event_data[0]_i_1_n_0 ),
        .D(\event_data[7]_i_1_n_0 ),
        .Q(event_data[7]),
        .R(\event_data[2]_i_1_n_0 ));
  FDRE \event_data_reg[8] 
       (.C(Clk),
        .CE(\event_data[0]_i_1_n_0 ),
        .D(\event_data[8]_i_1_n_0 ),
        .Q(event_data[8]),
        .R(1'b0));
  FDRE \event_data_reg[9] 
       (.C(Clk),
        .CE(\event_data[0]_i_1_n_0 ),
        .D(\event_data[9]_i_1_n_0 ),
        .Q(event_data[9]),
        .R(1'b0));
  LUT4 #(
    .INIT(16'hFFF1)) 
    first_item_i_1
       (.I0(\Serial_Dbg_Intf.control_reg_reg[16]_0 [1]),
        .I1(\Serial_Dbg_Intf.control_reg_reg[16]_0 [2]),
        .I2(sync_reset),
        .I3(\Serial_Dbg_Intf.stopped_i_reg_0 ),
        .O(first_item_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair89" *) 
  LUT5 #(
    .INIT(32'hAAAA0080)) 
    first_item_i_2
       (.I0(\event_data_next_reg[12]_0 ),
        .I1(last_item_reg_0),
        .I2(trig_in_0_pulse_reg),
        .I3(save_pc_next),
        .I4(first_item),
        .O(first_item_i_2_n_0));
  FDSE first_item_reg
       (.C(Clk),
        .CE(1'b1),
        .D(first_item_i_2_n_0),
        .Q(first_item),
        .S(first_item_i_1_n_0));
  FDRE last_item_reg
       (.C(Clk),
        .CE(1'b1),
        .D(last_item_reg_1),
        .Q(last_item_reg_0),
        .R(first_item_i_1_n_0));
  LUT6 #(
    .INIT(64'hDDD8D0D800000000)) 
    save_event_cc_i_1
       (.I0(save_event_cc_reg_n_0),
        .I1(\event_data[0]_i_3_n_0 ),
        .I2(save_event_cc0),
        .I3(save_event_cc),
        .I4(event_trace),
        .I5(\Serial_Dbg_Intf.stopped_i_reg_1 ),
        .O(save_event_cc_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair121" *) 
  LUT4 #(
    .INIT(16'h0040)) 
    save_event_cc_i_2
       (.I0(\Serial_Dbg_Intf.control_reg_reg[16]_0 [1]),
        .I1(\Serial_Dbg_Intf.control_reg_reg[16]_0 [2]),
        .I2(p_0_in38_in),
        .I3(cc_clear_reg_n_0),
        .O(save_event_cc0));
  LUT6 #(
    .INIT(64'hFFFFFFFFAAEAFAEA)) 
    save_event_cc_i_3
       (.I0(\saved_load_get[0]_i_1_n_0 ),
        .I1(\Embedded_Trace.trace_din_all_reg[80]_0 [147]),
        .I2(save_pc_next),
        .I3(trig_in_0_pulse_reg),
        .I4(first_item),
        .I5(branch_event0),
        .O(save_event_cc));
  FDRE save_event_cc_reg
       (.C(Clk),
        .CE(1'b1),
        .D(save_event_cc_i_1_n_0),
        .Q(save_event_cc_reg_n_0),
        .R(1'b0));
  LUT5 #(
    .INIT(32'hEF00EE00)) 
    save_event_next_i_1
       (.I0(save_event_next_reg_0),
        .I1(save_event_next_reg_1),
        .I2(branch_event0),
        .I3(\Serial_Dbg_Intf.stopped_i_reg_1 ),
        .I4(save_event_next_reg_n_0),
        .O(save_event_next_i_1_n_0));
  FDRE save_event_next_reg
       (.C(Clk),
        .CE(1'b1),
        .D(save_event_next_i_1_n_0),
        .Q(save_event_next_reg_n_0),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hBBBB0B0FBBBB0B00)) 
    save_pc_next_i_2
       (.I0(savepc_ctrl),
        .I1(event_trace),
        .I2(\event_data_next_reg[12]_0 ),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [72]),
        .I4(\event_data[10]_i_2_n_0 ),
        .I5(save_pc_next_next_reg_0),
        .O(\Serial_Dbg_Intf.control_reg_reg[19]_0 ));
  LUT6 #(
    .INIT(64'hFAFFFAFEFFFFFFFF)) 
    save_pc_next_i_3
       (.I0(\event_data[10]_i_2_n_0 ),
        .I1(\Embedded_Trace.trace_din_all_reg[80]_0 [72]),
        .I2(save_pc_next_i_4_n_0),
        .I3(\event_data_next_reg[12]_0 ),
        .I4(save_pc_next_next_reg_0),
        .I5(\Serial_Dbg_Intf.stopped_i_reg_1 ),
        .O(trace_exception_taken_i_reg));
  LUT4 #(
    .INIT(16'h08C8)) 
    save_pc_next_i_4
       (.I0(\Embedded_Trace.trace_din_all_reg[80]_0 [147]),
        .I1(save_pc_next),
        .I2(trig_in_0_pulse_reg),
        .I3(first_item),
        .O(save_pc_next_i_4_n_0));
  LUT6 #(
    .INIT(64'hBBBBBBBBBBBBBBBA)) 
    save_pc_next_next_i_4
       (.I0(\saved_load_get[0]_i_11_n_0 ),
        .I1(\saved_load_get[0]_i_14_n_0 ),
        .I2(\saved_load_get[0]_i_9_n_0 ),
        .I3(\saved_load_get[0]_i_13_n_0 ),
        .I4(\event_data_next_reg[12]_0 ),
        .I5(event_trace),
        .O(\trace_instruction_i_reg[2] ));
  FDRE save_pc_next_next_reg
       (.C(Clk),
        .CE(1'b1),
        .D(save_pc_next_next_reg_1),
        .Q(save_pc_next_next_reg_0),
        .R(1'b0));
  FDRE save_pc_next_reg
       (.C(Clk),
        .CE(1'b1),
        .D(save_pc_next_reg_0),
        .Q(save_pc_next),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h00000000FF80FFFF)) 
    \save_sel[0][0]_i_1 
       (.I0(\writems[1]_i_2_n_0 ),
        .I1(\saved_load_get[0]_i_1_n_0 ),
        .I2(\save_sel[1][0]_i_3_n_0 ),
        .I3(\save_sel[6][0]_i_3_n_0 ),
        .I4(\save_sel[9][1]_i_2_n_0 ),
        .I5(\save_sel[0][0]_i_2_n_0 ),
        .O(\save_sel[0][0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h3F3F3F7F3F3F3F3F)) 
    \save_sel[0][0]_i_2 
       (.I0(branch_data_first),
        .I1(\save_sel[5][0]_i_3_n_0 ),
        .I2(\save_sel[1][0]_i_3_n_0 ),
        .I3(\writems[1]_i_2_n_0 ),
        .I4(\saved_load_get[0]_i_1_n_0 ),
        .I5(\save_sel[9][1]_i_2_n_0 ),
        .O(\save_sel[0][0]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hAAAAAA2A)) 
    \save_sel[0][1]_i_1 
       (.I0(\save_sel[0][1]_i_2_n_0 ),
        .I1(\save_sel[9][1]_i_2_n_0 ),
        .I2(\writems[0]_i_3_n_0 ),
        .I3(branch_data_first),
        .I4(\writems[1]_i_2_n_0 ),
        .O(\save_sel[0][1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000101500000000)) 
    \save_sel[0][1]_i_2 
       (.I0(\save_sel[8][1]_i_3_n_0 ),
        .I1(plusOp[1]),
        .I2(p_30_in),
        .I3(wraddr[1]),
        .I4(\save_sel[8][1]_i_4_n_0 ),
        .I5(\Serial_Dbg_Intf.stopped_i_reg_1 ),
        .O(\save_sel[0][1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hF000400000000000)) 
    \save_sel[0][2]_i_1 
       (.I0(\writems[1]_i_2_n_0 ),
        .I1(\saved_load_get[0]_i_1_n_0 ),
        .I2(\save_sel[6][0]_i_3_n_0 ),
        .I3(\save_sel[1][0]_i_3_n_0 ),
        .I4(branch_data_first),
        .I5(\save_sel[1][2]_i_2_n_0 ),
        .O(\save_sel[0][2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0008000800080000)) 
    \save_sel[10][1]_i_1 
       (.I0(\writems[2]_i_2_n_0 ),
        .I1(\save_sel[10][1]_i_2_n_0 ),
        .I2(\Serial_Dbg_Intf.stopped_i_reg_0 ),
        .I3(sync_reset),
        .I4(\Serial_Dbg_Intf.control_reg_reg[16]_0 [2]),
        .I5(\Serial_Dbg_Intf.control_reg_reg[16]_0 [1]),
        .O(\save_sel[10][1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hC000A0A0C0000000)) 
    \save_sel[10][1]_i_2 
       (.I0(wraddr[1]),
        .I1(plusOp[1]),
        .I2(\save_sel[8][1]_i_3_n_0 ),
        .I3(plusOp[2]),
        .I4(p_30_in),
        .I5(wraddr[2]),
        .O(\save_sel[10][1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFAAEABBFBAAEA)) 
    \save_sel[1][0]_i_1 
       (.I0(\save_sel[1][0]_i_2_n_0 ),
        .I1(\save_sel[7][2]_i_4_n_0 ),
        .I2(\save_sel[1][0]_i_3_n_0 ),
        .I3(\save_sel[6][0]_i_3_n_0 ),
        .I4(\save_sel[1][0]_i_4_n_0 ),
        .I5(\save_sel[7][0]_i_4_n_0 ),
        .O(\save_sel[1][0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair124" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \save_sel[1][0]_i_2 
       (.I0(\Serial_Dbg_Intf.control_reg_reg[16]_0 [1]),
        .I1(\Serial_Dbg_Intf.control_reg_reg[16]_0 [2]),
        .O(\save_sel[1][0]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000511110005)) 
    \save_sel[1][0]_i_3 
       (.I0(\save_sel[8][1]_i_3_n_0 ),
        .I1(plusOp[2]),
        .I2(wraddr[2]),
        .I3(wraddr[1]),
        .I4(p_30_in),
        .I5(plusOp[1]),
        .O(\save_sel[1][0]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h0044034700000000)) 
    \save_sel[1][0]_i_4 
       (.I0(plusOp[1]),
        .I1(p_30_in),
        .I2(wraddr[1]),
        .I3(plusOp[2]),
        .I4(wraddr[2]),
        .I5(\save_sel[8][1]_i_3_n_0 ),
        .O(\save_sel[1][0]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAAFFFFBABB)) 
    \save_sel[1][1]_i_1 
       (.I0(\save_sel[1][1]_i_2_n_0 ),
        .I1(\save_sel[1][1]_i_3_n_0 ),
        .I2(\save_sel[1][1]_i_4_n_0 ),
        .I3(branch_data_first),
        .I4(\save_sel[1][1]_i_5_n_0 ),
        .I5(\save_sel[1][1]_i_6_n_0 ),
        .O(\save_sel[1][1]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h8F00)) 
    \save_sel[1][1]_i_2 
       (.I0(\writems[1]_i_2_n_0 ),
        .I1(\saved_load_get[0]_i_1_n_0 ),
        .I2(\save_sel[9][1]_i_2_n_0 ),
        .I3(\save_sel[1][0]_i_4_n_0 ),
        .O(\save_sel[1][1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h00000000553F55DD)) 
    \save_sel[1][1]_i_3 
       (.I0(\save_sel[1][0]_i_4_n_0 ),
        .I1(\writems[0]_i_3_n_0 ),
        .I2(\save_sel[1][0]_i_3_n_0 ),
        .I3(\writems[1]_i_2_n_0 ),
        .I4(\saved_load_get[0]_i_1_n_0 ),
        .I5(branch_data_first),
        .O(\save_sel[1][1]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair95" *) 
  LUT5 #(
    .INIT(32'h00053305)) 
    \save_sel[1][1]_i_4 
       (.I0(wraddr[2]),
        .I1(plusOp[2]),
        .I2(wraddr[1]),
        .I3(p_30_in),
        .I4(plusOp[1]),
        .O(\save_sel[1][1]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hFEFEFE00FE00FE00)) 
    \save_sel[1][1]_i_5 
       (.I0(save_event_cc_reg_n_0),
        .I1(\writems[0]_i_6_n_0 ),
        .I2(\writems[0]_i_7_n_0 ),
        .I3(\writems[1]_i_2_n_0 ),
        .I4(\saved_load_get[0]_i_1_n_0 ),
        .I5(\save_sel[1][0]_i_4_n_0 ),
        .O(\save_sel[1][1]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hFEAE0000FFFFFFFF)) 
    \save_sel[1][1]_i_6 
       (.I0(\save_sel[8][1]_i_4_n_0 ),
        .I1(wraddr[1]),
        .I2(p_30_in),
        .I3(plusOp[1]),
        .I4(\save_sel[7][1]_i_5_n_0 ),
        .I5(\save_sel[7][2]_i_4_n_0 ),
        .O(\save_sel[1][1]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h00000000FFFF0100)) 
    \save_sel[1][2]_i_1 
       (.I0(\save_sel[8][1]_i_3_n_0 ),
        .I1(\save_sel[8][1]_i_5_n_0 ),
        .I2(\save_sel[8][1]_i_4_n_0 ),
        .I3(\Serial_Dbg_Intf.stopped_i_reg_1 ),
        .I4(\save_sel[1][2]_i_2_n_0 ),
        .I5(\save_sel[1][2]_i_3_n_0 ),
        .O(\save_sel[1][2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0101010000000000)) 
    \save_sel[1][2]_i_2 
       (.I0(\writems[2]_i_2_n_0 ),
        .I1(\Serial_Dbg_Intf.stopped_i_reg_0 ),
        .I2(sync_reset),
        .I3(\Serial_Dbg_Intf.control_reg_reg[16]_0 [2]),
        .I4(\Serial_Dbg_Intf.control_reg_reg[16]_0 [1]),
        .I5(\save_sel[9][1]_i_2_n_0 ),
        .O(\save_sel[1][2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h7000302070007060)) 
    \save_sel[1][2]_i_3 
       (.I0(\writems[1]_i_2_n_0 ),
        .I1(\saved_load_get[0]_i_1_n_0 ),
        .I2(\save_sel[9][1]_i_2_n_0 ),
        .I3(\save_sel[1][2]_i_4_n_0 ),
        .I4(\writems[0]_i_3_n_0 ),
        .I5(\save_sel[1][0]_i_3_n_0 ),
        .O(\save_sel[1][2]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFF6267)) 
    \save_sel[1][2]_i_4 
       (.I0(\save_sel[5][2]_i_7_n_0 ),
        .I1(\save_sel[8][1]_i_3_n_0 ),
        .I2(\writems[1]_i_2_n_0 ),
        .I3(\saved_load_get[0]_i_1_n_0 ),
        .I4(\save_sel[8][1]_i_4_n_0 ),
        .I5(\save_sel[8][1]_i_5_n_0 ),
        .O(\save_sel[1][2]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hEEAEEEAAEEAEEAAA)) 
    \save_sel[2][0]_i_1 
       (.I0(\save_sel[2][0]_i_2_n_0 ),
        .I1(\writems[0]_i_2_n_0 ),
        .I2(\writems[0]_i_5_n_0 ),
        .I3(\save_sel[2][1]_i_4_n_0 ),
        .I4(\save_sel[2][0]_i_3_n_0 ),
        .I5(\save_sel[7][0]_i_4_n_0 ),
        .O(\save_sel[2][0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h000F000F000FEEEF)) 
    \save_sel[2][0]_i_2 
       (.I0(\writems[2]_i_2_n_0 ),
        .I1(\writems[2]_i_3_n_0 ),
        .I2(\Serial_Dbg_Intf.control_reg_reg[16]_0 [2]),
        .I3(\Serial_Dbg_Intf.control_reg_reg[16]_0 [1]),
        .I4(\save_sel[8][1]_i_4_n_0 ),
        .I5(\save_sel[8][1]_i_3_n_0 ),
        .O(\save_sel[2][0]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hEEEEEEE000000000)) 
    \save_sel[2][0]_i_3 
       (.I0(\writems[1]_i_2_n_0 ),
        .I1(\saved_load_get[0]_i_1_n_0 ),
        .I2(\writems[0]_i_7_n_0 ),
        .I3(\writems[0]_i_6_n_0 ),
        .I4(save_event_cc_reg_n_0),
        .I5(\save_sel[1][0]_i_4_n_0 ),
        .O(\save_sel[2][0]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF222E0000222E)) 
    \save_sel[2][1]_i_1 
       (.I0(\save_sel[3][2]_i_6_n_0 ),
        .I1(\save_sel[9][1]_i_2_n_0 ),
        .I2(\save_sel[2][1]_i_2_n_0 ),
        .I3(\save_sel[2][1]_i_3_n_0 ),
        .I4(\writems[2]_i_2_n_0 ),
        .I5(\save_sel[2][1]_i_4_n_0 ),
        .O(\save_sel[2][1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h00000000FF2FEF2F)) 
    \save_sel[2][1]_i_2 
       (.I0(\saved_load_get[0]_i_1_n_0 ),
        .I1(\writems[0]_i_3_n_0 ),
        .I2(\save_sel[2][1]_i_5_n_0 ),
        .I3(\save_sel[2][1]_i_6_n_0 ),
        .I4(\save_sel[2][1]_i_7_n_0 ),
        .I5(\save_sel[2][1]_i_8_n_0 ),
        .O(\save_sel[2][1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAAA80802A2)) 
    \save_sel[2][1]_i_3 
       (.I0(\save_sel[7][1]_i_5_n_0 ),
        .I1(wraddr[1]),
        .I2(p_30_in),
        .I3(plusOp[1]),
        .I4(\save_sel[8][1]_i_3_n_0 ),
        .I5(\save_sel[8][1]_i_4_n_0 ),
        .O(\save_sel[2][1]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h0000000047034400)) 
    \save_sel[2][1]_i_4 
       (.I0(plusOp[2]),
        .I1(p_30_in),
        .I2(wraddr[2]),
        .I3(plusOp[1]),
        .I4(wraddr[1]),
        .I5(\save_sel[8][1]_i_3_n_0 ),
        .O(\save_sel[2][1]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h00001DE2FFFFFFFF)) 
    \save_sel[2][1]_i_5 
       (.I0(wraddr[1]),
        .I1(p_30_in),
        .I2(plusOp[1]),
        .I3(\save_sel[8][1]_i_3_n_0 ),
        .I4(\save_sel[8][1]_i_4_n_0 ),
        .I5(branch_data_first),
        .O(\save_sel[2][1]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h5555554555551155)) 
    \save_sel[2][1]_i_6 
       (.I0(branch_data_first),
        .I1(\writems[1]_i_2_n_0 ),
        .I2(\saved_load_get[0]_i_1_n_0 ),
        .I3(\save_sel[8][1]_i_5_n_0 ),
        .I4(\save_sel[8][1]_i_4_n_0 ),
        .I5(\save_sel[8][1]_i_3_n_0 ),
        .O(\save_sel[2][1]_i_6_n_0 ));
  LUT2 #(
    .INIT(4'hB)) 
    \save_sel[2][1]_i_7 
       (.I0(\writems[1]_i_2_n_0 ),
        .I1(\save_sel[2][1]_i_4_n_0 ),
        .O(\save_sel[2][1]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'hF8F8F8F8F8F8F800)) 
    \save_sel[2][1]_i_8 
       (.I0(\saved_load_get[0]_i_1_n_0 ),
        .I1(\save_sel[3][2]_i_6_n_0 ),
        .I2(\writems[1]_i_2_n_0 ),
        .I3(\writems[0]_i_7_n_0 ),
        .I4(\writems[0]_i_6_n_0 ),
        .I5(save_event_cc_reg_n_0),
        .O(\save_sel[2][1]_i_8_n_0 ));
  LUT6 #(
    .INIT(64'h0101010101FF0101)) 
    \save_sel[2][2]_i_1 
       (.I0(\save_sel[2][2]_i_2_n_0 ),
        .I1(\save_sel[8][1]_i_4_n_0 ),
        .I2(\save_sel[8][1]_i_5_n_0 ),
        .I3(\save_sel[2][2]_i_3_n_0 ),
        .I4(\Serial_Dbg_Intf.stopped_i_reg_1 ),
        .I5(\writems[2]_i_2_n_0 ),
        .O(\save_sel[2][2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h77772077FFFFFFFF)) 
    \save_sel[2][2]_i_2 
       (.I0(\writems[1]_i_2_n_0 ),
        .I1(\saved_load_get[0]_i_1_n_0 ),
        .I2(\save_sel[8][1]_i_3_n_0 ),
        .I3(\save_sel[9][1]_i_2_n_0 ),
        .I4(\save_sel[6][0]_i_3_n_0 ),
        .I5(\Serial_Dbg_Intf.stopped_i_reg_1 ),
        .O(\save_sel[2][2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hCFCC5555FFFF5555)) 
    \save_sel[2][2]_i_3 
       (.I0(\save_sel[1][0]_i_4_n_0 ),
        .I1(\save_sel[2][2]_i_4_n_0 ),
        .I2(\save_sel[2][1]_i_4_n_0 ),
        .I3(branch_data_first),
        .I4(\save_sel[9][1]_i_2_n_0 ),
        .I5(\save_sel[6][0]_i_3_n_0 ),
        .O(\save_sel[2][2]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h5555554555015555)) 
    \save_sel[2][2]_i_4 
       (.I0(branch_data_first),
        .I1(\writems[1]_i_2_n_0 ),
        .I2(\saved_load_get[0]_i_1_n_0 ),
        .I3(\save_sel[8][1]_i_4_n_0 ),
        .I4(\save_sel[8][1]_i_3_n_0 ),
        .I5(\save_sel[8][1]_i_5_n_0 ),
        .O(\save_sel[2][2]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h00000000FFFF4055)) 
    \save_sel[3][0]_i_1 
       (.I0(\writems[0]_i_5_n_0 ),
        .I1(\save_sel[7][0]_i_4_n_0 ),
        .I2(\save_sel[5][0]_i_4_n_0 ),
        .I3(\save_sel[3][0]_i_2_n_0 ),
        .I4(\save_sel[4][2]_i_2_n_0 ),
        .I5(\save_sel[3][0]_i_3_n_0 ),
        .O(\save_sel[3][0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h1111111FFFFFFFFF)) 
    \save_sel[3][0]_i_2 
       (.I0(\writems[1]_i_2_n_0 ),
        .I1(\saved_load_get[0]_i_1_n_0 ),
        .I2(\writems[0]_i_7_n_0 ),
        .I3(\writems[0]_i_6_n_0 ),
        .I4(save_event_cc_reg_n_0),
        .I5(\save_sel[2][1]_i_4_n_0 ),
        .O(\save_sel[3][0]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFEE0E)) 
    \save_sel[3][0]_i_3 
       (.I0(\writems[2]_i_2_n_0 ),
        .I1(\writems[2]_i_3_n_0 ),
        .I2(\save_sel[8][1]_i_3_n_0 ),
        .I3(\save_sel[8][1]_i_4_n_0 ),
        .I4(\Serial_Dbg_Intf.stopped_i_reg_0 ),
        .I5(sync_reset),
        .O(\save_sel[3][0]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFF01000000000000)) 
    \save_sel[3][1]_i_1 
       (.I0(\save_sel[3][1]_i_2_n_0 ),
        .I1(\save_sel[7][1]_i_2_n_0 ),
        .I2(\save_sel[3][1]_i_3_n_0 ),
        .I3(\writems[2]_i_2_n_0 ),
        .I4(\save_sel[3][1]_i_4_n_0 ),
        .I5(\save_sel[3][2]_i_3_n_0 ),
        .O(\save_sel[3][1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000008A8A8A008A)) 
    \save_sel[3][1]_i_2 
       (.I0(\save_sel[9][1]_i_2_n_0 ),
        .I1(\writems[0]_i_3_n_0 ),
        .I2(\saved_load_get[0]_i_1_n_0 ),
        .I3(wraddr[1]),
        .I4(p_30_in),
        .I5(plusOp[1]),
        .O(\save_sel[3][1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h001D1D1D001D001D)) 
    \save_sel[3][1]_i_3 
       (.I0(wraddr[0]),
        .I1(p_30_in),
        .I2(plusOp[0]),
        .I3(\save_sel[9][1]_i_2_n_0 ),
        .I4(\writems[0]_i_3_n_0 ),
        .I5(\saved_load_get[0]_i_1_n_0 ),
        .O(\save_sel[3][1]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hF7F77F7FF7F77F4C)) 
    \save_sel[3][1]_i_4 
       (.I0(\writems[1]_i_2_n_0 ),
        .I1(\saved_load_get[0]_i_1_n_0 ),
        .I2(\save_sel[8][1]_i_5_n_0 ),
        .I3(\save_sel[7][1]_i_5_n_0 ),
        .I4(\save_sel[8][1]_i_3_n_0 ),
        .I5(branch_data_first),
        .O(\save_sel[3][1]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h4FFF4F4F44444444)) 
    \save_sel[3][2]_i_1 
       (.I0(\save_sel[3][2]_i_2_n_0 ),
        .I1(\save_sel[3][2]_i_3_n_0 ),
        .I2(\save_sel[3][2]_i_4_n_0 ),
        .I3(\save_sel[3][2]_i_5_n_0 ),
        .I4(\save_sel[3][2]_i_6_n_0 ),
        .I5(\save_sel[3][2]_i_7_n_0 ),
        .O(\save_sel[3][2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0330050503305050)) 
    \save_sel[3][2]_i_10 
       (.I0(wraddr[2]),
        .I1(plusOp[2]),
        .I2(\save_sel[8][1]_i_3_n_0 ),
        .I3(plusOp[1]),
        .I4(p_30_in),
        .I5(wraddr[1]),
        .O(\save_sel[3][2]_i_10_n_0 ));
  LUT6 #(
    .INIT(64'hDFD55F55D5D55555)) 
    \save_sel[3][2]_i_2 
       (.I0(\writems[2]_i_2_n_0 ),
        .I1(plusOp[0]),
        .I2(p_30_in),
        .I3(wraddr[0]),
        .I4(plusOp[1]),
        .I5(wraddr[1]),
        .O(\save_sel[3][2]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h02A2)) 
    \save_sel[3][2]_i_3 
       (.I0(\Serial_Dbg_Intf.stopped_i_reg_1 ),
        .I1(wraddr[2]),
        .I2(p_30_in),
        .I3(plusOp[2]),
        .O(\save_sel[3][2]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF0047FF47)) 
    \save_sel[3][2]_i_4 
       (.I0(\save_sel[3][2]_i_8_n_0 ),
        .I1(\save_sel[3][2]_i_9_n_0 ),
        .I2(\save_sel[3][2]_i_10_n_0 ),
        .I3(\save_sel[7][1]_i_5_n_0 ),
        .I4(\save_sel[1][0]_i_4_n_0 ),
        .I5(\writems[0]_i_5_n_0 ),
        .O(\save_sel[3][2]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'h10155555)) 
    \save_sel[3][2]_i_5 
       (.I0(\writems[2]_i_3_n_0 ),
        .I1(plusOp[1]),
        .I2(p_30_in),
        .I3(wraddr[1]),
        .I4(\writems[0]_i_5_n_0 ),
        .O(\save_sel[3][2]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair86" *) 
  LUT5 #(
    .INIT(32'h00053305)) 
    \save_sel[3][2]_i_6 
       (.I0(wraddr[2]),
        .I1(plusOp[2]),
        .I2(wraddr[0]),
        .I3(p_30_in),
        .I4(plusOp[0]),
        .O(\save_sel[3][2]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000007770)) 
    \save_sel[3][2]_i_7 
       (.I0(\writems[1]_i_2_n_0 ),
        .I1(\saved_load_get[0]_i_1_n_0 ),
        .I2(\Serial_Dbg_Intf.control_reg_reg[16]_0 [1]),
        .I3(\Serial_Dbg_Intf.control_reg_reg[16]_0 [2]),
        .I4(sync_reset),
        .I5(\Serial_Dbg_Intf.stopped_i_reg_0 ),
        .O(\save_sel[3][2]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h0A0005000E000400)) 
    \save_sel[3][2]_i_8 
       (.I0(\save_sel[5][2]_i_7_n_0 ),
        .I1(\saved_load_get[0]_i_1_n_0 ),
        .I2(\save_sel[8][1]_i_4_n_0 ),
        .I3(\save_sel[8][1]_i_5_n_0 ),
        .I4(\save_sel[8][1]_i_3_n_0 ),
        .I5(\writems[1]_i_2_n_0 ),
        .O(\save_sel[3][2]_i_8_n_0 ));
  LUT4 #(
    .INIT(16'h01FF)) 
    \save_sel[3][2]_i_9 
       (.I0(\writems[0]_i_7_n_0 ),
        .I1(\writems[0]_i_6_n_0 ),
        .I2(save_event_cc_reg_n_0),
        .I3(\saved_load_get[0]_i_1_n_0 ),
        .O(\save_sel[3][2]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'h00000000AF8FBFBF)) 
    \save_sel[4][0]_i_1 
       (.I0(\save_sel[5][2]_i_6_n_0 ),
        .I1(\writems[0]_i_5_n_0 ),
        .I2(\writems[0]_i_2_n_0 ),
        .I3(\save_sel[7][0]_i_4_n_0 ),
        .I4(\save_sel[4][0]_i_2_n_0 ),
        .I5(\save_sel[4][0]_i_3_n_0 ),
        .O(\save_sel[4][0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h1111111FFFFFFFFF)) 
    \save_sel[4][0]_i_2 
       (.I0(\writems[1]_i_2_n_0 ),
        .I1(\saved_load_get[0]_i_1_n_0 ),
        .I2(\writems[0]_i_7_n_0 ),
        .I3(\writems[0]_i_6_n_0 ),
        .I4(save_event_cc_reg_n_0),
        .I5(\save_sel[5][0]_i_4_n_0 ),
        .O(\save_sel[4][0]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFF00F9)) 
    \save_sel[4][0]_i_3 
       (.I0(\save_sel[8][1]_i_5_n_0 ),
        .I1(\save_sel[8][1]_i_4_n_0 ),
        .I2(\save_sel[8][1]_i_3_n_0 ),
        .I3(\writems[0]_i_2_n_0 ),
        .I4(\Serial_Dbg_Intf.stopped_i_reg_0 ),
        .I5(sync_reset),
        .O(\save_sel[4][0]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hBBBBBBBBABAABBBB)) 
    \save_sel[4][1]_i_1 
       (.I0(\save_sel[4][1]_i_2_n_0 ),
        .I1(\save_sel[4][1]_i_3_n_0 ),
        .I2(\save_sel[4][1]_i_4_n_0 ),
        .I3(\save_sel[4][1]_i_5_n_0 ),
        .I4(\save_sel[9][1]_i_2_n_0 ),
        .I5(\save_sel[4][1]_i_6_n_0 ),
        .O(\save_sel[4][1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000808000)) 
    \save_sel[4][1]_i_2 
       (.I0(\writems[1]_i_2_n_0 ),
        .I1(\saved_load_get[0]_i_1_n_0 ),
        .I2(\Serial_Dbg_Intf.stopped_i_reg_1 ),
        .I3(\save_sel[8][1]_i_3_n_0 ),
        .I4(\save_sel[8][1]_i_4_n_0 ),
        .I5(\save_sel[8][1]_i_5_n_0 ),
        .O(\save_sel[4][1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hBBBBBBBBFFFFFBBF)) 
    \save_sel[4][1]_i_3 
       (.I0(\writems[2]_i_2_n_0 ),
        .I1(\Serial_Dbg_Intf.stopped_i_reg_1 ),
        .I2(\save_sel[8][1]_i_5_n_0 ),
        .I3(\save_sel[8][1]_i_4_n_0 ),
        .I4(\save_sel[8][1]_i_3_n_0 ),
        .I5(\save_sel[9][1]_i_2_n_0 ),
        .O(\save_sel[4][1]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hCCCCCCC0EEEEEEE0)) 
    \save_sel[4][1]_i_4 
       (.I0(\saved_load_get[0]_i_1_n_0 ),
        .I1(\writems[1]_i_2_n_0 ),
        .I2(\writems[0]_i_7_n_0 ),
        .I3(\writems[0]_i_6_n_0 ),
        .I4(save_event_cc_reg_n_0),
        .I5(\save_sel[4][1]_i_7_n_0 ),
        .O(\save_sel[4][1]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hF8ECF8A8FFFFF8F8)) 
    \save_sel[4][1]_i_5 
       (.I0(branch_data_first),
        .I1(\save_sel[5][0]_i_4_n_0 ),
        .I2(\save_sel[5][2]_i_6_n_0 ),
        .I3(\writems[1]_i_2_n_0 ),
        .I4(\saved_load_get[0]_i_1_n_0 ),
        .I5(\writems[0]_i_3_n_0 ),
        .O(\save_sel[4][1]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h2022200008000888)) 
    \save_sel[4][1]_i_6 
       (.I0(\save_sel[7][1]_i_5_n_0 ),
        .I1(\save_sel[8][1]_i_4_n_0 ),
        .I2(plusOp[1]),
        .I3(p_30_in),
        .I4(wraddr[1]),
        .I5(\save_sel[8][1]_i_3_n_0 ),
        .O(\save_sel[4][1]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h0000000047748BB8)) 
    \save_sel[4][1]_i_7 
       (.I0(plusOp[1]),
        .I1(p_30_in),
        .I2(wraddr[1]),
        .I3(wraddr[2]),
        .I4(plusOp[2]),
        .I5(\save_sel[8][1]_i_3_n_0 ),
        .O(\save_sel[4][1]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'hE0E0E0E0000000E0)) 
    \save_sel[4][2]_i_1 
       (.I0(\save_sel[4][2]_i_2_n_0 ),
        .I1(\save_sel[4][2]_i_3_n_0 ),
        .I2(\Serial_Dbg_Intf.stopped_i_reg_1 ),
        .I3(\save_sel[5][2]_i_5_n_0 ),
        .I4(\writems[2]_i_3_n_0 ),
        .I5(\save_sel[4][2]_i_4_n_0 ),
        .O(\save_sel[4][2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hEEEEEEEEFEEEEEEE)) 
    \save_sel[4][2]_i_2 
       (.I0(\writems[2]_i_2_n_0 ),
        .I1(\writems[2]_i_3_n_0 ),
        .I2(\writems[0]_i_5_n_0 ),
        .I3(\save_sel[8][1]_i_5_n_0 ),
        .I4(\save_sel[8][1]_i_3_n_0 ),
        .I5(\save_sel[8][1]_i_4_n_0 ),
        .O(\save_sel[4][2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h000000000F0F00AB)) 
    \save_sel[4][2]_i_3 
       (.I0(\save_sel[4][2]_i_5_n_0 ),
        .I1(\saved_load_get[0]_i_1_n_0 ),
        .I2(\save_sel[4][2]_i_6_n_0 ),
        .I3(\save_sel[4][2]_i_7_n_0 ),
        .I4(\writems[0]_i_3_n_0 ),
        .I5(\writems[0]_i_5_n_0 ),
        .O(\save_sel[4][2]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h000ACC0A)) 
    \save_sel[4][2]_i_4 
       (.I0(wraddr[0]),
        .I1(plusOp[0]),
        .I2(wraddr[2]),
        .I3(p_30_in),
        .I4(plusOp[2]),
        .O(\save_sel[4][2]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF0000A808)) 
    \save_sel[4][2]_i_5 
       (.I0(\saved_load_get[0]_i_1_n_0 ),
        .I1(wraddr[1]),
        .I2(p_30_in),
        .I3(plusOp[1]),
        .I4(\save_sel[8][1]_i_4_n_0 ),
        .I5(\writems[1]_i_2_n_0 ),
        .O(\save_sel[4][2]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hFFF3FFF3CFFBFFFB)) 
    \save_sel[4][2]_i_6 
       (.I0(\save_sel[9][1]_i_5_n_0 ),
        .I1(\save_sel[8][1]_i_4_n_0 ),
        .I2(\save_sel[8][1]_i_5_n_0 ),
        .I3(\save_sel[8][1]_i_3_n_0 ),
        .I4(\writems[0]_i_4_n_0 ),
        .I5(branch_data_first),
        .O(\save_sel[4][2]_i_6_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \save_sel[4][2]_i_7 
       (.I0(\writems[1]_i_2_n_0 ),
        .I1(\save_sel[2][1]_i_4_n_0 ),
        .O(\save_sel[4][2]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'hE0F0E0F0A0F0A000)) 
    \save_sel[5][0]_i_1 
       (.I0(\save_sel[5][0]_i_2_n_0 ),
        .I1(\writems[0]_i_5_n_0 ),
        .I2(\save_sel[5][0]_i_3_n_0 ),
        .I3(\writems[0]_i_2_n_0 ),
        .I4(\save_sel[5][0]_i_4_n_0 ),
        .I5(\save_sel[6][2]_i_2_n_0 ),
        .O(\save_sel[5][0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0010000000010000)) 
    \save_sel[5][0]_i_2 
       (.I0(\writems[0]_i_5_n_0 ),
        .I1(\save_sel[5][0]_i_5_n_0 ),
        .I2(\save_sel[6][0]_i_3_n_0 ),
        .I3(\save_sel[8][1]_i_5_n_0 ),
        .I4(\save_sel[8][1]_i_4_n_0 ),
        .I5(\save_sel[8][1]_i_3_n_0 ),
        .O(\save_sel[5][0]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \save_sel[5][0]_i_3 
       (.I0(sync_reset),
        .I1(\Serial_Dbg_Intf.stopped_i_reg_0 ),
        .O(\save_sel[5][0]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h4703440000000000)) 
    \save_sel[5][0]_i_4 
       (.I0(plusOp[2]),
        .I1(p_30_in),
        .I2(wraddr[2]),
        .I3(plusOp[1]),
        .I4(wraddr[1]),
        .I5(\save_sel[8][1]_i_3_n_0 ),
        .O(\save_sel[5][0]_i_4_n_0 ));
  LUT3 #(
    .INIT(8'h01)) 
    \save_sel[5][0]_i_5 
       (.I0(\writems[1]_i_2_n_0 ),
        .I1(branch_data_first),
        .I2(\saved_load_get[0]_i_1_n_0 ),
        .O(\save_sel[5][0]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h0000C5C530340000)) 
    \save_sel[5][1]_i_1 
       (.I0(\save_sel[5][1]_i_2_n_0 ),
        .I1(\save_sel[8][1]_i_3_n_0 ),
        .I2(\writems[2]_i_2_n_0 ),
        .I3(\save_sel[7][1]_i_3_n_0 ),
        .I4(\save_sel[8][1]_i_5_n_0 ),
        .I5(\save_sel[8][1]_i_4_n_0 ),
        .O(\save_sel[5][1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h000C37370000BBBF)) 
    \save_sel[5][1]_i_2 
       (.I0(\saved_load_get[0]_i_1_n_0 ),
        .I1(\save_sel[9][1]_i_2_n_0 ),
        .I2(branch_data_first),
        .I3(\writems[1]_i_2_n_0 ),
        .I4(\save_sel[8][1]_i_3_n_0 ),
        .I5(\writems[0]_i_3_n_0 ),
        .O(\save_sel[5][1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAE00AE000000AE00)) 
    \save_sel[5][2]_i_1 
       (.I0(\save_sel[5][2]_i_2_n_0 ),
        .I1(\save_sel[5][2]_i_3_n_0 ),
        .I2(\save_sel[5][2]_i_4_n_0 ),
        .I3(\Serial_Dbg_Intf.stopped_i_reg_1 ),
        .I4(\save_sel[5][2]_i_5_n_0 ),
        .I5(\save_sel[5][2]_i_6_n_0 ),
        .O(\save_sel[5][2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAAAEAFAAAAAEAEAA)) 
    \save_sel[5][2]_i_2 
       (.I0(\writems[2]_i_2_n_0 ),
        .I1(\writems[2]_i_3_n_0 ),
        .I2(\save_sel[8][1]_i_3_n_0 ),
        .I3(\save_sel[8][1]_i_4_n_0 ),
        .I4(\save_sel[8][1]_i_5_n_0 ),
        .I5(\writems[0]_i_5_n_0 ),
        .O(\save_sel[5][2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0A0A0704FFFFFFFF)) 
    \save_sel[5][2]_i_3 
       (.I0(\save_sel[8][1]_i_3_n_0 ),
        .I1(\writems[1]_i_2_n_0 ),
        .I2(\save_sel[6][2]_i_5_n_0 ),
        .I3(\saved_load_get[0]_i_1_n_0 ),
        .I4(\save_sel[5][2]_i_7_n_0 ),
        .I5(\save_sel[6][0]_i_3_n_0 ),
        .O(\save_sel[5][2]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF000A000E)) 
    \save_sel[5][2]_i_4 
       (.I0(\writems[1]_i_2_n_0 ),
        .I1(\saved_load_get[0]_i_1_n_0 ),
        .I2(\writems[0]_i_3_n_0 ),
        .I3(\save_sel[5][0]_i_4_n_0 ),
        .I4(\save_sel[5][2]_i_6_n_0 ),
        .I5(\writems[0]_i_5_n_0 ),
        .O(\save_sel[5][2]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h8A80AAA08A8AAAAA)) 
    \save_sel[5][2]_i_5 
       (.I0(\writems[2]_i_2_n_0 ),
        .I1(plusOp[2]),
        .I2(p_30_in),
        .I3(wraddr[2]),
        .I4(plusOp[1]),
        .I5(wraddr[1]),
        .O(\save_sel[5][2]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h0000005044440050)) 
    \save_sel[5][2]_i_6 
       (.I0(\save_sel[8][1]_i_3_n_0 ),
        .I1(plusOp[2]),
        .I2(wraddr[2]),
        .I3(wraddr[1]),
        .I4(p_30_in),
        .I5(plusOp[1]),
        .O(\save_sel[5][2]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000001000)) 
    \save_sel[5][2]_i_7 
       (.I0(\Serial_Dbg_Intf.control_reg_reg[21]_0 ),
        .I1(\branch_count[3]_i_2_n_0 ),
        .I2(cc_clear_i_3_n_0),
        .I3(branch_count[3]),
        .I4(branch_count[2]),
        .I5(\save_sel_reg[0][2]_0 ),
        .O(\save_sel[5][2]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'hEEEEAAEAAAEAAAEA)) 
    \save_sel[6][0]_i_1 
       (.I0(\save_sel[6][0]_i_2_n_0 ),
        .I1(\save_sel[7][2]_i_4_n_0 ),
        .I2(\save_sel[6][2]_i_2_n_0 ),
        .I3(\save_sel[6][0]_i_3_n_0 ),
        .I4(\save_sel[9][2]_i_4_n_0 ),
        .I5(\save_sel[7][0]_i_4_n_0 ),
        .O(\save_sel[6][0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFCCCCC888)) 
    \save_sel[6][0]_i_2 
       (.I0(\writems[2]_i_2_n_0 ),
        .I1(\save_sel[6][0]_i_4_n_0 ),
        .I2(\writems[0]_i_5_n_0 ),
        .I3(\save_sel[8][1]_i_5_n_0 ),
        .I4(\writems[2]_i_3_n_0 ),
        .I5(\save_sel[1][0]_i_2_n_0 ),
        .O(\save_sel[6][0]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h1111111F)) 
    \save_sel[6][0]_i_3 
       (.I0(\writems[1]_i_2_n_0 ),
        .I1(\saved_load_get[0]_i_1_n_0 ),
        .I2(\writems[0]_i_7_n_0 ),
        .I3(\writems[0]_i_6_n_0 ),
        .I4(save_event_cc_reg_n_0),
        .O(\save_sel[6][0]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair86" *) 
  LUT5 #(
    .INIT(32'h000ACC0A)) 
    \save_sel[6][0]_i_4 
       (.I0(wraddr[2]),
        .I1(plusOp[2]),
        .I2(wraddr[0]),
        .I3(p_30_in),
        .I4(plusOp[0]),
        .O(\save_sel[6][0]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h00000000EEEEEEFE)) 
    \save_sel[6][1]_i_1 
       (.I0(\writems[2]_i_2_n_0 ),
        .I1(\save_sel[6][1]_i_2_n_0 ),
        .I2(\save_sel[6][1]_i_3_n_0 ),
        .I3(\save_sel[6][1]_i_4_n_0 ),
        .I4(\save_sel[6][1]_i_5_n_0 ),
        .I5(\save_sel[6][1]_i_6_n_0 ),
        .O(\save_sel[6][1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000047034400)) 
    \save_sel[6][1]_i_2 
       (.I0(plusOp[0]),
        .I1(p_30_in),
        .I2(wraddr[0]),
        .I3(plusOp[2]),
        .I4(wraddr[2]),
        .I5(\save_sel[9][1]_i_2_n_0 ),
        .O(\save_sel[6][1]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h606060FF)) 
    \save_sel[6][1]_i_3 
       (.I0(\save_sel[8][1]_i_5_n_0 ),
        .I1(\save_sel[8][1]_i_3_n_0 ),
        .I2(\save_sel[8][1]_i_4_n_0 ),
        .I3(\save_sel[7][1]_i_5_n_0 ),
        .I4(branch_data_first),
        .O(\save_sel[6][1]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h00004044FFFFFFFF)) 
    \save_sel[6][1]_i_4 
       (.I0(\writems[1]_i_2_n_0 ),
        .I1(\saved_load_get[0]_i_1_n_0 ),
        .I2(\save_sel[8][1]_i_3_n_0 ),
        .I3(\save_sel[8][1]_i_4_n_0 ),
        .I4(\writems[0]_i_3_n_0 ),
        .I5(\save_sel[9][1]_i_2_n_0 ),
        .O(\save_sel[6][1]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h0200022202230223)) 
    \save_sel[6][1]_i_5 
       (.I0(\writems[0]_i_3_n_0 ),
        .I1(branch_data_first),
        .I2(\save_sel[9][2]_i_4_n_0 ),
        .I3(\writems[1]_i_2_n_0 ),
        .I4(\save_sel[6][2]_i_2_n_0 ),
        .I5(\saved_load_get[0]_i_1_n_0 ),
        .O(\save_sel[6][1]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h80880888FFFFFFFF)) 
    \save_sel[6][1]_i_6 
       (.I0(\writems[1]_i_2_n_0 ),
        .I1(\saved_load_get[0]_i_1_n_0 ),
        .I2(\save_sel[8][1]_i_4_n_0 ),
        .I3(\save_sel[8][1]_i_5_n_0 ),
        .I4(\save_sel[8][1]_i_3_n_0 ),
        .I5(\Serial_Dbg_Intf.stopped_i_reg_1 ),
        .O(\save_sel[6][1]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h00000000FEEEFEFF)) 
    \save_sel[6][2]_i_1 
       (.I0(\writems[2]_i_2_n_0 ),
        .I1(\writems[2]_i_3_n_0 ),
        .I2(\save_sel[6][2]_i_2_n_0 ),
        .I3(\writems[0]_i_5_n_0 ),
        .I4(\save_sel[6][2]_i_3_n_0 ),
        .I5(\save_sel[6][2]_i_4_n_0 ),
        .O(\save_sel[6][2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h000080800A008A80)) 
    \save_sel[6][2]_i_2 
       (.I0(\save_sel[8][1]_i_3_n_0 ),
        .I1(plusOp[2]),
        .I2(p_30_in),
        .I3(wraddr[2]),
        .I4(plusOp[1]),
        .I5(wraddr[1]),
        .O(\save_sel[6][2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hF0EEF0EEF0AAF0F0)) 
    \save_sel[6][2]_i_3 
       (.I0(\save_sel[6][2]_i_5_n_0 ),
        .I1(\save_sel[8][1]_i_3_n_0 ),
        .I2(\save_sel[6][2]_i_6_n_0 ),
        .I3(\writems[0]_i_3_n_0 ),
        .I4(\saved_load_get[0]_i_1_n_0 ),
        .I5(\writems[1]_i_2_n_0 ),
        .O(\save_sel[6][2]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFB3333FBFBFBF3FB)) 
    \save_sel[6][2]_i_4 
       (.I0(\writems[2]_i_2_n_0 ),
        .I1(\Serial_Dbg_Intf.stopped_i_reg_1 ),
        .I2(\writems[2]_i_3_n_0 ),
        .I3(\save_sel[8][1]_i_4_n_0 ),
        .I4(\save_sel[8][1]_i_5_n_0 ),
        .I5(\save_sel[8][1]_i_3_n_0 ),
        .O(\save_sel[6][2]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair95" *) 
  LUT5 #(
    .INIT(32'hCCAFFFAF)) 
    \save_sel[6][2]_i_5 
       (.I0(wraddr[1]),
        .I1(plusOp[1]),
        .I2(wraddr[2]),
        .I3(p_30_in),
        .I4(plusOp[2]),
        .O(\save_sel[6][2]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hDFDFDFDFF7D7F7FF)) 
    \save_sel[6][2]_i_6 
       (.I0(\save_sel[8][1]_i_4_n_0 ),
        .I1(\save_sel[8][1]_i_3_n_0 ),
        .I2(\save_sel[8][1]_i_5_n_0 ),
        .I3(\writems[1]_i_2_n_0 ),
        .I4(\saved_load_get[0]_i_1_n_0 ),
        .I5(branch_data_first),
        .O(\save_sel[6][2]_i_6_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \save_sel[7][0]_i_1 
       (.I0(\Serial_Dbg_Intf.stopped_i_reg_0 ),
        .I1(sync_reset),
        .O(\save_sel[7][0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hEEAEEEAEEEAAEAAA)) 
    \save_sel[7][0]_i_2 
       (.I0(\save_sel[7][0]_i_3_n_0 ),
        .I1(\writems[0]_i_2_n_0 ),
        .I2(\writems[0]_i_5_n_0 ),
        .I3(\save_sel[10][1]_i_2_n_0 ),
        .I4(\save_sel[7][0]_i_4_n_0 ),
        .I5(\save_sel[7][0]_i_5_n_0 ),
        .O(\save_sel[7][0]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hEEEF000F000F000F)) 
    \save_sel[7][0]_i_3 
       (.I0(\writems[2]_i_2_n_0 ),
        .I1(\writems[2]_i_3_n_0 ),
        .I2(\Serial_Dbg_Intf.control_reg_reg[16]_0 [2]),
        .I3(\Serial_Dbg_Intf.control_reg_reg[16]_0 [1]),
        .I4(\save_sel[8][1]_i_4_n_0 ),
        .I5(\save_sel[8][1]_i_3_n_0 ),
        .O(\save_sel[7][0]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h1111111F0000000E)) 
    \save_sel[7][0]_i_4 
       (.I0(\writems[1]_i_2_n_0 ),
        .I1(\saved_load_get[0]_i_1_n_0 ),
        .I2(\writems[0]_i_7_n_0 ),
        .I3(\writems[0]_i_6_n_0 ),
        .I4(save_event_cc_reg_n_0),
        .I5(branch_data_first),
        .O(\save_sel[7][0]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hEEEEEEE000000000)) 
    \save_sel[7][0]_i_5 
       (.I0(\writems[1]_i_2_n_0 ),
        .I1(\saved_load_get[0]_i_1_n_0 ),
        .I2(\writems[0]_i_7_n_0 ),
        .I3(\writems[0]_i_6_n_0 ),
        .I4(save_event_cc_reg_n_0),
        .I5(\save_sel[9][2]_i_4_n_0 ),
        .O(\save_sel[7][0]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h00000000FFFF2320)) 
    \save_sel[7][1]_i_1 
       (.I0(\save_sel[8][1]_i_5_n_0 ),
        .I1(\save_sel[7][1]_i_2_n_0 ),
        .I2(\save_sel[7][1]_i_3_n_0 ),
        .I3(\save_sel[8][1]_i_3_n_0 ),
        .I4(\writems[2]_i_2_n_0 ),
        .I5(\save_sel[7][1]_i_4_n_0 ),
        .O(\save_sel[7][1]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h04000000)) 
    \save_sel[7][1]_i_2 
       (.I0(\writems[1]_i_2_n_0 ),
        .I1(\save_sel[9][1]_i_2_n_0 ),
        .I2(branch_data_first),
        .I3(\save_sel[8][1]_i_3_n_0 ),
        .I4(\writems[0]_i_3_n_0 ),
        .O(\save_sel[7][1]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h01FF0000)) 
    \save_sel[7][1]_i_3 
       (.I0(save_event_cc_reg_n_0),
        .I1(\writems[0]_i_6_n_0 ),
        .I2(\writems[0]_i_7_n_0 ),
        .I3(\saved_load_get[0]_i_1_n_0 ),
        .I4(\save_sel[9][1]_i_2_n_0 ),
        .O(\save_sel[7][1]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFF01FFFFFFFFFFFF)) 
    \save_sel[7][1]_i_4 
       (.I0(\save_sel[7][1]_i_5_n_0 ),
        .I1(\save_sel[8][1]_i_3_n_0 ),
        .I2(\save_sel[7][1]_i_6_n_0 ),
        .I3(\save_sel[7][1]_i_7_n_0 ),
        .I4(\Serial_Dbg_Intf.stopped_i_reg_1 ),
        .I5(\save_sel[8][1]_i_4_n_0 ),
        .O(\save_sel[7][1]_i_4_n_0 ));
  LUT4 #(
    .INIT(16'hAAA8)) 
    \save_sel[7][1]_i_5 
       (.I0(\writems[1]_i_2_n_0 ),
        .I1(\writems[0]_i_7_n_0 ),
        .I2(\writems[0]_i_6_n_0 ),
        .I3(save_event_cc_reg_n_0),
        .O(\save_sel[7][1]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \save_sel[7][1]_i_6 
       (.I0(\saved_load_get[0]_i_1_n_0 ),
        .I1(branch_data_first),
        .O(\save_sel[7][1]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h202A808A2A208A80)) 
    \save_sel[7][1]_i_7 
       (.I0(\writems[2]_i_2_n_0 ),
        .I1(plusOp[0]),
        .I2(p_30_in),
        .I3(wraddr[0]),
        .I4(plusOp[1]),
        .I5(wraddr[1]),
        .O(\save_sel[7][1]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'hFEAAFEAAAEAAAAAA)) 
    \save_sel[7][2]_i_1 
       (.I0(\save_sel[7][2]_i_2_n_0 ),
        .I1(\save_sel[7][2]_i_3_n_0 ),
        .I2(\writems[0]_i_3_n_0 ),
        .I3(\save_sel[7][2]_i_4_n_0 ),
        .I4(\writems[0]_i_4_n_0 ),
        .I5(\save_sel[7][2]_i_5_n_0 ),
        .O(\save_sel[7][2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h00FEF0FA00000000)) 
    \save_sel[7][2]_i_2 
       (.I0(\writems[2]_i_3_n_0 ),
        .I1(\writems[0]_i_5_n_0 ),
        .I2(\writems[2]_i_2_n_0 ),
        .I3(\save_sel[8][1]_i_3_n_0 ),
        .I4(\save_sel[8][1]_i_5_n_0 ),
        .I5(\save_sel[8][1]_i_4_n_0 ),
        .O(\save_sel[7][2]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair92" *) 
  LUT5 #(
    .INIT(32'h00C075D5)) 
    \save_sel[7][2]_i_3 
       (.I0(\saved_load_get[0]_i_1_n_0 ),
        .I1(\save_sel[8][1]_i_3_n_0 ),
        .I2(\save_sel[8][1]_i_4_n_0 ),
        .I3(\save_sel[8][1]_i_5_n_0 ),
        .I4(\writems[1]_i_2_n_0 ),
        .O(\save_sel[7][2]_i_3_n_0 ));
  LUT3 #(
    .INIT(8'h70)) 
    \save_sel[7][2]_i_4 
       (.I0(\writems[1]_i_2_n_0 ),
        .I1(\saved_load_get[0]_i_1_n_0 ),
        .I2(\save_sel[9][1]_i_2_n_0 ),
        .O(\save_sel[7][2]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hC000C0003000A000)) 
    \save_sel[7][2]_i_5 
       (.I0(\saved_load_get[0]_i_1_n_0 ),
        .I1(\save_sel[8][1]_i_3_n_0 ),
        .I2(\save_sel[8][1]_i_4_n_0 ),
        .I3(\save_sel[8][1]_i_5_n_0 ),
        .I4(\writems[1]_i_2_n_0 ),
        .I5(branch_data_first),
        .O(\save_sel[7][2]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hEE00FE0000005000)) 
    \save_sel[8][0]_i_1 
       (.I0(\writems[2]_i_2_n_0 ),
        .I1(\writems[2]_i_3_n_0 ),
        .I2(\save_sel[10][1]_i_2_n_0 ),
        .I3(\Serial_Dbg_Intf.stopped_i_reg_1 ),
        .I4(\save_sel[9][2]_i_3_n_0 ),
        .I5(\save_sel[9][2]_i_4_n_0 ),
        .O(\save_sel[8][0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h080B0808F8080808)) 
    \save_sel[8][1]_i_1 
       (.I0(\save_sel[8][1]_i_2_n_0 ),
        .I1(\save_sel[9][1]_i_2_n_0 ),
        .I2(\writems[2]_i_2_n_0 ),
        .I3(\save_sel[8][1]_i_3_n_0 ),
        .I4(\save_sel[8][1]_i_4_n_0 ),
        .I5(\save_sel[8][1]_i_5_n_0 ),
        .O(\save_sel[8][1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFB0BFB08F808FB08)) 
    \save_sel[8][1]_i_2 
       (.I0(\save_sel[10][1]_i_2_n_0 ),
        .I1(\writems[1]_i_2_n_0 ),
        .I2(\writems[0]_i_3_n_0 ),
        .I3(\save_sel[8][1]_i_6_n_0 ),
        .I4(\saved_load_get[0]_i_1_n_0 ),
        .I5(\save_sel[9][2]_i_4_n_0 ),
        .O(\save_sel[8][1]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \save_sel[8][1]_i_3 
       (.I0(plusOp[0]),
        .I1(p_30_in),
        .I2(wraddr[0]),
        .O(\save_sel[8][1]_i_3_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \save_sel[8][1]_i_4 
       (.I0(plusOp[2]),
        .I1(p_30_in),
        .I2(wraddr[2]),
        .O(\save_sel[8][1]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair91" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \save_sel[8][1]_i_5 
       (.I0(plusOp[1]),
        .I1(p_30_in),
        .I2(wraddr[1]),
        .O(\save_sel[8][1]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hF000000040000000)) 
    \save_sel[8][1]_i_6 
       (.I0(\writems[1]_i_2_n_0 ),
        .I1(\saved_load_get[0]_i_1_n_0 ),
        .I2(\save_sel[8][1]_i_5_n_0 ),
        .I3(\save_sel[8][1]_i_3_n_0 ),
        .I4(\save_sel[8][1]_i_4_n_0 ),
        .I5(branch_data_first),
        .O(\save_sel[8][1]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h0700FFFF00000000)) 
    \save_sel[8][2]_i_1 
       (.I0(\writems[1]_i_2_n_0 ),
        .I1(\saved_load_get[0]_i_1_n_0 ),
        .I2(\save_sel[8][2]_i_2_n_0 ),
        .I3(\save_sel[9][1]_i_2_n_0 ),
        .I4(\save_sel[8][2]_i_3_n_0 ),
        .I5(\Serial_Dbg_Intf.stopped_i_reg_1 ),
        .O(\save_sel[8][2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFF1FFFFFFF1F0000)) 
    \save_sel[8][2]_i_2 
       (.I0(\writems[1]_i_2_n_0 ),
        .I1(\saved_load_get[0]_i_1_n_0 ),
        .I2(\save_sel[10][1]_i_2_n_0 ),
        .I3(branch_data_first),
        .I4(\writems[0]_i_3_n_0 ),
        .I5(\save_sel[8][2]_i_4_n_0 ),
        .O(\save_sel[8][2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0077FFFF1577FFFF)) 
    \save_sel[8][2]_i_3 
       (.I0(\writems[2]_i_2_n_0 ),
        .I1(\save_sel[8][1]_i_5_n_0 ),
        .I2(\writems[0]_i_5_n_0 ),
        .I3(\save_sel[8][1]_i_3_n_0 ),
        .I4(\save_sel[8][1]_i_4_n_0 ),
        .I5(\writems[2]_i_3_n_0 ),
        .O(\save_sel[8][2]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair92" *) 
  LUT5 #(
    .INIT(32'hCFFF5FFF)) 
    \save_sel[8][2]_i_4 
       (.I0(\saved_load_get[0]_i_1_n_0 ),
        .I1(\save_sel[8][1]_i_3_n_0 ),
        .I2(\save_sel[8][1]_i_4_n_0 ),
        .I3(\save_sel[8][1]_i_5_n_0 ),
        .I4(\writems[1]_i_2_n_0 ),
        .O(\save_sel[8][2]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h0004000400040000)) 
    \save_sel[9][0]_i_1 
       (.I0(\writems[0]_i_2_n_0 ),
        .I1(\save_sel[10][1]_i_2_n_0 ),
        .I2(\Serial_Dbg_Intf.stopped_i_reg_0 ),
        .I3(sync_reset),
        .I4(\Serial_Dbg_Intf.control_reg_reg[16]_0 [2]),
        .I5(\Serial_Dbg_Intf.control_reg_reg[16]_0 [1]),
        .O(\save_sel[9][0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF222F222FFFFF222)) 
    \save_sel[9][1]_i_1 
       (.I0(\save_sel[10][1]_i_2_n_0 ),
        .I1(\save_sel[9][1]_i_2_n_0 ),
        .I2(\writems[2]_i_2_n_0 ),
        .I3(\save_sel[9][2]_i_4_n_0 ),
        .I4(\save_sel[9][1]_i_3_n_0 ),
        .I5(\writems[0]_i_3_n_0 ),
        .O(\save_sel[9][1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBBBBBBBBB0BBB0B0)) 
    \save_sel[9][1]_i_2 
       (.I0(\save_sel[9][1]_i_4_n_0 ),
        .I1(cc_clear_i_4_n_0),
        .I2(\writems_reg[1]_0 ),
        .I3(savepc_ctrl),
        .I4(event_trace),
        .I5(\writems[2]_i_4_n_0 ),
        .O(\save_sel[9][1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000088800080)) 
    \save_sel[9][1]_i_3 
       (.I0(\save_sel[8][1]_i_3_n_0 ),
        .I1(\save_sel[8][1]_i_4_n_0 ),
        .I2(wraddr[1]),
        .I3(p_30_in),
        .I4(plusOp[1]),
        .I5(\save_sel[9][1]_i_5_n_0 ),
        .O(\save_sel[9][1]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAEFFFFFFFFFFFFFF)) 
    \save_sel[9][1]_i_4 
       (.I0(\branch_count[3]_i_2_n_0 ),
        .I1(branch_count[3]),
        .I2(branch_count[2]),
        .I3(\Serial_Dbg_Intf.control_reg_reg[16]_0 [1]),
        .I4(\Serial_Dbg_Intf.control_reg_reg[16]_0 [2]),
        .I5(save_pc_next),
        .O(\save_sel[9][1]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'hB)) 
    \save_sel[9][1]_i_5 
       (.I0(\writems[1]_i_2_n_0 ),
        .I1(\saved_load_get[0]_i_1_n_0 ),
        .O(\save_sel[9][1]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hFF110000F111F111)) 
    \save_sel[9][2]_i_1 
       (.I0(\save_sel[9][2]_i_2_n_0 ),
        .I1(\save_sel[9][2]_i_3_n_0 ),
        .I2(\save_sel[9][2]_i_4_n_0 ),
        .I3(\writems[2]_i_1_n_0 ),
        .I4(\save_sel[9][2]_i_5_n_0 ),
        .I5(\writems[2]_i_2_n_0 ),
        .O(\save_sel[9][2]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFFF1FFFF)) 
    \save_sel[9][2]_i_2 
       (.I0(\Serial_Dbg_Intf.control_reg_reg[16]_0 [1]),
        .I1(\Serial_Dbg_Intf.control_reg_reg[16]_0 [2]),
        .I2(sync_reset),
        .I3(\Serial_Dbg_Intf.stopped_i_reg_0 ),
        .I4(\save_sel[10][1]_i_2_n_0 ),
        .O(\save_sel[9][2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h1111111FFFFFFFFF)) 
    \save_sel[9][2]_i_3 
       (.I0(\writems[1]_i_2_n_0 ),
        .I1(\saved_load_get[0]_i_1_n_0 ),
        .I2(\writems[0]_i_7_n_0 ),
        .I3(\writems[0]_i_6_n_0 ),
        .I4(save_event_cc_reg_n_0),
        .I5(\save_sel[9][1]_i_2_n_0 ),
        .O(\save_sel[9][2]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h4444500000005000)) 
    \save_sel[9][2]_i_4 
       (.I0(\save_sel[8][1]_i_3_n_0 ),
        .I1(plusOp[2]),
        .I2(wraddr[2]),
        .I3(wraddr[1]),
        .I4(p_30_in),
        .I5(plusOp[1]),
        .O(\save_sel[9][2]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'hCCA000A0)) 
    \save_sel[9][2]_i_5 
       (.I0(wraddr[2]),
        .I1(plusOp[2]),
        .I2(wraddr[1]),
        .I3(p_30_in),
        .I4(plusOp[1]),
        .O(\save_sel[9][2]_i_5_n_0 ));
  FDSE \save_sel_reg[0][0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\save_sel[0][0]_i_1_n_0 ),
        .Q(\save_sel_reg[0]_22 [0]),
        .S(\writems[3]_i_1_n_0 ));
  FDRE \save_sel_reg[0][1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\save_sel[0][1]_i_1_n_0 ),
        .Q(\save_sel_reg[0]_22 [1]),
        .R(1'b0));
  FDRE \save_sel_reg[0][2] 
       (.C(Clk),
        .CE(1'b1),
        .D(\save_sel[0][2]_i_1_n_0 ),
        .Q(\save_sel_reg[0]_22 [2]),
        .R(1'b0));
  FDRE \save_sel_reg[10][1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\save_sel[10][1]_i_1_n_0 ),
        .Q(\save_sel_reg_n_0_[10][1] ),
        .R(1'b0));
  FDRE \save_sel_reg[1][0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\save_sel[1][0]_i_1_n_0 ),
        .Q(\save_sel_reg[1]_21 [0]),
        .R(\save_sel[7][0]_i_1_n_0 ));
  FDRE \save_sel_reg[1][1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\save_sel[1][1]_i_1_n_0 ),
        .Q(\save_sel_reg[1]_21 [1]),
        .R(first_item_i_1_n_0));
  FDRE \save_sel_reg[1][2] 
       (.C(Clk),
        .CE(1'b1),
        .D(\save_sel[1][2]_i_1_n_0 ),
        .Q(\save_sel_reg[1]_21 [2]),
        .R(1'b0));
  FDRE \save_sel_reg[2][0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\save_sel[2][0]_i_1_n_0 ),
        .Q(\save_sel_reg[2]_20 [0]),
        .R(\save_sel[7][0]_i_1_n_0 ));
  FDRE \save_sel_reg[2][1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\save_sel[2][1]_i_1_n_0 ),
        .Q(\save_sel_reg[2]_20 [1]),
        .R(first_item_i_1_n_0));
  FDRE \save_sel_reg[2][2] 
       (.C(Clk),
        .CE(1'b1),
        .D(\save_sel[2][2]_i_1_n_0 ),
        .Q(\save_sel_reg[2]_20 [2]),
        .R(1'b0));
  FDSE \save_sel_reg[3][0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\save_sel[3][0]_i_1_n_0 ),
        .Q(\save_sel_reg[3]_19 [0]),
        .S(\writems[3]_i_1_n_0 ));
  FDRE \save_sel_reg[3][1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\save_sel[3][1]_i_1_n_0 ),
        .Q(\save_sel_reg[3]_19 [1]),
        .R(1'b0));
  FDRE \save_sel_reg[3][2] 
       (.C(Clk),
        .CE(1'b1),
        .D(\save_sel[3][2]_i_1_n_0 ),
        .Q(\save_sel_reg[3]_19 [2]),
        .R(1'b0));
  FDSE \save_sel_reg[4][0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\save_sel[4][0]_i_1_n_0 ),
        .Q(\save_sel_reg[4]_18 [0]),
        .S(\writems[3]_i_1_n_0 ));
  FDRE \save_sel_reg[4][1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\save_sel[4][1]_i_1_n_0 ),
        .Q(\save_sel_reg[4]_18 [1]),
        .R(1'b0));
  FDRE \save_sel_reg[4][2] 
       (.C(Clk),
        .CE(1'b1),
        .D(\save_sel[4][2]_i_1_n_0 ),
        .Q(\save_sel_reg[4]_18 [2]),
        .R(1'b0));
  FDSE \save_sel_reg[5][0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\save_sel[5][0]_i_1_n_0 ),
        .Q(\save_sel_reg[5]_17 [0]),
        .S(\writems[3]_i_1_n_0 ));
  FDRE \save_sel_reg[5][1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\save_sel[5][1]_i_1_n_0 ),
        .Q(\save_sel_reg[5]_17 [1]),
        .R(first_item_i_1_n_0));
  FDRE \save_sel_reg[5][2] 
       (.C(Clk),
        .CE(1'b1),
        .D(\save_sel[5][2]_i_1_n_0 ),
        .Q(\save_sel_reg[5]_17 [2]),
        .R(1'b0));
  FDRE \save_sel_reg[6][0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\save_sel[6][0]_i_1_n_0 ),
        .Q(\save_sel_reg[6]_16 [0]),
        .R(\save_sel[7][0]_i_1_n_0 ));
  FDRE \save_sel_reg[6][1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\save_sel[6][1]_i_1_n_0 ),
        .Q(\save_sel_reg[6]_16 [1]),
        .R(1'b0));
  FDRE \save_sel_reg[6][2] 
       (.C(Clk),
        .CE(1'b1),
        .D(\save_sel[6][2]_i_1_n_0 ),
        .Q(\save_sel_reg[6]_16 [2]),
        .R(1'b0));
  FDRE \save_sel_reg[7][0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\save_sel[7][0]_i_2_n_0 ),
        .Q(\save_sel_reg[7]_15 [0]),
        .R(\save_sel[7][0]_i_1_n_0 ));
  FDRE \save_sel_reg[7][1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\save_sel[7][1]_i_1_n_0 ),
        .Q(\save_sel_reg[7]_15 [1]),
        .R(1'b0));
  FDRE \save_sel_reg[7][2] 
       (.C(Clk),
        .CE(1'b1),
        .D(\save_sel[7][2]_i_1_n_0 ),
        .Q(\save_sel_reg[7]_15 [2]),
        .R(first_item_i_1_n_0));
  FDRE \save_sel_reg[8][0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\save_sel[8][0]_i_1_n_0 ),
        .Q(\save_sel_reg_n_0_[8][0] ),
        .R(1'b0));
  FDRE \save_sel_reg[8][1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\save_sel[8][1]_i_1_n_0 ),
        .Q(\save_sel_reg_n_0_[8][1] ),
        .R(first_item_i_1_n_0));
  FDRE \save_sel_reg[8][2] 
       (.C(Clk),
        .CE(1'b1),
        .D(\save_sel[8][2]_i_1_n_0 ),
        .Q(\save_sel_reg_n_0_[8][2] ),
        .R(1'b0));
  FDRE \save_sel_reg[9][0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\save_sel[9][0]_i_1_n_0 ),
        .Q(\save_sel_reg_n_0_[9][0] ),
        .R(1'b0));
  FDRE \save_sel_reg[9][1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\save_sel[9][1]_i_1_n_0 ),
        .Q(\save_sel_reg_n_0_[9][1] ),
        .R(first_item_i_1_n_0));
  FDRE \save_sel_reg[9][2] 
       (.C(Clk),
        .CE(1'b1),
        .D(\save_sel[9][2]_i_1_n_0 ),
        .Q(\save_sel_reg_n_0_[9][2] ),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0400040400000000)) 
    \saved_load_get[0]_i_1 
       (.I0(\saved_load_get_reg[31]_0 ),
        .I1(\Serial_Dbg_Intf.control_reg_reg[21]_1 ),
        .I2(\Serial_Dbg_Intf.control_reg_reg[16]_1 ),
        .I3(\event_data_next_reg[12]_0 ),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [72]),
        .I5(\Serial_Dbg_Intf.control_reg_reg[21]_0 ),
        .O(\saved_load_get[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000008000000)) 
    \saved_load_get[0]_i_10 
       (.I0(\Embedded_Trace.trace_din_all_reg[80]_0 [168]),
        .I1(\Embedded_Trace.trace_din_all_reg[80]_0 [176]),
        .I2(\Embedded_Trace.trace_din_all_reg[80]_0 [178]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [179]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [175]),
        .I5(\Embedded_Trace.trace_din_all_reg[80]_0 [174]),
        .O(\saved_load_get[0]_i_10_n_0 ));
  LUT5 #(
    .INIT(32'h0A0A3F0A)) 
    \saved_load_get[0]_i_11 
       (.I0(\Embedded_Trace.trace_din_all_reg[80]_0 [177]),
        .I1(\Embedded_Trace.trace_din_all_reg[80]_0 [166]),
        .I2(savepc_ctrl),
        .I3(\Serial_Dbg_Intf.control_reg_reg[16]_0 [2]),
        .I4(\Serial_Dbg_Intf.control_reg_reg[16]_0 [1]),
        .O(\saved_load_get[0]_i_11_n_0 ));
  LUT6 #(
    .INIT(64'hFDFFFFFFFFFFFFFF)) 
    \saved_load_get[0]_i_12 
       (.I0(\Embedded_Trace.trace_din_all_reg[80]_0 [179]),
        .I1(\Embedded_Trace.trace_din_all_reg[80]_0 [178]),
        .I2(\Embedded_Trace.trace_din_all_reg[80]_0 [175]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [177]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [174]),
        .I5(\Embedded_Trace.trace_din_all_reg[80]_0 [176]),
        .O(\saved_load_get[0]_i_12_n_0 ));
  LUT3 #(
    .INIT(8'hBA)) 
    \saved_load_get[0]_i_13 
       (.I0(\Embedded_Trace.trace_din_all_reg[80]_0 [173]),
        .I1(savepc_ctrl),
        .I2(\Embedded_Trace.trace_din_all_reg[80]_0 [177]),
        .O(\saved_load_get[0]_i_13_n_0 ));
  LUT6 #(
    .INIT(64'h0000000004000000)) 
    \saved_load_get[0]_i_14 
       (.I0(\Embedded_Trace.trace_din_all_reg[80]_0 [168]),
        .I1(\Embedded_Trace.trace_din_all_reg[80]_0 [176]),
        .I2(\Embedded_Trace.trace_din_all_reg[80]_0 [178]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [179]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [175]),
        .I5(\Embedded_Trace.trace_din_all_reg[80]_0 [174]),
        .O(\saved_load_get[0]_i_14_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \saved_load_get[0]_i_15 
       (.I0(\Embedded_Trace.trace_din_all_reg[80]_0 [177]),
        .I1(savepc_ctrl),
        .O(\saved_load_get[0]_i_15_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair85" *) 
  LUT4 #(
    .INIT(16'hDFFF)) 
    \saved_load_get[0]_i_16 
       (.I0(\Embedded_Trace.trace_din_all_reg[80]_0 [176]),
        .I1(\Embedded_Trace.trace_din_all_reg[80]_0 [178]),
        .I2(\Embedded_Trace.trace_din_all_reg[80]_0 [179]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [175]),
        .O(\saved_load_get[0]_i_16_n_0 ));
  LUT6 #(
    .INIT(64'hFF0E0000FF0EFF0E)) 
    \saved_load_get[0]_i_3 
       (.I0(\saved_load_get[0]_i_8_n_0 ),
        .I1(\saved_load_get[0]_i_9_n_0 ),
        .I2(\saved_load_get[0]_i_10_n_0 ),
        .I3(\saved_load_get[0]_i_11_n_0 ),
        .I4(\saved_load_get[0]_i_12_n_0 ),
        .I5(saveret_ctrl),
        .O(\Serial_Dbg_Intf.control_reg_reg[21]_1 ));
  LUT6 #(
    .INIT(64'h0000000033330001)) 
    \saved_load_get[0]_i_4 
       (.I0(event_trace),
        .I1(\event_data_next_reg[12]_0 ),
        .I2(\saved_load_get[0]_i_13_n_0 ),
        .I3(\saved_load_get[0]_i_9_n_0 ),
        .I4(\saved_load_get[0]_i_14_n_0 ),
        .I5(\saved_load_get[0]_i_11_n_0 ),
        .O(\Serial_Dbg_Intf.control_reg_reg[16]_1 ));
  LUT6 #(
    .INIT(64'hFFEFFFEFFFEFEEEE)) 
    \saved_load_get[0]_i_5 
       (.I0(event_trace),
        .I1(\event_data_next_reg[12]_0 ),
        .I2(\saved_load_get[0]_i_15_n_0 ),
        .I3(\saved_load_get[0]_i_16_n_0 ),
        .I4(saveret_ctrl),
        .I5(\saved_load_get[0]_i_12_n_0 ),
        .O(\Serial_Dbg_Intf.control_reg_reg[21]_0 ));
  LUT5 #(
    .INIT(32'hFEFEFFFC)) 
    \saved_load_get[0]_i_6 
       (.I0(\Embedded_Trace.trace_din_all_reg[80]_0 [163]),
        .I1(\Embedded_Trace.trace_din_all_reg[80]_0 [179]),
        .I2(\Embedded_Trace.trace_din_all_reg[80]_0 [176]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [158]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [177]),
        .O(\trace_instruction_i_reg[16] ));
  LUT3 #(
    .INIT(8'h4F)) 
    \saved_load_get[0]_i_8 
       (.I0(\Serial_Dbg_Intf.control_reg_reg[16]_0 [1]),
        .I1(\Serial_Dbg_Intf.control_reg_reg[16]_0 [2]),
        .I2(\Embedded_Trace.trace_din_all_reg[80]_0 [173]),
        .O(\saved_load_get[0]_i_8_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair85" *) 
  LUT5 #(
    .INIT(32'hF7FFFFFF)) 
    \saved_load_get[0]_i_9 
       (.I0(\Embedded_Trace.trace_din_all_reg[80]_0 [176]),
        .I1(\Embedded_Trace.trace_din_all_reg[80]_0 [174]),
        .I2(\Embedded_Trace.trace_din_all_reg[80]_0 [178]),
        .I3(\Embedded_Trace.trace_din_all_reg[80]_0 [179]),
        .I4(\Embedded_Trace.trace_din_all_reg[80]_0 [175]),
        .O(\saved_load_get[0]_i_9_n_0 ));
  FDRE \saved_load_get_reg[0] 
       (.C(Clk),
        .CE(\saved_load_get[0]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [104]),
        .Q(\saved_load_get_reg_n_0_[0] ),
        .R(first_item_i_1_n_0));
  FDRE \saved_load_get_reg[10] 
       (.C(Clk),
        .CE(\saved_load_get[0]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [94]),
        .Q(\saved_load_get_reg_n_0_[10] ),
        .R(first_item_i_1_n_0));
  FDRE \saved_load_get_reg[11] 
       (.C(Clk),
        .CE(\saved_load_get[0]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [93]),
        .Q(\saved_load_get_reg_n_0_[11] ),
        .R(first_item_i_1_n_0));
  FDRE \saved_load_get_reg[12] 
       (.C(Clk),
        .CE(\saved_load_get[0]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [92]),
        .Q(\saved_load_get_reg_n_0_[12] ),
        .R(first_item_i_1_n_0));
  FDRE \saved_load_get_reg[13] 
       (.C(Clk),
        .CE(\saved_load_get[0]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [91]),
        .Q(\saved_load_get_reg_n_0_[13] ),
        .R(first_item_i_1_n_0));
  FDRE \saved_load_get_reg[14] 
       (.C(Clk),
        .CE(\saved_load_get[0]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [90]),
        .Q(\saved_load_get_reg_n_0_[14] ),
        .R(first_item_i_1_n_0));
  FDRE \saved_load_get_reg[15] 
       (.C(Clk),
        .CE(\saved_load_get[0]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [89]),
        .Q(data5),
        .R(first_item_i_1_n_0));
  FDRE \saved_load_get_reg[16] 
       (.C(Clk),
        .CE(\saved_load_get[0]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [88]),
        .Q(\saved_load_get_reg_n_0_[16] ),
        .R(first_item_i_1_n_0));
  FDRE \saved_load_get_reg[17] 
       (.C(Clk),
        .CE(\saved_load_get[0]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [87]),
        .Q(\saved_load_get_reg_n_0_[17] ),
        .R(first_item_i_1_n_0));
  FDRE \saved_load_get_reg[18] 
       (.C(Clk),
        .CE(\saved_load_get[0]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [86]),
        .Q(\saved_load_get_reg_n_0_[18] ),
        .R(first_item_i_1_n_0));
  FDRE \saved_load_get_reg[19] 
       (.C(Clk),
        .CE(\saved_load_get[0]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [85]),
        .Q(\saved_load_get_reg_n_0_[19] ),
        .R(first_item_i_1_n_0));
  FDRE \saved_load_get_reg[1] 
       (.C(Clk),
        .CE(\saved_load_get[0]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [103]),
        .Q(\saved_load_get_reg_n_0_[1] ),
        .R(first_item_i_1_n_0));
  FDRE \saved_load_get_reg[20] 
       (.C(Clk),
        .CE(\saved_load_get[0]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [84]),
        .Q(\saved_load_get_reg_n_0_[20] ),
        .R(first_item_i_1_n_0));
  FDRE \saved_load_get_reg[21] 
       (.C(Clk),
        .CE(\saved_load_get[0]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [83]),
        .Q(\saved_load_get_reg_n_0_[21] ),
        .R(first_item_i_1_n_0));
  FDRE \saved_load_get_reg[22] 
       (.C(Clk),
        .CE(\saved_load_get[0]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [82]),
        .Q(\saved_load_get_reg_n_0_[22] ),
        .R(first_item_i_1_n_0));
  FDRE \saved_load_get_reg[23] 
       (.C(Clk),
        .CE(\saved_load_get[0]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [81]),
        .Q(\saved_load_get_reg_n_0_[23] ),
        .R(first_item_i_1_n_0));
  FDRE \saved_load_get_reg[24] 
       (.C(Clk),
        .CE(\saved_load_get[0]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [80]),
        .Q(\saved_load_get_reg_n_0_[24] ),
        .R(first_item_i_1_n_0));
  FDRE \saved_load_get_reg[25] 
       (.C(Clk),
        .CE(\saved_load_get[0]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [79]),
        .Q(\saved_load_get_reg_n_0_[25] ),
        .R(first_item_i_1_n_0));
  FDRE \saved_load_get_reg[26] 
       (.C(Clk),
        .CE(\saved_load_get[0]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [78]),
        .Q(\saved_load_get_reg_n_0_[26] ),
        .R(first_item_i_1_n_0));
  FDRE \saved_load_get_reg[27] 
       (.C(Clk),
        .CE(\saved_load_get[0]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [77]),
        .Q(\saved_load_get_reg_n_0_[27] ),
        .R(first_item_i_1_n_0));
  FDRE \saved_load_get_reg[28] 
       (.C(Clk),
        .CE(\saved_load_get[0]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [76]),
        .Q(\saved_load_get_reg_n_0_[28] ),
        .R(first_item_i_1_n_0));
  FDRE \saved_load_get_reg[29] 
       (.C(Clk),
        .CE(\saved_load_get[0]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [75]),
        .Q(\saved_load_get_reg_n_0_[29] ),
        .R(first_item_i_1_n_0));
  FDRE \saved_load_get_reg[2] 
       (.C(Clk),
        .CE(\saved_load_get[0]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [102]),
        .Q(\saved_load_get_reg_n_0_[2] ),
        .R(first_item_i_1_n_0));
  FDRE \saved_load_get_reg[30] 
       (.C(Clk),
        .CE(\saved_load_get[0]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [74]),
        .Q(data6),
        .R(first_item_i_1_n_0));
  FDRE \saved_load_get_reg[31] 
       (.C(Clk),
        .CE(\saved_load_get[0]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [73]),
        .Q(\saved_load_get_reg_n_0_[31] ),
        .R(first_item_i_1_n_0));
  FDRE \saved_load_get_reg[3] 
       (.C(Clk),
        .CE(\saved_load_get[0]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [101]),
        .Q(\saved_load_get_reg_n_0_[3] ),
        .R(first_item_i_1_n_0));
  FDRE \saved_load_get_reg[4] 
       (.C(Clk),
        .CE(\saved_load_get[0]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [100]),
        .Q(\saved_load_get_reg_n_0_[4] ),
        .R(first_item_i_1_n_0));
  FDRE \saved_load_get_reg[5] 
       (.C(Clk),
        .CE(\saved_load_get[0]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [99]),
        .Q(\saved_load_get_reg_n_0_[5] ),
        .R(first_item_i_1_n_0));
  FDRE \saved_load_get_reg[6] 
       (.C(Clk),
        .CE(\saved_load_get[0]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [98]),
        .Q(\saved_load_get_reg_n_0_[6] ),
        .R(first_item_i_1_n_0));
  FDRE \saved_load_get_reg[7] 
       (.C(Clk),
        .CE(\saved_load_get[0]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [97]),
        .Q(\saved_load_get_reg_n_0_[7] ),
        .R(first_item_i_1_n_0));
  FDRE \saved_load_get_reg[8] 
       (.C(Clk),
        .CE(\saved_load_get[0]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [96]),
        .Q(\saved_load_get_reg_n_0_[8] ),
        .R(first_item_i_1_n_0));
  FDRE \saved_load_get_reg[9] 
       (.C(Clk),
        .CE(\saved_load_get[0]_i_1_n_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [95]),
        .Q(\saved_load_get_reg_n_0_[9] ),
        .R(first_item_i_1_n_0));
  FDRE \saved_pc_reg[0] 
       (.C(Clk),
        .CE(\saved_pc_reg[31]_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [146]),
        .Q(\saved_pc_reg_n_0_[0] ),
        .R(first_item_i_1_n_0));
  FDRE \saved_pc_reg[10] 
       (.C(Clk),
        .CE(\saved_pc_reg[31]_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [136]),
        .Q(\saved_pc_reg_n_0_[10] ),
        .R(first_item_i_1_n_0));
  FDRE \saved_pc_reg[11] 
       (.C(Clk),
        .CE(\saved_pc_reg[31]_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [135]),
        .Q(\saved_pc_reg_n_0_[11] ),
        .R(first_item_i_1_n_0));
  FDRE \saved_pc_reg[12] 
       (.C(Clk),
        .CE(\saved_pc_reg[31]_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [134]),
        .Q(\saved_pc_reg_n_0_[12] ),
        .R(first_item_i_1_n_0));
  FDRE \saved_pc_reg[13] 
       (.C(Clk),
        .CE(\saved_pc_reg[31]_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [133]),
        .Q(\saved_pc_reg_n_0_[13] ),
        .R(first_item_i_1_n_0));
  FDRE \saved_pc_reg[14] 
       (.C(Clk),
        .CE(\saved_pc_reg[31]_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [132]),
        .Q(\saved_pc_reg_n_0_[14] ),
        .R(first_item_i_1_n_0));
  FDRE \saved_pc_reg[15] 
       (.C(Clk),
        .CE(\saved_pc_reg[31]_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [131]),
        .Q(data3),
        .R(first_item_i_1_n_0));
  FDRE \saved_pc_reg[16] 
       (.C(Clk),
        .CE(\saved_pc_reg[31]_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [130]),
        .Q(\saved_pc_reg_n_0_[16] ),
        .R(first_item_i_1_n_0));
  FDRE \saved_pc_reg[17] 
       (.C(Clk),
        .CE(\saved_pc_reg[31]_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [129]),
        .Q(\saved_pc_reg_n_0_[17] ),
        .R(first_item_i_1_n_0));
  FDRE \saved_pc_reg[18] 
       (.C(Clk),
        .CE(\saved_pc_reg[31]_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [128]),
        .Q(\saved_pc_reg_n_0_[18] ),
        .R(first_item_i_1_n_0));
  FDRE \saved_pc_reg[19] 
       (.C(Clk),
        .CE(\saved_pc_reg[31]_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [127]),
        .Q(\saved_pc_reg_n_0_[19] ),
        .R(first_item_i_1_n_0));
  FDRE \saved_pc_reg[1] 
       (.C(Clk),
        .CE(\saved_pc_reg[31]_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [145]),
        .Q(\saved_pc_reg_n_0_[1] ),
        .R(first_item_i_1_n_0));
  FDRE \saved_pc_reg[20] 
       (.C(Clk),
        .CE(\saved_pc_reg[31]_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [126]),
        .Q(\saved_pc_reg_n_0_[20] ),
        .R(first_item_i_1_n_0));
  FDRE \saved_pc_reg[21] 
       (.C(Clk),
        .CE(\saved_pc_reg[31]_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [125]),
        .Q(\saved_pc_reg_n_0_[21] ),
        .R(first_item_i_1_n_0));
  FDRE \saved_pc_reg[22] 
       (.C(Clk),
        .CE(\saved_pc_reg[31]_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [124]),
        .Q(\saved_pc_reg_n_0_[22] ),
        .R(first_item_i_1_n_0));
  FDRE \saved_pc_reg[23] 
       (.C(Clk),
        .CE(\saved_pc_reg[31]_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [123]),
        .Q(\saved_pc_reg_n_0_[23] ),
        .R(first_item_i_1_n_0));
  FDRE \saved_pc_reg[24] 
       (.C(Clk),
        .CE(\saved_pc_reg[31]_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [122]),
        .Q(\saved_pc_reg_n_0_[24] ),
        .R(first_item_i_1_n_0));
  FDRE \saved_pc_reg[25] 
       (.C(Clk),
        .CE(\saved_pc_reg[31]_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [121]),
        .Q(\saved_pc_reg_n_0_[25] ),
        .R(first_item_i_1_n_0));
  FDRE \saved_pc_reg[26] 
       (.C(Clk),
        .CE(\saved_pc_reg[31]_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [120]),
        .Q(\saved_pc_reg_n_0_[26] ),
        .R(first_item_i_1_n_0));
  FDRE \saved_pc_reg[27] 
       (.C(Clk),
        .CE(\saved_pc_reg[31]_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [119]),
        .Q(\saved_pc_reg_n_0_[27] ),
        .R(first_item_i_1_n_0));
  FDRE \saved_pc_reg[28] 
       (.C(Clk),
        .CE(\saved_pc_reg[31]_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [118]),
        .Q(\saved_pc_reg_n_0_[28] ),
        .R(first_item_i_1_n_0));
  FDRE \saved_pc_reg[29] 
       (.C(Clk),
        .CE(\saved_pc_reg[31]_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [117]),
        .Q(\saved_pc_reg_n_0_[29] ),
        .R(first_item_i_1_n_0));
  FDRE \saved_pc_reg[2] 
       (.C(Clk),
        .CE(\saved_pc_reg[31]_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [144]),
        .Q(\saved_pc_reg_n_0_[2] ),
        .R(first_item_i_1_n_0));
  FDRE \saved_pc_reg[30] 
       (.C(Clk),
        .CE(\saved_pc_reg[31]_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [116]),
        .Q(data4),
        .R(first_item_i_1_n_0));
  FDRE \saved_pc_reg[31] 
       (.C(Clk),
        .CE(\saved_pc_reg[31]_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [115]),
        .Q(\saved_pc_reg_n_0_[31] ),
        .R(first_item_i_1_n_0));
  FDRE \saved_pc_reg[3] 
       (.C(Clk),
        .CE(\saved_pc_reg[31]_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [143]),
        .Q(\saved_pc_reg_n_0_[3] ),
        .R(first_item_i_1_n_0));
  FDRE \saved_pc_reg[4] 
       (.C(Clk),
        .CE(\saved_pc_reg[31]_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [142]),
        .Q(\saved_pc_reg_n_0_[4] ),
        .R(first_item_i_1_n_0));
  FDRE \saved_pc_reg[5] 
       (.C(Clk),
        .CE(\saved_pc_reg[31]_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [141]),
        .Q(\saved_pc_reg_n_0_[5] ),
        .R(first_item_i_1_n_0));
  FDRE \saved_pc_reg[6] 
       (.C(Clk),
        .CE(\saved_pc_reg[31]_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [140]),
        .Q(\saved_pc_reg_n_0_[6] ),
        .R(first_item_i_1_n_0));
  FDRE \saved_pc_reg[7] 
       (.C(Clk),
        .CE(\saved_pc_reg[31]_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [139]),
        .Q(\saved_pc_reg_n_0_[7] ),
        .R(first_item_i_1_n_0));
  FDRE \saved_pc_reg[8] 
       (.C(Clk),
        .CE(\saved_pc_reg[31]_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [138]),
        .Q(\saved_pc_reg_n_0_[8] ),
        .R(first_item_i_1_n_0));
  FDRE \saved_pc_reg[9] 
       (.C(Clk),
        .CE(\saved_pc_reg[31]_0 ),
        .D(\Embedded_Trace.trace_din_all_reg[80]_0 [137]),
        .Q(\saved_pc_reg_n_0_[9] ),
        .R(first_item_i_1_n_0));
  FDRE \status_count_reg[0] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\Embedded_Trace.trace_count_reg__0 [0]),
        .Q(status_count[0]),
        .R(sync_reset));
  FDRE \status_count_reg[10] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\Embedded_Trace.trace_count_reg__0 [10]),
        .Q(status_count[10]),
        .R(sync_reset));
  FDRE \status_count_reg[11] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\Embedded_Trace.trace_count_reg__0 [11]),
        .Q(status_count[11]),
        .R(sync_reset));
  FDRE \status_count_reg[1] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\Embedded_Trace.trace_count_reg__0 [1]),
        .Q(status_count[1]),
        .R(sync_reset));
  FDRE \status_count_reg[2] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\Embedded_Trace.trace_count_reg__0 [2]),
        .Q(status_count[2]),
        .R(sync_reset));
  FDRE \status_count_reg[3] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\Embedded_Trace.trace_count_reg [3]),
        .Q(status_count[3]),
        .R(sync_reset));
  FDRE \status_count_reg[4] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\Embedded_Trace.trace_count_reg [4]),
        .Q(status_count[4]),
        .R(sync_reset));
  FDRE \status_count_reg[5] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\Embedded_Trace.trace_count_reg [5]),
        .Q(status_count[5]),
        .R(sync_reset));
  FDRE \status_count_reg[6] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\Embedded_Trace.trace_count_reg__0 [6]),
        .Q(status_count[6]),
        .R(sync_reset));
  FDRE \status_count_reg[7] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\Embedded_Trace.trace_count_reg__0 [7]),
        .Q(status_count[7]),
        .R(sync_reset));
  FDRE \status_count_reg[8] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\Embedded_Trace.trace_count_reg__0 [8]),
        .Q(status_count[8]),
        .R(sync_reset));
  FDRE \status_count_reg[9] 
       (.C(Clk),
        .CE(sample_cmd),
        .D(\Embedded_Trace.trace_count_reg__0 [9]),
        .Q(status_count[9]),
        .R(sync_reset));
  LUT5 #(
    .INIT(32'h00044444)) 
    trig_in_0_pulse_i_1
       (.I0(mb_halted_1),
        .I1(trig_in_0_pulse_reg),
        .I2(cc_overflow_reg_0),
        .I3(halt_i),
        .I4(fullhalt_ctrl),
        .O(trig_in_0_pulse));
  LUT6 #(
    .INIT(64'h8888888808000808)) 
    \writems[0]_i_1 
       (.I0(\Serial_Dbg_Intf.stopped_i_reg_1 ),
        .I1(\writems[0]_i_2_n_0 ),
        .I2(\writems[0]_i_3_n_0 ),
        .I3(\writems[0]_i_4_n_0 ),
        .I4(branch_data_first),
        .I5(\writems[0]_i_5_n_0 ),
        .O(\writems[0]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h07)) 
    \writems[0]_i_2 
       (.I0(\writems[1]_i_2_n_0 ),
        .I1(\saved_load_get[0]_i_1_n_0 ),
        .I2(\writems[2]_i_3_n_0 ),
        .O(\writems[0]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'h01)) 
    \writems[0]_i_3 
       (.I0(save_event_cc_reg_n_0),
        .I1(\writems[0]_i_6_n_0 ),
        .I2(\writems[0]_i_7_n_0 ),
        .O(\writems[0]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \writems[0]_i_4 
       (.I0(\writems[1]_i_2_n_0 ),
        .I1(\saved_load_get[0]_i_1_n_0 ),
        .O(\writems[0]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h0000000080008080)) 
    \writems[0]_i_5 
       (.I0(cc_clear_i_4_n_0),
        .I1(save_pc_next),
        .I2(cc_clear_i_3_n_0),
        .I3(branch_count[2]),
        .I4(branch_count[3]),
        .I5(\branch_count[3]_i_2_n_0 ),
        .O(\writems[0]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hFFF40000FFF4FFF4)) 
    \writems[0]_i_6 
       (.I0(\branch_count_reg[3]_0 ),
        .I1(\Serial_Dbg_Intf.control_reg_reg[21]_0 ),
        .I2(\Serial_Dbg_Intf.control_reg_reg[16]_1 ),
        .I3(save_event_next_reg_0),
        .I4(save_event_next_reg_n_0),
        .I5(\branch_data[4]_i_3_n_0 ),
        .O(\writems[0]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h00000000F0F200F2)) 
    \writems[0]_i_7 
       (.I0(\branch_count_reg[3]_0 ),
        .I1(\branch_count[0]_i_5_n_0 ),
        .I2(cc_clear_i_4_n_0),
        .I3(\writems[0]_i_8_n_0 ),
        .I4(\writems[0]_i_9_n_0 ),
        .I5(\Serial_Dbg_Intf.trig_in_1_pulse_reg ),
        .O(\writems[0]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h0101F3010001F301)) 
    \writems[0]_i_8 
       (.I0(\writems[0]_i_7_0 ),
        .I1(\event_data[10]_i_2_n_0 ),
        .I2(\branch_count[0]_i_4_n_0 ),
        .I3(\branch_data[4]_i_3_n_0 ),
        .I4(save_event_next_reg_n_0),
        .I5(\event_data_reg[7]_0 ),
        .O(\writems[0]_i_8_n_0 ));
  LUT6 #(
    .INIT(64'h11C111C10000F000)) 
    \writems[0]_i_9 
       (.I0(save_pc_next),
        .I1(\branch_count[3]_i_2_n_0 ),
        .I2(branch_count[3]),
        .I3(branch_count[2]),
        .I4(\branch_data[12]_i_4_n_0 ),
        .I5(cc_clear_i_3_n_0),
        .O(\writems[0]_i_9_n_0 ));
  LUT5 #(
    .INIT(32'h07000600)) 
    \writems[1]_i_1 
       (.I0(\writems[1]_i_2_n_0 ),
        .I1(\saved_load_get[0]_i_1_n_0 ),
        .I2(\writems[2]_i_3_n_0 ),
        .I3(\Serial_Dbg_Intf.stopped_i_reg_1 ),
        .I4(branch_data_first),
        .O(\writems[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBBB0B0B0000F0F0F)) 
    \writems[1]_i_2 
       (.I0(savepc_ctrl),
        .I1(event_trace),
        .I2(\save_sel_reg[0][2]_0 ),
        .I3(\save_sel_reg[0][2]_1 ),
        .I4(\saved_load_get_reg[31]_0 ),
        .I5(\writems[2]_i_4_n_0 ),
        .O(\writems[1]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h1110)) 
    \writems[1]_i_3 
       (.I0(\Serial_Dbg_Intf.stopped_i_reg_0 ),
        .I1(sync_reset),
        .I2(\Serial_Dbg_Intf.control_reg_reg[16]_0 [2]),
        .I3(\Serial_Dbg_Intf.control_reg_reg[16]_0 [1]),
        .O(\Serial_Dbg_Intf.stopped_i_reg_1 ));
  LUT6 #(
    .INIT(64'h000000000000EEE0)) 
    \writems[2]_i_1 
       (.I0(\writems[2]_i_2_n_0 ),
        .I1(\writems[2]_i_3_n_0 ),
        .I2(\Serial_Dbg_Intf.control_reg_reg[16]_0 [1]),
        .I3(\Serial_Dbg_Intf.control_reg_reg[16]_0 [2]),
        .I4(sync_reset),
        .I5(\Serial_Dbg_Intf.stopped_i_reg_0 ),
        .O(\writems[2]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \writems[2]_i_2 
       (.I0(\writems[1]_i_2_n_0 ),
        .I1(\saved_load_get[0]_i_1_n_0 ),
        .O(\writems[2]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair93" *) 
  LUT5 #(
    .INIT(32'h00005545)) 
    \writems[2]_i_3 
       (.I0(\writems[2]_i_4_n_0 ),
        .I1(\Serial_Dbg_Intf.control_reg_reg[16]_0 [1]),
        .I2(\Serial_Dbg_Intf.control_reg_reg[16]_0 [2]),
        .I3(savepc_ctrl),
        .I4(\writems_reg[1]_0 ),
        .O(\writems[2]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAAAA3333F0FFFFFF)) 
    \writems[2]_i_4 
       (.I0(first_item),
        .I1(\Embedded_Trace.trace_din_all_reg[80]_0 [147]),
        .I2(\writems[2]_i_6_n_0 ),
        .I3(last_item_reg_0),
        .I4(trig_in_0_pulse_reg),
        .I5(save_pc_next),
        .O(\writems[2]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair93" *) 
  LUT3 #(
    .INIT(8'h04)) 
    \writems[2]_i_6 
       (.I0(\Serial_Dbg_Intf.control_reg_reg[16]_0 [1]),
        .I1(\Serial_Dbg_Intf.control_reg_reg[16]_0 [2]),
        .I2(savepc_ctrl),
        .O(\writems[2]_i_6_n_0 ));
  LUT4 #(
    .INIT(16'h0001)) 
    \writems[3]_i_1 
       (.I0(\Serial_Dbg_Intf.control_reg_reg[16]_0 [2]),
        .I1(\Serial_Dbg_Intf.control_reg_reg[16]_0 [1]),
        .I2(\Serial_Dbg_Intf.stopped_i_reg_0 ),
        .I3(sync_reset),
        .O(\writems[3]_i_1_n_0 ));
  FDRE \writems_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\writems[0]_i_1_n_0 ),
        .Q(writems[0]),
        .R(1'b0));
  FDRE \writems_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\writems[1]_i_1_n_0 ),
        .Q(writems[1]),
        .R(1'b0));
  FDRE \writems_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(\writems[2]_i_1_n_0 ),
        .Q(writems[2]),
        .R(1'b0));
  FDRE \writems_reg[3] 
       (.C(Clk),
        .CE(1'b1),
        .D(\writems[3]_i_1_n_0 ),
        .Q(writems[3]),
        .R(1'b0));
endmodule

module block_design_microblaze_0_0_Decode
   (IReady,
    Buffer_Addr,
    reg1_Addr,
    imm_Value,
    jump,
    D,
    of_PipeRun,
    Q,
    ex_Valid,
    res_Forward1,
    res_Forward2,
    alu_Op,
    carry_In,
    reg_Test_Equal,
    reg_Test_Equal_N,
    opsel1_SPR,
    FSL_Will_Break0,
    branch_with_delay,
    Pause_Ack,
    compare_Instr,
    Unsigned_Op,
    Select_Logic,
    clz_instr,
    ex_not_mul_op,
    ex_mulhu_instr,
    BitField_Insert,
    BitField_Extract,
    MSRclr_Instr,
    has_inhibit_EX,
    dbg_clean_stop,
    Valid_Instr_i,
    FSL_Put_Control,
    Not_MB_Get_Op,
    \instr_EX_i_reg[22]_0 ,
    \instr_EX_i_reg[21]_0 ,
    \instr_EX_i_reg[25]_0 ,
    \instr_EX_i_reg[26]_0 ,
    Logic_Oper,
    \instr_EX_i_reg[27]_0 ,
    \instr_EX_i_reg[24]_0 ,
    \instr_EX_i_reg[23]_0 ,
    exception_kind,
    Hibernate,
    Sleep_Decode,
    Suspend,
    isbyte,
    isdoublet,
    use_Imm_Reg,
    sext8,
    sext16,
    Not_Barrel_Op,
    mtsmsr_write_i_reg_0,
    DI,
    reg_Write_I,
    reg_Write_dbg,
    MTSMSR_Write,
    write_Carry,
    LOCKSTEP_Master_Out,
    \Using_FSL_Links.fsl_block_instr_reg_0 ,
    PC_Write,
    \Using_FPGA.Native ,
    set_FSL_Error,
    E,
    ok_To_Stop,
    dbg_brki_hit0,
    \Serial_Dbg_Intf.control_reg_reg[8] ,
    dbg_pause_reg,
    opsel1_PC,
    Sleep,
    \Using_Barrel_Shifter.BitField_Extract_reg_0 ,
    M1_AXIS_TREADY_0,
    M0_AXIS_TREADY_0,
    \Using_FPGA.Native_0 ,
    is_swx_I_reg_0,
    \Serial_Dbg_Intf.force_stop_cmd_i_reg ,
    \instr_EX_i_reg[0]_0 ,
    OF_PipeRun,
    \trace_instruction_i_reg[3] ,
    valid_instr,
    \stat_select_reg[0][2] ,
    \stat_select_reg[5][2] ,
    \stat_select_reg[4][2] ,
    \stat_select_reg[3][2] ,
    \stat_select_reg[2][2] ,
    stat_stop,
    \stat_select_reg[1][2] ,
    \trace_instruction_i_reg[5] ,
    \stat_select_reg[0][2]_0 ,
    \stat_select_reg[5][2]_0 ,
    \stat_select_reg[4][2]_0 ,
    \stat_select_reg[3][2]_0 ,
    \stat_select_reg[2][2]_0 ,
    \stat_select_reg[1][2]_0 ,
    \stat_select_reg[0][2]_1 ,
    \stat_select_reg[5][2]_1 ,
    \stat_select_reg[4][2]_1 ,
    \stat_select_reg[3][2]_1 ,
    \stat_select_reg[2][2]_1 ,
    \stat_select_reg[1][2]_1 ,
    stat5_out,
    stat2_out,
    \Serial_Dbg_Intf.control_reg_reg[21] ,
    \Area_Debug_Control.mb_halted_i_reg ,
    \trace_instruction_i_reg[9] ,
    trace_data_read_i_reg,
    trace_exception_taken_i_reg,
    trace_data_read_i_reg_0,
    trace_exception_taken_i_reg_0,
    save_pc_next_next_reg,
    trace_exception_taken_i_reg_1,
    trace_exception_taken_i_reg_2,
    \Area_Debug_Control.mb_halted_i_reg_0 ,
    jump2_I_1_reg_0,
    D_0,
    D_1,
    D_2,
    D_3,
    D_4,
    D_5,
    D_6,
    D_7,
    D_8,
    D_9,
    D_10,
    D_11,
    D_12,
    D_13,
    D_14,
    D_15,
    D_16,
    D_17,
    D_18,
    D_19,
    D_20,
    D_21,
    D_22,
    D_23,
    D_24,
    D_25,
    D_26,
    D_27,
    D_28,
    D_29,
    D_30,
    D_31,
    I3,
    I3_32,
    I3_33,
    I3_34,
    Data_Read_Mask,
    \Using_FPGA.Native_1 ,
    \Use_The_PCMP_instr.PCMP_Instr_reg_0 ,
    I3_35,
    \Use_The_PCMP_instr.CLZ_Instr_reg_0 ,
    Enable_2,
    PCMP_Instr2_out,
    \Use_The_PCMP_instr.CLZ_Instr_reg_1 ,
    in0,
    mem_mulh_instr0,
    Reg_Write,
    Shifted,
    void_bit,
    \Using_Mul64.ex_mulhu_instr_i_reg_0 ,
    mtsmsr_write_i_reg_1,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    Shift_Carry_In_reg_0,
    Op1_Shift,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    MSR_Rst,
    \Use_Async_Reset.sync_reset_reg ,
    \Using_FPGA.Native_6 ,
    \Using_FPGA.Native_7 ,
    \Using_FPGA.Native_8 ,
    \Use_The_PCMP_instr.PCMP_Instr_reg_1 ,
    \Using_FPGA.Native_9 ,
    \Use_The_PCMP_instr.PCMP_Instr_reg_2 ,
    \Using_FPGA.Native_10 ,
    \Use_The_PCMP_instr.PCMP_Instr_reg_3 ,
    \Using_FPGA.Native_11 ,
    \Use_The_PCMP_instr.PCMP_Instr_reg_4 ,
    Interrupt_Ack,
    Shift_Oper,
    Result_Sel,
    Y,
    Clk,
    Instr_Data,
    DReady0_out,
    IReady1_out,
    iFetch_In_Progress_reg_0,
    using_Imm_reg_0,
    dbg_pause,
    sync_reset,
    Op1,
    LO,
    Reg1,
    ex_Valid_reg_0,
    reg_zero,
    \Using_dynamic_instr_Address.old_IE_value_reg_0 ,
    \Using_FSL_Links.Using_Extended_FSL.FSL_Will_Break_No_Dbg_reg_0 ,
    \LOCKSTEP_Out_reg[3] ,
    DReady,
    MEM_DAXI_Data_Strobe,
    break_Pipe_i_reg_0,
    force_stop_cmd_i,
    force_stop_cmd_hold,
    \LOCKSTEP_Out_reg[3]_0 ,
    B,
    \Read_AXI_Area.S_AXIS_TREADY_reg[0] ,
    \Using_FPGA.Native_12 ,
    \Gen_M_Channel_Handling[1].M_AXIS_TLAST_reg[1] ,
    fsl_carry_hold_value,
    \Using_FSL_Links.Using_Extended_FSL.FSL_Will_Break_reg_0 ,
    dbg_brki_hit,
    Interrupt,
    \Using_dynamic_instr_Address.Interrupt_Ack_reg[1]_0 ,
    trace_reg_write_novalid,
    Wakeup,
    out,
    \Area_Debug_Control.dbg_brki_hit_i_2 ,
    Sleep_Out,
    M1_AXIS_TREADY,
    \Gen_M_Channel_Handling[0].m_axis_tvalid_i_reg[0] ,
    M0_AXIS_TREADY,
    missed_IFetch_reg_0,
    missed_IFetch_reg_1,
    mem_access,
    fsl_carry_hold,
    delay_slot_instr_reg,
    \all_statistics_counters[0].request_i_15_0 ,
    \saved_load_get_reg[31] ,
    p_1_in15_in,
    \all_statistics_counters[0].request_i_15_1 ,
    \saved_load_get_reg[31]_0 ,
    \saved_load_get_reg[31]_1 ,
    \all_statistics_counters[0].request_i_4 ,
    \all_statistics_counters[5].request_i_4 ,
    \all_statistics_counters[4].request_i_4 ,
    \all_statistics_counters[3].request_i_4 ,
    \all_statistics_counters[2].request_i_4 ,
    inside_handler_reg,
    inside_handler_reg_0,
    inside_handler_reg_1,
    inside_handler_reg_2,
    inside_handler_i_2_0,
    \all_statistics_counters[1].request_i_4 ,
    \all_statistics_counters[0].request_i_5_0 ,
    \all_statistics_counters[0].request_i_11_0 ,
    \all_statistics_counters[0].request_i_6 ,
    \all_statistics_counters[0].request_i_5_1 ,
    \all_statistics_counters[0].request_i_5_2 ,
    \all_statistics_counters[0].request_i_15_2 ,
    \all_statistics_counters[0].request_i_15_3 ,
    stat212_in,
    uncond_ds_branch,
    cond_ds_branch,
    \all_statistics_counters[0].request_i_11_1 ,
    in_delay_slot,
    \all_statistics_counters[0].request_i_12 ,
    stat2,
    stat130_out,
    \saved_load_get_reg[31]_2 ,
    \all_statistics_counters[0].request_i_17_0 ,
    \all_statistics_counters[0].request_i_17_1 ,
    \saved_pc_reg[31] ,
    in_delay_slot_reg,
    \branch_count_reg[3] ,
    \writems[1]_i_2 ,
    \writems[1]_i_2_0 ,
    \writems[1]_i_2_1 ,
    save_pc_next_next_reg_0,
    save_pc_next_next_reg_1,
    \saved_load_get_reg[31]_3 ,
    \saved_load_get[0]_i_2_0 ,
    \writems[0]_i_8 ,
    save_event_next_reg,
    \Using_FPGA.Native_13 ,
    op2_Reg__15,
    op2_Reg__16,
    op2_Reg__17,
    op2_Reg__18,
    op2_Reg__19,
    op2_Reg__20,
    op2_Reg__21,
    op2_Reg__22,
    op2_Reg__23,
    op2_Reg__24,
    op2_Reg__25,
    op2_Reg__26,
    op2_Reg__27,
    op2_Reg__28,
    op2_Reg__29,
    op2_Reg__30,
    op2_Reg,
    op2_Reg__0,
    op2_Reg__1,
    op2_Reg__2,
    op2_Reg__3,
    op2_Reg__4,
    op2_Reg__5,
    op2_Reg__6,
    op2_Reg__7,
    op2_Reg__8,
    op2_Reg__9,
    op2_Reg__10,
    op2_Reg__11,
    op2_Reg__12,
    op2_Reg__13,
    op2_Reg__14,
    PC_OF,
    \Using_FPGA.Native_14 ,
    \Using_FPGA.Native_15 ,
    Shift_Logic_Res,
    \Using_FPGA.Native_16 ,
    \void_bit16_reg[0] ,
    \Using_FPGA.DSP48E1_I1 ,
    \Using_FPGA.Native_17 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7);
  output IReady;
  output [2:0]Buffer_Addr;
  output [0:4]reg1_Addr;
  output [0:15]imm_Value;
  output jump;
  output [6:0]D;
  output of_PipeRun;
  output [4:0]Q;
  output ex_Valid;
  output res_Forward1;
  output res_Forward2;
  output [0:1]alu_Op;
  output carry_In;
  output reg_Test_Equal;
  output reg_Test_Equal_N;
  output opsel1_SPR;
  output FSL_Will_Break0;
  output branch_with_delay;
  output Pause_Ack;
  output compare_Instr;
  output Unsigned_Op;
  output Select_Logic;
  output clz_instr;
  output ex_not_mul_op;
  output ex_mulhu_instr;
  output BitField_Insert;
  output BitField_Extract;
  output MSRclr_Instr;
  output has_inhibit_EX;
  output dbg_clean_stop;
  output Valid_Instr_i;
  output FSL_Put_Control;
  output Not_MB_Get_Op;
  output \instr_EX_i_reg[22]_0 ;
  output \instr_EX_i_reg[21]_0 ;
  output \instr_EX_i_reg[25]_0 ;
  output \instr_EX_i_reg[26]_0 ;
  output [0:1]Logic_Oper;
  output \instr_EX_i_reg[27]_0 ;
  output \instr_EX_i_reg[24]_0 ;
  output \instr_EX_i_reg[23]_0 ;
  output [0:0]exception_kind;
  output Hibernate;
  output Sleep_Decode;
  output Suspend;
  output isbyte;
  output isdoublet;
  output use_Imm_Reg;
  output sext8;
  output sext16;
  output Not_Barrel_Op;
  output mtsmsr_write_i_reg_0;
  output DI;
  output reg_Write_I;
  output reg_Write_dbg;
  output MTSMSR_Write;
  output write_Carry;
  output [0:0]LOCKSTEP_Master_Out;
  output [1:0]\Using_FSL_Links.fsl_block_instr_reg_0 ;
  output PC_Write;
  output [1:0]\Using_FPGA.Native ;
  output set_FSL_Error;
  output [0:0]E;
  output ok_To_Stop;
  output dbg_brki_hit0;
  output \Serial_Dbg_Intf.control_reg_reg[8] ;
  output [0:0]dbg_pause_reg;
  output opsel1_PC;
  output Sleep;
  output \Using_Barrel_Shifter.BitField_Extract_reg_0 ;
  output M1_AXIS_TREADY_0;
  output M0_AXIS_TREADY_0;
  output [0:0]\Using_FPGA.Native_0 ;
  output is_swx_I_reg_0;
  output \Serial_Dbg_Intf.force_stop_cmd_i_reg ;
  output [22:0]\instr_EX_i_reg[0]_0 ;
  output OF_PipeRun;
  output \trace_instruction_i_reg[3] ;
  output valid_instr;
  output \stat_select_reg[0][2] ;
  output \stat_select_reg[5][2] ;
  output \stat_select_reg[4][2] ;
  output \stat_select_reg[3][2] ;
  output \stat_select_reg[2][2] ;
  output [0:0]stat_stop;
  output \stat_select_reg[1][2] ;
  output \trace_instruction_i_reg[5] ;
  output \stat_select_reg[0][2]_0 ;
  output \stat_select_reg[5][2]_0 ;
  output \stat_select_reg[4][2]_0 ;
  output \stat_select_reg[3][2]_0 ;
  output \stat_select_reg[2][2]_0 ;
  output \stat_select_reg[1][2]_0 ;
  output \stat_select_reg[0][2]_1 ;
  output \stat_select_reg[5][2]_1 ;
  output \stat_select_reg[4][2]_1 ;
  output \stat_select_reg[3][2]_1 ;
  output \stat_select_reg[2][2]_1 ;
  output \stat_select_reg[1][2]_1 ;
  output stat5_out;
  output stat2_out;
  output \Serial_Dbg_Intf.control_reg_reg[21] ;
  output \Area_Debug_Control.mb_halted_i_reg ;
  output \trace_instruction_i_reg[9] ;
  output trace_data_read_i_reg;
  output trace_exception_taken_i_reg;
  output trace_data_read_i_reg_0;
  output trace_exception_taken_i_reg_0;
  output save_pc_next_next_reg;
  output trace_exception_taken_i_reg_1;
  output trace_exception_taken_i_reg_2;
  output [0:0]\Area_Debug_Control.mb_halted_i_reg_0 ;
  output jump2_I_1_reg_0;
  output D_0;
  output D_1;
  output D_2;
  output D_3;
  output D_4;
  output D_5;
  output D_6;
  output D_7;
  output D_8;
  output D_9;
  output D_10;
  output D_11;
  output D_12;
  output D_13;
  output D_14;
  output D_15;
  output D_16;
  output D_17;
  output D_18;
  output D_19;
  output D_20;
  output D_21;
  output D_22;
  output D_23;
  output D_24;
  output D_25;
  output D_26;
  output D_27;
  output D_28;
  output D_29;
  output D_30;
  output D_31;
  output I3;
  output I3_32;
  output I3_33;
  output I3_34;
  output Data_Read_Mask;
  output \Using_FPGA.Native_1 ;
  output \Use_The_PCMP_instr.PCMP_Instr_reg_0 ;
  output I3_35;
  output [1:0]\Use_The_PCMP_instr.CLZ_Instr_reg_0 ;
  output Enable_2;
  output PCMP_Instr2_out;
  output \Use_The_PCMP_instr.CLZ_Instr_reg_1 ;
  output in0;
  output mem_mulh_instr0;
  output Reg_Write;
  output Shifted;
  output void_bit;
  output [0:0]\Using_Mul64.ex_mulhu_instr_i_reg_0 ;
  output mtsmsr_write_i_reg_1;
  output \Using_FPGA.Native_2 ;
  output \Using_FPGA.Native_3 ;
  output Shift_Carry_In_reg_0;
  output Op1_Shift;
  output \Using_FPGA.Native_4 ;
  output \Using_FPGA.Native_5 ;
  output MSR_Rst;
  output \Use_Async_Reset.sync_reset_reg ;
  output \Using_FPGA.Native_6 ;
  output \Using_FPGA.Native_7 ;
  output \Using_FPGA.Native_8 ;
  output \Use_The_PCMP_instr.PCMP_Instr_reg_1 ;
  output \Using_FPGA.Native_9 ;
  output \Use_The_PCMP_instr.PCMP_Instr_reg_2 ;
  output \Using_FPGA.Native_10 ;
  output \Use_The_PCMP_instr.PCMP_Instr_reg_3 ;
  output \Using_FPGA.Native_11 ;
  output \Use_The_PCMP_instr.PCMP_Instr_reg_4 ;
  output [0:1]Interrupt_Ack;
  output Shift_Oper;
  output [0:1]Result_Sel;
  input [0:31]Y;
  input Clk;
  input [0:0]Instr_Data;
  input DReady0_out;
  input IReady1_out;
  input iFetch_In_Progress_reg_0;
  input using_Imm_reg_0;
  input dbg_pause;
  input sync_reset;
  input [0:0]Op1;
  input LO;
  input [0:0]Reg1;
  input ex_Valid_reg_0;
  input reg_zero;
  input \Using_dynamic_instr_Address.old_IE_value_reg_0 ;
  input \Using_FSL_Links.Using_Extended_FSL.FSL_Will_Break_No_Dbg_reg_0 ;
  input \LOCKSTEP_Out_reg[3] ;
  input DReady;
  input MEM_DAXI_Data_Strobe;
  input [2:0]break_Pipe_i_reg_0;
  input force_stop_cmd_i;
  input force_stop_cmd_hold;
  input \LOCKSTEP_Out_reg[3]_0 ;
  input [4:0]B;
  input \Read_AXI_Area.S_AXIS_TREADY_reg[0] ;
  input \Using_FPGA.Native_12 ;
  input \Gen_M_Channel_Handling[1].M_AXIS_TLAST_reg[1] ;
  input fsl_carry_hold_value;
  input \Using_FSL_Links.Using_Extended_FSL.FSL_Will_Break_reg_0 ;
  input dbg_brki_hit;
  input Interrupt;
  input \Using_dynamic_instr_Address.Interrupt_Ack_reg[1]_0 ;
  input trace_reg_write_novalid;
  input [0:0]Wakeup;
  input [0:0]out;
  input [0:0]\Area_Debug_Control.dbg_brki_hit_i_2 ;
  input Sleep_Out;
  input M1_AXIS_TREADY;
  input [1:0]\Gen_M_Channel_Handling[0].m_axis_tvalid_i_reg[0] ;
  input M0_AXIS_TREADY;
  input missed_IFetch_reg_0;
  input missed_IFetch_reg_1;
  input mem_access;
  input fsl_carry_hold;
  input delay_slot_instr_reg;
  input \all_statistics_counters[0].request_i_15_0 ;
  input \saved_load_get_reg[31] ;
  input p_1_in15_in;
  input \all_statistics_counters[0].request_i_15_1 ;
  input \saved_load_get_reg[31]_0 ;
  input \saved_load_get_reg[31]_1 ;
  input [2:0]\all_statistics_counters[0].request_i_4 ;
  input [2:0]\all_statistics_counters[5].request_i_4 ;
  input [2:0]\all_statistics_counters[4].request_i_4 ;
  input [2:0]\all_statistics_counters[3].request_i_4 ;
  input [2:0]\all_statistics_counters[2].request_i_4 ;
  input [3:0]inside_handler_reg;
  input inside_handler_reg_0;
  input inside_handler_reg_1;
  input inside_handler_reg_2;
  input inside_handler_i_2_0;
  input [2:0]\all_statistics_counters[1].request_i_4 ;
  input \all_statistics_counters[0].request_i_5_0 ;
  input \all_statistics_counters[0].request_i_11_0 ;
  input \all_statistics_counters[0].request_i_6 ;
  input \all_statistics_counters[0].request_i_5_1 ;
  input \all_statistics_counters[0].request_i_5_2 ;
  input \all_statistics_counters[0].request_i_15_2 ;
  input \all_statistics_counters[0].request_i_15_3 ;
  input stat212_in;
  input uncond_ds_branch;
  input cond_ds_branch;
  input \all_statistics_counters[0].request_i_11_1 ;
  input in_delay_slot;
  input \all_statistics_counters[0].request_i_12 ;
  input stat2;
  input stat130_out;
  input \saved_load_get_reg[31]_2 ;
  input [3:0]\all_statistics_counters[0].request_i_17_0 ;
  input \all_statistics_counters[0].request_i_17_1 ;
  input \saved_pc_reg[31] ;
  input in_delay_slot_reg;
  input \branch_count_reg[3] ;
  input \writems[1]_i_2 ;
  input \writems[1]_i_2_0 ;
  input \writems[1]_i_2_1 ;
  input save_pc_next_next_reg_0;
  input save_pc_next_next_reg_1;
  input \saved_load_get_reg[31]_3 ;
  input [0:0]\saved_load_get[0]_i_2_0 ;
  input \writems[0]_i_8 ;
  input save_event_next_reg;
  input [15:0]\Using_FPGA.Native_13 ;
  input op2_Reg__15;
  input op2_Reg__16;
  input op2_Reg__17;
  input op2_Reg__18;
  input op2_Reg__19;
  input op2_Reg__20;
  input op2_Reg__21;
  input op2_Reg__22;
  input op2_Reg__23;
  input op2_Reg__24;
  input op2_Reg__25;
  input op2_Reg__26;
  input op2_Reg__27;
  input op2_Reg__28;
  input op2_Reg__29;
  input op2_Reg__30;
  input op2_Reg;
  input op2_Reg__0;
  input op2_Reg__1;
  input op2_Reg__2;
  input op2_Reg__3;
  input op2_Reg__4;
  input op2_Reg__5;
  input op2_Reg__6;
  input op2_Reg__7;
  input op2_Reg__8;
  input op2_Reg__9;
  input op2_Reg__10;
  input op2_Reg__11;
  input op2_Reg__12;
  input op2_Reg__13;
  input op2_Reg__14;
  input [3:0]PC_OF;
  input \Using_FPGA.Native_14 ;
  input \Using_FPGA.Native_15 ;
  input Shift_Logic_Res;
  input \Using_FPGA.Native_16 ;
  input \void_bit16_reg[0] ;
  input [0:0]\Using_FPGA.DSP48E1_I1 ;
  input \Using_FPGA.Native_17 ;
  input lopt;
  output lopt_1;
  input lopt_2;
  output lopt_3;
  output lopt_4;
  input lopt_5;
  output lopt_6;
  output lopt_7;

  wire [0:0]\Area_Debug_Control.dbg_brki_hit_i_2 ;
  wire \Area_Debug_Control.mb_halted_i_reg ;
  wire [0:0]\Area_Debug_Control.mb_halted_i_reg_0 ;
  wire [4:0]B;
  wire BitField_Extract;
  wire BitField_Extract0;
  wire BitField_Insert;
  wire BitField_Insert0;
  wire Blocked_Valid_Instr;
  wire Blocked_Valid_Instr0;
  wire [2:0]Buffer_Addr;
  wire CLZ_Instr0;
  wire Clk;
  wire [6:0]D;
  wire DI;
  wire DReady;
  wire DReady0_out;
  wire D_0;
  wire D_1;
  wire D_10;
  wire D_11;
  wire D_12;
  wire D_13;
  wire D_14;
  wire D_15;
  wire D_16;
  wire D_17;
  wire D_18;
  wire D_19;
  wire D_2;
  wire D_20;
  wire D_21;
  wire D_22;
  wire D_23;
  wire D_24;
  wire D_25;
  wire D_26;
  wire D_27;
  wire D_28;
  wire D_29;
  wire D_3;
  wire D_30;
  wire D_31;
  wire D_32;
  wire D_4;
  wire D_5;
  wire D_6;
  wire D_7;
  wire D_8;
  wire D_9;
  wire Data_Read_Mask;
  wire Dbg_Clean_Stop_i_1_n_0;
  wire [0:0]E;
  wire EX_FSL_Carry;
  wire EX_delayslot_Instr_I_reg_n_0;
  wire Enable_2;
  wire FSL_Atomic;
  wire FSL_Break;
  wire FSL_Break_No_Dbg;
  wire FSL_Put_Blocking;
  wire FSL_Put_Control;
  wire FSL_Put_Inhibit;
  wire FSL_Put_Test;
  wire FSL_Will_Break0;
  wire FSL_Will_Break_No_Dbg;
  wire \Gen_M_Channel_Handling[0].M_AXIS_TLAST[0]_i_2_n_0 ;
  wire [1:0]\Gen_M_Channel_Handling[0].m_axis_tvalid_i_reg[0] ;
  wire \Gen_M_Channel_Handling[1].M_AXIS_TLAST_reg[1] ;
  wire Hibernate;
  wire I2118_out;
  wire I3;
  wire I3_32;
  wire I3_33;
  wire I3_34;
  wire I3_35;
  wire IReady;
  wire IReady1_out;
  wire [7:7]\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat0 ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat047_out ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat049_out ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat051_out ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat053_out ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat055_out ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat11_out ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat15_out ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat18_out ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat24_out ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat26_out ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat28_out ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat30_out ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat32_out ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat34_out ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat7_out ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat9_out ;
  wire [0:0]Instr_Data;
  wire Interrupt;
  wire [0:1]Interrupt_Ack;
  wire LO;
  wire [0:0]LOCKSTEP_Master_Out;
  wire \LOCKSTEP_Master_Out[0]_INST_0_i_2_n_0 ;
  wire \LOCKSTEP_Out_reg[3] ;
  wire \LOCKSTEP_Out_reg[3]_0 ;
  wire LWX_SWX_Carry;
  wire [0:1]Logic_Oper;
  wire M0_AXIS_TREADY;
  wire M0_AXIS_TREADY_0;
  wire M1_AXIS_TREADY;
  wire M1_AXIS_TREADY_0;
  wire MEM_DAXI_Data_Strobe;
  wire MSR_Rst;
  wire MSRclr_Instr;
  wire MSRclr_Instr_i;
  wire MSRclr_Instr_i0_in;
  wire MSRxxx_Instr_i;
  wire MTSMSR_Write;
  wire Not_Barrel_Op;
  wire Not_MB_Get_Op;
  wire Not_MB_Get_Op0;
  wire OF_PipeRun;
  wire [0:0]Op1;
  wire Op1_Shift;
  wire PCMP_Instr2_out;
  wire [3:0]PC_OF;
  wire PC_Write;
  wire Pause_Ack;
  wire Pause_Ack0;
  wire PreFetch_Buffer_I_n_100;
  wire PreFetch_Buffer_I_n_102;
  wire PreFetch_Buffer_I_n_103;
  wire PreFetch_Buffer_I_n_104;
  wire PreFetch_Buffer_I_n_105;
  wire PreFetch_Buffer_I_n_106;
  wire PreFetch_Buffer_I_n_107;
  wire PreFetch_Buffer_I_n_108;
  wire PreFetch_Buffer_I_n_109;
  wire PreFetch_Buffer_I_n_110;
  wire PreFetch_Buffer_I_n_111;
  wire PreFetch_Buffer_I_n_112;
  wire PreFetch_Buffer_I_n_37;
  wire PreFetch_Buffer_I_n_38;
  wire PreFetch_Buffer_I_n_39;
  wire PreFetch_Buffer_I_n_40;
  wire PreFetch_Buffer_I_n_41;
  wire PreFetch_Buffer_I_n_42;
  wire PreFetch_Buffer_I_n_49;
  wire PreFetch_Buffer_I_n_50;
  wire PreFetch_Buffer_I_n_52;
  wire PreFetch_Buffer_I_n_54;
  wire PreFetch_Buffer_I_n_55;
  wire PreFetch_Buffer_I_n_56;
  wire PreFetch_Buffer_I_n_57;
  wire PreFetch_Buffer_I_n_58;
  wire PreFetch_Buffer_I_n_59;
  wire PreFetch_Buffer_I_n_62;
  wire PreFetch_Buffer_I_n_63;
  wire PreFetch_Buffer_I_n_77;
  wire PreFetch_Buffer_I_n_78;
  wire PreFetch_Buffer_I_n_80;
  wire PreFetch_Buffer_I_n_82;
  wire PreFetch_Buffer_I_n_85;
  wire PreFetch_Buffer_I_n_91;
  wire PreFetch_Buffer_I_n_97;
  wire PreFetch_Buffer_I_n_98;
  wire [4:0]Q;
  wire R22_out;
  wire \Read_AXI_Area.S_AXIS_TREADY[0]_i_3_n_0 ;
  wire \Read_AXI_Area.S_AXIS_TREADY_reg[0] ;
  wire [0:0]Reg1;
  wire Reg_Test_Equal_N_i13_out;
  wire Reg_Test_Equal_i;
  wire Reg_Write;
  wire [0:1]Result_Sel;
  wire \Result_Sel[0]_i_1_n_0 ;
  wire \Result_Sel[1]_i_1_n_0 ;
  wire S;
  wire S115_out;
  wire S1_out;
  wire S_0;
  wire Select_Logic;
  wire Select_Logic0;
  wire \Serial_Dbg_Intf.control_reg_reg[21] ;
  wire \Serial_Dbg_Intf.control_reg_reg[8] ;
  wire \Serial_Dbg_Intf.force_stop_cmd_i_reg ;
  wire Shift_Carry_In_reg_0;
  wire Shift_Logic_Res;
  wire Shift_Oper;
  wire Shifted;
  wire Sign_Extend_i_1_n_0;
  wire Sleep;
  wire Sleep_Decode;
  wire Sleep_Out;
  wire Suspend;
  wire Unsigned_Op;
  wire \Use_Async_Reset.sync_reset_reg ;
  wire [1:0]\Use_The_PCMP_instr.CLZ_Instr_reg_0 ;
  wire \Use_The_PCMP_instr.CLZ_Instr_reg_1 ;
  wire \Use_The_PCMP_instr.PCMP_Instr_reg_0 ;
  wire \Use_The_PCMP_instr.PCMP_Instr_reg_1 ;
  wire \Use_The_PCMP_instr.PCMP_Instr_reg_2 ;
  wire \Use_The_PCMP_instr.PCMP_Instr_reg_3 ;
  wire \Use_The_PCMP_instr.PCMP_Instr_reg_4 ;
  wire \Using_Barrel_Shifter.BitField_Extract_reg_0 ;
  wire [0:0]\Using_FPGA.DSP48E1_I1 ;
  wire \Using_FPGA.MUXCY_JUMP_CARRY3_n_1 ;
  wire \Using_FPGA.MUXCY_JUMP_CARRY3_n_4 ;
  wire [1:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_10 ;
  wire \Using_FPGA.Native_11 ;
  wire \Using_FPGA.Native_12 ;
  wire [15:0]\Using_FPGA.Native_13 ;
  wire \Using_FPGA.Native_14 ;
  wire \Using_FPGA.Native_15 ;
  wire \Using_FPGA.Native_16 ;
  wire \Using_FPGA.Native_17 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire \Using_FPGA.Native_8 ;
  wire \Using_FPGA.Native_9 ;
  wire \Using_FPGA.Native_i_3__0_n_0 ;
  wire \Using_FPGA.Native_i_3__12_n_0 ;
  wire \Using_FPGA.Native_i_3__3_n_0 ;
  wire \Using_FPGA.Native_i_4__3_n_0 ;
  wire \Using_FPGA.Native_i_4__7_n_0 ;
  wire \Using_FPGA.Native_i_7__3_n_0 ;
  wire \Using_FPGA.Using_Breakable_Pipe.Take_Intr_MUXCY_3_n_1 ;
  wire \Using_FPGA.Using_Breakable_Pipe.Take_Intr_MUXCY_3_n_5 ;
  wire \Using_FPGA.enable_Interrupts_I_reg_n_0 ;
  wire \Using_FPGA.iFetch_MuxCY_2_n_1 ;
  wire \Using_FPGA.iFetch_MuxCY_2_n_3 ;
  wire \Using_FPGA.iFetch_MuxCY_2_n_4 ;
  wire \Using_FPGA.of_PipeRun_MuxCY_1_n_1 ;
  wire \Using_FPGA.of_PipeRun_MuxCY_1_n_10 ;
  wire \Using_FPGA.of_PipeRun_MuxCY_1_n_11 ;
  wire \Using_FPGA.of_PipeRun_MuxCY_1_n_12 ;
  wire \Using_FPGA.of_PipeRun_MuxCY_1_n_15 ;
  wire \Using_FPGA.of_PipeRun_MuxCY_1_n_16 ;
  wire \Using_FPGA.of_PipeRun_MuxCY_1_n_17 ;
  wire \Using_FPGA.of_PipeRun_MuxCY_1_n_18 ;
  wire \Using_FPGA.of_PipeRun_MuxCY_1_n_19 ;
  wire \Using_FPGA.of_PipeRun_MuxCY_1_n_2 ;
  wire \Using_FPGA.of_PipeRun_MuxCY_1_n_3 ;
  wire \Using_FPGA.of_PipeRun_MuxCY_1_n_4 ;
  wire \Using_FPGA.of_PipeRun_MuxCY_1_n_8 ;
  wire \Using_FPGA.of_PipeRun_MuxCY_1_n_9 ;
  wire \Using_FPGA.reset_BIP_I_reg_n_0 ;
  wire \Using_FPGA.set_BIP_I_reg_n_0 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_i_1_n_0 ;
  wire \Using_FSL_Links.Using_Extended_FSL.FSL_Break_No_Dbg_i_1_n_0 ;
  wire \Using_FSL_Links.Using_Extended_FSL.FSL_Will_Break_No_Dbg_reg_0 ;
  wire \Using_FSL_Links.Using_Extended_FSL.FSL_Will_Break_i_2_n_0 ;
  wire \Using_FSL_Links.Using_Extended_FSL.FSL_Will_Break_i_4_n_0 ;
  wire \Using_FSL_Links.Using_Extended_FSL.FSL_Will_Break_reg_0 ;
  wire [1:0]\Using_FSL_Links.fsl_block_instr_reg_0 ;
  wire \Using_FSL_Links.mb_Get_i_i_8_n_0 ;
  wire \Using_LWX_SWX_instr.reservation_reg_n_0 ;
  wire \Using_MSR_Instr.msrxxx_write_carry_reg_n_0 ;
  wire \Using_MSR_Instr.write_MSR_I_reg_n_0 ;
  wire [0:0]\Using_Mul64.ex_mulhu_instr_i_reg_0 ;
  wire \Using_dynamic_instr_Address.Interrupt_Ack[0]_i_1_n_0 ;
  wire \Using_dynamic_instr_Address.Interrupt_Ack[1]_i_1_n_0 ;
  wire \Using_dynamic_instr_Address.Interrupt_Ack_reg[1]_0 ;
  wire \Using_dynamic_instr_Address.old_IE_value_reg_0 ;
  wire Valid_Instr0;
  wire Valid_Instr_i;
  wire [0:0]Wakeup;
  wire [0:31]Y;
  wire active_wakeup;
  wire active_wakeup0;
  wire \all_statistics_counters[0].request_i_11_0 ;
  wire \all_statistics_counters[0].request_i_11_1 ;
  wire \all_statistics_counters[0].request_i_11_n_0 ;
  wire \all_statistics_counters[0].request_i_12 ;
  wire \all_statistics_counters[0].request_i_14_n_0 ;
  wire \all_statistics_counters[0].request_i_15_0 ;
  wire \all_statistics_counters[0].request_i_15_1 ;
  wire \all_statistics_counters[0].request_i_15_2 ;
  wire \all_statistics_counters[0].request_i_15_3 ;
  wire \all_statistics_counters[0].request_i_15_n_0 ;
  wire \all_statistics_counters[0].request_i_16_n_0 ;
  wire [3:0]\all_statistics_counters[0].request_i_17_0 ;
  wire \all_statistics_counters[0].request_i_17_1 ;
  wire \all_statistics_counters[0].request_i_17_n_0 ;
  wire [2:0]\all_statistics_counters[0].request_i_4 ;
  wire \all_statistics_counters[0].request_i_5_0 ;
  wire \all_statistics_counters[0].request_i_5_1 ;
  wire \all_statistics_counters[0].request_i_5_2 ;
  wire \all_statistics_counters[0].request_i_6 ;
  wire \all_statistics_counters[1].request_i_11_n_0 ;
  wire \all_statistics_counters[1].request_i_19_n_0 ;
  wire \all_statistics_counters[1].request_i_20_n_0 ;
  wire \all_statistics_counters[1].request_i_22_n_0 ;
  wire \all_statistics_counters[1].request_i_23_n_0 ;
  wire \all_statistics_counters[1].request_i_27_n_0 ;
  wire \all_statistics_counters[1].request_i_33_n_0 ;
  wire [2:0]\all_statistics_counters[1].request_i_4 ;
  wire \all_statistics_counters[2].request_i_11_n_0 ;
  wire \all_statistics_counters[2].request_i_14_n_0 ;
  wire \all_statistics_counters[2].request_i_15_n_0 ;
  wire \all_statistics_counters[2].request_i_16_n_0 ;
  wire \all_statistics_counters[2].request_i_17_n_0 ;
  wire [2:0]\all_statistics_counters[2].request_i_4 ;
  wire \all_statistics_counters[3].request_i_11_n_0 ;
  wire \all_statistics_counters[3].request_i_14_n_0 ;
  wire \all_statistics_counters[3].request_i_15_n_0 ;
  wire \all_statistics_counters[3].request_i_16_n_0 ;
  wire \all_statistics_counters[3].request_i_17_n_0 ;
  wire [2:0]\all_statistics_counters[3].request_i_4 ;
  wire \all_statistics_counters[4].request_i_11_n_0 ;
  wire \all_statistics_counters[4].request_i_14_n_0 ;
  wire \all_statistics_counters[4].request_i_15_n_0 ;
  wire \all_statistics_counters[4].request_i_16_n_0 ;
  wire \all_statistics_counters[4].request_i_17_n_0 ;
  wire [2:0]\all_statistics_counters[4].request_i_4 ;
  wire \all_statistics_counters[5].request_i_11_n_0 ;
  wire \all_statistics_counters[5].request_i_14_n_0 ;
  wire \all_statistics_counters[5].request_i_15_n_0 ;
  wire \all_statistics_counters[5].request_i_16_n_0 ;
  wire \all_statistics_counters[5].request_i_17_n_0 ;
  wire [2:0]\all_statistics_counters[5].request_i_4 ;
  wire [0:1]alu_Op;
  wire [1:1]alu_Op_II;
  wire \branch_count_reg[3] ;
  wire branch_with_delay;
  wire break_Pipe_i_reg0;
  wire [2:0]break_Pipe_i_reg_0;
  wire break_Pipe_i_reg__0;
  wire buffer_Full;
  wire carry_In;
  wire clz_instr;
  wire compare_Instr;
  wire cond_ds_branch;
  wire correct_Carry;
  wire correct_Carry_I;
  wire correct_Carry_II;
  wire correct_Carry_Select;
  wire d_AS_I;
  wire d_AS_I30_out;
  wire dbg_brki_hit;
  wire dbg_brki_hit0;
  wire dbg_clean_stop;
  wire dbg_pause;
  wire [0:0]dbg_pause_reg;
  wire delay_slot_instr_reg;
  wire doublet_Read;
  wire doublet_Read_i_i_1_n_0;
  wire enable_Interrupts_I;
  wire ex_Valid;
  wire ex_Valid_1st_cycle_reg_n_0;
  wire ex_Valid_reg_0;
  wire ex_first_cycle;
  wire ex_mulh_instr;
  wire ex_mulh_instr_i0;
  wire ex_mulhsu_instr;
  wire ex_mulhsu_instr_i0;
  wire ex_mulhu_instr;
  wire ex_mulhu_instr_i0;
  wire ex_not_mul_op;
  wire [0:0]exception_kind;
  wire force1;
  wire force1_i43_out;
  wire force2;
  wire force_DI1;
  wire force_DI2;
  wire force_Val1;
  wire force_Val1_i41_out;
  wire force_Val2_N;
  wire force_jump1;
  wire force_jump2;
  wire force_stop_cmd_hold;
  wire force_stop_cmd_i;
  wire fsl_carry_hold;
  wire fsl_carry_hold_value;
  wire has_inhibit_EX;
  wire hibernate_i_i_1_n_0;
  wire iFetch_In_Progress;
  wire iFetch_In_Progress_reg_0;
  wire ifetch_carry1;
  wire ifetch_carry2;
  wire [0:15]imm_Value;
  wire in0;
  wire inHibit_EX;
  wire inHibit_EX_i_3_n_0;
  wire in_delay_slot;
  wire in_delay_slot_reg;
  wire inside_handler_i_2_0;
  wire inside_handler_i_4_n_0;
  wire [3:0]inside_handler_reg;
  wire inside_handler_reg_0;
  wire inside_handler_reg_1;
  wire inside_handler_reg_2;
  wire [22:0]\instr_EX_i_reg[0]_0 ;
  wire \instr_EX_i_reg[21]_0 ;
  wire \instr_EX_i_reg[22]_0 ;
  wire \instr_EX_i_reg[23]_0 ;
  wire \instr_EX_i_reg[24]_0 ;
  wire \instr_EX_i_reg[25]_0 ;
  wire \instr_EX_i_reg[26]_0 ;
  wire \instr_EX_i_reg[27]_0 ;
  wire [0:32]instr_OF_raw;
  wire is_lwx_I;
  wire is_swx_I;
  wire is_swx_I0;
  wire is_swx_I_reg_0;
  wire is_swx_I_reg_n_0;
  wire isbyte;
  wire isdoublet;
  wire jump;
  wire jump2_I_1;
  wire jump2_I_1_reg_0;
  wire jump2_I_reg_n_0;
  wire jump_Carry1;
  wire jump_Carry2;
  wire load_Store_i;
  wire load_Store_i2;
  wire lopt;
  wire \^lopt_1 ;
  wire lopt_10;
  wire lopt_11;
  wire lopt_12;
  wire lopt_13;
  wire lopt_14;
  wire lopt_15;
  wire lopt_16;
  wire lopt_17;
  wire lopt_18;
  wire lopt_19;
  wire \^lopt_2 ;
  wire lopt_20;
  wire lopt_21;
  wire lopt_22;
  wire lopt_23;
  wire lopt_24;
  wire lopt_25;
  wire lopt_26;
  wire lopt_27;
  wire lopt_28;
  wire lopt_29;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire lopt_8;
  wire lopt_9;
  wire mb_Get_i;
  wire mb_Put_i;
  wire mb_Put_i5_out;
  wire mbar_decode_I;
  wire mbar_first;
  wire mbar_first_i_2_n_0;
  wire mbar_first_reg_n_0;
  wire mbar_hold_I_reg_n_0;
  wire mbar_is_sleep;
  wire mbar_is_sleep0;
  wire mbar_sleep;
  wire mbar_sleep_i_1_n_0;
  wire mem_access;
  wire mem_mulh_instr0;
  wire missed_IFetch;
  wire missed_IFetch_reg_0;
  wire missed_IFetch_reg_1;
  wire msrxxx_carry;
  wire msrxxx_write_carry;
  wire mtsmsr_write_i_reg_0;
  wire mtsmsr_write_i_reg_1;
  wire mul_Executing;
  wire mul_Executing0;
  wire mul_Executing_delayed;
  wire mul_Executing_done;
  wire mul_Executing_done0;
  wire mul_first;
  wire mul_first51_out;
  wire new_Carry;
  wire nonvalid_IFetch_n_reg_n_0;
  wire of_PipeRun;
  wire of_PipeRun_Select;
  wire of_PipeRun_without_dready;
  wire of_Valid_Raw;
  wire of_fsl_blocking;
  wire of_fsl_control;
  wire of_fsl_test;
  wire of_mbar_decode;
  wire ok_To_Stop;
  wire old_IE_value;
  wire op2_Reg;
  wire op2_Reg__0;
  wire op2_Reg__1;
  wire op2_Reg__10;
  wire op2_Reg__11;
  wire op2_Reg__12;
  wire op2_Reg__13;
  wire op2_Reg__14;
  wire op2_Reg__15;
  wire op2_Reg__16;
  wire op2_Reg__17;
  wire op2_Reg__18;
  wire op2_Reg__19;
  wire op2_Reg__2;
  wire op2_Reg__20;
  wire op2_Reg__21;
  wire op2_Reg__22;
  wire op2_Reg__23;
  wire op2_Reg__24;
  wire op2_Reg__25;
  wire op2_Reg__26;
  wire op2_Reg__27;
  wire op2_Reg__28;
  wire op2_Reg__29;
  wire op2_Reg__3;
  wire op2_Reg__30;
  wire op2_Reg__4;
  wire op2_Reg__5;
  wire op2_Reg__6;
  wire op2_Reg__7;
  wire op2_Reg__8;
  wire op2_Reg__9;
  wire opsel1_PC;
  wire opsel1_SPR;
  wire opsel1_SPR_I;
  wire opsel1_SPR_Select;
  wire opsel1_SPR_Select_1;
  wire opsel1_SPR_Select_2_1;
  wire opsel1_SPR_Select_2_2;
  wire [0:0]out;
  wire p_1_in15_in;
  wire p_20_in;
  wire pcmp_instr;
  wire quadlet_Read;
  wire quadlet_Read_i_i_1_n_0;
  wire [0:4]reg1_Addr;
  wire reg_Test_Equal;
  wire reg_Test_Equal_N;
  wire reg_Write_I;
  wire reg_Write_dbg;
  wire reg_zero;
  wire res_Forward1;
  wire res_Forward2;
  wire res_forward1_1;
  wire res_forward1_2;
  wire res_forward1_3;
  wire res_forward2_1;
  wire res_forward2_2;
  wire res_forward2_3;
  wire reservation2;
  wire reset_BIP_I15_out;
  wire reset_delay;
  wire save_event_next_reg;
  wire save_pc_next_next_i_3_n_0;
  wire save_pc_next_next_reg;
  wire save_pc_next_next_reg_0;
  wire save_pc_next_next_reg_1;
  wire [0:0]\saved_load_get[0]_i_2_0 ;
  wire \saved_load_get[0]_i_7_n_0 ;
  wire \saved_load_get_reg[31] ;
  wire \saved_load_get_reg[31]_0 ;
  wire \saved_load_get_reg[31]_1 ;
  wire \saved_load_get_reg[31]_2 ;
  wire \saved_load_get_reg[31]_3 ;
  wire \saved_pc_reg[31] ;
  wire select_ALU_Carry;
  wire set_FSL_Error;
  wire sext16;
  wire sext8;
  wire shift_Carry_In;
  wire sleep_i0;
  wire sleep_i00_in;
  wire sleep_i_i_1_n_0;
  wire stat130_out;
  wire stat2;
  wire stat212_in;
  wire stat2_out;
  wire stat5_out;
  wire \stat_select_reg[0][2] ;
  wire \stat_select_reg[0][2]_0 ;
  wire \stat_select_reg[0][2]_1 ;
  wire \stat_select_reg[1][2] ;
  wire \stat_select_reg[1][2]_0 ;
  wire \stat_select_reg[1][2]_1 ;
  wire \stat_select_reg[2][2] ;
  wire \stat_select_reg[2][2]_0 ;
  wire \stat_select_reg[2][2]_1 ;
  wire \stat_select_reg[3][2] ;
  wire \stat_select_reg[3][2]_0 ;
  wire \stat_select_reg[3][2]_1 ;
  wire \stat_select_reg[4][2] ;
  wire \stat_select_reg[4][2]_0 ;
  wire \stat_select_reg[4][2]_1 ;
  wire \stat_select_reg[5][2] ;
  wire \stat_select_reg[5][2]_0 ;
  wire \stat_select_reg[5][2]_1 ;
  wire [0:0]stat_stop;
  wire sub_Carry;
  wire suspend_i_i_1_n_0;
  wire swx_ready;
  wire sync_reset;
  wire take_Intr_Now_I;
  wire take_Intr_Now_II;
  wire take_Intr_Now_III;
  wire take_intr_2nd_cycle0;
  wire take_intr_2nd_cycle_reg_n_0;
  wire take_intr_Done;
  wire trace_data_read_i_reg;
  wire trace_data_read_i_reg_0;
  wire trace_exception_taken_i_reg;
  wire trace_exception_taken_i_reg_0;
  wire trace_exception_taken_i_reg_1;
  wire trace_exception_taken_i_reg_2;
  wire \trace_instruction_i_reg[3] ;
  wire \trace_instruction_i_reg[5] ;
  wire \trace_instruction_i_reg[9] ;
  wire trace_reg_write_novalid;
  wire trace_valid_instr_part1;
  wire trace_valid_instr_part10;
  wire trace_valid_instr_part1_i_2_n_0;
  wire uncond_ds_branch;
  wire use_ALU_Carry21_out;
  wire use_Imm_Reg;
  wire use_Reg_Neg_DI;
  wire use_Reg_Neg_DI_i40_out;
  wire use_Reg_Neg_S;
  wire use_Reg_Neg_S_i42_out;
  wire using_Imm_reg_0;
  wire valid_instr;
  wire void_bit;
  wire \void_bit16_reg[0] ;
  wire write_Carry;
  wire write_Carry_I_reg_n_0;
  wire write_Reg_I_S;
  wire write_Reg_reg_n_0;
  wire \writems[0]_i_8 ;
  wire \writems[1]_i_2 ;
  wire \writems[1]_i_2_0 ;
  wire \writems[1]_i_2_1 ;
  wire writing_reg_n_0;

  assign \^lopt_1  = lopt_2;
  assign \^lopt_4  = lopt_5;
  assign lopt_1 = select_ALU_Carry;
  assign lopt_3 = \^lopt_2 ;
  assign lopt_4 = \^lopt_3 ;
  assign lopt_6 = force_DI1;
  assign lopt_7 = force_jump1;
  LUT6 #(
    .INIT(64'h2022202220222020)) 
    \Area_Optimized.register_write_i_1 
       (.I0(ex_Valid),
        .I1(ex_Valid_reg_0),
        .I2(write_Reg_reg_n_0),
        .I3(writing_reg_n_0),
        .I4(DReady),
        .I5(MEM_DAXI_Data_Strobe),
        .O(reg_Write_dbg));
  FDRE Blocked_Valid_Instr_reg
       (.C(Clk),
        .CE(1'b1),
        .D(Blocked_Valid_Instr0),
        .Q(Blocked_Valid_Instr),
        .R(sync_reset));
  FDRE Compare_Instr_reg
       (.C(Clk),
        .CE(of_PipeRun),
        .D(PreFetch_Buffer_I_n_98),
        .Q(compare_Instr),
        .R(MSRclr_Instr_i));
  (* SOFT_HLUTNM = "soft_lutpair65" *) 
  LUT4 #(
    .INIT(16'h4044)) 
    D_AS_INST_0
       (.I0(ex_Valid_reg_0),
        .I1(d_AS_I),
        .I2(\Using_LWX_SWX_instr.reservation_reg_n_0 ),
        .I3(is_swx_I_reg_n_0),
        .O(D[4]));
  LUT2 #(
    .INIT(4'h1)) 
    Dbg_Clean_Stop_i_1
       (.I0(jump2_I_reg_n_0),
        .I1(use_Imm_Reg),
        .O(Dbg_Clean_Stop_i_1_n_0));
  FDSE Dbg_Clean_Stop_reg
       (.C(Clk),
        .CE(of_PipeRun),
        .D(Dbg_Clean_Stop_i_1_n_0),
        .Q(dbg_clean_stop),
        .S(sync_reset));
  FDRE EX_delayslot_Instr_I_reg
       (.C(Clk),
        .CE(of_PipeRun),
        .D(branch_with_delay),
        .Q(EX_delayslot_Instr_I_reg_n_0),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'h0000000100000000)) 
    \Gen_M_Channel_Handling[0].M_AXIS_TLAST[0]_i_1 
       (.I0(B[0]),
        .I1(FSL_Put_Inhibit),
        .I2(FSL_Break),
        .I3(FSL_Put_Test),
        .I4(\Gen_M_Channel_Handling[0].M_AXIS_TLAST[0]_i_2_n_0 ),
        .I5(\Gen_M_Channel_Handling[1].M_AXIS_TLAST_reg[1] ),
        .O(\Using_FPGA.Native_0 ));
  (* SOFT_HLUTNM = "soft_lutpair64" *) 
  LUT3 #(
    .INIT(8'hDF)) 
    \Gen_M_Channel_Handling[0].M_AXIS_TLAST[0]_i_2 
       (.I0(ex_Valid),
        .I1(ex_Valid_reg_0),
        .I2(mb_Put_i),
        .O(\Gen_M_Channel_Handling[0].M_AXIS_TLAST[0]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'hDC)) 
    \Gen_M_Channel_Handling[0].m_axis_tvalid_i[0]_i_1 
       (.I0(M0_AXIS_TREADY),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Gen_M_Channel_Handling[0].m_axis_tvalid_i_reg[0] [1]),
        .O(M0_AXIS_TREADY_0));
  LUT6 #(
    .INIT(64'h0000000200000000)) 
    \Gen_M_Channel_Handling[1].M_AXIS_TLAST[1]_i_1 
       (.I0(B[0]),
        .I1(FSL_Put_Inhibit),
        .I2(FSL_Break),
        .I3(FSL_Put_Test),
        .I4(\Gen_M_Channel_Handling[0].M_AXIS_TLAST[0]_i_2_n_0 ),
        .I5(\Gen_M_Channel_Handling[1].M_AXIS_TLAST_reg[1] ),
        .O(E));
  LUT3 #(
    .INIT(8'hDC)) 
    \Gen_M_Channel_Handling[1].m_axis_tvalid_i[1]_i_1 
       (.I0(M1_AXIS_TREADY),
        .I1(E),
        .I2(\Gen_M_Channel_Handling[0].m_axis_tvalid_i_reg[0] [0]),
        .O(M1_AXIS_TREADY_0));
  FDRE Has_Inhibit_EX_reg
       (.C(Clk),
        .CE(1'b1),
        .D(inHibit_EX),
        .Q(has_inhibit_EX),
        .R(sync_reset));
  (* SOFT_HLUTNM = "soft_lutpair72" *) 
  LUT3 #(
    .INIT(8'h04)) 
    \LOCKSTEP_Master_Out[0]_INST_0_i_1 
       (.I0(\LOCKSTEP_Master_Out[0]_INST_0_i_2_n_0 ),
        .I1(FSL_Put_Blocking),
        .I2(FSL_Break),
        .O(\Using_FSL_Links.fsl_block_instr_reg_0 [1]));
  LUT6 #(
    .INIT(64'hFFFFFFFFD0DDFFFF)) 
    \LOCKSTEP_Master_Out[0]_INST_0_i_2 
       (.I0(mb_Put_i),
        .I1(\Gen_M_Channel_Handling[1].M_AXIS_TLAST_reg[1] ),
        .I2(\Read_AXI_Area.S_AXIS_TREADY_reg[0] ),
        .I3(mb_Get_i),
        .I4(ex_Valid),
        .I5(ex_Valid_reg_0),
        .O(\LOCKSTEP_Master_Out[0]_INST_0_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0D000D000D000000)) 
    \LOCKSTEP_Master_Out[1]_INST_0 
       (.I0(is_swx_I_reg_n_0),
        .I1(\Using_LWX_SWX_instr.reservation_reg_n_0 ),
        .I2(\LOCKSTEP_Out_reg[3] ),
        .I3(load_Store_i),
        .I4(force_stop_cmd_i),
        .I5(force_stop_cmd_hold),
        .O(LOCKSTEP_Master_Out));
  LUT6 #(
    .INIT(64'h0000000000D50000)) 
    Pause_Ack_i_1
       (.I0(mul_Executing),
        .I1(mbar_decode_I),
        .I2(mbar_is_sleep),
        .I3(iFetch_In_Progress),
        .I4(dbg_pause),
        .I5(I2118_out),
        .O(Pause_Ack0));
  FDRE Pause_Ack_reg
       (.C(Clk),
        .CE(1'b1),
        .D(Pause_Ack0),
        .Q(Pause_Ack),
        .R(sync_reset));
  block_design_microblaze_0_0_PreFetch_Buffer PreFetch_Buffer_I
       (.\Area_Debug_Control.dbg_brki_hit_i_2 (\Area_Debug_Control.dbg_brki_hit_i_2 ),
        .BitField_Extract0(BitField_Extract0),
        .BitField_Insert0(BitField_Insert0),
        .CI(IReady),
        .CLZ_Instr0(CLZ_Instr0),
        .Clk(Clk),
        .D({reg1_Addr[0],reg1_Addr[1],reg1_Addr[2],reg1_Addr[3],reg1_Addr[4],imm_Value[0],imm_Value[1],imm_Value[2],imm_Value[3],imm_Value[4],imm_Value[12],imm_Value[13],imm_Value[14],imm_Value[15]}),
        .DI(DI),
        .D_0(D_0),
        .D_1(D_1),
        .D_10(D_10),
        .D_11(D_11),
        .D_12(D_12),
        .D_13(D_13),
        .D_14(D_14),
        .D_15(D_15),
        .D_16(D_16),
        .D_17(D_17),
        .D_18(D_18),
        .D_19(D_19),
        .D_2(D_2),
        .D_20(D_20),
        .D_21(D_21),
        .D_22(D_22),
        .D_23(D_23),
        .D_24(D_24),
        .D_25(D_25),
        .D_26(D_26),
        .D_27(D_27),
        .D_28(D_28),
        .D_29(D_29),
        .D_3(D_3),
        .D_30(D_30),
        .D_31(D_31),
        .D_32(D_32),
        .D_4(D_4),
        .D_5(D_5),
        .D_6(D_6),
        .D_7(D_7),
        .D_8(D_8),
        .D_9(D_9),
        .FSL_Put_Inhibit(FSL_Put_Inhibit),
        .I3(I3),
        .I3_32(I3_32),
        .I3_33(I3_33),
        .I3_34(I3_34),
        .Instr_Data(Instr_Data),
        .MSRclr_Instr_i0_in(MSRclr_Instr_i0_in),
        .Not_MB_Get_Op0(Not_MB_Get_Op0),
        .PC_OF(PC_OF),
        .Reg_Test_Equal_N_i13_out(Reg_Test_Equal_N_i13_out),
        .Reg_Test_Equal_i(Reg_Test_Equal_i),
        .S(S),
        .S115_out(S115_out),
        .S_0(S_0),
        .\Serial_Dbg_Intf.control_reg_reg[8] (\Serial_Dbg_Intf.control_reg_reg[8] ),
        .Sext16_reg(PreFetch_Buffer_I_n_111),
        .Sext8_reg(PreFetch_Buffer_I_n_112),
        .Sext8_reg_0(sext8),
        .\Use_Async_Reset.sync_reset_reg (PreFetch_Buffer_I_n_91),
        .\Using_FPGA.Native (Buffer_Addr[0]),
        .\Using_FPGA.Native_0 (Buffer_Addr[1]),
        .\Using_FPGA.Native_1 (Buffer_Addr[2]),
        .\Using_FPGA.Native_10 (PreFetch_Buffer_I_n_41),
        .\Using_FPGA.Native_11 (PreFetch_Buffer_I_n_50),
        .\Using_FPGA.Native_12 (PreFetch_Buffer_I_n_52),
        .\Using_FPGA.Native_13 (PreFetch_Buffer_I_n_54),
        .\Using_FPGA.Native_14 ({PreFetch_Buffer_I_n_55,PreFetch_Buffer_I_n_56,PreFetch_Buffer_I_n_57,PreFetch_Buffer_I_n_58,PreFetch_Buffer_I_n_59}),
        .\Using_FPGA.Native_15 (PreFetch_Buffer_I_n_62),
        .\Using_FPGA.Native_16 (PreFetch_Buffer_I_n_63),
        .\Using_FPGA.Native_17 (opsel1_PC),
        .\Using_FPGA.Native_18 (PreFetch_Buffer_I_n_77),
        .\Using_FPGA.Native_19 (PreFetch_Buffer_I_n_82),
        .\Using_FPGA.Native_2 (imm_Value[5]),
        .\Using_FPGA.Native_20 (PreFetch_Buffer_I_n_85),
        .\Using_FPGA.Native_21 (PreFetch_Buffer_I_n_98),
        .\Using_FPGA.Native_22 (PreFetch_Buffer_I_n_100),
        .\Using_FPGA.Native_23 (PreFetch_Buffer_I_n_102),
        .\Using_FPGA.Native_24 (PreFetch_Buffer_I_n_103),
        .\Using_FPGA.Native_25 (PreFetch_Buffer_I_n_105),
        .\Using_FPGA.Native_26 (PreFetch_Buffer_I_n_108),
        .\Using_FPGA.Native_27 (PreFetch_Buffer_I_n_109),
        .\Using_FPGA.Native_28 (PreFetch_Buffer_I_n_110),
        .\Using_FPGA.Native_29 (ex_Valid),
        .\Using_FPGA.Native_3 (imm_Value[6]),
        .\Using_FPGA.Native_30 (exception_kind),
        .\Using_FPGA.Native_31 (\Using_FPGA.Native_13 ),
        .\Using_FPGA.Native_32 (use_Imm_Reg),
        .\Using_FPGA.Native_33 (S1_out),
        .\Using_FPGA.Native_4 (imm_Value[7]),
        .\Using_FPGA.Native_5 (imm_Value[8]),
        .\Using_FPGA.Native_6 (imm_Value[9]),
        .\Using_FPGA.Native_7 (imm_Value[10]),
        .\Using_FPGA.Native_8 (imm_Value[11]),
        .\Using_FPGA.Native_9 (PreFetch_Buffer_I_n_39),
        .\Using_FPGA.Native_I1 (mbar_hold_I_reg_n_0),
        .\Using_FPGA.set_BIP_I_reg (PreFetch_Buffer_I_n_37),
        .\Using_FPGA.set_BIP_I_reg_0 (\Using_FPGA.set_BIP_I_reg_n_0 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (PreFetch_Buffer_I_n_78),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_0 (PreFetch_Buffer_I_n_80),
        .\Using_FSL_Links.mb_Get_i_reg (\Using_FPGA.of_PipeRun_MuxCY_1_n_9 ),
        .\Using_FSL_Links.mb_Get_i_reg_0 (\Using_FPGA.of_PipeRun_MuxCY_1_n_4 ),
        .\Using_MSR_Instr.msrxxx_carry_reg (PreFetch_Buffer_I_n_42),
        .\Using_MSR_Instr.msrxxx_write_carry_reg (jump),
        .\Using_MSR_Instr.write_MSR_I_reg (PreFetch_Buffer_I_n_38),
        .\Using_MSR_Instr.write_MSR_I_reg_0 (\Using_MSR_Instr.write_MSR_I_reg_n_0 ),
        .Y(Y),
        .alu_Op_II(alu_Op_II),
        .break_Pipe_i_reg__0(break_Pipe_i_reg__0),
        .buffer_Full(buffer_Full),
        .byte_i_reg(PreFetch_Buffer_I_n_107),
        .d_AS_I30_out(d_AS_I30_out),
        .dbg_brki_hit(dbg_brki_hit),
        .dbg_brki_hit0(dbg_brki_hit0),
        .dbg_pause(dbg_pause),
        .dbg_pause_reg(dbg_pause_reg),
        .dbg_pause_reg_0(PreFetch_Buffer_I_n_97),
        .doublet_i_reg(PreFetch_Buffer_I_n_106),
        .enable_Interrupts_I(enable_Interrupts_I),
        .ex_mulh_instr_i0(ex_mulh_instr_i0),
        .ex_mulhsu_instr_i0(ex_mulhsu_instr_i0),
        .ex_mulhu_instr_i0(ex_mulhu_instr_i0),
        .force1_i43_out(force1_i43_out),
        .force_Val1_i41_out(force_Val1_i41_out),
        .force_Val2_N(force_Val2_N),
        .inHibit_EX(inHibit_EX),
        .inHibit_EX_reg(PreFetch_Buffer_I_n_49),
        .instr_OF_raw({instr_OF_raw[0],instr_OF_raw[1],instr_OF_raw[2],instr_OF_raw[3],instr_OF_raw[4],instr_OF_raw[5],instr_OF_raw[6],instr_OF_raw[7],instr_OF_raw[8],instr_OF_raw[9],instr_OF_raw[10],instr_OF_raw[32]}),
        .is_lwx_I(is_lwx_I),
        .is_lwx_I_reg(PreFetch_Buffer_I_n_104),
        .is_swx_I(is_swx_I),
        .is_swx_I0(is_swx_I0),
        .isbyte(isbyte),
        .isdoublet(isdoublet),
        .lopt(\^lopt_5 ),
        .lopt_1(\^lopt_6 ),
        .lopt_2(\^lopt_7 ),
        .lopt_3(lopt_8),
        .lopt_4(lopt_9),
        .lopt_5(lopt_10),
        .lopt_6(lopt_11),
        .mb_Get_i(mb_Get_i),
        .mb_Put_i5_out(mb_Put_i5_out),
        .mbar_first(mbar_first),
        .mbar_first_reg(ok_To_Stop),
        .mbar_first_reg_0(mbar_first_i_2_n_0),
        .mbar_is_sleep0(mbar_is_sleep0),
        .missed_IFetch(missed_IFetch),
        .msrxxx_carry(msrxxx_carry),
        .msrxxx_write_carry(msrxxx_write_carry),
        .mtsmsr_write_i_reg(PreFetch_Buffer_I_n_40),
        .mtsmsr_write_i_reg_0(mtsmsr_write_i_reg_0),
        .mul_Executing0(mul_Executing0),
        .mul_Executing_reg(ex_Valid_reg_0),
        .mul_Executing_reg_0(\Using_FSL_Links.fsl_block_instr_reg_0 [1]),
        .mul_first(mul_first),
        .mul_first51_out(mul_first51_out),
        .nonvalid_IFetch_n_reg(\LOCKSTEP_Out_reg[3]_0 ),
        .nonvalid_IFetch_n_reg_0(\Using_FPGA.MUXCY_JUMP_CARRY3_n_1 ),
        .nonvalid_IFetch_n_reg_1(nonvalid_IFetch_n_reg_n_0),
        .of_Valid_Raw(of_Valid_Raw),
        .of_fsl_blocking(of_fsl_blocking),
        .of_fsl_control(of_fsl_control),
        .of_fsl_test(of_fsl_test),
        .of_mbar_decode(of_mbar_decode),
        .op2_Reg(op2_Reg),
        .op2_Reg__0(op2_Reg__0),
        .op2_Reg__1(op2_Reg__1),
        .op2_Reg__10(op2_Reg__10),
        .op2_Reg__11(op2_Reg__11),
        .op2_Reg__12(op2_Reg__12),
        .op2_Reg__13(op2_Reg__13),
        .op2_Reg__14(op2_Reg__14),
        .op2_Reg__15(op2_Reg__15),
        .op2_Reg__16(op2_Reg__16),
        .op2_Reg__17(op2_Reg__17),
        .op2_Reg__18(op2_Reg__18),
        .op2_Reg__19(op2_Reg__19),
        .op2_Reg__2(op2_Reg__2),
        .op2_Reg__20(op2_Reg__20),
        .op2_Reg__21(op2_Reg__21),
        .op2_Reg__22(op2_Reg__22),
        .op2_Reg__23(op2_Reg__23),
        .op2_Reg__24(op2_Reg__24),
        .op2_Reg__25(op2_Reg__25),
        .op2_Reg__26(op2_Reg__26),
        .op2_Reg__27(op2_Reg__27),
        .op2_Reg__28(op2_Reg__28),
        .op2_Reg__29(op2_Reg__29),
        .op2_Reg__3(op2_Reg__3),
        .op2_Reg__30(op2_Reg__30),
        .op2_Reg__4(op2_Reg__4),
        .op2_Reg__5(op2_Reg__5),
        .op2_Reg__6(op2_Reg__6),
        .op2_Reg__7(op2_Reg__7),
        .op2_Reg__8(op2_Reg__8),
        .op2_Reg__9(op2_Reg__9),
        .p_20_in(p_20_in),
        .reset_BIP_I15_out(reset_BIP_I15_out),
        .sext16(sext16),
        .sync_reset(sync_reset),
        .take_Intr_Now_II(take_Intr_Now_II),
        .take_Intr_Now_III(take_Intr_Now_III),
        .trace_jump_taken_i_reg(jump2_I_reg_n_0),
        .use_ALU_Carry21_out(use_ALU_Carry21_out),
        .use_Reg_Neg_DI_i40_out(use_Reg_Neg_DI_i40_out),
        .use_Reg_Neg_S_i42_out(use_Reg_Neg_S_i42_out),
        .\write_Addr_I_reg[3] (of_PipeRun));
  LUT6 #(
    .INIT(64'h0001000000000000)) 
    \Read_AXI_Area.S_AXIS_TREADY[0]_i_1 
       (.I0(B[0]),
        .I1(FSL_Put_Inhibit),
        .I2(FSL_Break),
        .I3(FSL_Put_Test),
        .I4(\Read_AXI_Area.S_AXIS_TREADY_reg[0] ),
        .I5(\Read_AXI_Area.S_AXIS_TREADY[0]_i_3_n_0 ),
        .O(\Using_FPGA.Native [1]));
  (* SOFT_HLUTNM = "soft_lutpair59" *) 
  LUT3 #(
    .INIT(8'h08)) 
    \Read_AXI_Area.S_AXIS_TREADY[0]_i_3 
       (.I0(mb_Get_i),
        .I1(ex_Valid),
        .I2(ex_Valid_reg_0),
        .O(\Read_AXI_Area.S_AXIS_TREADY[0]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h0002000000000000)) 
    \Read_AXI_Area.S_AXIS_TREADY[1]_i_1 
       (.I0(B[0]),
        .I1(FSL_Put_Inhibit),
        .I2(FSL_Break),
        .I3(FSL_Put_Test),
        .I4(\Read_AXI_Area.S_AXIS_TREADY_reg[0] ),
        .I5(\Read_AXI_Area.S_AXIS_TREADY[0]_i_3_n_0 ),
        .O(\Using_FPGA.Native [0]));
  (* SOFT_HLUTNM = "soft_lutpair64" *) 
  LUT4 #(
    .INIT(16'h0400)) 
    Read_Strobe_INST_0
       (.I0(writing_reg_n_0),
        .I1(load_Store_i),
        .I2(ex_Valid_reg_0),
        .I3(ex_Valid),
        .O(D[3]));
  LUT6 #(
    .INIT(64'h000000F000220022)) 
    \Result_Sel[0]_i_1 
       (.I0(Result_Sel[0]),
        .I1(FSL_Will_Break_No_Dbg),
        .I2(instr_OF_raw[0]),
        .I3(sync_reset),
        .I4(take_Intr_Now_III),
        .I5(of_PipeRun),
        .O(\Result_Sel[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h000000F000220022)) 
    \Result_Sel[1]_i_1 
       (.I0(Result_Sel[1]),
        .I1(FSL_Will_Break_No_Dbg),
        .I2(instr_OF_raw[1]),
        .I3(sync_reset),
        .I4(take_Intr_Now_III),
        .I5(of_PipeRun),
        .O(\Result_Sel[1]_i_1_n_0 ));
  FDRE \Result_Sel_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Result_Sel[0]_i_1_n_0 ),
        .Q(Result_Sel[0]),
        .R(1'b0));
  FDRE \Result_Sel_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Result_Sel[1]_i_1_n_0 ),
        .Q(Result_Sel[1]),
        .R(1'b0));
  FDRE Select_Logic_reg
       (.C(Clk),
        .CE(of_PipeRun),
        .D(Select_Logic0),
        .Q(Select_Logic),
        .R(sync_reset));
  FDRE Sext16_reg
       (.C(Clk),
        .CE(1'b1),
        .D(PreFetch_Buffer_I_n_111),
        .Q(sext16),
        .R(1'b0));
  FDRE Sext8_reg
       (.C(Clk),
        .CE(1'b1),
        .D(PreFetch_Buffer_I_n_112),
        .Q(sext8),
        .R(1'b0));
  FDRE Shift_Carry_In_reg
       (.C(Clk),
        .CE(of_PipeRun),
        .D(correct_Carry),
        .Q(shift_Carry_In),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'hFFFF40FFFFFF4000)) 
    Sign_Extend_i_1
       (.I0(imm_Value[8]),
        .I1(imm_Value[10]),
        .I2(imm_Value[9]),
        .I3(of_PipeRun),
        .I4(PreFetch_Buffer_I_n_80),
        .I5(Shift_Oper),
        .O(Sign_Extend_i_1_n_0));
  FDRE Sign_Extend_reg
       (.C(Clk),
        .CE(1'b1),
        .D(Sign_Extend_i_1_n_0),
        .Q(Shift_Oper),
        .R(sync_reset));
  LUT2 #(
    .INIT(4'hE)) 
    Sleep_INST_0
       (.I0(Sleep_Decode),
        .I1(Sleep_Out),
        .O(Sleep));
  (* SOFT_HLUTNM = "soft_lutpair55" *) 
  LUT5 #(
    .INIT(32'hA2A2A280)) 
    Trace_Reg_Write_INST_0
       (.I0(trace_reg_write_novalid),
        .I1(jump2_I_1),
        .I2(Blocked_Valid_Instr),
        .I3(mul_Executing_done),
        .I4(trace_valid_instr_part1),
        .O(D[0]));
  (* SOFT_HLUTNM = "soft_lutpair55" *) 
  LUT4 #(
    .INIT(16'hF0EE)) 
    Trace_Valid_Instr_INST_0
       (.I0(trace_valid_instr_part1),
        .I1(mul_Executing_done),
        .I2(Blocked_Valid_Instr),
        .I3(jump2_I_1),
        .O(D[1]));
  FDRE Unsigned_Op_reg
       (.C(Clk),
        .CE(of_PipeRun),
        .D(imm_Value[14]),
        .Q(Unsigned_Op),
        .R(\Using_FPGA.of_PipeRun_MuxCY_1_n_12 ));
  LUT2 #(
    .INIT(4'hE)) 
    \Use_HW_MUL.Using_Mul64_1.mem_mulh_instr_i_1 
       (.I0(ex_mulhsu_instr),
        .I1(ex_mulh_instr),
        .O(mem_mulh_instr0));
  FDRE \Use_The_PCMP_instr.CLZ_Instr_reg 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(CLZ_Instr0),
        .Q(clz_instr),
        .R(MSRclr_Instr_i));
  FDRE \Use_The_PCMP_instr.PCMP_Instr_reg 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(PreFetch_Buffer_I_n_110),
        .Q(pcmp_instr),
        .R(MSRclr_Instr_i));
  FDRE \Using_Barrel_Shifter.BitField_Extract_reg 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(BitField_Extract0),
        .Q(BitField_Extract),
        .R(sync_reset));
  FDRE \Using_Barrel_Shifter.BitField_Insert_reg 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(BitField_Insert0),
        .Q(BitField_Insert),
        .R(sync_reset));
  FDRE \Using_Barrel_Shifter.Not_Barrel_Op_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(PreFetch_Buffer_I_n_91),
        .Q(Not_Barrel_Op),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h5555F7550000F300)) 
    \Using_Ext_Databus.mem_access_i_1 
       (.I0(DReady0_out),
        .I1(is_swx_I_reg_n_0),
        .I2(\Using_LWX_SWX_instr.reservation_reg_n_0 ),
        .I3(d_AS_I),
        .I4(ex_Valid_reg_0),
        .I5(mem_access),
        .O(is_swx_I_reg_0));
  block_design_microblaze_0_0_MB_FDRE \Using_FPGA.ALU_Carry_FDRE 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (of_PipeRun),
        .carry_In(carry_In),
        .correct_Carry_II(correct_Carry_II),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_MUXCY_87 \Using_FPGA.ALU_Carry_MUXCY 
       (.correct_Carry(correct_Carry),
        .correct_Carry_I(correct_Carry_I),
        .correct_Carry_Select(correct_Carry_Select),
        .lopt(lopt_12),
        .lopt_1(lopt_13),
        .lopt_2(load_Store_i2),
        .sub_Carry(sub_Carry));
  block_design_microblaze_0_0_MB_FDRE_88 \Using_FPGA.ALU_OP0_FDRE 
       (.Clk(Clk),
        .D_32(D_32),
        .\Using_FPGA.Native_0 (of_PipeRun),
        .alu_Op(alu_Op[0]),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_FDRE_89 \Using_FPGA.ALU_OP1_FDRE 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (of_PipeRun),
        .\Using_FPGA.Native_1 (PreFetch_Buffer_I_n_78),
        .alu_Op(alu_Op[1]),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_MUXCY_90 \Using_FPGA.Correct_Carry_MUXCY 
       (.EX_FSL_Carry(EX_FSL_Carry),
        .Shift_Carry_In_reg(\Using_FPGA.Native_i_4__7_n_0 ),
        .Shift_Carry_In_reg_0(\Using_MSR_Instr.msrxxx_write_carry_reg_n_0 ),
        .Shift_Carry_In_reg_1(write_Carry_I_reg_n_0),
        .Shift_Carry_In_reg_2(ex_Valid),
        .Shift_Carry_In_reg_3(ex_Valid_reg_0),
        .\Using_FPGA.Native_i_2__34_0 (break_Pipe_i_reg_0[1]),
        .\Using_FPGA.Native_i_2__34_1 (\LOCKSTEP_Out_reg[3] ),
        .\Using_FPGA.Native_i_2__34_2 (is_swx_I_reg_n_0),
        .\Using_FPGA.Native_i_2__34_3 (\Using_LWX_SWX_instr.reservation_reg_n_0 ),
        .\Using_FPGA.Native_i_6__2 (\Read_AXI_Area.S_AXIS_TREADY_reg[0] ),
        .\Using_FPGA.Native_i_6__2_0 (\Gen_M_Channel_Handling[1].M_AXIS_TLAST_reg[1] ),
        .correct_Carry(correct_Carry),
        .fsl_carry_hold_value(fsl_carry_hold_value),
        .is_lwx_I(is_lwx_I),
        .load_Store_i(load_Store_i),
        .lopt(\^lopt_1 ),
        .lopt_1(\^lopt_2 ),
        .lopt_2(\^lopt_3 ),
        .mb_Get_i(mb_Get_i),
        .mb_Put_i(mb_Put_i),
        .msrxxx_carry(msrxxx_carry),
        .new_Carry(new_Carry));
  LUT3 #(
    .INIT(8'h04)) 
    \Using_FPGA.DSP48E1_I1_i_1__0 
       (.I0(ex_mulhu_instr),
        .I1(\Using_FPGA.DSP48E1_I1 ),
        .I2(ex_mulhsu_instr),
        .O(\Using_Mul64.ex_mulhu_instr_i_reg_0 ));
  block_design_microblaze_0_0_MB_FDRE_91 \Using_FPGA.Force1_FDRE 
       (.Clk(Clk),
        .R22_out(R22_out),
        .\Using_FPGA.Native_0 (of_PipeRun),
        .force1(force1),
        .force1_i43_out(force1_i43_out));
  block_design_microblaze_0_0_MB_FDRE_92 \Using_FPGA.Force2_FDRE 
       (.Clk(Clk),
        .R22_out(R22_out),
        .\Using_FPGA.Native_0 (of_PipeRun),
        .\Using_FPGA.Native_1 (PreFetch_Buffer_I_n_109),
        .force2(force2));
  block_design_microblaze_0_0_MB_FDRE_93 \Using_FPGA.Force_Val1_FDRE 
       (.Clk(Clk),
        .R22_out(R22_out),
        .\Using_FPGA.Native_0 (of_PipeRun),
        .force_Val1(force_Val1),
        .force_Val1_i41_out(force_Val1_i41_out));
  block_design_microblaze_0_0_MB_FDRSE_94 \Using_FPGA.Force_Val2_FDRSE 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (exception_kind),
        .\Using_FPGA.Native_1 (PreFetch_Buffer_I_n_103),
        .force_Val2_N(force_Val2_N));
  block_design_microblaze_0_0_MB_LUT4__parameterized9 \Using_FPGA.I_correct_Carry_Select 
       (.\Using_FPGA.Native_0 (PreFetch_Buffer_I_n_77),
        .alu_Op_II(alu_Op_II),
        .correct_Carry_Select(correct_Carry_Select),
        .use_ALU_Carry21_out(use_ALU_Carry21_out));
  block_design_microblaze_0_0_MB_MUXCY_95 \Using_FPGA.Intr_Carry_MUXCY 
       (.correct_Carry_I(correct_Carry_I),
        .correct_Carry_II(correct_Carry_II),
        .load_Store_i2(load_Store_i2),
        .lopt(lopt_12),
        .lopt_1(lopt_13));
  block_design_microblaze_0_0_MB_MULT_AND \Using_FPGA.MULT_AND_I 
       (.\Using_FPGA.Native_0 (PreFetch_Buffer_I_n_77),
        .alu_Op_II(alu_Op_II),
        .sub_Carry(sub_Carry));
  block_design_microblaze_0_0_MB_MUXCY_96 \Using_FPGA.MUXCY_JUMP_CARRY 
       (.force_DI1(force_DI1),
        .force_jump1(force_jump1),
        .jump_Carry1(jump_Carry1),
        .lopt(\^lopt_4 ),
        .reg_zero(reg_zero));
  block_design_microblaze_0_0_MB_MUXCY_97 \Using_FPGA.MUXCY_JUMP_CARRY2 
       (.force_DI2(force_DI2),
        .force_jump2(force_jump2),
        .jump_Carry1(jump_Carry1),
        .jump_Carry2(jump_Carry2),
        .lopt(lopt_14),
        .lopt_1(lopt_15),
        .lopt_2(PreFetch_Buffer_I_n_97),
        .lopt_3(lopt_16),
        .lopt_4(lopt_17),
        .lopt_5(buffer_Full),
        .lopt_6(lopt_18),
        .lopt_7(lopt_19),
        .lopt_8(iFetch_In_Progress_reg_0));
  block_design_microblaze_0_0_MB_MUXCY_98 \Using_FPGA.MUXCY_JUMP_CARRY3 
       (.\Area_Debug_Control.force_stop_cmd_hold_reg (of_PipeRun),
        .DReady0_out(DReady0_out),
        .EX_delayslot_Instr_I_reg(jump2_I_reg_n_0),
        .FSL_Atomic(FSL_Atomic),
        .Interrupt(Interrupt),
        .PC_Write(PC_Write),
        .R22_out(R22_out),
        .S(S_0),
        .S115_out(S115_out),
        .\Serial_Dbg_Intf.force_stop_cmd_i_reg (\Serial_Dbg_Intf.force_stop_cmd_i_reg ),
        .\Using_FPGA.Native_0 (D[5]),
        .\Using_FPGA.Native_1 (using_Imm_reg_0),
        .\Using_FPGA.Native_2 (exception_kind),
        .branch_with_delay(branch_with_delay),
        .break_Pipe_i_reg({break_Pipe_i_reg_0[2],break_Pipe_i_reg_0[0]}),
        .break_Pipe_i_reg0(break_Pipe_i_reg0),
        .break_Pipe_i_reg_0(\Using_dynamic_instr_Address.Interrupt_Ack_reg[1]_0 ),
        .break_Pipe_i_reg_1(ex_Valid),
        .break_Pipe_i_reg_2(\Using_MSR_Instr.write_MSR_I_reg_n_0 ),
        .dbg_pause_reg(jump),
        .ex_Valid_reg(ex_Valid_reg_0),
        .force_stop_cmd_hold(force_stop_cmd_hold),
        .force_stop_cmd_i(force_stop_cmd_i),
        .inHibit_EX(inHibit_EX),
        .jump_Carry2(jump_Carry2),
        .load_Store_i(load_Store_i),
        .load_Store_i_reg(\Using_FPGA.MUXCY_JUMP_CARRY3_n_4 ),
        .lopt(lopt_14),
        .lopt_1(lopt_15),
        .mul_Executing_reg(\Using_FPGA.MUXCY_JUMP_CARRY3_n_1 ),
        .sync_reset(sync_reset),
        .take_Intr_Now_III(take_Intr_Now_III),
        .trace_jump_taken_i_reg(PreFetch_Buffer_I_n_97));
  (* SOFT_HLUTNM = "soft_lutpair58" *) 
  LUT3 #(
    .INIT(8'h54)) 
    \Using_FPGA.Native_i_1__164 
       (.I0(BitField_Extract),
        .I1(\instr_EX_i_reg[21]_0 ),
        .I2(BitField_Insert),
        .O(\Using_Barrel_Shifter.BitField_Extract_reg_0 ));
  LUT6 #(
    .INIT(64'hEC20EC20EC20EF20)) 
    \Using_FPGA.Native_i_1__42 
       (.I0(\Using_FPGA.Native_14 ),
        .I1(ex_Valid_reg_0),
        .I2(sext8),
        .I3(doublet_Read),
        .I4(pcmp_instr),
        .I5(clz_instr),
        .O(Data_Read_Mask));
  LUT6 #(
    .INIT(64'hB8BBB888B888B888)) 
    \Using_FPGA.Native_i_1__44 
       (.I0(\Using_FPGA.Native_14 ),
        .I1(\Using_FPGA.Native_i_3__0_n_0 ),
        .I2(\Using_FPGA.Native_15 ),
        .I3(\Using_FPGA.Native_i_4__3_n_0 ),
        .I4(quadlet_Read),
        .I5(\Use_The_PCMP_instr.PCMP_Instr_reg_0 ),
        .O(\Using_FPGA.Native_1 ));
  (* SOFT_HLUTNM = "soft_lutpair60" *) 
  LUT4 #(
    .INIT(16'hA0A2)) 
    \Using_FPGA.Native_i_1__50 
       (.I0(Shift_Logic_Res),
        .I1(clz_instr),
        .I2(ex_Valid_reg_0),
        .I3(pcmp_instr),
        .O(\Use_The_PCMP_instr.CLZ_Instr_reg_0 [0]));
  (* SOFT_HLUTNM = "soft_lutpair60" *) 
  LUT4 #(
    .INIT(16'hA0A2)) 
    \Using_FPGA.Native_i_1__51 
       (.I0(\Using_FPGA.Native_16 ),
        .I1(clz_instr),
        .I2(ex_Valid_reg_0),
        .I3(pcmp_instr),
        .O(\Use_The_PCMP_instr.CLZ_Instr_reg_0 [1]));
  LUT3 #(
    .INIT(8'h04)) 
    \Using_FPGA.Native_i_1__52 
       (.I0(ex_Valid_reg_0),
        .I1(pcmp_instr),
        .I2(Logic_Oper[0]),
        .O(Enable_2));
  LUT2 #(
    .INIT(4'h2)) 
    \Using_FPGA.Native_i_1__54 
       (.I0(reg_Write_I),
        .I1(ex_Valid_reg_0),
        .O(Reg_Write));
  LUT4 #(
    .INIT(16'h00E2)) 
    \Using_FPGA.Native_i_1__66 
       (.I0(\void_bit16_reg[0] ),
        .I1(\instr_EX_i_reg[26]_0 ),
        .I2(shift_Carry_In),
        .I3(\instr_EX_i_reg[25]_0 ),
        .O(Shifted));
  LUT5 #(
    .INIT(32'hFFBF0080)) 
    \Using_FPGA.Native_i_1__68 
       (.I0(shift_Carry_In),
        .I1(MSRxxx_Instr_i),
        .I2(ex_Valid),
        .I3(ex_Valid_reg_0),
        .I4(\Using_FPGA.Native_17 ),
        .O(Op1_Shift));
  LUT6 #(
    .INIT(64'hFBFF0B0FFBFF0800)) 
    \Using_FPGA.Native_i_1__70 
       (.I0(B[3]),
        .I1(MSRclr_Instr),
        .I2(\LOCKSTEP_Out_reg[3] ),
        .I3(MSRxxx_Instr_i),
        .I4(sync_reset),
        .I5(\Using_FPGA.reset_BIP_I_reg_n_0 ),
        .O(\Using_FPGA.Native_5 ));
  LUT6 #(
    .INIT(64'hFBFFFFFF08000000)) 
    \Using_FPGA.Native_i_1__71 
       (.I0(B[4]),
        .I1(MSRclr_Instr),
        .I2(ex_Valid_reg_0),
        .I3(ex_Valid),
        .I4(MSRxxx_Instr_i),
        .I5(sync_reset),
        .O(MSR_Rst));
  LUT2 #(
    .INIT(4'h2)) 
    \Using_FPGA.Native_i_1__74 
       (.I0(pcmp_instr),
        .I1(ex_Valid_reg_0),
        .O(\Use_The_PCMP_instr.PCMP_Instr_reg_1 ));
  LUT3 #(
    .INIT(8'h04)) 
    \Using_FPGA.Native_i_1__75 
       (.I0(ex_Valid_reg_0),
        .I1(pcmp_instr),
        .I2(Logic_Oper[0]),
        .O(\Using_FPGA.Native_9 ));
  LUT2 #(
    .INIT(4'h2)) 
    \Using_FPGA.Native_i_1__76 
       (.I0(pcmp_instr),
        .I1(ex_Valid_reg_0),
        .O(\Use_The_PCMP_instr.PCMP_Instr_reg_2 ));
  LUT3 #(
    .INIT(8'h04)) 
    \Using_FPGA.Native_i_1__77 
       (.I0(ex_Valid_reg_0),
        .I1(pcmp_instr),
        .I2(Logic_Oper[0]),
        .O(\Using_FPGA.Native_10 ));
  LUT2 #(
    .INIT(4'h2)) 
    \Using_FPGA.Native_i_1__78 
       (.I0(pcmp_instr),
        .I1(ex_Valid_reg_0),
        .O(\Use_The_PCMP_instr.PCMP_Instr_reg_3 ));
  LUT3 #(
    .INIT(8'h04)) 
    \Using_FPGA.Native_i_1__79 
       (.I0(ex_Valid_reg_0),
        .I1(pcmp_instr),
        .I2(Logic_Oper[0]),
        .O(\Using_FPGA.Native_11 ));
  LUT2 #(
    .INIT(4'h2)) 
    \Using_FPGA.Native_i_1__80 
       (.I0(pcmp_instr),
        .I1(ex_Valid_reg_0),
        .O(\Use_The_PCMP_instr.PCMP_Instr_reg_4 ));
  (* SOFT_HLUTNM = "soft_lutpair68" *) 
  LUT3 #(
    .INIT(8'h20)) 
    \Using_FPGA.Native_i_2__30 
       (.I0(Logic_Oper[0]),
        .I1(ex_Valid_reg_0),
        .I2(pcmp_instr),
        .O(I3_35));
  LUT5 #(
    .INIT(32'hFFBF0080)) 
    \Using_FPGA.Native_i_2__33 
       (.I0(shift_Carry_In),
        .I1(MSRxxx_Instr_i),
        .I2(ex_Valid),
        .I3(ex_Valid_reg_0),
        .I4(\void_bit16_reg[0] ),
        .O(Shift_Carry_In_reg_0));
  (* SOFT_HLUTNM = "soft_lutpair66" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \Using_FPGA.Native_i_3__0 
       (.I0(sext8),
        .I1(ex_Valid_reg_0),
        .O(\Using_FPGA.Native_i_3__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair68" *) 
  LUT3 #(
    .INIT(8'hCD)) 
    \Using_FPGA.Native_i_3__1 
       (.I0(pcmp_instr),
        .I1(ex_Valid_reg_0),
        .I2(clz_instr),
        .O(\Use_The_PCMP_instr.PCMP_Instr_reg_0 ));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \Using_FPGA.Native_i_3__12 
       (.I0(Q[4]),
        .I1(Q[3]),
        .I2(Q[0]),
        .I3(Q[1]),
        .I4(Q[2]),
        .O(\Using_FPGA.Native_i_3__12_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair62" *) 
  LUT4 #(
    .INIT(16'h2000)) 
    \Using_FPGA.Native_i_3__3 
       (.I0(MSRclr_Instr),
        .I1(ex_Valid_reg_0),
        .I2(ex_Valid),
        .I3(MSRxxx_Instr_i),
        .O(\Using_FPGA.Native_i_3__3_n_0 ));
  LUT6 #(
    .INIT(64'h3030203000002000)) 
    \Using_FPGA.Native_i_3__4 
       (.I0(B[3]),
        .I1(ex_Valid_reg_0),
        .I2(ex_Valid),
        .I3(MSRxxx_Instr_i),
        .I4(MSRclr_Instr),
        .I5(\Using_FPGA.set_BIP_I_reg_n_0 ),
        .O(\Using_FPGA.Native_7 ));
  (* SOFT_HLUTNM = "soft_lutpair70" *) 
  LUT3 #(
    .INIT(8'h08)) 
    \Using_FPGA.Native_i_3__5 
       (.I0(write_Carry_I_reg_n_0),
        .I1(ex_Valid),
        .I2(ex_Valid_reg_0),
        .O(write_Carry));
  LUT6 #(
    .INIT(64'h0000044000000000)) 
    \Using_FPGA.Native_i_3__6 
       (.I0(FSL_Break_No_Dbg),
        .I1(\Read_AXI_Area.S_AXIS_TREADY_reg[0] ),
        .I2(FSL_Put_Control),
        .I3(\Using_FPGA.Native_12 ),
        .I4(FSL_Put_Inhibit),
        .I5(\Read_AXI_Area.S_AXIS_TREADY[0]_i_3_n_0 ),
        .O(set_FSL_Error));
  LUT2 #(
    .INIT(4'h2)) 
    \Using_FPGA.Native_i_4 
       (.I0(pcmp_instr),
        .I1(ex_Valid_reg_0),
        .O(PCMP_Instr2_out));
  LUT6 #(
    .INIT(64'hFFFFFFFF0E0E0E0A)) 
    \Using_FPGA.Native_i_4__2 
       (.I0(mtsmsr_write_i_reg_0),
        .I1(load_Store_i),
        .I2(\LOCKSTEP_Out_reg[3] ),
        .I3(is_lwx_I),
        .I4(is_swx_I_reg_n_0),
        .I5(\Using_FPGA.Native_i_4__7_n_0 ),
        .O(mtsmsr_write_i_reg_1));
  (* SOFT_HLUTNM = "soft_lutpair74" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \Using_FPGA.Native_i_4__3 
       (.I0(sext16),
        .I1(ex_Valid_reg_0),
        .O(\Using_FPGA.Native_i_4__3_n_0 ));
  LUT6 #(
    .INIT(64'h3030203000002000)) 
    \Using_FPGA.Native_i_4__4 
       (.I0(B[1]),
        .I1(ex_Valid_reg_0),
        .I2(ex_Valid),
        .I3(MSRxxx_Instr_i),
        .I4(MSRclr_Instr),
        .I5(\Using_FPGA.enable_Interrupts_I_reg_n_0 ),
        .O(\Using_FPGA.Native_6 ));
  (* SOFT_HLUTNM = "soft_lutpair62" *) 
  LUT4 #(
    .INIT(16'h0040)) 
    \Using_FPGA.Native_i_4__5 
       (.I0(ex_Valid_reg_0),
        .I1(ex_Valid),
        .I2(MSRxxx_Instr_i),
        .I3(MSRclr_Instr),
        .O(\Using_FPGA.Native_8 ));
  LUT6 #(
    .INIT(64'h5555555500110010)) 
    \Using_FPGA.Native_i_4__7 
       (.I0(FSL_Break),
        .I1(FSL_Put_Blocking),
        .I2(mb_Get_i),
        .I3(\LOCKSTEP_Out_reg[3] ),
        .I4(mb_Put_i),
        .I5(fsl_carry_hold),
        .O(\Using_FPGA.Native_i_4__7_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair65" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \Using_FPGA.Native_i_5__1 
       (.I0(clz_instr),
        .I1(ex_Valid_reg_0),
        .O(\Use_The_PCMP_instr.CLZ_Instr_reg_1 ));
  (* SOFT_HLUTNM = "soft_lutpair67" *) 
  LUT4 #(
    .INIT(16'h2000)) 
    \Using_FPGA.Native_i_5__2 
       (.I0(B[2]),
        .I1(ex_Valid_reg_0),
        .I2(ex_Valid),
        .I3(MSRxxx_Instr_i),
        .O(\Using_FPGA.Native_3 ));
  (* SOFT_HLUTNM = "soft_lutpair67" *) 
  LUT3 #(
    .INIT(8'h08)) 
    \Using_FPGA.Native_i_5__3 
       (.I0(mtsmsr_write_i_reg_0),
        .I1(ex_Valid),
        .I2(ex_Valid_reg_0),
        .O(MTSMSR_Write));
  LUT6 #(
    .INIT(64'h00000000B8FFB800)) 
    \Using_FPGA.Native_i_6__2 
       (.I0(EX_FSL_Carry),
        .I1(\Using_FPGA.Native_i_4__7_n_0 ),
        .I2(\Using_FPGA.Native_17 ),
        .I3(\Using_FPGA.Native_i_7__3_n_0 ),
        .I4(LWX_SWX_Carry),
        .I5(\Using_FPGA.Native_3 ),
        .O(\Using_FPGA.Native_2 ));
  LUT5 #(
    .INIT(32'hDFDFDFFF)) 
    \Using_FPGA.Native_i_7__3 
       (.I0(load_Store_i),
        .I1(ex_Valid_reg_0),
        .I2(ex_Valid),
        .I3(is_lwx_I),
        .I4(is_swx_I_reg_n_0),
        .O(\Using_FPGA.Native_i_7__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair57" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \Using_FPGA.Native_i_8__2 
       (.I0(is_swx_I_reg_n_0),
        .I1(\Using_LWX_SWX_instr.reservation_reg_n_0 ),
        .O(LWX_SWX_Carry));
  block_design_microblaze_0_0_MB_MUXCY_99 \Using_FPGA.New_Carry_MUXCY 
       (.LO(LO),
        .Op1(Op1),
        .\Use_Async_Reset.sync_reset_reg (\Use_Async_Reset.sync_reset_reg ),
        .\Using_FPGA.Native_0 (write_Carry_I_reg_n_0),
        .\Using_FPGA.Native_1 (ex_Valid),
        .\Using_FPGA.Native_2 (ex_Valid_reg_0),
        .lopt(lopt),
        .new_Carry(new_Carry),
        .select_ALU_Carry(select_ALU_Carry),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_LUT4__parameterized1 \Using_FPGA.OpSel1_SPR_Select_LUT_1 
       (.instr_OF_raw({instr_OF_raw[0],instr_OF_raw[1],instr_OF_raw[3],instr_OF_raw[4]}),
        .opsel1_SPR_Select_1(opsel1_SPR_Select_1));
  block_design_microblaze_0_0_MB_LUT4__parameterized3 \Using_FPGA.OpSel1_SPR_Select_LUT_2 
       (.instr_OF_raw({instr_OF_raw[0],instr_OF_raw[1],instr_OF_raw[2],instr_OF_raw[3]}),
        .opsel1_SPR_Select_2_1(opsel1_SPR_Select_2_1));
  block_design_microblaze_0_0_MB_LUT3 \Using_FPGA.OpSel1_SPR_Select_LUT_3 
       (.D(imm_Value[1]),
        .instr_OF_raw({instr_OF_raw[4],instr_OF_raw[5]}),
        .opsel1_SPR_Select_2_2(opsel1_SPR_Select_2_2));
  block_design_microblaze_0_0_MB_LUT3__parameterized1 \Using_FPGA.OpSel1_SPR_Select_LUT_4 
       (.opsel1_SPR_Select(opsel1_SPR_Select),
        .opsel1_SPR_Select_1(opsel1_SPR_Select_1),
        .opsel1_SPR_Select_2_1(opsel1_SPR_Select_2_1),
        .opsel1_SPR_Select_2_2(opsel1_SPR_Select_2_2));
  block_design_microblaze_0_0_MB_FDSE \Using_FPGA.Reg_Test_Equal_FDSE 
       (.Clk(Clk),
        .R22_out(R22_out),
        .Reg_Test_Equal_i(Reg_Test_Equal_i),
        .\Using_FPGA.Native_0 (of_PipeRun),
        .reg_Test_Equal(reg_Test_Equal));
  block_design_microblaze_0_0_MB_FDRE_100 \Using_FPGA.Reg_Test_Equal_N_FDRE 
       (.Clk(Clk),
        .R22_out(R22_out),
        .Reg_Test_Equal_N_i13_out(Reg_Test_Equal_N_i13_out),
        .\Using_FPGA.Native_0 (of_PipeRun),
        .reg_Test_Equal_N(reg_Test_Equal_N));
  block_design_microblaze_0_0_MB_LUT4__parameterized5 \Using_FPGA.Res_Forward1_LUT1 
       (.Q(Q[4:3]),
        .reg1_Addr({reg1_Addr[0],reg1_Addr[1]}),
        .res_forward1_1(res_forward1_1));
  block_design_microblaze_0_0_MB_LUT4__parameterized5_101 \Using_FPGA.Res_Forward1_LUT2 
       (.Q(Q[2:1]),
        .reg1_Addr({reg1_Addr[2],reg1_Addr[3]}),
        .res_forward1_2(res_forward1_2));
  block_design_microblaze_0_0_MB_LUT3__parameterized3 \Using_FPGA.Res_Forward1_LUT3 
       (.Q(Q[0]),
        .\Using_FPGA.Native_0 (ex_Valid),
        .reg1_Addr(reg1_Addr[4]),
        .res_forward1_3(res_forward1_3));
  block_design_microblaze_0_0_MB_LUT4__parameterized7 \Using_FPGA.Res_Forward1_LUT4 
       (.res_Forward1(res_Forward1),
        .res_forward1_1(res_forward1_1),
        .res_forward1_2(res_forward1_2),
        .res_forward1_3(res_forward1_3),
        .write_Reg_I_S(write_Reg_I_S));
  block_design_microblaze_0_0_MB_LUT4__parameterized5_102 \Using_FPGA.Res_Forward2_LUT1 
       (.Q(Q[4:3]),
        .imm_Value({imm_Value[0],imm_Value[1]}),
        .res_forward2_1(res_forward2_1));
  block_design_microblaze_0_0_MB_LUT4__parameterized5_103 \Using_FPGA.Res_Forward2_LUT2 
       (.Q(Q[2:1]),
        .imm_Value({imm_Value[2],imm_Value[3]}),
        .res_forward2_2(res_forward2_2));
  block_design_microblaze_0_0_MB_LUT3__parameterized3_104 \Using_FPGA.Res_Forward2_LUT3 
       (.Q(Q[0]),
        .\Using_FPGA.Native_0 (ex_Valid),
        .imm_Value(imm_Value[4]),
        .res_forward2_3(res_forward2_3));
  block_design_microblaze_0_0_MB_LUT4__parameterized7_105 \Using_FPGA.Res_Forward2_LUT4 
       (.res_Forward2(res_Forward2),
        .res_forward2_1(res_forward2_1),
        .res_forward2_2(res_forward2_2),
        .res_forward2_3(res_forward2_3),
        .write_Reg_I_S(write_Reg_I_S));
  block_design_microblaze_0_0_MB_FDRE_106 \Using_FPGA.Use_Reg_Neg_DI_FDRE 
       (.Clk(Clk),
        .R22_out(R22_out),
        .\Using_FPGA.Native_0 (of_PipeRun),
        .use_Reg_Neg_DI(use_Reg_Neg_DI),
        .use_Reg_Neg_DI_i40_out(use_Reg_Neg_DI_i40_out));
  block_design_microblaze_0_0_MB_FDRE_107 \Using_FPGA.Use_Reg_Neg_S_FDRE 
       (.Clk(Clk),
        .R22_out(R22_out),
        .\Using_FPGA.Native_0 (of_PipeRun),
        .use_Reg_Neg_S(use_Reg_Neg_S),
        .use_Reg_Neg_S_i42_out(use_Reg_Neg_S_i42_out));
  block_design_microblaze_0_0_MB_MUXCY_108 \Using_FPGA.Using_Breakable_Pipe.OpSel1_SPR_MUXCY_1 
       (.lopt(lopt_28),
        .lopt_1(lopt_29),
        .lopt_2(p_20_in),
        .opsel1_SPR_I(opsel1_SPR_I),
        .opsel1_SPR_Select(opsel1_SPR_Select),
        .take_Intr_Now_III(take_Intr_Now_III));
  block_design_microblaze_0_0_MB_MUXCY_109 \Using_FPGA.Using_Breakable_Pipe.Take_Intr_MUXCY_1 
       (.FSL_Break_No_Dbg(FSL_Break_No_Dbg),
        .\Using_FPGA.Native_0 (of_PipeRun),
        .\Using_FPGA.Native_1 (exception_kind),
        .\Using_FPGA.Native_2 (jump2_I_reg_n_0),
        .\Using_FPGA.Native_3 (use_Imm_Reg),
        .inHibit_EX(inHibit_EX),
        .lopt(lopt_20),
        .lopt_1(lopt_21),
        .lopt_2(lopt_22),
        .take_Intr_Now_I(take_Intr_Now_I));
  block_design_microblaze_0_0_MB_MUXCY_110 \Using_FPGA.Using_Breakable_Pipe.Take_Intr_MUXCY_2 
       (.S(S),
        .lopt(lopt_23),
        .lopt_1(lopt_24),
        .take_Intr_Now_I(take_Intr_Now_I),
        .take_Intr_Now_II(take_Intr_Now_II));
  block_design_microblaze_0_0_MB_MUXCY_111 \Using_FPGA.Using_Breakable_Pipe.Take_Intr_MUXCY_3 
       (.B(B[1]),
        .FSL_Break_No_Dbg(FSL_Break_No_Dbg),
        .FSL_Will_Break_No_Dbg(FSL_Will_Break_No_Dbg),
        .Select_Logic0(Select_Logic0),
        .\Use_Async_Reset.sync_reset_reg (\Using_FPGA.Using_Breakable_Pipe.Take_Intr_MUXCY_3_n_5 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_4 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_i_3__3_n_0 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.Using_Breakable_Pipe.Take_Intr_MUXCY_3_n_1 ),
        .break_Pipe_i_reg__0(break_Pipe_i_reg__0),
        .inHibit_EX(inHibit_EX),
        .inHibit_EX_reg(exception_kind),
        .inHibit_EX_reg_0(PreFetch_Buffer_I_n_49),
        .inHibit_EX_reg_1(of_PipeRun),
        .inHibit_EX_reg_2(inHibit_EX_i_3_n_0),
        .instr_OF_raw(instr_OF_raw[3]),
        .load_Store_i2(load_Store_i2),
        .lopt(lopt_25),
        .lopt_1(lopt_26),
        .lopt_2(lopt_27),
        .mbar_first_reg(jump),
        .ok_To_Stop(ok_To_Stop),
        .sync_reset(sync_reset),
        .take_Intr_Now_II(take_Intr_Now_II),
        .take_Intr_Now_III(take_Intr_Now_III),
        .take_intr_2nd_cycle0(take_intr_2nd_cycle0));
  block_design_microblaze_0_0_MB_MUXCY_112 \Using_FPGA.Using_Breakable_Pipe.Using_ExtraOpSel1.OpSel1_SPR_MUXCY_2 
       (.lopt(lopt_28),
        .lopt_1(lopt_29),
        .opsel1_SPR(opsel1_SPR),
        .opsel1_SPR_I(opsel1_SPR_I),
        .p_20_in(p_20_in));
  FDRE \Using_FPGA.Valid_Instr_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(Valid_Instr0),
        .Q(Valid_Instr_i),
        .R(sync_reset));
  block_design_microblaze_0_0_MB_MUXCY_113 \Using_FPGA.clean_iReady_MuxCY 
       (.IReady(IReady),
        .IReady1_out(IReady1_out),
        .\instr_EX_i_reg[9] (nonvalid_IFetch_n_reg_n_0),
        .lopt(\^lopt_5 ),
        .lopt_1(of_PipeRun),
        .lopt_2(S1_out),
        .lopt_3(\^lopt_6 ),
        .lopt_4(\^lopt_7 ),
        .lopt_5(lopt_8),
        .lopt_6(lopt_9),
        .lopt_7(lopt_10),
        .lopt_8(lopt_11));
  FDRE \Using_FPGA.enable_Interrupts_I_reg 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(enable_Interrupts_I),
        .Q(\Using_FPGA.enable_Interrupts_I_reg_n_0 ),
        .R(sync_reset));
  block_design_microblaze_0_0_MB_LUT3__parameterized5 \Using_FPGA.force_di1_LUT3 
       (.Reg1(Reg1),
        .force_DI1(force_DI1),
        .force_Val1(force_Val1),
        .use_Reg_Neg_DI(use_Reg_Neg_DI));
  block_design_microblaze_0_0_MB_LUT4__parameterized11 \Using_FPGA.force_di2_LUT4 
       (.\Using_FPGA.Native_0 (ex_Valid),
        .\Using_FPGA.Native_1 (ex_Valid_reg_0),
        .force_DI2(force_DI2),
        .force_Val2_N(force_Val2_N));
  block_design_microblaze_0_0_MB_LUT3__parameterized5_114 \Using_FPGA.force_jump1_LUT3 
       (.Reg1(Reg1),
        .force1(force1),
        .force_jump1(force_jump1),
        .use_Reg_Neg_S(use_Reg_Neg_S));
  block_design_microblaze_0_0_MB_LUT4__parameterized3_115 \Using_FPGA.force_jump2_LUT4 
       (.\Using_FPGA.Native_0 (ex_Valid),
        .\Using_FPGA.Native_1 (ex_Valid_reg_0),
        .force2(force2),
        .force_jump2(force_jump2));
  block_design_microblaze_0_0_MB_MUXCY_116 \Using_FPGA.iFetch_MuxCY_1 
       (.\Using_FPGA.Native_0 (jump),
        .buffer_Full(buffer_Full),
        .ifetch_carry1(ifetch_carry1),
        .lopt(lopt_16),
        .lopt_1(lopt_17));
  block_design_microblaze_0_0_MB_MUXCY_117 \Using_FPGA.iFetch_MuxCY_2 
       (.\LOCKSTEP_Out_reg[3] (\LOCKSTEP_Out_reg[3] ),
        .\LOCKSTEP_Out_reg[3]_0 (\LOCKSTEP_Out_reg[3]_0 ),
        .\Serial_Dbg_Intf.if_debug_ready_i_reg (\Using_FPGA.iFetch_MuxCY_2_n_4 ),
        .iFetch_In_Progress(iFetch_In_Progress),
        .iFetch_In_Progress_reg(\Using_FPGA.iFetch_MuxCY_2_n_3 ),
        .iFetch_In_Progress_reg_0(iFetch_In_Progress_reg_0),
        .ifetch_carry1(ifetch_carry1),
        .ifetch_carry2(ifetch_carry2),
        .lopt(lopt_18),
        .lopt_1(lopt_19),
        .mbar_decode_I(mbar_decode_I),
        .mbar_hold_I_reg(\Using_FPGA.iFetch_MuxCY_2_n_1 ),
        .mbar_hold_I_reg_0(PreFetch_Buffer_I_n_63),
        .mbar_hold_I_reg_1(of_PipeRun),
        .mbar_hold_I_reg_2(mbar_hold_I_reg_n_0),
        .missed_IFetch(missed_IFetch),
        .missed_IFetch_reg(missed_IFetch_reg_0),
        .missed_IFetch_reg_0(missed_IFetch_reg_1),
        .missed_IFetch_reg_1(jump),
        .mul_Executing(mul_Executing),
        .mul_Executing_reg(D[5]),
        .sync_reset(sync_reset),
        .take_Intr_Now_III(take_Intr_Now_III));
  block_design_microblaze_0_0_MB_MUXCY_118 \Using_FPGA.iFetch_MuxCY_3 
       (.D(D[6]),
        .iFetch_In_Progress(iFetch_In_Progress),
        .ifetch_carry2(ifetch_carry2));
  block_design_microblaze_0_0_MB_MUXCY_119 \Using_FPGA.of_PipeRun_MuxCY_1 
       (.Blocked_Valid_Instr0(Blocked_Valid_Instr0),
        .Blocked_Valid_Instr_reg(jump2_I_reg_n_0),
        .Buffer_Addr(Buffer_Addr[0]),
        .DReady(DReady),
        .DReady0_out(DReady0_out),
        .E(\Using_FPGA.of_PipeRun_MuxCY_1_n_10 ),
        .FSL_Break(FSL_Break),
        .FSL_Put_Inhibit(FSL_Put_Inhibit),
        .FSL_Will_Break_No_Dbg(FSL_Will_Break_No_Dbg),
        .I2118_out(I2118_out),
        .MEM_DAXI_Data_Strobe(MEM_DAXI_Data_Strobe),
        .MSRclr_Instr_i(MSRclr_Instr_i),
        .OF_PipeRun(OF_PipeRun),
        .S115_out(S115_out),
        .Unsigned_Op_reg(exception_kind),
        .\Use_Async_Reset.sync_reset_reg (\Using_FPGA.of_PipeRun_MuxCY_1_n_12 ),
        .\Using_FPGA.Native_0 (S1_out),
        .\Using_FPGA.Native_1 (\Using_FPGA.of_PipeRun_MuxCY_1_n_9 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.of_PipeRun_MuxCY_1_n_15 ),
        .\Using_FSL_Links.Using_Extended_FSL.FSL_Will_Break_reg (\Using_FPGA.of_PipeRun_MuxCY_1_n_4 ),
        .\Using_FSL_Links.mb_Get_i_i_4_0 (\Using_FSL_Links.mb_Get_i_i_8_n_0 ),
        .\Using_FSL_Links.mb_Get_i_i_4_1 (\Read_AXI_Area.S_AXIS_TREADY_reg[0] ),
        .\Using_FSL_Links.mb_Get_i_i_4_2 (\Read_AXI_Area.S_AXIS_TREADY[0]_i_3_n_0 ),
        .\Using_FSL_Links.mb_Put_i_reg (\Using_FPGA.of_PipeRun_MuxCY_1_n_17 ),
        .\Using_FSL_Links.mb_Put_i_reg_0 (\LOCKSTEP_Out_reg[3] ),
        .\Using_FSL_Links.mb_Put_i_reg_1 (\Gen_M_Channel_Handling[1].M_AXIS_TLAST_reg[1] ),
        .\Using_LWX_SWX_instr.reservation_reg (\Using_FPGA.of_PipeRun_MuxCY_1_n_11 ),
        .\Using_LWX_SWX_instr.reservation_reg_0 (is_swx_I_reg_n_0),
        .\Using_LWX_SWX_instr.reservation_reg_1 (\Using_LWX_SWX_instr.reservation_reg_n_0 ),
        .\Using_LWX_SWX_instr.reservation_reg_2 (\Using_FPGA.Using_Breakable_Pipe.Take_Intr_MUXCY_3_n_5 ),
        .Valid_Instr0(Valid_Instr0),
        .break_Pipe_i_reg(\Using_FPGA.of_PipeRun_MuxCY_1_n_1 ),
        .break_Pipe_i_reg__0(break_Pipe_i_reg__0),
        .dbg_pause(dbg_pause),
        .delay_slot_instr_reg(delay_slot_instr_reg),
        .ex_Valid_1st_cycle_reg(jump),
        .ex_Valid_reg(ex_Valid_reg_0),
        .ex_Valid_reg_0(ex_Valid),
        .ex_Valid_reg_1(\Using_FPGA.MUXCY_JUMP_CARRY3_n_4 ),
        .inHibit_EX(inHibit_EX),
        .inHibit_EX_reg(\Using_FPGA.of_PipeRun_MuxCY_1_n_8 ),
        .is_lwx_I(is_lwx_I),
        .is_swx_I(is_swx_I),
        .is_swx_I0(is_swx_I0),
        .is_swx_I_reg(\Using_FPGA.of_PipeRun_MuxCY_1_n_3 ),
        .is_swx_I_reg_0(\Using_FPGA.of_PipeRun_MuxCY_1_n_19 ),
        .jump_Carry2(jump_Carry2),
        .load_Store_i(load_Store_i),
        .load_Store_i_reg(\Using_FPGA.of_PipeRun_MuxCY_1_n_18 ),
        .load_Store_i_reg_0(PreFetch_Buffer_I_n_54),
        .lopt(lopt_20),
        .lopt_1(lopt_21),
        .lopt_2(lopt_22),
        .lopt_3(lopt_23),
        .lopt_4(lopt_24),
        .lopt_5(S),
        .lopt_6(lopt_25),
        .lopt_7(lopt_26),
        .lopt_8(lopt_27),
        .mb_Put_i(mb_Put_i),
        .mb_Put_i5_out(mb_Put_i5_out),
        .mul_Executing(mul_Executing),
        .mul_Executing_reg(of_PipeRun),
        .of_PipeRun_Select(of_PipeRun_Select),
        .of_PipeRun_without_dready(of_PipeRun_without_dready),
        .of_Valid_Raw(of_Valid_Raw),
        .reservation2(reservation2),
        .swx_ready(swx_ready),
        .sync_reset(sync_reset),
        .take_Intr_Now_III(take_Intr_Now_III),
        .take_intr_2nd_cycle0(take_intr_2nd_cycle0),
        .take_intr_2nd_cycle_reg(take_intr_2nd_cycle_reg_n_0),
        .take_intr_Done(take_intr_Done),
        .using_Imm_reg(\Using_FPGA.of_PipeRun_MuxCY_1_n_2 ),
        .using_Imm_reg_0(use_Imm_Reg),
        .using_Imm_reg_1(PreFetch_Buffer_I_n_108),
        .using_Imm_reg_2(using_Imm_reg_0),
        .write_Reg_reg(\Using_FPGA.of_PipeRun_MuxCY_1_n_16 ),
        .write_Reg_reg_0(write_Reg_reg_n_0),
        .write_Reg_reg_1(PreFetch_Buffer_I_n_52));
  block_design_microblaze_0_0_MB_LUT5 \Using_FPGA.of_PipeRun_Select_LUT5 
       (.I2118_out(I2118_out),
        .\Using_FPGA.Native_0 (using_Imm_reg_0),
        .dbg_pause(dbg_pause),
        .mul_Executing(mul_Executing),
        .of_PipeRun_Select(of_PipeRun_Select),
        .of_Valid_Raw(of_Valid_Raw));
  block_design_microblaze_0_0_MB_LUT5__parameterized1 \Using_FPGA.of_PipeRun_without_dready_LUT5 
       (.I2118_out(I2118_out),
        .Pause_Ack_reg(ex_Valid_reg_0),
        .\Using_FPGA.Native_0 (using_Imm_reg_0),
        .dbg_pause(dbg_pause),
        .load_Store_i(load_Store_i),
        .mul_Executing(mul_Executing),
        .of_PipeRun_without_dready(of_PipeRun_without_dready),
        .of_Valid_Raw(of_Valid_Raw));
  FDRE \Using_FPGA.reset_BIP_I_reg 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(reset_BIP_I15_out),
        .Q(\Using_FPGA.reset_BIP_I_reg_n_0 ),
        .R(sync_reset));
  FDRE \Using_FPGA.set_BIP_I_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(PreFetch_Buffer_I_n_37),
        .Q(\Using_FPGA.set_BIP_I_reg_n_0 ),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h33B8)) 
    \Using_FPGA.take_Intr_2nd_Phase_i_1 
       (.I0(take_Intr_Now_III),
        .I1(of_PipeRun),
        .I2(FSL_Break_No_Dbg),
        .I3(exception_kind),
        .O(\Using_FPGA.take_Intr_2nd_Phase_i_1_n_0 ));
  FDRE \Using_FPGA.take_Intr_2nd_Phase_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.take_Intr_2nd_Phase_i_1_n_0 ),
        .Q(exception_kind),
        .R(sync_reset));
  FDRE \Using_FSL_Links.FSL_Atomic_reg 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(instr_OF_raw[32]),
        .Q(FSL_Atomic),
        .R(sync_reset));
  FDRE \Using_FSL_Links.FSL_Control_Bit_i_reg 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(of_fsl_control),
        .Q(FSL_Put_Control),
        .R(sync_reset));
  FDSE \Using_FSL_Links.Not_MB_Get_Op_reg 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(Not_MB_Get_Op0),
        .Q(Not_MB_Get_Op),
        .S(sync_reset));
  (* SOFT_HLUTNM = "soft_lutpair73" *) 
  LUT3 #(
    .INIT(8'h08)) 
    \Using_FSL_Links.Using_Extended_FSL.FSL_Break_No_Dbg_i_1 
       (.I0(FSL_Will_Break_No_Dbg),
        .I1(FSL_Put_Inhibit),
        .I2(sync_reset),
        .O(\Using_FSL_Links.Using_Extended_FSL.FSL_Break_No_Dbg_i_1_n_0 ));
  FDRE \Using_FSL_Links.Using_Extended_FSL.FSL_Break_No_Dbg_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FSL_Links.Using_Extended_FSL.FSL_Break_No_Dbg_i_1_n_0 ),
        .Q(FSL_Break_No_Dbg),
        .R(1'b0));
  FDRE \Using_FSL_Links.Using_Extended_FSL.FSL_Break_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(FSL_Put_Inhibit),
        .Q(FSL_Break),
        .R(sync_reset));
  FDRE \Using_FSL_Links.Using_Extended_FSL.FSL_Will_Break_No_Dbg_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FSL_Links.Using_Extended_FSL.FSL_Will_Break_No_Dbg_reg_0 ),
        .Q(FSL_Will_Break_No_Dbg),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0000000022222A22)) 
    \Using_FSL_Links.Using_Extended_FSL.FSL_Will_Break_i_1 
       (.I0(\Using_FSL_Links.Using_Extended_FSL.FSL_Will_Break_i_2_n_0 ),
        .I1(\Using_FSL_Links.Using_Extended_FSL.FSL_Will_Break_reg_0 ),
        .I2(FSL_Atomic),
        .I3(break_Pipe_i_reg__0),
        .I4(EX_delayslot_Instr_I_reg_n_0),
        .I5(\Using_FSL_Links.Using_Extended_FSL.FSL_Will_Break_i_4_n_0 ),
        .O(FSL_Will_Break0));
  LUT6 #(
    .INIT(64'h0020222200200020)) 
    \Using_FSL_Links.Using_Extended_FSL.FSL_Will_Break_i_2 
       (.I0(FSL_Put_Blocking),
        .I1(\LOCKSTEP_Out_reg[3] ),
        .I2(mb_Get_i),
        .I3(\Read_AXI_Area.S_AXIS_TREADY_reg[0] ),
        .I4(\Gen_M_Channel_Handling[1].M_AXIS_TLAST_reg[1] ),
        .I5(mb_Put_i),
        .O(\Using_FSL_Links.Using_Extended_FSL.FSL_Will_Break_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair72" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FSL_Links.Using_Extended_FSL.FSL_Will_Break_i_4 
       (.I0(FSL_Put_Inhibit),
        .I1(FSL_Break),
        .O(\Using_FSL_Links.Using_Extended_FSL.FSL_Will_Break_i_4_n_0 ));
  FDRE \Using_FSL_Links.Using_Extended_FSL.FSL_Will_Break_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(FSL_Will_Break0),
        .Q(FSL_Put_Inhibit),
        .R(sync_reset));
  FDRE \Using_FSL_Links.fsl_block_instr_reg 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(of_fsl_blocking),
        .Q(FSL_Put_Blocking),
        .R(sync_reset));
  FDRE \Using_FSL_Links.fsl_test_instr_reg 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(of_fsl_test),
        .Q(FSL_Put_Test),
        .R(sync_reset));
  (* SOFT_HLUTNM = "soft_lutpair59" *) 
  LUT5 #(
    .INIT(32'h00500040)) 
    \Using_FSL_Links.mb_Get_i_i_8 
       (.I0(FSL_Put_Blocking),
        .I1(mb_Get_i),
        .I2(ex_Valid),
        .I3(ex_Valid_reg_0),
        .I4(mb_Put_i),
        .O(\Using_FSL_Links.mb_Get_i_i_8_n_0 ));
  FDRE \Using_FSL_Links.mb_Get_i_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(PreFetch_Buffer_I_n_41),
        .Q(mb_Get_i),
        .R(1'b0));
  FDRE \Using_FSL_Links.mb_Put_i_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.of_PipeRun_MuxCY_1_n_17 ),
        .Q(mb_Put_i),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair70" *) 
  LUT3 #(
    .INIT(8'h08)) 
    \Using_LWX_SWX_instr.reservation_i_4 
       (.I0(\Using_FPGA.set_BIP_I_reg_n_0 ),
        .I1(ex_Valid),
        .I2(ex_Valid_reg_0),
        .O(reservation2));
  FDRE \Using_LWX_SWX_instr.reservation_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.of_PipeRun_MuxCY_1_n_3 ),
        .Q(\Using_LWX_SWX_instr.reservation_reg_n_0 ),
        .R(1'b0));
  FDRE \Using_MSR_Instr.MSRclr_Instr_i_reg 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(MSRclr_Instr_i0_in),
        .Q(MSRclr_Instr),
        .R(MSRclr_Instr_i));
  FDRE \Using_MSR_Instr.MSRxxx_Instr_i_reg 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(PreFetch_Buffer_I_n_39),
        .Q(MSRxxx_Instr_i),
        .R(MSRclr_Instr_i));
  FDRE \Using_MSR_Instr.msrxxx_carry_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(PreFetch_Buffer_I_n_42),
        .Q(msrxxx_carry),
        .R(1'b0));
  FDRE \Using_MSR_Instr.msrxxx_write_carry_reg 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(msrxxx_write_carry),
        .Q(\Using_MSR_Instr.msrxxx_write_carry_reg_n_0 ),
        .R(sync_reset));
  FDRE \Using_MSR_Instr.write_MSR_I_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(PreFetch_Buffer_I_n_38),
        .Q(\Using_MSR_Instr.write_MSR_I_reg_n_0 ),
        .R(1'b0));
  FDRE \Using_Mul64.ex_mulh_instr_i_reg 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(ex_mulh_instr_i0),
        .Q(ex_mulh_instr),
        .R(sync_reset));
  FDRE \Using_Mul64.ex_mulhsu_instr_i_reg 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(ex_mulhsu_instr_i0),
        .Q(ex_mulhsu_instr),
        .R(sync_reset));
  FDRE \Using_Mul64.ex_mulhu_instr_i_reg 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(ex_mulhu_instr_i0),
        .Q(ex_mulhu_instr),
        .R(sync_reset));
  FDRE \Using_Mul_Instr.ex_not_mul_op_i_reg 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(PreFetch_Buffer_I_n_85),
        .Q(ex_not_mul_op),
        .R(sync_reset));
  (* SOFT_HLUTNM = "soft_lutpair54" *) 
  LUT4 #(
    .INIT(16'hAABA)) 
    \Using_dynamic_instr_Address.Interrupt_Ack[0]_i_1 
       (.I0(\Using_FPGA.enable_Interrupts_I_reg_n_0 ),
        .I1(old_IE_value),
        .I2(break_Pipe_i_reg_0[0]),
        .I3(\Using_dynamic_instr_Address.Interrupt_Ack_reg[1]_0 ),
        .O(\Using_dynamic_instr_Address.Interrupt_Ack[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair54" *) 
  LUT5 #(
    .INIT(32'h04FF0404)) 
    \Using_dynamic_instr_Address.Interrupt_Ack[1]_i_1 
       (.I0(old_IE_value),
        .I1(break_Pipe_i_reg_0[0]),
        .I2(\Using_dynamic_instr_Address.Interrupt_Ack_reg[1]_0 ),
        .I3(\Using_FPGA.enable_Interrupts_I_reg_n_0 ),
        .I4(take_intr_2nd_cycle_reg_n_0),
        .O(\Using_dynamic_instr_Address.Interrupt_Ack[1]_i_1_n_0 ));
  FDRE \Using_dynamic_instr_Address.Interrupt_Ack_reg[0] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(\Using_dynamic_instr_Address.Interrupt_Ack[0]_i_1_n_0 ),
        .Q(Interrupt_Ack[0]),
        .R(sync_reset));
  FDRE \Using_dynamic_instr_Address.Interrupt_Ack_reg[1] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(\Using_dynamic_instr_Address.Interrupt_Ack[1]_i_1_n_0 ),
        .Q(Interrupt_Ack[1]),
        .R(sync_reset));
  FDRE \Using_dynamic_instr_Address.old_IE_value_reg 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(\Using_dynamic_instr_Address.old_IE_value_reg_0 ),
        .Q(old_IE_value),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'h00D0000000000000)) 
    Write_Strobe_INST_0
       (.I0(is_swx_I_reg_n_0),
        .I1(\Using_LWX_SWX_instr.reservation_reg_n_0 ),
        .I2(ex_Valid),
        .I3(ex_Valid_reg_0),
        .I4(load_Store_i),
        .I5(writing_reg_n_0),
        .O(D[2]));
  LUT5 #(
    .INIT(32'hFEFEFE00)) 
    active_wakeup_i_1
       (.I0(Hibernate),
        .I1(Suspend),
        .I2(Sleep_Decode),
        .I3(Wakeup),
        .I4(out),
        .O(active_wakeup0));
  FDRE active_wakeup_reg
       (.C(Clk),
        .CE(1'b1),
        .D(active_wakeup0),
        .Q(active_wakeup),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \all_statistics_counters[0].request_i_11 
       (.I0(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat7_out ),
        .I1(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat9_out ),
        .I2(\all_statistics_counters[0].request_i_4 [1]),
        .I3(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat11_out ),
        .I4(\all_statistics_counters[0].request_i_4 [0]),
        .I5(\all_statistics_counters[1].request_i_27_n_0 ),
        .O(\all_statistics_counters[0].request_i_11_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \all_statistics_counters[0].request_i_14 
       (.I0(\all_statistics_counters[1].request_i_33_n_0 ),
        .I1(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat30_out ),
        .I2(\all_statistics_counters[0].request_i_4 [1]),
        .I3(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat32_out ),
        .I4(\all_statistics_counters[0].request_i_4 [0]),
        .I5(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat34_out ),
        .O(\all_statistics_counters[0].request_i_14_n_0 ));
  LUT5 #(
    .INIT(32'h30BB3088)) 
    \all_statistics_counters[0].request_i_15 
       (.I0(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat24_out ),
        .I1(\all_statistics_counters[0].request_i_4 [1]),
        .I2(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat26_out ),
        .I3(\all_statistics_counters[0].request_i_4 [0]),
        .I4(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat28_out ),
        .O(\all_statistics_counters[0].request_i_15_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \all_statistics_counters[0].request_i_16 
       (.I0(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat049_out ),
        .I1(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat047_out ),
        .I2(\all_statistics_counters[0].request_i_4 [1]),
        .I3(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat0 ),
        .I4(\all_statistics_counters[0].request_i_4 [0]),
        .I5(valid_instr),
        .O(\all_statistics_counters[0].request_i_16_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \all_statistics_counters[0].request_i_17 
       (.I0(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat ),
        .I1(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat055_out ),
        .I2(\all_statistics_counters[0].request_i_4 [1]),
        .I3(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat053_out ),
        .I4(\all_statistics_counters[0].request_i_4 [0]),
        .I5(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat051_out ),
        .O(\all_statistics_counters[0].request_i_17_n_0 ));
  LUT6 #(
    .INIT(64'h88888888BBB888B8)) 
    \all_statistics_counters[0].request_i_5 
       (.I0(\all_statistics_counters[0].request_i_11_n_0 ),
        .I1(\all_statistics_counters[0].request_i_4 [2]),
        .I2(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat18_out ),
        .I3(\all_statistics_counters[0].request_i_4 [0]),
        .I4(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat15_out ),
        .I5(\all_statistics_counters[0].request_i_4 [1]),
        .O(\stat_select_reg[0][2]_0 ));
  MUXF7 \all_statistics_counters[0].request_reg_i_10 
       (.I0(\all_statistics_counters[0].request_i_16_n_0 ),
        .I1(\all_statistics_counters[0].request_i_17_n_0 ),
        .O(\stat_select_reg[0][2] ),
        .S(\all_statistics_counters[0].request_i_4 [2]));
  MUXF7 \all_statistics_counters[0].request_reg_i_8 
       (.I0(\all_statistics_counters[0].request_i_14_n_0 ),
        .I1(\all_statistics_counters[0].request_i_15_n_0 ),
        .O(\stat_select_reg[0][2]_1 ),
        .S(\all_statistics_counters[0].request_i_4 [2]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \all_statistics_counters[1].request_i_11 
       (.I0(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat7_out ),
        .I1(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat9_out ),
        .I2(\all_statistics_counters[1].request_i_4 [1]),
        .I3(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat11_out ),
        .I4(\all_statistics_counters[1].request_i_4 [0]),
        .I5(\all_statistics_counters[1].request_i_27_n_0 ),
        .O(\all_statistics_counters[1].request_i_11_n_0 ));
  LUT6 #(
    .INIT(64'h0010000000000000)) 
    \all_statistics_counters[1].request_i_12 
       (.I0(\all_statistics_counters[0].request_i_5_0 ),
        .I1(\all_statistics_counters[0].request_i_15_0 ),
        .I2(\all_statistics_counters[0].request_i_15_1 ),
        .I3(\saved_load_get_reg[31]_0 ),
        .I4(\all_statistics_counters[0].request_i_5_1 ),
        .I5(valid_instr),
        .O(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat18_out ));
  (* SOFT_HLUTNM = "soft_lutpair63" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \all_statistics_counters[1].request_i_13 
       (.I0(\all_statistics_counters[0].request_i_5_2 ),
        .I1(stat212_in),
        .I2(valid_instr),
        .O(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat15_out ));
  LUT5 #(
    .INIT(32'h80000000)) 
    \all_statistics_counters[1].request_i_14 
       (.I0(\saved_load_get_reg[31]_1 ),
        .I1(\all_statistics_counters[0].request_i_6 ),
        .I2(\saved_load_get_reg[31] ),
        .I3(\all_statistics_counters[0].request_i_15_0 ),
        .I4(valid_instr),
        .O(stat2_out));
  LUT6 #(
    .INIT(64'hF0F0F8F000000000)) 
    \all_statistics_counters[1].request_i_15 
       (.I0(\all_statistics_counters[0].request_i_15_0 ),
        .I1(\saved_load_get_reg[31] ),
        .I2(p_1_in15_in),
        .I3(\all_statistics_counters[0].request_i_15_1 ),
        .I4(\saved_load_get_reg[31]_0 ),
        .I5(valid_instr),
        .O(\trace_instruction_i_reg[3] ));
  LUT6 #(
    .INIT(64'h0000000001000000)) 
    \all_statistics_counters[1].request_i_17 
       (.I0(\saved_load_get_reg[31]_1 ),
        .I1(\saved_load_get_reg[31]_0 ),
        .I2(\saved_load_get_reg[31] ),
        .I3(\all_statistics_counters[0].request_i_5_0 ),
        .I4(valid_instr),
        .I5(\all_statistics_counters[0].request_i_11_0 ),
        .O(\trace_instruction_i_reg[5] ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \all_statistics_counters[1].request_i_19 
       (.I0(\all_statistics_counters[1].request_i_33_n_0 ),
        .I1(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat30_out ),
        .I2(\all_statistics_counters[1].request_i_4 [1]),
        .I3(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat32_out ),
        .I4(\all_statistics_counters[1].request_i_4 [0]),
        .I5(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat34_out ),
        .O(\all_statistics_counters[1].request_i_19_n_0 ));
  LUT5 #(
    .INIT(32'h30BB3088)) 
    \all_statistics_counters[1].request_i_20 
       (.I0(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat24_out ),
        .I1(\all_statistics_counters[1].request_i_4 [1]),
        .I2(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat26_out ),
        .I3(\all_statistics_counters[1].request_i_4 [0]),
        .I4(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat28_out ),
        .O(\all_statistics_counters[1].request_i_20_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \all_statistics_counters[1].request_i_22 
       (.I0(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat049_out ),
        .I1(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat047_out ),
        .I2(\all_statistics_counters[1].request_i_4 [1]),
        .I3(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat0 ),
        .I4(\all_statistics_counters[1].request_i_4 [0]),
        .I5(valid_instr),
        .O(\all_statistics_counters[1].request_i_22_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \all_statistics_counters[1].request_i_23 
       (.I0(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat ),
        .I1(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat055_out ),
        .I2(\all_statistics_counters[1].request_i_4 [1]),
        .I3(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat053_out ),
        .I4(\all_statistics_counters[1].request_i_4 [0]),
        .I5(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat051_out ),
        .O(\all_statistics_counters[1].request_i_23_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair69" *) 
  LUT3 #(
    .INIT(8'h20)) 
    \all_statistics_counters[1].request_i_24 
       (.I0(cond_ds_branch),
        .I1(\all_statistics_counters[0].request_i_11_1 ),
        .I2(valid_instr),
        .O(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat7_out ));
  (* SOFT_HLUTNM = "soft_lutpair69" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \all_statistics_counters[1].request_i_25 
       (.I0(cond_ds_branch),
        .I1(\all_statistics_counters[0].request_i_11_1 ),
        .I2(valid_instr),
        .O(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat9_out ));
  (* SOFT_HLUTNM = "soft_lutpair61" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \all_statistics_counters[1].request_i_26 
       (.I0(uncond_ds_branch),
        .I1(valid_instr),
        .O(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat11_out ));
  LUT6 #(
    .INIT(64'h0000000001000000)) 
    \all_statistics_counters[1].request_i_27 
       (.I0(\saved_load_get_reg[31] ),
        .I1(\saved_load_get_reg[31]_0 ),
        .I2(\all_statistics_counters[0].request_i_5_0 ),
        .I3(valid_instr),
        .I4(\saved_load_get_reg[31]_1 ),
        .I5(\all_statistics_counters[0].request_i_11_0 ),
        .O(\all_statistics_counters[1].request_i_27_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair61" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \all_statistics_counters[1].request_i_31 
       (.I0(valid_instr),
        .I1(in_delay_slot),
        .I2(\all_statistics_counters[0].request_i_12 ),
        .I3(stat2),
        .O(stat5_out));
  (* SOFT_HLUTNM = "soft_lutpair71" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \all_statistics_counters[1].request_i_33 
       (.I0(valid_instr),
        .I1(\saved_load_get_reg[31]_0 ),
        .I2(\all_statistics_counters[0].request_i_15_1 ),
        .O(\all_statistics_counters[1].request_i_33_n_0 ));
  LUT6 #(
    .INIT(64'h0020003000000000)) 
    \all_statistics_counters[1].request_i_34 
       (.I0(\all_statistics_counters[0].request_i_5_0 ),
        .I1(\all_statistics_counters[0].request_i_15_0 ),
        .I2(\all_statistics_counters[0].request_i_15_1 ),
        .I3(\saved_load_get_reg[31]_0 ),
        .I4(\all_statistics_counters[0].request_i_5_1 ),
        .I5(valid_instr),
        .O(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat30_out ));
  LUT3 #(
    .INIT(8'h80)) 
    \all_statistics_counters[1].request_i_35 
       (.I0(stat130_out),
        .I1(valid_instr),
        .I2(\all_statistics_counters[0].request_i_17_1 ),
        .O(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat32_out ));
  (* SOFT_HLUTNM = "soft_lutpair71" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \all_statistics_counters[1].request_i_36 
       (.I0(stat130_out),
        .I1(valid_instr),
        .I2(\saved_load_get_reg[31]_2 ),
        .O(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat34_out ));
  (* SOFT_HLUTNM = "soft_lutpair63" *) 
  LUT4 #(
    .INIT(16'h2A00)) 
    \all_statistics_counters[1].request_i_37 
       (.I0(\all_statistics_counters[0].request_i_5_2 ),
        .I1(\all_statistics_counters[0].request_i_15_2 ),
        .I2(\all_statistics_counters[0].request_i_15_3 ),
        .I3(valid_instr),
        .O(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat24_out ));
  LUT6 #(
    .INIT(64'h0002000000000000)) 
    \all_statistics_counters[1].request_i_38 
       (.I0(\saved_load_get_reg[31]_0 ),
        .I1(\all_statistics_counters[0].request_i_15_0 ),
        .I2(\all_statistics_counters[0].request_i_15_1 ),
        .I3(\saved_load_get_reg[31] ),
        .I4(\saved_load_get_reg[31]_1 ),
        .I5(valid_instr),
        .O(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat26_out ));
  LUT6 #(
    .INIT(64'h0000000200000000)) 
    \all_statistics_counters[1].request_i_39 
       (.I0(\saved_load_get_reg[31]_0 ),
        .I1(\all_statistics_counters[0].request_i_15_0 ),
        .I2(\all_statistics_counters[0].request_i_15_1 ),
        .I3(\saved_load_get_reg[31] ),
        .I4(\saved_load_get_reg[31]_1 ),
        .I5(valid_instr),
        .O(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat28_out ));
  LUT6 #(
    .INIT(64'h0000000800080880)) 
    \all_statistics_counters[1].request_i_40 
       (.I0(valid_instr),
        .I1(\saved_load_get_reg[31]_2 ),
        .I2(\all_statistics_counters[0].request_i_17_0 [0]),
        .I3(\all_statistics_counters[0].request_i_17_0 [1]),
        .I4(\all_statistics_counters[0].request_i_17_0 [3]),
        .I5(\all_statistics_counters[0].request_i_17_0 [2]),
        .O(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat049_out ));
  LUT6 #(
    .INIT(64'h0008000000008000)) 
    \all_statistics_counters[1].request_i_41 
       (.I0(valid_instr),
        .I1(\saved_load_get_reg[31]_2 ),
        .I2(\all_statistics_counters[0].request_i_17_0 [0]),
        .I3(\all_statistics_counters[0].request_i_17_0 [1]),
        .I4(\all_statistics_counters[0].request_i_17_0 [3]),
        .I5(\all_statistics_counters[0].request_i_17_0 [2]),
        .O(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat047_out ));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \all_statistics_counters[1].request_i_42 
       (.I0(valid_instr),
        .I1(\saved_load_get_reg[31]_2 ),
        .I2(\all_statistics_counters[0].request_i_17_0 [1]),
        .I3(\all_statistics_counters[0].request_i_17_0 [0]),
        .I4(\all_statistics_counters[0].request_i_17_0 [2]),
        .I5(\all_statistics_counters[0].request_i_17_0 [3]),
        .O(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat0 ));
  LUT6 #(
    .INIT(64'h5080000000000000)) 
    \all_statistics_counters[1].request_i_43 
       (.I0(\saved_load_get_reg[31]_1 ),
        .I1(\all_statistics_counters[0].request_i_5_0 ),
        .I2(\all_statistics_counters[0].request_i_15_0 ),
        .I3(\saved_load_get_reg[31] ),
        .I4(\all_statistics_counters[0].request_i_6 ),
        .I5(valid_instr),
        .O(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat ));
  LUT6 #(
    .INIT(64'h0000000800080880)) 
    \all_statistics_counters[1].request_i_44 
       (.I0(valid_instr),
        .I1(\all_statistics_counters[0].request_i_17_1 ),
        .I2(\all_statistics_counters[0].request_i_17_0 [0]),
        .I3(\all_statistics_counters[0].request_i_17_0 [1]),
        .I4(\all_statistics_counters[0].request_i_17_0 [3]),
        .I5(\all_statistics_counters[0].request_i_17_0 [2]),
        .O(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat055_out ));
  LUT6 #(
    .INIT(64'h0008000000008000)) 
    \all_statistics_counters[1].request_i_45 
       (.I0(valid_instr),
        .I1(\all_statistics_counters[0].request_i_17_1 ),
        .I2(\all_statistics_counters[0].request_i_17_0 [0]),
        .I3(\all_statistics_counters[0].request_i_17_0 [1]),
        .I4(\all_statistics_counters[0].request_i_17_0 [3]),
        .I5(\all_statistics_counters[0].request_i_17_0 [2]),
        .O(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat053_out ));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \all_statistics_counters[1].request_i_46 
       (.I0(valid_instr),
        .I1(\all_statistics_counters[0].request_i_17_1 ),
        .I2(\all_statistics_counters[0].request_i_17_0 [1]),
        .I3(\all_statistics_counters[0].request_i_17_0 [0]),
        .I4(\all_statistics_counters[0].request_i_17_0 [2]),
        .I5(\all_statistics_counters[0].request_i_17_0 [3]),
        .O(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat051_out ));
  LUT6 #(
    .INIT(64'h88888888BBB888B8)) 
    \all_statistics_counters[1].request_i_5 
       (.I0(\all_statistics_counters[1].request_i_11_n_0 ),
        .I1(\all_statistics_counters[1].request_i_4 [2]),
        .I2(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat18_out ),
        .I3(\all_statistics_counters[1].request_i_4 [0]),
        .I4(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat15_out ),
        .I5(\all_statistics_counters[1].request_i_4 [1]),
        .O(\stat_select_reg[1][2]_0 ));
  MUXF7 \all_statistics_counters[1].request_reg_i_10 
       (.I0(\all_statistics_counters[1].request_i_22_n_0 ),
        .I1(\all_statistics_counters[1].request_i_23_n_0 ),
        .O(\stat_select_reg[1][2] ),
        .S(\all_statistics_counters[1].request_i_4 [2]));
  MUXF7 \all_statistics_counters[1].request_reg_i_8 
       (.I0(\all_statistics_counters[1].request_i_19_n_0 ),
        .I1(\all_statistics_counters[1].request_i_20_n_0 ),
        .O(\stat_select_reg[1][2]_1 ),
        .S(\all_statistics_counters[1].request_i_4 [2]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \all_statistics_counters[2].request_i_11 
       (.I0(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat7_out ),
        .I1(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat9_out ),
        .I2(\all_statistics_counters[2].request_i_4 [1]),
        .I3(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat11_out ),
        .I4(\all_statistics_counters[2].request_i_4 [0]),
        .I5(\all_statistics_counters[1].request_i_27_n_0 ),
        .O(\all_statistics_counters[2].request_i_11_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \all_statistics_counters[2].request_i_14 
       (.I0(\all_statistics_counters[1].request_i_33_n_0 ),
        .I1(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat30_out ),
        .I2(\all_statistics_counters[2].request_i_4 [1]),
        .I3(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat32_out ),
        .I4(\all_statistics_counters[2].request_i_4 [0]),
        .I5(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat34_out ),
        .O(\all_statistics_counters[2].request_i_14_n_0 ));
  LUT5 #(
    .INIT(32'h30BB3088)) 
    \all_statistics_counters[2].request_i_15 
       (.I0(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat24_out ),
        .I1(\all_statistics_counters[2].request_i_4 [1]),
        .I2(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat26_out ),
        .I3(\all_statistics_counters[2].request_i_4 [0]),
        .I4(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat28_out ),
        .O(\all_statistics_counters[2].request_i_15_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \all_statistics_counters[2].request_i_16 
       (.I0(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat049_out ),
        .I1(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat047_out ),
        .I2(\all_statistics_counters[2].request_i_4 [1]),
        .I3(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat0 ),
        .I4(\all_statistics_counters[2].request_i_4 [0]),
        .I5(valid_instr),
        .O(\all_statistics_counters[2].request_i_16_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \all_statistics_counters[2].request_i_17 
       (.I0(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat ),
        .I1(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat055_out ),
        .I2(\all_statistics_counters[2].request_i_4 [1]),
        .I3(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat053_out ),
        .I4(\all_statistics_counters[2].request_i_4 [0]),
        .I5(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat051_out ),
        .O(\all_statistics_counters[2].request_i_17_n_0 ));
  LUT6 #(
    .INIT(64'h88888888BBB888B8)) 
    \all_statistics_counters[2].request_i_5 
       (.I0(\all_statistics_counters[2].request_i_11_n_0 ),
        .I1(\all_statistics_counters[2].request_i_4 [2]),
        .I2(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat18_out ),
        .I3(\all_statistics_counters[2].request_i_4 [0]),
        .I4(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat15_out ),
        .I5(\all_statistics_counters[2].request_i_4 [1]),
        .O(\stat_select_reg[2][2]_0 ));
  MUXF7 \all_statistics_counters[2].request_reg_i_10 
       (.I0(\all_statistics_counters[2].request_i_16_n_0 ),
        .I1(\all_statistics_counters[2].request_i_17_n_0 ),
        .O(\stat_select_reg[2][2] ),
        .S(\all_statistics_counters[2].request_i_4 [2]));
  MUXF7 \all_statistics_counters[2].request_reg_i_8 
       (.I0(\all_statistics_counters[2].request_i_14_n_0 ),
        .I1(\all_statistics_counters[2].request_i_15_n_0 ),
        .O(\stat_select_reg[2][2]_1 ),
        .S(\all_statistics_counters[2].request_i_4 [2]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \all_statistics_counters[3].request_i_11 
       (.I0(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat7_out ),
        .I1(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat9_out ),
        .I2(\all_statistics_counters[3].request_i_4 [1]),
        .I3(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat11_out ),
        .I4(\all_statistics_counters[3].request_i_4 [0]),
        .I5(\all_statistics_counters[1].request_i_27_n_0 ),
        .O(\all_statistics_counters[3].request_i_11_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \all_statistics_counters[3].request_i_14 
       (.I0(\all_statistics_counters[1].request_i_33_n_0 ),
        .I1(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat30_out ),
        .I2(\all_statistics_counters[3].request_i_4 [1]),
        .I3(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat32_out ),
        .I4(\all_statistics_counters[3].request_i_4 [0]),
        .I5(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat34_out ),
        .O(\all_statistics_counters[3].request_i_14_n_0 ));
  LUT5 #(
    .INIT(32'h30BB3088)) 
    \all_statistics_counters[3].request_i_15 
       (.I0(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat24_out ),
        .I1(\all_statistics_counters[3].request_i_4 [1]),
        .I2(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat26_out ),
        .I3(\all_statistics_counters[3].request_i_4 [0]),
        .I4(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat28_out ),
        .O(\all_statistics_counters[3].request_i_15_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \all_statistics_counters[3].request_i_16 
       (.I0(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat049_out ),
        .I1(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat047_out ),
        .I2(\all_statistics_counters[3].request_i_4 [1]),
        .I3(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat0 ),
        .I4(\all_statistics_counters[3].request_i_4 [0]),
        .I5(valid_instr),
        .O(\all_statistics_counters[3].request_i_16_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \all_statistics_counters[3].request_i_17 
       (.I0(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat ),
        .I1(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat055_out ),
        .I2(\all_statistics_counters[3].request_i_4 [1]),
        .I3(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat053_out ),
        .I4(\all_statistics_counters[3].request_i_4 [0]),
        .I5(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat051_out ),
        .O(\all_statistics_counters[3].request_i_17_n_0 ));
  LUT6 #(
    .INIT(64'h88888888BBB888B8)) 
    \all_statistics_counters[3].request_i_5 
       (.I0(\all_statistics_counters[3].request_i_11_n_0 ),
        .I1(\all_statistics_counters[3].request_i_4 [2]),
        .I2(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat18_out ),
        .I3(\all_statistics_counters[3].request_i_4 [0]),
        .I4(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat15_out ),
        .I5(\all_statistics_counters[3].request_i_4 [1]),
        .O(\stat_select_reg[3][2]_0 ));
  MUXF7 \all_statistics_counters[3].request_reg_i_10 
       (.I0(\all_statistics_counters[3].request_i_16_n_0 ),
        .I1(\all_statistics_counters[3].request_i_17_n_0 ),
        .O(\stat_select_reg[3][2] ),
        .S(\all_statistics_counters[3].request_i_4 [2]));
  MUXF7 \all_statistics_counters[3].request_reg_i_8 
       (.I0(\all_statistics_counters[3].request_i_14_n_0 ),
        .I1(\all_statistics_counters[3].request_i_15_n_0 ),
        .O(\stat_select_reg[3][2]_1 ),
        .S(\all_statistics_counters[3].request_i_4 [2]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \all_statistics_counters[4].request_i_11 
       (.I0(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat7_out ),
        .I1(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat9_out ),
        .I2(\all_statistics_counters[4].request_i_4 [1]),
        .I3(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat11_out ),
        .I4(\all_statistics_counters[4].request_i_4 [0]),
        .I5(\all_statistics_counters[1].request_i_27_n_0 ),
        .O(\all_statistics_counters[4].request_i_11_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \all_statistics_counters[4].request_i_14 
       (.I0(\all_statistics_counters[1].request_i_33_n_0 ),
        .I1(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat30_out ),
        .I2(\all_statistics_counters[4].request_i_4 [1]),
        .I3(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat32_out ),
        .I4(\all_statistics_counters[4].request_i_4 [0]),
        .I5(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat34_out ),
        .O(\all_statistics_counters[4].request_i_14_n_0 ));
  LUT5 #(
    .INIT(32'h30BB3088)) 
    \all_statistics_counters[4].request_i_15 
       (.I0(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat24_out ),
        .I1(\all_statistics_counters[4].request_i_4 [1]),
        .I2(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat26_out ),
        .I3(\all_statistics_counters[4].request_i_4 [0]),
        .I4(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat28_out ),
        .O(\all_statistics_counters[4].request_i_15_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \all_statistics_counters[4].request_i_16 
       (.I0(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat049_out ),
        .I1(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat047_out ),
        .I2(\all_statistics_counters[4].request_i_4 [1]),
        .I3(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat0 ),
        .I4(\all_statistics_counters[4].request_i_4 [0]),
        .I5(valid_instr),
        .O(\all_statistics_counters[4].request_i_16_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \all_statistics_counters[4].request_i_17 
       (.I0(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat ),
        .I1(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat055_out ),
        .I2(\all_statistics_counters[4].request_i_4 [1]),
        .I3(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat053_out ),
        .I4(\all_statistics_counters[4].request_i_4 [0]),
        .I5(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat051_out ),
        .O(\all_statistics_counters[4].request_i_17_n_0 ));
  LUT6 #(
    .INIT(64'h88888888BBB888B8)) 
    \all_statistics_counters[4].request_i_5 
       (.I0(\all_statistics_counters[4].request_i_11_n_0 ),
        .I1(\all_statistics_counters[4].request_i_4 [2]),
        .I2(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat18_out ),
        .I3(\all_statistics_counters[4].request_i_4 [0]),
        .I4(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat15_out ),
        .I5(\all_statistics_counters[4].request_i_4 [1]),
        .O(\stat_select_reg[4][2]_0 ));
  MUXF7 \all_statistics_counters[4].request_reg_i_10 
       (.I0(\all_statistics_counters[4].request_i_16_n_0 ),
        .I1(\all_statistics_counters[4].request_i_17_n_0 ),
        .O(\stat_select_reg[4][2] ),
        .S(\all_statistics_counters[4].request_i_4 [2]));
  MUXF7 \all_statistics_counters[4].request_reg_i_8 
       (.I0(\all_statistics_counters[4].request_i_14_n_0 ),
        .I1(\all_statistics_counters[4].request_i_15_n_0 ),
        .O(\stat_select_reg[4][2]_1 ),
        .S(\all_statistics_counters[4].request_i_4 [2]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \all_statistics_counters[5].request_i_11 
       (.I0(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat7_out ),
        .I1(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat9_out ),
        .I2(\all_statistics_counters[5].request_i_4 [1]),
        .I3(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat11_out ),
        .I4(\all_statistics_counters[5].request_i_4 [0]),
        .I5(\all_statistics_counters[1].request_i_27_n_0 ),
        .O(\all_statistics_counters[5].request_i_11_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \all_statistics_counters[5].request_i_14 
       (.I0(\all_statistics_counters[1].request_i_33_n_0 ),
        .I1(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat30_out ),
        .I2(\all_statistics_counters[5].request_i_4 [1]),
        .I3(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat32_out ),
        .I4(\all_statistics_counters[5].request_i_4 [0]),
        .I5(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat34_out ),
        .O(\all_statistics_counters[5].request_i_14_n_0 ));
  LUT5 #(
    .INIT(32'h30BB3088)) 
    \all_statistics_counters[5].request_i_15 
       (.I0(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat24_out ),
        .I1(\all_statistics_counters[5].request_i_4 [1]),
        .I2(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat26_out ),
        .I3(\all_statistics_counters[5].request_i_4 [0]),
        .I4(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat28_out ),
        .O(\all_statistics_counters[5].request_i_15_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \all_statistics_counters[5].request_i_16 
       (.I0(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat049_out ),
        .I1(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat047_out ),
        .I2(\all_statistics_counters[5].request_i_4 [1]),
        .I3(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat0 ),
        .I4(\all_statistics_counters[5].request_i_4 [0]),
        .I5(valid_instr),
        .O(\all_statistics_counters[5].request_i_16_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \all_statistics_counters[5].request_i_17 
       (.I0(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat ),
        .I1(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat055_out ),
        .I2(\all_statistics_counters[5].request_i_4 [1]),
        .I3(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat053_out ),
        .I4(\all_statistics_counters[5].request_i_4 [0]),
        .I5(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat051_out ),
        .O(\all_statistics_counters[5].request_i_17_n_0 ));
  LUT6 #(
    .INIT(64'h88888888BBB888B8)) 
    \all_statistics_counters[5].request_i_5 
       (.I0(\all_statistics_counters[5].request_i_11_n_0 ),
        .I1(\all_statistics_counters[5].request_i_4 [2]),
        .I2(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat18_out ),
        .I3(\all_statistics_counters[5].request_i_4 [0]),
        .I4(\Implement_Debug_Logic.Master_Core.Debug_Area/Use_Statistics.Debug_Stat_I/stat15_out ),
        .I5(\all_statistics_counters[5].request_i_4 [1]),
        .O(\stat_select_reg[5][2]_0 ));
  MUXF7 \all_statistics_counters[5].request_reg_i_10 
       (.I0(\all_statistics_counters[5].request_i_16_n_0 ),
        .I1(\all_statistics_counters[5].request_i_17_n_0 ),
        .O(\stat_select_reg[5][2] ),
        .S(\all_statistics_counters[5].request_i_4 [2]));
  MUXF7 \all_statistics_counters[5].request_reg_i_8 
       (.I0(\all_statistics_counters[5].request_i_14_n_0 ),
        .I1(\all_statistics_counters[5].request_i_15_n_0 ),
        .O(\stat_select_reg[5][2]_1 ),
        .S(\all_statistics_counters[5].request_i_4 [2]));
  LUT4 #(
    .INIT(16'h1F11)) 
    \branch_count[0]_i_6 
       (.I0(\branch_count_reg[3] ),
        .I1(\Area_Debug_Control.mb_halted_i_reg ),
        .I2(\trace_instruction_i_reg[9] ),
        .I3(trace_data_read_i_reg),
        .O(\Serial_Dbg_Intf.control_reg_reg[21] ));
  LUT6 #(
    .INIT(64'h0000000002000000)) 
    \branch_count[0]_i_8 
       (.I0(D[1]),
        .I1(\writems[1]_i_2 ),
        .I2(\writems[1]_i_2_0 ),
        .I3(\saved_load_get_reg[31] ),
        .I4(\all_statistics_counters[0].request_i_6 ),
        .I5(\writems[1]_i_2_1 ),
        .O(\trace_instruction_i_reg[9] ));
  FDRE break_Pipe_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(break_Pipe_i_reg0),
        .Q(break_Pipe_i_reg__0),
        .R(sync_reset));
  FDRE byte_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(PreFetch_Buffer_I_n_107),
        .Q(isbyte),
        .R(1'b0));
  FDRE d_AS_I_reg
       (.C(Clk),
        .CE(1'b1),
        .D(d_AS_I30_out),
        .Q(d_AS_I),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'hFFBFFFFFFFBF0000)) 
    doublet_Read_i_i_1
       (.I0(PreFetch_Buffer_I_n_85),
        .I1(instr_OF_raw[0]),
        .I2(instr_OF_raw[1]),
        .I3(take_Intr_Now_III),
        .I4(of_PipeRun),
        .I5(doublet_Read),
        .O(doublet_Read_i_i_1_n_0));
  FDRE doublet_Read_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(doublet_Read_i_i_1_n_0),
        .Q(doublet_Read),
        .R(sync_reset));
  FDRE doublet_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(PreFetch_Buffer_I_n_106),
        .Q(isdoublet),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair56" *) 
  LUT5 #(
    .INIT(32'h00002227)) 
    \event_data[0]_i_6 
       (.I0(jump2_I_1),
        .I1(Blocked_Valid_Instr),
        .I2(mul_Executing_done),
        .I3(trace_valid_instr_part1),
        .I4(\saved_pc_reg[31] ),
        .O(jump2_I_1_reg_0));
  LUT3 #(
    .INIT(8'hF4)) 
    \event_data_next[1]_i_3 
       (.I0(\Area_Debug_Control.mb_halted_i_reg ),
        .I1(in_delay_slot_reg),
        .I2(save_event_next_reg),
        .O(trace_exception_taken_i_reg_1));
  LUT2 #(
    .INIT(4'h8)) 
    \event_data_next[1]_i_4 
       (.I0(trace_data_read_i_reg),
        .I1(\trace_instruction_i_reg[9] ),
        .O(trace_data_read_i_reg_0));
  FDRE ex_Valid_1st_cycle_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.of_PipeRun_MuxCY_1_n_8 ),
        .Q(ex_Valid_1st_cycle_reg_n_0),
        .R(sync_reset));
  FDRE ex_Valid_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.of_PipeRun_MuxCY_1_n_15 ),
        .Q(ex_Valid),
        .R(sync_reset));
  FDRE ex_first_cycle_reg
       (.C(Clk),
        .CE(1'b1),
        .D(of_PipeRun),
        .Q(ex_first_cycle),
        .R(sync_reset));
  (* SOFT_HLUTNM = "soft_lutpair56" *) 
  LUT5 #(
    .INIT(32'hAEAEAEBF)) 
    first_item_i_3
       (.I0(\saved_pc_reg[31] ),
        .I1(jump2_I_1),
        .I2(Blocked_Valid_Instr),
        .I3(mul_Executing_done),
        .I4(trace_valid_instr_part1),
        .O(\Area_Debug_Control.mb_halted_i_reg ));
  LUT6 #(
    .INIT(64'h0000000008AAFBAA)) 
    hibernate_i_i_1
       (.I0(Hibernate),
        .I1(iFetch_In_Progress),
        .I2(Q[0]),
        .I3(mbar_sleep),
        .I4(\instr_EX_i_reg[0]_0 [18]),
        .I5(sleep_i0),
        .O(hibernate_i_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair73" *) 
  LUT2 #(
    .INIT(4'hE)) 
    hibernate_i_i_2
       (.I0(sync_reset),
        .I1(active_wakeup),
        .O(sleep_i0));
  FDRE hibernate_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(hibernate_i_i_1_n_0),
        .Q(Hibernate),
        .R(1'b0));
  FDRE iFetch_In_Progress_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.iFetch_MuxCY_2_n_3 ),
        .Q(iFetch_In_Progress),
        .R(sync_reset));
  LUT3 #(
    .INIT(8'h54)) 
    inHibit_EX_i_3
       (.I0(nonvalid_IFetch_n_reg_n_0),
        .I1(missed_IFetch_reg_1),
        .I2(missed_IFetch_reg_0),
        .O(inHibit_EX_i_3_n_0));
  FDRE inHibit_EX_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Using_Breakable_Pipe.Take_Intr_MUXCY_3_n_1 ),
        .Q(inHibit_EX),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0000000051515140)) 
    in_delay_slot_i_4
       (.I0(\saved_pc_reg[31] ),
        .I1(jump2_I_1),
        .I2(Blocked_Valid_Instr),
        .I3(mul_Executing_done),
        .I4(trace_valid_instr_part1),
        .I5(in_delay_slot_reg),
        .O(valid_instr));
  LUT5 #(
    .INIT(32'h00000002)) 
    inside_handler_i_2
       (.I0(inside_handler_reg[3]),
        .I1(inside_handler_reg_0),
        .I2(inside_handler_i_4_n_0),
        .I3(inside_handler_reg_1),
        .I4(inside_handler_reg_2),
        .O(stat_stop));
  LUT5 #(
    .INIT(32'hFFFFFFEF)) 
    inside_handler_i_4
       (.I0(inside_handler_i_2_0),
        .I1(inside_handler_reg[1]),
        .I2(valid_instr),
        .I3(inside_handler_reg[0]),
        .I4(inside_handler_reg[2]),
        .O(inside_handler_i_4_n_0));
  FDRE \instr_EX_i_reg[0] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(instr_OF_raw[0]),
        .Q(\instr_EX_i_reg[0]_0 [22]),
        .R(sync_reset));
  FDRE \instr_EX_i_reg[10] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(instr_OF_raw[10]),
        .Q(\instr_EX_i_reg[0]_0 [14]),
        .R(sync_reset));
  FDRE \instr_EX_i_reg[11] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(reg1_Addr[0]),
        .Q(\instr_EX_i_reg[0]_0 [13]),
        .R(sync_reset));
  FDRE \instr_EX_i_reg[12] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(reg1_Addr[1]),
        .Q(\instr_EX_i_reg[0]_0 [12]),
        .R(sync_reset));
  FDRE \instr_EX_i_reg[13] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(reg1_Addr[2]),
        .Q(\instr_EX_i_reg[0]_0 [11]),
        .R(sync_reset));
  FDRE \instr_EX_i_reg[14] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(reg1_Addr[3]),
        .Q(\instr_EX_i_reg[0]_0 [10]),
        .R(sync_reset));
  FDRE \instr_EX_i_reg[15] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(reg1_Addr[4]),
        .Q(\instr_EX_i_reg[0]_0 [9]),
        .R(sync_reset));
  FDRE \instr_EX_i_reg[16] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(imm_Value[0]),
        .Q(\instr_EX_i_reg[0]_0 [8]),
        .R(sync_reset));
  FDRE \instr_EX_i_reg[17] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(imm_Value[1]),
        .Q(\instr_EX_i_reg[0]_0 [7]),
        .R(sync_reset));
  FDRE \instr_EX_i_reg[18] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(imm_Value[2]),
        .Q(\instr_EX_i_reg[0]_0 [6]),
        .R(sync_reset));
  FDRE \instr_EX_i_reg[19] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(imm_Value[3]),
        .Q(\instr_EX_i_reg[0]_0 [5]),
        .R(sync_reset));
  FDRE \instr_EX_i_reg[1] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(instr_OF_raw[1]),
        .Q(\instr_EX_i_reg[0]_0 [21]),
        .R(sync_reset));
  FDRE \instr_EX_i_reg[20] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(imm_Value[4]),
        .Q(\instr_EX_i_reg[0]_0 [4]),
        .R(sync_reset));
  FDRE \instr_EX_i_reg[21] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(imm_Value[5]),
        .Q(\instr_EX_i_reg[21]_0 ),
        .R(sync_reset));
  FDRE \instr_EX_i_reg[22] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(imm_Value[6]),
        .Q(\instr_EX_i_reg[22]_0 ),
        .R(sync_reset));
  FDRE \instr_EX_i_reg[23] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(imm_Value[7]),
        .Q(\instr_EX_i_reg[23]_0 ),
        .R(sync_reset));
  FDRE \instr_EX_i_reg[24] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(imm_Value[8]),
        .Q(\instr_EX_i_reg[24]_0 ),
        .R(sync_reset));
  FDRE \instr_EX_i_reg[25] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(imm_Value[9]),
        .Q(\instr_EX_i_reg[25]_0 ),
        .R(sync_reset));
  FDRE \instr_EX_i_reg[26] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(imm_Value[10]),
        .Q(\instr_EX_i_reg[26]_0 ),
        .R(sync_reset));
  FDRE \instr_EX_i_reg[27] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(imm_Value[11]),
        .Q(\instr_EX_i_reg[27]_0 ),
        .R(sync_reset));
  FDRE \instr_EX_i_reg[28] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(imm_Value[12]),
        .Q(\instr_EX_i_reg[0]_0 [3]),
        .R(sync_reset));
  FDRE \instr_EX_i_reg[29] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(imm_Value[13]),
        .Q(\instr_EX_i_reg[0]_0 [2]),
        .R(sync_reset));
  FDRE \instr_EX_i_reg[2] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(instr_OF_raw[2]),
        .Q(\instr_EX_i_reg[0]_0 [20]),
        .R(sync_reset));
  FDRE \instr_EX_i_reg[30] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(imm_Value[14]),
        .Q(\instr_EX_i_reg[0]_0 [1]),
        .R(sync_reset));
  FDRE \instr_EX_i_reg[31] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(imm_Value[15]),
        .Q(\instr_EX_i_reg[0]_0 [0]),
        .R(sync_reset));
  FDRE \instr_EX_i_reg[3] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(instr_OF_raw[3]),
        .Q(\instr_EX_i_reg[0]_0 [19]),
        .R(sync_reset));
  FDRE \instr_EX_i_reg[4] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(instr_OF_raw[4]),
        .Q(Logic_Oper[0]),
        .R(sync_reset));
  FDRE \instr_EX_i_reg[5] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(instr_OF_raw[5]),
        .Q(Logic_Oper[1]),
        .R(sync_reset));
  FDRE \instr_EX_i_reg[6] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(instr_OF_raw[6]),
        .Q(\instr_EX_i_reg[0]_0 [18]),
        .R(sync_reset));
  FDRE \instr_EX_i_reg[7] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(instr_OF_raw[7]),
        .Q(\instr_EX_i_reg[0]_0 [17]),
        .R(sync_reset));
  FDRE \instr_EX_i_reg[8] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(instr_OF_raw[8]),
        .Q(\instr_EX_i_reg[0]_0 [16]),
        .R(sync_reset));
  FDRE \instr_EX_i_reg[9] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(instr_OF_raw[9]),
        .Q(\instr_EX_i_reg[0]_0 [15]),
        .R(sync_reset));
  FDRE is_lwx_I_reg
       (.C(Clk),
        .CE(1'b1),
        .D(PreFetch_Buffer_I_n_104),
        .Q(is_lwx_I),
        .R(1'b0));
  FDRE is_swx_I_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.of_PipeRun_MuxCY_1_n_19 ),
        .Q(is_swx_I_reg_n_0),
        .R(1'b0));
  FDRE jump2_I_1_reg
       (.C(Clk),
        .CE(1'b1),
        .D(jump2_I_reg_n_0),
        .Q(jump2_I_1),
        .R(sync_reset));
  FDRE jump2_I_reg
       (.C(Clk),
        .CE(of_PipeRun),
        .D(PreFetch_Buffer_I_n_50),
        .Q(jump2_I_reg_n_0),
        .R(sync_reset));
  FDRE load_Store_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.of_PipeRun_MuxCY_1_n_18 ),
        .Q(load_Store_i),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair66" *) 
  LUT4 #(
    .INIT(16'hEEEF)) 
    mask_reset_inferred_i_1
       (.I0(Not_Barrel_Op),
        .I1(ex_Valid_reg_0),
        .I2(BitField_Insert),
        .I3(BitField_Extract),
        .O(in0));
  FDRE mbar_decode_I_reg
       (.C(Clk),
        .CE(of_PipeRun),
        .D(of_mbar_decode),
        .Q(mbar_decode_I),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'h00000000FFF20000)) 
    mbar_first_i_2
       (.I0(iFetch_In_Progress),
        .I1(Q[0]),
        .I2(mbar_sleep),
        .I3(ex_first_cycle),
        .I4(mbar_first_reg_n_0),
        .I5(ex_Valid_reg_0),
        .O(mbar_first_i_2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    mbar_first_reg
       (.C(Clk),
        .CE(1'b1),
        .D(mbar_first),
        .Q(mbar_first_reg_n_0),
        .R(sync_reset));
  FDRE mbar_hold_I_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.iFetch_MuxCY_2_n_1 ),
        .Q(mbar_hold_I_reg_n_0),
        .R(1'b0));
  FDRE mbar_is_sleep_reg
       (.C(Clk),
        .CE(of_PipeRun),
        .D(mbar_is_sleep0),
        .Q(mbar_is_sleep),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'h00000000AAAAEAAA)) 
    mbar_sleep_i_1
       (.I0(mbar_sleep),
        .I1(mbar_is_sleep),
        .I2(mbar_decode_I),
        .I3(ex_first_cycle),
        .I4(\LOCKSTEP_Out_reg[3] ),
        .I5(sleep_i0),
        .O(mbar_sleep_i_1_n_0));
  FDRE mbar_sleep_reg
       (.C(Clk),
        .CE(1'b1),
        .D(mbar_sleep_i_1_n_0),
        .Q(mbar_sleep),
        .R(1'b0));
  FDRE missed_IFetch_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.iFetch_MuxCY_2_n_4 ),
        .Q(missed_IFetch),
        .R(sync_reset));
  FDRE mtsmsr_write_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(PreFetch_Buffer_I_n_40),
        .Q(mtsmsr_write_i_reg_0),
        .R(1'b0));
  FDRE mul_Executing_delayed_reg
       (.C(Clk),
        .CE(1'b1),
        .D(mul_Executing),
        .Q(mul_Executing_delayed),
        .R(sync_reset));
  (* SOFT_HLUTNM = "soft_lutpair74" *) 
  LUT3 #(
    .INIT(8'h02)) 
    mul_Executing_done_i_1
       (.I0(mul_Executing_delayed),
        .I1(mul_Executing),
        .I2(ex_Valid_reg_0),
        .O(mul_Executing_done0));
  FDRE mul_Executing_done_reg
       (.C(Clk),
        .CE(1'b1),
        .D(mul_Executing_done0),
        .Q(mul_Executing_done),
        .R(sync_reset));
  FDRE mul_Executing_reg
       (.C(Clk),
        .CE(1'b1),
        .D(mul_Executing0),
        .Q(mul_Executing),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    mul_first_reg
       (.C(Clk),
        .CE(1'b1),
        .D(mul_first51_out),
        .Q(mul_first),
        .R(sync_reset));
  FDSE nonvalid_IFetch_n_reg
       (.C(Clk),
        .CE(1'b1),
        .D(PreFetch_Buffer_I_n_102),
        .Q(nonvalid_IFetch_n_reg_n_0),
        .S(sync_reset));
  LUT6 #(
    .INIT(64'hFF7FFFFFFF7F0000)) 
    quadlet_Read_i_i_1
       (.I0(PreFetch_Buffer_I_n_62),
        .I1(instr_OF_raw[0]),
        .I2(instr_OF_raw[1]),
        .I3(take_Intr_Now_III),
        .I4(of_PipeRun),
        .I5(quadlet_Read),
        .O(quadlet_Read_i_i_1_n_0));
  FDRE quadlet_Read_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(quadlet_Read_i_i_1_n_0),
        .Q(quadlet_Read),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    reset_delay_reg
       (.C(Clk),
        .CE(1'b1),
        .D(sync_reset),
        .Q(reset_delay),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h75FFFFFF)) 
    save_pc_next_next_i_2
       (.I0(save_pc_next_next_i_3_n_0),
        .I1(\Area_Debug_Control.mb_halted_i_reg ),
        .I2(in_delay_slot_reg),
        .I3(save_pc_next_next_reg_0),
        .I4(save_pc_next_next_reg_1),
        .O(trace_exception_taken_i_reg_0));
  LUT6 #(
    .INIT(64'h000000000000F0EE)) 
    save_pc_next_next_i_3
       (.I0(trace_valid_instr_part1),
        .I1(mul_Executing_done),
        .I2(Blocked_Valid_Instr),
        .I3(jump2_I_1),
        .I4(\saved_pc_reg[31] ),
        .I5(\branch_count_reg[3] ),
        .O(save_pc_next_next_i_3_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFF45555555)) 
    \saved_load_get[0]_i_2 
       (.I0(\saved_load_get_reg[31]_2 ),
        .I1(\saved_load_get_reg[31]_3 ),
        .I2(\saved_load_get_reg[31]_0 ),
        .I3(\saved_load_get_reg[31]_1 ),
        .I4(\saved_load_get_reg[31] ),
        .I5(\saved_load_get[0]_i_7_n_0 ),
        .O(trace_data_read_i_reg));
  LUT6 #(
    .INIT(64'hFFFF0F11FFFFFFFF)) 
    \saved_load_get[0]_i_7 
       (.I0(trace_valid_instr_part1),
        .I1(mul_Executing_done),
        .I2(Blocked_Valid_Instr),
        .I3(jump2_I_1),
        .I4(\saved_pc_reg[31] ),
        .I5(\saved_load_get[0]_i_2_0 ),
        .O(\saved_load_get[0]_i_7_n_0 ));
  LUT5 #(
    .INIT(32'hFFAAFEFE)) 
    \saved_pc[0]_i_1 
       (.I0(\saved_pc_reg[31] ),
        .I1(trace_valid_instr_part1),
        .I2(mul_Executing_done),
        .I3(Blocked_Valid_Instr),
        .I4(jump2_I_1),
        .O(\Area_Debug_Control.mb_halted_i_reg_0 ));
  FDRE select_ALU_Carry_reg
       (.C(Clk),
        .CE(of_PipeRun),
        .D(PreFetch_Buffer_I_n_100),
        .Q(select_ALU_Carry),
        .R(MSRclr_Instr_i));
  LUT6 #(
    .INIT(64'h0000000008AAFBAA)) 
    sleep_i_i_1
       (.I0(Sleep_Decode),
        .I1(iFetch_In_Progress),
        .I2(Q[0]),
        .I3(mbar_sleep),
        .I4(\instr_EX_i_reg[0]_0 [17]),
        .I5(sleep_i0),
        .O(sleep_i_i_1_n_0));
  FDRE sleep_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(sleep_i_i_1_n_0),
        .Q(Sleep_Decode),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h000000000000E222)) 
    suspend_i_i_1
       (.I0(Suspend),
        .I1(sleep_i00_in),
        .I2(\instr_EX_i_reg[0]_0 [18]),
        .I3(\instr_EX_i_reg[0]_0 [17]),
        .I4(active_wakeup),
        .I5(sync_reset),
        .O(suspend_i_i_1_n_0));
  LUT3 #(
    .INIT(8'h8A)) 
    suspend_i_i_2
       (.I0(mbar_sleep),
        .I1(Q[0]),
        .I2(iFetch_In_Progress),
        .O(sleep_i00_in));
  FDRE suspend_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(suspend_i_i_1_n_0),
        .Q(Suspend),
        .R(1'b0));
  FDRE swx_ready_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.of_PipeRun_MuxCY_1_n_11 ),
        .Q(swx_ready),
        .R(1'b0));
  FDRE take_intr_2nd_cycle_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.of_PipeRun_MuxCY_1_n_1 ),
        .Q(take_intr_2nd_cycle_reg_n_0),
        .R(1'b0));
  FDRE take_intr_Done_reg
       (.C(Clk),
        .CE(of_PipeRun),
        .D(take_intr_2nd_cycle_reg_n_0),
        .Q(take_intr_Done),
        .R(sync_reset));
  (* SOFT_HLUTNM = "soft_lutpair57" *) 
  LUT5 #(
    .INIT(32'h20002020)) 
    trace_data_access_i_i_1
       (.I0(load_Store_i),
        .I1(ex_Valid_reg_0),
        .I2(ex_Valid),
        .I3(\Using_LWX_SWX_instr.reservation_reg_n_0 ),
        .I4(is_swx_I_reg_n_0),
        .O(\Using_FSL_Links.fsl_block_instr_reg_0 [0]));
  LUT6 #(
    .INIT(64'hBABBBABAAAAAAAAA)) 
    trace_reg_write_novalid_i_1
       (.I0(reset_delay),
        .I1(\LOCKSTEP_Out_reg[3] ),
        .I2(write_Reg_reg_n_0),
        .I3(writing_reg_n_0),
        .I4(DReady0_out),
        .I5(\Using_FPGA.Native_i_3__12_n_0 ),
        .O(reg_Write_I));
  LUT6 #(
    .INIT(64'h5555555555555755)) 
    trace_valid_instr_part1_i_1
       (.I0(trace_valid_instr_part1_i_2_n_0),
        .I1(mul_Executing),
        .I2(ex_Valid_reg_0),
        .I3(ex_Valid_1st_cycle_reg_n_0),
        .I4(take_intr_Done),
        .I5(load_Store_i),
        .O(trace_valid_instr_part10));
  LUT5 #(
    .INIT(32'hFF01FFFF)) 
    trace_valid_instr_part1_i_2
       (.I0(MEM_DAXI_Data_Strobe),
        .I1(DReady),
        .I2(swx_ready),
        .I3(ex_Valid_reg_0),
        .I4(load_Store_i),
        .O(trace_valid_instr_part1_i_2_n_0));
  FDRE trace_valid_instr_part1_reg
       (.C(Clk),
        .CE(1'b1),
        .D(trace_valid_instr_part10),
        .Q(trace_valid_instr_part1),
        .R(sync_reset));
  FDRE using_Imm_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.of_PipeRun_MuxCY_1_n_2 ),
        .Q(use_Imm_Reg),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair58" *) 
  LUT5 #(
    .INIT(32'hF1000000)) 
    \void_bit16[0]_i_1 
       (.I0(BitField_Insert),
        .I1(\instr_EX_i_reg[21]_0 ),
        .I2(BitField_Extract),
        .I3(\instr_EX_i_reg[22]_0 ),
        .I4(\void_bit16_reg[0] ),
        .O(void_bit));
  FDRE \write_Addr_I_reg[0] 
       (.C(Clk),
        .CE(\Using_FPGA.of_PipeRun_MuxCY_1_n_10 ),
        .D(PreFetch_Buffer_I_n_55),
        .Q(Q[4]),
        .R(sync_reset));
  FDRE \write_Addr_I_reg[1] 
       (.C(Clk),
        .CE(\Using_FPGA.of_PipeRun_MuxCY_1_n_10 ),
        .D(PreFetch_Buffer_I_n_56),
        .Q(Q[3]),
        .R(sync_reset));
  FDRE \write_Addr_I_reg[2] 
       (.C(Clk),
        .CE(\Using_FPGA.of_PipeRun_MuxCY_1_n_10 ),
        .D(PreFetch_Buffer_I_n_57),
        .Q(Q[2]),
        .R(sync_reset));
  FDRE \write_Addr_I_reg[3] 
       (.C(Clk),
        .CE(\Using_FPGA.of_PipeRun_MuxCY_1_n_10 ),
        .D(PreFetch_Buffer_I_n_58),
        .Q(Q[1]),
        .R(sync_reset));
  FDRE \write_Addr_I_reg[4] 
       (.C(Clk),
        .CE(\Using_FPGA.of_PipeRun_MuxCY_1_n_10 ),
        .D(PreFetch_Buffer_I_n_59),
        .Q(Q[0]),
        .R(sync_reset));
  FDRE write_Carry_I_reg
       (.C(Clk),
        .CE(of_PipeRun),
        .D(PreFetch_Buffer_I_n_82),
        .Q(write_Carry_I_reg_n_0),
        .R(MSRclr_Instr_i));
  block_design_microblaze_0_0_MB_LUT4 write_Reg_I_LUT
       (.DReady0_out(DReady0_out),
        .\Using_FPGA.Native_0 (write_Reg_reg_n_0),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_i_3__12_n_0 ),
        .\Using_FPGA.Native_2 (writing_reg_n_0),
        .write_Reg_I_S(write_Reg_I_S));
  FDRE write_Reg_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.of_PipeRun_MuxCY_1_n_16 ),
        .Q(write_Reg_reg_n_0),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h00000000AA00A8A8)) 
    \writems[0]_i_10 
       (.I0(\writems[0]_i_8 ),
        .I1(trace_valid_instr_part1),
        .I2(mul_Executing_done),
        .I3(Blocked_Valid_Instr),
        .I4(jump2_I_1),
        .I5(\saved_pc_reg[31] ),
        .O(save_pc_next_next_reg));
  LUT6 #(
    .INIT(64'h00000000AA00A8A8)) 
    \writems[1]_i_4 
       (.I0(in_delay_slot_reg),
        .I1(trace_valid_instr_part1),
        .I2(mul_Executing_done),
        .I3(Blocked_Valid_Instr),
        .I4(jump2_I_1),
        .I5(\saved_pc_reg[31] ),
        .O(trace_exception_taken_i_reg_2));
  LUT4 #(
    .INIT(16'h0BBB)) 
    \writems[2]_i_5 
       (.I0(\Area_Debug_Control.mb_halted_i_reg ),
        .I1(in_delay_slot_reg),
        .I2(\trace_instruction_i_reg[9] ),
        .I3(trace_data_read_i_reg),
        .O(trace_exception_taken_i_reg));
  FDRE writing_reg
       (.C(Clk),
        .CE(of_PipeRun),
        .D(PreFetch_Buffer_I_n_105),
        .Q(writing_reg_n_0),
        .R(sync_reset));
endmodule

module block_design_microblaze_0_0_MB_AND2B1L
   (\Serial_Dbg_Intf.control_reg_reg[0] ,
    carry_0,
    S);
  output [0:0]\Serial_Dbg_Intf.control_reg_reg[0] ;
  input carry_0;
  input S;

  wire S;
  wire [0:0]\Serial_Dbg_Intf.control_reg_reg[0] ;
  wire carry_0;

  (* box_type = "PRIMITIVE" *) 
  AND2B1L #(
    .IS_SRI_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.DI(carry_0),
        .O(\Serial_Dbg_Intf.control_reg_reg[0] ),
        .SRI(S));
endmodule

module block_design_microblaze_0_0_MB_DSP48E1
   (D,
    \Using_FPGA.DSP48E1_I1_0 ,
    Clk,
    \Using_FPGA.DSP48E1_I1_1 );
  output [16:0]D;
  output [47:0]\Using_FPGA.DSP48E1_I1_0 ;
  input Clk;
  input [15:0]\Using_FPGA.DSP48E1_I1_1 ;

  wire Clk;
  wire [16:0]D;
  wire [47:0]\Using_FPGA.DSP48E1_I1_0 ;
  wire [15:0]\Using_FPGA.DSP48E1_I1_1 ;
  wire \Using_FPGA.DSP48E1_I1_n_0 ;
  wire \Using_FPGA.DSP48E1_I1_n_1 ;
  wire \Using_FPGA.DSP48E1_I1_n_10 ;
  wire \Using_FPGA.DSP48E1_I1_n_11 ;
  wire \Using_FPGA.DSP48E1_I1_n_12 ;
  wire \Using_FPGA.DSP48E1_I1_n_13 ;
  wire \Using_FPGA.DSP48E1_I1_n_14 ;
  wire \Using_FPGA.DSP48E1_I1_n_15 ;
  wire \Using_FPGA.DSP48E1_I1_n_16 ;
  wire \Using_FPGA.DSP48E1_I1_n_17 ;
  wire \Using_FPGA.DSP48E1_I1_n_18 ;
  wire \Using_FPGA.DSP48E1_I1_n_19 ;
  wire \Using_FPGA.DSP48E1_I1_n_2 ;
  wire \Using_FPGA.DSP48E1_I1_n_20 ;
  wire \Using_FPGA.DSP48E1_I1_n_21 ;
  wire \Using_FPGA.DSP48E1_I1_n_22 ;
  wire \Using_FPGA.DSP48E1_I1_n_23 ;
  wire \Using_FPGA.DSP48E1_I1_n_24 ;
  wire \Using_FPGA.DSP48E1_I1_n_25 ;
  wire \Using_FPGA.DSP48E1_I1_n_26 ;
  wire \Using_FPGA.DSP48E1_I1_n_27 ;
  wire \Using_FPGA.DSP48E1_I1_n_28 ;
  wire \Using_FPGA.DSP48E1_I1_n_29 ;
  wire \Using_FPGA.DSP48E1_I1_n_3 ;
  wire \Using_FPGA.DSP48E1_I1_n_30 ;
  wire \Using_FPGA.DSP48E1_I1_n_31 ;
  wire \Using_FPGA.DSP48E1_I1_n_32 ;
  wire \Using_FPGA.DSP48E1_I1_n_33 ;
  wire \Using_FPGA.DSP48E1_I1_n_34 ;
  wire \Using_FPGA.DSP48E1_I1_n_35 ;
  wire \Using_FPGA.DSP48E1_I1_n_36 ;
  wire \Using_FPGA.DSP48E1_I1_n_37 ;
  wire \Using_FPGA.DSP48E1_I1_n_38 ;
  wire \Using_FPGA.DSP48E1_I1_n_39 ;
  wire \Using_FPGA.DSP48E1_I1_n_4 ;
  wire \Using_FPGA.DSP48E1_I1_n_40 ;
  wire \Using_FPGA.DSP48E1_I1_n_41 ;
  wire \Using_FPGA.DSP48E1_I1_n_42 ;
  wire \Using_FPGA.DSP48E1_I1_n_43 ;
  wire \Using_FPGA.DSP48E1_I1_n_44 ;
  wire \Using_FPGA.DSP48E1_I1_n_45 ;
  wire \Using_FPGA.DSP48E1_I1_n_46 ;
  wire \Using_FPGA.DSP48E1_I1_n_47 ;
  wire \Using_FPGA.DSP48E1_I1_n_48 ;
  wire \Using_FPGA.DSP48E1_I1_n_49 ;
  wire \Using_FPGA.DSP48E1_I1_n_5 ;
  wire \Using_FPGA.DSP48E1_I1_n_50 ;
  wire \Using_FPGA.DSP48E1_I1_n_51 ;
  wire \Using_FPGA.DSP48E1_I1_n_52 ;
  wire \Using_FPGA.DSP48E1_I1_n_53 ;
  wire \Using_FPGA.DSP48E1_I1_n_54 ;
  wire \Using_FPGA.DSP48E1_I1_n_55 ;
  wire \Using_FPGA.DSP48E1_I1_n_56 ;
  wire \Using_FPGA.DSP48E1_I1_n_57 ;
  wire \Using_FPGA.DSP48E1_I1_n_6 ;
  wire \Using_FPGA.DSP48E1_I1_n_7 ;
  wire \Using_FPGA.DSP48E1_I1_n_8 ;
  wire \Using_FPGA.DSP48E1_I1_n_9 ;
  wire [0:30]c0_bd_p;

  (* METHODOLOGY_DRC_VIOS = "{SYNTH-12 {cell *THIS*}}" *) 
  (* box_type = "PRIMITIVE" *) 
  DSP48E1 #(
    .ACASCREG(0),
    .ADREG(1),
    .ALUMODEREG(0),
    .AREG(0),
    .AUTORESET_PATDET("NO_RESET"),
    .A_INPUT("DIRECT"),
    .BCASCREG(0),
    .BREG(0),
    .B_INPUT("DIRECT"),
    .CARRYINREG(0),
    .CARRYINSELREG(0),
    .CREG(0),
    .DREG(1),
    .INMODEREG(0),
    .IS_ALUMODE_INVERTED(4'b0000),
    .IS_CARRYIN_INVERTED(1'b0),
    .IS_CLK_INVERTED(1'b0),
    .IS_INMODE_INVERTED(5'b00000),
    .IS_OPMODE_INVERTED(7'b0000000),
    .MASK(48'hFFFFFFFFFFFF),
    .MREG(0),
    .OPMODEREG(0),
    .PATTERN(48'hFFFFFFFFFFFF),
    .PREG(1),
    .SEL_MASK("MASK"),
    .SEL_PATTERN("PATTERN"),
    .USE_DPORT("FALSE"),
    .USE_MULT("MULTIPLY"),
    .USE_PATTERN_DETECT("NO_PATDET"),
    .USE_SIMD("ONE48")) 
    \Using_FPGA.DSP48E1_I1 
       (.A({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,\Using_FPGA.DSP48E1_I1_1 }),
        .ACIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ACOUT({\Using_FPGA.DSP48E1_I1_n_24 ,\Using_FPGA.DSP48E1_I1_n_25 ,\Using_FPGA.DSP48E1_I1_n_26 ,\Using_FPGA.DSP48E1_I1_n_27 ,\Using_FPGA.DSP48E1_I1_n_28 ,\Using_FPGA.DSP48E1_I1_n_29 ,\Using_FPGA.DSP48E1_I1_n_30 ,\Using_FPGA.DSP48E1_I1_n_31 ,\Using_FPGA.DSP48E1_I1_n_32 ,\Using_FPGA.DSP48E1_I1_n_33 ,\Using_FPGA.DSP48E1_I1_n_34 ,\Using_FPGA.DSP48E1_I1_n_35 ,\Using_FPGA.DSP48E1_I1_n_36 ,\Using_FPGA.DSP48E1_I1_n_37 ,\Using_FPGA.DSP48E1_I1_n_38 ,\Using_FPGA.DSP48E1_I1_n_39 ,\Using_FPGA.DSP48E1_I1_n_40 ,\Using_FPGA.DSP48E1_I1_n_41 ,\Using_FPGA.DSP48E1_I1_n_42 ,\Using_FPGA.DSP48E1_I1_n_43 ,\Using_FPGA.DSP48E1_I1_n_44 ,\Using_FPGA.DSP48E1_I1_n_45 ,\Using_FPGA.DSP48E1_I1_n_46 ,\Using_FPGA.DSP48E1_I1_n_47 ,\Using_FPGA.DSP48E1_I1_n_48 ,\Using_FPGA.DSP48E1_I1_n_49 ,\Using_FPGA.DSP48E1_I1_n_50 ,\Using_FPGA.DSP48E1_I1_n_51 ,\Using_FPGA.DSP48E1_I1_n_52 ,\Using_FPGA.DSP48E1_I1_n_53 }),
        .ALUMODE({1'b0,1'b0,1'b0,1'b0}),
        .B({1'b0,1'b0,\Using_FPGA.DSP48E1_I1_1 }),
        .BCIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .BCOUT({\Using_FPGA.DSP48E1_I1_n_6 ,\Using_FPGA.DSP48E1_I1_n_7 ,\Using_FPGA.DSP48E1_I1_n_8 ,\Using_FPGA.DSP48E1_I1_n_9 ,\Using_FPGA.DSP48E1_I1_n_10 ,\Using_FPGA.DSP48E1_I1_n_11 ,\Using_FPGA.DSP48E1_I1_n_12 ,\Using_FPGA.DSP48E1_I1_n_13 ,\Using_FPGA.DSP48E1_I1_n_14 ,\Using_FPGA.DSP48E1_I1_n_15 ,\Using_FPGA.DSP48E1_I1_n_16 ,\Using_FPGA.DSP48E1_I1_n_17 ,\Using_FPGA.DSP48E1_I1_n_18 ,\Using_FPGA.DSP48E1_I1_n_19 ,\Using_FPGA.DSP48E1_I1_n_20 ,\Using_FPGA.DSP48E1_I1_n_21 ,\Using_FPGA.DSP48E1_I1_n_22 ,\Using_FPGA.DSP48E1_I1_n_23 }),
        .C({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CARRYCASCIN(1'b0),
        .CARRYCASCOUT(\Using_FPGA.DSP48E1_I1_n_0 ),
        .CARRYIN(1'b0),
        .CARRYINSEL({1'b0,1'b0,1'b0}),
        .CARRYOUT({\Using_FPGA.DSP48E1_I1_n_54 ,\Using_FPGA.DSP48E1_I1_n_55 ,\Using_FPGA.DSP48E1_I1_n_56 ,\Using_FPGA.DSP48E1_I1_n_57 }),
        .CEA1(1'b0),
        .CEA2(1'b0),
        .CEAD(1'b0),
        .CEALUMODE(1'b0),
        .CEB1(1'b0),
        .CEB2(1'b0),
        .CEC(1'b0),
        .CECARRYIN(1'b0),
        .CECTRL(1'b0),
        .CED(1'b0),
        .CEINMODE(1'b0),
        .CEM(1'b0),
        .CEP(1'b1),
        .CLK(Clk),
        .D({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .INMODE({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .MULTSIGNIN(1'b0),
        .MULTSIGNOUT(\Using_FPGA.DSP48E1_I1_n_1 ),
        .OPMODE({1'b0,1'b0,1'b0,1'b0,1'b1,1'b0,1'b1}),
        .OVERFLOW(\Using_FPGA.DSP48E1_I1_n_2 ),
        .P({c0_bd_p[0],c0_bd_p[1],c0_bd_p[2],c0_bd_p[3],c0_bd_p[4],c0_bd_p[5],c0_bd_p[6],c0_bd_p[7],c0_bd_p[8],c0_bd_p[9],c0_bd_p[10],c0_bd_p[11],c0_bd_p[12],c0_bd_p[13],c0_bd_p[14],c0_bd_p[15],c0_bd_p[16],c0_bd_p[17],c0_bd_p[18],c0_bd_p[19],c0_bd_p[20],c0_bd_p[21],c0_bd_p[22],c0_bd_p[23],c0_bd_p[24],c0_bd_p[25],c0_bd_p[26],c0_bd_p[27],c0_bd_p[28],c0_bd_p[29],c0_bd_p[30],D}),
        .PATTERNBDETECT(\Using_FPGA.DSP48E1_I1_n_3 ),
        .PATTERNDETECT(\Using_FPGA.DSP48E1_I1_n_4 ),
        .PCIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .PCOUT(\Using_FPGA.DSP48E1_I1_0 ),
        .RSTA(1'b0),
        .RSTALLCARRYIN(1'b0),
        .RSTALUMODE(1'b0),
        .RSTB(1'b0),
        .RSTC(1'b0),
        .RSTCTRL(1'b0),
        .RSTD(1'b0),
        .RSTINMODE(1'b0),
        .RSTM(1'b0),
        .RSTP(1'b0),
        .UNDERFLOW(\Using_FPGA.DSP48E1_I1_n_5 ));
endmodule

(* ORIG_REF_NAME = "MB_DSP48E1" *) 
module block_design_microblaze_0_0_MB_DSP48E1_158
   (P,
    \Using_FPGA.DSP48E1_I1_0 ,
    Clk,
    B,
    A);
  output [16:0]P;
  output [47:0]\Using_FPGA.DSP48E1_I1_0 ;
  input Clk;
  input [16:0]B;
  input [16:0]A;

  wire [16:0]A;
  wire [16:0]B;
  wire Clk;
  wire [16:0]P;
  wire [47:0]\Using_FPGA.DSP48E1_I1_0 ;
  wire \Using_FPGA.DSP48E1_I1_n_0 ;
  wire \Using_FPGA.DSP48E1_I1_n_1 ;
  wire \Using_FPGA.DSP48E1_I1_n_10 ;
  wire \Using_FPGA.DSP48E1_I1_n_11 ;
  wire \Using_FPGA.DSP48E1_I1_n_12 ;
  wire \Using_FPGA.DSP48E1_I1_n_13 ;
  wire \Using_FPGA.DSP48E1_I1_n_14 ;
  wire \Using_FPGA.DSP48E1_I1_n_15 ;
  wire \Using_FPGA.DSP48E1_I1_n_16 ;
  wire \Using_FPGA.DSP48E1_I1_n_17 ;
  wire \Using_FPGA.DSP48E1_I1_n_18 ;
  wire \Using_FPGA.DSP48E1_I1_n_19 ;
  wire \Using_FPGA.DSP48E1_I1_n_2 ;
  wire \Using_FPGA.DSP48E1_I1_n_20 ;
  wire \Using_FPGA.DSP48E1_I1_n_21 ;
  wire \Using_FPGA.DSP48E1_I1_n_22 ;
  wire \Using_FPGA.DSP48E1_I1_n_23 ;
  wire \Using_FPGA.DSP48E1_I1_n_24 ;
  wire \Using_FPGA.DSP48E1_I1_n_25 ;
  wire \Using_FPGA.DSP48E1_I1_n_26 ;
  wire \Using_FPGA.DSP48E1_I1_n_27 ;
  wire \Using_FPGA.DSP48E1_I1_n_28 ;
  wire \Using_FPGA.DSP48E1_I1_n_29 ;
  wire \Using_FPGA.DSP48E1_I1_n_3 ;
  wire \Using_FPGA.DSP48E1_I1_n_30 ;
  wire \Using_FPGA.DSP48E1_I1_n_31 ;
  wire \Using_FPGA.DSP48E1_I1_n_32 ;
  wire \Using_FPGA.DSP48E1_I1_n_33 ;
  wire \Using_FPGA.DSP48E1_I1_n_34 ;
  wire \Using_FPGA.DSP48E1_I1_n_35 ;
  wire \Using_FPGA.DSP48E1_I1_n_36 ;
  wire \Using_FPGA.DSP48E1_I1_n_37 ;
  wire \Using_FPGA.DSP48E1_I1_n_38 ;
  wire \Using_FPGA.DSP48E1_I1_n_39 ;
  wire \Using_FPGA.DSP48E1_I1_n_4 ;
  wire \Using_FPGA.DSP48E1_I1_n_40 ;
  wire \Using_FPGA.DSP48E1_I1_n_41 ;
  wire \Using_FPGA.DSP48E1_I1_n_42 ;
  wire \Using_FPGA.DSP48E1_I1_n_43 ;
  wire \Using_FPGA.DSP48E1_I1_n_44 ;
  wire \Using_FPGA.DSP48E1_I1_n_45 ;
  wire \Using_FPGA.DSP48E1_I1_n_46 ;
  wire \Using_FPGA.DSP48E1_I1_n_47 ;
  wire \Using_FPGA.DSP48E1_I1_n_48 ;
  wire \Using_FPGA.DSP48E1_I1_n_49 ;
  wire \Using_FPGA.DSP48E1_I1_n_5 ;
  wire \Using_FPGA.DSP48E1_I1_n_50 ;
  wire \Using_FPGA.DSP48E1_I1_n_51 ;
  wire \Using_FPGA.DSP48E1_I1_n_52 ;
  wire \Using_FPGA.DSP48E1_I1_n_53 ;
  wire \Using_FPGA.DSP48E1_I1_n_54 ;
  wire \Using_FPGA.DSP48E1_I1_n_55 ;
  wire \Using_FPGA.DSP48E1_I1_n_56 ;
  wire \Using_FPGA.DSP48E1_I1_n_57 ;
  wire \Using_FPGA.DSP48E1_I1_n_58 ;
  wire \Using_FPGA.DSP48E1_I1_n_59 ;
  wire \Using_FPGA.DSP48E1_I1_n_6 ;
  wire \Using_FPGA.DSP48E1_I1_n_60 ;
  wire \Using_FPGA.DSP48E1_I1_n_61 ;
  wire \Using_FPGA.DSP48E1_I1_n_62 ;
  wire \Using_FPGA.DSP48E1_I1_n_63 ;
  wire \Using_FPGA.DSP48E1_I1_n_64 ;
  wire \Using_FPGA.DSP48E1_I1_n_65 ;
  wire \Using_FPGA.DSP48E1_I1_n_66 ;
  wire \Using_FPGA.DSP48E1_I1_n_67 ;
  wire \Using_FPGA.DSP48E1_I1_n_68 ;
  wire \Using_FPGA.DSP48E1_I1_n_69 ;
  wire \Using_FPGA.DSP48E1_I1_n_7 ;
  wire \Using_FPGA.DSP48E1_I1_n_70 ;
  wire \Using_FPGA.DSP48E1_I1_n_71 ;
  wire \Using_FPGA.DSP48E1_I1_n_72 ;
  wire \Using_FPGA.DSP48E1_I1_n_73 ;
  wire \Using_FPGA.DSP48E1_I1_n_74 ;
  wire \Using_FPGA.DSP48E1_I1_n_75 ;
  wire \Using_FPGA.DSP48E1_I1_n_76 ;
  wire \Using_FPGA.DSP48E1_I1_n_77 ;
  wire \Using_FPGA.DSP48E1_I1_n_78 ;
  wire \Using_FPGA.DSP48E1_I1_n_79 ;
  wire \Using_FPGA.DSP48E1_I1_n_8 ;
  wire \Using_FPGA.DSP48E1_I1_n_80 ;
  wire \Using_FPGA.DSP48E1_I1_n_81 ;
  wire \Using_FPGA.DSP48E1_I1_n_82 ;
  wire \Using_FPGA.DSP48E1_I1_n_83 ;
  wire \Using_FPGA.DSP48E1_I1_n_84 ;
  wire \Using_FPGA.DSP48E1_I1_n_85 ;
  wire \Using_FPGA.DSP48E1_I1_n_86 ;
  wire \Using_FPGA.DSP48E1_I1_n_87 ;
  wire \Using_FPGA.DSP48E1_I1_n_88 ;
  wire \Using_FPGA.DSP48E1_I1_n_9 ;

  (* METHODOLOGY_DRC_VIOS = "{SYNTH-12 {cell *THIS*}}" *) 
  (* box_type = "PRIMITIVE" *) 
  DSP48E1 #(
    .ACASCREG(0),
    .ADREG(1),
    .ALUMODEREG(0),
    .AREG(0),
    .AUTORESET_PATDET("NO_RESET"),
    .A_INPUT("DIRECT"),
    .BCASCREG(0),
    .BREG(0),
    .B_INPUT("DIRECT"),
    .CARRYINREG(0),
    .CARRYINSELREG(0),
    .CREG(0),
    .DREG(1),
    .INMODEREG(0),
    .IS_ALUMODE_INVERTED(4'b0000),
    .IS_CARRYIN_INVERTED(1'b0),
    .IS_CLK_INVERTED(1'b0),
    .IS_INMODE_INVERTED(5'b00000),
    .IS_OPMODE_INVERTED(7'b0000000),
    .MASK(48'hFFFFFFFFFFFF),
    .MREG(0),
    .OPMODEREG(0),
    .PATTERN(48'hFFFFFFFFFFFF),
    .PREG(1),
    .SEL_MASK("MASK"),
    .SEL_PATTERN("PATTERN"),
    .USE_DPORT("FALSE"),
    .USE_MULT("MULTIPLY"),
    .USE_PATTERN_DETECT("NO_PATDET"),
    .USE_SIMD("ONE48")) 
    \Using_FPGA.DSP48E1_I1 
       (.A({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,A}),
        .ACIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ACOUT({\Using_FPGA.DSP48E1_I1_n_24 ,\Using_FPGA.DSP48E1_I1_n_25 ,\Using_FPGA.DSP48E1_I1_n_26 ,\Using_FPGA.DSP48E1_I1_n_27 ,\Using_FPGA.DSP48E1_I1_n_28 ,\Using_FPGA.DSP48E1_I1_n_29 ,\Using_FPGA.DSP48E1_I1_n_30 ,\Using_FPGA.DSP48E1_I1_n_31 ,\Using_FPGA.DSP48E1_I1_n_32 ,\Using_FPGA.DSP48E1_I1_n_33 ,\Using_FPGA.DSP48E1_I1_n_34 ,\Using_FPGA.DSP48E1_I1_n_35 ,\Using_FPGA.DSP48E1_I1_n_36 ,\Using_FPGA.DSP48E1_I1_n_37 ,\Using_FPGA.DSP48E1_I1_n_38 ,\Using_FPGA.DSP48E1_I1_n_39 ,\Using_FPGA.DSP48E1_I1_n_40 ,\Using_FPGA.DSP48E1_I1_n_41 ,\Using_FPGA.DSP48E1_I1_n_42 ,\Using_FPGA.DSP48E1_I1_n_43 ,\Using_FPGA.DSP48E1_I1_n_44 ,\Using_FPGA.DSP48E1_I1_n_45 ,\Using_FPGA.DSP48E1_I1_n_46 ,\Using_FPGA.DSP48E1_I1_n_47 ,\Using_FPGA.DSP48E1_I1_n_48 ,\Using_FPGA.DSP48E1_I1_n_49 ,\Using_FPGA.DSP48E1_I1_n_50 ,\Using_FPGA.DSP48E1_I1_n_51 ,\Using_FPGA.DSP48E1_I1_n_52 ,\Using_FPGA.DSP48E1_I1_n_53 }),
        .ALUMODE({1'b0,1'b0,1'b0,1'b0}),
        .B({1'b0,B}),
        .BCIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .BCOUT({\Using_FPGA.DSP48E1_I1_n_6 ,\Using_FPGA.DSP48E1_I1_n_7 ,\Using_FPGA.DSP48E1_I1_n_8 ,\Using_FPGA.DSP48E1_I1_n_9 ,\Using_FPGA.DSP48E1_I1_n_10 ,\Using_FPGA.DSP48E1_I1_n_11 ,\Using_FPGA.DSP48E1_I1_n_12 ,\Using_FPGA.DSP48E1_I1_n_13 ,\Using_FPGA.DSP48E1_I1_n_14 ,\Using_FPGA.DSP48E1_I1_n_15 ,\Using_FPGA.DSP48E1_I1_n_16 ,\Using_FPGA.DSP48E1_I1_n_17 ,\Using_FPGA.DSP48E1_I1_n_18 ,\Using_FPGA.DSP48E1_I1_n_19 ,\Using_FPGA.DSP48E1_I1_n_20 ,\Using_FPGA.DSP48E1_I1_n_21 ,\Using_FPGA.DSP48E1_I1_n_22 ,\Using_FPGA.DSP48E1_I1_n_23 }),
        .C({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CARRYCASCIN(1'b0),
        .CARRYCASCOUT(\Using_FPGA.DSP48E1_I1_n_0 ),
        .CARRYIN(1'b0),
        .CARRYINSEL({1'b0,1'b0,1'b0}),
        .CARRYOUT({\Using_FPGA.DSP48E1_I1_n_54 ,\Using_FPGA.DSP48E1_I1_n_55 ,\Using_FPGA.DSP48E1_I1_n_56 ,\Using_FPGA.DSP48E1_I1_n_57 }),
        .CEA1(1'b0),
        .CEA2(1'b0),
        .CEAD(1'b0),
        .CEALUMODE(1'b0),
        .CEB1(1'b0),
        .CEB2(1'b0),
        .CEC(1'b0),
        .CECARRYIN(1'b0),
        .CECTRL(1'b0),
        .CED(1'b0),
        .CEINMODE(1'b0),
        .CEM(1'b0),
        .CEP(1'b1),
        .CLK(Clk),
        .D({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .INMODE({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .MULTSIGNIN(1'b0),
        .MULTSIGNOUT(\Using_FPGA.DSP48E1_I1_n_1 ),
        .OPMODE({1'b0,1'b0,1'b0,1'b0,1'b1,1'b0,1'b1}),
        .OVERFLOW(\Using_FPGA.DSP48E1_I1_n_2 ),
        .P({\Using_FPGA.DSP48E1_I1_n_58 ,\Using_FPGA.DSP48E1_I1_n_59 ,\Using_FPGA.DSP48E1_I1_n_60 ,\Using_FPGA.DSP48E1_I1_n_61 ,\Using_FPGA.DSP48E1_I1_n_62 ,\Using_FPGA.DSP48E1_I1_n_63 ,\Using_FPGA.DSP48E1_I1_n_64 ,\Using_FPGA.DSP48E1_I1_n_65 ,\Using_FPGA.DSP48E1_I1_n_66 ,\Using_FPGA.DSP48E1_I1_n_67 ,\Using_FPGA.DSP48E1_I1_n_68 ,\Using_FPGA.DSP48E1_I1_n_69 ,\Using_FPGA.DSP48E1_I1_n_70 ,\Using_FPGA.DSP48E1_I1_n_71 ,\Using_FPGA.DSP48E1_I1_n_72 ,\Using_FPGA.DSP48E1_I1_n_73 ,\Using_FPGA.DSP48E1_I1_n_74 ,\Using_FPGA.DSP48E1_I1_n_75 ,\Using_FPGA.DSP48E1_I1_n_76 ,\Using_FPGA.DSP48E1_I1_n_77 ,\Using_FPGA.DSP48E1_I1_n_78 ,\Using_FPGA.DSP48E1_I1_n_79 ,\Using_FPGA.DSP48E1_I1_n_80 ,\Using_FPGA.DSP48E1_I1_n_81 ,\Using_FPGA.DSP48E1_I1_n_82 ,\Using_FPGA.DSP48E1_I1_n_83 ,\Using_FPGA.DSP48E1_I1_n_84 ,\Using_FPGA.DSP48E1_I1_n_85 ,\Using_FPGA.DSP48E1_I1_n_86 ,\Using_FPGA.DSP48E1_I1_n_87 ,\Using_FPGA.DSP48E1_I1_n_88 ,P}),
        .PATTERNBDETECT(\Using_FPGA.DSP48E1_I1_n_3 ),
        .PATTERNDETECT(\Using_FPGA.DSP48E1_I1_n_4 ),
        .PCIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .PCOUT(\Using_FPGA.DSP48E1_I1_0 ),
        .RSTA(1'b0),
        .RSTALLCARRYIN(1'b0),
        .RSTALUMODE(1'b0),
        .RSTB(1'b0),
        .RSTC(1'b0),
        .RSTCTRL(1'b0),
        .RSTD(1'b0),
        .RSTINMODE(1'b0),
        .RSTM(1'b0),
        .RSTP(1'b0),
        .UNDERFLOW(\Using_FPGA.DSP48E1_I1_n_5 ));
endmodule

(* ORIG_REF_NAME = "MB_DSP48E1" *) 
module block_design_microblaze_0_0_MB_DSP48E1__parameterized1
   (P,
    PCOUT,
    \Using_FPGA.DSP48E1_I1_0 ,
    \Using_FPGA.DSP48E1_I1_1 ,
    Clk,
    B,
    A,
    \Using_FPGA.DSP48E1_I1_2 ,
    mem_mulhu_instr,
    mem_mulh_instr,
    ex_not_mul_op);
  output [14:0]P;
  output [47:0]PCOUT;
  output \Using_FPGA.DSP48E1_I1_0 ;
  output \Using_FPGA.DSP48E1_I1_1 ;
  input Clk;
  input [15:0]B;
  input [16:0]A;
  input [47:0]\Using_FPGA.DSP48E1_I1_2 ;
  input mem_mulhu_instr;
  input mem_mulh_instr;
  input ex_not_mul_op;

  wire [16:0]A;
  wire [15:0]B;
  wire Clk;
  wire [14:0]P;
  wire [47:0]PCOUT;
  wire \Using_FPGA.DSP48E1_I1_0 ;
  wire \Using_FPGA.DSP48E1_I1_1 ;
  wire [47:0]\Using_FPGA.DSP48E1_I1_2 ;
  wire \Using_FPGA.DSP48E1_I1_n_0 ;
  wire \Using_FPGA.DSP48E1_I1_n_1 ;
  wire \Using_FPGA.DSP48E1_I1_n_10 ;
  wire \Using_FPGA.DSP48E1_I1_n_11 ;
  wire \Using_FPGA.DSP48E1_I1_n_12 ;
  wire \Using_FPGA.DSP48E1_I1_n_13 ;
  wire \Using_FPGA.DSP48E1_I1_n_14 ;
  wire \Using_FPGA.DSP48E1_I1_n_15 ;
  wire \Using_FPGA.DSP48E1_I1_n_16 ;
  wire \Using_FPGA.DSP48E1_I1_n_17 ;
  wire \Using_FPGA.DSP48E1_I1_n_18 ;
  wire \Using_FPGA.DSP48E1_I1_n_19 ;
  wire \Using_FPGA.DSP48E1_I1_n_2 ;
  wire \Using_FPGA.DSP48E1_I1_n_20 ;
  wire \Using_FPGA.DSP48E1_I1_n_21 ;
  wire \Using_FPGA.DSP48E1_I1_n_22 ;
  wire \Using_FPGA.DSP48E1_I1_n_23 ;
  wire \Using_FPGA.DSP48E1_I1_n_24 ;
  wire \Using_FPGA.DSP48E1_I1_n_25 ;
  wire \Using_FPGA.DSP48E1_I1_n_26 ;
  wire \Using_FPGA.DSP48E1_I1_n_27 ;
  wire \Using_FPGA.DSP48E1_I1_n_28 ;
  wire \Using_FPGA.DSP48E1_I1_n_29 ;
  wire \Using_FPGA.DSP48E1_I1_n_3 ;
  wire \Using_FPGA.DSP48E1_I1_n_30 ;
  wire \Using_FPGA.DSP48E1_I1_n_31 ;
  wire \Using_FPGA.DSP48E1_I1_n_32 ;
  wire \Using_FPGA.DSP48E1_I1_n_33 ;
  wire \Using_FPGA.DSP48E1_I1_n_34 ;
  wire \Using_FPGA.DSP48E1_I1_n_35 ;
  wire \Using_FPGA.DSP48E1_I1_n_36 ;
  wire \Using_FPGA.DSP48E1_I1_n_37 ;
  wire \Using_FPGA.DSP48E1_I1_n_38 ;
  wire \Using_FPGA.DSP48E1_I1_n_39 ;
  wire \Using_FPGA.DSP48E1_I1_n_4 ;
  wire \Using_FPGA.DSP48E1_I1_n_40 ;
  wire \Using_FPGA.DSP48E1_I1_n_41 ;
  wire \Using_FPGA.DSP48E1_I1_n_42 ;
  wire \Using_FPGA.DSP48E1_I1_n_43 ;
  wire \Using_FPGA.DSP48E1_I1_n_44 ;
  wire \Using_FPGA.DSP48E1_I1_n_45 ;
  wire \Using_FPGA.DSP48E1_I1_n_46 ;
  wire \Using_FPGA.DSP48E1_I1_n_47 ;
  wire \Using_FPGA.DSP48E1_I1_n_48 ;
  wire \Using_FPGA.DSP48E1_I1_n_49 ;
  wire \Using_FPGA.DSP48E1_I1_n_5 ;
  wire \Using_FPGA.DSP48E1_I1_n_50 ;
  wire \Using_FPGA.DSP48E1_I1_n_51 ;
  wire \Using_FPGA.DSP48E1_I1_n_52 ;
  wire \Using_FPGA.DSP48E1_I1_n_53 ;
  wire \Using_FPGA.DSP48E1_I1_n_54 ;
  wire \Using_FPGA.DSP48E1_I1_n_55 ;
  wire \Using_FPGA.DSP48E1_I1_n_56 ;
  wire \Using_FPGA.DSP48E1_I1_n_57 ;
  wire \Using_FPGA.DSP48E1_I1_n_58 ;
  wire \Using_FPGA.DSP48E1_I1_n_59 ;
  wire \Using_FPGA.DSP48E1_I1_n_6 ;
  wire \Using_FPGA.DSP48E1_I1_n_60 ;
  wire \Using_FPGA.DSP48E1_I1_n_61 ;
  wire \Using_FPGA.DSP48E1_I1_n_62 ;
  wire \Using_FPGA.DSP48E1_I1_n_63 ;
  wire \Using_FPGA.DSP48E1_I1_n_64 ;
  wire \Using_FPGA.DSP48E1_I1_n_65 ;
  wire \Using_FPGA.DSP48E1_I1_n_66 ;
  wire \Using_FPGA.DSP48E1_I1_n_67 ;
  wire \Using_FPGA.DSP48E1_I1_n_68 ;
  wire \Using_FPGA.DSP48E1_I1_n_69 ;
  wire \Using_FPGA.DSP48E1_I1_n_7 ;
  wire \Using_FPGA.DSP48E1_I1_n_70 ;
  wire \Using_FPGA.DSP48E1_I1_n_71 ;
  wire \Using_FPGA.DSP48E1_I1_n_72 ;
  wire \Using_FPGA.DSP48E1_I1_n_73 ;
  wire \Using_FPGA.DSP48E1_I1_n_74 ;
  wire \Using_FPGA.DSP48E1_I1_n_75 ;
  wire \Using_FPGA.DSP48E1_I1_n_76 ;
  wire \Using_FPGA.DSP48E1_I1_n_77 ;
  wire \Using_FPGA.DSP48E1_I1_n_78 ;
  wire \Using_FPGA.DSP48E1_I1_n_79 ;
  wire \Using_FPGA.DSP48E1_I1_n_8 ;
  wire \Using_FPGA.DSP48E1_I1_n_80 ;
  wire \Using_FPGA.DSP48E1_I1_n_81 ;
  wire \Using_FPGA.DSP48E1_I1_n_82 ;
  wire \Using_FPGA.DSP48E1_I1_n_83 ;
  wire \Using_FPGA.DSP48E1_I1_n_84 ;
  wire \Using_FPGA.DSP48E1_I1_n_85 ;
  wire \Using_FPGA.DSP48E1_I1_n_86 ;
  wire \Using_FPGA.DSP48E1_I1_n_87 ;
  wire \Using_FPGA.DSP48E1_I1_n_88 ;
  wire \Using_FPGA.DSP48E1_I1_n_9 ;
  wire ex_not_mul_op;
  wire [16:15]mem_bc_p;
  wire mem_mulh_instr;
  wire mem_mulhu_instr;

  (* SOFT_HLUTNM = "soft_lutpair23" *) 
  LUT4 #(
    .INIT(16'h00A8)) 
    \Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul64_result[30]_i_1 
       (.I0(mem_bc_p[16]),
        .I1(mem_mulhu_instr),
        .I2(mem_mulh_instr),
        .I3(ex_not_mul_op),
        .O(\Using_FPGA.DSP48E1_I1_0 ));
  (* SOFT_HLUTNM = "soft_lutpair23" *) 
  LUT4 #(
    .INIT(16'h00A8)) 
    \Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul64_result[31]_i_1 
       (.I0(mem_bc_p[15]),
        .I1(mem_mulhu_instr),
        .I2(mem_mulh_instr),
        .I3(ex_not_mul_op),
        .O(\Using_FPGA.DSP48E1_I1_1 ));
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-12 {cell *THIS*}}" *) 
  (* box_type = "PRIMITIVE" *) 
  DSP48E1 #(
    .ACASCREG(0),
    .ADREG(1),
    .ALUMODEREG(0),
    .AREG(0),
    .AUTORESET_PATDET("NO_RESET"),
    .A_INPUT("DIRECT"),
    .BCASCREG(0),
    .BREG(0),
    .B_INPUT("DIRECT"),
    .CARRYINREG(0),
    .CARRYINSELREG(0),
    .CREG(0),
    .DREG(1),
    .INMODEREG(0),
    .IS_ALUMODE_INVERTED(4'b0000),
    .IS_CARRYIN_INVERTED(1'b0),
    .IS_CLK_INVERTED(1'b0),
    .IS_INMODE_INVERTED(5'b00000),
    .IS_OPMODE_INVERTED(7'b0000000),
    .MASK(48'hFFFFFFFFFFFF),
    .MREG(1),
    .OPMODEREG(0),
    .PATTERN(48'hFFFFFFFFFFFF),
    .PREG(0),
    .SEL_MASK("MASK"),
    .SEL_PATTERN("PATTERN"),
    .USE_DPORT("FALSE"),
    .USE_MULT("MULTIPLY"),
    .USE_PATTERN_DETECT("NO_PATDET"),
    .USE_SIMD("ONE48")) 
    \Using_FPGA.DSP48E1_I1 
       (.A({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,A}),
        .ACIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ACOUT({\Using_FPGA.DSP48E1_I1_n_24 ,\Using_FPGA.DSP48E1_I1_n_25 ,\Using_FPGA.DSP48E1_I1_n_26 ,\Using_FPGA.DSP48E1_I1_n_27 ,\Using_FPGA.DSP48E1_I1_n_28 ,\Using_FPGA.DSP48E1_I1_n_29 ,\Using_FPGA.DSP48E1_I1_n_30 ,\Using_FPGA.DSP48E1_I1_n_31 ,\Using_FPGA.DSP48E1_I1_n_32 ,\Using_FPGA.DSP48E1_I1_n_33 ,\Using_FPGA.DSP48E1_I1_n_34 ,\Using_FPGA.DSP48E1_I1_n_35 ,\Using_FPGA.DSP48E1_I1_n_36 ,\Using_FPGA.DSP48E1_I1_n_37 ,\Using_FPGA.DSP48E1_I1_n_38 ,\Using_FPGA.DSP48E1_I1_n_39 ,\Using_FPGA.DSP48E1_I1_n_40 ,\Using_FPGA.DSP48E1_I1_n_41 ,\Using_FPGA.DSP48E1_I1_n_42 ,\Using_FPGA.DSP48E1_I1_n_43 ,\Using_FPGA.DSP48E1_I1_n_44 ,\Using_FPGA.DSP48E1_I1_n_45 ,\Using_FPGA.DSP48E1_I1_n_46 ,\Using_FPGA.DSP48E1_I1_n_47 ,\Using_FPGA.DSP48E1_I1_n_48 ,\Using_FPGA.DSP48E1_I1_n_49 ,\Using_FPGA.DSP48E1_I1_n_50 ,\Using_FPGA.DSP48E1_I1_n_51 ,\Using_FPGA.DSP48E1_I1_n_52 ,\Using_FPGA.DSP48E1_I1_n_53 }),
        .ALUMODE({1'b0,1'b0,1'b0,1'b0}),
        .B({B[15],B[15],B}),
        .BCIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .BCOUT({\Using_FPGA.DSP48E1_I1_n_6 ,\Using_FPGA.DSP48E1_I1_n_7 ,\Using_FPGA.DSP48E1_I1_n_8 ,\Using_FPGA.DSP48E1_I1_n_9 ,\Using_FPGA.DSP48E1_I1_n_10 ,\Using_FPGA.DSP48E1_I1_n_11 ,\Using_FPGA.DSP48E1_I1_n_12 ,\Using_FPGA.DSP48E1_I1_n_13 ,\Using_FPGA.DSP48E1_I1_n_14 ,\Using_FPGA.DSP48E1_I1_n_15 ,\Using_FPGA.DSP48E1_I1_n_16 ,\Using_FPGA.DSP48E1_I1_n_17 ,\Using_FPGA.DSP48E1_I1_n_18 ,\Using_FPGA.DSP48E1_I1_n_19 ,\Using_FPGA.DSP48E1_I1_n_20 ,\Using_FPGA.DSP48E1_I1_n_21 ,\Using_FPGA.DSP48E1_I1_n_22 ,\Using_FPGA.DSP48E1_I1_n_23 }),
        .C({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CARRYCASCIN(1'b0),
        .CARRYCASCOUT(\Using_FPGA.DSP48E1_I1_n_0 ),
        .CARRYIN(1'b0),
        .CARRYINSEL({1'b0,1'b0,1'b0}),
        .CARRYOUT({\Using_FPGA.DSP48E1_I1_n_54 ,\Using_FPGA.DSP48E1_I1_n_55 ,\Using_FPGA.DSP48E1_I1_n_56 ,\Using_FPGA.DSP48E1_I1_n_57 }),
        .CEA1(1'b0),
        .CEA2(1'b0),
        .CEAD(1'b0),
        .CEALUMODE(1'b0),
        .CEB1(1'b0),
        .CEB2(1'b0),
        .CEC(1'b0),
        .CECARRYIN(1'b0),
        .CECTRL(1'b0),
        .CED(1'b0),
        .CEINMODE(1'b0),
        .CEM(1'b1),
        .CEP(1'b0),
        .CLK(Clk),
        .D({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .INMODE({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .MULTSIGNIN(1'b0),
        .MULTSIGNOUT(\Using_FPGA.DSP48E1_I1_n_1 ),
        .OPMODE({1'b0,1'b0,1'b1,1'b0,1'b1,1'b0,1'b1}),
        .OVERFLOW(\Using_FPGA.DSP48E1_I1_n_2 ),
        .P({\Using_FPGA.DSP48E1_I1_n_58 ,\Using_FPGA.DSP48E1_I1_n_59 ,\Using_FPGA.DSP48E1_I1_n_60 ,\Using_FPGA.DSP48E1_I1_n_61 ,\Using_FPGA.DSP48E1_I1_n_62 ,\Using_FPGA.DSP48E1_I1_n_63 ,\Using_FPGA.DSP48E1_I1_n_64 ,\Using_FPGA.DSP48E1_I1_n_65 ,\Using_FPGA.DSP48E1_I1_n_66 ,\Using_FPGA.DSP48E1_I1_n_67 ,\Using_FPGA.DSP48E1_I1_n_68 ,\Using_FPGA.DSP48E1_I1_n_69 ,\Using_FPGA.DSP48E1_I1_n_70 ,\Using_FPGA.DSP48E1_I1_n_71 ,\Using_FPGA.DSP48E1_I1_n_72 ,\Using_FPGA.DSP48E1_I1_n_73 ,\Using_FPGA.DSP48E1_I1_n_74 ,\Using_FPGA.DSP48E1_I1_n_75 ,\Using_FPGA.DSP48E1_I1_n_76 ,\Using_FPGA.DSP48E1_I1_n_77 ,\Using_FPGA.DSP48E1_I1_n_78 ,\Using_FPGA.DSP48E1_I1_n_79 ,\Using_FPGA.DSP48E1_I1_n_80 ,\Using_FPGA.DSP48E1_I1_n_81 ,\Using_FPGA.DSP48E1_I1_n_82 ,\Using_FPGA.DSP48E1_I1_n_83 ,\Using_FPGA.DSP48E1_I1_n_84 ,\Using_FPGA.DSP48E1_I1_n_85 ,\Using_FPGA.DSP48E1_I1_n_86 ,\Using_FPGA.DSP48E1_I1_n_87 ,\Using_FPGA.DSP48E1_I1_n_88 ,mem_bc_p,P}),
        .PATTERNBDETECT(\Using_FPGA.DSP48E1_I1_n_3 ),
        .PATTERNDETECT(\Using_FPGA.DSP48E1_I1_n_4 ),
        .PCIN(\Using_FPGA.DSP48E1_I1_2 ),
        .PCOUT(PCOUT),
        .RSTA(1'b0),
        .RSTALLCARRYIN(1'b0),
        .RSTALUMODE(1'b0),
        .RSTB(1'b0),
        .RSTC(1'b0),
        .RSTCTRL(1'b0),
        .RSTD(1'b0),
        .RSTINMODE(1'b0),
        .RSTM(1'b0),
        .RSTP(1'b0),
        .UNDERFLOW(\Using_FPGA.DSP48E1_I1_n_5 ));
endmodule

(* ORIG_REF_NAME = "MB_DSP48E1" *) 
module block_design_microblaze_0_0_MB_DSP48E1__parameterized1_160
   (PCOUT,
    Clk,
    B,
    \Using_FPGA.DSP48E1_I1_0 ,
    \Using_FPGA.DSP48E1_I1_1 );
  output [47:0]PCOUT;
  input Clk;
  input [16:0]B;
  input [15:0]\Using_FPGA.DSP48E1_I1_0 ;
  input [47:0]\Using_FPGA.DSP48E1_I1_1 ;

  wire [16:0]B;
  wire Clk;
  wire [47:0]PCOUT;
  wire [15:0]\Using_FPGA.DSP48E1_I1_0 ;
  wire [47:0]\Using_FPGA.DSP48E1_I1_1 ;
  wire \Using_FPGA.DSP48E1_I1_n_0 ;
  wire \Using_FPGA.DSP48E1_I1_n_1 ;
  wire \Using_FPGA.DSP48E1_I1_n_10 ;
  wire \Using_FPGA.DSP48E1_I1_n_100 ;
  wire \Using_FPGA.DSP48E1_I1_n_101 ;
  wire \Using_FPGA.DSP48E1_I1_n_102 ;
  wire \Using_FPGA.DSP48E1_I1_n_103 ;
  wire \Using_FPGA.DSP48E1_I1_n_104 ;
  wire \Using_FPGA.DSP48E1_I1_n_105 ;
  wire \Using_FPGA.DSP48E1_I1_n_11 ;
  wire \Using_FPGA.DSP48E1_I1_n_12 ;
  wire \Using_FPGA.DSP48E1_I1_n_13 ;
  wire \Using_FPGA.DSP48E1_I1_n_14 ;
  wire \Using_FPGA.DSP48E1_I1_n_15 ;
  wire \Using_FPGA.DSP48E1_I1_n_16 ;
  wire \Using_FPGA.DSP48E1_I1_n_17 ;
  wire \Using_FPGA.DSP48E1_I1_n_18 ;
  wire \Using_FPGA.DSP48E1_I1_n_19 ;
  wire \Using_FPGA.DSP48E1_I1_n_2 ;
  wire \Using_FPGA.DSP48E1_I1_n_20 ;
  wire \Using_FPGA.DSP48E1_I1_n_21 ;
  wire \Using_FPGA.DSP48E1_I1_n_22 ;
  wire \Using_FPGA.DSP48E1_I1_n_23 ;
  wire \Using_FPGA.DSP48E1_I1_n_24 ;
  wire \Using_FPGA.DSP48E1_I1_n_25 ;
  wire \Using_FPGA.DSP48E1_I1_n_26 ;
  wire \Using_FPGA.DSP48E1_I1_n_27 ;
  wire \Using_FPGA.DSP48E1_I1_n_28 ;
  wire \Using_FPGA.DSP48E1_I1_n_29 ;
  wire \Using_FPGA.DSP48E1_I1_n_3 ;
  wire \Using_FPGA.DSP48E1_I1_n_30 ;
  wire \Using_FPGA.DSP48E1_I1_n_31 ;
  wire \Using_FPGA.DSP48E1_I1_n_32 ;
  wire \Using_FPGA.DSP48E1_I1_n_33 ;
  wire \Using_FPGA.DSP48E1_I1_n_34 ;
  wire \Using_FPGA.DSP48E1_I1_n_35 ;
  wire \Using_FPGA.DSP48E1_I1_n_36 ;
  wire \Using_FPGA.DSP48E1_I1_n_37 ;
  wire \Using_FPGA.DSP48E1_I1_n_38 ;
  wire \Using_FPGA.DSP48E1_I1_n_39 ;
  wire \Using_FPGA.DSP48E1_I1_n_4 ;
  wire \Using_FPGA.DSP48E1_I1_n_40 ;
  wire \Using_FPGA.DSP48E1_I1_n_41 ;
  wire \Using_FPGA.DSP48E1_I1_n_42 ;
  wire \Using_FPGA.DSP48E1_I1_n_43 ;
  wire \Using_FPGA.DSP48E1_I1_n_44 ;
  wire \Using_FPGA.DSP48E1_I1_n_45 ;
  wire \Using_FPGA.DSP48E1_I1_n_46 ;
  wire \Using_FPGA.DSP48E1_I1_n_47 ;
  wire \Using_FPGA.DSP48E1_I1_n_48 ;
  wire \Using_FPGA.DSP48E1_I1_n_49 ;
  wire \Using_FPGA.DSP48E1_I1_n_5 ;
  wire \Using_FPGA.DSP48E1_I1_n_50 ;
  wire \Using_FPGA.DSP48E1_I1_n_51 ;
  wire \Using_FPGA.DSP48E1_I1_n_52 ;
  wire \Using_FPGA.DSP48E1_I1_n_53 ;
  wire \Using_FPGA.DSP48E1_I1_n_54 ;
  wire \Using_FPGA.DSP48E1_I1_n_55 ;
  wire \Using_FPGA.DSP48E1_I1_n_56 ;
  wire \Using_FPGA.DSP48E1_I1_n_57 ;
  wire \Using_FPGA.DSP48E1_I1_n_58 ;
  wire \Using_FPGA.DSP48E1_I1_n_59 ;
  wire \Using_FPGA.DSP48E1_I1_n_6 ;
  wire \Using_FPGA.DSP48E1_I1_n_60 ;
  wire \Using_FPGA.DSP48E1_I1_n_61 ;
  wire \Using_FPGA.DSP48E1_I1_n_62 ;
  wire \Using_FPGA.DSP48E1_I1_n_63 ;
  wire \Using_FPGA.DSP48E1_I1_n_64 ;
  wire \Using_FPGA.DSP48E1_I1_n_65 ;
  wire \Using_FPGA.DSP48E1_I1_n_66 ;
  wire \Using_FPGA.DSP48E1_I1_n_67 ;
  wire \Using_FPGA.DSP48E1_I1_n_68 ;
  wire \Using_FPGA.DSP48E1_I1_n_69 ;
  wire \Using_FPGA.DSP48E1_I1_n_7 ;
  wire \Using_FPGA.DSP48E1_I1_n_70 ;
  wire \Using_FPGA.DSP48E1_I1_n_71 ;
  wire \Using_FPGA.DSP48E1_I1_n_72 ;
  wire \Using_FPGA.DSP48E1_I1_n_73 ;
  wire \Using_FPGA.DSP48E1_I1_n_74 ;
  wire \Using_FPGA.DSP48E1_I1_n_75 ;
  wire \Using_FPGA.DSP48E1_I1_n_76 ;
  wire \Using_FPGA.DSP48E1_I1_n_77 ;
  wire \Using_FPGA.DSP48E1_I1_n_78 ;
  wire \Using_FPGA.DSP48E1_I1_n_79 ;
  wire \Using_FPGA.DSP48E1_I1_n_8 ;
  wire \Using_FPGA.DSP48E1_I1_n_80 ;
  wire \Using_FPGA.DSP48E1_I1_n_81 ;
  wire \Using_FPGA.DSP48E1_I1_n_82 ;
  wire \Using_FPGA.DSP48E1_I1_n_83 ;
  wire \Using_FPGA.DSP48E1_I1_n_84 ;
  wire \Using_FPGA.DSP48E1_I1_n_85 ;
  wire \Using_FPGA.DSP48E1_I1_n_86 ;
  wire \Using_FPGA.DSP48E1_I1_n_87 ;
  wire \Using_FPGA.DSP48E1_I1_n_88 ;
  wire \Using_FPGA.DSP48E1_I1_n_89 ;
  wire \Using_FPGA.DSP48E1_I1_n_9 ;
  wire \Using_FPGA.DSP48E1_I1_n_90 ;
  wire \Using_FPGA.DSP48E1_I1_n_91 ;
  wire \Using_FPGA.DSP48E1_I1_n_92 ;
  wire \Using_FPGA.DSP48E1_I1_n_93 ;
  wire \Using_FPGA.DSP48E1_I1_n_94 ;
  wire \Using_FPGA.DSP48E1_I1_n_95 ;
  wire \Using_FPGA.DSP48E1_I1_n_96 ;
  wire \Using_FPGA.DSP48E1_I1_n_97 ;
  wire \Using_FPGA.DSP48E1_I1_n_98 ;
  wire \Using_FPGA.DSP48E1_I1_n_99 ;

  (* METHODOLOGY_DRC_VIOS = "{SYNTH-12 {cell *THIS*}}" *) 
  (* box_type = "PRIMITIVE" *) 
  DSP48E1 #(
    .ACASCREG(0),
    .ADREG(1),
    .ALUMODEREG(0),
    .AREG(0),
    .AUTORESET_PATDET("NO_RESET"),
    .A_INPUT("DIRECT"),
    .BCASCREG(0),
    .BREG(0),
    .B_INPUT("DIRECT"),
    .CARRYINREG(0),
    .CARRYINSELREG(0),
    .CREG(0),
    .DREG(1),
    .INMODEREG(0),
    .IS_ALUMODE_INVERTED(4'b0000),
    .IS_CARRYIN_INVERTED(1'b0),
    .IS_CLK_INVERTED(1'b0),
    .IS_INMODE_INVERTED(5'b00000),
    .IS_OPMODE_INVERTED(7'b0000000),
    .MASK(48'hFFFFFFFFFFFF),
    .MREG(1),
    .OPMODEREG(0),
    .PATTERN(48'hFFFFFFFFFFFF),
    .PREG(0),
    .SEL_MASK("MASK"),
    .SEL_PATTERN("PATTERN"),
    .USE_DPORT("FALSE"),
    .USE_MULT("MULTIPLY"),
    .USE_PATTERN_DETECT("NO_PATDET"),
    .USE_SIMD("ONE48")) 
    \Using_FPGA.DSP48E1_I1 
       (.A({\Using_FPGA.DSP48E1_I1_0 [15],\Using_FPGA.DSP48E1_I1_0 [15],\Using_FPGA.DSP48E1_I1_0 [15],\Using_FPGA.DSP48E1_I1_0 [15],\Using_FPGA.DSP48E1_I1_0 [15],\Using_FPGA.DSP48E1_I1_0 [15],\Using_FPGA.DSP48E1_I1_0 [15],\Using_FPGA.DSP48E1_I1_0 [15],\Using_FPGA.DSP48E1_I1_0 [15],\Using_FPGA.DSP48E1_I1_0 [15],\Using_FPGA.DSP48E1_I1_0 [15],\Using_FPGA.DSP48E1_I1_0 [15],\Using_FPGA.DSP48E1_I1_0 [15],\Using_FPGA.DSP48E1_I1_0 [15],\Using_FPGA.DSP48E1_I1_0 }),
        .ACIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ACOUT({\Using_FPGA.DSP48E1_I1_n_24 ,\Using_FPGA.DSP48E1_I1_n_25 ,\Using_FPGA.DSP48E1_I1_n_26 ,\Using_FPGA.DSP48E1_I1_n_27 ,\Using_FPGA.DSP48E1_I1_n_28 ,\Using_FPGA.DSP48E1_I1_n_29 ,\Using_FPGA.DSP48E1_I1_n_30 ,\Using_FPGA.DSP48E1_I1_n_31 ,\Using_FPGA.DSP48E1_I1_n_32 ,\Using_FPGA.DSP48E1_I1_n_33 ,\Using_FPGA.DSP48E1_I1_n_34 ,\Using_FPGA.DSP48E1_I1_n_35 ,\Using_FPGA.DSP48E1_I1_n_36 ,\Using_FPGA.DSP48E1_I1_n_37 ,\Using_FPGA.DSP48E1_I1_n_38 ,\Using_FPGA.DSP48E1_I1_n_39 ,\Using_FPGA.DSP48E1_I1_n_40 ,\Using_FPGA.DSP48E1_I1_n_41 ,\Using_FPGA.DSP48E1_I1_n_42 ,\Using_FPGA.DSP48E1_I1_n_43 ,\Using_FPGA.DSP48E1_I1_n_44 ,\Using_FPGA.DSP48E1_I1_n_45 ,\Using_FPGA.DSP48E1_I1_n_46 ,\Using_FPGA.DSP48E1_I1_n_47 ,\Using_FPGA.DSP48E1_I1_n_48 ,\Using_FPGA.DSP48E1_I1_n_49 ,\Using_FPGA.DSP48E1_I1_n_50 ,\Using_FPGA.DSP48E1_I1_n_51 ,\Using_FPGA.DSP48E1_I1_n_52 ,\Using_FPGA.DSP48E1_I1_n_53 }),
        .ALUMODE({1'b0,1'b0,1'b0,1'b0}),
        .B({1'b0,B}),
        .BCIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .BCOUT({\Using_FPGA.DSP48E1_I1_n_6 ,\Using_FPGA.DSP48E1_I1_n_7 ,\Using_FPGA.DSP48E1_I1_n_8 ,\Using_FPGA.DSP48E1_I1_n_9 ,\Using_FPGA.DSP48E1_I1_n_10 ,\Using_FPGA.DSP48E1_I1_n_11 ,\Using_FPGA.DSP48E1_I1_n_12 ,\Using_FPGA.DSP48E1_I1_n_13 ,\Using_FPGA.DSP48E1_I1_n_14 ,\Using_FPGA.DSP48E1_I1_n_15 ,\Using_FPGA.DSP48E1_I1_n_16 ,\Using_FPGA.DSP48E1_I1_n_17 ,\Using_FPGA.DSP48E1_I1_n_18 ,\Using_FPGA.DSP48E1_I1_n_19 ,\Using_FPGA.DSP48E1_I1_n_20 ,\Using_FPGA.DSP48E1_I1_n_21 ,\Using_FPGA.DSP48E1_I1_n_22 ,\Using_FPGA.DSP48E1_I1_n_23 }),
        .C({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CARRYCASCIN(1'b0),
        .CARRYCASCOUT(\Using_FPGA.DSP48E1_I1_n_0 ),
        .CARRYIN(1'b0),
        .CARRYINSEL({1'b0,1'b0,1'b0}),
        .CARRYOUT({\Using_FPGA.DSP48E1_I1_n_54 ,\Using_FPGA.DSP48E1_I1_n_55 ,\Using_FPGA.DSP48E1_I1_n_56 ,\Using_FPGA.DSP48E1_I1_n_57 }),
        .CEA1(1'b0),
        .CEA2(1'b0),
        .CEAD(1'b0),
        .CEALUMODE(1'b0),
        .CEB1(1'b0),
        .CEB2(1'b0),
        .CEC(1'b0),
        .CECARRYIN(1'b0),
        .CECTRL(1'b0),
        .CED(1'b0),
        .CEINMODE(1'b0),
        .CEM(1'b1),
        .CEP(1'b0),
        .CLK(Clk),
        .D({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .INMODE({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .MULTSIGNIN(1'b0),
        .MULTSIGNOUT(\Using_FPGA.DSP48E1_I1_n_1 ),
        .OPMODE({1'b1,1'b0,1'b1,1'b0,1'b1,1'b0,1'b1}),
        .OVERFLOW(\Using_FPGA.DSP48E1_I1_n_2 ),
        .P({\Using_FPGA.DSP48E1_I1_n_58 ,\Using_FPGA.DSP48E1_I1_n_59 ,\Using_FPGA.DSP48E1_I1_n_60 ,\Using_FPGA.DSP48E1_I1_n_61 ,\Using_FPGA.DSP48E1_I1_n_62 ,\Using_FPGA.DSP48E1_I1_n_63 ,\Using_FPGA.DSP48E1_I1_n_64 ,\Using_FPGA.DSP48E1_I1_n_65 ,\Using_FPGA.DSP48E1_I1_n_66 ,\Using_FPGA.DSP48E1_I1_n_67 ,\Using_FPGA.DSP48E1_I1_n_68 ,\Using_FPGA.DSP48E1_I1_n_69 ,\Using_FPGA.DSP48E1_I1_n_70 ,\Using_FPGA.DSP48E1_I1_n_71 ,\Using_FPGA.DSP48E1_I1_n_72 ,\Using_FPGA.DSP48E1_I1_n_73 ,\Using_FPGA.DSP48E1_I1_n_74 ,\Using_FPGA.DSP48E1_I1_n_75 ,\Using_FPGA.DSP48E1_I1_n_76 ,\Using_FPGA.DSP48E1_I1_n_77 ,\Using_FPGA.DSP48E1_I1_n_78 ,\Using_FPGA.DSP48E1_I1_n_79 ,\Using_FPGA.DSP48E1_I1_n_80 ,\Using_FPGA.DSP48E1_I1_n_81 ,\Using_FPGA.DSP48E1_I1_n_82 ,\Using_FPGA.DSP48E1_I1_n_83 ,\Using_FPGA.DSP48E1_I1_n_84 ,\Using_FPGA.DSP48E1_I1_n_85 ,\Using_FPGA.DSP48E1_I1_n_86 ,\Using_FPGA.DSP48E1_I1_n_87 ,\Using_FPGA.DSP48E1_I1_n_88 ,\Using_FPGA.DSP48E1_I1_n_89 ,\Using_FPGA.DSP48E1_I1_n_90 ,\Using_FPGA.DSP48E1_I1_n_91 ,\Using_FPGA.DSP48E1_I1_n_92 ,\Using_FPGA.DSP48E1_I1_n_93 ,\Using_FPGA.DSP48E1_I1_n_94 ,\Using_FPGA.DSP48E1_I1_n_95 ,\Using_FPGA.DSP48E1_I1_n_96 ,\Using_FPGA.DSP48E1_I1_n_97 ,\Using_FPGA.DSP48E1_I1_n_98 ,\Using_FPGA.DSP48E1_I1_n_99 ,\Using_FPGA.DSP48E1_I1_n_100 ,\Using_FPGA.DSP48E1_I1_n_101 ,\Using_FPGA.DSP48E1_I1_n_102 ,\Using_FPGA.DSP48E1_I1_n_103 ,\Using_FPGA.DSP48E1_I1_n_104 ,\Using_FPGA.DSP48E1_I1_n_105 }),
        .PATTERNBDETECT(\Using_FPGA.DSP48E1_I1_n_3 ),
        .PATTERNDETECT(\Using_FPGA.DSP48E1_I1_n_4 ),
        .PCIN(\Using_FPGA.DSP48E1_I1_1 ),
        .PCOUT(PCOUT),
        .RSTA(1'b0),
        .RSTALLCARRYIN(1'b0),
        .RSTALUMODE(1'b0),
        .RSTB(1'b0),
        .RSTC(1'b0),
        .RSTCTRL(1'b0),
        .RSTD(1'b0),
        .RSTINMODE(1'b0),
        .RSTM(1'b0),
        .RSTP(1'b0),
        .UNDERFLOW(\Using_FPGA.DSP48E1_I1_n_5 ));
endmodule

(* ORIG_REF_NAME = "MB_DSP48E1" *) 
module block_design_microblaze_0_0_MB_DSP48E1__parameterized3
   (PCOUT,
    Clk,
    D,
    \Using_FPGA.DSP48E1_I1_0 );
  output [47:0]PCOUT;
  input Clk;
  input [15:0]D;
  input [47:0]\Using_FPGA.DSP48E1_I1_0 ;

  wire Clk;
  wire [15:0]D;
  wire [47:0]PCOUT;
  wire [47:0]\Using_FPGA.DSP48E1_I1_0 ;
  wire \Using_FPGA.DSP48E1_I1_n_0 ;
  wire \Using_FPGA.DSP48E1_I1_n_1 ;
  wire \Using_FPGA.DSP48E1_I1_n_10 ;
  wire \Using_FPGA.DSP48E1_I1_n_11 ;
  wire \Using_FPGA.DSP48E1_I1_n_12 ;
  wire \Using_FPGA.DSP48E1_I1_n_13 ;
  wire \Using_FPGA.DSP48E1_I1_n_14 ;
  wire \Using_FPGA.DSP48E1_I1_n_15 ;
  wire \Using_FPGA.DSP48E1_I1_n_16 ;
  wire \Using_FPGA.DSP48E1_I1_n_17 ;
  wire \Using_FPGA.DSP48E1_I1_n_18 ;
  wire \Using_FPGA.DSP48E1_I1_n_19 ;
  wire \Using_FPGA.DSP48E1_I1_n_2 ;
  wire \Using_FPGA.DSP48E1_I1_n_20 ;
  wire \Using_FPGA.DSP48E1_I1_n_21 ;
  wire \Using_FPGA.DSP48E1_I1_n_22 ;
  wire \Using_FPGA.DSP48E1_I1_n_23 ;
  wire \Using_FPGA.DSP48E1_I1_n_24 ;
  wire \Using_FPGA.DSP48E1_I1_n_25 ;
  wire \Using_FPGA.DSP48E1_I1_n_26 ;
  wire \Using_FPGA.DSP48E1_I1_n_27 ;
  wire \Using_FPGA.DSP48E1_I1_n_28 ;
  wire \Using_FPGA.DSP48E1_I1_n_29 ;
  wire \Using_FPGA.DSP48E1_I1_n_3 ;
  wire \Using_FPGA.DSP48E1_I1_n_30 ;
  wire \Using_FPGA.DSP48E1_I1_n_31 ;
  wire \Using_FPGA.DSP48E1_I1_n_32 ;
  wire \Using_FPGA.DSP48E1_I1_n_33 ;
  wire \Using_FPGA.DSP48E1_I1_n_34 ;
  wire \Using_FPGA.DSP48E1_I1_n_35 ;
  wire \Using_FPGA.DSP48E1_I1_n_36 ;
  wire \Using_FPGA.DSP48E1_I1_n_37 ;
  wire \Using_FPGA.DSP48E1_I1_n_38 ;
  wire \Using_FPGA.DSP48E1_I1_n_39 ;
  wire \Using_FPGA.DSP48E1_I1_n_4 ;
  wire \Using_FPGA.DSP48E1_I1_n_40 ;
  wire \Using_FPGA.DSP48E1_I1_n_41 ;
  wire \Using_FPGA.DSP48E1_I1_n_42 ;
  wire \Using_FPGA.DSP48E1_I1_n_43 ;
  wire \Using_FPGA.DSP48E1_I1_n_44 ;
  wire \Using_FPGA.DSP48E1_I1_n_45 ;
  wire \Using_FPGA.DSP48E1_I1_n_46 ;
  wire \Using_FPGA.DSP48E1_I1_n_47 ;
  wire \Using_FPGA.DSP48E1_I1_n_48 ;
  wire \Using_FPGA.DSP48E1_I1_n_49 ;
  wire \Using_FPGA.DSP48E1_I1_n_5 ;
  wire \Using_FPGA.DSP48E1_I1_n_50 ;
  wire \Using_FPGA.DSP48E1_I1_n_51 ;
  wire \Using_FPGA.DSP48E1_I1_n_52 ;
  wire \Using_FPGA.DSP48E1_I1_n_53 ;
  wire \Using_FPGA.DSP48E1_I1_n_54 ;
  wire \Using_FPGA.DSP48E1_I1_n_55 ;
  wire \Using_FPGA.DSP48E1_I1_n_56 ;
  wire \Using_FPGA.DSP48E1_I1_n_57 ;
  wire \Using_FPGA.DSP48E1_I1_n_6 ;
  wire \Using_FPGA.DSP48E1_I1_n_7 ;
  wire \Using_FPGA.DSP48E1_I1_n_8 ;
  wire \Using_FPGA.DSP48E1_I1_n_9 ;
  wire [0:47]c1_ad_p;

  (* METHODOLOGY_DRC_VIOS = "{SYNTH-12 {cell *THIS*}}" *) 
  (* box_type = "PRIMITIVE" *) 
  DSP48E1 #(
    .ACASCREG(0),
    .ADREG(1),
    .ALUMODEREG(0),
    .AREG(0),
    .AUTORESET_PATDET("NO_RESET"),
    .A_INPUT("DIRECT"),
    .BCASCREG(0),
    .BREG(0),
    .B_INPUT("DIRECT"),
    .CARRYINREG(0),
    .CARRYINSELREG(0),
    .CREG(0),
    .DREG(1),
    .INMODEREG(0),
    .IS_ALUMODE_INVERTED(4'b0000),
    .IS_CARRYIN_INVERTED(1'b0),
    .IS_CLK_INVERTED(1'b0),
    .IS_INMODE_INVERTED(5'b00000),
    .IS_OPMODE_INVERTED(7'b0000000),
    .MASK(48'hFFFFFFFFFFFF),
    .MREG(1),
    .OPMODEREG(0),
    .PATTERN(48'hFFFFFFFFFFFF),
    .PREG(1),
    .SEL_MASK("MASK"),
    .SEL_PATTERN("PATTERN"),
    .USE_DPORT("FALSE"),
    .USE_MULT("MULTIPLY"),
    .USE_PATTERN_DETECT("NO_PATDET"),
    .USE_SIMD("ONE48")) 
    \Using_FPGA.DSP48E1_I1 
       (.A({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ACIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ACOUT({\Using_FPGA.DSP48E1_I1_n_24 ,\Using_FPGA.DSP48E1_I1_n_25 ,\Using_FPGA.DSP48E1_I1_n_26 ,\Using_FPGA.DSP48E1_I1_n_27 ,\Using_FPGA.DSP48E1_I1_n_28 ,\Using_FPGA.DSP48E1_I1_n_29 ,\Using_FPGA.DSP48E1_I1_n_30 ,\Using_FPGA.DSP48E1_I1_n_31 ,\Using_FPGA.DSP48E1_I1_n_32 ,\Using_FPGA.DSP48E1_I1_n_33 ,\Using_FPGA.DSP48E1_I1_n_34 ,\Using_FPGA.DSP48E1_I1_n_35 ,\Using_FPGA.DSP48E1_I1_n_36 ,\Using_FPGA.DSP48E1_I1_n_37 ,\Using_FPGA.DSP48E1_I1_n_38 ,\Using_FPGA.DSP48E1_I1_n_39 ,\Using_FPGA.DSP48E1_I1_n_40 ,\Using_FPGA.DSP48E1_I1_n_41 ,\Using_FPGA.DSP48E1_I1_n_42 ,\Using_FPGA.DSP48E1_I1_n_43 ,\Using_FPGA.DSP48E1_I1_n_44 ,\Using_FPGA.DSP48E1_I1_n_45 ,\Using_FPGA.DSP48E1_I1_n_46 ,\Using_FPGA.DSP48E1_I1_n_47 ,\Using_FPGA.DSP48E1_I1_n_48 ,\Using_FPGA.DSP48E1_I1_n_49 ,\Using_FPGA.DSP48E1_I1_n_50 ,\Using_FPGA.DSP48E1_I1_n_51 ,\Using_FPGA.DSP48E1_I1_n_52 ,\Using_FPGA.DSP48E1_I1_n_53 }),
        .ALUMODE({1'b0,1'b0,1'b0,1'b0}),
        .B({1'b0,1'b0,D}),
        .BCIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .BCOUT({\Using_FPGA.DSP48E1_I1_n_6 ,\Using_FPGA.DSP48E1_I1_n_7 ,\Using_FPGA.DSP48E1_I1_n_8 ,\Using_FPGA.DSP48E1_I1_n_9 ,\Using_FPGA.DSP48E1_I1_n_10 ,\Using_FPGA.DSP48E1_I1_n_11 ,\Using_FPGA.DSP48E1_I1_n_12 ,\Using_FPGA.DSP48E1_I1_n_13 ,\Using_FPGA.DSP48E1_I1_n_14 ,\Using_FPGA.DSP48E1_I1_n_15 ,\Using_FPGA.DSP48E1_I1_n_16 ,\Using_FPGA.DSP48E1_I1_n_17 ,\Using_FPGA.DSP48E1_I1_n_18 ,\Using_FPGA.DSP48E1_I1_n_19 ,\Using_FPGA.DSP48E1_I1_n_20 ,\Using_FPGA.DSP48E1_I1_n_21 ,\Using_FPGA.DSP48E1_I1_n_22 ,\Using_FPGA.DSP48E1_I1_n_23 }),
        .C({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CARRYCASCIN(1'b0),
        .CARRYCASCOUT(\Using_FPGA.DSP48E1_I1_n_0 ),
        .CARRYIN(1'b0),
        .CARRYINSEL({1'b0,1'b0,1'b0}),
        .CARRYOUT({\Using_FPGA.DSP48E1_I1_n_54 ,\Using_FPGA.DSP48E1_I1_n_55 ,\Using_FPGA.DSP48E1_I1_n_56 ,\Using_FPGA.DSP48E1_I1_n_57 }),
        .CEA1(1'b0),
        .CEA2(1'b0),
        .CEAD(1'b0),
        .CEALUMODE(1'b0),
        .CEB1(1'b0),
        .CEB2(1'b0),
        .CEC(1'b0),
        .CECARRYIN(1'b0),
        .CECTRL(1'b0),
        .CED(1'b0),
        .CEINMODE(1'b0),
        .CEM(1'b1),
        .CEP(1'b1),
        .CLK(Clk),
        .D({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .INMODE({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .MULTSIGNIN(1'b0),
        .MULTSIGNOUT(\Using_FPGA.DSP48E1_I1_n_1 ),
        .OPMODE({1'b1,1'b0,1'b1,1'b0,1'b1,1'b0,1'b1}),
        .OVERFLOW(\Using_FPGA.DSP48E1_I1_n_2 ),
        .P({c1_ad_p[0],c1_ad_p[1],c1_ad_p[2],c1_ad_p[3],c1_ad_p[4],c1_ad_p[5],c1_ad_p[6],c1_ad_p[7],c1_ad_p[8],c1_ad_p[9],c1_ad_p[10],c1_ad_p[11],c1_ad_p[12],c1_ad_p[13],c1_ad_p[14],c1_ad_p[15],c1_ad_p[16],c1_ad_p[17],c1_ad_p[18],c1_ad_p[19],c1_ad_p[20],c1_ad_p[21],c1_ad_p[22],c1_ad_p[23],c1_ad_p[24],c1_ad_p[25],c1_ad_p[26],c1_ad_p[27],c1_ad_p[28],c1_ad_p[29],c1_ad_p[30],c1_ad_p[31],c1_ad_p[32],c1_ad_p[33],c1_ad_p[34],c1_ad_p[35],c1_ad_p[36],c1_ad_p[37],c1_ad_p[38],c1_ad_p[39],c1_ad_p[40],c1_ad_p[41],c1_ad_p[42],c1_ad_p[43],c1_ad_p[44],c1_ad_p[45],c1_ad_p[46],c1_ad_p[47]}),
        .PATTERNBDETECT(\Using_FPGA.DSP48E1_I1_n_3 ),
        .PATTERNDETECT(\Using_FPGA.DSP48E1_I1_n_4 ),
        .PCIN(\Using_FPGA.DSP48E1_I1_0 ),
        .PCOUT(PCOUT),
        .RSTA(1'b0),
        .RSTALLCARRYIN(1'b0),
        .RSTALUMODE(1'b0),
        .RSTB(1'b0),
        .RSTC(1'b0),
        .RSTCTRL(1'b0),
        .RSTD(1'b0),
        .RSTINMODE(1'b0),
        .RSTM(1'b0),
        .RSTP(1'b0),
        .UNDERFLOW(\Using_FPGA.DSP48E1_I1_n_5 ));
endmodule

(* ORIG_REF_NAME = "MB_DSP48E1" *) 
module block_design_microblaze_0_0_MB_DSP48E1__parameterized3_159
   (P,
    Clk,
    B,
    \Using_FPGA.DSP48E1_I1_0 ,
    PCOUT,
    ex_not_mul_op,
    mem_mulh_instr,
    mem_mulhu_instr);
  output [29:0]P;
  input Clk;
  input [15:0]B;
  input [15:0]\Using_FPGA.DSP48E1_I1_0 ;
  input [47:0]PCOUT;
  input ex_not_mul_op;
  input mem_mulh_instr;
  input mem_mulhu_instr;

  wire [15:0]B;
  wire Clk;
  wire [29:0]P;
  wire [47:0]PCOUT;
  wire [15:0]\Using_FPGA.DSP48E1_I1_0 ;
  wire \Using_FPGA.DSP48E1_I1_i_1__1_n_0 ;
  wire \Using_FPGA.DSP48E1_I1_n_0 ;
  wire \Using_FPGA.DSP48E1_I1_n_1 ;
  wire \Using_FPGA.DSP48E1_I1_n_10 ;
  wire \Using_FPGA.DSP48E1_I1_n_106 ;
  wire \Using_FPGA.DSP48E1_I1_n_107 ;
  wire \Using_FPGA.DSP48E1_I1_n_108 ;
  wire \Using_FPGA.DSP48E1_I1_n_109 ;
  wire \Using_FPGA.DSP48E1_I1_n_11 ;
  wire \Using_FPGA.DSP48E1_I1_n_110 ;
  wire \Using_FPGA.DSP48E1_I1_n_111 ;
  wire \Using_FPGA.DSP48E1_I1_n_112 ;
  wire \Using_FPGA.DSP48E1_I1_n_113 ;
  wire \Using_FPGA.DSP48E1_I1_n_114 ;
  wire \Using_FPGA.DSP48E1_I1_n_115 ;
  wire \Using_FPGA.DSP48E1_I1_n_116 ;
  wire \Using_FPGA.DSP48E1_I1_n_117 ;
  wire \Using_FPGA.DSP48E1_I1_n_118 ;
  wire \Using_FPGA.DSP48E1_I1_n_119 ;
  wire \Using_FPGA.DSP48E1_I1_n_12 ;
  wire \Using_FPGA.DSP48E1_I1_n_120 ;
  wire \Using_FPGA.DSP48E1_I1_n_121 ;
  wire \Using_FPGA.DSP48E1_I1_n_122 ;
  wire \Using_FPGA.DSP48E1_I1_n_123 ;
  wire \Using_FPGA.DSP48E1_I1_n_124 ;
  wire \Using_FPGA.DSP48E1_I1_n_125 ;
  wire \Using_FPGA.DSP48E1_I1_n_126 ;
  wire \Using_FPGA.DSP48E1_I1_n_127 ;
  wire \Using_FPGA.DSP48E1_I1_n_128 ;
  wire \Using_FPGA.DSP48E1_I1_n_129 ;
  wire \Using_FPGA.DSP48E1_I1_n_13 ;
  wire \Using_FPGA.DSP48E1_I1_n_130 ;
  wire \Using_FPGA.DSP48E1_I1_n_131 ;
  wire \Using_FPGA.DSP48E1_I1_n_132 ;
  wire \Using_FPGA.DSP48E1_I1_n_133 ;
  wire \Using_FPGA.DSP48E1_I1_n_134 ;
  wire \Using_FPGA.DSP48E1_I1_n_135 ;
  wire \Using_FPGA.DSP48E1_I1_n_136 ;
  wire \Using_FPGA.DSP48E1_I1_n_137 ;
  wire \Using_FPGA.DSP48E1_I1_n_138 ;
  wire \Using_FPGA.DSP48E1_I1_n_139 ;
  wire \Using_FPGA.DSP48E1_I1_n_14 ;
  wire \Using_FPGA.DSP48E1_I1_n_140 ;
  wire \Using_FPGA.DSP48E1_I1_n_141 ;
  wire \Using_FPGA.DSP48E1_I1_n_142 ;
  wire \Using_FPGA.DSP48E1_I1_n_143 ;
  wire \Using_FPGA.DSP48E1_I1_n_144 ;
  wire \Using_FPGA.DSP48E1_I1_n_145 ;
  wire \Using_FPGA.DSP48E1_I1_n_146 ;
  wire \Using_FPGA.DSP48E1_I1_n_147 ;
  wire \Using_FPGA.DSP48E1_I1_n_148 ;
  wire \Using_FPGA.DSP48E1_I1_n_149 ;
  wire \Using_FPGA.DSP48E1_I1_n_15 ;
  wire \Using_FPGA.DSP48E1_I1_n_150 ;
  wire \Using_FPGA.DSP48E1_I1_n_151 ;
  wire \Using_FPGA.DSP48E1_I1_n_152 ;
  wire \Using_FPGA.DSP48E1_I1_n_153 ;
  wire \Using_FPGA.DSP48E1_I1_n_16 ;
  wire \Using_FPGA.DSP48E1_I1_n_17 ;
  wire \Using_FPGA.DSP48E1_I1_n_18 ;
  wire \Using_FPGA.DSP48E1_I1_n_19 ;
  wire \Using_FPGA.DSP48E1_I1_n_2 ;
  wire \Using_FPGA.DSP48E1_I1_n_20 ;
  wire \Using_FPGA.DSP48E1_I1_n_21 ;
  wire \Using_FPGA.DSP48E1_I1_n_22 ;
  wire \Using_FPGA.DSP48E1_I1_n_23 ;
  wire \Using_FPGA.DSP48E1_I1_n_24 ;
  wire \Using_FPGA.DSP48E1_I1_n_25 ;
  wire \Using_FPGA.DSP48E1_I1_n_26 ;
  wire \Using_FPGA.DSP48E1_I1_n_27 ;
  wire \Using_FPGA.DSP48E1_I1_n_28 ;
  wire \Using_FPGA.DSP48E1_I1_n_29 ;
  wire \Using_FPGA.DSP48E1_I1_n_3 ;
  wire \Using_FPGA.DSP48E1_I1_n_30 ;
  wire \Using_FPGA.DSP48E1_I1_n_31 ;
  wire \Using_FPGA.DSP48E1_I1_n_32 ;
  wire \Using_FPGA.DSP48E1_I1_n_33 ;
  wire \Using_FPGA.DSP48E1_I1_n_34 ;
  wire \Using_FPGA.DSP48E1_I1_n_35 ;
  wire \Using_FPGA.DSP48E1_I1_n_36 ;
  wire \Using_FPGA.DSP48E1_I1_n_37 ;
  wire \Using_FPGA.DSP48E1_I1_n_38 ;
  wire \Using_FPGA.DSP48E1_I1_n_39 ;
  wire \Using_FPGA.DSP48E1_I1_n_4 ;
  wire \Using_FPGA.DSP48E1_I1_n_40 ;
  wire \Using_FPGA.DSP48E1_I1_n_41 ;
  wire \Using_FPGA.DSP48E1_I1_n_42 ;
  wire \Using_FPGA.DSP48E1_I1_n_43 ;
  wire \Using_FPGA.DSP48E1_I1_n_44 ;
  wire \Using_FPGA.DSP48E1_I1_n_45 ;
  wire \Using_FPGA.DSP48E1_I1_n_46 ;
  wire \Using_FPGA.DSP48E1_I1_n_47 ;
  wire \Using_FPGA.DSP48E1_I1_n_48 ;
  wire \Using_FPGA.DSP48E1_I1_n_49 ;
  wire \Using_FPGA.DSP48E1_I1_n_5 ;
  wire \Using_FPGA.DSP48E1_I1_n_50 ;
  wire \Using_FPGA.DSP48E1_I1_n_51 ;
  wire \Using_FPGA.DSP48E1_I1_n_52 ;
  wire \Using_FPGA.DSP48E1_I1_n_53 ;
  wire \Using_FPGA.DSP48E1_I1_n_54 ;
  wire \Using_FPGA.DSP48E1_I1_n_55 ;
  wire \Using_FPGA.DSP48E1_I1_n_56 ;
  wire \Using_FPGA.DSP48E1_I1_n_57 ;
  wire \Using_FPGA.DSP48E1_I1_n_58 ;
  wire \Using_FPGA.DSP48E1_I1_n_59 ;
  wire \Using_FPGA.DSP48E1_I1_n_6 ;
  wire \Using_FPGA.DSP48E1_I1_n_60 ;
  wire \Using_FPGA.DSP48E1_I1_n_61 ;
  wire \Using_FPGA.DSP48E1_I1_n_62 ;
  wire \Using_FPGA.DSP48E1_I1_n_63 ;
  wire \Using_FPGA.DSP48E1_I1_n_64 ;
  wire \Using_FPGA.DSP48E1_I1_n_65 ;
  wire \Using_FPGA.DSP48E1_I1_n_66 ;
  wire \Using_FPGA.DSP48E1_I1_n_67 ;
  wire \Using_FPGA.DSP48E1_I1_n_68 ;
  wire \Using_FPGA.DSP48E1_I1_n_69 ;
  wire \Using_FPGA.DSP48E1_I1_n_7 ;
  wire \Using_FPGA.DSP48E1_I1_n_70 ;
  wire \Using_FPGA.DSP48E1_I1_n_71 ;
  wire \Using_FPGA.DSP48E1_I1_n_72 ;
  wire \Using_FPGA.DSP48E1_I1_n_73 ;
  wire \Using_FPGA.DSP48E1_I1_n_74 ;
  wire \Using_FPGA.DSP48E1_I1_n_75 ;
  wire \Using_FPGA.DSP48E1_I1_n_8 ;
  wire \Using_FPGA.DSP48E1_I1_n_9 ;
  wire ex_not_mul_op;
  wire mem_mulh_instr;
  wire mem_mulhu_instr;

  (* METHODOLOGY_DRC_VIOS = "{SYNTH-12 {cell *THIS*}}" *) 
  (* box_type = "PRIMITIVE" *) 
  DSP48E1 #(
    .ACASCREG(0),
    .ADREG(1),
    .ALUMODEREG(0),
    .AREG(0),
    .AUTORESET_PATDET("NO_RESET"),
    .A_INPUT("DIRECT"),
    .BCASCREG(0),
    .BREG(0),
    .B_INPUT("DIRECT"),
    .CARRYINREG(0),
    .CARRYINSELREG(0),
    .CREG(0),
    .DREG(1),
    .INMODEREG(0),
    .IS_ALUMODE_INVERTED(4'b0000),
    .IS_CARRYIN_INVERTED(1'b0),
    .IS_CLK_INVERTED(1'b0),
    .IS_INMODE_INVERTED(5'b00000),
    .IS_OPMODE_INVERTED(7'b0000000),
    .MASK(48'hFFFFFFFFFFFF),
    .MREG(1),
    .OPMODEREG(0),
    .PATTERN(48'hFFFFFFFFFFFF),
    .PREG(1),
    .SEL_MASK("MASK"),
    .SEL_PATTERN("PATTERN"),
    .USE_DPORT("FALSE"),
    .USE_MULT("MULTIPLY"),
    .USE_PATTERN_DETECT("NO_PATDET"),
    .USE_SIMD("ONE48")) 
    \Using_FPGA.DSP48E1_I1 
       (.A({\Using_FPGA.DSP48E1_I1_0 [15],\Using_FPGA.DSP48E1_I1_0 [15],\Using_FPGA.DSP48E1_I1_0 [15],\Using_FPGA.DSP48E1_I1_0 [15],\Using_FPGA.DSP48E1_I1_0 [15],\Using_FPGA.DSP48E1_I1_0 [15],\Using_FPGA.DSP48E1_I1_0 [15],\Using_FPGA.DSP48E1_I1_0 [15],\Using_FPGA.DSP48E1_I1_0 [15],\Using_FPGA.DSP48E1_I1_0 [15],\Using_FPGA.DSP48E1_I1_0 [15],\Using_FPGA.DSP48E1_I1_0 [15],\Using_FPGA.DSP48E1_I1_0 [15],\Using_FPGA.DSP48E1_I1_0 [15],\Using_FPGA.DSP48E1_I1_0 }),
        .ACIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ACOUT({\Using_FPGA.DSP48E1_I1_n_24 ,\Using_FPGA.DSP48E1_I1_n_25 ,\Using_FPGA.DSP48E1_I1_n_26 ,\Using_FPGA.DSP48E1_I1_n_27 ,\Using_FPGA.DSP48E1_I1_n_28 ,\Using_FPGA.DSP48E1_I1_n_29 ,\Using_FPGA.DSP48E1_I1_n_30 ,\Using_FPGA.DSP48E1_I1_n_31 ,\Using_FPGA.DSP48E1_I1_n_32 ,\Using_FPGA.DSP48E1_I1_n_33 ,\Using_FPGA.DSP48E1_I1_n_34 ,\Using_FPGA.DSP48E1_I1_n_35 ,\Using_FPGA.DSP48E1_I1_n_36 ,\Using_FPGA.DSP48E1_I1_n_37 ,\Using_FPGA.DSP48E1_I1_n_38 ,\Using_FPGA.DSP48E1_I1_n_39 ,\Using_FPGA.DSP48E1_I1_n_40 ,\Using_FPGA.DSP48E1_I1_n_41 ,\Using_FPGA.DSP48E1_I1_n_42 ,\Using_FPGA.DSP48E1_I1_n_43 ,\Using_FPGA.DSP48E1_I1_n_44 ,\Using_FPGA.DSP48E1_I1_n_45 ,\Using_FPGA.DSP48E1_I1_n_46 ,\Using_FPGA.DSP48E1_I1_n_47 ,\Using_FPGA.DSP48E1_I1_n_48 ,\Using_FPGA.DSP48E1_I1_n_49 ,\Using_FPGA.DSP48E1_I1_n_50 ,\Using_FPGA.DSP48E1_I1_n_51 ,\Using_FPGA.DSP48E1_I1_n_52 ,\Using_FPGA.DSP48E1_I1_n_53 }),
        .ALUMODE({1'b0,1'b0,1'b0,1'b0}),
        .B({B[15],B[15],B}),
        .BCIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .BCOUT({\Using_FPGA.DSP48E1_I1_n_6 ,\Using_FPGA.DSP48E1_I1_n_7 ,\Using_FPGA.DSP48E1_I1_n_8 ,\Using_FPGA.DSP48E1_I1_n_9 ,\Using_FPGA.DSP48E1_I1_n_10 ,\Using_FPGA.DSP48E1_I1_n_11 ,\Using_FPGA.DSP48E1_I1_n_12 ,\Using_FPGA.DSP48E1_I1_n_13 ,\Using_FPGA.DSP48E1_I1_n_14 ,\Using_FPGA.DSP48E1_I1_n_15 ,\Using_FPGA.DSP48E1_I1_n_16 ,\Using_FPGA.DSP48E1_I1_n_17 ,\Using_FPGA.DSP48E1_I1_n_18 ,\Using_FPGA.DSP48E1_I1_n_19 ,\Using_FPGA.DSP48E1_I1_n_20 ,\Using_FPGA.DSP48E1_I1_n_21 ,\Using_FPGA.DSP48E1_I1_n_22 ,\Using_FPGA.DSP48E1_I1_n_23 }),
        .C({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CARRYCASCIN(1'b0),
        .CARRYCASCOUT(\Using_FPGA.DSP48E1_I1_n_0 ),
        .CARRYIN(1'b0),
        .CARRYINSEL({1'b0,1'b0,1'b0}),
        .CARRYOUT({\Using_FPGA.DSP48E1_I1_n_54 ,\Using_FPGA.DSP48E1_I1_n_55 ,\Using_FPGA.DSP48E1_I1_n_56 ,\Using_FPGA.DSP48E1_I1_n_57 }),
        .CEA1(1'b0),
        .CEA2(1'b0),
        .CEAD(1'b0),
        .CEALUMODE(1'b0),
        .CEB1(1'b0),
        .CEB2(1'b0),
        .CEC(1'b0),
        .CECARRYIN(1'b0),
        .CECTRL(1'b0),
        .CED(1'b0),
        .CEINMODE(1'b0),
        .CEM(1'b1),
        .CEP(1'b1),
        .CLK(Clk),
        .D({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .INMODE({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .MULTSIGNIN(1'b0),
        .MULTSIGNOUT(\Using_FPGA.DSP48E1_I1_n_1 ),
        .OPMODE({1'b1,1'b0,1'b1,1'b0,1'b1,1'b0,1'b1}),
        .OVERFLOW(\Using_FPGA.DSP48E1_I1_n_2 ),
        .P({\Using_FPGA.DSP48E1_I1_n_58 ,\Using_FPGA.DSP48E1_I1_n_59 ,\Using_FPGA.DSP48E1_I1_n_60 ,\Using_FPGA.DSP48E1_I1_n_61 ,\Using_FPGA.DSP48E1_I1_n_62 ,\Using_FPGA.DSP48E1_I1_n_63 ,\Using_FPGA.DSP48E1_I1_n_64 ,\Using_FPGA.DSP48E1_I1_n_65 ,\Using_FPGA.DSP48E1_I1_n_66 ,\Using_FPGA.DSP48E1_I1_n_67 ,\Using_FPGA.DSP48E1_I1_n_68 ,\Using_FPGA.DSP48E1_I1_n_69 ,\Using_FPGA.DSP48E1_I1_n_70 ,\Using_FPGA.DSP48E1_I1_n_71 ,\Using_FPGA.DSP48E1_I1_n_72 ,\Using_FPGA.DSP48E1_I1_n_73 ,\Using_FPGA.DSP48E1_I1_n_74 ,\Using_FPGA.DSP48E1_I1_n_75 ,P}),
        .PATTERNBDETECT(\Using_FPGA.DSP48E1_I1_n_3 ),
        .PATTERNDETECT(\Using_FPGA.DSP48E1_I1_n_4 ),
        .PCIN(PCOUT),
        .PCOUT({\Using_FPGA.DSP48E1_I1_n_106 ,\Using_FPGA.DSP48E1_I1_n_107 ,\Using_FPGA.DSP48E1_I1_n_108 ,\Using_FPGA.DSP48E1_I1_n_109 ,\Using_FPGA.DSP48E1_I1_n_110 ,\Using_FPGA.DSP48E1_I1_n_111 ,\Using_FPGA.DSP48E1_I1_n_112 ,\Using_FPGA.DSP48E1_I1_n_113 ,\Using_FPGA.DSP48E1_I1_n_114 ,\Using_FPGA.DSP48E1_I1_n_115 ,\Using_FPGA.DSP48E1_I1_n_116 ,\Using_FPGA.DSP48E1_I1_n_117 ,\Using_FPGA.DSP48E1_I1_n_118 ,\Using_FPGA.DSP48E1_I1_n_119 ,\Using_FPGA.DSP48E1_I1_n_120 ,\Using_FPGA.DSP48E1_I1_n_121 ,\Using_FPGA.DSP48E1_I1_n_122 ,\Using_FPGA.DSP48E1_I1_n_123 ,\Using_FPGA.DSP48E1_I1_n_124 ,\Using_FPGA.DSP48E1_I1_n_125 ,\Using_FPGA.DSP48E1_I1_n_126 ,\Using_FPGA.DSP48E1_I1_n_127 ,\Using_FPGA.DSP48E1_I1_n_128 ,\Using_FPGA.DSP48E1_I1_n_129 ,\Using_FPGA.DSP48E1_I1_n_130 ,\Using_FPGA.DSP48E1_I1_n_131 ,\Using_FPGA.DSP48E1_I1_n_132 ,\Using_FPGA.DSP48E1_I1_n_133 ,\Using_FPGA.DSP48E1_I1_n_134 ,\Using_FPGA.DSP48E1_I1_n_135 ,\Using_FPGA.DSP48E1_I1_n_136 ,\Using_FPGA.DSP48E1_I1_n_137 ,\Using_FPGA.DSP48E1_I1_n_138 ,\Using_FPGA.DSP48E1_I1_n_139 ,\Using_FPGA.DSP48E1_I1_n_140 ,\Using_FPGA.DSP48E1_I1_n_141 ,\Using_FPGA.DSP48E1_I1_n_142 ,\Using_FPGA.DSP48E1_I1_n_143 ,\Using_FPGA.DSP48E1_I1_n_144 ,\Using_FPGA.DSP48E1_I1_n_145 ,\Using_FPGA.DSP48E1_I1_n_146 ,\Using_FPGA.DSP48E1_I1_n_147 ,\Using_FPGA.DSP48E1_I1_n_148 ,\Using_FPGA.DSP48E1_I1_n_149 ,\Using_FPGA.DSP48E1_I1_n_150 ,\Using_FPGA.DSP48E1_I1_n_151 ,\Using_FPGA.DSP48E1_I1_n_152 ,\Using_FPGA.DSP48E1_I1_n_153 }),
        .RSTA(1'b0),
        .RSTALLCARRYIN(1'b0),
        .RSTALUMODE(1'b0),
        .RSTB(1'b0),
        .RSTC(1'b0),
        .RSTCTRL(1'b0),
        .RSTD(1'b0),
        .RSTINMODE(1'b0),
        .RSTM(1'b0),
        .RSTP(\Using_FPGA.DSP48E1_I1_i_1__1_n_0 ),
        .UNDERFLOW(\Using_FPGA.DSP48E1_I1_n_5 ));
  LUT3 #(
    .INIT(8'hAB)) 
    \Using_FPGA.DSP48E1_I1_i_1__1 
       (.I0(ex_not_mul_op),
        .I1(mem_mulh_instr),
        .I2(mem_mulhu_instr),
        .O(\Using_FPGA.DSP48E1_I1_i_1__1_n_0 ));
endmodule

(* ORIG_REF_NAME = "MB_DSP48E1" *) 
module block_design_microblaze_0_0_MB_DSP48E1__parameterized5
   (\Using_FPGA.DSP48E1_I1_0 ,
    Clk,
    D,
    PCOUT,
    c1_stop_valid,
    CO,
    DI,
    S,
    \Gen_Access_Counter.Cycle_Count_2_i_reg[0] ,
    \Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 ,
    \Gen_Access_Counter.Cycle_Count_2_i_reg[0]_1 );
  output [15:0]\Using_FPGA.DSP48E1_I1_0 ;
  input Clk;
  input [15:0]D;
  input [47:0]PCOUT;
  input c1_stop_valid;
  input [0:0]CO;
  input [0:0]DI;
  input [0:0]S;
  input \Gen_Access_Counter.Cycle_Count_2_i_reg[0] ;
  input [14:0]\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 ;
  input [14:0]\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_1 ;

  wire [0:0]CO;
  wire Clk;
  wire [15:0]D;
  wire [0:0]DI;
  wire \Gen_Access_Counter.Cycle_Count_2_i[0]_i_10_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i[0]_i_4_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i[0]_i_5_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i[0]_i_6_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i[0]_i_7_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i[0]_i_8_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i[0]_i_9_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i[12]_i_2_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i[12]_i_3_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i[12]_i_4_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i[12]_i_6_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i[12]_i_7_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i[12]_i_8_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i[4]_i_2_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i[4]_i_3_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i[4]_i_4_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i[4]_i_5_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i[4]_i_6_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i[4]_i_7_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i[4]_i_8_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i[4]_i_9_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i[8]_i_2_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i[8]_i_3_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i[8]_i_4_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i[8]_i_5_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i[8]_i_6_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i[8]_i_7_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i[8]_i_8_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i[8]_i_9_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i_reg[0] ;
  wire [14:0]\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 ;
  wire [14:0]\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_1 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i_reg[0]_i_2_n_1 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i_reg[0]_i_2_n_2 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i_reg[0]_i_2_n_3 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i_reg[12]_i_1_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i_reg[12]_i_1_n_1 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i_reg[12]_i_1_n_2 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i_reg[12]_i_1_n_3 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i_reg[4]_i_1_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i_reg[4]_i_1_n_1 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i_reg[4]_i_1_n_2 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i_reg[4]_i_1_n_3 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i_reg[8]_i_1_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i_reg[8]_i_1_n_1 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i_reg[8]_i_1_n_2 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i_reg[8]_i_1_n_3 ;
  wire [47:0]PCOUT;
  wire [0:0]S;
  wire [15:0]\Using_FPGA.DSP48E1_I1_0 ;
  wire \Using_FPGA.DSP48E1_I1_n_0 ;
  wire \Using_FPGA.DSP48E1_I1_n_1 ;
  wire \Using_FPGA.DSP48E1_I1_n_10 ;
  wire \Using_FPGA.DSP48E1_I1_n_106 ;
  wire \Using_FPGA.DSP48E1_I1_n_107 ;
  wire \Using_FPGA.DSP48E1_I1_n_108 ;
  wire \Using_FPGA.DSP48E1_I1_n_109 ;
  wire \Using_FPGA.DSP48E1_I1_n_11 ;
  wire \Using_FPGA.DSP48E1_I1_n_110 ;
  wire \Using_FPGA.DSP48E1_I1_n_111 ;
  wire \Using_FPGA.DSP48E1_I1_n_112 ;
  wire \Using_FPGA.DSP48E1_I1_n_113 ;
  wire \Using_FPGA.DSP48E1_I1_n_114 ;
  wire \Using_FPGA.DSP48E1_I1_n_115 ;
  wire \Using_FPGA.DSP48E1_I1_n_116 ;
  wire \Using_FPGA.DSP48E1_I1_n_117 ;
  wire \Using_FPGA.DSP48E1_I1_n_118 ;
  wire \Using_FPGA.DSP48E1_I1_n_119 ;
  wire \Using_FPGA.DSP48E1_I1_n_12 ;
  wire \Using_FPGA.DSP48E1_I1_n_120 ;
  wire \Using_FPGA.DSP48E1_I1_n_121 ;
  wire \Using_FPGA.DSP48E1_I1_n_122 ;
  wire \Using_FPGA.DSP48E1_I1_n_123 ;
  wire \Using_FPGA.DSP48E1_I1_n_124 ;
  wire \Using_FPGA.DSP48E1_I1_n_125 ;
  wire \Using_FPGA.DSP48E1_I1_n_126 ;
  wire \Using_FPGA.DSP48E1_I1_n_127 ;
  wire \Using_FPGA.DSP48E1_I1_n_128 ;
  wire \Using_FPGA.DSP48E1_I1_n_129 ;
  wire \Using_FPGA.DSP48E1_I1_n_13 ;
  wire \Using_FPGA.DSP48E1_I1_n_130 ;
  wire \Using_FPGA.DSP48E1_I1_n_131 ;
  wire \Using_FPGA.DSP48E1_I1_n_132 ;
  wire \Using_FPGA.DSP48E1_I1_n_133 ;
  wire \Using_FPGA.DSP48E1_I1_n_134 ;
  wire \Using_FPGA.DSP48E1_I1_n_135 ;
  wire \Using_FPGA.DSP48E1_I1_n_136 ;
  wire \Using_FPGA.DSP48E1_I1_n_137 ;
  wire \Using_FPGA.DSP48E1_I1_n_138 ;
  wire \Using_FPGA.DSP48E1_I1_n_139 ;
  wire \Using_FPGA.DSP48E1_I1_n_14 ;
  wire \Using_FPGA.DSP48E1_I1_n_140 ;
  wire \Using_FPGA.DSP48E1_I1_n_141 ;
  wire \Using_FPGA.DSP48E1_I1_n_142 ;
  wire \Using_FPGA.DSP48E1_I1_n_143 ;
  wire \Using_FPGA.DSP48E1_I1_n_144 ;
  wire \Using_FPGA.DSP48E1_I1_n_145 ;
  wire \Using_FPGA.DSP48E1_I1_n_146 ;
  wire \Using_FPGA.DSP48E1_I1_n_147 ;
  wire \Using_FPGA.DSP48E1_I1_n_148 ;
  wire \Using_FPGA.DSP48E1_I1_n_149 ;
  wire \Using_FPGA.DSP48E1_I1_n_15 ;
  wire \Using_FPGA.DSP48E1_I1_n_150 ;
  wire \Using_FPGA.DSP48E1_I1_n_151 ;
  wire \Using_FPGA.DSP48E1_I1_n_152 ;
  wire \Using_FPGA.DSP48E1_I1_n_153 ;
  wire \Using_FPGA.DSP48E1_I1_n_16 ;
  wire \Using_FPGA.DSP48E1_I1_n_17 ;
  wire \Using_FPGA.DSP48E1_I1_n_18 ;
  wire \Using_FPGA.DSP48E1_I1_n_19 ;
  wire \Using_FPGA.DSP48E1_I1_n_2 ;
  wire \Using_FPGA.DSP48E1_I1_n_20 ;
  wire \Using_FPGA.DSP48E1_I1_n_21 ;
  wire \Using_FPGA.DSP48E1_I1_n_22 ;
  wire \Using_FPGA.DSP48E1_I1_n_23 ;
  wire \Using_FPGA.DSP48E1_I1_n_24 ;
  wire \Using_FPGA.DSP48E1_I1_n_25 ;
  wire \Using_FPGA.DSP48E1_I1_n_26 ;
  wire \Using_FPGA.DSP48E1_I1_n_27 ;
  wire \Using_FPGA.DSP48E1_I1_n_28 ;
  wire \Using_FPGA.DSP48E1_I1_n_29 ;
  wire \Using_FPGA.DSP48E1_I1_n_3 ;
  wire \Using_FPGA.DSP48E1_I1_n_30 ;
  wire \Using_FPGA.DSP48E1_I1_n_31 ;
  wire \Using_FPGA.DSP48E1_I1_n_32 ;
  wire \Using_FPGA.DSP48E1_I1_n_33 ;
  wire \Using_FPGA.DSP48E1_I1_n_34 ;
  wire \Using_FPGA.DSP48E1_I1_n_35 ;
  wire \Using_FPGA.DSP48E1_I1_n_36 ;
  wire \Using_FPGA.DSP48E1_I1_n_37 ;
  wire \Using_FPGA.DSP48E1_I1_n_38 ;
  wire \Using_FPGA.DSP48E1_I1_n_39 ;
  wire \Using_FPGA.DSP48E1_I1_n_4 ;
  wire \Using_FPGA.DSP48E1_I1_n_40 ;
  wire \Using_FPGA.DSP48E1_I1_n_41 ;
  wire \Using_FPGA.DSP48E1_I1_n_42 ;
  wire \Using_FPGA.DSP48E1_I1_n_43 ;
  wire \Using_FPGA.DSP48E1_I1_n_44 ;
  wire \Using_FPGA.DSP48E1_I1_n_45 ;
  wire \Using_FPGA.DSP48E1_I1_n_46 ;
  wire \Using_FPGA.DSP48E1_I1_n_47 ;
  wire \Using_FPGA.DSP48E1_I1_n_48 ;
  wire \Using_FPGA.DSP48E1_I1_n_49 ;
  wire \Using_FPGA.DSP48E1_I1_n_5 ;
  wire \Using_FPGA.DSP48E1_I1_n_50 ;
  wire \Using_FPGA.DSP48E1_I1_n_51 ;
  wire \Using_FPGA.DSP48E1_I1_n_52 ;
  wire \Using_FPGA.DSP48E1_I1_n_53 ;
  wire \Using_FPGA.DSP48E1_I1_n_54 ;
  wire \Using_FPGA.DSP48E1_I1_n_55 ;
  wire \Using_FPGA.DSP48E1_I1_n_56 ;
  wire \Using_FPGA.DSP48E1_I1_n_57 ;
  wire \Using_FPGA.DSP48E1_I1_n_58 ;
  wire \Using_FPGA.DSP48E1_I1_n_59 ;
  wire \Using_FPGA.DSP48E1_I1_n_6 ;
  wire \Using_FPGA.DSP48E1_I1_n_60 ;
  wire \Using_FPGA.DSP48E1_I1_n_61 ;
  wire \Using_FPGA.DSP48E1_I1_n_62 ;
  wire \Using_FPGA.DSP48E1_I1_n_63 ;
  wire \Using_FPGA.DSP48E1_I1_n_64 ;
  wire \Using_FPGA.DSP48E1_I1_n_65 ;
  wire \Using_FPGA.DSP48E1_I1_n_66 ;
  wire \Using_FPGA.DSP48E1_I1_n_67 ;
  wire \Using_FPGA.DSP48E1_I1_n_68 ;
  wire \Using_FPGA.DSP48E1_I1_n_69 ;
  wire \Using_FPGA.DSP48E1_I1_n_7 ;
  wire \Using_FPGA.DSP48E1_I1_n_70 ;
  wire \Using_FPGA.DSP48E1_I1_n_71 ;
  wire \Using_FPGA.DSP48E1_I1_n_72 ;
  wire \Using_FPGA.DSP48E1_I1_n_73 ;
  wire \Using_FPGA.DSP48E1_I1_n_74 ;
  wire \Using_FPGA.DSP48E1_I1_n_75 ;
  wire \Using_FPGA.DSP48E1_I1_n_76 ;
  wire \Using_FPGA.DSP48E1_I1_n_77 ;
  wire \Using_FPGA.DSP48E1_I1_n_78 ;
  wire \Using_FPGA.DSP48E1_I1_n_79 ;
  wire \Using_FPGA.DSP48E1_I1_n_8 ;
  wire \Using_FPGA.DSP48E1_I1_n_80 ;
  wire \Using_FPGA.DSP48E1_I1_n_81 ;
  wire \Using_FPGA.DSP48E1_I1_n_82 ;
  wire \Using_FPGA.DSP48E1_I1_n_83 ;
  wire \Using_FPGA.DSP48E1_I1_n_84 ;
  wire \Using_FPGA.DSP48E1_I1_n_85 ;
  wire \Using_FPGA.DSP48E1_I1_n_86 ;
  wire \Using_FPGA.DSP48E1_I1_n_87 ;
  wire \Using_FPGA.DSP48E1_I1_n_88 ;
  wire \Using_FPGA.DSP48E1_I1_n_89 ;
  wire \Using_FPGA.DSP48E1_I1_n_9 ;
  wire \Using_FPGA.DSP48E1_I1_n_90 ;
  wire [0:14]c1_mul32_result;
  wire c1_stop_valid;
  wire [3:3]\NLW_Gen_Access_Counter.Cycle_Count_2_i_reg[0]_i_2_CO_UNCONNECTED ;

  LUT5 #(
    .INIT(32'h5530AA30)) 
    \Gen_Access_Counter.Cycle_Count_2_i[0]_i_10 
       (.I0(c1_mul32_result[3]),
        .I1(\Gen_Access_Counter.Cycle_Count_2_i_reg[0] ),
        .I2(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 [11]),
        .I3(c1_stop_valid),
        .I4(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_1 [11]),
        .O(\Gen_Access_Counter.Cycle_Count_2_i[0]_i_10_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Gen_Access_Counter.Cycle_Count_2_i[0]_i_4 
       (.I0(c1_mul32_result[1]),
        .I1(c1_stop_valid),
        .O(\Gen_Access_Counter.Cycle_Count_2_i[0]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Gen_Access_Counter.Cycle_Count_2_i[0]_i_5 
       (.I0(c1_mul32_result[2]),
        .I1(c1_stop_valid),
        .O(\Gen_Access_Counter.Cycle_Count_2_i[0]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Gen_Access_Counter.Cycle_Count_2_i[0]_i_6 
       (.I0(c1_mul32_result[3]),
        .I1(c1_stop_valid),
        .O(\Gen_Access_Counter.Cycle_Count_2_i[0]_i_6_n_0 ));
  LUT5 #(
    .INIT(32'h5530AA30)) 
    \Gen_Access_Counter.Cycle_Count_2_i[0]_i_7 
       (.I0(c1_mul32_result[0]),
        .I1(\Gen_Access_Counter.Cycle_Count_2_i_reg[0] ),
        .I2(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 [14]),
        .I3(c1_stop_valid),
        .I4(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_1 [14]),
        .O(\Gen_Access_Counter.Cycle_Count_2_i[0]_i_7_n_0 ));
  LUT5 #(
    .INIT(32'h5530AA30)) 
    \Gen_Access_Counter.Cycle_Count_2_i[0]_i_8 
       (.I0(c1_mul32_result[1]),
        .I1(\Gen_Access_Counter.Cycle_Count_2_i_reg[0] ),
        .I2(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 [13]),
        .I3(c1_stop_valid),
        .I4(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_1 [13]),
        .O(\Gen_Access_Counter.Cycle_Count_2_i[0]_i_8_n_0 ));
  LUT5 #(
    .INIT(32'h5530AA30)) 
    \Gen_Access_Counter.Cycle_Count_2_i[0]_i_9 
       (.I0(c1_mul32_result[2]),
        .I1(\Gen_Access_Counter.Cycle_Count_2_i_reg[0] ),
        .I2(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 [12]),
        .I3(c1_stop_valid),
        .I4(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_1 [12]),
        .O(\Gen_Access_Counter.Cycle_Count_2_i[0]_i_9_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Gen_Access_Counter.Cycle_Count_2_i[12]_i_2 
       (.I0(c1_mul32_result[12]),
        .I1(c1_stop_valid),
        .O(\Gen_Access_Counter.Cycle_Count_2_i[12]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Gen_Access_Counter.Cycle_Count_2_i[12]_i_3 
       (.I0(c1_mul32_result[13]),
        .I1(c1_stop_valid),
        .O(\Gen_Access_Counter.Cycle_Count_2_i[12]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Gen_Access_Counter.Cycle_Count_2_i[12]_i_4 
       (.I0(c1_mul32_result[14]),
        .I1(c1_stop_valid),
        .O(\Gen_Access_Counter.Cycle_Count_2_i[12]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'h5530AA30)) 
    \Gen_Access_Counter.Cycle_Count_2_i[12]_i_6 
       (.I0(c1_mul32_result[12]),
        .I1(\Gen_Access_Counter.Cycle_Count_2_i_reg[0] ),
        .I2(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 [2]),
        .I3(c1_stop_valid),
        .I4(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_1 [2]),
        .O(\Gen_Access_Counter.Cycle_Count_2_i[12]_i_6_n_0 ));
  LUT5 #(
    .INIT(32'h5530AA30)) 
    \Gen_Access_Counter.Cycle_Count_2_i[12]_i_7 
       (.I0(c1_mul32_result[13]),
        .I1(\Gen_Access_Counter.Cycle_Count_2_i_reg[0] ),
        .I2(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 [1]),
        .I3(c1_stop_valid),
        .I4(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_1 [1]),
        .O(\Gen_Access_Counter.Cycle_Count_2_i[12]_i_7_n_0 ));
  LUT5 #(
    .INIT(32'h5530AA30)) 
    \Gen_Access_Counter.Cycle_Count_2_i[12]_i_8 
       (.I0(c1_mul32_result[14]),
        .I1(\Gen_Access_Counter.Cycle_Count_2_i_reg[0] ),
        .I2(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 [0]),
        .I3(c1_stop_valid),
        .I4(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_1 [0]),
        .O(\Gen_Access_Counter.Cycle_Count_2_i[12]_i_8_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Gen_Access_Counter.Cycle_Count_2_i[4]_i_2 
       (.I0(c1_mul32_result[4]),
        .I1(c1_stop_valid),
        .O(\Gen_Access_Counter.Cycle_Count_2_i[4]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Gen_Access_Counter.Cycle_Count_2_i[4]_i_3 
       (.I0(c1_mul32_result[5]),
        .I1(c1_stop_valid),
        .O(\Gen_Access_Counter.Cycle_Count_2_i[4]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Gen_Access_Counter.Cycle_Count_2_i[4]_i_4 
       (.I0(c1_mul32_result[6]),
        .I1(c1_stop_valid),
        .O(\Gen_Access_Counter.Cycle_Count_2_i[4]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Gen_Access_Counter.Cycle_Count_2_i[4]_i_5 
       (.I0(c1_mul32_result[7]),
        .I1(c1_stop_valid),
        .O(\Gen_Access_Counter.Cycle_Count_2_i[4]_i_5_n_0 ));
  LUT5 #(
    .INIT(32'h5530AA30)) 
    \Gen_Access_Counter.Cycle_Count_2_i[4]_i_6 
       (.I0(c1_mul32_result[4]),
        .I1(\Gen_Access_Counter.Cycle_Count_2_i_reg[0] ),
        .I2(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 [10]),
        .I3(c1_stop_valid),
        .I4(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_1 [10]),
        .O(\Gen_Access_Counter.Cycle_Count_2_i[4]_i_6_n_0 ));
  LUT5 #(
    .INIT(32'h5530AA30)) 
    \Gen_Access_Counter.Cycle_Count_2_i[4]_i_7 
       (.I0(c1_mul32_result[5]),
        .I1(\Gen_Access_Counter.Cycle_Count_2_i_reg[0] ),
        .I2(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 [9]),
        .I3(c1_stop_valid),
        .I4(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_1 [9]),
        .O(\Gen_Access_Counter.Cycle_Count_2_i[4]_i_7_n_0 ));
  LUT5 #(
    .INIT(32'h5530AA30)) 
    \Gen_Access_Counter.Cycle_Count_2_i[4]_i_8 
       (.I0(c1_mul32_result[6]),
        .I1(\Gen_Access_Counter.Cycle_Count_2_i_reg[0] ),
        .I2(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 [8]),
        .I3(c1_stop_valid),
        .I4(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_1 [8]),
        .O(\Gen_Access_Counter.Cycle_Count_2_i[4]_i_8_n_0 ));
  LUT5 #(
    .INIT(32'h5530AA30)) 
    \Gen_Access_Counter.Cycle_Count_2_i[4]_i_9 
       (.I0(c1_mul32_result[7]),
        .I1(\Gen_Access_Counter.Cycle_Count_2_i_reg[0] ),
        .I2(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 [7]),
        .I3(c1_stop_valid),
        .I4(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_1 [7]),
        .O(\Gen_Access_Counter.Cycle_Count_2_i[4]_i_9_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Gen_Access_Counter.Cycle_Count_2_i[8]_i_2 
       (.I0(c1_mul32_result[8]),
        .I1(c1_stop_valid),
        .O(\Gen_Access_Counter.Cycle_Count_2_i[8]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Gen_Access_Counter.Cycle_Count_2_i[8]_i_3 
       (.I0(c1_mul32_result[9]),
        .I1(c1_stop_valid),
        .O(\Gen_Access_Counter.Cycle_Count_2_i[8]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Gen_Access_Counter.Cycle_Count_2_i[8]_i_4 
       (.I0(c1_mul32_result[10]),
        .I1(c1_stop_valid),
        .O(\Gen_Access_Counter.Cycle_Count_2_i[8]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Gen_Access_Counter.Cycle_Count_2_i[8]_i_5 
       (.I0(c1_mul32_result[11]),
        .I1(c1_stop_valid),
        .O(\Gen_Access_Counter.Cycle_Count_2_i[8]_i_5_n_0 ));
  LUT5 #(
    .INIT(32'h5530AA30)) 
    \Gen_Access_Counter.Cycle_Count_2_i[8]_i_6 
       (.I0(c1_mul32_result[8]),
        .I1(\Gen_Access_Counter.Cycle_Count_2_i_reg[0] ),
        .I2(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 [6]),
        .I3(c1_stop_valid),
        .I4(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_1 [6]),
        .O(\Gen_Access_Counter.Cycle_Count_2_i[8]_i_6_n_0 ));
  LUT5 #(
    .INIT(32'h5530AA30)) 
    \Gen_Access_Counter.Cycle_Count_2_i[8]_i_7 
       (.I0(c1_mul32_result[9]),
        .I1(\Gen_Access_Counter.Cycle_Count_2_i_reg[0] ),
        .I2(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 [5]),
        .I3(c1_stop_valid),
        .I4(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_1 [5]),
        .O(\Gen_Access_Counter.Cycle_Count_2_i[8]_i_7_n_0 ));
  LUT5 #(
    .INIT(32'h5530AA30)) 
    \Gen_Access_Counter.Cycle_Count_2_i[8]_i_8 
       (.I0(c1_mul32_result[10]),
        .I1(\Gen_Access_Counter.Cycle_Count_2_i_reg[0] ),
        .I2(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 [4]),
        .I3(c1_stop_valid),
        .I4(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_1 [4]),
        .O(\Gen_Access_Counter.Cycle_Count_2_i[8]_i_8_n_0 ));
  LUT5 #(
    .INIT(32'h5530AA30)) 
    \Gen_Access_Counter.Cycle_Count_2_i[8]_i_9 
       (.I0(c1_mul32_result[11]),
        .I1(\Gen_Access_Counter.Cycle_Count_2_i_reg[0] ),
        .I2(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 [3]),
        .I3(c1_stop_valid),
        .I4(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_1 [3]),
        .O(\Gen_Access_Counter.Cycle_Count_2_i[8]_i_9_n_0 ));
  CARRY4 \Gen_Access_Counter.Cycle_Count_2_i_reg[0]_i_2 
       (.CI(\Gen_Access_Counter.Cycle_Count_2_i_reg[4]_i_1_n_0 ),
        .CO({\NLW_Gen_Access_Counter.Cycle_Count_2_i_reg[0]_i_2_CO_UNCONNECTED [3],\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_i_2_n_1 ,\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_i_2_n_2 ,\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,\Gen_Access_Counter.Cycle_Count_2_i[0]_i_4_n_0 ,\Gen_Access_Counter.Cycle_Count_2_i[0]_i_5_n_0 ,\Gen_Access_Counter.Cycle_Count_2_i[0]_i_6_n_0 }),
        .O(\Using_FPGA.DSP48E1_I1_0 [15:12]),
        .S({\Gen_Access_Counter.Cycle_Count_2_i[0]_i_7_n_0 ,\Gen_Access_Counter.Cycle_Count_2_i[0]_i_8_n_0 ,\Gen_Access_Counter.Cycle_Count_2_i[0]_i_9_n_0 ,\Gen_Access_Counter.Cycle_Count_2_i[0]_i_10_n_0 }));
  CARRY4 \Gen_Access_Counter.Cycle_Count_2_i_reg[12]_i_1 
       (.CI(CO),
        .CO({\Gen_Access_Counter.Cycle_Count_2_i_reg[12]_i_1_n_0 ,\Gen_Access_Counter.Cycle_Count_2_i_reg[12]_i_1_n_1 ,\Gen_Access_Counter.Cycle_Count_2_i_reg[12]_i_1_n_2 ,\Gen_Access_Counter.Cycle_Count_2_i_reg[12]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({\Gen_Access_Counter.Cycle_Count_2_i[12]_i_2_n_0 ,\Gen_Access_Counter.Cycle_Count_2_i[12]_i_3_n_0 ,\Gen_Access_Counter.Cycle_Count_2_i[12]_i_4_n_0 ,DI}),
        .O(\Using_FPGA.DSP48E1_I1_0 [3:0]),
        .S({\Gen_Access_Counter.Cycle_Count_2_i[12]_i_6_n_0 ,\Gen_Access_Counter.Cycle_Count_2_i[12]_i_7_n_0 ,\Gen_Access_Counter.Cycle_Count_2_i[12]_i_8_n_0 ,S}));
  CARRY4 \Gen_Access_Counter.Cycle_Count_2_i_reg[4]_i_1 
       (.CI(\Gen_Access_Counter.Cycle_Count_2_i_reg[8]_i_1_n_0 ),
        .CO({\Gen_Access_Counter.Cycle_Count_2_i_reg[4]_i_1_n_0 ,\Gen_Access_Counter.Cycle_Count_2_i_reg[4]_i_1_n_1 ,\Gen_Access_Counter.Cycle_Count_2_i_reg[4]_i_1_n_2 ,\Gen_Access_Counter.Cycle_Count_2_i_reg[4]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({\Gen_Access_Counter.Cycle_Count_2_i[4]_i_2_n_0 ,\Gen_Access_Counter.Cycle_Count_2_i[4]_i_3_n_0 ,\Gen_Access_Counter.Cycle_Count_2_i[4]_i_4_n_0 ,\Gen_Access_Counter.Cycle_Count_2_i[4]_i_5_n_0 }),
        .O(\Using_FPGA.DSP48E1_I1_0 [11:8]),
        .S({\Gen_Access_Counter.Cycle_Count_2_i[4]_i_6_n_0 ,\Gen_Access_Counter.Cycle_Count_2_i[4]_i_7_n_0 ,\Gen_Access_Counter.Cycle_Count_2_i[4]_i_8_n_0 ,\Gen_Access_Counter.Cycle_Count_2_i[4]_i_9_n_0 }));
  CARRY4 \Gen_Access_Counter.Cycle_Count_2_i_reg[8]_i_1 
       (.CI(\Gen_Access_Counter.Cycle_Count_2_i_reg[12]_i_1_n_0 ),
        .CO({\Gen_Access_Counter.Cycle_Count_2_i_reg[8]_i_1_n_0 ,\Gen_Access_Counter.Cycle_Count_2_i_reg[8]_i_1_n_1 ,\Gen_Access_Counter.Cycle_Count_2_i_reg[8]_i_1_n_2 ,\Gen_Access_Counter.Cycle_Count_2_i_reg[8]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({\Gen_Access_Counter.Cycle_Count_2_i[8]_i_2_n_0 ,\Gen_Access_Counter.Cycle_Count_2_i[8]_i_3_n_0 ,\Gen_Access_Counter.Cycle_Count_2_i[8]_i_4_n_0 ,\Gen_Access_Counter.Cycle_Count_2_i[8]_i_5_n_0 }),
        .O(\Using_FPGA.DSP48E1_I1_0 [7:4]),
        .S({\Gen_Access_Counter.Cycle_Count_2_i[8]_i_6_n_0 ,\Gen_Access_Counter.Cycle_Count_2_i[8]_i_7_n_0 ,\Gen_Access_Counter.Cycle_Count_2_i[8]_i_8_n_0 ,\Gen_Access_Counter.Cycle_Count_2_i[8]_i_9_n_0 }));
  (* box_type = "PRIMITIVE" *) 
  DSP48E1 #(
    .ACASCREG(1),
    .ADREG(1),
    .ALUMODEREG(0),
    .AREG(1),
    .AUTORESET_PATDET("NO_RESET"),
    .A_INPUT("DIRECT"),
    .BCASCREG(1),
    .BREG(1),
    .B_INPUT("DIRECT"),
    .CARRYINREG(0),
    .CARRYINSELREG(0),
    .CREG(0),
    .DREG(1),
    .INMODEREG(0),
    .IS_ALUMODE_INVERTED(4'b0000),
    .IS_CARRYIN_INVERTED(1'b0),
    .IS_CLK_INVERTED(1'b0),
    .IS_INMODE_INVERTED(5'b00000),
    .IS_OPMODE_INVERTED(7'b0000000),
    .MASK(48'hFFFFFFFFFFFF),
    .MREG(1),
    .OPMODEREG(0),
    .PATTERN(48'hFFFFFFFFFFFF),
    .PREG(0),
    .SEL_MASK("MASK"),
    .SEL_PATTERN("PATTERN"),
    .USE_DPORT("FALSE"),
    .USE_MULT("MULTIPLY"),
    .USE_PATTERN_DETECT("NO_PATDET"),
    .USE_SIMD("ONE48")) 
    \Using_FPGA.DSP48E1_I1 
       (.A({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,D}),
        .ACIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ACOUT({\Using_FPGA.DSP48E1_I1_n_24 ,\Using_FPGA.DSP48E1_I1_n_25 ,\Using_FPGA.DSP48E1_I1_n_26 ,\Using_FPGA.DSP48E1_I1_n_27 ,\Using_FPGA.DSP48E1_I1_n_28 ,\Using_FPGA.DSP48E1_I1_n_29 ,\Using_FPGA.DSP48E1_I1_n_30 ,\Using_FPGA.DSP48E1_I1_n_31 ,\Using_FPGA.DSP48E1_I1_n_32 ,\Using_FPGA.DSP48E1_I1_n_33 ,\Using_FPGA.DSP48E1_I1_n_34 ,\Using_FPGA.DSP48E1_I1_n_35 ,\Using_FPGA.DSP48E1_I1_n_36 ,\Using_FPGA.DSP48E1_I1_n_37 ,\Using_FPGA.DSP48E1_I1_n_38 ,\Using_FPGA.DSP48E1_I1_n_39 ,\Using_FPGA.DSP48E1_I1_n_40 ,\Using_FPGA.DSP48E1_I1_n_41 ,\Using_FPGA.DSP48E1_I1_n_42 ,\Using_FPGA.DSP48E1_I1_n_43 ,\Using_FPGA.DSP48E1_I1_n_44 ,\Using_FPGA.DSP48E1_I1_n_45 ,\Using_FPGA.DSP48E1_I1_n_46 ,\Using_FPGA.DSP48E1_I1_n_47 ,\Using_FPGA.DSP48E1_I1_n_48 ,\Using_FPGA.DSP48E1_I1_n_49 ,\Using_FPGA.DSP48E1_I1_n_50 ,\Using_FPGA.DSP48E1_I1_n_51 ,\Using_FPGA.DSP48E1_I1_n_52 ,\Using_FPGA.DSP48E1_I1_n_53 }),
        .ALUMODE({1'b0,1'b0,1'b0,1'b0}),
        .B({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .BCIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .BCOUT({\Using_FPGA.DSP48E1_I1_n_6 ,\Using_FPGA.DSP48E1_I1_n_7 ,\Using_FPGA.DSP48E1_I1_n_8 ,\Using_FPGA.DSP48E1_I1_n_9 ,\Using_FPGA.DSP48E1_I1_n_10 ,\Using_FPGA.DSP48E1_I1_n_11 ,\Using_FPGA.DSP48E1_I1_n_12 ,\Using_FPGA.DSP48E1_I1_n_13 ,\Using_FPGA.DSP48E1_I1_n_14 ,\Using_FPGA.DSP48E1_I1_n_15 ,\Using_FPGA.DSP48E1_I1_n_16 ,\Using_FPGA.DSP48E1_I1_n_17 ,\Using_FPGA.DSP48E1_I1_n_18 ,\Using_FPGA.DSP48E1_I1_n_19 ,\Using_FPGA.DSP48E1_I1_n_20 ,\Using_FPGA.DSP48E1_I1_n_21 ,\Using_FPGA.DSP48E1_I1_n_22 ,\Using_FPGA.DSP48E1_I1_n_23 }),
        .C({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CARRYCASCIN(1'b0),
        .CARRYCASCOUT(\Using_FPGA.DSP48E1_I1_n_0 ),
        .CARRYIN(1'b0),
        .CARRYINSEL({1'b0,1'b0,1'b0}),
        .CARRYOUT({\Using_FPGA.DSP48E1_I1_n_54 ,\Using_FPGA.DSP48E1_I1_n_55 ,\Using_FPGA.DSP48E1_I1_n_56 ,\Using_FPGA.DSP48E1_I1_n_57 }),
        .CEA1(1'b0),
        .CEA2(1'b1),
        .CEAD(1'b0),
        .CEALUMODE(1'b0),
        .CEB1(1'b0),
        .CEB2(1'b1),
        .CEC(1'b0),
        .CECARRYIN(1'b0),
        .CECTRL(1'b0),
        .CED(1'b0),
        .CEINMODE(1'b0),
        .CEM(1'b1),
        .CEP(1'b0),
        .CLK(Clk),
        .D({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .INMODE({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .MULTSIGNIN(1'b0),
        .MULTSIGNOUT(\Using_FPGA.DSP48E1_I1_n_1 ),
        .OPMODE({1'b0,1'b0,1'b1,1'b0,1'b1,1'b0,1'b1}),
        .OVERFLOW(\Using_FPGA.DSP48E1_I1_n_2 ),
        .P({\Using_FPGA.DSP48E1_I1_n_58 ,\Using_FPGA.DSP48E1_I1_n_59 ,\Using_FPGA.DSP48E1_I1_n_60 ,\Using_FPGA.DSP48E1_I1_n_61 ,\Using_FPGA.DSP48E1_I1_n_62 ,\Using_FPGA.DSP48E1_I1_n_63 ,\Using_FPGA.DSP48E1_I1_n_64 ,\Using_FPGA.DSP48E1_I1_n_65 ,\Using_FPGA.DSP48E1_I1_n_66 ,\Using_FPGA.DSP48E1_I1_n_67 ,\Using_FPGA.DSP48E1_I1_n_68 ,\Using_FPGA.DSP48E1_I1_n_69 ,\Using_FPGA.DSP48E1_I1_n_70 ,\Using_FPGA.DSP48E1_I1_n_71 ,\Using_FPGA.DSP48E1_I1_n_72 ,\Using_FPGA.DSP48E1_I1_n_73 ,\Using_FPGA.DSP48E1_I1_n_74 ,\Using_FPGA.DSP48E1_I1_n_75 ,\Using_FPGA.DSP48E1_I1_n_76 ,\Using_FPGA.DSP48E1_I1_n_77 ,\Using_FPGA.DSP48E1_I1_n_78 ,\Using_FPGA.DSP48E1_I1_n_79 ,\Using_FPGA.DSP48E1_I1_n_80 ,\Using_FPGA.DSP48E1_I1_n_81 ,\Using_FPGA.DSP48E1_I1_n_82 ,\Using_FPGA.DSP48E1_I1_n_83 ,\Using_FPGA.DSP48E1_I1_n_84 ,\Using_FPGA.DSP48E1_I1_n_85 ,\Using_FPGA.DSP48E1_I1_n_86 ,\Using_FPGA.DSP48E1_I1_n_87 ,\Using_FPGA.DSP48E1_I1_n_88 ,\Using_FPGA.DSP48E1_I1_n_89 ,\Using_FPGA.DSP48E1_I1_n_90 ,c1_mul32_result[0],c1_mul32_result[1],c1_mul32_result[2],c1_mul32_result[3],c1_mul32_result[4],c1_mul32_result[5],c1_mul32_result[6],c1_mul32_result[7],c1_mul32_result[8],c1_mul32_result[9],c1_mul32_result[10],c1_mul32_result[11],c1_mul32_result[12],c1_mul32_result[13],c1_mul32_result[14]}),
        .PATTERNBDETECT(\Using_FPGA.DSP48E1_I1_n_3 ),
        .PATTERNDETECT(\Using_FPGA.DSP48E1_I1_n_4 ),
        .PCIN(PCOUT),
        .PCOUT({\Using_FPGA.DSP48E1_I1_n_106 ,\Using_FPGA.DSP48E1_I1_n_107 ,\Using_FPGA.DSP48E1_I1_n_108 ,\Using_FPGA.DSP48E1_I1_n_109 ,\Using_FPGA.DSP48E1_I1_n_110 ,\Using_FPGA.DSP48E1_I1_n_111 ,\Using_FPGA.DSP48E1_I1_n_112 ,\Using_FPGA.DSP48E1_I1_n_113 ,\Using_FPGA.DSP48E1_I1_n_114 ,\Using_FPGA.DSP48E1_I1_n_115 ,\Using_FPGA.DSP48E1_I1_n_116 ,\Using_FPGA.DSP48E1_I1_n_117 ,\Using_FPGA.DSP48E1_I1_n_118 ,\Using_FPGA.DSP48E1_I1_n_119 ,\Using_FPGA.DSP48E1_I1_n_120 ,\Using_FPGA.DSP48E1_I1_n_121 ,\Using_FPGA.DSP48E1_I1_n_122 ,\Using_FPGA.DSP48E1_I1_n_123 ,\Using_FPGA.DSP48E1_I1_n_124 ,\Using_FPGA.DSP48E1_I1_n_125 ,\Using_FPGA.DSP48E1_I1_n_126 ,\Using_FPGA.DSP48E1_I1_n_127 ,\Using_FPGA.DSP48E1_I1_n_128 ,\Using_FPGA.DSP48E1_I1_n_129 ,\Using_FPGA.DSP48E1_I1_n_130 ,\Using_FPGA.DSP48E1_I1_n_131 ,\Using_FPGA.DSP48E1_I1_n_132 ,\Using_FPGA.DSP48E1_I1_n_133 ,\Using_FPGA.DSP48E1_I1_n_134 ,\Using_FPGA.DSP48E1_I1_n_135 ,\Using_FPGA.DSP48E1_I1_n_136 ,\Using_FPGA.DSP48E1_I1_n_137 ,\Using_FPGA.DSP48E1_I1_n_138 ,\Using_FPGA.DSP48E1_I1_n_139 ,\Using_FPGA.DSP48E1_I1_n_140 ,\Using_FPGA.DSP48E1_I1_n_141 ,\Using_FPGA.DSP48E1_I1_n_142 ,\Using_FPGA.DSP48E1_I1_n_143 ,\Using_FPGA.DSP48E1_I1_n_144 ,\Using_FPGA.DSP48E1_I1_n_145 ,\Using_FPGA.DSP48E1_I1_n_146 ,\Using_FPGA.DSP48E1_I1_n_147 ,\Using_FPGA.DSP48E1_I1_n_148 ,\Using_FPGA.DSP48E1_I1_n_149 ,\Using_FPGA.DSP48E1_I1_n_150 ,\Using_FPGA.DSP48E1_I1_n_151 ,\Using_FPGA.DSP48E1_I1_n_152 ,\Using_FPGA.DSP48E1_I1_n_153 }),
        .RSTA(1'b0),
        .RSTALLCARRYIN(1'b0),
        .RSTALUMODE(1'b0),
        .RSTB(1'b0),
        .RSTC(1'b0),
        .RSTCTRL(1'b0),
        .RSTD(1'b0),
        .RSTINMODE(1'b0),
        .RSTM(1'b0),
        .RSTP(1'b0),
        .UNDERFLOW(\Using_FPGA.DSP48E1_I1_n_5 ));
endmodule

module block_design_microblaze_0_0_MB_FD
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

module block_design_microblaze_0_0_MB_FDE
   (PC_EX,
    OF_PipeRun,
    PC_OF,
    Clk);
  output [0:0]PC_EX;
  input OF_PipeRun;
  input [0:0]PC_OF;
  input Clk;

  wire Clk;
  wire OF_PipeRun;
  wire [0:0]PC_EX;
  wire [0:0]PC_OF;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(OF_PipeRun),
        .D(PC_OF),
        .Q(PC_EX),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module block_design_microblaze_0_0_MB_FDE_619
   (PC_EX,
    OF_PipeRun,
    PC_OF,
    Clk);
  output [0:0]PC_EX;
  input OF_PipeRun;
  input [0:0]PC_OF;
  input Clk;

  wire Clk;
  wire OF_PipeRun;
  wire [0:0]PC_EX;
  wire [0:0]PC_OF;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(OF_PipeRun),
        .D(PC_OF),
        .Q(PC_EX),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module block_design_microblaze_0_0_MB_FDE_625
   (PC_EX,
    OF_PipeRun,
    PC_OF,
    Clk);
  output [0:0]PC_EX;
  input OF_PipeRun;
  input [0:0]PC_OF;
  input Clk;

  wire Clk;
  wire OF_PipeRun;
  wire [0:0]PC_EX;
  wire [0:0]PC_OF;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(OF_PipeRun),
        .D(PC_OF),
        .Q(PC_EX),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module block_design_microblaze_0_0_MB_FDE_631
   (PC_EX,
    OF_PipeRun,
    PC_OF,
    Clk);
  output [0:0]PC_EX;
  input OF_PipeRun;
  input [0:0]PC_OF;
  input Clk;

  wire Clk;
  wire OF_PipeRun;
  wire [0:0]PC_EX;
  wire [0:0]PC_OF;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(OF_PipeRun),
        .D(PC_OF),
        .Q(PC_EX),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module block_design_microblaze_0_0_MB_FDE_637
   (PC_EX,
    OF_PipeRun,
    PC_OF,
    Clk);
  output [0:0]PC_EX;
  input OF_PipeRun;
  input [0:0]PC_OF;
  input Clk;

  wire Clk;
  wire OF_PipeRun;
  wire [0:0]PC_EX;
  wire [0:0]PC_OF;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(OF_PipeRun),
        .D(PC_OF),
        .Q(PC_EX),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module block_design_microblaze_0_0_MB_FDE_643
   (PC_EX,
    OF_PipeRun,
    PC_OF,
    Clk);
  output [0:0]PC_EX;
  input OF_PipeRun;
  input [0:0]PC_OF;
  input Clk;

  wire Clk;
  wire OF_PipeRun;
  wire [0:0]PC_EX;
  wire [0:0]PC_OF;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(OF_PipeRun),
        .D(PC_OF),
        .Q(PC_EX),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module block_design_microblaze_0_0_MB_FDE_649
   (PC_EX,
    OF_PipeRun,
    PC_OF,
    Clk);
  output [0:0]PC_EX;
  input OF_PipeRun;
  input [0:0]PC_OF;
  input Clk;

  wire Clk;
  wire OF_PipeRun;
  wire [0:0]PC_EX;
  wire [0:0]PC_OF;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(OF_PipeRun),
        .D(PC_OF),
        .Q(PC_EX),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module block_design_microblaze_0_0_MB_FDE_655
   (PC_EX,
    OF_PipeRun,
    PC_OF,
    Clk);
  output [0:0]PC_EX;
  input OF_PipeRun;
  input [0:0]PC_OF;
  input Clk;

  wire Clk;
  wire OF_PipeRun;
  wire [0:0]PC_EX;
  wire [0:0]PC_OF;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(OF_PipeRun),
        .D(PC_OF),
        .Q(PC_EX),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module block_design_microblaze_0_0_MB_FDE_661
   (PC_EX,
    OF_PipeRun,
    PC_OF,
    Clk);
  output [0:0]PC_EX;
  input OF_PipeRun;
  input [0:0]PC_OF;
  input Clk;

  wire Clk;
  wire OF_PipeRun;
  wire [0:0]PC_EX;
  wire [0:0]PC_OF;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(OF_PipeRun),
        .D(PC_OF),
        .Q(PC_EX),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module block_design_microblaze_0_0_MB_FDE_667
   (PC_EX,
    OF_PipeRun,
    PC_OF,
    Clk);
  output [0:0]PC_EX;
  input OF_PipeRun;
  input [0:0]PC_OF;
  input Clk;

  wire Clk;
  wire OF_PipeRun;
  wire [0:0]PC_EX;
  wire [0:0]PC_OF;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(OF_PipeRun),
        .D(PC_OF),
        .Q(PC_EX),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module block_design_microblaze_0_0_MB_FDE_673
   (PC_EX,
    OF_PipeRun,
    PC_OF,
    Clk);
  output [0:0]PC_EX;
  input OF_PipeRun;
  input [0:0]PC_OF;
  input Clk;

  wire Clk;
  wire OF_PipeRun;
  wire [0:0]PC_EX;
  wire [0:0]PC_OF;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(OF_PipeRun),
        .D(PC_OF),
        .Q(PC_EX),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module block_design_microblaze_0_0_MB_FDE_679
   (PC_EX,
    OF_PipeRun,
    PC_OF,
    Clk);
  output [0:0]PC_EX;
  input OF_PipeRun;
  input [0:0]PC_OF;
  input Clk;

  wire Clk;
  wire OF_PipeRun;
  wire [0:0]PC_EX;
  wire [0:0]PC_OF;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(OF_PipeRun),
        .D(PC_OF),
        .Q(PC_EX),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module block_design_microblaze_0_0_MB_FDE_685
   (PC_EX,
    OF_PipeRun,
    PC_OF,
    Clk);
  output [0:0]PC_EX;
  input OF_PipeRun;
  input [0:0]PC_OF;
  input Clk;

  wire Clk;
  wire OF_PipeRun;
  wire [0:0]PC_EX;
  wire [0:0]PC_OF;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(OF_PipeRun),
        .D(PC_OF),
        .Q(PC_EX),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module block_design_microblaze_0_0_MB_FDE_691
   (PC_EX,
    OF_PipeRun,
    PC_OF,
    Clk);
  output [0:0]PC_EX;
  input OF_PipeRun;
  input [0:0]PC_OF;
  input Clk;

  wire Clk;
  wire OF_PipeRun;
  wire [0:0]PC_EX;
  wire [0:0]PC_OF;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(OF_PipeRun),
        .D(PC_OF),
        .Q(PC_EX),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module block_design_microblaze_0_0_MB_FDE_697
   (PC_EX,
    OF_PipeRun,
    PC_OF,
    Clk);
  output [0:0]PC_EX;
  input OF_PipeRun;
  input [0:0]PC_OF;
  input Clk;

  wire Clk;
  wire OF_PipeRun;
  wire [0:0]PC_EX;
  wire [0:0]PC_OF;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(OF_PipeRun),
        .D(PC_OF),
        .Q(PC_EX),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module block_design_microblaze_0_0_MB_FDE_703
   (PC_EX,
    OF_PipeRun,
    PC_OF,
    Clk);
  output [0:0]PC_EX;
  input OF_PipeRun;
  input [0:0]PC_OF;
  input Clk;

  wire Clk;
  wire OF_PipeRun;
  wire [0:0]PC_EX;
  wire [0:0]PC_OF;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(OF_PipeRun),
        .D(PC_OF),
        .Q(PC_EX),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module block_design_microblaze_0_0_MB_FDE_709
   (PC_EX,
    OF_PipeRun,
    PC_OF,
    Clk);
  output [0:0]PC_EX;
  input OF_PipeRun;
  input [0:0]PC_OF;
  input Clk;

  wire Clk;
  wire OF_PipeRun;
  wire [0:0]PC_EX;
  wire [0:0]PC_OF;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(OF_PipeRun),
        .D(PC_OF),
        .Q(PC_EX),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module block_design_microblaze_0_0_MB_FDE_715
   (PC_EX,
    OF_PipeRun,
    PC_OF,
    Clk);
  output [0:0]PC_EX;
  input OF_PipeRun;
  input [0:0]PC_OF;
  input Clk;

  wire Clk;
  wire OF_PipeRun;
  wire [0:0]PC_EX;
  wire [0:0]PC_OF;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(OF_PipeRun),
        .D(PC_OF),
        .Q(PC_EX),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module block_design_microblaze_0_0_MB_FDE_721
   (PC_EX,
    OF_PipeRun,
    PC_OF,
    Clk);
  output [0:0]PC_EX;
  input OF_PipeRun;
  input [0:0]PC_OF;
  input Clk;

  wire Clk;
  wire OF_PipeRun;
  wire [0:0]PC_EX;
  wire [0:0]PC_OF;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(OF_PipeRun),
        .D(PC_OF),
        .Q(PC_EX),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module block_design_microblaze_0_0_MB_FDE_727
   (PC_EX,
    OF_PipeRun,
    PC_OF,
    Clk);
  output [0:0]PC_EX;
  input OF_PipeRun;
  input [0:0]PC_OF;
  input Clk;

  wire Clk;
  wire OF_PipeRun;
  wire [0:0]PC_EX;
  wire [0:0]PC_OF;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(OF_PipeRun),
        .D(PC_OF),
        .Q(PC_EX),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module block_design_microblaze_0_0_MB_FDE_733
   (PC_EX,
    OF_PipeRun,
    PC_OF,
    Clk);
  output [0:0]PC_EX;
  input OF_PipeRun;
  input [0:0]PC_OF;
  input Clk;

  wire Clk;
  wire OF_PipeRun;
  wire [0:0]PC_EX;
  wire [0:0]PC_OF;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(OF_PipeRun),
        .D(PC_OF),
        .Q(PC_EX),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module block_design_microblaze_0_0_MB_FDE_739
   (PC_EX,
    OF_PipeRun,
    PC_OF,
    Clk);
  output [0:0]PC_EX;
  input OF_PipeRun;
  input [0:0]PC_OF;
  input Clk;

  wire Clk;
  wire OF_PipeRun;
  wire [0:0]PC_EX;
  wire [0:0]PC_OF;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(OF_PipeRun),
        .D(PC_OF),
        .Q(PC_EX),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module block_design_microblaze_0_0_MB_FDE_745
   (PC_EX,
    OF_PipeRun,
    PC_OF,
    Clk);
  output [0:0]PC_EX;
  input OF_PipeRun;
  input [0:0]PC_OF;
  input Clk;

  wire Clk;
  wire OF_PipeRun;
  wire [0:0]PC_EX;
  wire [0:0]PC_OF;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(OF_PipeRun),
        .D(PC_OF),
        .Q(PC_EX),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module block_design_microblaze_0_0_MB_FDE_751
   (PC_EX,
    OF_PipeRun,
    PC_OF,
    Clk);
  output [0:0]PC_EX;
  input OF_PipeRun;
  input [0:0]PC_OF;
  input Clk;

  wire Clk;
  wire OF_PipeRun;
  wire [0:0]PC_EX;
  wire [0:0]PC_OF;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(OF_PipeRun),
        .D(PC_OF),
        .Q(PC_EX),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module block_design_microblaze_0_0_MB_FDE_757
   (PC_EX,
    OF_PipeRun,
    PC_OF,
    Clk);
  output [0:0]PC_EX;
  input OF_PipeRun;
  input [0:0]PC_OF;
  input Clk;

  wire Clk;
  wire OF_PipeRun;
  wire [0:0]PC_EX;
  wire [0:0]PC_OF;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(OF_PipeRun),
        .D(PC_OF),
        .Q(PC_EX),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module block_design_microblaze_0_0_MB_FDE_763
   (PC_EX,
    OF_PipeRun,
    PC_OF,
    Clk);
  output [0:0]PC_EX;
  input OF_PipeRun;
  input [0:0]PC_OF;
  input Clk;

  wire Clk;
  wire OF_PipeRun;
  wire [0:0]PC_EX;
  wire [0:0]PC_OF;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(OF_PipeRun),
        .D(PC_OF),
        .Q(PC_EX),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module block_design_microblaze_0_0_MB_FDE_769
   (PC_EX,
    OF_PipeRun,
    PC_OF,
    Clk);
  output [0:0]PC_EX;
  input OF_PipeRun;
  input [0:0]PC_OF;
  input Clk;

  wire Clk;
  wire OF_PipeRun;
  wire [0:0]PC_EX;
  wire [0:0]PC_OF;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(OF_PipeRun),
        .D(PC_OF),
        .Q(PC_EX),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module block_design_microblaze_0_0_MB_FDE_775
   (PC_EX,
    OF_PipeRun,
    PC_OF,
    Clk);
  output [0:0]PC_EX;
  input OF_PipeRun;
  input [0:0]PC_OF;
  input Clk;

  wire Clk;
  wire OF_PipeRun;
  wire [0:0]PC_EX;
  wire [0:0]PC_OF;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(OF_PipeRun),
        .D(PC_OF),
        .Q(PC_EX),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module block_design_microblaze_0_0_MB_FDE_781
   (PC_EX,
    OF_PipeRun,
    PC_OF,
    Clk);
  output [0:0]PC_EX;
  input OF_PipeRun;
  input [0:0]PC_OF;
  input Clk;

  wire Clk;
  wire OF_PipeRun;
  wire [0:0]PC_EX;
  wire [0:0]PC_OF;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(OF_PipeRun),
        .D(PC_OF),
        .Q(PC_EX),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module block_design_microblaze_0_0_MB_FDE_787
   (PC_EX,
    OF_PipeRun,
    PC_OF,
    Clk);
  output [0:0]PC_EX;
  input OF_PipeRun;
  input [0:0]PC_OF;
  input Clk;

  wire Clk;
  wire OF_PipeRun;
  wire [0:0]PC_EX;
  wire [0:0]PC_OF;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(OF_PipeRun),
        .D(PC_OF),
        .Q(PC_EX),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module block_design_microblaze_0_0_MB_FDE_793
   (PC_EX,
    OF_PipeRun,
    PC_OF,
    Clk);
  output [0:0]PC_EX;
  input OF_PipeRun;
  input [0:0]PC_OF;
  input Clk;

  wire Clk;
  wire OF_PipeRun;
  wire [0:0]PC_EX;
  wire [0:0]PC_OF;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(OF_PipeRun),
        .D(PC_OF),
        .Q(PC_EX),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module block_design_microblaze_0_0_MB_FDE_799
   (PC_EX,
    OF_PipeRun,
    PC_OF,
    Clk);
  output [0:0]PC_EX;
  input OF_PipeRun;
  input [0:0]PC_OF;
  input Clk;

  wire Clk;
  wire OF_PipeRun;
  wire [0:0]PC_EX;
  wire [0:0]PC_OF;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(OF_PipeRun),
        .D(PC_OF),
        .Q(PC_EX),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module block_design_microblaze_0_0_MB_FDE_830
   (\Using_FPGA.Native_0 ,
    of_PipeRun,
    D_25,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input of_PipeRun;
  input D_25;
  input Clk;

  wire Clk;
  wire D_25;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire of_PipeRun;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_25),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module block_design_microblaze_0_0_MB_FDE_834
   (\Using_FPGA.Native_0 ,
    of_PipeRun,
    D_26,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input of_PipeRun;
  input D_26;
  input Clk;

  wire Clk;
  wire D_26;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire of_PipeRun;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_26),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module block_design_microblaze_0_0_MB_FDE_838
   (\Using_FPGA.Native_0 ,
    of_PipeRun,
    D_27,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input of_PipeRun;
  input D_27;
  input Clk;

  wire Clk;
  wire D_27;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire of_PipeRun;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_27),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module block_design_microblaze_0_0_MB_FDE_842
   (\Using_FPGA.Native_0 ,
    \Using_FPGA.The_Compare[2].sel_reg ,
    of_PipeRun,
    D_28,
    Clk,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 );
  output [0:0]\Using_FPGA.Native_0 ;
  output \Using_FPGA.The_Compare[2].sel_reg ;
  input of_PipeRun;
  input D_28;
  input Clk;
  input \Using_FPGA.Native_1 ;
  input [0:0]\Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;

  wire Clk;
  wire D_28;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [0:0]\Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.The_Compare[2].sel_reg ;
  wire of_PipeRun;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_28),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h9009)) 
    \Using_FPGA.Native_i_1__55 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(\Using_FPGA.Native_3 ),
        .O(\Using_FPGA.The_Compare[2].sel_reg ));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module block_design_microblaze_0_0_MB_FDE_846
   (\Using_FPGA.Native_0 ,
    of_PipeRun,
    D_29,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input of_PipeRun;
  input D_29;
  input Clk;

  wire Clk;
  wire D_29;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire of_PipeRun;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_29),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module block_design_microblaze_0_0_MB_FDE_850
   (\Using_FPGA.Native_0 ,
    of_PipeRun,
    D_30,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input of_PipeRun;
  input D_30;
  input Clk;

  wire Clk;
  wire D_30;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire of_PipeRun;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_30),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module block_design_microblaze_0_0_MB_FDE_854
   (\Using_FPGA.Native_0 ,
    of_PipeRun,
    D_31,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input of_PipeRun;
  input D_31;
  input Clk;

  wire Clk;
  wire D_31;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire of_PipeRun;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_31),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module block_design_microblaze_0_0_MB_FDE_858
   (\Using_FPGA.Native_0 ,
    S1_AXIS_TVALID_0,
    S1_AXIS_TLAST_0,
    \S1_AXIS_TDATA[31] ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    of_PipeRun,
    D_0,
    Clk,
    S1_AXIS_TVALID,
    S0_AXIS_TVALID,
    S1_AXIS_TLAST,
    S0_AXIS_TLAST,
    S1_AXIS_TDATA,
    S0_AXIS_TDATA,
    void_bit,
    \C_reg[30] ,
    \C_reg[30]_0 ,
    \C_reg[30]_1 ,
    \C_reg[30]_2 ,
    \C_reg[27] ,
    \C_reg[27]_0 );
  output \Using_FPGA.Native_0 ;
  output S1_AXIS_TVALID_0;
  output S1_AXIS_TLAST_0;
  output [31:0]\S1_AXIS_TDATA[31] ;
  output [1:0]\Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  input of_PipeRun;
  input D_0;
  input Clk;
  input S1_AXIS_TVALID;
  input S0_AXIS_TVALID;
  input S1_AXIS_TLAST;
  input S0_AXIS_TLAST;
  input [31:0]S1_AXIS_TDATA;
  input [31:0]S0_AXIS_TDATA;
  input void_bit;
  input \C_reg[30] ;
  input \C_reg[30]_0 ;
  input \C_reg[30]_1 ;
  input \C_reg[30]_2 ;
  input [1:0]\C_reg[27] ;
  input \C_reg[27]_0 ;

  wire [1:0]\C_reg[27] ;
  wire \C_reg[27]_0 ;
  wire \C_reg[30] ;
  wire \C_reg[30]_0 ;
  wire \C_reg[30]_1 ;
  wire \C_reg[30]_2 ;
  wire Clk;
  wire D_0;
  wire [31:0]S0_AXIS_TDATA;
  wire S0_AXIS_TLAST;
  wire S0_AXIS_TVALID;
  wire [31:0]S1_AXIS_TDATA;
  wire [31:0]\S1_AXIS_TDATA[31] ;
  wire S1_AXIS_TLAST;
  wire S1_AXIS_TLAST_0;
  wire S1_AXIS_TVALID;
  wire S1_AXIS_TVALID_0;
  wire \Using_FPGA.Native_0 ;
  wire [1:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire of_PipeRun;
  wire void_bit;

  LUT6 #(
    .INIT(64'hFE04F000FE04FF0F)) 
    \C[27]_i_1 
       (.I0(\Using_FPGA.Native_2 ),
        .I1(\C_reg[30] ),
        .I2(\C_reg[27] [1]),
        .I3(void_bit),
        .I4(\C_reg[27] [0]),
        .I5(\C_reg[27]_0 ),
        .O(\Using_FPGA.Native_1 [1]));
  (* SOFT_HLUTNM = "soft_lutpair5" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \C[27]_i_2 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\C_reg[30]_0 ),
        .O(\Using_FPGA.Native_2 ));
  LUT6 #(
    .INIT(64'hAACFAAC0AAAAAAAA)) 
    \C[30]_i_1 
       (.I0(void_bit),
        .I1(\C_reg[30] ),
        .I2(\Using_FPGA.Native_0 ),
        .I3(\C_reg[30]_0 ),
        .I4(\C_reg[30]_1 ),
        .I5(\C_reg[30]_2 ),
        .O(\Using_FPGA.Native_1 [0]));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Read_AXI_Area.FSL_Get_Data[0]_i_2 
       (.I0(S1_AXIS_TDATA[31]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(S0_AXIS_TDATA[31]),
        .O(\S1_AXIS_TDATA[31] [31]));
  (* SOFT_HLUTNM = "soft_lutpair11" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Read_AXI_Area.FSL_Get_Data[10]_i_1 
       (.I0(S1_AXIS_TDATA[21]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(S0_AXIS_TDATA[21]),
        .O(\S1_AXIS_TDATA[31] [21]));
  (* SOFT_HLUTNM = "soft_lutpair12" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Read_AXI_Area.FSL_Get_Data[11]_i_1 
       (.I0(S1_AXIS_TDATA[20]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(S0_AXIS_TDATA[20]),
        .O(\S1_AXIS_TDATA[31] [20]));
  (* SOFT_HLUTNM = "soft_lutpair12" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Read_AXI_Area.FSL_Get_Data[12]_i_1 
       (.I0(S1_AXIS_TDATA[19]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(S0_AXIS_TDATA[19]),
        .O(\S1_AXIS_TDATA[31] [19]));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Read_AXI_Area.FSL_Get_Data[13]_i_1 
       (.I0(S1_AXIS_TDATA[18]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(S0_AXIS_TDATA[18]),
        .O(\S1_AXIS_TDATA[31] [18]));
  (* SOFT_HLUTNM = "soft_lutpair13" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Read_AXI_Area.FSL_Get_Data[14]_i_1 
       (.I0(S1_AXIS_TDATA[17]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(S0_AXIS_TDATA[17]),
        .O(\S1_AXIS_TDATA[31] [17]));
  (* SOFT_HLUTNM = "soft_lutpair14" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Read_AXI_Area.FSL_Get_Data[15]_i_1 
       (.I0(S1_AXIS_TDATA[16]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(S0_AXIS_TDATA[16]),
        .O(\S1_AXIS_TDATA[31] [16]));
  (* SOFT_HLUTNM = "soft_lutpair13" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Read_AXI_Area.FSL_Get_Data[16]_i_1 
       (.I0(S1_AXIS_TDATA[15]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(S0_AXIS_TDATA[15]),
        .O(\S1_AXIS_TDATA[31] [15]));
  (* SOFT_HLUTNM = "soft_lutpair14" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Read_AXI_Area.FSL_Get_Data[17]_i_1 
       (.I0(S1_AXIS_TDATA[14]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(S0_AXIS_TDATA[14]),
        .O(\S1_AXIS_TDATA[31] [14]));
  (* SOFT_HLUTNM = "soft_lutpair15" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Read_AXI_Area.FSL_Get_Data[18]_i_1 
       (.I0(S1_AXIS_TDATA[13]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(S0_AXIS_TDATA[13]),
        .O(\S1_AXIS_TDATA[31] [13]));
  (* SOFT_HLUTNM = "soft_lutpair16" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Read_AXI_Area.FSL_Get_Data[19]_i_1 
       (.I0(S1_AXIS_TDATA[12]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(S0_AXIS_TDATA[12]),
        .O(\S1_AXIS_TDATA[31] [12]));
  (* SOFT_HLUTNM = "soft_lutpair7" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Read_AXI_Area.FSL_Get_Data[1]_i_1 
       (.I0(S1_AXIS_TDATA[30]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(S0_AXIS_TDATA[30]),
        .O(\S1_AXIS_TDATA[31] [30]));
  (* SOFT_HLUTNM = "soft_lutpair16" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Read_AXI_Area.FSL_Get_Data[20]_i_1 
       (.I0(S1_AXIS_TDATA[11]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(S0_AXIS_TDATA[11]),
        .O(\S1_AXIS_TDATA[31] [11]));
  (* SOFT_HLUTNM = "soft_lutpair17" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Read_AXI_Area.FSL_Get_Data[21]_i_1 
       (.I0(S1_AXIS_TDATA[10]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(S0_AXIS_TDATA[10]),
        .O(\S1_AXIS_TDATA[31] [10]));
  (* SOFT_HLUTNM = "soft_lutpair17" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Read_AXI_Area.FSL_Get_Data[22]_i_1 
       (.I0(S1_AXIS_TDATA[9]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(S0_AXIS_TDATA[9]),
        .O(\S1_AXIS_TDATA[31] [9]));
  (* SOFT_HLUTNM = "soft_lutpair15" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Read_AXI_Area.FSL_Get_Data[23]_i_1 
       (.I0(S1_AXIS_TDATA[8]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(S0_AXIS_TDATA[8]),
        .O(\S1_AXIS_TDATA[31] [8]));
  (* SOFT_HLUTNM = "soft_lutpair18" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Read_AXI_Area.FSL_Get_Data[24]_i_1 
       (.I0(S1_AXIS_TDATA[7]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(S0_AXIS_TDATA[7]),
        .O(\S1_AXIS_TDATA[31] [7]));
  (* SOFT_HLUTNM = "soft_lutpair18" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Read_AXI_Area.FSL_Get_Data[25]_i_1 
       (.I0(S1_AXIS_TDATA[6]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(S0_AXIS_TDATA[6]),
        .O(\S1_AXIS_TDATA[31] [6]));
  (* SOFT_HLUTNM = "soft_lutpair19" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Read_AXI_Area.FSL_Get_Data[26]_i_1 
       (.I0(S1_AXIS_TDATA[5]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(S0_AXIS_TDATA[5]),
        .O(\S1_AXIS_TDATA[31] [5]));
  (* SOFT_HLUTNM = "soft_lutpair20" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Read_AXI_Area.FSL_Get_Data[27]_i_1 
       (.I0(S1_AXIS_TDATA[4]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(S0_AXIS_TDATA[4]),
        .O(\S1_AXIS_TDATA[31] [4]));
  (* SOFT_HLUTNM = "soft_lutpair19" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Read_AXI_Area.FSL_Get_Data[28]_i_1 
       (.I0(S1_AXIS_TDATA[3]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(S0_AXIS_TDATA[3]),
        .O(\S1_AXIS_TDATA[31] [3]));
  (* SOFT_HLUTNM = "soft_lutpair20" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Read_AXI_Area.FSL_Get_Data[29]_i_1 
       (.I0(S1_AXIS_TDATA[2]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(S0_AXIS_TDATA[2]),
        .O(\S1_AXIS_TDATA[31] [2]));
  (* SOFT_HLUTNM = "soft_lutpair7" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Read_AXI_Area.FSL_Get_Data[2]_i_1 
       (.I0(S1_AXIS_TDATA[29]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(S0_AXIS_TDATA[29]),
        .O(\S1_AXIS_TDATA[31] [29]));
  (* SOFT_HLUTNM = "soft_lutpair21" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Read_AXI_Area.FSL_Get_Data[30]_i_1 
       (.I0(S1_AXIS_TDATA[1]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(S0_AXIS_TDATA[1]),
        .O(\S1_AXIS_TDATA[31] [1]));
  (* SOFT_HLUTNM = "soft_lutpair21" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Read_AXI_Area.FSL_Get_Data[31]_i_1 
       (.I0(S1_AXIS_TDATA[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(S0_AXIS_TDATA[0]),
        .O(\S1_AXIS_TDATA[31] [0]));
  (* SOFT_HLUTNM = "soft_lutpair8" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Read_AXI_Area.FSL_Get_Data[3]_i_1 
       (.I0(S1_AXIS_TDATA[28]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(S0_AXIS_TDATA[28]),
        .O(\S1_AXIS_TDATA[31] [28]));
  (* SOFT_HLUTNM = "soft_lutpair8" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Read_AXI_Area.FSL_Get_Data[4]_i_1 
       (.I0(S1_AXIS_TDATA[27]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(S0_AXIS_TDATA[27]),
        .O(\S1_AXIS_TDATA[31] [27]));
  (* SOFT_HLUTNM = "soft_lutpair9" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Read_AXI_Area.FSL_Get_Data[5]_i_1 
       (.I0(S1_AXIS_TDATA[26]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(S0_AXIS_TDATA[26]),
        .O(\S1_AXIS_TDATA[31] [26]));
  (* SOFT_HLUTNM = "soft_lutpair9" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Read_AXI_Area.FSL_Get_Data[6]_i_1 
       (.I0(S1_AXIS_TDATA[25]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(S0_AXIS_TDATA[25]),
        .O(\S1_AXIS_TDATA[31] [25]));
  (* SOFT_HLUTNM = "soft_lutpair10" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Read_AXI_Area.FSL_Get_Data[7]_i_1 
       (.I0(S1_AXIS_TDATA[24]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(S0_AXIS_TDATA[24]),
        .O(\S1_AXIS_TDATA[31] [24]));
  (* SOFT_HLUTNM = "soft_lutpair10" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Read_AXI_Area.FSL_Get_Data[8]_i_1 
       (.I0(S1_AXIS_TDATA[23]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(S0_AXIS_TDATA[23]),
        .O(\S1_AXIS_TDATA[31] [23]));
  (* SOFT_HLUTNM = "soft_lutpair11" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Read_AXI_Area.FSL_Get_Data[9]_i_1 
       (.I0(S1_AXIS_TDATA[22]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(S0_AXIS_TDATA[22]),
        .O(\S1_AXIS_TDATA[31] [22]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Read_AXI_Area.S_AXIS_TREADY[0]_i_2 
       (.I0(S1_AXIS_TVALID),
        .I1(\Using_FPGA.Native_0 ),
        .I2(S0_AXIS_TVALID),
        .O(S1_AXIS_TVALID_0));
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_0),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair5" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_6__4 
       (.I0(S1_AXIS_TLAST),
        .I1(\Using_FPGA.Native_0 ),
        .I2(S0_AXIS_TLAST),
        .O(S1_AXIS_TLAST_0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module block_design_microblaze_0_0_MB_FDE_862
   (\Using_FPGA.Native_0 ,
    \Using_FPGA.The_Compare[2].sel_reg_7 ,
    of_PipeRun,
    D_1,
    Clk,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Op1_Shift);
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.The_Compare[2].sel_reg_7 ;
  input of_PipeRun;
  input D_1;
  input Clk;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Op1_Shift;

  wire Clk;
  wire D_1;
  wire Op1_Shift;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.The_Compare[2].sel_reg_7 ;
  wire of_PipeRun;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_1),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h9009)) 
    \Using_FPGA.Native_i_1__63 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(Op1_Shift),
        .O(\Using_FPGA.The_Compare[2].sel_reg_7 ));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module block_design_microblaze_0_0_MB_FDE_866
   (\Using_FPGA.Native_0 ,
    \Using_FPGA.The_Compare[0].sel_reg ,
    of_PipeRun,
    D_32,
    Clk,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 );
  output [0:0]\Using_FPGA.Native_0 ;
  output \Using_FPGA.The_Compare[0].sel_reg ;
  input of_PipeRun;
  input D_32;
  input Clk;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input [1:0]\Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_4 ;

  wire Clk;
  wire D_32;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire [1:0]\Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.The_Compare[0].sel_reg ;
  wire of_PipeRun;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_32),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.Native_i_1__41 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(\Using_FPGA.Native_3 [0]),
        .I4(\Using_FPGA.Native_4 ),
        .I5(\Using_FPGA.Native_3 [1]),
        .O(\Using_FPGA.The_Compare[0].sel_reg ));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module block_design_microblaze_0_0_MB_FDE_870
   (\Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    of_PipeRun,
    D_2,
    Clk,
    BitField_Insert,
    \Using_BitField.mem_mask0_reg[17] ,
    \Using_BitField.mem_mask0_reg[17]_0 ,
    \Using_BitField.mem_mask0_reg[17]_1 ,
    \Using_BitField.mem_mask0_reg[17]_2 ,
    \C_reg[28] ,
    \C_reg[28]_0 ,
    \C_reg[28]_1 ,
    \C_reg[28]_2 ,
    \C_reg[28]_3 );
  output \Using_FPGA.Native_0 ;
  output [0:0]\Using_FPGA.Native_1 ;
  output [0:0]\Using_FPGA.Native_2 ;
  output \Using_FPGA.Native_3 ;
  output \Using_FPGA.Native_4 ;
  input of_PipeRun;
  input D_2;
  input Clk;
  input BitField_Insert;
  input \Using_BitField.mem_mask0_reg[17] ;
  input \Using_BitField.mem_mask0_reg[17]_0 ;
  input \Using_BitField.mem_mask0_reg[17]_1 ;
  input \Using_BitField.mem_mask0_reg[17]_2 ;
  input \C_reg[28] ;
  input [0:0]\C_reg[28]_0 ;
  input \C_reg[28]_1 ;
  input \C_reg[28]_2 ;
  input \C_reg[28]_3 ;

  wire BitField_Insert;
  wire \C_reg[28] ;
  wire [0:0]\C_reg[28]_0 ;
  wire \C_reg[28]_1 ;
  wire \C_reg[28]_2 ;
  wire \C_reg[28]_3 ;
  wire Clk;
  wire D_2;
  wire \Using_BitField.mem_mask0_reg[17] ;
  wire \Using_BitField.mem_mask0_reg[17]_0 ;
  wire \Using_BitField.mem_mask0_reg[17]_1 ;
  wire \Using_BitField.mem_mask0_reg[17]_2 ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire [0:0]\Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire of_PipeRun;

  LUT6 #(
    .INIT(64'h01FD010101010101)) 
    \C[28]_i_1 
       (.I0(\C_reg[28] ),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\C_reg[28]_0 ),
        .I3(\C_reg[28]_1 ),
        .I4(\C_reg[28]_2 ),
        .I5(\C_reg[28]_3 ),
        .O(\Using_FPGA.Native_2 ));
  (* SOFT_HLUTNM = "soft_lutpair4" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \C[30]_i_2 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\C_reg[28]_0 ),
        .O(\Using_FPGA.Native_4 ));
  (* SOFT_HLUTNM = "soft_lutpair4" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_BitField.mem_mask0[14]_i_2 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(BitField_Insert),
        .I2(\Using_BitField.mem_mask0_reg[17] ),
        .O(\Using_FPGA.Native_3 ));
  LUT6 #(
    .INIT(64'hCCCC74CC33333333)) 
    \Using_BitField.mem_mask0[17]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(BitField_Insert),
        .I2(\Using_BitField.mem_mask0_reg[17] ),
        .I3(\Using_BitField.mem_mask0_reg[17]_0 ),
        .I4(\Using_BitField.mem_mask0_reg[17]_1 ),
        .I5(\Using_BitField.mem_mask0_reg[17]_2 ),
        .O(\Using_FPGA.Native_1 ));
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_2),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module block_design_microblaze_0_0_MB_FDE_874
   (\Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    of_PipeRun,
    D_3,
    Clk,
    \Using_BitField.mem_mask0_reg[25] ,
    B,
    BitField_Insert,
    \Using_BitField.mem_mask0_reg[25]_0 ,
    \Using_BitField.mem_mask0_reg[25]_1 ,
    \Using_BitField.mem_mask0_reg[24] ,
    \Using_BitField.mem_mask0_reg[24]_0 );
  output [0:0]\Using_FPGA.Native_0 ;
  output [1:0]\Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  input of_PipeRun;
  input D_3;
  input Clk;
  input \Using_BitField.mem_mask0_reg[25] ;
  input [1:0]B;
  input BitField_Insert;
  input \Using_BitField.mem_mask0_reg[25]_0 ;
  input \Using_BitField.mem_mask0_reg[25]_1 ;
  input \Using_BitField.mem_mask0_reg[24] ;
  input \Using_BitField.mem_mask0_reg[24]_0 ;

  wire [1:0]B;
  wire BitField_Insert;
  wire Clk;
  wire D_3;
  wire \Using_BitField.mem_mask0_reg[24] ;
  wire \Using_BitField.mem_mask0_reg[24]_0 ;
  wire \Using_BitField.mem_mask0_reg[25] ;
  wire \Using_BitField.mem_mask0_reg[25]_0 ;
  wire \Using_BitField.mem_mask0_reg[25]_1 ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [1:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire of_PipeRun;

  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_BitField.mem_mask0[1]_i_3 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(BitField_Insert),
        .I2(\Using_BitField.mem_mask0_reg[24] ),
        .O(\Using_FPGA.Native_2 ));
  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT5 #(
    .INIT(32'h33307774)) 
    \Using_BitField.mem_mask0[24]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(BitField_Insert),
        .I2(\Using_BitField.mem_mask0_reg[24] ),
        .I3(\Using_BitField.mem_mask0_reg[24]_0 ),
        .I4(B[1]),
        .O(\Using_FPGA.Native_1 [1]));
  LUT6 #(
    .INIT(64'h45BB45AA00FF00FF)) 
    \Using_BitField.mem_mask0[25]_i_1 
       (.I0(\Using_FPGA.Native_2 ),
        .I1(\Using_BitField.mem_mask0_reg[25] ),
        .I2(B[0]),
        .I3(BitField_Insert),
        .I4(\Using_BitField.mem_mask0_reg[25]_0 ),
        .I5(\Using_BitField.mem_mask0_reg[25]_1 ),
        .O(\Using_FPGA.Native_1 [0]));
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_3),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module block_design_microblaze_0_0_MB_FDE_878
   (B,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    of_PipeRun,
    D_4,
    Clk,
    \Using_BitField.mem_mask0_reg[30] ,
    \Using_BitField.mem_mask0_reg[30]_0 ,
    \Using_BitField.mem_mask0_reg[30]_1 ,
    BitField_Insert,
    \Using_BitField.mem_mask0_reg[30]_2 ,
    \Using_BitField.mem_mask0_reg[30]_3 ,
    \Using_BitField.mem_mask0_reg[30]_4 );
  output [0:0]B;
  output [0:0]\Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  input of_PipeRun;
  input D_4;
  input Clk;
  input \Using_BitField.mem_mask0_reg[30] ;
  input \Using_BitField.mem_mask0_reg[30]_0 ;
  input \Using_BitField.mem_mask0_reg[30]_1 ;
  input BitField_Insert;
  input [1:0]\Using_BitField.mem_mask0_reg[30]_2 ;
  input \Using_BitField.mem_mask0_reg[30]_3 ;
  input \Using_BitField.mem_mask0_reg[30]_4 ;

  wire [0:0]B;
  wire BitField_Insert;
  wire Clk;
  wire D_4;
  wire \Using_BitField.mem_mask0_reg[30] ;
  wire \Using_BitField.mem_mask0_reg[30]_0 ;
  wire \Using_BitField.mem_mask0_reg[30]_1 ;
  wire [1:0]\Using_BitField.mem_mask0_reg[30]_2 ;
  wire \Using_BitField.mem_mask0_reg[30]_3 ;
  wire \Using_BitField.mem_mask0_reg[30]_4 ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire of_PipeRun;

  LUT5 #(
    .INIT(32'h00035503)) 
    \Using_BitField.mem_mask0[26]_i_2 
       (.I0(B),
        .I1(\Using_BitField.mem_mask0_reg[30]_3 ),
        .I2(\Using_BitField.mem_mask0_reg[30]_4 ),
        .I3(BitField_Insert),
        .I4(\Using_BitField.mem_mask0_reg[30]_2 [1]),
        .O(\Using_FPGA.Native_1 ));
  LUT6 #(
    .INIT(64'h0000FFDD0A0AFFDD)) 
    \Using_BitField.mem_mask0[30]_i_1 
       (.I0(\Using_FPGA.Native_1 ),
        .I1(\Using_BitField.mem_mask0_reg[30] ),
        .I2(\Using_BitField.mem_mask0_reg[30]_0 ),
        .I3(\Using_BitField.mem_mask0_reg[30]_1 ),
        .I4(BitField_Insert),
        .I5(\Using_BitField.mem_mask0_reg[30]_2 [0]),
        .O(\Using_FPGA.Native_0 ));
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_4),
        .Q(B),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module block_design_microblaze_0_0_MB_FDE_882
   (B,
    of_PipeRun,
    D_6,
    Clk);
  output [0:0]B;
  input of_PipeRun;
  input D_6;
  input Clk;

  wire [0:0]B;
  wire Clk;
  wire D_6;
  wire of_PipeRun;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_6),
        .Q(B),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module block_design_microblaze_0_0_MB_FDE_886
   (\Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    of_PipeRun,
    D_8,
    Clk,
    BitField_Insert,
    \Using_BitField.mem_mask0_reg[31] ,
    \Using_BitField.mem_mask0_reg[31]_0 ,
    \Using_BitField.mem_mask0_reg[11] ,
    \Using_BitField.mem_mask0_reg[11]_0 ,
    B,
    \Using_BitField.mem_mask0_reg[21] ,
    \Using_BitField.mem_mask0_reg[11]_1 ,
    \Using_BitField.mem_mask0_reg[21]_0 );
  output \Using_FPGA.Native_0 ;
  output [2:0]\Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  output \Using_FPGA.Native_3 ;
  input of_PipeRun;
  input D_8;
  input Clk;
  input BitField_Insert;
  input \Using_BitField.mem_mask0_reg[31] ;
  input \Using_BitField.mem_mask0_reg[31]_0 ;
  input \Using_BitField.mem_mask0_reg[11] ;
  input \Using_BitField.mem_mask0_reg[11]_0 ;
  input [0:0]B;
  input \Using_BitField.mem_mask0_reg[21] ;
  input \Using_BitField.mem_mask0_reg[11]_1 ;
  input \Using_BitField.mem_mask0_reg[21]_0 ;

  wire [0:0]B;
  wire BitField_Insert;
  wire Clk;
  wire D_8;
  wire \Using_BitField.mem_mask0_reg[11] ;
  wire \Using_BitField.mem_mask0_reg[11]_0 ;
  wire \Using_BitField.mem_mask0_reg[11]_1 ;
  wire \Using_BitField.mem_mask0_reg[21] ;
  wire \Using_BitField.mem_mask0_reg[21]_0 ;
  wire \Using_BitField.mem_mask0_reg[31] ;
  wire \Using_BitField.mem_mask0_reg[31]_0 ;
  wire \Using_FPGA.Native_0 ;
  wire [2:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire of_PipeRun;

  LUT6 #(
    .INIT(64'hF2F30D0DF2F30C0C)) 
    \Using_BitField.mem_mask0[11]_i_1 
       (.I0(\Using_FPGA.Native_3 ),
        .I1(\Using_BitField.mem_mask0_reg[11]_0 ),
        .I2(\Using_BitField.mem_mask0_reg[11] ),
        .I3(B),
        .I4(BitField_Insert),
        .I5(\Using_BitField.mem_mask0_reg[21] ),
        .O(\Using_FPGA.Native_1 [2]));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT5 #(
    .INIT(32'h335FFF5F)) 
    \Using_BitField.mem_mask0[1]_i_4 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_BitField.mem_mask0_reg[31] ),
        .I2(\Using_BitField.mem_mask0_reg[11]_1 ),
        .I3(BitField_Insert),
        .I4(\Using_BitField.mem_mask0_reg[21]_0 ),
        .O(\Using_FPGA.Native_2 ));
  LUT6 #(
    .INIT(64'h2F25F0F00F0F0F0F)) 
    \Using_BitField.mem_mask0[21]_i_1 
       (.I0(\Using_FPGA.Native_2 ),
        .I1(B),
        .I2(BitField_Insert),
        .I3(\Using_BitField.mem_mask0_reg[21] ),
        .I4(\Using_BitField.mem_mask0_reg[11]_0 ),
        .I5(\Using_BitField.mem_mask0_reg[11] ),
        .O(\Using_FPGA.Native_1 [1]));
  LUT6 #(
    .INIT(64'h333333332E333333)) 
    \Using_BitField.mem_mask0[31]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(BitField_Insert),
        .I2(\Using_BitField.mem_mask0_reg[31] ),
        .I3(\Using_BitField.mem_mask0_reg[31]_0 ),
        .I4(\Using_BitField.mem_mask0_reg[11] ),
        .I5(\Using_BitField.mem_mask0_reg[11]_0 ),
        .O(\Using_FPGA.Native_1 [0]));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT5 #(
    .INIT(32'h00053305)) 
    \Using_BitField.mem_mask0[3]_i_2 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_BitField.mem_mask0_reg[31] ),
        .I2(\Using_BitField.mem_mask0_reg[11]_1 ),
        .I3(BitField_Insert),
        .I4(\Using_BitField.mem_mask0_reg[21]_0 ),
        .O(\Using_FPGA.Native_3 ));
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_8),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module block_design_microblaze_0_0_MB_FDE_890
   (\Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    D,
    of_PipeRun,
    D_10,
    Clk,
    \Using_BitField.mem_mask0_reg[26] ,
    \Using_BitField.mem_mask1_reg[23] ,
    BitField_Insert,
    B,
    \Using_BitField.mem_mask0_reg[26]_0 ,
    \Using_BitField.mem_mask0_reg[23] ,
    \Using_BitField.mem_mask1_reg[23]_0 ,
    \Using_BitField.mem_mask0_reg[23]_0 ,
    \Using_BitField.mem_mask0_reg[23]_1 ,
    \Using_BitField.mem_mask1_reg[23]_1 ,
    \Using_BitField.mem_mask1_reg[23]_2 ,
    BitField_Extract);
  output \Using_FPGA.Native_0 ;
  output [3:0]\Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  output \Using_FPGA.Native_3 ;
  output [0:0]D;
  input of_PipeRun;
  input D_10;
  input Clk;
  input \Using_BitField.mem_mask0_reg[26] ;
  input \Using_BitField.mem_mask1_reg[23] ;
  input BitField_Insert;
  input [2:0]B;
  input \Using_BitField.mem_mask0_reg[26]_0 ;
  input \Using_BitField.mem_mask0_reg[23] ;
  input \Using_BitField.mem_mask1_reg[23]_0 ;
  input \Using_BitField.mem_mask0_reg[23]_0 ;
  input \Using_BitField.mem_mask0_reg[23]_1 ;
  input \Using_BitField.mem_mask1_reg[23]_1 ;
  input \Using_BitField.mem_mask1_reg[23]_2 ;
  input BitField_Extract;

  wire [2:0]B;
  wire BitField_Extract;
  wire BitField_Insert;
  wire Clk;
  wire [0:0]D;
  wire D_10;
  wire \Using_BitField.mem_mask0_reg[23] ;
  wire \Using_BitField.mem_mask0_reg[23]_0 ;
  wire \Using_BitField.mem_mask0_reg[23]_1 ;
  wire \Using_BitField.mem_mask0_reg[26] ;
  wire \Using_BitField.mem_mask0_reg[26]_0 ;
  wire \Using_BitField.mem_mask1_reg[23] ;
  wire \Using_BitField.mem_mask1_reg[23]_0 ;
  wire \Using_BitField.mem_mask1_reg[23]_1 ;
  wire \Using_BitField.mem_mask1_reg[23]_2 ;
  wire \Using_FPGA.Native_0 ;
  wire [3:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire of_PipeRun;

  LUT6 #(
    .INIT(64'h0F0F08085FFF58F8)) 
    \Using_BitField.mem_mask0[18]_i_1 
       (.I0(\Using_FPGA.Native_3 ),
        .I1(\Using_BitField.mem_mask1_reg[23]_1 ),
        .I2(BitField_Insert),
        .I3(B[1]),
        .I4(\Using_BitField.mem_mask1_reg[23]_2 ),
        .I5(B[2]),
        .O(\Using_FPGA.Native_1 [2]));
  LUT6 #(
    .INIT(64'h2F25F0F00F0F0F0F)) 
    \Using_BitField.mem_mask0[23]_i_1 
       (.I0(\Using_FPGA.Native_2 ),
        .I1(\Using_BitField.mem_mask0_reg[23] ),
        .I2(BitField_Insert),
        .I3(\Using_BitField.mem_mask1_reg[23]_0 ),
        .I4(\Using_BitField.mem_mask0_reg[23]_0 ),
        .I5(\Using_BitField.mem_mask0_reg[23]_1 ),
        .O(\Using_FPGA.Native_1 [1]));
  LUT6 #(
    .INIT(64'h33A0FFA000FF00FF)) 
    \Using_BitField.mem_mask0[26]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_BitField.mem_mask0_reg[26] ),
        .I2(\Using_BitField.mem_mask1_reg[23] ),
        .I3(BitField_Insert),
        .I4(B[0]),
        .I5(\Using_BitField.mem_mask0_reg[26]_0 ),
        .O(\Using_FPGA.Native_1 [0]));
  (* SOFT_HLUTNM = "soft_lutpair1" *) 
  LUT5 #(
    .INIT(32'hCCA000A0)) 
    \Using_BitField.mem_mask0[2]_i_2 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_BitField.mem_mask0_reg[26] ),
        .I2(\Using_BitField.mem_mask1_reg[23] ),
        .I3(BitField_Insert),
        .I4(B[0]),
        .O(\Using_FPGA.Native_3 ));
  LUT6 #(
    .INIT(64'hAF44FF44AF00FF00)) 
    \Using_BitField.mem_mask0[6]_i_1 
       (.I0(\Using_FPGA.Native_2 ),
        .I1(\Using_BitField.mem_mask1_reg[23]_1 ),
        .I2(B[1]),
        .I3(BitField_Insert),
        .I4(B[2]),
        .I5(\Using_BitField.mem_mask1_reg[23]_2 ),
        .O(\Using_FPGA.Native_1 [3]));
  (* SOFT_HLUTNM = "soft_lutpair1" *) 
  LUT5 #(
    .INIT(32'h00053305)) 
    \Using_BitField.mem_mask0[6]_i_2 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_BitField.mem_mask0_reg[26] ),
        .I2(\Using_BitField.mem_mask1_reg[23] ),
        .I3(BitField_Insert),
        .I4(B[0]),
        .O(\Using_FPGA.Native_2 ));
  LUT6 #(
    .INIT(64'h000000000004FFFB)) 
    \Using_BitField.mem_mask1[23]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(BitField_Extract),
        .I2(\Using_BitField.mem_mask1_reg[23]_0 ),
        .I3(\Using_BitField.mem_mask1_reg[23] ),
        .I4(\Using_BitField.mem_mask1_reg[23]_1 ),
        .I5(\Using_BitField.mem_mask1_reg[23]_2 ),
        .O(D));
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_10),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module block_design_microblaze_0_0_MB_FDE_894
   (\Using_FPGA.Native_0 ,
    D,
    of_PipeRun,
    D_11,
    Clk,
    \Using_BitField.mem_mask1_reg[26] ,
    \Using_BitField.mem_mask1_reg[26]_0 ,
    BitField_Extract,
    \Using_BitField.mem_mask1_reg[26]_1 ,
    \Using_BitField.mem_mask1_reg[26]_2 );
  output \Using_FPGA.Native_0 ;
  output [0:0]D;
  input of_PipeRun;
  input D_11;
  input Clk;
  input \Using_BitField.mem_mask1_reg[26] ;
  input \Using_BitField.mem_mask1_reg[26]_0 ;
  input BitField_Extract;
  input \Using_BitField.mem_mask1_reg[26]_1 ;
  input \Using_BitField.mem_mask1_reg[26]_2 ;

  wire BitField_Extract;
  wire Clk;
  wire [0:0]D;
  wire D_11;
  wire \Using_BitField.mem_mask1_reg[26] ;
  wire \Using_BitField.mem_mask1_reg[26]_0 ;
  wire \Using_BitField.mem_mask1_reg[26]_1 ;
  wire \Using_BitField.mem_mask1_reg[26]_2 ;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;

  LUT6 #(
    .INIT(64'h0000000000007657)) 
    \Using_BitField.mem_mask1[26]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_BitField.mem_mask1_reg[26] ),
        .I2(\Using_BitField.mem_mask1_reg[26]_0 ),
        .I3(BitField_Extract),
        .I4(\Using_BitField.mem_mask1_reg[26]_1 ),
        .I5(\Using_BitField.mem_mask1_reg[26]_2 ),
        .O(D));
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_11),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module block_design_microblaze_0_0_MB_FDE_898
   (\Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    D,
    \Using_FPGA.The_Compare[2].sel_reg_4 ,
    of_PipeRun,
    D_12,
    Clk,
    B,
    \Using_BitField.mem_mask1_reg[27] ,
    BitField_Insert,
    \Using_BitField.mem_mask0_reg[12] ,
    \Using_BitField.mem_mask0_reg[22] ,
    \Using_BitField.mem_mask1_reg[27]_0 ,
    \Using_BitField.mem_mask1_reg[27]_1 ,
    BitField_Extract,
    \Using_BitField.mem_mask1_reg[27]_2 ,
    \Using_FPGA.Native_2 ,
    Shifted,
    \Using_BitField.mem_mask0_reg[2] );
  output \Using_FPGA.Native_0 ;
  output [4:0]\Using_FPGA.Native_1 ;
  output [0:0]D;
  output \Using_FPGA.The_Compare[2].sel_reg_4 ;
  input of_PipeRun;
  input D_12;
  input Clk;
  input [2:0]B;
  input \Using_BitField.mem_mask1_reg[27] ;
  input BitField_Insert;
  input \Using_BitField.mem_mask0_reg[12] ;
  input \Using_BitField.mem_mask0_reg[22] ;
  input \Using_BitField.mem_mask1_reg[27]_0 ;
  input \Using_BitField.mem_mask1_reg[27]_1 ;
  input BitField_Extract;
  input \Using_BitField.mem_mask1_reg[27]_2 ;
  input \Using_FPGA.Native_2 ;
  input Shifted;
  input \Using_BitField.mem_mask0_reg[2] ;

  wire [2:0]B;
  wire BitField_Extract;
  wire BitField_Insert;
  wire Clk;
  wire [0:0]D;
  wire D_12;
  wire Shifted;
  wire \Using_BitField.mem_mask0_reg[12] ;
  wire \Using_BitField.mem_mask0_reg[22] ;
  wire \Using_BitField.mem_mask0_reg[2] ;
  wire \Using_BitField.mem_mask1_reg[27] ;
  wire \Using_BitField.mem_mask1_reg[27]_0 ;
  wire \Using_BitField.mem_mask1_reg[27]_1 ;
  wire \Using_BitField.mem_mask1_reg[27]_2 ;
  wire \Using_FPGA.Native_0 ;
  wire [4:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.The_Compare[2].sel_reg_4 ;
  wire of_PipeRun;

  LUT6 #(
    .INIT(64'hFF00FF0000FA33FA)) 
    \Using_BitField.mem_mask0[12]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(B[1]),
        .I2(\Using_BitField.mem_mask1_reg[27] ),
        .I3(BitField_Insert),
        .I4(B[0]),
        .I5(\Using_BitField.mem_mask0_reg[12] ),
        .O(\Using_FPGA.Native_1 [3]));
  LUT6 #(
    .INIT(64'h33A0FFA000FF00FF)) 
    \Using_BitField.mem_mask0[20]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(B[1]),
        .I2(\Using_BitField.mem_mask1_reg[27] ),
        .I3(BitField_Insert),
        .I4(B[0]),
        .I5(\Using_BitField.mem_mask0_reg[12] ),
        .O(\Using_FPGA.Native_1 [2]));
  LUT6 #(
    .INIT(64'h33330022FF3FCC2E)) 
    \Using_BitField.mem_mask0[22]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(BitField_Insert),
        .I2(B[1]),
        .I3(\Using_BitField.mem_mask0_reg[22] ),
        .I4(\Using_BitField.mem_mask1_reg[27]_0 ),
        .I5(B[2]),
        .O(\Using_FPGA.Native_1 [1]));
  LUT6 #(
    .INIT(64'h00FA33FA00FF00FF)) 
    \Using_BitField.mem_mask0[28]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(B[1]),
        .I2(\Using_BitField.mem_mask1_reg[27] ),
        .I3(BitField_Insert),
        .I4(B[0]),
        .I5(\Using_BitField.mem_mask0_reg[12] ),
        .O(\Using_FPGA.Native_1 [0]));
  LUT6 #(
    .INIT(64'h3AFA30F0F0F0F0F0)) 
    \Using_BitField.mem_mask0[2]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(B[1]),
        .I2(BitField_Insert),
        .I3(B[2]),
        .I4(\Using_BitField.mem_mask1_reg[27]_0 ),
        .I5(\Using_BitField.mem_mask0_reg[2] ),
        .O(\Using_FPGA.Native_1 [4]));
  LUT6 #(
    .INIT(64'h0000000011111411)) 
    \Using_BitField.mem_mask1[27]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_BitField.mem_mask1_reg[27] ),
        .I2(\Using_BitField.mem_mask1_reg[27]_1 ),
        .I3(BitField_Extract),
        .I4(\Using_BitField.mem_mask1_reg[27]_2 ),
        .I5(\Using_BitField.mem_mask1_reg[27]_0 ),
        .O(D));
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_12),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h9009)) 
    \Using_FPGA.Native_i_1__60 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_2 ),
        .I2(\Using_BitField.mem_mask1_reg[27] ),
        .I3(Shifted),
        .O(\Using_FPGA.The_Compare[2].sel_reg_4 ));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module block_design_microblaze_0_0_MB_FDE_902
   (\Using_FPGA.Native_0 ,
    D,
    \Using_FPGA.Native_1 ,
    S_5,
    \Using_FPGA.Native_2 ,
    of_PipeRun,
    D_13,
    Clk,
    \Using_BitField.mem_mask1_reg[28] ,
    \Using_BitField.mem_mask1_reg[28]_0 ,
    BitField_Extract,
    \Using_BitField.mem_mask1_reg[28]_1 ,
    \Using_BitField.mem_mask1_reg[28]_2 ,
    \Using_BitField.mem_mask0_reg[29] ,
    BitField_Insert,
    \Using_BitField.mem_mask0_reg[14] ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    B,
    \Using_FPGA.Native_5 ,
    \Using_BitField.mem_mask0_reg[1] ,
    \Using_BitField.mem_mask0_reg[3] ,
    \Using_BitField.mem_mask0_reg[7] ,
    \Using_BitField.mem_mask0_reg[14]_0 ,
    \Using_BitField.mem_mask0_reg[1]_0 ,
    \Using_BitField.mem_mask0_reg[10] );
  output \Using_FPGA.Native_0 ;
  output [27:0]D;
  output [14:0]\Using_FPGA.Native_1 ;
  output S_5;
  output \Using_FPGA.Native_2 ;
  input of_PipeRun;
  input D_13;
  input Clk;
  input \Using_BitField.mem_mask1_reg[28] ;
  input \Using_BitField.mem_mask1_reg[28]_0 ;
  input BitField_Extract;
  input \Using_BitField.mem_mask1_reg[28]_1 ;
  input \Using_BitField.mem_mask1_reg[28]_2 ;
  input \Using_BitField.mem_mask0_reg[29] ;
  input BitField_Insert;
  input \Using_BitField.mem_mask0_reg[14] ;
  input \Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_4 ;
  input [4:0]B;
  input \Using_FPGA.Native_5 ;
  input \Using_BitField.mem_mask0_reg[1] ;
  input \Using_BitField.mem_mask0_reg[3] ;
  input \Using_BitField.mem_mask0_reg[7] ;
  input \Using_BitField.mem_mask0_reg[14]_0 ;
  input \Using_BitField.mem_mask0_reg[1]_0 ;
  input \Using_BitField.mem_mask0_reg[10] ;

  wire [4:0]B;
  wire BitField_Extract;
  wire BitField_Insert;
  wire Clk;
  wire [27:0]D;
  wire D_13;
  wire S_5;
  wire \Using_BitField.mem_mask0[29]_i_2_n_0 ;
  wire \Using_BitField.mem_mask0_reg[10] ;
  wire \Using_BitField.mem_mask0_reg[14] ;
  wire \Using_BitField.mem_mask0_reg[14]_0 ;
  wire \Using_BitField.mem_mask0_reg[1] ;
  wire \Using_BitField.mem_mask0_reg[1]_0 ;
  wire \Using_BitField.mem_mask0_reg[29] ;
  wire \Using_BitField.mem_mask0_reg[3] ;
  wire \Using_BitField.mem_mask0_reg[7] ;
  wire \Using_BitField.mem_mask1_reg[28] ;
  wire \Using_BitField.mem_mask1_reg[28]_0 ;
  wire \Using_BitField.mem_mask1_reg[28]_1 ;
  wire \Using_BitField.mem_mask1_reg[28]_2 ;
  wire \Using_FPGA.Native_0 ;
  wire [14:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire of_PipeRun;

  LUT6 #(
    .INIT(64'h3A3A3A3A3A30FAF0)) 
    \Using_BitField.mem_mask0[10]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(B[2]),
        .I2(BitField_Insert),
        .I3(\Using_BitField.mem_mask1_reg[28] ),
        .I4(B[1]),
        .I5(\Using_BitField.mem_mask0_reg[10] ),
        .O(\Using_FPGA.Native_1 [7]));
  LUT6 #(
    .INIT(64'hAABA5555AABA4545)) 
    \Using_BitField.mem_mask0[13]_i_1 
       (.I0(\Using_FPGA.Native_2 ),
        .I1(\Using_BitField.mem_mask0_reg[1] ),
        .I2(\Using_BitField.mem_mask0_reg[1]_0 ),
        .I3(B[0]),
        .I4(BitField_Insert),
        .I5(\Using_BitField.mem_mask1_reg[28]_2 ),
        .O(\Using_FPGA.Native_1 [6]));
  LUT6 #(
    .INIT(64'hA5A5A5A5A5A5A4F4)) 
    \Using_BitField.mem_mask0[14]_i_1 
       (.I0(\Using_FPGA.Native_2 ),
        .I1(\Using_BitField.mem_mask1_reg[28]_0 ),
        .I2(BitField_Insert),
        .I3(\Using_BitField.mem_mask0_reg[14] ),
        .I4(\Using_BitField.mem_mask0_reg[14]_0 ),
        .I5(\Using_BitField.mem_mask0_reg[1] ),
        .O(\Using_FPGA.Native_1 [5]));
  LUT6 #(
    .INIT(64'hAABA5555AABA4545)) 
    \Using_BitField.mem_mask0[15]_i_1 
       (.I0(\Using_FPGA.Native_2 ),
        .I1(\Using_BitField.mem_mask0_reg[1] ),
        .I2(\Using_BitField.mem_mask0_reg[7] ),
        .I3(\Using_BitField.mem_mask0_reg[29] ),
        .I4(BitField_Insert),
        .I5(\Using_BitField.mem_mask1_reg[28]_1 ),
        .O(\Using_FPGA.Native_1 [4]));
  LUT3 #(
    .INIT(8'h3A)) 
    \Using_BitField.mem_mask0[16]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(B[2]),
        .I2(BitField_Insert),
        .O(\Using_FPGA.Native_1 [3]));
  LUT6 #(
    .INIT(64'hA5A5A5A52F25A5A5)) 
    \Using_BitField.mem_mask0[19]_i_1 
       (.I0(\Using_FPGA.Native_2 ),
        .I1(B[0]),
        .I2(BitField_Insert),
        .I3(\Using_BitField.mem_mask1_reg[28]_2 ),
        .I4(\Using_BitField.mem_mask0_reg[1] ),
        .I5(\Using_BitField.mem_mask0_reg[3] ),
        .O(\Using_FPGA.Native_1 [2]));
  LUT6 #(
    .INIT(64'hF0F0F0F0B5B0F0F0)) 
    \Using_BitField.mem_mask0[1]_i_1 
       (.I0(\Using_FPGA.Native_2 ),
        .I1(B[0]),
        .I2(BitField_Insert),
        .I3(\Using_BitField.mem_mask1_reg[28]_2 ),
        .I4(\Using_BitField.mem_mask0_reg[1] ),
        .I5(\Using_BitField.mem_mask0_reg[1]_0 ),
        .O(\Using_FPGA.Native_1 [14]));
  (* SOFT_HLUTNM = "soft_lutpair0" *) 
  LUT3 #(
    .INIT(8'h35)) 
    \Using_BitField.mem_mask0[1]_i_2 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(B[2]),
        .I2(BitField_Insert),
        .O(\Using_FPGA.Native_2 ));
  LUT6 #(
    .INIT(64'h0F0FA5A50F0F2F25)) 
    \Using_BitField.mem_mask0[27]_i_1 
       (.I0(\Using_FPGA.Native_2 ),
        .I1(B[0]),
        .I2(BitField_Insert),
        .I3(\Using_BitField.mem_mask1_reg[28]_2 ),
        .I4(\Using_BitField.mem_mask0_reg[1] ),
        .I5(\Using_BitField.mem_mask0_reg[3] ),
        .O(\Using_FPGA.Native_1 [1]));
  LUT6 #(
    .INIT(64'h0A0ADD55AAAADD55)) 
    \Using_BitField.mem_mask0[29]_i_1 
       (.I0(\Using_BitField.mem_mask0[29]_i_2_n_0 ),
        .I1(\Using_BitField.mem_mask1_reg[28]_1 ),
        .I2(\Using_BitField.mem_mask0_reg[29] ),
        .I3(\Using_BitField.mem_mask1_reg[28]_0 ),
        .I4(BitField_Insert),
        .I5(\Using_BitField.mem_mask0_reg[14] ),
        .O(\Using_FPGA.Native_1 [0]));
  LUT6 #(
    .INIT(64'h00002020000A202A)) 
    \Using_BitField.mem_mask0[29]_i_2 
       (.I0(\Using_FPGA.Native_2 ),
        .I1(B[0]),
        .I2(BitField_Insert),
        .I3(\Using_BitField.mem_mask1_reg[28]_2 ),
        .I4(B[1]),
        .I5(\Using_BitField.mem_mask1_reg[28] ),
        .O(\Using_BitField.mem_mask0[29]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hF0F0F0F0B5B0F0F0)) 
    \Using_BitField.mem_mask0[3]_i_1 
       (.I0(\Using_FPGA.Native_2 ),
        .I1(B[0]),
        .I2(BitField_Insert),
        .I3(\Using_BitField.mem_mask1_reg[28]_2 ),
        .I4(\Using_BitField.mem_mask0_reg[1] ),
        .I5(\Using_BitField.mem_mask0_reg[3] ),
        .O(\Using_FPGA.Native_1 [13]));
  LUT6 #(
    .INIT(64'hAFAF4400FFFF4400)) 
    \Using_BitField.mem_mask0[4]_i_1 
       (.I0(\Using_FPGA.Native_2 ),
        .I1(\Using_BitField.mem_mask1_reg[28] ),
        .I2(B[1]),
        .I3(\Using_BitField.mem_mask1_reg[28]_2 ),
        .I4(BitField_Insert),
        .I5(B[0]),
        .O(\Using_FPGA.Native_1 [12]));
  LUT6 #(
    .INIT(64'hAE55AE11FF00FF00)) 
    \Using_BitField.mem_mask0[5]_i_1 
       (.I0(\Using_FPGA.Native_2 ),
        .I1(\Using_BitField.mem_mask0_reg[1]_0 ),
        .I2(B[0]),
        .I3(BitField_Insert),
        .I4(\Using_BitField.mem_mask1_reg[28]_2 ),
        .I5(\Using_BitField.mem_mask0_reg[1] ),
        .O(\Using_FPGA.Native_1 [11]));
  LUT6 #(
    .INIT(64'hAE55AE11FF00FF00)) 
    \Using_BitField.mem_mask0[7]_i_1 
       (.I0(\Using_FPGA.Native_2 ),
        .I1(\Using_BitField.mem_mask0_reg[7] ),
        .I2(\Using_BitField.mem_mask0_reg[29] ),
        .I3(BitField_Insert),
        .I4(\Using_BitField.mem_mask1_reg[28]_1 ),
        .I5(\Using_BitField.mem_mask0_reg[1] ),
        .O(\Using_FPGA.Native_1 [10]));
  (* SOFT_HLUTNM = "soft_lutpair0" *) 
  LUT5 #(
    .INIT(32'h3AFA30F0)) 
    \Using_BitField.mem_mask0[8]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(B[2]),
        .I2(BitField_Insert),
        .I3(B[1]),
        .I4(\Using_BitField.mem_mask1_reg[28] ),
        .O(\Using_FPGA.Native_1 [9]));
  LUT6 #(
    .INIT(64'hBABB4545BABB4444)) 
    \Using_BitField.mem_mask0[9]_i_1 
       (.I0(\Using_FPGA.Native_2 ),
        .I1(\Using_BitField.mem_mask0_reg[1] ),
        .I2(\Using_BitField.mem_mask0_reg[1]_0 ),
        .I3(B[0]),
        .I4(BitField_Insert),
        .I5(\Using_BitField.mem_mask1_reg[28]_2 ),
        .O(\Using_FPGA.Native_1 [8]));
  LUT6 #(
    .INIT(64'hFFFF7FFFFFFEFFFF)) 
    \Using_BitField.mem_mask1[0]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_BitField.mem_mask1_reg[28] ),
        .I2(\Using_BitField.mem_mask1_reg[28]_2 ),
        .I3(\Using_BitField.mem_mask1_reg[28]_1 ),
        .I4(BitField_Extract),
        .I5(\Using_BitField.mem_mask1_reg[28]_0 ),
        .O(D[27]));
  LUT6 #(
    .INIT(64'h555555557F7E777F)) 
    \Using_BitField.mem_mask1[10]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_BitField.mem_mask1_reg[28]_2 ),
        .I2(\Using_BitField.mem_mask1_reg[28]_0 ),
        .I3(\Using_BitField.mem_mask1_reg[28]_1 ),
        .I4(BitField_Extract),
        .I5(\Using_BitField.mem_mask1_reg[28] ),
        .O(D[17]));
  LUT6 #(
    .INIT(64'h5757575757765757)) 
    \Using_BitField.mem_mask1[11]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_BitField.mem_mask1_reg[28] ),
        .I2(\Using_BitField.mem_mask1_reg[28]_2 ),
        .I3(\Using_BitField.mem_mask1_reg[28]_0 ),
        .I4(BitField_Extract),
        .I5(\Using_BitField.mem_mask1_reg[28]_1 ),
        .O(D[16]));
  LUT6 #(
    .INIT(64'h5555555577765777)) 
    \Using_BitField.mem_mask1[12]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_BitField.mem_mask1_reg[28]_2 ),
        .I2(\Using_BitField.mem_mask1_reg[28]_0 ),
        .I3(\Using_BitField.mem_mask1_reg[28]_1 ),
        .I4(BitField_Extract),
        .I5(\Using_BitField.mem_mask1_reg[28] ),
        .O(D[15]));
  LUT6 #(
    .INIT(64'h5555555555757767)) 
    \Using_BitField.mem_mask1[13]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_BitField.mem_mask1_reg[28] ),
        .I2(BitField_Extract),
        .I3(\Using_BitField.mem_mask1_reg[28]_1 ),
        .I4(\Using_BitField.mem_mask1_reg[28]_0 ),
        .I5(\Using_BitField.mem_mask1_reg[28]_2 ),
        .O(D[14]));
  LUT6 #(
    .INIT(64'h5555555555557657)) 
    \Using_BitField.mem_mask1[14]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_BitField.mem_mask1_reg[28]_0 ),
        .I2(\Using_BitField.mem_mask1_reg[28]_1 ),
        .I3(BitField_Extract),
        .I4(\Using_BitField.mem_mask1_reg[28]_2 ),
        .I5(\Using_BitField.mem_mask1_reg[28] ),
        .O(D[13]));
  LUT6 #(
    .INIT(64'h5555555555555655)) 
    \Using_BitField.mem_mask1[15]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_BitField.mem_mask1_reg[28] ),
        .I2(\Using_BitField.mem_mask1_reg[28]_0 ),
        .I3(BitField_Extract),
        .I4(\Using_BitField.mem_mask1_reg[28]_1 ),
        .I5(\Using_BitField.mem_mask1_reg[28]_2 ),
        .O(D[12]));
  LUT6 #(
    .INIT(64'h5555155555545555)) 
    \Using_BitField.mem_mask1[16]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_BitField.mem_mask1_reg[28] ),
        .I2(\Using_BitField.mem_mask1_reg[28]_2 ),
        .I3(\Using_BitField.mem_mask1_reg[28]_1 ),
        .I4(BitField_Extract),
        .I5(\Using_BitField.mem_mask1_reg[28]_0 ),
        .O(D[11]));
  LUT6 #(
    .INIT(64'h1555151555545555)) 
    \Using_BitField.mem_mask1[17]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_BitField.mem_mask1_reg[28] ),
        .I2(\Using_BitField.mem_mask1_reg[28]_2 ),
        .I3(\Using_BitField.mem_mask1_reg[28]_1 ),
        .I4(BitField_Extract),
        .I5(\Using_BitField.mem_mask1_reg[28]_0 ),
        .O(D[10]));
  LUT6 #(
    .INIT(64'h1515151555541555)) 
    \Using_BitField.mem_mask1[18]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_BitField.mem_mask1_reg[28] ),
        .I2(\Using_BitField.mem_mask1_reg[28]_2 ),
        .I3(\Using_BitField.mem_mask1_reg[28]_1 ),
        .I4(BitField_Extract),
        .I5(\Using_BitField.mem_mask1_reg[28]_0 ),
        .O(D[9]));
  LUT6 #(
    .INIT(64'h1111151155555455)) 
    \Using_BitField.mem_mask1[19]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_BitField.mem_mask1_reg[28]_2 ),
        .I2(\Using_BitField.mem_mask1_reg[28]_0 ),
        .I3(BitField_Extract),
        .I4(\Using_BitField.mem_mask1_reg[28]_1 ),
        .I5(\Using_BitField.mem_mask1_reg[28] ),
        .O(D[8]));
  LUT6 #(
    .INIT(64'h7FFF7F7FFFFEFFFF)) 
    \Using_BitField.mem_mask1[1]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_BitField.mem_mask1_reg[28] ),
        .I2(\Using_BitField.mem_mask1_reg[28]_2 ),
        .I3(\Using_BitField.mem_mask1_reg[28]_1 ),
        .I4(BitField_Extract),
        .I5(\Using_BitField.mem_mask1_reg[28]_0 ),
        .O(D[26]));
  LUT6 #(
    .INIT(64'h1111011155545555)) 
    \Using_BitField.mem_mask1[20]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_BitField.mem_mask1_reg[28]_2 ),
        .I2(\Using_BitField.mem_mask1_reg[28]_0 ),
        .I3(\Using_BitField.mem_mask1_reg[28]_1 ),
        .I4(BitField_Extract),
        .I5(\Using_BitField.mem_mask1_reg[28] ),
        .O(D[7]));
  LUT6 #(
    .INIT(64'h0000045555555551)) 
    \Using_BitField.mem_mask1[21]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(BitField_Extract),
        .I2(\Using_BitField.mem_mask1_reg[28]_1 ),
        .I3(\Using_BitField.mem_mask1_reg[28]_0 ),
        .I4(\Using_BitField.mem_mask1_reg[28]_2 ),
        .I5(\Using_BitField.mem_mask1_reg[28] ),
        .O(D[6]));
  LUT6 #(
    .INIT(64'h0000110155555455)) 
    \Using_BitField.mem_mask1[22]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_BitField.mem_mask1_reg[28]_0 ),
        .I2(\Using_BitField.mem_mask1_reg[28]_1 ),
        .I3(BitField_Extract),
        .I4(\Using_BitField.mem_mask1_reg[28]_2 ),
        .I5(\Using_BitField.mem_mask1_reg[28] ),
        .O(D[5]));
  LUT6 #(
    .INIT(64'h1111011111101111)) 
    \Using_BitField.mem_mask1[24]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_BitField.mem_mask1_reg[28] ),
        .I2(\Using_BitField.mem_mask1_reg[28]_2 ),
        .I3(\Using_BitField.mem_mask1_reg[28]_0 ),
        .I4(BitField_Extract),
        .I5(\Using_BitField.mem_mask1_reg[28]_1 ),
        .O(D[4]));
  LUT6 #(
    .INIT(64'h0000000010555545)) 
    \Using_BitField.mem_mask1[25]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_BitField.mem_mask1_reg[28]_1 ),
        .I2(BitField_Extract),
        .I3(\Using_BitField.mem_mask1_reg[28]_0 ),
        .I4(\Using_BitField.mem_mask1_reg[28]_2 ),
        .I5(\Using_BitField.mem_mask1_reg[28] ),
        .O(D[3]));
  LUT6 #(
    .INIT(64'h0101000101000101)) 
    \Using_BitField.mem_mask1[28]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_BitField.mem_mask1_reg[28] ),
        .I2(\Using_BitField.mem_mask1_reg[28]_2 ),
        .I3(\Using_BitField.mem_mask1_reg[28]_1 ),
        .I4(BitField_Extract),
        .I5(\Using_BitField.mem_mask1_reg[28]_0 ),
        .O(D[2]));
  LUT6 #(
    .INIT(64'h0000000000101101)) 
    \Using_BitField.mem_mask1[29]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_BitField.mem_mask1_reg[28] ),
        .I2(BitField_Extract),
        .I3(\Using_BitField.mem_mask1_reg[28]_1 ),
        .I4(\Using_BitField.mem_mask1_reg[28]_0 ),
        .I5(\Using_BitField.mem_mask1_reg[28]_2 ),
        .O(D[1]));
  LUT6 #(
    .INIT(64'h7F7F7F7FFFFE7FFF)) 
    \Using_BitField.mem_mask1[2]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_BitField.mem_mask1_reg[28] ),
        .I2(\Using_BitField.mem_mask1_reg[28]_2 ),
        .I3(\Using_BitField.mem_mask1_reg[28]_1 ),
        .I4(BitField_Extract),
        .I5(\Using_BitField.mem_mask1_reg[28]_0 ),
        .O(D[25]));
  LUT6 #(
    .INIT(64'h0000000001000001)) 
    \Using_BitField.mem_mask1[30]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_BitField.mem_mask1_reg[28] ),
        .I2(\Using_BitField.mem_mask1_reg[28]_2 ),
        .I3(\Using_BitField.mem_mask1_reg[28]_1 ),
        .I4(BitField_Extract),
        .I5(\Using_BitField.mem_mask1_reg[28]_0 ),
        .O(D[0]));
  LUT6 #(
    .INIT(64'h77777F77FFFFFEFF)) 
    \Using_BitField.mem_mask1[3]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_BitField.mem_mask1_reg[28]_2 ),
        .I2(\Using_BitField.mem_mask1_reg[28]_0 ),
        .I3(BitField_Extract),
        .I4(\Using_BitField.mem_mask1_reg[28]_1 ),
        .I5(\Using_BitField.mem_mask1_reg[28] ),
        .O(D[24]));
  LUT6 #(
    .INIT(64'h77775777FFFEFFFF)) 
    \Using_BitField.mem_mask1[4]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_BitField.mem_mask1_reg[28]_2 ),
        .I2(\Using_BitField.mem_mask1_reg[28]_0 ),
        .I3(\Using_BitField.mem_mask1_reg[28]_1 ),
        .I4(BitField_Extract),
        .I5(\Using_BitField.mem_mask1_reg[28] ),
        .O(D[23]));
  LUT6 #(
    .INIT(64'h55555DFFFFFFFFFB)) 
    \Using_BitField.mem_mask1[5]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(BitField_Extract),
        .I2(\Using_BitField.mem_mask1_reg[28]_1 ),
        .I3(\Using_BitField.mem_mask1_reg[28]_0 ),
        .I4(\Using_BitField.mem_mask1_reg[28]_2 ),
        .I5(\Using_BitField.mem_mask1_reg[28] ),
        .O(D[22]));
  LUT6 #(
    .INIT(64'h55557757FFFFFEFF)) 
    \Using_BitField.mem_mask1[6]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_BitField.mem_mask1_reg[28]_0 ),
        .I2(\Using_BitField.mem_mask1_reg[28]_1 ),
        .I3(BitField_Extract),
        .I4(\Using_BitField.mem_mask1_reg[28]_2 ),
        .I5(\Using_BitField.mem_mask1_reg[28] ),
        .O(D[21]));
  LUT6 #(
    .INIT(64'h55555575FFFFFFEF)) 
    \Using_BitField.mem_mask1[7]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_BitField.mem_mask1_reg[28]_0 ),
        .I2(BitField_Extract),
        .I3(\Using_BitField.mem_mask1_reg[28]_1 ),
        .I4(\Using_BitField.mem_mask1_reg[28]_2 ),
        .I5(\Using_BitField.mem_mask1_reg[28] ),
        .O(D[20]));
  LUT6 #(
    .INIT(64'h55555555F7FFFFEF)) 
    \Using_BitField.mem_mask1[8]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_BitField.mem_mask1_reg[28]_1 ),
        .I2(BitField_Extract),
        .I3(\Using_BitField.mem_mask1_reg[28]_0 ),
        .I4(\Using_BitField.mem_mask1_reg[28]_2 ),
        .I5(\Using_BitField.mem_mask1_reg[28] ),
        .O(D[19]));
  LUT6 #(
    .INIT(64'h5555555575FFFFEF)) 
    \Using_BitField.mem_mask1[9]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_BitField.mem_mask1_reg[28]_1 ),
        .I2(BitField_Extract),
        .I3(\Using_BitField.mem_mask1_reg[28]_0 ),
        .I4(\Using_BitField.mem_mask1_reg[28]_2 ),
        .I5(\Using_BitField.mem_mask1_reg[28] ),
        .O(D[18]));
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_13),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.Native_i_1__61 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_3 ),
        .I2(\Using_FPGA.Native_4 ),
        .I3(B[3]),
        .I4(\Using_FPGA.Native_5 ),
        .I5(B[4]),
        .O(S_5));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module block_design_microblaze_0_0_MB_FDE_906
   (B,
    of_PipeRun,
    D_14,
    Clk);
  output [0:0]B;
  input of_PipeRun;
  input D_14;
  input Clk;

  wire [0:0]B;
  wire Clk;
  wire D_14;
  wire of_PipeRun;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_14),
        .Q(B),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module block_design_microblaze_0_0_MB_FDE_910
   (\Using_FPGA.Native_0 ,
    of_PipeRun,
    D_33,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input of_PipeRun;
  input D_33;
  input Clk;

  wire Clk;
  wire D_33;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire of_PipeRun;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_33),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module block_design_microblaze_0_0_MB_FDE_914
   (B,
    of_PipeRun,
    D_15,
    Clk);
  output [0:0]B;
  input of_PipeRun;
  input D_15;
  input Clk;

  wire [0:0]B;
  wire Clk;
  wire D_15;
  wire of_PipeRun;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_15),
        .Q(B),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module block_design_microblaze_0_0_MB_FDE_918
   (B,
    of_PipeRun,
    D_16,
    Clk);
  output [0:0]B;
  input of_PipeRun;
  input D_16;
  input Clk;

  wire [0:0]B;
  wire Clk;
  wire D_16;
  wire of_PipeRun;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_16),
        .Q(B),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module block_design_microblaze_0_0_MB_FDE_922
   (B,
    of_PipeRun,
    D_17,
    Clk);
  output [0:0]B;
  input of_PipeRun;
  input D_17;
  input Clk;

  wire [0:0]B;
  wire Clk;
  wire D_17;
  wire of_PipeRun;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_17),
        .Q(B),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module block_design_microblaze_0_0_MB_FDE_926
   (B,
    of_PipeRun,
    D_18,
    Clk);
  output [0:0]B;
  input of_PipeRun;
  input D_18;
  input Clk;

  wire [0:0]B;
  wire Clk;
  wire D_18;
  wire of_PipeRun;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_18),
        .Q(B),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module block_design_microblaze_0_0_MB_FDE_930
   (B,
    of_PipeRun,
    D_19,
    Clk);
  output [0:0]B;
  input of_PipeRun;
  input D_19;
  input Clk;

  wire [0:0]B;
  wire Clk;
  wire D_19;
  wire of_PipeRun;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_19),
        .Q(B),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module block_design_microblaze_0_0_MB_FDE_934
   (\Using_FPGA.Native_0 ,
    \Using_FPGA.The_Compare[2].sel_reg_1 ,
    of_PipeRun,
    D_20,
    Clk,
    \Using_FPGA.Native_1 ,
    B,
    \Using_FPGA.Native_2 );
  output [0:0]\Using_FPGA.Native_0 ;
  output \Using_FPGA.The_Compare[2].sel_reg_1 ;
  input of_PipeRun;
  input D_20;
  input Clk;
  input \Using_FPGA.Native_1 ;
  input [0:0]B;
  input \Using_FPGA.Native_2 ;

  wire [0:0]B;
  wire Clk;
  wire D_20;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.The_Compare[2].sel_reg_1 ;
  wire of_PipeRun;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_20),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h9009)) 
    \Using_FPGA.Native_i_1__57 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(B),
        .I3(\Using_FPGA.Native_2 ),
        .O(\Using_FPGA.The_Compare[2].sel_reg_1 ));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module block_design_microblaze_0_0_MB_FDE_938
   (\Using_FPGA.Native_0 ,
    of_PipeRun,
    D_21,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input of_PipeRun;
  input D_21;
  input Clk;

  wire Clk;
  wire D_21;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire of_PipeRun;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_21),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module block_design_microblaze_0_0_MB_FDE_942
   (\Using_FPGA.Native_0 ,
    of_PipeRun,
    D_22,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input of_PipeRun;
  input D_22;
  input Clk;

  wire Clk;
  wire D_22;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire of_PipeRun;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_22),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module block_design_microblaze_0_0_MB_FDE_946
   (\Using_FPGA.Native_0 ,
    of_PipeRun,
    D_23,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input of_PipeRun;
  input D_23;
  input Clk;

  wire Clk;
  wire D_23;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire of_PipeRun;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_23),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module block_design_microblaze_0_0_MB_FDE_950
   (\Using_FPGA.Native_0 ,
    of_PipeRun,
    D_24,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input of_PipeRun;
  input D_24;
  input Clk;

  wire Clk;
  wire D_24;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire of_PipeRun;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_24),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module block_design_microblaze_0_0_MB_FDE_954
   (\Using_FPGA.Native_0 ,
    S,
    \Using_FPGA.Native_1 ,
    of_PipeRun,
    D_34,
    Clk,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    compare_Instr);
  output \Using_FPGA.Native_0 ;
  output S;
  output \Using_FPGA.Native_1 ;
  input of_PipeRun;
  input D_34;
  input Clk;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input compare_Instr;

  wire Clk;
  wire D_34;
  wire S;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire compare_Instr;
  wire of_PipeRun;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_34),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
  LUT4 #(
    .INIT(16'hF9FF)) 
    \Using_FPGA.Native_i_1__40 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_2 ),
        .I2(\Using_FPGA.Native_3 ),
        .I3(compare_Instr),
        .O(S));
  LUT4 #(
    .INIT(16'hF9FF)) 
    \Using_FPGA.Native_i_1__73 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_2 ),
        .I2(\Using_FPGA.Native_3 ),
        .I3(compare_Instr),
        .O(\Using_FPGA.Native_1 ));
endmodule

module block_design_microblaze_0_0_MB_FDR
   (\Using_FPGA.Native_0 ,
    DI,
    buffer_Full,
    dbg_pause_reg,
    dbg_pause_reg_0,
    \Using_FPGA.Native_1 ,
    S_0,
    D_33,
    Clk,
    \Using_FPGA.Native_I1 ,
    \Using_FPGA.Native_I1_0 ,
    \Using_FPGA.Native_I1_1 ,
    \Using_FPGA.Native_2 ,
    missed_IFetch,
    dbg_pause,
    \Size_17to32.imm_Reg_reg[15] ,
    \Size_17to32.imm_Reg_reg[15]_0 ,
    \Size_17to32.imm_Reg_reg[15]_1 ,
    take_Intr_Now_III,
    trace_jump_taken_i_reg,
    nonvalid_IFetch_n_reg,
    inHibit_EX,
    nonvalid_IFetch_n_reg_0,
    nonvalid_IFetch_n_reg_1);
  output \Using_FPGA.Native_0 ;
  output DI;
  output buffer_Full;
  output [0:0]dbg_pause_reg;
  output dbg_pause_reg_0;
  output \Using_FPGA.Native_1 ;
  input S_0;
  input D_33;
  input Clk;
  input \Using_FPGA.Native_I1 ;
  input \Using_FPGA.Native_I1_0 ;
  input \Using_FPGA.Native_I1_1 ;
  input \Using_FPGA.Native_2 ;
  input missed_IFetch;
  input dbg_pause;
  input \Size_17to32.imm_Reg_reg[15] ;
  input \Size_17to32.imm_Reg_reg[15]_0 ;
  input \Size_17to32.imm_Reg_reg[15]_1 ;
  input take_Intr_Now_III;
  input trace_jump_taken_i_reg;
  input nonvalid_IFetch_n_reg;
  input inHibit_EX;
  input nonvalid_IFetch_n_reg_0;
  input nonvalid_IFetch_n_reg_1;

  wire Clk;
  wire DI;
  wire D_33;
  wire S_0;
  wire \Size_17to32.imm_Reg_reg[15] ;
  wire \Size_17to32.imm_Reg_reg[15]_0 ;
  wire \Size_17to32.imm_Reg_reg[15]_1 ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_I1 ;
  wire \Using_FPGA.Native_I1_0 ;
  wire \Using_FPGA.Native_I1_1 ;
  wire buffer_Full;
  wire dbg_pause;
  wire [0:0]dbg_pause_reg;
  wire dbg_pause_reg_0;
  wire inHibit_EX;
  wire missed_IFetch;
  wire nonvalid_IFetch_n_reg;
  wire nonvalid_IFetch_n_reg_0;
  wire nonvalid_IFetch_n_reg_1;
  wire take_Intr_Now_III;
  wire trace_jump_taken_i_reg;

  LUT6 #(
    .INIT(64'h0000000000000040)) 
    \Size_17to32.imm_Reg[0]_i_1 
       (.I0(dbg_pause),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Size_17to32.imm_Reg_reg[15] ),
        .I3(\Size_17to32.imm_Reg_reg[15]_0 ),
        .I4(\Size_17to32.imm_Reg_reg[15]_1 ),
        .I5(take_Intr_Now_III),
        .O(dbg_pause_reg));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(D_33),
        .Q(\Using_FPGA.Native_0 ),
        .R(S_0));
  LUT6 #(
    .INIT(64'h0000000000DFDFDF)) 
    \Using_FPGA.Native_i_1__113 
       (.I0(\Using_FPGA.Native_I1 ),
        .I1(\Using_FPGA.Native_I1_0 ),
        .I2(\Using_FPGA.Native_I1_1 ),
        .I3(\Using_FPGA.Native_0 ),
        .I4(\Using_FPGA.Native_2 ),
        .I5(missed_IFetch),
        .O(DI));
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native_i_1__115 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_2 ),
        .O(buffer_Full));
  LUT3 #(
    .INIT(8'h4F)) 
    \Using_FPGA.Native_i_1__134 
       (.I0(dbg_pause),
        .I1(\Using_FPGA.Native_0 ),
        .I2(trace_jump_taken_i_reg),
        .O(dbg_pause_reg_0));
  LUT6 #(
    .INIT(64'h00F3FFFF55555555)) 
    nonvalid_IFetch_n_i_1
       (.I0(nonvalid_IFetch_n_reg),
        .I1(\Using_FPGA.Native_0 ),
        .I2(dbg_pause),
        .I3(inHibit_EX),
        .I4(nonvalid_IFetch_n_reg_0),
        .I5(nonvalid_IFetch_n_reg_1),
        .O(\Using_FPGA.Native_1 ));
endmodule

module block_design_microblaze_0_0_MB_FDRE
   (carry_In,
    sync_reset,
    \Using_FPGA.Native_0 ,
    correct_Carry_II,
    Clk);
  output carry_In;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input correct_Carry_II;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire carry_In;
  wire correct_Carry_II;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(correct_Carry_II),
        .Q(carry_In),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_100
   (reg_Test_Equal_N,
    R22_out,
    \Using_FPGA.Native_0 ,
    Reg_Test_Equal_N_i13_out,
    Clk);
  output reg_Test_Equal_N;
  input R22_out;
  input \Using_FPGA.Native_0 ;
  input Reg_Test_Equal_N_i13_out;
  input Clk;

  wire Clk;
  wire R22_out;
  wire Reg_Test_Equal_N_i13_out;
  wire \Using_FPGA.Native_0 ;
  wire reg_Test_Equal_N;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(Reg_Test_Equal_N_i13_out),
        .Q(reg_Test_Equal_N),
        .R(R22_out));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_106
   (use_Reg_Neg_DI,
    R22_out,
    \Using_FPGA.Native_0 ,
    use_Reg_Neg_DI_i40_out,
    Clk);
  output use_Reg_Neg_DI;
  input R22_out;
  input \Using_FPGA.Native_0 ;
  input use_Reg_Neg_DI_i40_out;
  input Clk;

  wire Clk;
  wire R22_out;
  wire \Using_FPGA.Native_0 ;
  wire use_Reg_Neg_DI;
  wire use_Reg_Neg_DI_i40_out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(use_Reg_Neg_DI_i40_out),
        .Q(use_Reg_Neg_DI),
        .R(R22_out));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_107
   (use_Reg_Neg_S,
    R22_out,
    \Using_FPGA.Native_0 ,
    use_Reg_Neg_S_i42_out,
    Clk);
  output use_Reg_Neg_S;
  input R22_out;
  input \Using_FPGA.Native_0 ;
  input use_Reg_Neg_S_i42_out;
  input Clk;

  wire Clk;
  wire R22_out;
  wire \Using_FPGA.Native_0 ;
  wire use_Reg_Neg_S;
  wire use_Reg_Neg_S_i42_out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(use_Reg_Neg_S_i42_out),
        .Q(use_Reg_Neg_S),
        .R(R22_out));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_657
   (pc_I,
    sync_reset,
    PC_Write,
    \Using_FPGA.Native_0 ,
    Clk);
  output pc_I;
  input sync_reset;
  input PC_Write;
  input [0:0]\Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire pc_I;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(\Using_FPGA.Native_0 ),
        .Q(pc_I),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_663
   (pc_I,
    sync_reset,
    PC_Write,
    \Using_FPGA.Native_0 ,
    Clk);
  output pc_I;
  input sync_reset;
  input PC_Write;
  input [0:0]\Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire pc_I;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(\Using_FPGA.Native_0 ),
        .Q(pc_I),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_828
   (\Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk,
    \Using_FPGA.Native_i_4__0 ,
    \Using_FPGA.Native_i_4__0_0 );
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;
  input \Using_FPGA.Native_i_4__0 ;
  input \Using_FPGA.Native_i_4__0_0 ;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_i_4__0 ;
  wire \Using_FPGA.Native_i_4__0_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
  LUT3 #(
    .INIT(8'hFE)) 
    \Using_FPGA.Native_i_8__0 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_i_4__0 ),
        .I2(\Using_FPGA.Native_i_4__0_0 ),
        .O(\Using_FPGA.Native_1 ));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_829
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_832
   (\Using_FPGA.Native_0 ,
    \Using_FPGA.The_Compare[0].sel_reg_3 ,
    \Using_FPGA.Native_1 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_i_6__0 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_i_6__0_0 ,
    \Using_FPGA.Native_i_6__0_1 ,
    \Using_FPGA.Native_i_6__0_2 ,
    Is_Equal);
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.The_Compare[0].sel_reg_3 ;
  output \Using_FPGA.Native_1 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;
  input [0:0]\Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_i_6__0 ;
  input [1:0]\Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_i_6__0_0 ;
  input \Using_FPGA.Native_i_6__0_1 ;
  input \Using_FPGA.Native_i_6__0_2 ;
  input Is_Equal;

  wire Clk;
  wire Is_Equal;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [0:0]\Using_FPGA.Native_2 ;
  wire [1:0]\Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_i_6__0 ;
  wire \Using_FPGA.Native_i_6__0_0 ;
  wire \Using_FPGA.Native_i_6__0_1 ;
  wire \Using_FPGA.Native_i_6__0_2 ;
  wire \Using_FPGA.The_Compare[0].sel_reg_3 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.Native_i_1__59 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_2 ),
        .I2(\Using_FPGA.Native_i_6__0 ),
        .I3(\Using_FPGA.Native_3 [1]),
        .I4(\Using_FPGA.Native_3 [0]),
        .I5(\Using_FPGA.Native_i_6__0_0 ),
        .O(\Using_FPGA.The_Compare[0].sel_reg_3 ));
  LUT6 #(
    .INIT(64'h0000000100000000)) 
    \Using_FPGA.Native_i_8 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_i_6__0_1 ),
        .I2(\Using_FPGA.Native_i_6__0 ),
        .I3(\Using_FPGA.Native_i_6__0_2 ),
        .I4(\Using_FPGA.Native_i_6__0_0 ),
        .I5(Is_Equal),
        .O(\Using_FPGA.Native_1 ));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_833
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_836
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_837
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_840
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_841
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_844
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_845
   (\Using_FPGA.Native_0 ,
    S_10,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk,
    \Using_FPGA.Native_1 );
  output [0:0]\Using_FPGA.Native_0 ;
  output S_10;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;
  input [4:0]\Using_FPGA.Native_1 ;

  wire Clk;
  wire S_10;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [4:0]\Using_FPGA.Native_1 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \Using_FPGA.Native_i_1__67 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 [0]),
        .I2(\Using_FPGA.Native_1 [4]),
        .I3(\Using_FPGA.Native_1 [3]),
        .I4(\Using_FPGA.Native_1 [2]),
        .I5(\Using_FPGA.Native_1 [1]),
        .O(S_10));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_848
   (\Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    S_0,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_i_1__46 ,
    \Using_FPGA.Native_i_1__46_0 ,
    \Using_FPGA.Native_i_1__46_1 ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 );
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  output S_0;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_i_1__46 ;
  input \Using_FPGA.Native_i_1__46_0 ;
  input \Using_FPGA.Native_i_1__46_1 ;
  input [0:0]\Using_FPGA.Native_4 ;
  input [1:0]\Using_FPGA.Native_5 ;

  wire Clk;
  wire S_0;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire [0:0]\Using_FPGA.Native_4 ;
  wire [1:0]\Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_i_1__46 ;
  wire \Using_FPGA.Native_i_1__46_0 ;
  wire \Using_FPGA.Native_i_1__46_1 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.Native_i_1__56 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_4 ),
        .I2(\Using_FPGA.Native_3 ),
        .I3(\Using_FPGA.Native_5 [1]),
        .I4(\Using_FPGA.Native_5 [0]),
        .I5(\Using_FPGA.Native_2 ),
        .O(S_0));
  LUT6 #(
    .INIT(64'h00000000FFF10000)) 
    \Using_FPGA.Native_i_5 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_2 ),
        .I2(\Using_FPGA.Native_3 ),
        .I3(\Using_FPGA.Native_i_1__46 ),
        .I4(\Using_FPGA.Native_i_1__46_0 ),
        .I5(\Using_FPGA.Native_i_1__46_1 ),
        .O(\Using_FPGA.Native_1 ));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_849
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_852
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_853
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_856
   (Op1_Shift,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output Op1_Shift;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire Op1_Shift;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(Op1_Shift),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_857
   (A,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output [0:0]A;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire [0:0]A;
  wire Clk;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(A),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_860
   (\Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk,
    EX_Op1,
    \Using_FPGA.Native_i_3__2 ,
    \Using_FPGA.Native_i_3__2_0 ,
    \Using_FPGA.Native_i_3__2_1 ,
    \Using_FPGA.Native_i_3__2_2 );
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;
  input EX_Op1;
  input \Using_FPGA.Native_i_3__2 ;
  input \Using_FPGA.Native_i_3__2_0 ;
  input \Using_FPGA.Native_i_3__2_1 ;
  input \Using_FPGA.Native_i_3__2_2 ;

  wire Clk;
  wire EX_Op1;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_i_3__2 ;
  wire \Using_FPGA.Native_i_3__2_0 ;
  wire \Using_FPGA.Native_i_3__2_1 ;
  wire \Using_FPGA.Native_i_3__2_2 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'h00000000FFFF00F2)) 
    \Using_FPGA.Native_i_8__1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(EX_Op1),
        .I2(\Using_FPGA.Native_i_3__2 ),
        .I3(\Using_FPGA.Native_i_3__2_0 ),
        .I4(\Using_FPGA.Native_i_3__2_1 ),
        .I5(\Using_FPGA.Native_i_3__2_2 ),
        .O(\Using_FPGA.Native_1 ));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_861
   (A,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output [0:0]A;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire [0:0]A;
  wire Clk;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(A),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_864
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_865
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_868
   (EX_Op1,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output EX_Op1;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire EX_Op1;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(EX_Op1),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_869
   (A,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output [0:0]A;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire [0:0]A;
  wire Clk;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(A),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_872
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_873
   (A,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output [0:0]A;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire [0:0]A;
  wire Clk;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(A),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_876
   (\Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    S_8,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk,
    \Using_FPGA.Native_i_2__31 ,
    \Using_FPGA.Native_i_2__31_0 ,
    \Using_FPGA.Native_i_2__31_1 ,
    \Using_FPGA.Native_i_2__31_2 ,
    B,
    \Using_FPGA.Native_2 );
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  output S_8;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;
  input \Using_FPGA.Native_i_2__31 ;
  input \Using_FPGA.Native_i_2__31_0 ;
  input \Using_FPGA.Native_i_2__31_1 ;
  input \Using_FPGA.Native_i_2__31_2 ;
  input [0:0]B;
  input [1:0]\Using_FPGA.Native_2 ;

  wire [0:0]B;
  wire Clk;
  wire S_8;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [1:0]\Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_i_2__31 ;
  wire \Using_FPGA.Native_i_2__31_0 ;
  wire \Using_FPGA.Native_i_2__31_1 ;
  wire \Using_FPGA.Native_i_2__31_2 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.Native_i_1__64 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(B),
        .I2(\Using_FPGA.Native_i_2__31_1 ),
        .I3(\Using_FPGA.Native_2 [1]),
        .I4(\Using_FPGA.Native_i_2__31_2 ),
        .I5(\Using_FPGA.Native_2 [0]),
        .O(S_8));
  LUT5 #(
    .INIT(32'hA8A8A8AA)) 
    \Using_FPGA.Native_i_7 
       (.I0(\Using_FPGA.Native_i_2__31 ),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_i_2__31_0 ),
        .I3(\Using_FPGA.Native_i_2__31_1 ),
        .I4(\Using_FPGA.Native_i_2__31_2 ),
        .O(\Using_FPGA.Native_1 ));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_877
   (A,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output [0:0]A;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire [0:0]A;
  wire Clk;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(A),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_88
   (alu_Op,
    sync_reset,
    \Using_FPGA.Native_0 ,
    D_32,
    Clk);
  output [0:0]alu_Op;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input D_32;
  input Clk;

  wire Clk;
  wire D_32;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]alu_Op;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(D_32),
        .Q(alu_Op),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_880
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_881
   (A,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output [0:0]A;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire [0:0]A;
  wire Clk;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(A),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_884
   (\Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk,
    \Using_FPGA.Native_i_2__32 ,
    \Using_FPGA.Native_i_2__32_0 ,
    \Using_FPGA.Native_i_2__32_1 ,
    \Using_FPGA.Native_i_2__32_2 ,
    \Using_FPGA.Native_i_2__32_3 );
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;
  input \Using_FPGA.Native_i_2__32 ;
  input \Using_FPGA.Native_i_2__32_0 ;
  input \Using_FPGA.Native_i_2__32_1 ;
  input \Using_FPGA.Native_i_2__32_2 ;
  input \Using_FPGA.Native_i_2__32_3 ;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_i_2__32 ;
  wire \Using_FPGA.Native_i_2__32_0 ;
  wire \Using_FPGA.Native_i_2__32_1 ;
  wire \Using_FPGA.Native_i_2__32_2 ;
  wire \Using_FPGA.Native_i_2__32_3 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'h0000000000000010)) 
    \Using_FPGA.Native_i_7__0 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_i_2__32 ),
        .I2(\Using_FPGA.Native_i_2__32_0 ),
        .I3(\Using_FPGA.Native_i_2__32_1 ),
        .I4(\Using_FPGA.Native_i_2__32_2 ),
        .I5(\Using_FPGA.Native_i_2__32_3 ),
        .O(\Using_FPGA.Native_1 ));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_885
   (A,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output [0:0]A;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire [0:0]A;
  wire Clk;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(A),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_888
   (\Using_FPGA.Native_0 ,
    \Using_FPGA.The_Compare[0].sel_reg_9 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 );
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.The_Compare[0].sel_reg_9 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input [0:0]\Using_FPGA.Native_4 ;
  input \Using_FPGA.Native_5 ;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire [0:0]\Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.The_Compare[0].sel_reg_9 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.Native_i_1__65 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(\Using_FPGA.Native_3 ),
        .I4(\Using_FPGA.Native_4 ),
        .I5(\Using_FPGA.Native_5 ),
        .O(\Using_FPGA.The_Compare[0].sel_reg_9 ));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_889
   (A,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output [0:0]A;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire [0:0]A;
  wire Clk;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(A),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_89
   (alu_Op,
    sync_reset,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Clk);
  output [0:0]alu_Op;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [0:0]alu_Op;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(\Using_FPGA.Native_1 ),
        .Q(alu_Op),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_892
   (Shifted,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output Shifted;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire Shifted;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(Shifted),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_893
   (A,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output [0:0]A;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire [0:0]A;
  wire Clk;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(A),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_896
   (\Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    \Using_FPGA.Native_i_1__45_0 ,
    \Using_FPGA.Native_i_1__45_1 ,
    \Using_FPGA.Native_i_1__45_2 ,
    \Using_FPGA.Native_i_1__45_3 ,
    \Using_FPGA.Native_i_1__45_4 ,
    \Using_FPGA.Native_i_3__2_0 ,
    \Using_FPGA.Native_i_3__2_1 ,
    \Using_FPGA.Native_i_3__2_2 ,
    \Using_FPGA.Native_i_3__2_3 ,
    \Using_FPGA.Native_i_3__2_4 );
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_4 ;
  input \Using_FPGA.Native_5 ;
  input \Using_FPGA.Native_6 ;
  input \Using_FPGA.Native_i_1__45_0 ;
  input \Using_FPGA.Native_i_1__45_1 ;
  input \Using_FPGA.Native_i_1__45_2 ;
  input \Using_FPGA.Native_i_1__45_3 ;
  input \Using_FPGA.Native_i_1__45_4 ;
  input \Using_FPGA.Native_i_3__2_0 ;
  input \Using_FPGA.Native_i_3__2_1 ;
  input \Using_FPGA.Native_i_3__2_2 ;
  input \Using_FPGA.Native_i_3__2_3 ;
  input \Using_FPGA.Native_i_3__2_4 ;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_i_1__45_0 ;
  wire \Using_FPGA.Native_i_1__45_1 ;
  wire \Using_FPGA.Native_i_1__45_2 ;
  wire \Using_FPGA.Native_i_1__45_3 ;
  wire \Using_FPGA.Native_i_1__45_4 ;
  wire \Using_FPGA.Native_i_3__2_0 ;
  wire \Using_FPGA.Native_i_3__2_1 ;
  wire \Using_FPGA.Native_i_3__2_2 ;
  wire \Using_FPGA.Native_i_3__2_3 ;
  wire \Using_FPGA.Native_i_3__2_4 ;
  wire \Using_FPGA.Native_i_3__2_n_0 ;
  wire \Using_FPGA.Native_i_7__1_n_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'hFFFFFFFF44470000)) 
    \Using_FPGA.Native_i_1__45 
       (.I0(\Using_FPGA.Native_i_3__2_n_0 ),
        .I1(\Using_FPGA.Native_2 ),
        .I2(\Using_FPGA.Native_3 ),
        .I3(\Using_FPGA.Native_4 ),
        .I4(\Using_FPGA.Native_5 ),
        .I5(\Using_FPGA.Native_6 ),
        .O(\Using_FPGA.Native_1 ));
  LUT6 #(
    .INIT(64'hFFFFEEEEFFF0EEEE)) 
    \Using_FPGA.Native_i_3__2 
       (.I0(\Using_FPGA.Native_i_7__1_n_0 ),
        .I1(\Using_FPGA.Native_i_1__45_0 ),
        .I2(\Using_FPGA.Native_i_1__45_1 ),
        .I3(\Using_FPGA.Native_i_1__45_2 ),
        .I4(\Using_FPGA.Native_i_1__45_3 ),
        .I5(\Using_FPGA.Native_i_1__45_4 ),
        .O(\Using_FPGA.Native_i_3__2_n_0 ));
  LUT6 #(
    .INIT(64'h00000000FFFF00F2)) 
    \Using_FPGA.Native_i_7__1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_i_3__2_0 ),
        .I2(\Using_FPGA.Native_i_3__2_1 ),
        .I3(\Using_FPGA.Native_i_3__2_2 ),
        .I4(\Using_FPGA.Native_i_3__2_3 ),
        .I5(\Using_FPGA.Native_i_3__2_4 ),
        .O(\Using_FPGA.Native_i_7__1_n_0 ));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_897
   (A,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output [0:0]A;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire [0:0]A;
  wire Clk;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(A),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_900
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_901
   (A,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output [0:0]A;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire [0:0]A;
  wire Clk;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(A),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_904
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_905
   (A,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output [0:0]A;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire [0:0]A;
  wire Clk;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(A),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_908
   (\Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk,
    \Using_FPGA.Native_i_6 ,
    \Using_FPGA.Native_i_6_0 ,
    \Using_FPGA.Native_i_6_1 ,
    \Using_FPGA.Native_i_6_2 ,
    \Using_FPGA.Native_i_6_3 ,
    Is_Equal,
    \Using_FPGA.Native_i_1__53 ,
    \Using_FPGA.Native_i_1__53_0 );
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;
  input \Using_FPGA.Native_i_6 ;
  input \Using_FPGA.Native_i_6_0 ;
  input \Using_FPGA.Native_i_6_1 ;
  input \Using_FPGA.Native_i_6_2 ;
  input \Using_FPGA.Native_i_6_3 ;
  input Is_Equal;
  input \Using_FPGA.Native_i_1__53 ;
  input \Using_FPGA.Native_i_1__53_0 ;

  wire Clk;
  wire Is_Equal;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_i_1__53 ;
  wire \Using_FPGA.Native_i_1__53_0 ;
  wire \Using_FPGA.Native_i_6 ;
  wire \Using_FPGA.Native_i_6_0 ;
  wire \Using_FPGA.Native_i_6_1 ;
  wire \Using_FPGA.Native_i_6_2 ;
  wire \Using_FPGA.Native_i_6_3 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'hFFFFFFFF00000001)) 
    \Using_FPGA.Native_i_6__0 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(Is_Equal),
        .I2(\Using_FPGA.Native_i_1__53 ),
        .I3(\Using_FPGA.Native_i_6_2 ),
        .I4(\Using_FPGA.Native_i_6_3 ),
        .I5(\Using_FPGA.Native_i_1__53_0 ),
        .O(\Using_FPGA.Native_2 ));
  LUT6 #(
    .INIT(64'h5555555500005504)) 
    \Using_FPGA.Native_i_9__0 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_i_6 ),
        .I2(\Using_FPGA.Native_i_6_0 ),
        .I3(\Using_FPGA.Native_i_6_1 ),
        .I4(\Using_FPGA.Native_i_6_2 ),
        .I5(\Using_FPGA.Native_i_6_3 ),
        .O(\Using_FPGA.Native_1 ));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_909
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_91
   (force1,
    R22_out,
    \Using_FPGA.Native_0 ,
    force1_i43_out,
    Clk);
  output force1;
  input R22_out;
  input \Using_FPGA.Native_0 ;
  input force1_i43_out;
  input Clk;

  wire Clk;
  wire R22_out;
  wire \Using_FPGA.Native_0 ;
  wire force1;
  wire force1_i43_out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(force1_i43_out),
        .Q(force1),
        .R(R22_out));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_912
   (\Using_FPGA.Native_0 ,
    I0,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk,
    \Using_FPGA.Native_1 ,
    PCMP_Instr2_out,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_i_1__53_0 ,
    \Using_FPGA.Native_i_1__53_1 ,
    \Using_FPGA.Native_i_1__53_2 ,
    \Using_FPGA.Native_i_1__53_3 ,
    \Using_FPGA.Native_i_1__53_4 );
  output \Using_FPGA.Native_0 ;
  output I0;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;
  input \Using_FPGA.Native_1 ;
  input PCMP_Instr2_out;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_4 ;
  input \Using_FPGA.Native_i_1__53_0 ;
  input \Using_FPGA.Native_i_1__53_1 ;
  input \Using_FPGA.Native_i_1__53_2 ;
  input \Using_FPGA.Native_i_1__53_3 ;
  input \Using_FPGA.Native_i_1__53_4 ;

  wire Clk;
  wire I0;
  wire PCMP_Instr2_out;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_i_1__53_0 ;
  wire \Using_FPGA.Native_i_1__53_1 ;
  wire \Using_FPGA.Native_i_1__53_2 ;
  wire \Using_FPGA.Native_i_1__53_3 ;
  wire \Using_FPGA.Native_i_1__53_4 ;
  wire \Using_FPGA.Native_i_2__32_n_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'hFFFF4F4444444F44)) 
    \Using_FPGA.Native_i_1__53 
       (.I0(\Using_FPGA.Native_i_2__32_n_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(PCMP_Instr2_out),
        .I3(\Using_FPGA.Native_2 ),
        .I4(\Using_FPGA.Native_3 ),
        .I5(\Using_FPGA.Native_4 ),
        .O(I0));
  LUT6 #(
    .INIT(64'h00000000FFFFFFFE)) 
    \Using_FPGA.Native_i_2__32 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_i_1__53_0 ),
        .I2(\Using_FPGA.Native_i_1__53_1 ),
        .I3(\Using_FPGA.Native_i_1__53_2 ),
        .I4(\Using_FPGA.Native_i_1__53_3 ),
        .I5(\Using_FPGA.Native_i_1__53_4 ),
        .O(\Using_FPGA.Native_i_2__32_n_0 ));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_913
   (A,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output [0:0]A;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire [0:0]A;
  wire Clk;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(A),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_916
   (\Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    Shift_Logic_Res,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_i_1__46_0 ,
    \Using_FPGA.Native_i_1__46_1 ,
    \Using_FPGA.Native_i_1__46_2 ,
    \Using_FPGA.Native_i_1__46_3 ,
    \Using_FPGA.Native_i_1__46_4 );
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input Shift_Logic_Res;
  input \Using_FPGA.Native_4 ;
  input \Using_FPGA.Native_5 ;
  input \Using_FPGA.Native_i_1__46_0 ;
  input \Using_FPGA.Native_i_1__46_1 ;
  input \Using_FPGA.Native_i_1__46_2 ;
  input \Using_FPGA.Native_i_1__46_3 ;
  input \Using_FPGA.Native_i_1__46_4 ;

  wire Clk;
  wire Shift_Logic_Res;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_i_1__46_0 ;
  wire \Using_FPGA.Native_i_1__46_1 ;
  wire \Using_FPGA.Native_i_1__46_2 ;
  wire \Using_FPGA.Native_i_1__46_3 ;
  wire \Using_FPGA.Native_i_1__46_4 ;
  wire \Using_FPGA.Native_i_2__31_n_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFF444)) 
    \Using_FPGA.Native_i_1__46 
       (.I0(\Using_FPGA.Native_i_2__31_n_0 ),
        .I1(\Using_FPGA.Native_2 ),
        .I2(\Using_FPGA.Native_3 ),
        .I3(Shift_Logic_Res),
        .I4(\Using_FPGA.Native_4 ),
        .I5(\Using_FPGA.Native_5 ),
        .O(\Using_FPGA.Native_1 ));
  LUT6 #(
    .INIT(64'h00000000FFFF1110)) 
    \Using_FPGA.Native_i_2__31 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_i_1__46_0 ),
        .I2(\Using_FPGA.Native_i_1__46_1 ),
        .I3(\Using_FPGA.Native_i_1__46_2 ),
        .I4(\Using_FPGA.Native_i_1__46_3 ),
        .I5(\Using_FPGA.Native_i_1__46_4 ),
        .O(\Using_FPGA.Native_i_2__31_n_0 ));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_917
   (A,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output [0:0]A;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire [0:0]A;
  wire Clk;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(A),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_92
   (force2,
    R22_out,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Clk);
  output force2;
  input R22_out;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Clk;

  wire Clk;
  wire R22_out;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire force2;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(\Using_FPGA.Native_1 ),
        .Q(force2),
        .R(R22_out));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_920
   (\Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk,
    \Using_FPGA.Native_i_2__31 ,
    \Using_FPGA.Native_i_2__31_0 );
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;
  input \Using_FPGA.Native_i_2__31 ;
  input \Using_FPGA.Native_i_2__31_0 ;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_i_2__31 ;
  wire \Using_FPGA.Native_i_2__31_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
  LUT3 #(
    .INIT(8'hFE)) 
    \Using_FPGA.Native_i_6__1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_i_2__31 ),
        .I2(\Using_FPGA.Native_i_2__31_0 ),
        .O(\Using_FPGA.Native_1 ));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_921
   (A,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output [0:0]A;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire [0:0]A;
  wire Clk;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(A),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_924
   (\Using_FPGA.Native_0 ,
    Sext,
    \Using_FPGA.The_Compare[0].sel_reg_6 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk,
    sext16,
    \Using_FPGA.Native_1 ,
    sext8,
    \Using_FPGA.Native_2 ,
    B,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 );
  output \Using_FPGA.Native_0 ;
  output Sext;
  output \Using_FPGA.The_Compare[0].sel_reg_6 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;
  input sext16;
  input \Using_FPGA.Native_1 ;
  input sext8;
  input \Using_FPGA.Native_2 ;
  input [0:0]B;
  input \Using_FPGA.Native_3 ;
  input [1:0]\Using_FPGA.Native_4 ;
  input \Using_FPGA.Native_5 ;

  wire [0:0]B;
  wire Clk;
  wire Sext;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire [1:0]\Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.The_Compare[0].sel_reg_6 ;
  wire of_PipeRun;
  wire op1_I;
  wire sext16;
  wire sext8;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
  LUT5 #(
    .INIT(32'h0B080808)) 
    \Using_FPGA.Native_i_1__43 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(sext16),
        .I2(\Using_FPGA.Native_1 ),
        .I3(sext8),
        .I4(\Using_FPGA.Native_2 ),
        .O(Sext));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.Native_i_1__62 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(B),
        .I2(\Using_FPGA.Native_3 ),
        .I3(\Using_FPGA.Native_4 [1]),
        .I4(\Using_FPGA.Native_4 [0]),
        .I5(\Using_FPGA.Native_5 ),
        .O(\Using_FPGA.The_Compare[0].sel_reg_6 ));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_925
   (A,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output [0:0]A;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire [0:0]A;
  wire Clk;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(A),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_928
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_929
   (A,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output [0:0]A;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire [0:0]A;
  wire Clk;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(A),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_93
   (force_Val1,
    R22_out,
    \Using_FPGA.Native_0 ,
    force_Val1_i41_out,
    Clk);
  output force_Val1;
  input R22_out;
  input \Using_FPGA.Native_0 ;
  input force_Val1_i41_out;
  input Clk;

  wire Clk;
  wire R22_out;
  wire \Using_FPGA.Native_0 ;
  wire force_Val1;
  wire force_Val1_i41_out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(force_Val1_i41_out),
        .Q(force_Val1),
        .R(R22_out));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_932
   (\Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk,
    \Using_FPGA.Native_i_1__45 ,
    \Using_FPGA.Native_i_1__45_0 ,
    \Using_FPGA.Native_i_1__45_1 ,
    \Using_FPGA.Native_i_1__45_2 ,
    \Using_FPGA.Native_i_1__45_3 );
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;
  input \Using_FPGA.Native_i_1__45 ;
  input \Using_FPGA.Native_i_1__45_0 ;
  input \Using_FPGA.Native_i_1__45_1 ;
  input \Using_FPGA.Native_i_1__45_2 ;
  input \Using_FPGA.Native_i_1__45_3 ;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_i_1__45 ;
  wire \Using_FPGA.Native_i_1__45_0 ;
  wire \Using_FPGA.Native_i_1__45_1 ;
  wire \Using_FPGA.Native_i_1__45_2 ;
  wire \Using_FPGA.Native_i_1__45_3 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'h00000000FFFF00F2)) 
    \Using_FPGA.Native_i_4__1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_i_1__45 ),
        .I2(\Using_FPGA.Native_i_1__45_0 ),
        .I3(\Using_FPGA.Native_i_1__45_1 ),
        .I4(\Using_FPGA.Native_i_1__45_2 ),
        .I5(\Using_FPGA.Native_i_1__45_3 ),
        .O(\Using_FPGA.Native_1 ));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_933
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_936
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_937
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_940
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_941
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_944
   (\Using_FPGA.Native_0 ,
    S_2,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 );
  output \Using_FPGA.Native_0 ;
  output S_2;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;
  input [0:0]\Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input [1:0]\Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_4 ;

  wire Clk;
  wire S_2;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire [1:0]\Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.Native_i_1__58 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(\Using_FPGA.Native_3 [1]),
        .I4(\Using_FPGA.Native_3 [0]),
        .I5(\Using_FPGA.Native_4 ),
        .O(S_2));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_945
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_948
   (\Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk,
    \Using_FPGA.Native_i_1__46 ,
    \Using_FPGA.Native_i_1__46_0 ,
    \Using_FPGA.Native_i_1__46_1 ,
    \Using_FPGA.Native_i_1__46_2 ,
    \Using_FPGA.Native_i_1__46_3 );
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;
  input \Using_FPGA.Native_i_1__46 ;
  input \Using_FPGA.Native_i_1__46_0 ;
  input \Using_FPGA.Native_i_1__46_1 ;
  input \Using_FPGA.Native_i_1__46_2 ;
  input \Using_FPGA.Native_i_1__46_3 ;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_i_1__46 ;
  wire \Using_FPGA.Native_i_1__46_0 ;
  wire \Using_FPGA.Native_i_1__46_1 ;
  wire \Using_FPGA.Native_i_1__46_2 ;
  wire \Using_FPGA.Native_i_1__46_3 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'h00000000A8A8A8AA)) 
    \Using_FPGA.Native_i_4__0 
       (.I0(\Using_FPGA.Native_i_1__46 ),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_i_1__46_0 ),
        .I3(\Using_FPGA.Native_i_1__46_1 ),
        .I4(\Using_FPGA.Native_i_1__46_2 ),
        .I5(\Using_FPGA.Native_i_1__46_3 ),
        .O(\Using_FPGA.Native_1 ));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_949
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_952
   (\Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \instr_EX_i_reg[22] ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk,
    \C_reg[31] ,
    \C_reg[31]_0 ,
    \C_reg[29] ,
    \C_reg[23] ,
    \C_reg[23]_0 ,
    \C_reg[31]_1 ,
    \C_reg[31]_2 ,
    \C_reg[31]_3 ,
    void_bit,
    \C_reg[23]_1 ,
    \C_reg[23]_2 ,
    \C_reg[23]_3 ,
    \C_reg[23]_4 );
  output \Using_FPGA.Native_0 ;
  output [2:0]\Using_FPGA.Native_1 ;
  output \instr_EX_i_reg[22] ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;
  input \C_reg[31] ;
  input \C_reg[31]_0 ;
  input \C_reg[29] ;
  input \C_reg[23] ;
  input \C_reg[23]_0 ;
  input \C_reg[31]_1 ;
  input \C_reg[31]_2 ;
  input \C_reg[31]_3 ;
  input void_bit;
  input \C_reg[23]_1 ;
  input \C_reg[23]_2 ;
  input \C_reg[23]_3 ;
  input \C_reg[23]_4 ;

  wire \C_reg[23] ;
  wire \C_reg[23]_0 ;
  wire \C_reg[23]_1 ;
  wire \C_reg[23]_2 ;
  wire \C_reg[23]_3 ;
  wire \C_reg[23]_4 ;
  wire \C_reg[29] ;
  wire \C_reg[31] ;
  wire \C_reg[31]_0 ;
  wire \C_reg[31]_1 ;
  wire \C_reg[31]_2 ;
  wire \C_reg[31]_3 ;
  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [2:0]\Using_FPGA.Native_1 ;
  wire \instr_EX_i_reg[22] ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;
  wire void_bit;

  LUT6 #(
    .INIT(64'hBFBFBF00BFBFBFFF)) 
    \C[19]_i_2 
       (.I0(\C_reg[31] ),
        .I1(\C_reg[31]_0 ),
        .I2(\Using_FPGA.Native_0 ),
        .I3(\C_reg[23]_3 ),
        .I4(\C_reg[23]_4 ),
        .I5(\C_reg[31]_2 ),
        .O(\instr_EX_i_reg[22] ));
  LUT6 #(
    .INIT(64'hC050CF50C05FCF5F)) 
    \C[23]_i_1 
       (.I0(\instr_EX_i_reg[22] ),
        .I1(void_bit),
        .I2(\C_reg[23]_0 ),
        .I3(\C_reg[23] ),
        .I4(\C_reg[23]_1 ),
        .I5(\C_reg[23]_2 ),
        .O(\Using_FPGA.Native_1 [2]));
  LUT6 #(
    .INIT(64'h40404040404000FF)) 
    \C[29]_i_1 
       (.I0(\C_reg[31] ),
        .I1(\C_reg[31]_0 ),
        .I2(\Using_FPGA.Native_0 ),
        .I3(\C_reg[29] ),
        .I4(\C_reg[23] ),
        .I5(\C_reg[23]_0 ),
        .O(\Using_FPGA.Native_1 [1]));
  LUT6 #(
    .INIT(64'h40FF400040404040)) 
    \C[31]_i_1 
       (.I0(\C_reg[31] ),
        .I1(\C_reg[31]_0 ),
        .I2(\Using_FPGA.Native_0 ),
        .I3(\C_reg[31]_1 ),
        .I4(\C_reg[31]_2 ),
        .I5(\C_reg[31]_3 ),
        .O(\Using_FPGA.Native_1 [0]));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module block_design_microblaze_0_0_MB_FDRE_953
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk,
    ex_mulhu_instr);
  output [1:0]\Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;
  input ex_mulhu_instr;

  wire Clk;
  wire [1:0]\Using_FPGA.Native_0 ;
  wire ex_mulhu_instr;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  LUT2 #(
    .INIT(4'h2)) 
    \Using_FPGA.DSP48E1_I1_i_1 
       (.I0(\Using_FPGA.Native_0 [0]),
        .I1(ex_mulhu_instr),
        .O(\Using_FPGA.Native_0 [1]));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 [0]),
        .R(sync_reset));
endmodule

module block_design_microblaze_0_0_MB_FDRSE
   (\Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    SR,
    Dbg_Clean_Stop_reg,
    S,
    \Use_Async_Reset.sync_reset_reg ,
    Sext,
    \Using_FPGA.Native_2 ,
    Clk,
    ex_Valid,
    Not_MB_Get_Op,
    ok_To_Stop,
    dbg_clean_stop,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    normal_stop_cmd_hold,
    normal_stop_cmd_i,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    saved_reset_mode_dbg_halt,
    \Using_FPGA.Native_7 ,
    saved_reset_mode_sleep,
    sync_reset,
    \Using_FPGA.Native_8 ,
    \Using_FPGA.Native_9 ,
    Q,
    sext8,
    \Using_FPGA.Native_10 ,
    \Using_FPGA.Native_11 ,
    Reset_Mode,
    \Using_FPGA.Native_12 ,
    Not_Barrel_Op);
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  output [0:0]SR;
  output Dbg_Clean_Stop_reg;
  output S;
  output \Use_Async_Reset.sync_reset_reg ;
  output Sext;
  output [0:0]\Using_FPGA.Native_2 ;
  input Clk;
  input ex_Valid;
  input Not_MB_Get_Op;
  input ok_To_Stop;
  input dbg_clean_stop;
  input \Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_4 ;
  input normal_stop_cmd_hold;
  input normal_stop_cmd_i;
  input \Using_FPGA.Native_5 ;
  input \Using_FPGA.Native_6 ;
  input saved_reset_mode_dbg_halt;
  input \Using_FPGA.Native_7 ;
  input saved_reset_mode_sleep;
  input sync_reset;
  input \Using_FPGA.Native_8 ;
  input \Using_FPGA.Native_9 ;
  input [0:0]Q;
  input sext8;
  input \Using_FPGA.Native_10 ;
  input \Using_FPGA.Native_11 ;
  input [0:1]Reset_Mode;
  input \Using_FPGA.Native_12 ;
  input Not_Barrel_Op;

  wire Clk;
  wire Dbg_Clean_Stop_reg;
  wire Not_Barrel_Op;
  wire Not_MB_Get_Op;
  wire [0:0]Q;
  wire [0:1]Reset_Mode;
  wire S;
  wire [0:0]SR;
  wire Sext;
  wire \Use_Async_Reset.sync_reset_reg ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_10 ;
  wire \Using_FPGA.Native_11 ;
  wire \Using_FPGA.Native_12 ;
  wire [0:0]\Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire \Using_FPGA.Native_8 ;
  wire \Using_FPGA.Native_9 ;
  wire \Using_FPGA.Native_i_1__171_n_0 ;
  wire \Using_FPGA.Native_i_2__53_n_0 ;
  wire dbg_clean_stop;
  wire ex_Valid;
  wire normal_stop_cmd_hold;
  wire normal_stop_cmd_i;
  wire ok_To_Stop;
  wire saved_reset_mode_dbg_halt;
  wire saved_reset_mode_sleep;
  wire sext8;
  wire sync_reset;

  (* SOFT_HLUTNM = "soft_lutpair76" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \C[0]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(Not_Barrel_Op),
        .O(\Using_FPGA.Native_2 ));
  (* SOFT_HLUTNM = "soft_lutpair75" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \LOCKSTEP_Master_Out[1]_INST_0_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(ex_Valid),
        .O(\Using_FPGA.Native_1 ));
  (* SOFT_HLUTNM = "soft_lutpair76" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \Read_AXI_Area.FSL_Get_Data[0]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(Not_MB_Get_Op),
        .O(SR));
  (* IS_CE_INVERTED = "1'b0" *) 
  (* IS_S_INVERTED = "1'b0" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_i_2__53_n_0 ),
        .Q(\Using_FPGA.Native_0 ),
        .R(\Using_FPGA.Native_i_1__171_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair75" *) 
  LUT3 #(
    .INIT(8'h40)) 
    \Using_FPGA.Native_i_1__163 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(sext8),
        .I2(\Using_FPGA.Native_10 ),
        .O(Sext));
  LUT5 #(
    .INIT(32'hFFFF82AA)) 
    \Using_FPGA.Native_i_1__171 
       (.I0(\Use_Async_Reset.sync_reset_reg ),
        .I1(Reset_Mode[1]),
        .I2(Reset_Mode[0]),
        .I3(sync_reset),
        .I4(\Using_FPGA.Native_12 ),
        .O(\Using_FPGA.Native_i_1__171_n_0 ));
  LUT4 #(
    .INIT(16'hFEAE)) 
    \Using_FPGA.Native_i_2__53 
       (.I0(S),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Dbg_Clean_Stop_reg),
        .I3(\Using_FPGA.Native_11 ),
        .O(\Using_FPGA.Native_i_2__53_n_0 ));
  LUT6 #(
    .INIT(64'hABABABAAABABABAB)) 
    \Using_FPGA.Native_i_3__11 
       (.I0(sync_reset),
        .I1(saved_reset_mode_sleep),
        .I2(\Using_FPGA.Native_6 ),
        .I3(\Using_FPGA.Native_8 ),
        .I4(\Using_FPGA.Native_9 ),
        .I5(Q),
        .O(\Use_Async_Reset.sync_reset_reg ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \Using_FPGA.Native_i_4__6 
       (.I0(ok_To_Stop),
        .I1(\Using_FPGA.Native_5 ),
        .I2(\Using_FPGA.Native_6 ),
        .I3(saved_reset_mode_dbg_halt),
        .I4(\Using_FPGA.Native_7 ),
        .I5(saved_reset_mode_sleep),
        .O(S));
  LUT6 #(
    .INIT(64'hAAA8AAA8AAA8AAAA)) 
    \Using_FPGA.Native_i_5__5 
       (.I0(ok_To_Stop),
        .I1(dbg_clean_stop),
        .I2(\Using_FPGA.Native_3 ),
        .I3(\Using_FPGA.Native_4 ),
        .I4(normal_stop_cmd_hold),
        .I5(normal_stop_cmd_i),
        .O(Dbg_Clean_Stop_reg));
endmodule

(* ORIG_REF_NAME = "MB_FDRSE" *) 
module block_design_microblaze_0_0_MB_FDRSE_16
   (\Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Clk,
    S,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    Dbg_Stop,
    dbg_stop_1,
    trig_out_0_synced,
    trig_out_0_synced_1,
    \Area_Debug_Control.dbg_stop_Detected_reg ,
    \Using_FPGA.Native_4 ,
    Reset_Mode,
    sync_reset,
    \Using_FPGA.Native_5 );
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  input Clk;
  input S;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input Dbg_Stop;
  input dbg_stop_1;
  input trig_out_0_synced;
  input trig_out_0_synced_1;
  input \Area_Debug_Control.dbg_stop_Detected_reg ;
  input \Using_FPGA.Native_4 ;
  input [0:1]Reset_Mode;
  input sync_reset;
  input \Using_FPGA.Native_5 ;

  wire \Area_Debug_Control.dbg_stop_Detected_reg ;
  wire Clk;
  wire Dbg_Stop;
  wire [0:1]Reset_Mode;
  wire S;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_i_1__170_n_0 ;
  wire \Using_FPGA.Native_i_2__52_n_0 ;
  wire dbg_stop_1;
  wire sync_reset;
  wire trig_out_0_synced;
  wire trig_out_0_synced_1;

  LUT6 #(
    .INIT(64'h5555555504045504)) 
    \Area_Debug_Control.dbg_stop_Detected_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(Dbg_Stop),
        .I2(dbg_stop_1),
        .I3(trig_out_0_synced),
        .I4(trig_out_0_synced_1),
        .I5(\Area_Debug_Control.dbg_stop_Detected_reg ),
        .O(\Using_FPGA.Native_1 ));
  (* IS_CE_INVERTED = "1'b0" *) 
  (* IS_S_INVERTED = "1'b0" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_i_2__52_n_0 ),
        .Q(\Using_FPGA.Native_0 ),
        .R(\Using_FPGA.Native_i_1__170_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF82AA)) 
    \Using_FPGA.Native_i_1__170 
       (.I0(\Using_FPGA.Native_4 ),
        .I1(Reset_Mode[1]),
        .I2(Reset_Mode[0]),
        .I3(sync_reset),
        .I4(\Using_FPGA.Native_5 ),
        .O(\Using_FPGA.Native_i_1__170_n_0 ));
  LUT4 #(
    .INIT(16'hFEAE)) 
    \Using_FPGA.Native_i_2__52 
       (.I0(S),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(\Using_FPGA.Native_3 ),
        .O(\Using_FPGA.Native_i_2__52_n_0 ));
endmodule

(* ORIG_REF_NAME = "MB_FDRSE" *) 
module block_design_microblaze_0_0_MB_FDRSE_17
   (\Using_FPGA.Native_0 ,
    \Use_Async_Reset.sync_reset_reg ,
    Reset_Mode_0_sp_1,
    E,
    \Area_Optimized.register_write_reg ,
    D,
    trace_exception_taken_i_reg,
    Clk,
    sync_reset,
    \Using_FPGA.Native_1 ,
    Reset_Mode,
    saved_reset_mode_sleep_1,
    \data_rd_reg_reg[31] ,
    \data_rd_reg_reg[0] ,
    \data_rd_reg_reg[0]_0 ,
    \data_rd_reg_reg[32] ,
    \data_rd_reg_reg[32]_0 ,
    Valid_Instr_i,
    exception_reg,
    PC_EX,
    S,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    exception_reg_0,
    exception_reg_1);
  output \Using_FPGA.Native_0 ;
  output \Use_Async_Reset.sync_reset_reg ;
  output Reset_Mode_0_sp_1;
  output [0:0]E;
  output \Area_Optimized.register_write_reg ;
  output [27:0]D;
  output trace_exception_taken_i_reg;
  input Clk;
  input sync_reset;
  input \Using_FPGA.Native_1 ;
  input [0:1]Reset_Mode;
  input saved_reset_mode_sleep_1;
  input \data_rd_reg_reg[31] ;
  input \data_rd_reg_reg[0] ;
  input \data_rd_reg_reg[0]_0 ;
  input \data_rd_reg_reg[32] ;
  input \data_rd_reg_reg[32]_0 ;
  input Valid_Instr_i;
  input [29:0]exception_reg;
  input [27:0]PC_EX;
  input S;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_4 ;
  input exception_reg_0;
  input [0:0]exception_reg_1;

  wire \Area_Optimized.register_write_reg ;
  wire Clk;
  wire [27:0]D;
  wire [0:0]E;
  wire [27:0]PC_EX;
  wire [0:1]Reset_Mode;
  wire Reset_Mode_0_sn_1;
  wire S;
  wire \Use_Async_Reset.sync_reset_reg ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_i_1__135_n_0 ;
  wire \Using_FPGA.Native_i_2__51_n_0 ;
  wire Valid_Instr_i;
  wire \data_rd_reg_reg[0] ;
  wire \data_rd_reg_reg[0]_0 ;
  wire \data_rd_reg_reg[31] ;
  wire \data_rd_reg_reg[32] ;
  wire \data_rd_reg_reg[32]_0 ;
  wire [29:0]exception_reg;
  wire exception_reg_0;
  wire [0:0]exception_reg_1;
  wire saved_reset_mode_sleep_1;
  wire sync_reset;
  wire trace_exception_taken_i_reg;

  assign Reset_Mode_0_sp_1 = Reset_Mode_0_sn_1;
  LUT5 #(
    .INIT(32'h20202F20)) 
    \Area_Debug_Control.mb_halted_i_i_1 
       (.I0(Reset_Mode[0]),
        .I1(Reset_Mode[1]),
        .I2(sync_reset),
        .I3(\Using_FPGA.Native_0 ),
        .I4(saved_reset_mode_sleep_1),
        .O(Reset_Mode_0_sn_1));
  (* IS_CE_INVERTED = "1'b0" *) 
  (* IS_S_INVERTED = "1'b0" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_i_2__51_n_0 ),
        .Q(\Using_FPGA.Native_0 ),
        .R(\Using_FPGA.Native_i_1__135_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \Using_FPGA.Native_i_1__133 
       (.I0(sync_reset),
        .I1(\Using_FPGA.Native_0 ),
        .O(\Use_Async_Reset.sync_reset_reg ));
  LUT4 #(
    .INIT(16'h82AA)) 
    \Using_FPGA.Native_i_1__135 
       (.I0(\Using_FPGA.Native_1 ),
        .I1(Reset_Mode[1]),
        .I2(Reset_Mode[0]),
        .I3(sync_reset),
        .O(\Using_FPGA.Native_i_1__135_n_0 ));
  LUT5 #(
    .INIT(32'hFEFEFEAE)) 
    \Using_FPGA.Native_i_2__51 
       (.I0(S),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(\Using_FPGA.Native_3 ),
        .I4(\Using_FPGA.Native_4 ),
        .O(\Using_FPGA.Native_i_2__51_n_0 ));
  LUT4 #(
    .INIT(16'hFEEE)) 
    \data_rd_reg[0]_i_1 
       (.I0(\data_rd_reg_reg[31] ),
        .I1(\data_rd_reg_reg[0] ),
        .I2(\data_rd_reg_reg[0]_0 ),
        .I3(\Using_FPGA.Native_0 ),
        .O(E));
  LUT5 #(
    .INIT(32'h8080BF80)) 
    \data_rd_reg[0]_i_2 
       (.I0(exception_reg[28]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\data_rd_reg_reg[0]_0 ),
        .I3(PC_EX[27]),
        .I4(\data_rd_reg_reg[0] ),
        .O(D[27]));
  LUT5 #(
    .INIT(32'h8080BF80)) 
    \data_rd_reg[10]_i_1 
       (.I0(exception_reg[18]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\data_rd_reg_reg[0]_0 ),
        .I3(PC_EX[17]),
        .I4(\data_rd_reg_reg[0] ),
        .O(D[17]));
  LUT5 #(
    .INIT(32'h8080BF80)) 
    \data_rd_reg[11]_i_1 
       (.I0(exception_reg[17]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\data_rd_reg_reg[0]_0 ),
        .I3(PC_EX[16]),
        .I4(\data_rd_reg_reg[0] ),
        .O(D[16]));
  LUT5 #(
    .INIT(32'h8080BF80)) 
    \data_rd_reg[12]_i_1 
       (.I0(exception_reg[16]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\data_rd_reg_reg[0]_0 ),
        .I3(PC_EX[15]),
        .I4(\data_rd_reg_reg[0] ),
        .O(D[15]));
  LUT5 #(
    .INIT(32'h8080BF80)) 
    \data_rd_reg[13]_i_1 
       (.I0(exception_reg[15]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\data_rd_reg_reg[0]_0 ),
        .I3(PC_EX[14]),
        .I4(\data_rd_reg_reg[0] ),
        .O(D[14]));
  LUT5 #(
    .INIT(32'h8080BF80)) 
    \data_rd_reg[14]_i_1 
       (.I0(exception_reg[14]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\data_rd_reg_reg[0]_0 ),
        .I3(PC_EX[13]),
        .I4(\data_rd_reg_reg[0] ),
        .O(D[13]));
  LUT5 #(
    .INIT(32'h8080BF80)) 
    \data_rd_reg[15]_i_1 
       (.I0(exception_reg[13]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\data_rd_reg_reg[0]_0 ),
        .I3(PC_EX[12]),
        .I4(\data_rd_reg_reg[0] ),
        .O(D[12]));
  LUT5 #(
    .INIT(32'h8080BF80)) 
    \data_rd_reg[16]_i_1 
       (.I0(exception_reg[12]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\data_rd_reg_reg[0]_0 ),
        .I3(PC_EX[11]),
        .I4(\data_rd_reg_reg[0] ),
        .O(D[11]));
  LUT5 #(
    .INIT(32'h8080BF80)) 
    \data_rd_reg[17]_i_1 
       (.I0(exception_reg[11]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\data_rd_reg_reg[0]_0 ),
        .I3(PC_EX[10]),
        .I4(\data_rd_reg_reg[0] ),
        .O(D[10]));
  LUT5 #(
    .INIT(32'h8080BF80)) 
    \data_rd_reg[18]_i_1 
       (.I0(exception_reg[10]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\data_rd_reg_reg[0]_0 ),
        .I3(PC_EX[9]),
        .I4(\data_rd_reg_reg[0] ),
        .O(D[9]));
  LUT5 #(
    .INIT(32'h8080BF80)) 
    \data_rd_reg[19]_i_1 
       (.I0(exception_reg[9]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\data_rd_reg_reg[0]_0 ),
        .I3(PC_EX[8]),
        .I4(\data_rd_reg_reg[0] ),
        .O(D[8]));
  LUT5 #(
    .INIT(32'h8080BF80)) 
    \data_rd_reg[1]_i_1 
       (.I0(exception_reg[27]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\data_rd_reg_reg[0]_0 ),
        .I3(PC_EX[26]),
        .I4(\data_rd_reg_reg[0] ),
        .O(D[26]));
  LUT5 #(
    .INIT(32'h8080BF80)) 
    \data_rd_reg[20]_i_1 
       (.I0(exception_reg[8]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\data_rd_reg_reg[0]_0 ),
        .I3(PC_EX[7]),
        .I4(\data_rd_reg_reg[0] ),
        .O(D[7]));
  LUT5 #(
    .INIT(32'h8080BF80)) 
    \data_rd_reg[21]_i_1 
       (.I0(exception_reg[7]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\data_rd_reg_reg[0]_0 ),
        .I3(PC_EX[6]),
        .I4(\data_rd_reg_reg[0] ),
        .O(D[6]));
  LUT5 #(
    .INIT(32'h8080BF80)) 
    \data_rd_reg[22]_i_1 
       (.I0(exception_reg[6]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\data_rd_reg_reg[0]_0 ),
        .I3(PC_EX[5]),
        .I4(\data_rd_reg_reg[0] ),
        .O(D[5]));
  LUT5 #(
    .INIT(32'h8080BF80)) 
    \data_rd_reg[23]_i_1 
       (.I0(exception_reg[5]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\data_rd_reg_reg[0]_0 ),
        .I3(PC_EX[4]),
        .I4(\data_rd_reg_reg[0] ),
        .O(D[4]));
  LUT5 #(
    .INIT(32'h8080BF80)) 
    \data_rd_reg[24]_i_1 
       (.I0(exception_reg[4]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\data_rd_reg_reg[0]_0 ),
        .I3(PC_EX[3]),
        .I4(\data_rd_reg_reg[0] ),
        .O(D[3]));
  LUT5 #(
    .INIT(32'h8080BF80)) 
    \data_rd_reg[25]_i_1 
       (.I0(exception_reg[3]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\data_rd_reg_reg[0]_0 ),
        .I3(PC_EX[2]),
        .I4(\data_rd_reg_reg[0] ),
        .O(D[2]));
  LUT5 #(
    .INIT(32'h8080BF80)) 
    \data_rd_reg[26]_i_1 
       (.I0(exception_reg[2]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\data_rd_reg_reg[0]_0 ),
        .I3(PC_EX[1]),
        .I4(\data_rd_reg_reg[0] ),
        .O(D[1]));
  LUT5 #(
    .INIT(32'h8080BF80)) 
    \data_rd_reg[2]_i_1 
       (.I0(exception_reg[26]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\data_rd_reg_reg[0]_0 ),
        .I3(PC_EX[25]),
        .I4(\data_rd_reg_reg[0] ),
        .O(D[25]));
  LUT5 #(
    .INIT(32'h8080BF80)) 
    \data_rd_reg[31]_i_1 
       (.I0(exception_reg[1]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\data_rd_reg_reg[0]_0 ),
        .I3(PC_EX[0]),
        .I4(\data_rd_reg_reg[0] ),
        .O(D[0]));
  LUT6 #(
    .INIT(64'hBFBFBFBFBFBFBF88)) 
    \data_rd_reg[32]_i_2 
       (.I0(\data_rd_reg_reg[0]_0 ),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\data_rd_reg_reg[32] ),
        .I3(\data_rd_reg_reg[32]_0 ),
        .I4(\data_rd_reg_reg[0] ),
        .I5(Valid_Instr_i),
        .O(\Area_Optimized.register_write_reg ));
  LUT5 #(
    .INIT(32'h8080BF80)) 
    \data_rd_reg[3]_i_1 
       (.I0(exception_reg[25]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\data_rd_reg_reg[0]_0 ),
        .I3(PC_EX[24]),
        .I4(\data_rd_reg_reg[0] ),
        .O(D[24]));
  LUT5 #(
    .INIT(32'h8080BF80)) 
    \data_rd_reg[4]_i_1 
       (.I0(exception_reg[24]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\data_rd_reg_reg[0]_0 ),
        .I3(PC_EX[23]),
        .I4(\data_rd_reg_reg[0] ),
        .O(D[23]));
  LUT5 #(
    .INIT(32'h8080BF80)) 
    \data_rd_reg[5]_i_1 
       (.I0(exception_reg[23]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\data_rd_reg_reg[0]_0 ),
        .I3(PC_EX[22]),
        .I4(\data_rd_reg_reg[0] ),
        .O(D[22]));
  LUT5 #(
    .INIT(32'h8080BF80)) 
    \data_rd_reg[6]_i_1 
       (.I0(exception_reg[22]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\data_rd_reg_reg[0]_0 ),
        .I3(PC_EX[21]),
        .I4(\data_rd_reg_reg[0] ),
        .O(D[21]));
  LUT5 #(
    .INIT(32'h8080BF80)) 
    \data_rd_reg[7]_i_1 
       (.I0(exception_reg[21]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\data_rd_reg_reg[0]_0 ),
        .I3(PC_EX[20]),
        .I4(\data_rd_reg_reg[0] ),
        .O(D[20]));
  LUT5 #(
    .INIT(32'h8080BF80)) 
    \data_rd_reg[8]_i_1 
       (.I0(exception_reg[20]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\data_rd_reg_reg[0]_0 ),
        .I3(PC_EX[19]),
        .I4(\data_rd_reg_reg[0] ),
        .O(D[19]));
  LUT5 #(
    .INIT(32'h8080BF80)) 
    \data_rd_reg[9]_i_1 
       (.I0(exception_reg[19]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\data_rd_reg_reg[0]_0 ),
        .I3(PC_EX[18]),
        .I4(\data_rd_reg_reg[0] ),
        .O(D[18]));
  LUT5 #(
    .INIT(32'h8F008000)) 
    exception_i_1
       (.I0(exception_reg[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(exception_reg[29]),
        .I3(exception_reg_0),
        .I4(exception_reg_1),
        .O(trace_exception_taken_i_reg));
endmodule

(* ORIG_REF_NAME = "MB_FDRSE" *) 
module block_design_microblaze_0_0_MB_FDRSE_94
   (force_Val2_N,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Clk);
  output force_Val2_N;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire force_Val2_N;

  (* IS_CE_INVERTED = "1'b0" *) 
  (* IS_S_INVERTED = "1'b0" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_1 ),
        .Q(force_Val2_N),
        .R(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_FDRSE" *) 
module block_design_microblaze_0_0_MB_FDRSE_958
   (\Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    Clk,
    \Using_dynamic_instr_Address.old_IE_value_reg );
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input Clk;
  input \Using_dynamic_instr_Address.old_IE_value_reg ;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_dynamic_instr_Address.old_IE_value_reg ;

  (* IS_CE_INVERTED = "1'b0" *) 
  (* IS_S_INVERTED = "1'b0" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_3 ),
        .Q(\Using_FPGA.Native_0 ),
        .R(\Using_FPGA.Native_2 ));
  LUT2 #(
    .INIT(4'h2)) 
    \Using_dynamic_instr_Address.old_IE_value_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_dynamic_instr_Address.old_IE_value_reg ),
        .O(\Using_FPGA.Native_1 ));
endmodule

(* ORIG_REF_NAME = "MB_FDRSE" *) 
module block_design_microblaze_0_0_MB_FDRSE_959
   (\Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Clk);
  output \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;

  (* IS_CE_INVERTED = "1'b0" *) 
  (* IS_S_INVERTED = "1'b0" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_2 ),
        .Q(\Using_FPGA.Native_0 ),
        .R(\Using_FPGA.Native_1 ));
endmodule

(* ORIG_REF_NAME = "MB_FDRSE" *) 
module block_design_microblaze_0_0_MB_FDRSE_960
   (msr_I,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Clk);
  output [0:0]msr_I;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [0:0]msr_I;

  (* IS_CE_INVERTED = "1'b0" *) 
  (* IS_S_INVERTED = "1'b0" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_1 ),
        .Q(msr_I),
        .R(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_FDRSE" *) 
module block_design_microblaze_0_0_MB_FDRSE_961
   (msr_I,
    MSR_Rst,
    \Using_FPGA.Native_0 ,
    Clk);
  output [0:0]msr_I;
  input MSR_Rst;
  input \Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire MSR_Rst;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]msr_I;

  (* IS_CE_INVERTED = "1'b0" *) 
  (* IS_S_INVERTED = "1'b0" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_0 ),
        .Q(msr_I),
        .R(MSR_Rst));
endmodule

module block_design_microblaze_0_0_MB_FDS
   (\Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    S_0,
    buffer_Addr_S_I_2,
    Clk,
    \Using_FPGA.Native_2 );
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  input S_0;
  input buffer_Addr_S_I_2;
  input Clk;
  input \Using_FPGA.Native_2 ;

  wire Clk;
  wire S_0;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire buffer_Addr_S_I_2;

  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(buffer_Addr_S_I_2),
        .Q(\Using_FPGA.Native_0 ),
        .S(S_0));
  LUT2 #(
    .INIT(4'h6)) 
    \Using_FPGA.Native_I2_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_2 ),
        .O(\Using_FPGA.Native_1 ));
endmodule

module block_design_microblaze_0_0_MB_FDSE
   (reg_Test_Equal,
    R22_out,
    \Using_FPGA.Native_0 ,
    Reg_Test_Equal_i,
    Clk);
  output reg_Test_Equal;
  input R22_out;
  input \Using_FPGA.Native_0 ;
  input Reg_Test_Equal_i;
  input Clk;

  wire Clk;
  wire R22_out;
  wire Reg_Test_Equal_i;
  wire \Using_FPGA.Native_0 ;
  wire reg_Test_Equal;

  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(Reg_Test_Equal_i),
        .Q(reg_Test_Equal),
        .S(R22_out));
endmodule

(* ORIG_REF_NAME = "MB_FDSE" *) 
module block_design_microblaze_0_0_MB_FDSE_616
   (pc_I,
    sync_reset,
    PC_Write,
    \Using_FPGA.Native_0 ,
    Clk);
  output pc_I;
  input sync_reset;
  input PC_Write;
  input [0:0]\Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire pc_I;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(\Using_FPGA.Native_0 ),
        .Q(pc_I),
        .S(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDSE" *) 
module block_design_microblaze_0_0_MB_FDSE_622
   (pc_I,
    sync_reset,
    PC_Write,
    \Using_FPGA.Native_0 ,
    Clk);
  output pc_I;
  input sync_reset;
  input PC_Write;
  input [0:0]\Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire pc_I;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(\Using_FPGA.Native_0 ),
        .Q(pc_I),
        .S(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDSE" *) 
module block_design_microblaze_0_0_MB_FDSE_628
   (pc_I,
    sync_reset,
    PC_Write,
    \Using_FPGA.Native_0 ,
    Clk);
  output pc_I;
  input sync_reset;
  input PC_Write;
  input [0:0]\Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire pc_I;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(\Using_FPGA.Native_0 ),
        .Q(pc_I),
        .S(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDSE" *) 
module block_design_microblaze_0_0_MB_FDSE_634
   (pc_I,
    sync_reset,
    PC_Write,
    \Using_FPGA.Native_0 ,
    Clk);
  output pc_I;
  input sync_reset;
  input PC_Write;
  input [0:0]\Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire pc_I;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(\Using_FPGA.Native_0 ),
        .Q(pc_I),
        .S(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDSE" *) 
module block_design_microblaze_0_0_MB_FDSE_640
   (pc_I,
    sync_reset,
    PC_Write,
    \Using_FPGA.Native_0 ,
    Clk);
  output pc_I;
  input sync_reset;
  input PC_Write;
  input [0:0]\Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire pc_I;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(\Using_FPGA.Native_0 ),
        .Q(pc_I),
        .S(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDSE" *) 
module block_design_microblaze_0_0_MB_FDSE_646
   (pc_I,
    sync_reset,
    PC_Write,
    \Using_FPGA.Native_0 ,
    Clk);
  output pc_I;
  input sync_reset;
  input PC_Write;
  input [0:0]\Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire pc_I;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(\Using_FPGA.Native_0 ),
        .Q(pc_I),
        .S(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDSE" *) 
module block_design_microblaze_0_0_MB_FDSE_652
   (pc_I,
    sync_reset,
    PC_Write,
    \Using_FPGA.Native_0 ,
    Clk);
  output pc_I;
  input sync_reset;
  input PC_Write;
  input [0:0]\Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire pc_I;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(\Using_FPGA.Native_0 ),
        .Q(pc_I),
        .S(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDSE" *) 
module block_design_microblaze_0_0_MB_FDSE_670
   (pc_I,
    sync_reset,
    PC_Write,
    \Using_FPGA.Native_0 ,
    Clk);
  output pc_I;
  input sync_reset;
  input PC_Write;
  input [0:0]\Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire pc_I;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(\Using_FPGA.Native_0 ),
        .Q(pc_I),
        .S(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDSE" *) 
module block_design_microblaze_0_0_MB_FDSE_676
   (pc_I,
    sync_reset,
    PC_Write,
    \Using_FPGA.Native_0 ,
    Clk);
  output pc_I;
  input sync_reset;
  input PC_Write;
  input [0:0]\Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire pc_I;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(\Using_FPGA.Native_0 ),
        .Q(pc_I),
        .S(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDSE" *) 
module block_design_microblaze_0_0_MB_FDSE_682
   (pc_I,
    sync_reset,
    PC_Write,
    \Using_FPGA.Native_0 ,
    Clk);
  output pc_I;
  input sync_reset;
  input PC_Write;
  input [0:0]\Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire pc_I;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(\Using_FPGA.Native_0 ),
        .Q(pc_I),
        .S(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDSE" *) 
module block_design_microblaze_0_0_MB_FDSE_688
   (pc_I,
    sync_reset,
    PC_Write,
    \Using_FPGA.Native_0 ,
    Clk);
  output pc_I;
  input sync_reset;
  input PC_Write;
  input [0:0]\Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire pc_I;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(\Using_FPGA.Native_0 ),
        .Q(pc_I),
        .S(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDSE" *) 
module block_design_microblaze_0_0_MB_FDSE_694
   (pc_I,
    sync_reset,
    PC_Write,
    \Using_FPGA.Native_0 ,
    Clk);
  output pc_I;
  input sync_reset;
  input PC_Write;
  input [0:0]\Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire pc_I;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(\Using_FPGA.Native_0 ),
        .Q(pc_I),
        .S(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDSE" *) 
module block_design_microblaze_0_0_MB_FDSE_700
   (pc_I,
    sync_reset,
    PC_Write,
    \Using_FPGA.Native_0 ,
    Clk);
  output pc_I;
  input sync_reset;
  input PC_Write;
  input [0:0]\Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire pc_I;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(\Using_FPGA.Native_0 ),
        .Q(pc_I),
        .S(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDSE" *) 
module block_design_microblaze_0_0_MB_FDSE_706
   (pc_I,
    sync_reset,
    PC_Write,
    \Using_FPGA.Native_0 ,
    Clk);
  output pc_I;
  input sync_reset;
  input PC_Write;
  input [0:0]\Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire pc_I;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(\Using_FPGA.Native_0 ),
        .Q(pc_I),
        .S(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDSE" *) 
module block_design_microblaze_0_0_MB_FDSE_712
   (pc_I,
    sync_reset,
    PC_Write,
    \Using_FPGA.Native_0 ,
    Clk);
  output pc_I;
  input sync_reset;
  input PC_Write;
  input [0:0]\Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire pc_I;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(\Using_FPGA.Native_0 ),
        .Q(pc_I),
        .S(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDSE" *) 
module block_design_microblaze_0_0_MB_FDSE_718
   (pc_I,
    sync_reset,
    PC_Write,
    \Using_FPGA.Native_0 ,
    Clk);
  output pc_I;
  input sync_reset;
  input PC_Write;
  input [0:0]\Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire pc_I;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(\Using_FPGA.Native_0 ),
        .Q(pc_I),
        .S(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDSE" *) 
module block_design_microblaze_0_0_MB_FDSE_724
   (pc_I,
    sync_reset,
    PC_Write,
    \Using_FPGA.Native_0 ,
    Clk);
  output pc_I;
  input sync_reset;
  input PC_Write;
  input [0:0]\Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire pc_I;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(\Using_FPGA.Native_0 ),
        .Q(pc_I),
        .S(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDSE" *) 
module block_design_microblaze_0_0_MB_FDSE_730
   (pc_I,
    sync_reset,
    PC_Write,
    \Using_FPGA.Native_0 ,
    Clk);
  output pc_I;
  input sync_reset;
  input PC_Write;
  input [0:0]\Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire pc_I;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(\Using_FPGA.Native_0 ),
        .Q(pc_I),
        .S(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDSE" *) 
module block_design_microblaze_0_0_MB_FDSE_736
   (pc_I,
    sync_reset,
    PC_Write,
    \Using_FPGA.Native_0 ,
    Clk);
  output pc_I;
  input sync_reset;
  input PC_Write;
  input [0:0]\Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire pc_I;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(\Using_FPGA.Native_0 ),
        .Q(pc_I),
        .S(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDSE" *) 
module block_design_microblaze_0_0_MB_FDSE_742
   (pc_I,
    sync_reset,
    PC_Write,
    \Using_FPGA.Native_0 ,
    Clk);
  output pc_I;
  input sync_reset;
  input PC_Write;
  input [0:0]\Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire pc_I;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(\Using_FPGA.Native_0 ),
        .Q(pc_I),
        .S(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDSE" *) 
module block_design_microblaze_0_0_MB_FDSE_748
   (pc_I,
    sync_reset,
    PC_Write,
    \Using_FPGA.Native_0 ,
    Clk);
  output pc_I;
  input sync_reset;
  input PC_Write;
  input [0:0]\Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire pc_I;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(\Using_FPGA.Native_0 ),
        .Q(pc_I),
        .S(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDSE" *) 
module block_design_microblaze_0_0_MB_FDSE_754
   (pc_I,
    sync_reset,
    PC_Write,
    \Using_FPGA.Native_0 ,
    Clk);
  output pc_I;
  input sync_reset;
  input PC_Write;
  input [0:0]\Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire pc_I;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(\Using_FPGA.Native_0 ),
        .Q(pc_I),
        .S(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDSE" *) 
module block_design_microblaze_0_0_MB_FDSE_760
   (pc_I,
    sync_reset,
    PC_Write,
    \Using_FPGA.Native_0 ,
    Clk);
  output pc_I;
  input sync_reset;
  input PC_Write;
  input [0:0]\Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire pc_I;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(\Using_FPGA.Native_0 ),
        .Q(pc_I),
        .S(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDSE" *) 
module block_design_microblaze_0_0_MB_FDSE_766
   (pc_I,
    sync_reset,
    PC_Write,
    \Using_FPGA.Native_0 ,
    Clk);
  output pc_I;
  input sync_reset;
  input PC_Write;
  input [0:0]\Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire pc_I;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(\Using_FPGA.Native_0 ),
        .Q(pc_I),
        .S(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDSE" *) 
module block_design_microblaze_0_0_MB_FDSE_772
   (pc_I,
    sync_reset,
    PC_Write,
    \Using_FPGA.Native_0 ,
    Clk);
  output pc_I;
  input sync_reset;
  input PC_Write;
  input [0:0]\Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire pc_I;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(\Using_FPGA.Native_0 ),
        .Q(pc_I),
        .S(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDSE" *) 
module block_design_microblaze_0_0_MB_FDSE_778
   (pc_I,
    sync_reset,
    PC_Write,
    \Using_FPGA.Native_0 ,
    Clk);
  output pc_I;
  input sync_reset;
  input PC_Write;
  input [0:0]\Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire pc_I;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(\Using_FPGA.Native_0 ),
        .Q(pc_I),
        .S(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDSE" *) 
module block_design_microblaze_0_0_MB_FDSE_784
   (pc_I,
    sync_reset,
    PC_Write,
    \Using_FPGA.Native_0 ,
    Clk);
  output pc_I;
  input sync_reset;
  input PC_Write;
  input [0:0]\Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire pc_I;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(\Using_FPGA.Native_0 ),
        .Q(pc_I),
        .S(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDSE" *) 
module block_design_microblaze_0_0_MB_FDSE_790
   (pc_I,
    sync_reset,
    PC_Write,
    \Using_FPGA.Native_0 ,
    Clk);
  output pc_I;
  input sync_reset;
  input PC_Write;
  input [0:0]\Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire pc_I;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(\Using_FPGA.Native_0 ),
        .Q(pc_I),
        .S(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDSE" *) 
module block_design_microblaze_0_0_MB_FDSE_796
   (pc_I,
    sync_reset,
    PC_Write,
    \Using_FPGA.Native_0 ,
    Clk);
  output pc_I;
  input sync_reset;
  input PC_Write;
  input [0:0]\Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire pc_I;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(\Using_FPGA.Native_0 ),
        .Q(pc_I),
        .S(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDSE" *) 
module block_design_microblaze_0_0_MB_FDSE_802
   (pc_I,
    sync_reset,
    PC_Write,
    \Using_FPGA.Native_0 ,
    Clk);
  output pc_I;
  input sync_reset;
  input PC_Write;
  input [0:0]\Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire pc_I;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(\Using_FPGA.Native_0 ),
        .Q(pc_I),
        .S(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDS" *) 
module block_design_microblaze_0_0_MB_FDS_120
   (\Using_FPGA.Native_0 ,
    S,
    S_0,
    O,
    Clk,
    \Using_FPGA.Native_1 );
  output \Using_FPGA.Native_0 ;
  output S;
  input S_0;
  input O;
  input Clk;
  input \Using_FPGA.Native_1 ;

  wire Clk;
  wire O;
  wire S;
  wire S_0;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(O),
        .Q(\Using_FPGA.Native_0 ),
        .S(S_0));
  LUT2 #(
    .INIT(4'h6)) 
    \Using_FPGA.Native_I1_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_FDS" *) 
module block_design_microblaze_0_0_MB_FDS_122
   (\Using_FPGA.Native_0 ,
    S_0,
    O,
    Clk);
  output \Using_FPGA.Native_0 ;
  input S_0;
  input O;
  input Clk;

  wire Clk;
  wire O;
  wire S_0;
  wire \Using_FPGA.Native_0 ;

  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(O),
        .Q(\Using_FPGA.Native_0 ),
        .S(S_0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module block_design_microblaze_0_0_MB_FD_398
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module block_design_microblaze_0_0_MB_FD_401
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module block_design_microblaze_0_0_MB_FD_404
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module block_design_microblaze_0_0_MB_FD_407
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module block_design_microblaze_0_0_MB_FD_410
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module block_design_microblaze_0_0_MB_FD_413
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module block_design_microblaze_0_0_MB_FD_416
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output \Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module block_design_microblaze_0_0_MB_FD_419
   (New_Reg_Value,
    D,
    ex_Result,
    Clk,
    \data_rd_reg_reg[30] ,
    register_write,
    Enable_Interrupt,
    \data_rd_reg_reg[30]_0 ,
    PC_EX);
  output New_Reg_Value;
  output [0:0]D;
  input [0:0]ex_Result;
  input Clk;
  input \data_rd_reg_reg[30] ;
  input register_write;
  input Enable_Interrupt;
  input \data_rd_reg_reg[30]_0 ;
  input [0:0]PC_EX;

  wire Clk;
  wire [0:0]D;
  wire Enable_Interrupt;
  wire New_Reg_Value;
  wire [0:0]PC_EX;
  wire \data_rd_reg_reg[30] ;
  wire \data_rd_reg_reg[30]_0 ;
  wire [0:0]ex_Result;
  wire register_write;

  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(New_Reg_Value),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hBF80BFBFBF808080)) 
    \data_rd_reg[30]_i_1 
       (.I0(New_Reg_Value),
        .I1(\data_rd_reg_reg[30] ),
        .I2(register_write),
        .I3(Enable_Interrupt),
        .I4(\data_rd_reg_reg[30]_0 ),
        .I5(PC_EX),
        .O(D));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module block_design_microblaze_0_0_MB_FD_422
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module block_design_microblaze_0_0_MB_FD_425
   (\Using_FPGA.Native_0 ,
    D,
    ex_Result,
    Clk,
    \data_rd_reg_reg[29] ,
    register_write,
    carry,
    \data_rd_reg_reg[29]_0 ,
    PC_EX);
  output \Using_FPGA.Native_0 ;
  output [0:0]D;
  input [0:0]ex_Result;
  input Clk;
  input \data_rd_reg_reg[29] ;
  input register_write;
  input carry;
  input \data_rd_reg_reg[29]_0 ;
  input [0:0]PC_EX;

  wire Clk;
  wire [0:0]D;
  wire [0:0]PC_EX;
  wire \Using_FPGA.Native_0 ;
  wire carry;
  wire \data_rd_reg_reg[29] ;
  wire \data_rd_reg_reg[29]_0 ;
  wire [0:0]ex_Result;
  wire register_write;

  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hBF80BFBFBF808080)) 
    \data_rd_reg[29]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\data_rd_reg_reg[29] ),
        .I2(register_write),
        .I3(carry),
        .I4(\data_rd_reg_reg[29]_0 ),
        .I5(PC_EX),
        .O(D));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module block_design_microblaze_0_0_MB_FD_428
   (\Using_FPGA.Native_0 ,
    D,
    ex_Result,
    Clk,
    \data_rd_reg_reg[28] ,
    register_write,
    msr_I,
    \data_rd_reg_reg[28]_0 ,
    PC_EX);
  output \Using_FPGA.Native_0 ;
  output [0:0]D;
  input [0:0]ex_Result;
  input Clk;
  input \data_rd_reg_reg[28] ;
  input register_write;
  input [0:0]msr_I;
  input \data_rd_reg_reg[28]_0 ;
  input [0:0]PC_EX;

  wire Clk;
  wire [0:0]D;
  wire [0:0]PC_EX;
  wire \Using_FPGA.Native_0 ;
  wire \data_rd_reg_reg[28] ;
  wire \data_rd_reg_reg[28]_0 ;
  wire [0:0]ex_Result;
  wire [0:0]msr_I;
  wire register_write;

  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hBF80BFBFBF808080)) 
    \data_rd_reg[28]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\data_rd_reg_reg[28] ),
        .I2(register_write),
        .I3(msr_I),
        .I4(\data_rd_reg_reg[28]_0 ),
        .I5(PC_EX),
        .O(D));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module block_design_microblaze_0_0_MB_FD_431
   (\Using_FPGA.Native_0 ,
    D,
    ex_Result,
    Clk,
    \data_rd_reg_reg[27] ,
    register_write,
    msr_I,
    \data_rd_reg_reg[27]_0 ,
    PC_EX);
  output \Using_FPGA.Native_0 ;
  output [0:0]D;
  input [0:0]ex_Result;
  input Clk;
  input \data_rd_reg_reg[27] ;
  input register_write;
  input [0:0]msr_I;
  input \data_rd_reg_reg[27]_0 ;
  input [0:0]PC_EX;

  wire Clk;
  wire [0:0]D;
  wire [0:0]PC_EX;
  wire \Using_FPGA.Native_0 ;
  wire \data_rd_reg_reg[27] ;
  wire \data_rd_reg_reg[27]_0 ;
  wire [0:0]ex_Result;
  wire [0:0]msr_I;
  wire register_write;

  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hBF80BFBFBF808080)) 
    \data_rd_reg[27]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\data_rd_reg_reg[27] ),
        .I2(register_write),
        .I3(msr_I),
        .I4(\data_rd_reg_reg[27]_0 ),
        .I5(PC_EX),
        .O(D));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module block_design_microblaze_0_0_MB_FD_434
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output \Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module block_design_microblaze_0_0_MB_FD_437
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output \Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module block_design_microblaze_0_0_MB_FD_440
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output \Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module block_design_microblaze_0_0_MB_FD_443
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output \Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module block_design_microblaze_0_0_MB_FD_446
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output \Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module block_design_microblaze_0_0_MB_FD_449
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output \Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module block_design_microblaze_0_0_MB_FD_452
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output \Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module block_design_microblaze_0_0_MB_FD_455
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module block_design_microblaze_0_0_MB_FD_458
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output \Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module block_design_microblaze_0_0_MB_FD_461
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output \Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module block_design_microblaze_0_0_MB_FD_464
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module block_design_microblaze_0_0_MB_FD_467
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module block_design_microblaze_0_0_MB_FD_470
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module block_design_microblaze_0_0_MB_FD_473
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module block_design_microblaze_0_0_MB_FD_476
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module block_design_microblaze_0_0_MB_FD_479
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module block_design_microblaze_0_0_MB_FD_482
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module block_design_microblaze_0_0_MB_FD_485
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module block_design_microblaze_0_0_MB_FD_488
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

module block_design_microblaze_0_0_MB_LUT2
   (shift_Logic_Result,
    I0,
    res_00_2);
  output [0:0]shift_Logic_Result;
  input I0;
  input res_00_2;

  wire I0;
  wire res_00_2;
  wire [0:0]shift_Logic_Result;

  (* box_type = "PRIMITIVE" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.Native 
       (.I0(I0),
        .I1(res_00_2),
        .O(shift_Logic_Result));
endmodule

(* ORIG_REF_NAME = "MB_LUT2" *) 
module block_design_microblaze_0_0_MB_LUT2_251
   (shift_Logic_Result,
    \Using_FPGA.Native_0 ,
    res_00_1);
  output [0:0]shift_Logic_Result;
  input \Using_FPGA.Native_0 ;
  input res_00_1;

  wire \Using_FPGA.Native_0 ;
  wire res_00_1;
  wire [0:0]shift_Logic_Result;

  (* box_type = "PRIMITIVE" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(res_00_1),
        .O(shift_Logic_Result));
endmodule

(* ORIG_REF_NAME = "MB_LUT2" *) 
module block_design_microblaze_0_0_MB_LUT2__parameterized2
   (extend_Data_Read,
    byte_selects_0,
    isbyte,
    \Using_FPGA.Native_0 ,
    Data_Read0_out,
    \Using_FPGA.Native_1 ,
    Q,
    DReady,
    Data_Read);
  output [7:0]extend_Data_Read;
  input byte_selects_0;
  input isbyte;
  input [7:0]\Using_FPGA.Native_0 ;
  input [7:0]Data_Read0_out;
  input \Using_FPGA.Native_1 ;
  input [7:0]Q;
  input DReady;
  input [7:0]Data_Read;

  wire DReady;
  wire [7:0]Data_Read;
  wire [7:0]Data_Read0_out;
  wire [7:0]Q;
  wire [7:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_i_2__48_n_0 ;
  wire \Using_FPGA.Native_i_2__49_n_0 ;
  wire \Using_FPGA.Native_i_2__50_n_0 ;
  wire \Using_FPGA.Native_i_3__13_n_0 ;
  wire \Using_FPGA.Native_i_3__14_n_0 ;
  wire \Using_FPGA.Native_i_3__15_n_0 ;
  wire \Using_FPGA.Native_i_3__16_n_0 ;
  wire \Using_FPGA.Native_i_3__17_n_0 ;
  wire \Using_FPGA.Native_n_0 ;
  wire byte_selects_0;
  wire [7:0]extend_Data_Read;
  wire isbyte;

  (* box_type = "PRIMITIVE" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \Using_FPGA.Native 
       (.I0(byte_selects_0),
        .I1(isbyte),
        .O(\Using_FPGA.Native_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF0ACA)) 
    \Using_FPGA.Native_i_1__147 
       (.I0(\Using_FPGA.Native_0 [2]),
        .I1(Data_Read0_out[2]),
        .I2(\Using_FPGA.Native_n_0 ),
        .I3(\Using_FPGA.Native_1 ),
        .I4(\Using_FPGA.Native_i_2__50_n_0 ),
        .O(extend_Data_Read[2]));
  LUT5 #(
    .INIT(32'hFFFF0ACA)) 
    \Using_FPGA.Native_i_1__150 
       (.I0(\Using_FPGA.Native_0 [1]),
        .I1(Data_Read0_out[1]),
        .I2(\Using_FPGA.Native_n_0 ),
        .I3(\Using_FPGA.Native_1 ),
        .I4(\Using_FPGA.Native_i_2__49_n_0 ),
        .O(extend_Data_Read[1]));
  LUT5 #(
    .INIT(32'hFFFF0ACA)) 
    \Using_FPGA.Native_i_1__153 
       (.I0(\Using_FPGA.Native_0 [0]),
        .I1(Data_Read0_out[0]),
        .I2(\Using_FPGA.Native_n_0 ),
        .I3(\Using_FPGA.Native_1 ),
        .I4(\Using_FPGA.Native_i_2__48_n_0 ),
        .O(extend_Data_Read[0]));
  LUT5 #(
    .INIT(32'hFFFF0ACA)) 
    \Using_FPGA.Native_i_2__41 
       (.I0(\Using_FPGA.Native_0 [7]),
        .I1(Data_Read0_out[7]),
        .I2(\Using_FPGA.Native_n_0 ),
        .I3(\Using_FPGA.Native_1 ),
        .I4(\Using_FPGA.Native_i_3__17_n_0 ),
        .O(extend_Data_Read[7]));
  LUT5 #(
    .INIT(32'hFFFF0ACA)) 
    \Using_FPGA.Native_i_2__42 
       (.I0(\Using_FPGA.Native_0 [6]),
        .I1(Data_Read0_out[6]),
        .I2(\Using_FPGA.Native_n_0 ),
        .I3(\Using_FPGA.Native_1 ),
        .I4(\Using_FPGA.Native_i_3__16_n_0 ),
        .O(extend_Data_Read[6]));
  LUT5 #(
    .INIT(32'hFFFF0ACA)) 
    \Using_FPGA.Native_i_2__43 
       (.I0(\Using_FPGA.Native_0 [5]),
        .I1(Data_Read0_out[5]),
        .I2(\Using_FPGA.Native_n_0 ),
        .I3(\Using_FPGA.Native_1 ),
        .I4(\Using_FPGA.Native_i_3__15_n_0 ),
        .O(extend_Data_Read[5]));
  LUT5 #(
    .INIT(32'hFFFF0ACA)) 
    \Using_FPGA.Native_i_2__44 
       (.I0(\Using_FPGA.Native_0 [4]),
        .I1(Data_Read0_out[4]),
        .I2(\Using_FPGA.Native_n_0 ),
        .I3(\Using_FPGA.Native_1 ),
        .I4(\Using_FPGA.Native_i_3__14_n_0 ),
        .O(extend_Data_Read[4]));
  LUT5 #(
    .INIT(32'hCCEEFCEE)) 
    \Using_FPGA.Native_i_2__45 
       (.I0(\Using_FPGA.Native_0 [3]),
        .I1(\Using_FPGA.Native_i_3__13_n_0 ),
        .I2(Data_Read0_out[3]),
        .I3(\Using_FPGA.Native_n_0 ),
        .I4(\Using_FPGA.Native_1 ),
        .O(extend_Data_Read[3]));
  LUT5 #(
    .INIT(32'hE2000000)) 
    \Using_FPGA.Native_i_2__48 
       (.I0(Q[0]),
        .I1(DReady),
        .I2(Data_Read[0]),
        .I3(\Using_FPGA.Native_n_0 ),
        .I4(\Using_FPGA.Native_1 ),
        .O(\Using_FPGA.Native_i_2__48_n_0 ));
  LUT5 #(
    .INIT(32'hE2000000)) 
    \Using_FPGA.Native_i_2__49 
       (.I0(Q[1]),
        .I1(DReady),
        .I2(Data_Read[1]),
        .I3(\Using_FPGA.Native_n_0 ),
        .I4(\Using_FPGA.Native_1 ),
        .O(\Using_FPGA.Native_i_2__49_n_0 ));
  LUT5 #(
    .INIT(32'hE2000000)) 
    \Using_FPGA.Native_i_2__50 
       (.I0(Q[2]),
        .I1(DReady),
        .I2(Data_Read[2]),
        .I3(\Using_FPGA.Native_n_0 ),
        .I4(\Using_FPGA.Native_1 ),
        .O(\Using_FPGA.Native_i_2__50_n_0 ));
  LUT5 #(
    .INIT(32'hE2000000)) 
    \Using_FPGA.Native_i_3__13 
       (.I0(Q[3]),
        .I1(DReady),
        .I2(Data_Read[3]),
        .I3(\Using_FPGA.Native_n_0 ),
        .I4(\Using_FPGA.Native_1 ),
        .O(\Using_FPGA.Native_i_3__13_n_0 ));
  LUT5 #(
    .INIT(32'hE2000000)) 
    \Using_FPGA.Native_i_3__14 
       (.I0(Q[4]),
        .I1(DReady),
        .I2(Data_Read[4]),
        .I3(\Using_FPGA.Native_n_0 ),
        .I4(\Using_FPGA.Native_1 ),
        .O(\Using_FPGA.Native_i_3__14_n_0 ));
  LUT5 #(
    .INIT(32'hE2000000)) 
    \Using_FPGA.Native_i_3__15 
       (.I0(Q[5]),
        .I1(DReady),
        .I2(Data_Read[5]),
        .I3(\Using_FPGA.Native_n_0 ),
        .I4(\Using_FPGA.Native_1 ),
        .O(\Using_FPGA.Native_i_3__15_n_0 ));
  LUT5 #(
    .INIT(32'hE2000000)) 
    \Using_FPGA.Native_i_3__16 
       (.I0(Q[6]),
        .I1(DReady),
        .I2(Data_Read[6]),
        .I3(\Using_FPGA.Native_n_0 ),
        .I4(\Using_FPGA.Native_1 ),
        .O(\Using_FPGA.Native_i_3__16_n_0 ));
  LUT5 #(
    .INIT(32'hE2000000)) 
    \Using_FPGA.Native_i_3__17 
       (.I0(Q[7]),
        .I1(DReady),
        .I2(Data_Read[7]),
        .I3(\Using_FPGA.Native_n_0 ),
        .I4(\Using_FPGA.Native_1 ),
        .O(\Using_FPGA.Native_i_3__17_n_0 ));
endmodule

module block_design_microblaze_0_0_MB_LUT3
   (opsel1_SPR_Select_2_2,
    instr_OF_raw,
    D);
  output opsel1_SPR_Select_2_2;
  input [1:0]instr_OF_raw;
  input [0:0]D;

  wire [0:0]D;
  wire [1:0]instr_OF_raw;
  wire opsel1_SPR_Select_2_2;

  (* box_type = "PRIMITIVE" *) 
  LUT3 #(
    .INIT(8'h04)) 
    \Using_FPGA.Native 
       (.I0(instr_OF_raw[1]),
        .I1(instr_OF_raw[0]),
        .I2(D),
        .O(opsel1_SPR_Select_2_2));
endmodule

(* ORIG_REF_NAME = "MB_LUT3" *) 
module block_design_microblaze_0_0_MB_LUT3__parameterized1
   (opsel1_SPR_Select,
    opsel1_SPR_Select_1,
    opsel1_SPR_Select_2_1,
    opsel1_SPR_Select_2_2);
  output opsel1_SPR_Select;
  input opsel1_SPR_Select_1;
  input opsel1_SPR_Select_2_1;
  input opsel1_SPR_Select_2_2;

  wire opsel1_SPR_Select;
  wire opsel1_SPR_Select_1;
  wire opsel1_SPR_Select_2_1;
  wire opsel1_SPR_Select_2_2;

  (* box_type = "PRIMITIVE" *) 
  LUT3 #(
    .INIT(8'h15)) 
    \Using_FPGA.Native 
       (.I0(opsel1_SPR_Select_1),
        .I1(opsel1_SPR_Select_2_1),
        .I2(opsel1_SPR_Select_2_2),
        .O(opsel1_SPR_Select));
endmodule

(* ORIG_REF_NAME = "MB_LUT3" *) 
module block_design_microblaze_0_0_MB_LUT3__parameterized3
   (res_forward1_3,
    reg1_Addr,
    Q,
    \Using_FPGA.Native_0 );
  output res_forward1_3;
  input [0:0]reg1_Addr;
  input [0:0]Q;
  input \Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]reg1_Addr;
  wire res_forward1_3;

  (* box_type = "PRIMITIVE" *) 
  LUT3 #(
    .INIT(8'h90)) 
    \Using_FPGA.Native 
       (.I0(reg1_Addr),
        .I1(Q),
        .I2(\Using_FPGA.Native_0 ),
        .O(res_forward1_3));
endmodule

(* ORIG_REF_NAME = "MB_LUT3" *) 
module block_design_microblaze_0_0_MB_LUT3__parameterized3_104
   (res_forward2_3,
    imm_Value,
    Q,
    \Using_FPGA.Native_0 );
  output res_forward2_3;
  input [0:0]imm_Value;
  input [0:0]Q;
  input \Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]imm_Value;
  wire res_forward2_3;

  (* box_type = "PRIMITIVE" *) 
  LUT3 #(
    .INIT(8'h90)) 
    \Using_FPGA.Native 
       (.I0(imm_Value),
        .I1(Q),
        .I2(\Using_FPGA.Native_0 ),
        .O(res_forward2_3));
endmodule

(* ORIG_REF_NAME = "MB_LUT3" *) 
module block_design_microblaze_0_0_MB_LUT3__parameterized5
   (force_DI1,
    Reg1,
    use_Reg_Neg_DI,
    force_Val1);
  output force_DI1;
  input [0:0]Reg1;
  input use_Reg_Neg_DI;
  input force_Val1;

  wire [0:0]Reg1;
  wire force_DI1;
  wire force_Val1;
  wire use_Reg_Neg_DI;

  (* box_type = "PRIMITIVE" *) 
  LUT3 #(
    .INIT(8'hB4)) 
    \Using_FPGA.Native 
       (.I0(Reg1),
        .I1(use_Reg_Neg_DI),
        .I2(force_Val1),
        .O(force_DI1));
endmodule

(* ORIG_REF_NAME = "MB_LUT3" *) 
module block_design_microblaze_0_0_MB_LUT3__parameterized5_114
   (force_jump1,
    Reg1,
    use_Reg_Neg_S,
    force1);
  output force_jump1;
  input [0:0]Reg1;
  input use_Reg_Neg_S;
  input force1;

  wire [0:0]Reg1;
  wire force1;
  wire force_jump1;
  wire use_Reg_Neg_S;

  (* box_type = "PRIMITIVE" *) 
  LUT3 #(
    .INIT(8'hB4)) 
    \Using_FPGA.Native 
       (.I0(Reg1),
        .I1(use_Reg_Neg_S),
        .I2(force1),
        .O(force_jump1));
endmodule

(* ORIG_REF_NAME = "MB_LUT3" *) 
module block_design_microblaze_0_0_MB_LUT3__parameterized7
   (control_carry,
    carry_In);
  output control_carry;
  input carry_In;

  wire carry_In;
  wire control_carry;

  (* box_type = "PRIMITIVE" *) 
  LUT3 #(
    .INIT(8'h00)) 
    \Using_FPGA.Native 
       (.I0(carry_In),
        .I1(carry_In),
        .I2(1'b1),
        .O(control_carry));
endmodule

(* ORIG_REF_NAME = "MB_LUT3" *) 
module block_design_microblaze_0_0_MB_LUT3__parameterized9
   (byte_i_reg,
    byte_selects_1,
    isbyte,
    isdoublet);
  output byte_i_reg;
  input byte_selects_1;
  input isbyte;
  input isdoublet;

  wire byte_i_reg;
  wire byte_selects_1;
  wire isbyte;
  wire isdoublet;

  (* box_type = "PRIMITIVE" *) 
  LUT3 #(
    .INIT(8'hAB)) 
    \Using_FPGA.Native 
       (.I0(byte_selects_1),
        .I1(isbyte),
        .I2(isdoublet),
        .O(byte_i_reg));
endmodule

module block_design_microblaze_0_0_MB_LUT4
   (write_Reg_I_S,
    DReady0_out,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 );
  output write_Reg_I_S;
  input DReady0_out;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;

  wire DReady0_out;
  wire I1105_in;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire write_Reg_I_S;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hF800)) 
    \Using_FPGA.Native 
       (.I0(DReady0_out),
        .I1(I1105_in),
        .I2(\Using_FPGA.Native_0 ),
        .I3(\Using_FPGA.Native_1 ),
        .O(write_Reg_I_S));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.Native_i_2__39 
       (.I0(\Using_FPGA.Native_2 ),
        .O(I1105_in));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized1
   (opsel1_SPR_Select_1,
    instr_OF_raw);
  output opsel1_SPR_Select_1;
  input [3:0]instr_OF_raw;

  wire [3:0]instr_OF_raw;
  wire opsel1_SPR_Select_1;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h2000)) 
    \Using_FPGA.Native 
       (.I0(instr_OF_raw[3]),
        .I1(instr_OF_raw[2]),
        .I2(instr_OF_raw[1]),
        .I3(instr_OF_raw[0]),
        .O(opsel1_SPR_Select_1));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized11
   (force_DI2,
    force_Val2_N,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 );
  output force_DI2;
  input force_Val2_N;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;

  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire force_DI2;
  wire force_Val2_N;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hAABA)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(force_Val2_N),
        .I2(\Using_FPGA.Native_0 ),
        .I3(\Using_FPGA.Native_1 ),
        .O(force_DI2));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized13
   (S,
    Op2,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31] ,
    alu_AddSub_1);
  output S;
  input Op2;
  input [0:0]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31] ;
  input alu_AddSub_1;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31] ;
  wire Op2;
  wire S;
  wire alu_AddSub_1;
  wire [0:0]alu_Op;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFA0A)) 
    \Using_FPGA.Native 
       (.I0(Op2),
        .I1(alu_Op),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31] ),
        .I3(alu_AddSub_1),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized15
   (logic_Res_i,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire logic_Res_i;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized15_273
   (logic_Res_i,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire logic_Res_i;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized15_276
   (logic_Res_i,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire logic_Res_i;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized15_279
   (logic_Res_i,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire logic_Res_i;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized15_282
   (logic_Res_i,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire logic_Res_i;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized15_285
   (logic_Res_i,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire logic_Res_i;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized15_288
   (logic_Res_i,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire logic_Res_i;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized15_291
   (logic_Res_i,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Logic_Oper);
  output logic_Res_i;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire logic_Res_i;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized15_294
   (logic_Res_i,
    B,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]B;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:0]B;
  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(B),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized15_297
   (logic_Res_i,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire logic_Res_i;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized15_300
   (logic_Res_i,
    B,
    EX_Op1,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]B;
  input EX_Op1;
  input [0:1]Logic_Oper;

  wire [0:0]B;
  wire EX_Op1;
  wire [0:1]Logic_Oper;
  wire logic_Res_i;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(B),
        .I1(EX_Op1),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized15_303
   (logic_Res_i,
    B,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]B;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:0]B;
  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(B),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized15_306
   (logic_Res_i,
    B,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]B;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:0]B;
  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(B),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized15_309
   (logic_Res_i,
    B,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]B;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:0]B;
  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(B),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized15_312
   (logic_Res_i,
    B,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]B;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:0]B;
  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(B),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized15_315
   (logic_Res_i,
    B,
    Op1_Shift,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]B;
  input Op1_Shift;
  input [0:1]Logic_Oper;

  wire [0:0]B;
  wire [0:1]Logic_Oper;
  wire Op1_Shift;
  wire logic_Res_i;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(B),
        .I1(Op1_Shift),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized15_318
   (logic_Res_i,
    B,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]B;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:0]B;
  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(B),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized15_321
   (logic_Res_i,
    B,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]B;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:0]B;
  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(B),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized15_324
   (logic_Res_i,
    B,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]B;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:0]B;
  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(B),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized15_327
   (logic_Res_i,
    B,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]B;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:0]B;
  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(B),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized15_330
   (logic_Res_i,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire logic_Res_i;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized15_333
   (logic_Res_i,
    B,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]B;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:0]B;
  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(B),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized15_336
   (logic_Res_i,
    B,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]B;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:0]B;
  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(B),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized15_339
   (logic_Res_i,
    B,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]B;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:0]B;
  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(B),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized15_342
   (logic_Res_i,
    B,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]B;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:0]B;
  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(B),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized15_345
   (logic_Res_i,
    B,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]B;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:0]B;
  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(B),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized15_348
   (logic_Res_i,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire logic_Res_i;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized15_351
   (logic_Res_i,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire logic_Res_i;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized15_354
   (logic_Res_i,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire logic_Res_i;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized15_357
   (logic_Res_i,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire logic_Res_i;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized15_360
   (logic_Res_i,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire logic_Res_i;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized15_363
   (logic_Res_i,
    \Using_FPGA.Native_0 ,
    Shifted,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]\Using_FPGA.Native_0 ;
  input Shifted;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire Shifted;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire logic_Res_i;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(Shifted),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized17
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;

  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire shift_Res;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized17_274
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;

  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire shift_Res;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized17_277
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;

  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire shift_Res;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized17_280
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;

  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire shift_Res;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized17_283
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;

  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire shift_Res;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized17_286
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;

  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire shift_Res;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized17_289
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;

  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire shift_Res;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized17_292
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Shift_Oper;

  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire shift_Res;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(1'b0),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized17_295
   (shift_Res,
    EX_Op1,
    \Using_FPGA.Native_0 ,
    Shift_Oper);
  output shift_Res;
  input EX_Op1;
  input \Using_FPGA.Native_0 ;
  input Shift_Oper;

  wire EX_Op1;
  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire shift_Res;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(EX_Op1),
        .I1(\Using_FPGA.Native_0 ),
        .I2(1'b0),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized17_298
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;

  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire shift_Res;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized17_301
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Shift_Oper;

  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire shift_Res;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(1'b0),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized17_304
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Shift_Oper;

  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire shift_Res;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(1'b0),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized17_307
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Shift_Oper;

  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire shift_Res;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(1'b0),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized17_310
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Shift_Oper;

  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire shift_Res;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(1'b0),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized17_313
   (shift_Res,
    Op1_Shift,
    \Using_FPGA.Native_0 ,
    Shift_Oper);
  output shift_Res;
  input Op1_Shift;
  input \Using_FPGA.Native_0 ;
  input Shift_Oper;

  wire Op1_Shift;
  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire shift_Res;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(Op1_Shift),
        .I1(\Using_FPGA.Native_0 ),
        .I2(1'b0),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized17_316
   (shift_Res,
    \Using_FPGA.Native_0 ,
    Op1_Shift,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input Op1_Shift;
  input Shift_Oper;

  wire Op1_Shift;
  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire shift_Res;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(Op1_Shift),
        .I2(1'b0),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized17_319
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Sext,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Sext;
  input Shift_Oper;

  wire Sext;
  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire shift_Res;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Sext),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized17_322
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Sext,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Sext;
  input Shift_Oper;

  wire Sext;
  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire shift_Res;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Sext),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized17_325
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Sext,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Sext;
  input Shift_Oper;

  wire Sext;
  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire shift_Res;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Sext),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized17_328
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Sext,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Sext;
  input Shift_Oper;

  wire Sext;
  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire shift_Res;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Sext),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized17_331
   (shift_Res,
    Shifted,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Shift_Oper);
  output shift_Res;
  input Shifted;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Shift_Oper;

  wire Shift_Oper;
  wire Shifted;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire shift_Res;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(Shifted),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized17_334
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Sext,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Sext;
  input Shift_Oper;

  wire Sext;
  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire shift_Res;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Sext),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized17_337
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Sext,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Sext;
  input Shift_Oper;

  wire Sext;
  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire shift_Res;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Sext),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized17_340
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Sext,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Sext;
  input Shift_Oper;

  wire Sext;
  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire shift_Res;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Sext),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized17_343
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Sext,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Sext;
  input Shift_Oper;

  wire Sext;
  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire shift_Res;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Sext),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized17_346
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;

  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire shift_Res;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized17_349
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;

  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire shift_Res;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized17_352
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;

  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire shift_Res;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized17_355
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;

  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire shift_Res;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized17_358
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;

  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire shift_Res;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized17_361
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;

  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire shift_Res;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized17_364
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;

  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire shift_Res;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized19
   (res_00_2,
    byte_0x_0,
    byte_0x_1,
    byte_0x_2,
    byte_0x_3);
  output res_00_2;
  input byte_0x_0;
  input byte_0x_1;
  input byte_0x_2;
  input byte_0x_3;

  wire byte_0x_0;
  wire byte_0x_1;
  wire byte_0x_2;
  wire byte_0x_3;
  wire res_00_2;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h0002)) 
    \Using_FPGA.Native 
       (.I0(byte_0x_0),
        .I1(byte_0x_1),
        .I2(byte_0x_2),
        .I3(byte_0x_3),
        .O(res_00_2));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized21
   (res_00_1,
    byte_0x_0,
    byte_0x_1,
    byte_0x_2,
    byte_0x_3);
  output res_00_1;
  input byte_0x_0;
  input byte_0x_1;
  input byte_0x_2;
  input byte_0x_3;

  wire byte_0x_0;
  wire byte_0x_1;
  wire byte_0x_2;
  wire byte_0x_3;
  wire res_00_1;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h00FC)) 
    \Using_FPGA.Native 
       (.I0(byte_0x_0),
        .I1(byte_0x_1),
        .I2(byte_0x_2),
        .I3(byte_0x_3),
        .O(res_00_1));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized23
   (res_00_0,
    byte_0x_0,
    byte_0x_1,
    byte_0x_2,
    byte_0x_3);
  output res_00_0;
  input byte_0x_0;
  input byte_0x_1;
  input byte_0x_2;
  input byte_0x_3;

  wire byte_0x_0;
  wire byte_0x_1;
  wire byte_0x_2;
  wire byte_0x_3;
  wire res_00_0;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFF0C)) 
    \Using_FPGA.Native 
       (.I0(byte_0x_0),
        .I1(byte_0x_1),
        .I2(byte_0x_2),
        .I3(byte_0x_3),
        .O(res_00_0));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized25
   (res_11,
    byte_0,
    byte_1,
    byte_2,
    byte_3);
  output res_11;
  input byte_0;
  input byte_1;
  input byte_2;
  input byte_3;

  wire byte_0;
  wire byte_1;
  wire byte_2;
  wire byte_3;
  wire res_11;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h7FFF)) 
    \Using_FPGA.Native 
       (.I0(byte_0),
        .I1(byte_1),
        .I2(byte_2),
        .I3(byte_3),
        .O(res_11));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized27
   (shift_Logic_Result,
    \Using_FPGA.Native_0 ,
    res_00_0,
    res_1x,
    I3_35);
  output [0:0]shift_Logic_Result;
  input \Using_FPGA.Native_0 ;
  input res_00_0;
  input res_1x;
  input I3_35;

  wire I3_35;
  wire \Using_FPGA.Native_0 ;
  wire res_00_0;
  wire res_1x;
  wire [0:0]shift_Logic_Result;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hF0EE)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(res_00_0),
        .I2(res_1x),
        .I3(I3_35),
        .O(shift_Logic_Result));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized29
   (mul_ALU_Res,
    Other_Result,
    mul_Result,
    Result_Sel,
    ALU_Result);
  output mul_ALU_Res;
  input [0:0]Other_Result;
  input [0:0]mul_Result;
  input [0:0]Result_Sel;
  input [0:0]ALU_Result;

  wire [0:0]ALU_Result;
  wire [0:0]Other_Result;
  wire [0:0]Result_Sel;
  wire mul_ALU_Res;
  wire [0:0]mul_Result;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(Other_Result),
        .I1(mul_Result),
        .I2(Result_Sel),
        .I3(ALU_Result),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized29_399
   (mul_ALU_Res,
    Other_Result,
    mul_Result,
    Result_Sel,
    ALU_Result);
  output mul_ALU_Res;
  input [0:0]Other_Result;
  input [0:0]mul_Result;
  input [0:0]Result_Sel;
  input [0:0]ALU_Result;

  wire [0:0]ALU_Result;
  wire [0:0]Other_Result;
  wire [0:0]Result_Sel;
  wire mul_ALU_Res;
  wire [0:0]mul_Result;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(Other_Result),
        .I1(mul_Result),
        .I2(Result_Sel),
        .I3(ALU_Result),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized29_402
   (mul_ALU_Res,
    Other_Result,
    mul_Result,
    Result_Sel,
    ALU_Result);
  output mul_ALU_Res;
  input [0:0]Other_Result;
  input [0:0]mul_Result;
  input [0:0]Result_Sel;
  input [0:0]ALU_Result;

  wire [0:0]ALU_Result;
  wire [0:0]Other_Result;
  wire [0:0]Result_Sel;
  wire mul_ALU_Res;
  wire [0:0]mul_Result;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(Other_Result),
        .I1(mul_Result),
        .I2(Result_Sel),
        .I3(ALU_Result),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized29_405
   (mul_ALU_Res,
    Other_Result,
    mul_Result,
    Result_Sel,
    ALU_Result);
  output mul_ALU_Res;
  input [0:0]Other_Result;
  input [0:0]mul_Result;
  input [0:0]Result_Sel;
  input [0:0]ALU_Result;

  wire [0:0]ALU_Result;
  wire [0:0]Other_Result;
  wire [0:0]Result_Sel;
  wire mul_ALU_Res;
  wire [0:0]mul_Result;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(Other_Result),
        .I1(mul_Result),
        .I2(Result_Sel),
        .I3(ALU_Result),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized29_408
   (mul_ALU_Res,
    Other_Result,
    mul_Result,
    Result_Sel,
    ALU_Result);
  output mul_ALU_Res;
  input [0:0]Other_Result;
  input [0:0]mul_Result;
  input [0:0]Result_Sel;
  input [0:0]ALU_Result;

  wire [0:0]ALU_Result;
  wire [0:0]Other_Result;
  wire [0:0]Result_Sel;
  wire mul_ALU_Res;
  wire [0:0]mul_Result;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(Other_Result),
        .I1(mul_Result),
        .I2(Result_Sel),
        .I3(ALU_Result),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized29_411
   (mul_ALU_Res,
    Other_Result,
    mul_Result,
    Result_Sel,
    ALU_Result);
  output mul_ALU_Res;
  input [0:0]Other_Result;
  input [0:0]mul_Result;
  input [0:0]Result_Sel;
  input [0:0]ALU_Result;

  wire [0:0]ALU_Result;
  wire [0:0]Other_Result;
  wire [0:0]Result_Sel;
  wire mul_ALU_Res;
  wire [0:0]mul_Result;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(Other_Result),
        .I1(mul_Result),
        .I2(Result_Sel),
        .I3(ALU_Result),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized29_414
   (mul_ALU_Res,
    Other_Result,
    mul_Result,
    Result_Sel,
    ALU_Result);
  output mul_ALU_Res;
  input [0:0]Other_Result;
  input [0:0]mul_Result;
  input [0:0]Result_Sel;
  input [0:0]ALU_Result;

  wire [0:0]ALU_Result;
  wire [0:0]Other_Result;
  wire [0:0]Result_Sel;
  wire mul_ALU_Res;
  wire [0:0]mul_Result;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(Other_Result),
        .I1(mul_Result),
        .I2(Result_Sel),
        .I3(ALU_Result),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized29_417
   (mul_ALU_Res,
    Other_Result,
    mul_Result,
    Result_Sel,
    ALU_Result);
  output mul_ALU_Res;
  input [0:0]Other_Result;
  input [0:0]mul_Result;
  input [0:0]Result_Sel;
  input [0:0]ALU_Result;

  wire [0:0]ALU_Result;
  wire [0:0]Other_Result;
  wire [0:0]Result_Sel;
  wire mul_ALU_Res;
  wire [0:0]mul_Result;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(Other_Result),
        .I1(mul_Result),
        .I2(Result_Sel),
        .I3(ALU_Result),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized29_420
   (mul_ALU_Res,
    Other_Result,
    mul_Result,
    Result_Sel,
    ALU_Result);
  output mul_ALU_Res;
  input [0:0]Other_Result;
  input [0:0]mul_Result;
  input [0:0]Result_Sel;
  input [0:0]ALU_Result;

  wire [0:0]ALU_Result;
  wire [0:0]Other_Result;
  wire [0:0]Result_Sel;
  wire mul_ALU_Res;
  wire [0:0]mul_Result;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(Other_Result),
        .I1(mul_Result),
        .I2(Result_Sel),
        .I3(ALU_Result),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized29_423
   (mul_ALU_Res,
    Other_Result,
    mul_Result,
    Result_Sel,
    ALU_Result);
  output mul_ALU_Res;
  input [0:0]Other_Result;
  input [0:0]mul_Result;
  input [0:0]Result_Sel;
  input [0:0]ALU_Result;

  wire [0:0]ALU_Result;
  wire [0:0]Other_Result;
  wire [0:0]Result_Sel;
  wire mul_ALU_Res;
  wire [0:0]mul_Result;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(Other_Result),
        .I1(mul_Result),
        .I2(Result_Sel),
        .I3(ALU_Result),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized29_426
   (mul_ALU_Res,
    Other_Result,
    mul_Result,
    Result_Sel,
    ALU_Result);
  output mul_ALU_Res;
  input [0:0]Other_Result;
  input [0:0]mul_Result;
  input [0:0]Result_Sel;
  input [0:0]ALU_Result;

  wire [0:0]ALU_Result;
  wire [0:0]Other_Result;
  wire [0:0]Result_Sel;
  wire mul_ALU_Res;
  wire [0:0]mul_Result;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(Other_Result),
        .I1(mul_Result),
        .I2(Result_Sel),
        .I3(ALU_Result),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized29_429
   (mul_ALU_Res,
    Other_Result,
    mul_Result,
    Result_Sel,
    ALU_Result);
  output mul_ALU_Res;
  input [0:0]Other_Result;
  input [0:0]mul_Result;
  input [0:0]Result_Sel;
  input [0:0]ALU_Result;

  wire [0:0]ALU_Result;
  wire [0:0]Other_Result;
  wire [0:0]Result_Sel;
  wire mul_ALU_Res;
  wire [0:0]mul_Result;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(Other_Result),
        .I1(mul_Result),
        .I2(Result_Sel),
        .I3(ALU_Result),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized29_432
   (mul_ALU_Res,
    Other_Result,
    mul_Result,
    Result_Sel,
    ALU_Result);
  output mul_ALU_Res;
  input [0:0]Other_Result;
  input [0:0]mul_Result;
  input [0:0]Result_Sel;
  input [0:0]ALU_Result;

  wire [0:0]ALU_Result;
  wire [0:0]Other_Result;
  wire [0:0]Result_Sel;
  wire mul_ALU_Res;
  wire [0:0]mul_Result;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(Other_Result),
        .I1(mul_Result),
        .I2(Result_Sel),
        .I3(ALU_Result),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized29_435
   (mul_ALU_Res,
    Other_Result,
    mul_Result,
    Result_Sel,
    ALU_Result);
  output mul_ALU_Res;
  input [0:0]Other_Result;
  input [0:0]mul_Result;
  input [0:0]Result_Sel;
  input [0:0]ALU_Result;

  wire [0:0]ALU_Result;
  wire [0:0]Other_Result;
  wire [0:0]Result_Sel;
  wire mul_ALU_Res;
  wire [0:0]mul_Result;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(Other_Result),
        .I1(mul_Result),
        .I2(Result_Sel),
        .I3(ALU_Result),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized29_438
   (mul_ALU_Res,
    Other_Result,
    mul_Result,
    Result_Sel,
    ALU_Result);
  output mul_ALU_Res;
  input [0:0]Other_Result;
  input [0:0]mul_Result;
  input [0:0]Result_Sel;
  input [0:0]ALU_Result;

  wire [0:0]ALU_Result;
  wire [0:0]Other_Result;
  wire [0:0]Result_Sel;
  wire mul_ALU_Res;
  wire [0:0]mul_Result;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(Other_Result),
        .I1(mul_Result),
        .I2(Result_Sel),
        .I3(ALU_Result),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized29_441
   (mul_ALU_Res,
    Other_Result,
    mul_Result,
    Result_Sel,
    ALU_Result);
  output mul_ALU_Res;
  input [0:0]Other_Result;
  input [0:0]mul_Result;
  input [0:0]Result_Sel;
  input [0:0]ALU_Result;

  wire [0:0]ALU_Result;
  wire [0:0]Other_Result;
  wire [0:0]Result_Sel;
  wire mul_ALU_Res;
  wire [0:0]mul_Result;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(Other_Result),
        .I1(mul_Result),
        .I2(Result_Sel),
        .I3(ALU_Result),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized29_444
   (mul_ALU_Res,
    Other_Result,
    mul_Result,
    Result_Sel,
    ALU_Result);
  output mul_ALU_Res;
  input [0:0]Other_Result;
  input [0:0]mul_Result;
  input [0:0]Result_Sel;
  input [0:0]ALU_Result;

  wire [0:0]ALU_Result;
  wire [0:0]Other_Result;
  wire [0:0]Result_Sel;
  wire mul_ALU_Res;
  wire [0:0]mul_Result;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(Other_Result),
        .I1(mul_Result),
        .I2(Result_Sel),
        .I3(ALU_Result),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized29_447
   (mul_ALU_Res,
    Other_Result,
    mul_Result,
    Result_Sel,
    ALU_Result);
  output mul_ALU_Res;
  input [0:0]Other_Result;
  input [0:0]mul_Result;
  input [0:0]Result_Sel;
  input [0:0]ALU_Result;

  wire [0:0]ALU_Result;
  wire [0:0]Other_Result;
  wire [0:0]Result_Sel;
  wire mul_ALU_Res;
  wire [0:0]mul_Result;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(Other_Result),
        .I1(mul_Result),
        .I2(Result_Sel),
        .I3(ALU_Result),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized29_450
   (mul_ALU_Res,
    Other_Result,
    mul_Result,
    Result_Sel,
    ALU_Result);
  output mul_ALU_Res;
  input [0:0]Other_Result;
  input [0:0]mul_Result;
  input [0:0]Result_Sel;
  input [0:0]ALU_Result;

  wire [0:0]ALU_Result;
  wire [0:0]Other_Result;
  wire [0:0]Result_Sel;
  wire mul_ALU_Res;
  wire [0:0]mul_Result;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(Other_Result),
        .I1(mul_Result),
        .I2(Result_Sel),
        .I3(ALU_Result),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized29_453
   (mul_ALU_Res,
    Other_Result,
    mul_Result,
    Result_Sel,
    ALU_Result);
  output mul_ALU_Res;
  input [0:0]Other_Result;
  input [0:0]mul_Result;
  input [0:0]Result_Sel;
  input [0:0]ALU_Result;

  wire [0:0]ALU_Result;
  wire [0:0]Other_Result;
  wire [0:0]Result_Sel;
  wire mul_ALU_Res;
  wire [0:0]mul_Result;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(Other_Result),
        .I1(mul_Result),
        .I2(Result_Sel),
        .I3(ALU_Result),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized29_456
   (mul_ALU_Res,
    Other_Result,
    mul_Result,
    Result_Sel,
    ALU_Result);
  output mul_ALU_Res;
  input [0:0]Other_Result;
  input [0:0]mul_Result;
  input [0:0]Result_Sel;
  input [0:0]ALU_Result;

  wire [0:0]ALU_Result;
  wire [0:0]Other_Result;
  wire [0:0]Result_Sel;
  wire mul_ALU_Res;
  wire [0:0]mul_Result;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(Other_Result),
        .I1(mul_Result),
        .I2(Result_Sel),
        .I3(ALU_Result),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized29_459
   (mul_ALU_Res,
    Other_Result,
    mul_Result,
    Result_Sel,
    ALU_Result);
  output mul_ALU_Res;
  input [0:0]Other_Result;
  input [0:0]mul_Result;
  input [0:0]Result_Sel;
  input [0:0]ALU_Result;

  wire [0:0]ALU_Result;
  wire [0:0]Other_Result;
  wire [0:0]Result_Sel;
  wire mul_ALU_Res;
  wire [0:0]mul_Result;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(Other_Result),
        .I1(mul_Result),
        .I2(Result_Sel),
        .I3(ALU_Result),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized29_462
   (mul_ALU_Res,
    Other_Result,
    mul_Result,
    Result_Sel,
    ALU_Result);
  output mul_ALU_Res;
  input [0:0]Other_Result;
  input [0:0]mul_Result;
  input [0:0]Result_Sel;
  input [0:0]ALU_Result;

  wire [0:0]ALU_Result;
  wire [0:0]Other_Result;
  wire [0:0]Result_Sel;
  wire mul_ALU_Res;
  wire [0:0]mul_Result;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(Other_Result),
        .I1(mul_Result),
        .I2(Result_Sel),
        .I3(ALU_Result),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized29_465
   (mul_ALU_Res,
    Other_Result,
    mul_Result,
    Result_Sel,
    ALU_Result);
  output mul_ALU_Res;
  input [0:0]Other_Result;
  input [0:0]mul_Result;
  input [0:0]Result_Sel;
  input [0:0]ALU_Result;

  wire [0:0]ALU_Result;
  wire [0:0]Other_Result;
  wire [0:0]Result_Sel;
  wire mul_ALU_Res;
  wire [0:0]mul_Result;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(Other_Result),
        .I1(mul_Result),
        .I2(Result_Sel),
        .I3(ALU_Result),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized29_468
   (mul_ALU_Res,
    Other_Result,
    mul_Result,
    Result_Sel,
    ALU_Result);
  output mul_ALU_Res;
  input [0:0]Other_Result;
  input [0:0]mul_Result;
  input [0:0]Result_Sel;
  input [0:0]ALU_Result;

  wire [0:0]ALU_Result;
  wire [0:0]Other_Result;
  wire [0:0]Result_Sel;
  wire mul_ALU_Res;
  wire [0:0]mul_Result;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(Other_Result),
        .I1(mul_Result),
        .I2(Result_Sel),
        .I3(ALU_Result),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized29_471
   (mul_ALU_Res,
    Other_Result,
    mul_Result,
    Result_Sel,
    ALU_Result);
  output mul_ALU_Res;
  input [0:0]Other_Result;
  input [0:0]mul_Result;
  input [0:0]Result_Sel;
  input [0:0]ALU_Result;

  wire [0:0]ALU_Result;
  wire [0:0]Other_Result;
  wire [0:0]Result_Sel;
  wire mul_ALU_Res;
  wire [0:0]mul_Result;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(Other_Result),
        .I1(mul_Result),
        .I2(Result_Sel),
        .I3(ALU_Result),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized29_474
   (mul_ALU_Res,
    Other_Result,
    mul_Result,
    Result_Sel,
    ALU_Result);
  output mul_ALU_Res;
  input [0:0]Other_Result;
  input [0:0]mul_Result;
  input [0:0]Result_Sel;
  input [0:0]ALU_Result;

  wire [0:0]ALU_Result;
  wire [0:0]Other_Result;
  wire [0:0]Result_Sel;
  wire mul_ALU_Res;
  wire [0:0]mul_Result;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(Other_Result),
        .I1(mul_Result),
        .I2(Result_Sel),
        .I3(ALU_Result),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized29_477
   (mul_ALU_Res,
    Other_Result,
    mul_Result,
    Result_Sel,
    ALU_Result);
  output mul_ALU_Res;
  input [0:0]Other_Result;
  input [0:0]mul_Result;
  input [0:0]Result_Sel;
  input [0:0]ALU_Result;

  wire [0:0]ALU_Result;
  wire [0:0]Other_Result;
  wire [0:0]Result_Sel;
  wire mul_ALU_Res;
  wire [0:0]mul_Result;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(Other_Result),
        .I1(mul_Result),
        .I2(Result_Sel),
        .I3(ALU_Result),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized29_480
   (mul_ALU_Res,
    Other_Result,
    mul_Result,
    Result_Sel,
    ALU_Result);
  output mul_ALU_Res;
  input [0:0]Other_Result;
  input [0:0]mul_Result;
  input [0:0]Result_Sel;
  input [0:0]ALU_Result;

  wire [0:0]ALU_Result;
  wire [0:0]Other_Result;
  wire [0:0]Result_Sel;
  wire mul_ALU_Res;
  wire [0:0]mul_Result;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(Other_Result),
        .I1(mul_Result),
        .I2(Result_Sel),
        .I3(ALU_Result),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized29_483
   (mul_ALU_Res,
    Other_Result,
    mul_Result,
    Result_Sel,
    ALU_Result);
  output mul_ALU_Res;
  input [0:0]Other_Result;
  input [0:0]mul_Result;
  input [0:0]Result_Sel;
  input [0:0]ALU_Result;

  wire [0:0]ALU_Result;
  wire [0:0]Other_Result;
  wire [0:0]Result_Sel;
  wire mul_ALU_Res;
  wire [0:0]mul_Result;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(Other_Result),
        .I1(mul_Result),
        .I2(Result_Sel),
        .I3(ALU_Result),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized29_486
   (mul_ALU_Res,
    Other_Result,
    mul_Result,
    Result_Sel,
    ALU_Result);
  output mul_ALU_Res;
  input [0:0]Other_Result;
  input [0:0]mul_Result;
  input [0:0]Result_Sel;
  input [0:0]ALU_Result;

  wire [0:0]ALU_Result;
  wire [0:0]Other_Result;
  wire [0:0]Result_Sel;
  wire mul_ALU_Res;
  wire [0:0]mul_Result;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(Other_Result),
        .I1(mul_Result),
        .I2(Result_Sel),
        .I3(ALU_Result),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized29_489
   (mul_ALU_Res,
    Other_Result,
    mul_Result,
    Result_Sel,
    ALU_Result);
  output mul_ALU_Res;
  input [0:0]Other_Result;
  input [0:0]mul_Result;
  input [0:0]Result_Sel;
  input [0:0]ALU_Result;

  wire [0:0]ALU_Result;
  wire [0:0]Other_Result;
  wire [0:0]Result_Sel;
  wire mul_ALU_Res;
  wire [0:0]mul_Result;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(Other_Result),
        .I1(mul_Result),
        .I2(Result_Sel),
        .I3(ALU_Result),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized3
   (opsel1_SPR_Select_2_1,
    instr_OF_raw);
  output opsel1_SPR_Select_2_1;
  input [3:0]instr_OF_raw;

  wire [3:0]instr_OF_raw;
  wire opsel1_SPR_Select_2_1;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h0200)) 
    \Using_FPGA.Native 
       (.I0(instr_OF_raw[3]),
        .I1(instr_OF_raw[2]),
        .I2(instr_OF_raw[1]),
        .I3(instr_OF_raw[0]),
        .O(opsel1_SPR_Select_2_1));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized31
   (S,
    pc_I);
  output S;
  input pc_I;

  wire S;
  wire pc_I;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hF066)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(pc_I),
        .I2(1'b0),
        .I3(1'b0),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized31_621
   (S,
    pc_I);
  output S;
  input pc_I;

  wire S;
  wire pc_I;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hF066)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(pc_I),
        .I2(1'b0),
        .I3(1'b0),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized31_627
   (S,
    pc_I);
  output S;
  input pc_I;

  wire S;
  wire pc_I;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hF066)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(pc_I),
        .I2(1'b0),
        .I3(1'b0),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized31_633
   (S,
    pc_I);
  output S;
  input pc_I;

  wire S;
  wire pc_I;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hF066)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(pc_I),
        .I2(1'b0),
        .I3(1'b0),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized31_639
   (S,
    pc_I);
  output S;
  input pc_I;

  wire S;
  wire pc_I;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hF066)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(pc_I),
        .I2(1'b0),
        .I3(1'b0),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized31_645
   (S,
    pc_I);
  output S;
  input pc_I;

  wire S;
  wire pc_I;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hF066)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(pc_I),
        .I2(1'b0),
        .I3(1'b0),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized31_651
   (S,
    pc_I);
  output S;
  input pc_I;

  wire S;
  wire pc_I;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hF066)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(pc_I),
        .I2(1'b0),
        .I3(1'b0),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized31_658
   (S,
    pc_I);
  output S;
  input pc_I;

  wire S;
  wire pc_I;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hF066)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(pc_I),
        .I2(1'b0),
        .I3(1'b0),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized31_664
   (S,
    pc_I);
  output S;
  input pc_I;

  wire S;
  wire pc_I;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hF066)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(pc_I),
        .I2(1'b0),
        .I3(1'b0),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized31_669
   (S,
    pc_I);
  output S;
  input pc_I;

  wire S;
  wire pc_I;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hF066)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(pc_I),
        .I2(1'b0),
        .I3(1'b0),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized31_675
   (S,
    DI,
    pc_I);
  output S;
  input DI;
  input pc_I;

  wire DI;
  wire S;
  wire pc_I;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hF066)) 
    \Using_FPGA.Native 
       (.I0(DI),
        .I1(pc_I),
        .I2(1'b0),
        .I3(1'b0),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized31_681
   (S,
    pc_I);
  output S;
  input pc_I;

  wire S;
  wire pc_I;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hF066)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(pc_I),
        .I2(1'b0),
        .I3(1'b0),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized31_687
   (S,
    pc_I);
  output S;
  input pc_I;

  wire S;
  wire pc_I;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hF066)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(pc_I),
        .I2(1'b0),
        .I3(1'b0),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized31_693
   (S,
    pc_I);
  output S;
  input pc_I;

  wire S;
  wire pc_I;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hF066)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(pc_I),
        .I2(1'b0),
        .I3(1'b0),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized31_699
   (S,
    pc_I);
  output S;
  input pc_I;

  wire S;
  wire pc_I;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hF066)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(pc_I),
        .I2(1'b0),
        .I3(1'b0),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized31_705
   (S,
    pc_I);
  output S;
  input pc_I;

  wire S;
  wire pc_I;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hF066)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(pc_I),
        .I2(1'b0),
        .I3(1'b0),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized31_711
   (S,
    pc_I);
  output S;
  input pc_I;

  wire S;
  wire pc_I;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hF066)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(pc_I),
        .I2(1'b0),
        .I3(1'b0),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized31_717
   (S,
    pc_I);
  output S;
  input pc_I;

  wire S;
  wire pc_I;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hF066)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(pc_I),
        .I2(1'b0),
        .I3(1'b0),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized31_723
   (S,
    pc_I);
  output S;
  input pc_I;

  wire S;
  wire pc_I;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hF066)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(pc_I),
        .I2(1'b0),
        .I3(1'b0),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized31_729
   (S,
    pc_I);
  output S;
  input pc_I;

  wire S;
  wire pc_I;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hF066)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(pc_I),
        .I2(1'b0),
        .I3(1'b0),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized31_735
   (S,
    pc_I);
  output S;
  input pc_I;

  wire S;
  wire pc_I;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hF066)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(pc_I),
        .I2(1'b0),
        .I3(1'b0),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized31_741
   (S,
    pc_I);
  output S;
  input pc_I;

  wire S;
  wire pc_I;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hF066)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(pc_I),
        .I2(1'b0),
        .I3(1'b0),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized31_747
   (S,
    pc_I);
  output S;
  input pc_I;

  wire S;
  wire pc_I;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hF066)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(pc_I),
        .I2(1'b0),
        .I3(1'b0),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized31_753
   (S,
    pc_I);
  output S;
  input pc_I;

  wire S;
  wire pc_I;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hF066)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(pc_I),
        .I2(1'b0),
        .I3(1'b0),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized31_759
   (S,
    pc_I);
  output S;
  input pc_I;

  wire S;
  wire pc_I;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hF066)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(pc_I),
        .I2(1'b0),
        .I3(1'b0),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized31_765
   (S,
    pc_I);
  output S;
  input pc_I;

  wire S;
  wire pc_I;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hF066)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(pc_I),
        .I2(1'b0),
        .I3(1'b0),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized31_771
   (S,
    pc_I);
  output S;
  input pc_I;

  wire S;
  wire pc_I;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hF066)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(pc_I),
        .I2(1'b0),
        .I3(1'b0),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized31_777
   (S,
    pc_I);
  output S;
  input pc_I;

  wire S;
  wire pc_I;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hF066)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(pc_I),
        .I2(1'b0),
        .I3(1'b0),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized31_783
   (S,
    pc_I);
  output S;
  input pc_I;

  wire S;
  wire pc_I;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hF066)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(pc_I),
        .I2(1'b0),
        .I3(1'b0),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized31_789
   (S,
    pc_I);
  output S;
  input pc_I;

  wire S;
  wire pc_I;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hF066)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(pc_I),
        .I2(1'b0),
        .I3(1'b0),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized31_795
   (S,
    pc_I);
  output S;
  input pc_I;

  wire S;
  wire pc_I;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hF066)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(pc_I),
        .I2(1'b0),
        .I3(1'b0),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized31_801
   (xor_Sum,
    pc_I);
  output xor_Sum;
  input pc_I;

  wire pc_I;
  wire xor_Sum;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hF066)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(pc_I),
        .I2(1'b0),
        .I3(1'b0),
        .O(xor_Sum));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized33
   (\Using_FPGA.Native_0 ,
    O,
    ALU_Result,
    jump);
  output [0:0]\Using_FPGA.Native_0 ;
  input O;
  input [0:0]ALU_Result;
  input jump;

  wire [0:0]ALU_Result;
  wire O;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire jump;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hAACA)) 
    \Using_FPGA.Native 
       (.I0(O),
        .I1(ALU_Result),
        .I2(jump),
        .I3(1'b0),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized33_618
   (\Using_FPGA.Native_0 ,
    O,
    ALU_Result,
    jump);
  output [0:0]\Using_FPGA.Native_0 ;
  input O;
  input [0:0]ALU_Result;
  input jump;

  wire [0:0]ALU_Result;
  wire O;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire jump;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hAACA)) 
    \Using_FPGA.Native 
       (.I0(O),
        .I1(ALU_Result),
        .I2(jump),
        .I3(1'b0),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized33_624
   (\Using_FPGA.Native_0 ,
    O,
    ALU_Result,
    jump);
  output [0:0]\Using_FPGA.Native_0 ;
  input O;
  input [0:0]ALU_Result;
  input jump;

  wire [0:0]ALU_Result;
  wire O;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire jump;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hAACA)) 
    \Using_FPGA.Native 
       (.I0(O),
        .I1(ALU_Result),
        .I2(jump),
        .I3(1'b0),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized33_630
   (\Using_FPGA.Native_0 ,
    O,
    ALU_Result,
    jump);
  output [0:0]\Using_FPGA.Native_0 ;
  input O;
  input [0:0]ALU_Result;
  input jump;

  wire [0:0]ALU_Result;
  wire O;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire jump;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hAACA)) 
    \Using_FPGA.Native 
       (.I0(O),
        .I1(ALU_Result),
        .I2(jump),
        .I3(1'b0),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized33_636
   (\Using_FPGA.Native_0 ,
    O,
    ALU_Result,
    jump);
  output [0:0]\Using_FPGA.Native_0 ;
  input O;
  input [0:0]ALU_Result;
  input jump;

  wire [0:0]ALU_Result;
  wire O;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire jump;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hAACA)) 
    \Using_FPGA.Native 
       (.I0(O),
        .I1(ALU_Result),
        .I2(jump),
        .I3(1'b0),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized33_642
   (\Using_FPGA.Native_0 ,
    O,
    ALU_Result,
    jump);
  output [0:0]\Using_FPGA.Native_0 ;
  input O;
  input [0:0]ALU_Result;
  input jump;

  wire [0:0]ALU_Result;
  wire O;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire jump;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hAACA)) 
    \Using_FPGA.Native 
       (.I0(O),
        .I1(ALU_Result),
        .I2(jump),
        .I3(1'b0),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized33_648
   (\Using_FPGA.Native_0 ,
    O,
    ALU_Result,
    jump);
  output [0:0]\Using_FPGA.Native_0 ;
  input O;
  input [0:0]ALU_Result;
  input jump;

  wire [0:0]ALU_Result;
  wire O;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire jump;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hAACA)) 
    \Using_FPGA.Native 
       (.I0(O),
        .I1(ALU_Result),
        .I2(jump),
        .I3(1'b0),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized33_654
   (\Using_FPGA.Native_0 ,
    O,
    ALU_Result,
    jump);
  output [0:0]\Using_FPGA.Native_0 ;
  input O;
  input [0:0]ALU_Result;
  input jump;

  wire [0:0]ALU_Result;
  wire O;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire jump;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hAACA)) 
    \Using_FPGA.Native 
       (.I0(O),
        .I1(ALU_Result),
        .I2(jump),
        .I3(1'b0),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized33_660
   (\Using_FPGA.Native_0 ,
    O,
    ALU_Result,
    jump);
  output [0:0]\Using_FPGA.Native_0 ;
  input O;
  input [0:0]ALU_Result;
  input jump;

  wire [0:0]ALU_Result;
  wire O;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire jump;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hAACA)) 
    \Using_FPGA.Native 
       (.I0(O),
        .I1(ALU_Result),
        .I2(jump),
        .I3(1'b0),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized33_666
   (\Using_FPGA.Native_0 ,
    O,
    ALU_Result,
    jump);
  output [0:0]\Using_FPGA.Native_0 ;
  input O;
  input [0:0]ALU_Result;
  input jump;

  wire [0:0]ALU_Result;
  wire O;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire jump;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hAACA)) 
    \Using_FPGA.Native 
       (.I0(O),
        .I1(ALU_Result),
        .I2(jump),
        .I3(1'b0),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized33_672
   (\Using_FPGA.Native_0 ,
    O,
    ALU_Result,
    jump);
  output [0:0]\Using_FPGA.Native_0 ;
  input O;
  input [0:0]ALU_Result;
  input jump;

  wire [0:0]ALU_Result;
  wire O;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire jump;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hAACA)) 
    \Using_FPGA.Native 
       (.I0(O),
        .I1(ALU_Result),
        .I2(jump),
        .I3(1'b0),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized33_678
   (\Using_FPGA.Native_0 ,
    O,
    ALU_Result,
    jump);
  output [0:0]\Using_FPGA.Native_0 ;
  input O;
  input [0:0]ALU_Result;
  input jump;

  wire [0:0]ALU_Result;
  wire O;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire jump;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hAACA)) 
    \Using_FPGA.Native 
       (.I0(O),
        .I1(ALU_Result),
        .I2(jump),
        .I3(1'b0),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized33_684
   (\Using_FPGA.Native_0 ,
    O,
    ALU_Result,
    jump);
  output [0:0]\Using_FPGA.Native_0 ;
  input O;
  input [0:0]ALU_Result;
  input jump;

  wire [0:0]ALU_Result;
  wire O;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire jump;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hAACA)) 
    \Using_FPGA.Native 
       (.I0(O),
        .I1(ALU_Result),
        .I2(jump),
        .I3(1'b0),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized33_690
   (\Using_FPGA.Native_0 ,
    O,
    ALU_Result,
    jump);
  output [0:0]\Using_FPGA.Native_0 ;
  input O;
  input [0:0]ALU_Result;
  input jump;

  wire [0:0]ALU_Result;
  wire O;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire jump;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hAACA)) 
    \Using_FPGA.Native 
       (.I0(O),
        .I1(ALU_Result),
        .I2(jump),
        .I3(1'b0),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized33_696
   (\Using_FPGA.Native_0 ,
    O,
    ALU_Result,
    jump);
  output [0:0]\Using_FPGA.Native_0 ;
  input O;
  input [0:0]ALU_Result;
  input jump;

  wire [0:0]ALU_Result;
  wire O;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire jump;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hAACA)) 
    \Using_FPGA.Native 
       (.I0(O),
        .I1(ALU_Result),
        .I2(jump),
        .I3(1'b0),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized33_702
   (\Using_FPGA.Native_0 ,
    O,
    ALU_Result,
    jump);
  output [0:0]\Using_FPGA.Native_0 ;
  input O;
  input [0:0]ALU_Result;
  input jump;

  wire [0:0]ALU_Result;
  wire O;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire jump;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hAACA)) 
    \Using_FPGA.Native 
       (.I0(O),
        .I1(ALU_Result),
        .I2(jump),
        .I3(1'b0),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized33_708
   (\Using_FPGA.Native_0 ,
    O,
    ALU_Result,
    jump);
  output [0:0]\Using_FPGA.Native_0 ;
  input O;
  input [0:0]ALU_Result;
  input jump;

  wire [0:0]ALU_Result;
  wire O;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire jump;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hAACA)) 
    \Using_FPGA.Native 
       (.I0(O),
        .I1(ALU_Result),
        .I2(jump),
        .I3(1'b0),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized33_714
   (\Using_FPGA.Native_0 ,
    O,
    ALU_Result,
    jump);
  output [0:0]\Using_FPGA.Native_0 ;
  input O;
  input [0:0]ALU_Result;
  input jump;

  wire [0:0]ALU_Result;
  wire O;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire jump;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hAACA)) 
    \Using_FPGA.Native 
       (.I0(O),
        .I1(ALU_Result),
        .I2(jump),
        .I3(1'b0),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized33_720
   (\Using_FPGA.Native_0 ,
    O,
    ALU_Result,
    jump);
  output [0:0]\Using_FPGA.Native_0 ;
  input O;
  input [0:0]ALU_Result;
  input jump;

  wire [0:0]ALU_Result;
  wire O;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire jump;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hAACA)) 
    \Using_FPGA.Native 
       (.I0(O),
        .I1(ALU_Result),
        .I2(jump),
        .I3(1'b0),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized33_726
   (\Using_FPGA.Native_0 ,
    O,
    ALU_Result,
    jump);
  output [0:0]\Using_FPGA.Native_0 ;
  input O;
  input [0:0]ALU_Result;
  input jump;

  wire [0:0]ALU_Result;
  wire O;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire jump;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hAACA)) 
    \Using_FPGA.Native 
       (.I0(O),
        .I1(ALU_Result),
        .I2(jump),
        .I3(1'b0),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized33_732
   (\Using_FPGA.Native_0 ,
    O,
    ALU_Result,
    jump);
  output [0:0]\Using_FPGA.Native_0 ;
  input O;
  input [0:0]ALU_Result;
  input jump;

  wire [0:0]ALU_Result;
  wire O;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire jump;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hAACA)) 
    \Using_FPGA.Native 
       (.I0(O),
        .I1(ALU_Result),
        .I2(jump),
        .I3(1'b0),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized33_738
   (\Using_FPGA.Native_0 ,
    O,
    ALU_Result,
    jump);
  output [0:0]\Using_FPGA.Native_0 ;
  input O;
  input [0:0]ALU_Result;
  input jump;

  wire [0:0]ALU_Result;
  wire O;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire jump;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hAACA)) 
    \Using_FPGA.Native 
       (.I0(O),
        .I1(ALU_Result),
        .I2(jump),
        .I3(1'b0),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized33_744
   (\Using_FPGA.Native_0 ,
    O,
    ALU_Result,
    jump);
  output [0:0]\Using_FPGA.Native_0 ;
  input O;
  input [0:0]ALU_Result;
  input jump;

  wire [0:0]ALU_Result;
  wire O;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire jump;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hAACA)) 
    \Using_FPGA.Native 
       (.I0(O),
        .I1(ALU_Result),
        .I2(jump),
        .I3(1'b0),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized33_750
   (\Using_FPGA.Native_0 ,
    O,
    ALU_Result,
    jump);
  output [0:0]\Using_FPGA.Native_0 ;
  input O;
  input [0:0]ALU_Result;
  input jump;

  wire [0:0]ALU_Result;
  wire O;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire jump;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hAACA)) 
    \Using_FPGA.Native 
       (.I0(O),
        .I1(ALU_Result),
        .I2(jump),
        .I3(1'b0),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized33_756
   (\Using_FPGA.Native_0 ,
    O,
    ALU_Result,
    jump);
  output [0:0]\Using_FPGA.Native_0 ;
  input O;
  input [0:0]ALU_Result;
  input jump;

  wire [0:0]ALU_Result;
  wire O;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire jump;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hAACA)) 
    \Using_FPGA.Native 
       (.I0(O),
        .I1(ALU_Result),
        .I2(jump),
        .I3(1'b0),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized33_762
   (\Using_FPGA.Native_0 ,
    O,
    ALU_Result,
    jump);
  output [0:0]\Using_FPGA.Native_0 ;
  input O;
  input [0:0]ALU_Result;
  input jump;

  wire [0:0]ALU_Result;
  wire O;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire jump;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hAACA)) 
    \Using_FPGA.Native 
       (.I0(O),
        .I1(ALU_Result),
        .I2(jump),
        .I3(1'b0),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized33_768
   (\Using_FPGA.Native_0 ,
    O,
    ALU_Result,
    jump);
  output [0:0]\Using_FPGA.Native_0 ;
  input O;
  input [0:0]ALU_Result;
  input jump;

  wire [0:0]ALU_Result;
  wire O;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire jump;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hAACA)) 
    \Using_FPGA.Native 
       (.I0(O),
        .I1(ALU_Result),
        .I2(jump),
        .I3(1'b0),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized33_774
   (\Using_FPGA.Native_0 ,
    O,
    ALU_Result,
    jump);
  output [0:0]\Using_FPGA.Native_0 ;
  input O;
  input [0:0]ALU_Result;
  input jump;

  wire [0:0]ALU_Result;
  wire O;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire jump;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hAACA)) 
    \Using_FPGA.Native 
       (.I0(O),
        .I1(ALU_Result),
        .I2(jump),
        .I3(1'b0),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized33_780
   (\Using_FPGA.Native_0 ,
    O,
    ALU_Result,
    jump);
  output [0:0]\Using_FPGA.Native_0 ;
  input O;
  input [0:0]ALU_Result;
  input jump;

  wire [0:0]ALU_Result;
  wire O;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire jump;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hAACA)) 
    \Using_FPGA.Native 
       (.I0(O),
        .I1(ALU_Result),
        .I2(jump),
        .I3(1'b0),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized33_786
   (\Using_FPGA.Native_0 ,
    O,
    ALU_Result,
    jump);
  output [0:0]\Using_FPGA.Native_0 ;
  input O;
  input [0:0]ALU_Result;
  input jump;

  wire [0:0]ALU_Result;
  wire O;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire jump;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hAACA)) 
    \Using_FPGA.Native 
       (.I0(O),
        .I1(ALU_Result),
        .I2(jump),
        .I3(1'b0),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized33_792
   (\Using_FPGA.Native_0 ,
    O,
    ALU_Result,
    jump);
  output [0:0]\Using_FPGA.Native_0 ;
  input O;
  input [0:0]ALU_Result;
  input jump;

  wire [0:0]ALU_Result;
  wire O;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire jump;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hAACA)) 
    \Using_FPGA.Native 
       (.I0(O),
        .I1(ALU_Result),
        .I2(jump),
        .I3(1'b0),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized33_798
   (\Using_FPGA.Native_0 ,
    pc_Sum,
    ALU_Result,
    jump);
  output [0:0]\Using_FPGA.Native_0 ;
  input pc_Sum;
  input [0:0]ALU_Result;
  input jump;

  wire [0:0]ALU_Result;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire jump;
  wire pc_Sum;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hAACA)) 
    \Using_FPGA.Native 
       (.I0(pc_Sum),
        .I1(ALU_Result),
        .I2(jump),
        .I3(1'b0),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized3_115
   (force_jump2,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    force2);
  output force_jump2;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input force2;

  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire force2;
  wire force_jump2;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h0200)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(1'b0),
        .I3(force2),
        .O(force_jump2));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized5
   (res_forward1_1,
    reg1_Addr,
    Q);
  output res_forward1_1;
  input [1:0]reg1_Addr;
  input [1:0]Q;

  wire [1:0]Q;
  wire [1:0]reg1_Addr;
  wire res_forward1_1;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h8421)) 
    \Using_FPGA.Native 
       (.I0(reg1_Addr[1]),
        .I1(reg1_Addr[0]),
        .I2(Q[1]),
        .I3(Q[0]),
        .O(res_forward1_1));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized5_101
   (res_forward1_2,
    reg1_Addr,
    Q);
  output res_forward1_2;
  input [1:0]reg1_Addr;
  input [1:0]Q;

  wire [1:0]Q;
  wire [1:0]reg1_Addr;
  wire res_forward1_2;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h8421)) 
    \Using_FPGA.Native 
       (.I0(reg1_Addr[1]),
        .I1(reg1_Addr[0]),
        .I2(Q[1]),
        .I3(Q[0]),
        .O(res_forward1_2));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized5_102
   (res_forward2_1,
    imm_Value,
    Q);
  output res_forward2_1;
  input [1:0]imm_Value;
  input [1:0]Q;

  wire [1:0]Q;
  wire [1:0]imm_Value;
  wire res_forward2_1;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h8421)) 
    \Using_FPGA.Native 
       (.I0(imm_Value[1]),
        .I1(imm_Value[0]),
        .I2(Q[1]),
        .I3(Q[0]),
        .O(res_forward2_1));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized5_103
   (res_forward2_2,
    imm_Value,
    Q);
  output res_forward2_2;
  input [1:0]imm_Value;
  input [1:0]Q;

  wire [1:0]Q;
  wire [1:0]imm_Value;
  wire res_forward2_2;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h8421)) 
    \Using_FPGA.Native 
       (.I0(imm_Value[1]),
        .I1(imm_Value[0]),
        .I2(Q[1]),
        .I3(Q[0]),
        .O(res_forward2_2));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized7
   (res_Forward1,
    res_forward1_1,
    res_forward1_2,
    res_forward1_3,
    write_Reg_I_S);
  output res_Forward1;
  input res_forward1_1;
  input res_forward1_2;
  input res_forward1_3;
  input write_Reg_I_S;

  wire res_Forward1;
  wire res_forward1_1;
  wire res_forward1_2;
  wire res_forward1_3;
  wire write_Reg_I_S;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \Using_FPGA.Native 
       (.I0(res_forward1_1),
        .I1(res_forward1_2),
        .I2(res_forward1_3),
        .I3(write_Reg_I_S),
        .O(res_Forward1));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized7_105
   (res_Forward2,
    res_forward2_1,
    res_forward2_2,
    res_forward2_3,
    write_Reg_I_S);
  output res_Forward2;
  input res_forward2_1;
  input res_forward2_2;
  input res_forward2_3;
  input write_Reg_I_S;

  wire res_Forward2;
  wire res_forward2_1;
  wire res_forward2_2;
  wire res_forward2_3;
  wire write_Reg_I_S;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \Using_FPGA.Native 
       (.I0(res_forward2_1),
        .I1(res_forward2_2),
        .I2(res_forward2_3),
        .I3(write_Reg_I_S),
        .O(res_Forward2));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized7_247
   (res_10,
    byte_0,
    byte_1,
    byte_2,
    byte_3);
  output res_10;
  input byte_0;
  input byte_1;
  input byte_2;
  input byte_3;

  wire byte_0;
  wire byte_1;
  wire byte_2;
  wire byte_3;
  wire res_10;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \Using_FPGA.Native 
       (.I0(byte_0),
        .I1(byte_1),
        .I2(byte_2),
        .I3(byte_3),
        .O(res_10));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module block_design_microblaze_0_0_MB_LUT4__parameterized9
   (correct_Carry_Select,
    alu_Op_II,
    \Using_FPGA.Native_0 ,
    use_ALU_Carry21_out);
  output correct_Carry_Select;
  input [0:0]alu_Op_II;
  input \Using_FPGA.Native_0 ;
  input use_ALU_Carry21_out;

  wire \Using_FPGA.Native_0 ;
  wire [0:0]alu_Op_II;
  wire correct_Carry_Select;
  wire use_ALU_Carry21_out;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h00F0)) 
    \Using_FPGA.Native 
       (.I0(alu_Op_II),
        .I1(\Using_FPGA.Native_0 ),
        .I2(use_ALU_Carry21_out),
        .I3(1'b0),
        .O(correct_Carry_Select));
endmodule

module block_design_microblaze_0_0_MB_LUT5
   (of_PipeRun_Select,
    mul_Executing,
    of_Valid_Raw,
    I2118_out,
    \Using_FPGA.Native_0 ,
    dbg_pause);
  output of_PipeRun_Select;
  input mul_Executing;
  input of_Valid_Raw;
  input I2118_out;
  input \Using_FPGA.Native_0 ;
  input dbg_pause;

  wire I2118_out;
  wire \Using_FPGA.Native_0 ;
  wire dbg_pause;
  wire mul_Executing;
  wire of_PipeRun_Select;
  wire of_Valid_Raw;

  (* box_type = "PRIMITIVE" *) 
  LUT5 #(
    .INIT(32'h00000040)) 
    \Using_FPGA.Native 
       (.I0(mul_Executing),
        .I1(of_Valid_Raw),
        .I2(I2118_out),
        .I3(\Using_FPGA.Native_0 ),
        .I4(dbg_pause),
        .O(of_PipeRun_Select));
endmodule

(* ORIG_REF_NAME = "MB_LUT5" *) 
module block_design_microblaze_0_0_MB_LUT5__parameterized1
   (of_PipeRun_without_dready,
    I2118_out,
    mul_Executing,
    of_Valid_Raw,
    \Using_FPGA.Native_0 ,
    dbg_pause,
    load_Store_i,
    Pause_Ack_reg);
  output of_PipeRun_without_dready;
  output I2118_out;
  input mul_Executing;
  input of_Valid_Raw;
  input \Using_FPGA.Native_0 ;
  input dbg_pause;
  input load_Store_i;
  input Pause_Ack_reg;

  wire I2118_out;
  wire Pause_Ack_reg;
  wire \Using_FPGA.Native_0 ;
  wire dbg_pause;
  wire load_Store_i;
  wire mul_Executing;
  wire of_PipeRun_without_dready;
  wire of_Valid_Raw;

  (* box_type = "PRIMITIVE" *) 
  LUT5 #(
    .INIT(32'h00000004)) 
    \Using_FPGA.Native 
       (.I0(mul_Executing),
        .I1(of_Valid_Raw),
        .I2(I2118_out),
        .I3(\Using_FPGA.Native_0 ),
        .I4(dbg_pause),
        .O(of_PipeRun_without_dready));
  LUT2 #(
    .INIT(4'h2)) 
    \Using_FPGA.Native_i_1__120 
       (.I0(load_Store_i),
        .I1(Pause_Ack_reg),
        .O(I2118_out));
endmodule

module block_design_microblaze_0_0_MB_LUT6
   (alu_AddSub_1,
    Op2,
    alu_Op,
    Shifted);
  output alu_AddSub_1;
  input Op2;
  input [0:1]alu_Op;
  input Shifted;

  wire Op2;
  wire Shifted;
  wire alu_AddSub_1;
  wire [0:1]alu_Op;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Op2),
        .I1(alu_Op[0]),
        .I2(Shifted),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O(alu_AddSub_1));
endmodule

module block_design_microblaze_0_0_MB_LUT6_2
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    PC_OF,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]PC_OF;
  input opsel1_SPR;

  wire [0:0]PC_OF;
  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(PC_OF),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2_831
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    PC_OF,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]PC_OF;
  input opsel1_SPR;

  wire [0:0]PC_OF;
  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(PC_OF),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2_835
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    PC_OF,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]PC_OF;
  input opsel1_SPR;

  wire [0:0]PC_OF;
  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(PC_OF),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2_839
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    PC_OF,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]PC_OF;
  input opsel1_SPR;

  wire [0:0]PC_OF;
  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(PC_OF),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2_843
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    PC_OF,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]PC_OF;
  input opsel1_SPR;

  wire [0:0]PC_OF;
  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(PC_OF),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2_847
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    PC_OF,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]PC_OF;
  input opsel1_SPR;

  wire [0:0]PC_OF;
  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(PC_OF),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2_851
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    PC_OF,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]PC_OF;
  input opsel1_SPR;

  wire [0:0]PC_OF;
  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(PC_OF),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2_855
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    I3,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input I3;
  input opsel1_SPR;

  wire I3;
  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(I3),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2_859
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    I3_11,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input I3_11;
  input opsel1_SPR;

  wire I3_11;
  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(I3_11),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2_863
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    PC_OF,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]PC_OF;
  input opsel1_SPR;

  wire [0:0]PC_OF;
  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(PC_OF),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2_867
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    I3_12,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input I3_12;
  input opsel1_SPR;

  wire I3_12;
  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(I3_12),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2_871
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    I3_13,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input I3_13;
  input opsel1_SPR;

  wire I3_13;
  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(I3_13),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2_875
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    I3_14,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input I3_14;
  input opsel1_SPR;

  wire I3_14;
  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(I3_14),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2_879
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    I3_5,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input I3_5;
  input opsel1_SPR;

  wire I3_5;
  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(I3_5),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2_883
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    I3_7,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input I3_7;
  input opsel1_SPR;

  wire I3_7;
  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(I3_7),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2_887
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    I3_9,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input I3_9;
  input opsel1_SPR;

  wire I3_9;
  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(I3_9),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2_891
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    PC_OF,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]PC_OF;
  input opsel1_SPR;

  wire [0:0]PC_OF;
  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(PC_OF),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2_895
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    PC_OF,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]PC_OF;
  input opsel1_SPR;

  wire [0:0]PC_OF;
  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(PC_OF),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2_899
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    PC_OF,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]PC_OF;
  input opsel1_SPR;

  wire [0:0]PC_OF;
  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(PC_OF),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2_903
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    PC_OF,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]PC_OF;
  input opsel1_SPR;

  wire [0:0]PC_OF;
  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(PC_OF),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2_907
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    PC_OF,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]PC_OF;
  input opsel1_SPR;

  wire [0:0]PC_OF;
  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(PC_OF),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2_911
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    PC_OF,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]PC_OF;
  input opsel1_SPR;

  wire [0:0]PC_OF;
  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(PC_OF),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2_915
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    PC_OF,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]PC_OF;
  input opsel1_SPR;

  wire [0:0]PC_OF;
  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(PC_OF),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2_919
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    PC_OF,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]PC_OF;
  input opsel1_SPR;

  wire [0:0]PC_OF;
  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(PC_OF),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2_923
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    PC_OF,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]PC_OF;
  input opsel1_SPR;

  wire [0:0]PC_OF;
  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(PC_OF),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2_927
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    PC_OF,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]PC_OF;
  input opsel1_SPR;

  wire [0:0]PC_OF;
  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(PC_OF),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2_931
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    PC_OF,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]PC_OF;
  input opsel1_SPR;

  wire [0:0]PC_OF;
  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(PC_OF),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2_935
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    PC_OF,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]PC_OF;
  input opsel1_SPR;

  wire [0:0]PC_OF;
  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(PC_OF),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2_939
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    PC_OF,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]PC_OF;
  input opsel1_SPR;

  wire [0:0]PC_OF;
  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(PC_OF),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2_943
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    PC_OF,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]PC_OF;
  input opsel1_SPR;

  wire [0:0]PC_OF;
  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(PC_OF),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2_947
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    PC_OF,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]PC_OF;
  input opsel1_SPR;

  wire [0:0]PC_OF;
  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(PC_OF),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2_951
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    I3_15,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input I3_15;
  input opsel1_SPR;

  wire I3_15;
  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(I3_15),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized10
   (D,
    byte_selects_1,
    byte_selects_0,
    isbyte,
    isdoublet);
  output [1:0]D;
  input byte_selects_1;
  input byte_selects_0;
  input isbyte;
  input isdoublet;

  wire [1:0]D;
  wire byte_selects_0;
  wire byte_selects_1;
  wire isbyte;
  wire isdoublet;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h2A2F2A2F8A8F8A8F)) 
    \Using_FPGA.Native 
       (.I0(byte_selects_1),
        .I1(byte_selects_0),
        .I2(isbyte),
        .I3(isdoublet),
        .I4(1'b0),
        .I5(1'b1),
        .O5(D[0]),
        .O6(D[1]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized12
   (D,
    byte_selects_1,
    byte_selects_0,
    isbyte,
    isdoublet);
  output [1:0]D;
  input byte_selects_1;
  input byte_selects_0;
  input isbyte;
  input isdoublet;

  wire [1:0]D;
  wire byte_selects_0;
  wire byte_selects_1;
  wire isbyte;
  wire isdoublet;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h151F151F454F454F)) 
    \Using_FPGA.Native 
       (.I0(byte_selects_1),
        .I1(byte_selects_0),
        .I2(isbyte),
        .I3(isdoublet),
        .I4(1'b0),
        .I5(1'b1),
        .O5(D[0]),
        .O6(D[1]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized14
   (D,
    low_addr_i_0,
    low_addr_i_1,
    isbyte,
    isdoublet);
  output [1:0]D;
  input low_addr_i_0;
  input low_addr_i_1;
  input isbyte;
  input isdoublet;

  wire [1:0]D;
  wire isbyte;
  wire isdoublet;
  wire low_addr_i_0;
  wire low_addr_i_1;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h0CC00CC000A000A0)) 
    \Using_FPGA.Native 
       (.I0(low_addr_i_0),
        .I1(low_addr_i_1),
        .I2(isbyte),
        .I3(isdoublet),
        .I4(1'b0),
        .I5(1'b1),
        .O5(D[0]),
        .O6(D[1]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized16
   (sel_Write_Mux_MSB,
    isbyte,
    isdoublet);
  output [1:0]sel_Write_Mux_MSB;
  input isbyte;
  input isdoublet;

  wire isbyte;
  wire isdoublet;
  wire [1:0]sel_Write_Mux_MSB;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h1111111155555555)) 
    \Using_FPGA.Native 
       (.I0(isbyte),
        .I1(isdoublet),
        .I2(1'b0),
        .I3(1'b0),
        .I4(1'b0),
        .I5(1'b1),
        .O5(sel_Write_Mux_MSB[0]),
        .O6(sel_Write_Mux_MSB[1]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized2
   (DI,
    S,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[22] ,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[22]_0 );
  output DI;
  output S;
  input [0:0]\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[22] ;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[22]_0 ;

  wire [0:0]\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[22] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[22]_0 ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[22] ),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[22]_0 ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized2_1000
   (DI,
    S,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[26] ,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[26]_0 );
  output DI;
  output S;
  input [0:0]\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[26] ;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[26]_0 ;

  wire [0:0]\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[26] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[26]_0 ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[26] ),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[26]_0 ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized2_1002
   (DI,
    S,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[27] ,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[27]_0 );
  output DI;
  output S;
  input [0:0]\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[27] ;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[27]_0 ;

  wire [0:0]\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[27] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[27]_0 ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[27] ),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[27]_0 ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized2_1004
   (DI,
    S,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[28] ,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[28]_0 );
  output DI;
  output S;
  input [0:0]\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[28] ;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[28]_0 ;

  wire [0:0]\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[28] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[28]_0 ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[28] ),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[28]_0 ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized2_1006
   (DI,
    S,
    \Using_FPGA.Native_I2 ,
    alu_Op,
    Op1_Shift);
  output DI;
  output S;
  input \Using_FPGA.Native_I2 ;
  input [0:1]alu_Op;
  input Op1_Shift;

  wire DI;
  wire Op1_Shift;
  wire S;
  wire \Using_FPGA.Native_I2 ;
  wire [0:1]alu_Op;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_I2 ),
        .I1(alu_Op[0]),
        .I2(Op1_Shift),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized2_1008
   (DI,
    S,
    B,
    alu_Op,
    \Using_FPGA.Native_I2 );
  output DI;
  output S;
  input [0:0]B;
  input [0:1]alu_Op;
  input \Using_FPGA.Native_I2 ;

  wire [0:0]B;
  wire DI;
  wire S;
  wire \Using_FPGA.Native_I2 ;
  wire [0:1]alu_Op;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(B),
        .I1(alu_Op[0]),
        .I2(\Using_FPGA.Native_I2 ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized2_1010
   (DI,
    S,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[29] ,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[29]_0 );
  output DI;
  output S;
  input [0:0]\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[29] ;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[29]_0 ;

  wire [0:0]\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[29] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[29]_0 ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[29] ),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[29]_0 ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized2_1012
   (DI,
    S,
    B,
    alu_Op,
    EX_Op1);
  output DI;
  output S;
  input [0:0]B;
  input [0:1]alu_Op;
  input EX_Op1;

  wire [0:0]B;
  wire DI;
  wire EX_Op1;
  wire S;
  wire [0:1]alu_Op;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(B),
        .I1(alu_Op[0]),
        .I2(EX_Op1),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized2_1014
   (DI,
    S,
    B,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3] );
  output DI;
  output S;
  input [0:0]B;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3] ;
  wire [0:0]B;
  wire DI;
  wire S;
  wire [0:1]alu_Op;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(B),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized2_1016
   (DI,
    S,
    B,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[4] );
  output DI;
  output S;
  input [0:0]B;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[4] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[4] ;
  wire [0:0]B;
  wire DI;
  wire S;
  wire [0:1]alu_Op;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(B),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[4] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized2_1018
   (DI,
    S,
    B,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[5] );
  output DI;
  output S;
  input [0:0]B;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[5] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[5] ;
  wire [0:0]B;
  wire DI;
  wire S;
  wire [0:1]alu_Op;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(B),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[5] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized2_1020
   (DI,
    S,
    B,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[6] );
  output DI;
  output S;
  input [0:0]B;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[6] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[6] ;
  wire [0:0]B;
  wire DI;
  wire S;
  wire [0:1]alu_Op;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(B),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[6] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized2_1022
   (DI,
    S,
    B,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[7] );
  output DI;
  output S;
  input [0:0]B;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[7] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[7] ;
  wire [0:0]B;
  wire DI;
  wire S;
  wire [0:1]alu_Op;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(B),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[7] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized2_1024
   (DI,
    S,
    B,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[8] );
  output DI;
  output S;
  input [0:0]B;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[8] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[8] ;
  wire [0:0]B;
  wire DI;
  wire S;
  wire [0:1]alu_Op;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(B),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[8] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized2_1026
   (DI,
    S,
    B,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[9] );
  output DI;
  output S;
  input [0:0]B;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[9] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[9] ;
  wire [0:0]B;
  wire DI;
  wire S;
  wire [0:1]alu_Op;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(B),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[9] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized2_1028
   (DI,
    S,
    B,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[10] );
  output DI;
  output S;
  input [0:0]B;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[10] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[10] ;
  wire [0:0]B;
  wire DI;
  wire S;
  wire [0:1]alu_Op;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(B),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[10] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized2_1030
   (DI,
    S,
    B,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[11] );
  output DI;
  output S;
  input [0:0]B;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[11] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[11] ;
  wire [0:0]B;
  wire DI;
  wire S;
  wire [0:1]alu_Op;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(B),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[11] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized2_1032
   (DI,
    S,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30] ,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30]_0 );
  output DI;
  output S;
  input [0:0]\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30] ;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30]_0 ;

  wire [0:0]\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30]_0 ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30] ),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30]_0 ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized2_1034
   (DI,
    S,
    B,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[12] );
  output DI;
  output S;
  input [0:0]B;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[12] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[12] ;
  wire [0:0]B;
  wire DI;
  wire S;
  wire [0:1]alu_Op;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(B),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[12] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized2_1036
   (DI,
    S,
    B,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[13] );
  output DI;
  output S;
  input [0:0]B;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[13] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[13] ;
  wire [0:0]B;
  wire DI;
  wire S;
  wire [0:1]alu_Op;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(B),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[13] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized2_1038
   (DI,
    S,
    B,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[14] );
  output DI;
  output S;
  input [0:0]B;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[14] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[14] ;
  wire [0:0]B;
  wire DI;
  wire S;
  wire [0:1]alu_Op;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(B),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[14] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized2_1040
   (DI,
    S,
    B,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[15] );
  output DI;
  output S;
  input [0:0]B;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[15] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[15] ;
  wire [0:0]B;
  wire DI;
  wire S;
  wire [0:1]alu_Op;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(B),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[15] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized2_1042
   (DI,
    S,
    B,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[16] );
  output DI;
  output S;
  input [0:0]B;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[16] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[16] ;
  wire [0:0]B;
  wire DI;
  wire S;
  wire [0:1]alu_Op;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(B),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[16] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized2_1044
   (DI,
    S,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[17] ,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[17]_0 );
  output DI;
  output S;
  input [0:0]\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[17] ;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[17]_0 ;

  wire [0:0]\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[17] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[17]_0 ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[17] ),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[17]_0 ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized2_1046
   (DI,
    S,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[18] ,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[18]_0 );
  output DI;
  output S;
  input [0:0]\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[18] ;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[18]_0 ;

  wire [0:0]\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[18] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[18]_0 ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[18] ),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[18]_0 ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized2_1048
   (DI,
    S,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[19] ,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[19]_0 );
  output DI;
  output S;
  input [0:0]\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[19] ;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[19]_0 ;

  wire [0:0]\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[19] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[19]_0 ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[19] ),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[19]_0 ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized2_1050
   (DI,
    S,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[20] ,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[20]_0 );
  output DI;
  output S;
  input [0:0]\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[20] ;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[20]_0 ;

  wire [0:0]\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[20] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[20]_0 ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[20] ),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[20]_0 ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized2_1052
   (DI,
    S,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[21] ,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[21]_0 );
  output DI;
  output S;
  input [0:0]\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[21] ;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[21]_0 ;

  wire [0:0]\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[21] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[21]_0 ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[21] ),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[21]_0 ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized2_994
   (DI,
    S,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[23] ,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[23]_0 );
  output DI;
  output S;
  input [0:0]\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[23] ;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[23]_0 ;

  wire [0:0]\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[23] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[23]_0 ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[23] ),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[23]_0 ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized2_996
   (DI,
    S,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[24] ,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[24]_0 );
  output DI;
  output S;
  input [0:0]\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[24] ;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[24]_0 ;

  wire [0:0]\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[24] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[24]_0 ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[24] ),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[24]_0 ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized2_998
   (DI,
    S,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[25] ,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[25]_0 );
  output DI;
  output S;
  input [0:0]\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[25] ;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[25]_0 ;

  wire [0:0]\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[25] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[25]_0 ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[25] ),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[25]_0 ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4
   (Y,
    Instr,
    LOCKSTEP_Master_Out);
  output [1:0]Y;
  input [1:0]Instr;
  input [2:0]LOCKSTEP_Master_Out;

  wire [1:0]Instr;
  wire [2:0]LOCKSTEP_Master_Out;
  wire [1:0]Y;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Instr[1]),
        .I1(LOCKSTEP_Master_Out[1]),
        .I2(Instr[0]),
        .I3(LOCKSTEP_Master_Out[0]),
        .I4(LOCKSTEP_Master_Out[2]),
        .I5(1'b1),
        .O5(Y[1]),
        .O6(Y[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_1
   (Y,
    Instr,
    LOCKSTEP_Master_Out);
  output [1:0]Y;
  input [1:0]Instr;
  input [2:0]LOCKSTEP_Master_Out;

  wire [1:0]Instr;
  wire [2:0]LOCKSTEP_Master_Out;
  wire [1:0]Y;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Instr[1]),
        .I1(LOCKSTEP_Master_Out[1]),
        .I2(Instr[0]),
        .I3(LOCKSTEP_Master_Out[0]),
        .I4(LOCKSTEP_Master_Out[2]),
        .I5(1'b1),
        .O5(Y[1]),
        .O6(Y[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_10
   (Y,
    Instr_Data,
    Instr,
    LOCKSTEP_Master_Out,
    \Using_FSL_Links.FSL_Atomic_reg );
  output [1:0]Y;
  output [0:0]Instr_Data;
  input [1:0]Instr;
  input [2:0]LOCKSTEP_Master_Out;
  input [5:0]\Using_FSL_Links.FSL_Atomic_reg ;

  wire [1:0]Instr;
  wire [0:0]Instr_Data;
  wire [2:0]LOCKSTEP_Master_Out;
  wire \Use_unisim.MB_SRL16E_I1_i_2_n_0 ;
  wire [5:0]\Using_FSL_Links.FSL_Atomic_reg ;
  wire [1:0]Y;

  LUT3 #(
    .INIT(8'h08)) 
    \Use_unisim.MB_SRL16E_I1_i_1 
       (.I0(\Use_unisim.MB_SRL16E_I1_i_2_n_0 ),
        .I1(\Using_FSL_Links.FSL_Atomic_reg [4]),
        .I2(\Using_FSL_Links.FSL_Atomic_reg [5]),
        .O(Instr_Data));
  LUT6 #(
    .INIT(64'h00000000E2000000)) 
    \Use_unisim.MB_SRL16E_I1_i_2 
       (.I0(\Using_FSL_Links.FSL_Atomic_reg [0]),
        .I1(\Using_FSL_Links.FSL_Atomic_reg [3]),
        .I2(Y[0]),
        .I3(Y[1]),
        .I4(\Using_FSL_Links.FSL_Atomic_reg [1]),
        .I5(\Using_FSL_Links.FSL_Atomic_reg [2]),
        .O(\Use_unisim.MB_SRL16E_I1_i_2_n_0 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Instr[1]),
        .I1(LOCKSTEP_Master_Out[1]),
        .I2(Instr[0]),
        .I3(LOCKSTEP_Master_Out[0]),
        .I4(LOCKSTEP_Master_Out[2]),
        .I5(1'b1),
        .O5(Y[1]),
        .O6(Y[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_1057
   (D,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[15] ,
    isbyte);
  output [1:0]D;
  input [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[15] ;
  input isbyte;

  wire [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[15] ;
  wire [1:0]D;
  wire isbyte;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[15] [3]),
        .I1(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[15] [1]),
        .I2(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[15] [2]),
        .I3(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[15] [0]),
        .I4(isbyte),
        .I5(1'b1),
        .O5(D[1]),
        .O6(D[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_1058
   (D,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[14] ,
    isbyte);
  output [1:0]D;
  input [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[14] ;
  input isbyte;

  wire [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[14] ;
  wire [1:0]D;
  wire isbyte;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[14] [3]),
        .I1(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[14] [1]),
        .I2(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[14] [2]),
        .I3(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[14] [0]),
        .I4(isbyte),
        .I5(1'b1),
        .O5(D[1]),
        .O6(D[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_1059
   (D,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[13] ,
    isbyte);
  output [1:0]D;
  input [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[13] ;
  input isbyte;

  wire [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[13] ;
  wire [1:0]D;
  wire isbyte;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[13] [3]),
        .I1(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[13] [1]),
        .I2(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[13] [2]),
        .I3(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[13] [0]),
        .I4(isbyte),
        .I5(1'b1),
        .O5(D[1]),
        .O6(D[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_1060
   (D,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[12] ,
    isbyte);
  output [1:0]D;
  input [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[12] ;
  input isbyte;

  wire [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[12] ;
  wire [1:0]D;
  wire isbyte;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[12] [3]),
        .I1(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[12] [1]),
        .I2(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[12] [2]),
        .I3(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[12] [0]),
        .I4(isbyte),
        .I5(1'b1),
        .O5(D[1]),
        .O6(D[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_1061
   (D,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] ,
    sel_Write_Mux_MSB);
  output [1:0]D;
  input [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] ;
  input [1:0]sel_Write_Mux_MSB;

  wire [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] ;
  wire [1:0]D;
  wire [1:0]sel_Write_Mux_MSB;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [0]),
        .I1(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [2]),
        .I2(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [1]),
        .I3(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [3]),
        .I4(sel_Write_Mux_MSB[1]),
        .I5(sel_Write_Mux_MSB[0]),
        .O5(D[0]),
        .O6(D[1]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_1062
   (D,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[22] ,
    sel_Write_Mux_MSB);
  output [1:0]D;
  input [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[22] ;
  input [1:0]sel_Write_Mux_MSB;

  wire [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[22] ;
  wire [1:0]D;
  wire [1:0]sel_Write_Mux_MSB;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[22] [0]),
        .I1(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[22] [2]),
        .I2(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[22] [1]),
        .I3(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[22] [3]),
        .I4(sel_Write_Mux_MSB[1]),
        .I5(sel_Write_Mux_MSB[0]),
        .O5(D[0]),
        .O6(D[1]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_1063
   (D,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[21] ,
    sel_Write_Mux_MSB);
  output [1:0]D;
  input [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[21] ;
  input [1:0]sel_Write_Mux_MSB;

  wire [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[21] ;
  wire [1:0]D;
  wire [1:0]sel_Write_Mux_MSB;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[21] [0]),
        .I1(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[21] [2]),
        .I2(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[21] [1]),
        .I3(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[21] [3]),
        .I4(sel_Write_Mux_MSB[1]),
        .I5(sel_Write_Mux_MSB[0]),
        .O5(D[0]),
        .O6(D[1]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_1064
   (D,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[20] ,
    sel_Write_Mux_MSB);
  output [1:0]D;
  input [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[20] ;
  input [1:0]sel_Write_Mux_MSB;

  wire [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[20] ;
  wire [1:0]D;
  wire [1:0]sel_Write_Mux_MSB;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[20] [0]),
        .I1(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[20] [2]),
        .I2(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[20] [1]),
        .I3(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[20] [3]),
        .I4(sel_Write_Mux_MSB[1]),
        .I5(sel_Write_Mux_MSB[0]),
        .O5(D[0]),
        .O6(D[1]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_1065
   (D,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[19] ,
    sel_Write_Mux_MSB);
  output [1:0]D;
  input [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[19] ;
  input [1:0]sel_Write_Mux_MSB;

  wire [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[19] ;
  wire [1:0]D;
  wire [1:0]sel_Write_Mux_MSB;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[19] [0]),
        .I1(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[19] [2]),
        .I2(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[19] [1]),
        .I3(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[19] [3]),
        .I4(sel_Write_Mux_MSB[1]),
        .I5(sel_Write_Mux_MSB[0]),
        .O5(D[0]),
        .O6(D[1]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_1066
   (D,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[18] ,
    sel_Write_Mux_MSB);
  output [1:0]D;
  input [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[18] ;
  input [1:0]sel_Write_Mux_MSB;

  wire [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[18] ;
  wire [1:0]D;
  wire [1:0]sel_Write_Mux_MSB;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[18] [0]),
        .I1(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[18] [2]),
        .I2(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[18] [1]),
        .I3(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[18] [3]),
        .I4(sel_Write_Mux_MSB[1]),
        .I5(sel_Write_Mux_MSB[0]),
        .O5(D[0]),
        .O6(D[1]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_1067
   (D,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[17] ,
    sel_Write_Mux_MSB);
  output [1:0]D;
  input [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[17] ;
  input [1:0]sel_Write_Mux_MSB;

  wire [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[17] ;
  wire [1:0]D;
  wire [1:0]sel_Write_Mux_MSB;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[17] [0]),
        .I1(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[17] [2]),
        .I2(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[17] [1]),
        .I3(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[17] [3]),
        .I4(sel_Write_Mux_MSB[1]),
        .I5(sel_Write_Mux_MSB[0]),
        .O5(D[0]),
        .O6(D[1]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_1068
   (D,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[16] ,
    sel_Write_Mux_MSB);
  output [1:0]D;
  input [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[16] ;
  input [1:0]sel_Write_Mux_MSB;

  wire [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[16] ;
  wire [1:0]D;
  wire [1:0]sel_Write_Mux_MSB;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[16] [0]),
        .I1(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[16] [2]),
        .I2(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[16] [1]),
        .I3(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[16] [3]),
        .I4(sel_Write_Mux_MSB[1]),
        .I5(sel_Write_Mux_MSB[0]),
        .O5(D[0]),
        .O6(D[1]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_11
   (Y,
    Instr,
    LOCKSTEP_Master_Out);
  output [1:0]Y;
  input [1:0]Instr;
  input [2:0]LOCKSTEP_Master_Out;

  wire [1:0]Instr;
  wire [2:0]LOCKSTEP_Master_Out;
  wire [1:0]Y;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Instr[1]),
        .I1(LOCKSTEP_Master_Out[1]),
        .I2(Instr[0]),
        .I3(LOCKSTEP_Master_Out[0]),
        .I4(LOCKSTEP_Master_Out[2]),
        .I5(1'b1),
        .O5(Y[1]),
        .O6(Y[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_12
   (Y,
    Instr,
    LOCKSTEP_Master_Out);
  output [1:0]Y;
  input [1:0]Instr;
  input [2:0]LOCKSTEP_Master_Out;

  wire [1:0]Instr;
  wire [2:0]LOCKSTEP_Master_Out;
  wire [1:0]Y;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Instr[1]),
        .I1(LOCKSTEP_Master_Out[1]),
        .I2(Instr[0]),
        .I3(LOCKSTEP_Master_Out[0]),
        .I4(LOCKSTEP_Master_Out[2]),
        .I5(1'b1),
        .O5(Y[1]),
        .O6(Y[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_13
   (Y,
    Instr,
    LOCKSTEP_Master_Out);
  output [1:0]Y;
  input [1:0]Instr;
  input [2:0]LOCKSTEP_Master_Out;

  wire [1:0]Instr;
  wire [2:0]LOCKSTEP_Master_Out;
  wire [1:0]Y;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Instr[1]),
        .I1(LOCKSTEP_Master_Out[1]),
        .I2(Instr[0]),
        .I3(LOCKSTEP_Master_Out[0]),
        .I4(LOCKSTEP_Master_Out[2]),
        .I5(1'b1),
        .O5(Y[1]),
        .O6(Y[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_14
   (Y,
    Instr,
    LOCKSTEP_Master_Out);
  output [1:0]Y;
  input [1:0]Instr;
  input [2:0]LOCKSTEP_Master_Out;

  wire [1:0]Instr;
  wire [2:0]LOCKSTEP_Master_Out;
  wire [1:0]Y;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Instr[1]),
        .I1(LOCKSTEP_Master_Out[1]),
        .I2(Instr[0]),
        .I3(LOCKSTEP_Master_Out[0]),
        .I4(LOCKSTEP_Master_Out[2]),
        .I5(1'b1),
        .O5(Y[1]),
        .O6(Y[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_15
   (Y,
    Instr,
    LOCKSTEP_Master_Out);
  output [1:0]Y;
  input [1:0]Instr;
  input [2:0]LOCKSTEP_Master_Out;

  wire [1:0]Instr;
  wire [2:0]LOCKSTEP_Master_Out;
  wire [1:0]Y;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Instr[1]),
        .I1(LOCKSTEP_Master_Out[1]),
        .I2(Instr[0]),
        .I3(LOCKSTEP_Master_Out[0]),
        .I4(LOCKSTEP_Master_Out[2]),
        .I5(1'b1),
        .O5(Y[1]),
        .O6(Y[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_168
   (O6,
    D,
    \Using_FPGA.Native_0 ,
    Op1_Shift,
    \C[2]_i_5 ,
    \C[2]_i_5_0 ,
    \C[2]_i_5_1 ,
    \C[2]_i_5_2 ,
    \C_reg[12] ,
    B,
    \C_reg[12]_0 ,
    \C_reg[12]_1 ,
    \C_reg[12]_2 ,
    \C_reg[12]_3 ,
    \C_reg[0] ,
    \C_reg[12]_4 ,
    \C_reg[0]_0 ,
    \C_reg[0]_1 ,
    \C_reg[0]_2 ,
    \C_reg[0]_3 ,
    \C_reg[0]_4 );
  output O6;
  output [1:0]D;
  output \Using_FPGA.Native_0 ;
  input Op1_Shift;
  input \C[2]_i_5 ;
  input \C[2]_i_5_0 ;
  input \C[2]_i_5_1 ;
  input \C[2]_i_5_2 ;
  input \C_reg[12] ;
  input [2:0]B;
  input \C_reg[12]_0 ;
  input \C_reg[12]_1 ;
  input \C_reg[12]_2 ;
  input \C_reg[12]_3 ;
  input \C_reg[0] ;
  input \C_reg[12]_4 ;
  input \C_reg[0]_0 ;
  input \C_reg[0]_1 ;
  input \C_reg[0]_2 ;
  input \C_reg[0]_3 ;
  input \C_reg[0]_4 ;

  wire [2:0]B;
  wire \C[0]_i_3_n_0 ;
  wire \C[2]_i_5 ;
  wire \C[2]_i_5_0 ;
  wire \C[2]_i_5_1 ;
  wire \C[2]_i_5_2 ;
  wire \C_reg[0] ;
  wire \C_reg[0]_0 ;
  wire \C_reg[0]_1 ;
  wire \C_reg[0]_2 ;
  wire \C_reg[0]_3 ;
  wire \C_reg[0]_4 ;
  wire \C_reg[12] ;
  wire \C_reg[12]_0 ;
  wire \C_reg[12]_1 ;
  wire \C_reg[12]_2 ;
  wire \C_reg[12]_3 ;
  wire \C_reg[12]_4 ;
  wire [1:0]D;
  wire O5;
  wire O6;
  wire Op1_Shift;
  wire \Using_FPGA.Native_0 ;

  LUT6 #(
    .INIT(64'h30053F0530F53FF5)) 
    \C[0]_i_2 
       (.I0(\C[0]_i_3_n_0 ),
        .I1(\C_reg[12]_0 ),
        .I2(B[2]),
        .I3(B[1]),
        .I4(\C_reg[0]_0 ),
        .I5(\C_reg[0]_1 ),
        .O(D[1]));
  LUT6 #(
    .INIT(64'h00330F55FF330F55)) 
    \C[0]_i_3 
       (.I0(O5),
        .I1(\C_reg[0]_2 ),
        .I2(\C_reg[0]_3 ),
        .I3(B[0]),
        .I4(\C_reg[0] ),
        .I5(\C_reg[0]_4 ),
        .O(\C[0]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h0530053FF530F53F)) 
    \C[12]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\C_reg[12] ),
        .I2(B[2]),
        .I3(B[1]),
        .I4(\C_reg[12]_0 ),
        .I5(\C_reg[12]_1 ),
        .O(D[0]));
  LUT6 #(
    .INIT(64'h00330F55FF330F55)) 
    \C[4]_i_2 
       (.I0(O6),
        .I1(\C_reg[12]_2 ),
        .I2(\C_reg[12]_3 ),
        .I3(B[0]),
        .I4(\C_reg[0] ),
        .I5(\C_reg[12]_4 ),
        .O(\Using_FPGA.Native_0 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Op1_Shift),
        .I1(\C[2]_i_5 ),
        .I2(\C[2]_i_5_0 ),
        .I3(\C[2]_i_5_1 ),
        .I4(\C[2]_i_5_2 ),
        .I5(1'b1),
        .O5(O5),
        .O6(O6));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_169
   (Other_Result,
    Last_Mux_1_0,
    Last_Mux_1_31,
    Last_Mux_1_16,
    Last_Mux_1_15,
    \Using_FPGA.Native_i_1__96_0 ,
    Q,
    \Using_FPGA.Native_0 ,
    p_2_in89_in,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 );
  output [1:0]Other_Result;
  input Last_Mux_1_0;
  input Last_Mux_1_31;
  input Last_Mux_1_16;
  input Last_Mux_1_15;
  input \Using_FPGA.Native_i_1__96_0 ;
  input [1:0]Q;
  input [1:0]\Using_FPGA.Native_0 ;
  input p_2_in89_in;
  input [1:0]\Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;

  wire Last_Mux_1_0;
  wire Last_Mux_1_15;
  wire Last_Mux_1_16;
  wire Last_Mux_1_31;
  wire [1:0]Other_Result;
  wire [1:0]Q;
  wire [1:0]\Using_FPGA.Native_0 ;
  wire [1:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_i_1__96_0 ;
  wire barrel_result_i_15;
  wire barrel_result_msh;
  wire p_2_in89_in;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Last_Mux_1_0),
        .I1(Last_Mux_1_31),
        .I2(Last_Mux_1_16),
        .I3(Last_Mux_1_15),
        .I4(\Using_FPGA.Native_i_1__96_0 ),
        .I5(1'b1),
        .O5(barrel_result_msh),
        .O6(barrel_result_i_15));
  LUT5 #(
    .INIT(32'hFFFFE320)) 
    \Using_FPGA.Native_i_1__112 
       (.I0(barrel_result_msh),
        .I1(Q[1]),
        .I2(\Using_FPGA.Native_0 [1]),
        .I3(\Using_FPGA.Native_2 ),
        .I4(\Using_FPGA.Native_1 [1]),
        .O(Other_Result[1]));
  LUT5 #(
    .INIT(32'hFFFFE320)) 
    \Using_FPGA.Native_i_1__96 
       (.I0(barrel_result_i_15),
        .I1(Q[0]),
        .I2(\Using_FPGA.Native_0 [0]),
        .I3(p_2_in89_in),
        .I4(\Using_FPGA.Native_1 [0]),
        .O(Other_Result[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_170
   (Last_Mux_1_31,
    Last_Mux_1_15,
    Q,
    I3,
    B);
  output Last_Mux_1_31;
  output Last_Mux_1_15;
  input [1:0]Q;
  input I3;
  input [0:0]B;

  wire [0:0]B;
  wire I3;
  wire Last_Mux_1_15;
  wire Last_Mux_1_31;
  wire [1:0]Q;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[0]),
        .I3(I3),
        .I4(B),
        .I5(1'b1),
        .O5(Last_Mux_1_31),
        .O6(Last_Mux_1_15));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_171
   (\Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    D,
    \Using_FPGA.Native_3 ,
    \C[13]_i_2 ,
    \C[13]_i_2_0 ,
    \C[13]_i_2_1 ,
    \C[13]_i_2_2 ,
    \C[13]_i_2_3 ,
    \C_reg[20] ,
    \C_reg[20]_0 ,
    B,
    \C_reg[6] ,
    \C_reg[20]_1 ,
    \C_reg[6]_0 ,
    \C_reg[6]_1 ,
    \C_reg[6]_2 ,
    \C_reg[6]_3 ,
    \C_reg[6]_4 ,
    \C_reg[6]_5 );
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  output [0:0]D;
  output \Using_FPGA.Native_3 ;
  input \C[13]_i_2 ;
  input \C[13]_i_2_0 ;
  input \C[13]_i_2_1 ;
  input \C[13]_i_2_2 ;
  input \C[13]_i_2_3 ;
  input \C_reg[20] ;
  input \C_reg[20]_0 ;
  input [2:0]B;
  input \C_reg[6] ;
  input \C_reg[20]_1 ;
  input \C_reg[6]_0 ;
  input \C_reg[6]_1 ;
  input \C_reg[6]_2 ;
  input \C_reg[6]_3 ;
  input \C_reg[6]_4 ;
  input \C_reg[6]_5 ;

  wire [2:0]B;
  wire \C[13]_i_2 ;
  wire \C[13]_i_2_0 ;
  wire \C[13]_i_2_1 ;
  wire \C[13]_i_2_2 ;
  wire \C[13]_i_2_3 ;
  wire \C_reg[20] ;
  wire \C_reg[20]_0 ;
  wire \C_reg[20]_1 ;
  wire \C_reg[6] ;
  wire \C_reg[6]_0 ;
  wire \C_reg[6]_1 ;
  wire \C_reg[6]_2 ;
  wire \C_reg[6]_3 ;
  wire \C_reg[6]_4 ;
  wire \C_reg[6]_5 ;
  wire [0:0]D;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;

  LUT6 #(
    .INIT(64'h3300550F33FF550F)) 
    \C[12]_i_2 
       (.I0(\Using_FPGA.Native_1 ),
        .I1(\C_reg[20] ),
        .I2(\C_reg[20]_0 ),
        .I3(B[0]),
        .I4(\C_reg[6] ),
        .I5(\C_reg[20]_1 ),
        .O(\Using_FPGA.Native_2 ));
  LUT6 #(
    .INIT(64'h00330F55FF330F55)) 
    \C[2]_i_3 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\C_reg[6]_3 ),
        .I2(\C_reg[6]_4 ),
        .I3(B[0]),
        .I4(\C_reg[6] ),
        .I5(\C_reg[6]_5 ),
        .O(\Using_FPGA.Native_3 ));
  LUT6 #(
    .INIT(64'h0530053FF530F53F)) 
    \C[6]_i_1 
       (.I0(\Using_FPGA.Native_3 ),
        .I1(\C_reg[6]_0 ),
        .I2(B[2]),
        .I3(B[1]),
        .I4(\C_reg[6]_1 ),
        .I5(\C_reg[6]_2 ),
        .O(D));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(\C[13]_i_2 ),
        .I1(\C[13]_i_2_0 ),
        .I2(\C[13]_i_2_1 ),
        .I3(\C[13]_i_2_2 ),
        .I4(\C[13]_i_2_3 ),
        .I5(1'b1),
        .O5(\Using_FPGA.Native_0 ),
        .O6(\Using_FPGA.Native_1 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_172
   (Other_Result,
    Last_Mux_1_10,
    Last_Mux_1_21,
    Last_Mux_1_26,
    Last_Mux_1_5,
    \Using_FPGA.Native_i_1__86_0 ,
    Q,
    \Using_FPGA.Native_0 ,
    p_2_in29_in,
    \Using_FPGA.Native_1 ,
    p_2_in130_in);
  output [1:0]Other_Result;
  input Last_Mux_1_10;
  input Last_Mux_1_21;
  input Last_Mux_1_26;
  input Last_Mux_1_5;
  input \Using_FPGA.Native_i_1__86_0 ;
  input [1:0]Q;
  input [1:0]\Using_FPGA.Native_0 ;
  input p_2_in29_in;
  input [1:0]\Using_FPGA.Native_1 ;
  input p_2_in130_in;

  wire Last_Mux_1_10;
  wire Last_Mux_1_21;
  wire Last_Mux_1_26;
  wire Last_Mux_1_5;
  wire [1:0]Other_Result;
  wire [1:0]Q;
  wire [1:0]\Using_FPGA.Native_0 ;
  wire [1:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_i_1__86_0 ;
  wire \Using_FPGA.Native_n_0 ;
  wire barrel_result_i_5;
  wire p_2_in130_in;
  wire p_2_in29_in;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Last_Mux_1_10),
        .I1(Last_Mux_1_21),
        .I2(Last_Mux_1_26),
        .I3(Last_Mux_1_5),
        .I4(\Using_FPGA.Native_i_1__86_0 ),
        .I5(1'b1),
        .O5(\Using_FPGA.Native_n_0 ),
        .O6(barrel_result_i_5));
  LUT5 #(
    .INIT(32'hFFFFE320)) 
    \Using_FPGA.Native_i_1__102 
       (.I0(\Using_FPGA.Native_n_0 ),
        .I1(Q[1]),
        .I2(\Using_FPGA.Native_0 [1]),
        .I3(p_2_in130_in),
        .I4(\Using_FPGA.Native_1 [1]),
        .O(Other_Result[1]));
  LUT5 #(
    .INIT(32'hFFFFE320)) 
    \Using_FPGA.Native_i_1__86 
       (.I0(barrel_result_i_5),
        .I1(Q[0]),
        .I2(\Using_FPGA.Native_0 [0]),
        .I3(p_2_in29_in),
        .I4(\Using_FPGA.Native_1 [0]),
        .O(Other_Result[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_173
   (Last_Mux_1_21,
    Last_Mux_1_5,
    Q,
    I3,
    B);
  output Last_Mux_1_21;
  output Last_Mux_1_5;
  input [1:0]Q;
  input I3;
  input [0:0]B;

  wire [0:0]B;
  wire I3;
  wire Last_Mux_1_21;
  wire Last_Mux_1_5;
  wire [1:0]Q;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[0]),
        .I3(I3),
        .I4(B),
        .I5(1'b1),
        .O5(Last_Mux_1_21),
        .O6(Last_Mux_1_5));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_174
   (\Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \C[12]_i_2 ,
    \C[12]_i_2_0 ,
    \C[12]_i_2_1 ,
    \C[12]_i_2_2 ,
    \C[12]_i_2_3 ,
    \C_reg[25] ,
    \C_reg[25]_0 ,
    B,
    \C_reg[25]_1 ,
    \C_reg[25]_2 );
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  input \C[12]_i_2 ;
  input \C[12]_i_2_0 ;
  input \C[12]_i_2_1 ;
  input \C[12]_i_2_2 ;
  input \C[12]_i_2_3 ;
  input \C_reg[25] ;
  input \C_reg[25]_0 ;
  input [0:0]B;
  input \C_reg[25]_1 ;
  input \C_reg[25]_2 ;

  wire [0:0]B;
  wire \C[12]_i_2 ;
  wire \C[12]_i_2_0 ;
  wire \C[12]_i_2_1 ;
  wire \C[12]_i_2_2 ;
  wire \C[12]_i_2_3 ;
  wire \C_reg[25] ;
  wire \C_reg[25]_0 ;
  wire \C_reg[25]_1 ;
  wire \C_reg[25]_2 ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;

  LUT6 #(
    .INIT(64'h3300550F33FF550F)) 
    \C[13]_i_2 
       (.I0(\Using_FPGA.Native_1 ),
        .I1(\C_reg[25] ),
        .I2(\C_reg[25]_0 ),
        .I3(B),
        .I4(\C_reg[25]_1 ),
        .I5(\C_reg[25]_2 ),
        .O(\Using_FPGA.Native_2 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(\C[12]_i_2 ),
        .I1(\C[12]_i_2_0 ),
        .I2(\C[12]_i_2_1 ),
        .I3(\C[12]_i_2_2 ),
        .I4(\C[12]_i_2_3 ),
        .I5(1'b1),
        .O5(\Using_FPGA.Native_0 ),
        .O6(\Using_FPGA.Native_1 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_175
   (Other_Result,
    Last_Mux_1_11,
    Last_Mux_1_20,
    Last_Mux_1_27,
    Last_Mux_1_4,
    \Using_FPGA.Native_i_1__85_0 ,
    Q,
    \Using_FPGA.Native_0 ,
    p_2_in23_in,
    \Using_FPGA.Native_1 ,
    p_2_in123_in);
  output [1:0]Other_Result;
  input Last_Mux_1_11;
  input Last_Mux_1_20;
  input Last_Mux_1_27;
  input Last_Mux_1_4;
  input \Using_FPGA.Native_i_1__85_0 ;
  input [1:0]Q;
  input [1:0]\Using_FPGA.Native_0 ;
  input p_2_in23_in;
  input [1:0]\Using_FPGA.Native_1 ;
  input p_2_in123_in;

  wire Last_Mux_1_11;
  wire Last_Mux_1_20;
  wire Last_Mux_1_27;
  wire Last_Mux_1_4;
  wire [1:0]Other_Result;
  wire [1:0]Q;
  wire [1:0]\Using_FPGA.Native_0 ;
  wire [1:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_i_1__85_0 ;
  wire \Using_FPGA.Native_n_0 ;
  wire barrel_result_i_4;
  wire p_2_in123_in;
  wire p_2_in23_in;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Last_Mux_1_11),
        .I1(Last_Mux_1_20),
        .I2(Last_Mux_1_27),
        .I3(Last_Mux_1_4),
        .I4(\Using_FPGA.Native_i_1__85_0 ),
        .I5(1'b1),
        .O5(\Using_FPGA.Native_n_0 ),
        .O6(barrel_result_i_4));
  LUT5 #(
    .INIT(32'hFFFFE320)) 
    \Using_FPGA.Native_i_1__101 
       (.I0(\Using_FPGA.Native_n_0 ),
        .I1(Q[1]),
        .I2(\Using_FPGA.Native_0 [1]),
        .I3(p_2_in123_in),
        .I4(\Using_FPGA.Native_1 [1]),
        .O(Other_Result[1]));
  LUT5 #(
    .INIT(32'hFFFFE320)) 
    \Using_FPGA.Native_i_1__85 
       (.I0(barrel_result_i_4),
        .I1(Q[0]),
        .I2(\Using_FPGA.Native_0 [0]),
        .I3(p_2_in23_in),
        .I4(\Using_FPGA.Native_1 [0]),
        .O(Other_Result[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_176
   (Last_Mux_1_20,
    Last_Mux_1_4,
    Q,
    I3,
    B);
  output Last_Mux_1_20;
  output Last_Mux_1_4;
  input [1:0]Q;
  input I3;
  input [0:0]B;

  wire [0:0]B;
  wire I3;
  wire Last_Mux_1_20;
  wire Last_Mux_1_4;
  wire [1:0]Q;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[0]),
        .I3(I3),
        .I4(B),
        .I5(1'b1),
        .O5(Last_Mux_1_20),
        .O6(Last_Mux_1_4));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_177
   (\Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    D,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \C[13]_i_2 ,
    \C[13]_i_2_0 ,
    \C[13]_i_2_1 ,
    \C[13]_i_2_2 ,
    \C[13]_i_2_3 ,
    B,
    void_bit,
    \C_reg[26] ,
    \C_reg[22] ,
    \C_reg[18] ,
    \C_reg[24] ,
    \C_reg[24]_0 ,
    \C_reg[24]_1 ,
    \C_reg[7] ,
    \C_reg[24]_2 ,
    \C_reg[26]_0 ,
    \C_reg[26]_1 ,
    \C_reg[7]_0 ,
    \C_reg[7]_1 ,
    \C_reg[7]_2 ,
    \C_reg[7]_3 ,
    \C_reg[7]_4 ,
    \C_reg[7]_5 );
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  output [4:0]D;
  output \Using_FPGA.Native_2 ;
  output \Using_FPGA.Native_3 ;
  output \Using_FPGA.Native_4 ;
  input \C[13]_i_2 ;
  input \C[13]_i_2_0 ;
  input \C[13]_i_2_1 ;
  input \C[13]_i_2_2 ;
  input \C[13]_i_2_3 ;
  input [2:0]B;
  input void_bit;
  input \C_reg[26] ;
  input \C_reg[22] ;
  input \C_reg[18] ;
  input \C_reg[24] ;
  input \C_reg[24]_0 ;
  input \C_reg[24]_1 ;
  input \C_reg[7] ;
  input \C_reg[24]_2 ;
  input \C_reg[26]_0 ;
  input \C_reg[26]_1 ;
  input \C_reg[7]_0 ;
  input \C_reg[7]_1 ;
  input \C_reg[7]_2 ;
  input \C_reg[7]_3 ;
  input \C_reg[7]_4 ;
  input \C_reg[7]_5 ;

  wire [2:0]B;
  wire \C[13]_i_2 ;
  wire \C[13]_i_2_0 ;
  wire \C[13]_i_2_1 ;
  wire \C[13]_i_2_2 ;
  wire \C[13]_i_2_3 ;
  wire \C_reg[18] ;
  wire \C_reg[22] ;
  wire \C_reg[24] ;
  wire \C_reg[24]_0 ;
  wire \C_reg[24]_1 ;
  wire \C_reg[24]_2 ;
  wire \C_reg[26] ;
  wire \C_reg[26]_0 ;
  wire \C_reg[26]_1 ;
  wire \C_reg[7] ;
  wire \C_reg[7]_0 ;
  wire \C_reg[7]_1 ;
  wire \C_reg[7]_2 ;
  wire \C_reg[7]_3 ;
  wire \C_reg[7]_4 ;
  wire \C_reg[7]_5 ;
  wire [4:0]D;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire void_bit;

  LUT6 #(
    .INIT(64'h3300550F33FF550F)) 
    \C[14]_i_2 
       (.I0(\Using_FPGA.Native_1 ),
        .I1(\C_reg[24]_0 ),
        .I2(\C_reg[26]_0 ),
        .I3(B[0]),
        .I4(\C_reg[7] ),
        .I5(\C_reg[26]_1 ),
        .O(\Using_FPGA.Native_2 ));
  LUT6 #(
    .INIT(64'h00330F55FF330F55)) 
    \C[16]_i_2 
       (.I0(\Using_FPGA.Native_1 ),
        .I1(\C_reg[24]_0 ),
        .I2(\C_reg[24]_1 ),
        .I3(B[0]),
        .I4(\C_reg[7] ),
        .I5(\C_reg[24]_2 ),
        .O(\Using_FPGA.Native_3 ));
  LUT6 #(
    .INIT(64'h00530F53F053FF53)) 
    \C[18]_i_1 
       (.I0(\Using_FPGA.Native_2 ),
        .I1(\C_reg[18] ),
        .I2(B[2]),
        .I3(B[1]),
        .I4(\C_reg[22] ),
        .I5(\C_reg[26] ),
        .O(D[3]));
  LUT6 #(
    .INIT(64'hC500C50FC5F0C5FF)) 
    \C[22]_i_1 
       (.I0(\Using_FPGA.Native_2 ),
        .I1(void_bit),
        .I2(B[2]),
        .I3(B[1]),
        .I4(\C_reg[22] ),
        .I5(\C_reg[26] ),
        .O(D[2]));
  LUT5 #(
    .INIT(32'hD1C0D1F3)) 
    \C[24]_i_1 
       (.I0(\Using_FPGA.Native_3 ),
        .I1(B[2]),
        .I2(void_bit),
        .I3(B[1]),
        .I4(\C_reg[24] ),
        .O(D[1]));
  LUT5 #(
    .INIT(32'hC0D1F3D1)) 
    \C[26]_i_1 
       (.I0(\Using_FPGA.Native_2 ),
        .I1(B[2]),
        .I2(void_bit),
        .I3(B[1]),
        .I4(\C_reg[26] ),
        .O(D[0]));
  LUT6 #(
    .INIT(64'h00550F33FF550F33)) 
    \C[3]_i_4 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\C_reg[7]_3 ),
        .I2(\C_reg[7]_4 ),
        .I3(B[0]),
        .I4(\C_reg[7] ),
        .I5(\C_reg[7]_5 ),
        .O(\Using_FPGA.Native_4 ));
  LUT6 #(
    .INIT(64'h00530F53F053FF53)) 
    \C[7]_i_1 
       (.I0(\Using_FPGA.Native_4 ),
        .I1(\C_reg[7]_0 ),
        .I2(B[1]),
        .I3(B[2]),
        .I4(\C_reg[7]_1 ),
        .I5(\C_reg[7]_2 ),
        .O(D[4]));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(\C[13]_i_2 ),
        .I1(\C[13]_i_2_0 ),
        .I2(\C[13]_i_2_1 ),
        .I3(\C[13]_i_2_2 ),
        .I4(\C[13]_i_2_3 ),
        .I5(1'b1),
        .O5(\Using_FPGA.Native_0 ),
        .O6(\Using_FPGA.Native_1 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_178
   (Other_Result,
    Last_Mux_1_12,
    Last_Mux_1_19,
    Last_Mux_1_28,
    Last_Mux_1_3,
    \Using_FPGA.Native_i_1__84_0 ,
    Q,
    \Using_FPGA.Native_0 ,
    p_2_in17_in,
    \Using_FPGA.Native_1 ,
    p_2_in116_in);
  output [1:0]Other_Result;
  input Last_Mux_1_12;
  input Last_Mux_1_19;
  input Last_Mux_1_28;
  input Last_Mux_1_3;
  input \Using_FPGA.Native_i_1__84_0 ;
  input [1:0]Q;
  input [1:0]\Using_FPGA.Native_0 ;
  input p_2_in17_in;
  input [1:0]\Using_FPGA.Native_1 ;
  input p_2_in116_in;

  wire Last_Mux_1_12;
  wire Last_Mux_1_19;
  wire Last_Mux_1_28;
  wire Last_Mux_1_3;
  wire [1:0]Other_Result;
  wire [1:0]Q;
  wire [1:0]\Using_FPGA.Native_0 ;
  wire [1:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_i_1__84_0 ;
  wire \Using_FPGA.Native_n_0 ;
  wire barrel_result_i_3;
  wire p_2_in116_in;
  wire p_2_in17_in;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Last_Mux_1_12),
        .I1(Last_Mux_1_19),
        .I2(Last_Mux_1_28),
        .I3(Last_Mux_1_3),
        .I4(\Using_FPGA.Native_i_1__84_0 ),
        .I5(1'b1),
        .O5(\Using_FPGA.Native_n_0 ),
        .O6(barrel_result_i_3));
  LUT5 #(
    .INIT(32'hFFFFE320)) 
    \Using_FPGA.Native_i_1__100 
       (.I0(\Using_FPGA.Native_n_0 ),
        .I1(Q[1]),
        .I2(\Using_FPGA.Native_0 [1]),
        .I3(p_2_in116_in),
        .I4(\Using_FPGA.Native_1 [1]),
        .O(Other_Result[1]));
  LUT5 #(
    .INIT(32'hFFFFE320)) 
    \Using_FPGA.Native_i_1__84 
       (.I0(barrel_result_i_3),
        .I1(Q[0]),
        .I2(\Using_FPGA.Native_0 [0]),
        .I3(p_2_in17_in),
        .I4(\Using_FPGA.Native_1 [0]),
        .O(Other_Result[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_179
   (Last_Mux_1_19,
    Last_Mux_1_3,
    Q,
    I3,
    B);
  output Last_Mux_1_19;
  output Last_Mux_1_3;
  input [1:0]Q;
  input I3;
  input [0:0]B;

  wire [0:0]B;
  wire I3;
  wire Last_Mux_1_19;
  wire Last_Mux_1_3;
  wire [1:0]Q;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[0]),
        .I3(I3),
        .I4(B),
        .I5(1'b1),
        .O5(Last_Mux_1_19),
        .O6(Last_Mux_1_3));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_180
   (\Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    D,
    \Using_FPGA.Native_3 ,
    \C[14]_i_2 ,
    \C[14]_i_2_0 ,
    \C[14]_i_2_1 ,
    EX_Op1,
    \C[14]_i_2_2 ,
    \C_reg[19] ,
    \C_reg[19]_0 ,
    B,
    \C_reg[8] ,
    \C_reg[19]_1 ,
    \C_reg[8]_0 ,
    \C_reg[8]_1 ,
    \C_reg[8]_2 ,
    \C_reg[8]_3 ,
    \C_reg[8]_4 ,
    \C_reg[8]_5 );
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  output [0:0]D;
  output \Using_FPGA.Native_3 ;
  input \C[14]_i_2 ;
  input \C[14]_i_2_0 ;
  input \C[14]_i_2_1 ;
  input EX_Op1;
  input \C[14]_i_2_2 ;
  input \C_reg[19] ;
  input \C_reg[19]_0 ;
  input [2:0]B;
  input \C_reg[8] ;
  input \C_reg[19]_1 ;
  input \C_reg[8]_0 ;
  input \C_reg[8]_1 ;
  input \C_reg[8]_2 ;
  input \C_reg[8]_3 ;
  input \C_reg[8]_4 ;
  input \C_reg[8]_5 ;

  wire [2:0]B;
  wire \C[14]_i_2 ;
  wire \C[14]_i_2_0 ;
  wire \C[14]_i_2_1 ;
  wire \C[14]_i_2_2 ;
  wire \C_reg[19] ;
  wire \C_reg[19]_0 ;
  wire \C_reg[19]_1 ;
  wire \C_reg[8] ;
  wire \C_reg[8]_0 ;
  wire \C_reg[8]_1 ;
  wire \C_reg[8]_2 ;
  wire \C_reg[8]_3 ;
  wire \C_reg[8]_4 ;
  wire \C_reg[8]_5 ;
  wire [0:0]D;
  wire EX_Op1;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;

  LUT6 #(
    .INIT(64'h00550F33FF550F33)) 
    \C[0]_i_4 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\C_reg[8]_3 ),
        .I2(\C_reg[8]_4 ),
        .I3(B[0]),
        .I4(\C_reg[8] ),
        .I5(\C_reg[8]_5 ),
        .O(\Using_FPGA.Native_3 ));
  LUT6 #(
    .INIT(64'h3300550F33FF550F)) 
    \C[15]_i_2 
       (.I0(\Using_FPGA.Native_1 ),
        .I1(\C_reg[19] ),
        .I2(\C_reg[19]_0 ),
        .I3(B[0]),
        .I4(\C_reg[8] ),
        .I5(\C_reg[19]_1 ),
        .O(\Using_FPGA.Native_2 ));
  LUT6 #(
    .INIT(64'h3500350F35F035FF)) 
    \C[8]_i_1 
       (.I0(\Using_FPGA.Native_3 ),
        .I1(\C_reg[8]_0 ),
        .I2(B[2]),
        .I3(B[1]),
        .I4(\C_reg[8]_1 ),
        .I5(\C_reg[8]_2 ),
        .O(D));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(\C[14]_i_2 ),
        .I1(\C[14]_i_2_0 ),
        .I2(\C[14]_i_2_1 ),
        .I3(EX_Op1),
        .I4(\C[14]_i_2_2 ),
        .I5(1'b1),
        .O5(\Using_FPGA.Native_0 ),
        .O6(\Using_FPGA.Native_1 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_181
   (Other_Result,
    Last_Mux_1_13,
    Last_Mux_1_18,
    Last_Mux_1_29,
    Last_Mux_1_2,
    \Using_FPGA.Native_i_1__83_0 ,
    Q,
    \Using_FPGA.Native_0 ,
    p_2_in11_in,
    \Using_FPGA.Native_1 ,
    p_2_in109_in);
  output [1:0]Other_Result;
  input Last_Mux_1_13;
  input Last_Mux_1_18;
  input Last_Mux_1_29;
  input Last_Mux_1_2;
  input \Using_FPGA.Native_i_1__83_0 ;
  input [1:0]Q;
  input [1:0]\Using_FPGA.Native_0 ;
  input p_2_in11_in;
  input [1:0]\Using_FPGA.Native_1 ;
  input p_2_in109_in;

  wire Last_Mux_1_13;
  wire Last_Mux_1_18;
  wire Last_Mux_1_2;
  wire Last_Mux_1_29;
  wire [1:0]Other_Result;
  wire [1:0]Q;
  wire [1:0]\Using_FPGA.Native_0 ;
  wire [1:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_i_1__83_0 ;
  wire \Using_FPGA.Native_n_0 ;
  wire barrel_result_i_2;
  wire p_2_in109_in;
  wire p_2_in11_in;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Last_Mux_1_13),
        .I1(Last_Mux_1_18),
        .I2(Last_Mux_1_29),
        .I3(Last_Mux_1_2),
        .I4(\Using_FPGA.Native_i_1__83_0 ),
        .I5(1'b1),
        .O5(\Using_FPGA.Native_n_0 ),
        .O6(barrel_result_i_2));
  LUT5 #(
    .INIT(32'hFFFFE320)) 
    \Using_FPGA.Native_i_1__83 
       (.I0(barrel_result_i_2),
        .I1(Q[0]),
        .I2(\Using_FPGA.Native_0 [0]),
        .I3(p_2_in11_in),
        .I4(\Using_FPGA.Native_1 [0]),
        .O(Other_Result[0]));
  LUT5 #(
    .INIT(32'hFFFFE320)) 
    \Using_FPGA.Native_i_1__99 
       (.I0(\Using_FPGA.Native_n_0 ),
        .I1(Q[1]),
        .I2(\Using_FPGA.Native_0 [1]),
        .I3(p_2_in109_in),
        .I4(\Using_FPGA.Native_1 [1]),
        .O(Other_Result[1]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_182
   (Last_Mux_1_18,
    Last_Mux_1_2,
    Q,
    I3,
    B);
  output Last_Mux_1_18;
  output Last_Mux_1_2;
  input [1:0]Q;
  input I3;
  input [0:0]B;

  wire [0:0]B;
  wire I3;
  wire Last_Mux_1_18;
  wire Last_Mux_1_2;
  wire [1:0]Q;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[0]),
        .I3(I3),
        .I4(B),
        .I5(1'b1),
        .O5(Last_Mux_1_18),
        .O6(Last_Mux_1_2));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_183
   (\Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    D,
    \Using_FPGA.Native_2 ,
    \C_reg[30] ,
    \C_reg[30]_0 ,
    \C_reg[30]_1 ,
    \C_reg[30]_2 ,
    \C_reg[30]_3 ,
    \C_reg[10] ,
    B,
    \C_reg[10]_0 ,
    \C_reg[10]_1 ,
    \C_reg[10]_2 ,
    O6,
    \C_reg[10]_3 ,
    \C_reg[10]_4 );
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  output [0:0]D;
  output \Using_FPGA.Native_2 ;
  input \C_reg[30] ;
  input \C_reg[30]_0 ;
  input \C_reg[30]_1 ;
  input \C_reg[30]_2 ;
  input \C_reg[30]_3 ;
  input \C_reg[10] ;
  input [2:0]B;
  input \C_reg[10]_0 ;
  input \C_reg[10]_1 ;
  input \C_reg[10]_2 ;
  input O6;
  input \C_reg[10]_3 ;
  input \C_reg[10]_4 ;

  wire [2:0]B;
  wire \C_reg[10] ;
  wire \C_reg[10]_0 ;
  wire \C_reg[10]_1 ;
  wire \C_reg[10]_2 ;
  wire \C_reg[10]_3 ;
  wire \C_reg[10]_4 ;
  wire \C_reg[30] ;
  wire \C_reg[30]_0 ;
  wire \C_reg[30]_1 ;
  wire \C_reg[30]_2 ;
  wire \C_reg[30]_3 ;
  wire [0:0]D;
  wire O6;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;

  LUT6 #(
    .INIT(64'h0530053FF530F53F)) 
    \C[10]_i_1 
       (.I0(\Using_FPGA.Native_2 ),
        .I1(\C_reg[10] ),
        .I2(B[2]),
        .I3(B[1]),
        .I4(\C_reg[10]_0 ),
        .I5(\C_reg[10]_1 ),
        .O(D));
  LUT6 #(
    .INIT(64'h00330F55FF330F55)) 
    \C[2]_i_5 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\C_reg[10]_2 ),
        .I2(O6),
        .I3(B[0]),
        .I4(\C_reg[10]_3 ),
        .I5(\C_reg[10]_4 ),
        .O(\Using_FPGA.Native_2 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(\C_reg[30] ),
        .I1(\C_reg[30]_0 ),
        .I2(\C_reg[30]_1 ),
        .I3(\C_reg[30]_2 ),
        .I4(\C_reg[30]_3 ),
        .I5(1'b1),
        .O5(\Using_FPGA.Native_0 ),
        .O6(\Using_FPGA.Native_1 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_184
   (Other_Result,
    Last_Mux_1_14,
    Last_Mux_1_17,
    Last_Mux_1_30,
    Last_Mux_1_1,
    \Using_FPGA.Native_i_1__82_0 ,
    Q,
    \Using_FPGA.Native_0 ,
    p_2_in5_in,
    \Using_FPGA.Native_1 ,
    p_2_in102_in);
  output [1:0]Other_Result;
  input Last_Mux_1_14;
  input Last_Mux_1_17;
  input Last_Mux_1_30;
  input Last_Mux_1_1;
  input \Using_FPGA.Native_i_1__82_0 ;
  input [1:0]Q;
  input [1:0]\Using_FPGA.Native_0 ;
  input p_2_in5_in;
  input [1:0]\Using_FPGA.Native_1 ;
  input p_2_in102_in;

  wire Last_Mux_1_1;
  wire Last_Mux_1_14;
  wire Last_Mux_1_17;
  wire Last_Mux_1_30;
  wire [1:0]Other_Result;
  wire [1:0]Q;
  wire [1:0]\Using_FPGA.Native_0 ;
  wire [1:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_i_1__82_0 ;
  wire \Using_FPGA.Native_n_0 ;
  wire barrel_result_i_1;
  wire p_2_in102_in;
  wire p_2_in5_in;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Last_Mux_1_14),
        .I1(Last_Mux_1_17),
        .I2(Last_Mux_1_30),
        .I3(Last_Mux_1_1),
        .I4(\Using_FPGA.Native_i_1__82_0 ),
        .I5(1'b1),
        .O5(\Using_FPGA.Native_n_0 ),
        .O6(barrel_result_i_1));
  LUT5 #(
    .INIT(32'hFFFFE320)) 
    \Using_FPGA.Native_i_1__82 
       (.I0(barrel_result_i_1),
        .I1(Q[0]),
        .I2(\Using_FPGA.Native_0 [0]),
        .I3(p_2_in5_in),
        .I4(\Using_FPGA.Native_1 [0]),
        .O(Other_Result[0]));
  LUT5 #(
    .INIT(32'hFFFFE320)) 
    \Using_FPGA.Native_i_1__98 
       (.I0(\Using_FPGA.Native_n_0 ),
        .I1(Q[1]),
        .I2(\Using_FPGA.Native_0 [1]),
        .I3(p_2_in102_in),
        .I4(\Using_FPGA.Native_1 [1]),
        .O(Other_Result[1]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_185
   (Last_Mux_1_17,
    Last_Mux_1_1,
    Q,
    I3,
    B);
  output Last_Mux_1_17;
  output Last_Mux_1_1;
  input [1:0]Q;
  input I3;
  input [0:0]B;

  wire [0:0]B;
  wire I3;
  wire Last_Mux_1_1;
  wire Last_Mux_1_17;
  wire [1:0]Q;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[0]),
        .I3(I3),
        .I4(B),
        .I5(1'b1),
        .O5(Last_Mux_1_17),
        .O6(Last_Mux_1_1));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_186
   (\Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    D,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \C_reg[30] ,
    \C_reg[30]_0 ,
    \C_reg[30]_1 ,
    Op1_Shift,
    \C_reg[30]_2 ,
    B,
    void_bit,
    \C_reg[25] ,
    \C_reg[21] ,
    \C_reg[17] ,
    \C_reg[26] ,
    \C_reg[13] ,
    \C_reg[17]_0 ,
    \C_reg[9] ,
    O6,
    \C_reg[13]_0 ,
    \C_reg[13]_1 );
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  output [4:0]D;
  output \Using_FPGA.Native_2 ;
  output \Using_FPGA.Native_3 ;
  output \Using_FPGA.Native_4 ;
  input \C_reg[30] ;
  input \C_reg[30]_0 ;
  input \C_reg[30]_1 ;
  input Op1_Shift;
  input \C_reg[30]_2 ;
  input [2:0]B;
  input void_bit;
  input \C_reg[25] ;
  input \C_reg[21] ;
  input \C_reg[17] ;
  input \C_reg[26] ;
  input \C_reg[13] ;
  input \C_reg[17]_0 ;
  input \C_reg[9] ;
  input O6;
  input \C_reg[13]_0 ;
  input \C_reg[13]_1 ;

  wire [2:0]B;
  wire \C_reg[13] ;
  wire \C_reg[13]_0 ;
  wire \C_reg[13]_1 ;
  wire \C_reg[17] ;
  wire \C_reg[17]_0 ;
  wire \C_reg[21] ;
  wire \C_reg[25] ;
  wire \C_reg[26] ;
  wire \C_reg[30] ;
  wire \C_reg[30]_0 ;
  wire \C_reg[30]_1 ;
  wire \C_reg[30]_2 ;
  wire \C_reg[9] ;
  wire [4:0]D;
  wire O6;
  wire Op1_Shift;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire void_bit;

  LUT6 #(
    .INIT(64'h0305F30503F5F3F5)) 
    \C[13]_i_1 
       (.I0(\Using_FPGA.Native_4 ),
        .I1(\C_reg[17] ),
        .I2(B[2]),
        .I3(B[1]),
        .I4(\C_reg[25] ),
        .I5(\C_reg[21] ),
        .O(D[3]));
  LUT6 #(
    .INIT(64'h5500330F55FF330F)) 
    \C[17]_i_1 
       (.I0(\Using_FPGA.Native_2 ),
        .I1(\C_reg[21] ),
        .I2(\C_reg[17] ),
        .I3(B[1]),
        .I4(B[2]),
        .I5(\C_reg[25] ),
        .O(D[2]));
  LUT6 #(
    .INIT(64'h33550F0033550FFF)) 
    \C[17]_i_2 
       (.I0(\Using_FPGA.Native_1 ),
        .I1(void_bit),
        .I2(\C_reg[26] ),
        .I3(\C_reg[13] ),
        .I4(B[0]),
        .I5(\C_reg[17]_0 ),
        .O(\Using_FPGA.Native_2 ));
  LUT5 #(
    .INIT(32'h5530553F)) 
    \C[18]_i_2 
       (.I0(void_bit),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\C_reg[13] ),
        .I3(B[0]),
        .I4(\C_reg[26] ),
        .O(\Using_FPGA.Native_3 ));
  LUT6 #(
    .INIT(64'h33550F0033550FFF)) 
    \C[1]_i_5 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(O6),
        .I2(\C_reg[13]_0 ),
        .I3(\C_reg[13] ),
        .I4(B[0]),
        .I5(\C_reg[13]_1 ),
        .O(\Using_FPGA.Native_4 ));
  LUT6 #(
    .INIT(64'hCC550F00CC550FFF)) 
    \C[21]_i_1 
       (.I0(\Using_FPGA.Native_2 ),
        .I1(void_bit),
        .I2(\C_reg[25] ),
        .I3(B[1]),
        .I4(B[2]),
        .I5(\C_reg[21] ),
        .O(D[1]));
  LUT5 #(
    .INIT(32'hD1C0D1F3)) 
    \C[25]_i_1 
       (.I0(\Using_FPGA.Native_2 ),
        .I1(B[2]),
        .I2(void_bit),
        .I3(B[1]),
        .I4(\C_reg[25] ),
        .O(D[0]));
  LUT6 #(
    .INIT(64'h00530F53F053FF53)) 
    \C[9]_i_1 
       (.I0(\Using_FPGA.Native_4 ),
        .I1(\C_reg[9] ),
        .I2(B[1]),
        .I3(B[2]),
        .I4(\C_reg[17] ),
        .I5(\C_reg[21] ),
        .O(D[4]));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(\C_reg[30] ),
        .I1(\C_reg[30]_0 ),
        .I2(\C_reg[30]_1 ),
        .I3(Op1_Shift),
        .I4(\C_reg[30]_2 ),
        .I5(1'b1),
        .O5(\Using_FPGA.Native_0 ),
        .O6(\Using_FPGA.Native_1 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_187
   (Other_Result,
    Last_Mux_1_15,
    Last_Mux_1_16,
    Last_Mux_1_31,
    Last_Mux_1_0,
    \Using_FPGA.Native_i_1__81_0 ,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    p_2_in95_in);
  output [1:0]Other_Result;
  input Last_Mux_1_15;
  input Last_Mux_1_16;
  input Last_Mux_1_31;
  input Last_Mux_1_0;
  input \Using_FPGA.Native_i_1__81_0 ;
  input [1:0]Q;
  input \Using_FPGA.Native_0 ;
  input [1:0]\Using_FPGA.Native_1 ;
  input [0:0]\Using_FPGA.Native_2 ;
  input p_2_in95_in;

  wire Last_Mux_1_0;
  wire Last_Mux_1_15;
  wire Last_Mux_1_16;
  wire Last_Mux_1_31;
  wire [1:0]Other_Result;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire [1:0]\Using_FPGA.Native_1 ;
  wire [0:0]\Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_i_1__81_0 ;
  wire \Using_FPGA.Native_n_0 ;
  wire barrel_result_i_0;
  wire p_2_in95_in;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Last_Mux_1_15),
        .I1(Last_Mux_1_16),
        .I2(Last_Mux_1_31),
        .I3(Last_Mux_1_0),
        .I4(\Using_FPGA.Native_i_1__81_0 ),
        .I5(1'b1),
        .O5(\Using_FPGA.Native_n_0 ),
        .O6(barrel_result_i_0));
  LUT4 #(
    .INIT(16'hFFB8)) 
    \Using_FPGA.Native_i_1__81 
       (.I0(barrel_result_i_0),
        .I1(Q[0]),
        .I2(\Using_FPGA.Native_0 ),
        .I3(\Using_FPGA.Native_1 [0]),
        .O(Other_Result[0]));
  LUT5 #(
    .INIT(32'hFFFFE320)) 
    \Using_FPGA.Native_i_1__97 
       (.I0(\Using_FPGA.Native_n_0 ),
        .I1(\Using_FPGA.Native_2 ),
        .I2(Q[1]),
        .I3(p_2_in95_in),
        .I4(\Using_FPGA.Native_1 [1]),
        .O(Other_Result[1]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_188
   (Last_Mux_1_16,
    Last_Mux_1_0,
    Q,
    I3,
    B);
  output Last_Mux_1_16;
  output Last_Mux_1_0;
  input [1:0]Q;
  input I3;
  input [0:0]B;

  wire [0:0]B;
  wire I3;
  wire Last_Mux_1_0;
  wire Last_Mux_1_16;
  wire [1:0]Q;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[0]),
        .I3(I3),
        .I4(B),
        .I5(1'b1),
        .O5(Last_Mux_1_16),
        .O6(Last_Mux_1_0));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_189
   (\Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    D,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \C[4]_i_2 ,
    \C[4]_i_2_0 ,
    \C[4]_i_2_1 ,
    \C[4]_i_2_2 ,
    \C[4]_i_2_3 ,
    \C_reg[15] ,
    B,
    \C_reg[15]_0 ,
    \C_reg[11] ,
    \C_reg[11]_0 ,
    \C_reg[5] ,
    \C_reg[5]_0 ,
    \C_reg[1] ,
    \C_reg[5]_1 ,
    O6,
    \C_reg[15]_1 ,
    \C_reg[1]_0 ,
    \C_reg[1]_1 ,
    \C_reg[1]_2 ,
    \C_reg[1]_3 ,
    \C_reg[1]_4 ,
    \C_reg[1]_5 );
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  output [2:0]D;
  output \Using_FPGA.Native_2 ;
  output \Using_FPGA.Native_3 ;
  input \C[4]_i_2 ;
  input \C[4]_i_2_0 ;
  input \C[4]_i_2_1 ;
  input \C[4]_i_2_2 ;
  input \C[4]_i_2_3 ;
  input \C_reg[15] ;
  input [2:0]B;
  input \C_reg[15]_0 ;
  input \C_reg[11] ;
  input \C_reg[11]_0 ;
  input \C_reg[5] ;
  input \C_reg[5]_0 ;
  input \C_reg[1] ;
  input \C_reg[5]_1 ;
  input O6;
  input \C_reg[15]_1 ;
  input \C_reg[1]_0 ;
  input \C_reg[1]_1 ;
  input \C_reg[1]_2 ;
  input \C_reg[1]_3 ;
  input \C_reg[1]_4 ;
  input \C_reg[1]_5 ;

  wire [2:0]B;
  wire \C[1]_i_2_n_0 ;
  wire \C[4]_i_2 ;
  wire \C[4]_i_2_0 ;
  wire \C[4]_i_2_1 ;
  wire \C[4]_i_2_2 ;
  wire \C[4]_i_2_3 ;
  wire \C_reg[11] ;
  wire \C_reg[11]_0 ;
  wire \C_reg[15] ;
  wire \C_reg[15]_0 ;
  wire \C_reg[15]_1 ;
  wire \C_reg[1] ;
  wire \C_reg[1]_0 ;
  wire \C_reg[1]_1 ;
  wire \C_reg[1]_2 ;
  wire \C_reg[1]_3 ;
  wire \C_reg[1]_4 ;
  wire \C_reg[1]_5 ;
  wire \C_reg[5] ;
  wire \C_reg[5]_0 ;
  wire \C_reg[5]_1 ;
  wire [2:0]D;
  wire O6;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;

  LUT6 #(
    .INIT(64'h0530053FF530F53F)) 
    \C[11]_i_1 
       (.I0(\Using_FPGA.Native_2 ),
        .I1(\C_reg[15] ),
        .I2(B[2]),
        .I3(B[1]),
        .I4(\C_reg[11]_0 ),
        .I5(\C_reg[11] ),
        .O(D[1]));
  LUT6 #(
    .INIT(64'h0305F30503F5F3F5)) 
    \C[15]_i_1 
       (.I0(\Using_FPGA.Native_2 ),
        .I1(\C_reg[15] ),
        .I2(B[2]),
        .I3(B[1]),
        .I4(\C_reg[15]_0 ),
        .I5(\C_reg[11] ),
        .O(D[0]));
  LUT6 #(
    .INIT(64'h00350F35F035FF35)) 
    \C[1]_i_1 
       (.I0(\C[1]_i_2_n_0 ),
        .I1(\C_reg[1]_0 ),
        .I2(B[2]),
        .I3(B[1]),
        .I4(\C_reg[1]_1 ),
        .I5(\C_reg[1]_2 ),
        .O(D[2]));
  LUT6 #(
    .INIT(64'h00330F55FF330F55)) 
    \C[1]_i_2 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\C_reg[1]_3 ),
        .I2(\C_reg[1]_4 ),
        .I3(B[0]),
        .I4(\C_reg[1] ),
        .I5(\C_reg[1]_5 ),
        .O(\C[1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h33550F0033550FFF)) 
    \C[3]_i_5 
       (.I0(\Using_FPGA.Native_1 ),
        .I1(\C_reg[5] ),
        .I2(O6),
        .I3(\C_reg[1] ),
        .I4(B[0]),
        .I5(\C_reg[15]_1 ),
        .O(\Using_FPGA.Native_2 ));
  LUT6 #(
    .INIT(64'h00330F55FF330F55)) 
    \C[5]_i_2 
       (.I0(\Using_FPGA.Native_1 ),
        .I1(\C_reg[5] ),
        .I2(\C_reg[5]_0 ),
        .I3(B[0]),
        .I4(\C_reg[1] ),
        .I5(\C_reg[5]_1 ),
        .O(\Using_FPGA.Native_3 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(\C[4]_i_2 ),
        .I1(\C[4]_i_2_0 ),
        .I2(\C[4]_i_2_1 ),
        .I3(\C[4]_i_2_2 ),
        .I4(\C[4]_i_2_3 ),
        .I5(1'b1),
        .O5(\Using_FPGA.Native_0 ),
        .O6(\Using_FPGA.Native_1 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_190
   (Other_Result,
    Last_Mux_1_1,
    Last_Mux_1_30,
    Last_Mux_1_17,
    Last_Mux_1_14,
    \Using_FPGA.Native_i_1__95_0 ,
    Q,
    \Using_FPGA.Native_0 ,
    p_2_in83_in,
    \Using_FPGA.Native_1 ,
    p_26_in);
  output [1:0]Other_Result;
  input Last_Mux_1_1;
  input Last_Mux_1_30;
  input Last_Mux_1_17;
  input Last_Mux_1_14;
  input \Using_FPGA.Native_i_1__95_0 ;
  input [1:0]Q;
  input [1:0]\Using_FPGA.Native_0 ;
  input p_2_in83_in;
  input [1:0]\Using_FPGA.Native_1 ;
  input p_26_in;

  wire Last_Mux_1_1;
  wire Last_Mux_1_14;
  wire Last_Mux_1_17;
  wire Last_Mux_1_30;
  wire [1:0]Other_Result;
  wire [1:0]Q;
  wire [1:0]\Using_FPGA.Native_0 ;
  wire [1:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_i_1__95_0 ;
  wire \Using_FPGA.Native_n_0 ;
  wire barrel_result_i_14;
  wire p_26_in;
  wire p_2_in83_in;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Last_Mux_1_1),
        .I1(Last_Mux_1_30),
        .I2(Last_Mux_1_17),
        .I3(Last_Mux_1_14),
        .I4(\Using_FPGA.Native_i_1__95_0 ),
        .I5(1'b1),
        .O5(\Using_FPGA.Native_n_0 ),
        .O6(barrel_result_i_14));
  LUT5 #(
    .INIT(32'hFFFFE320)) 
    \Using_FPGA.Native_i_1__111 
       (.I0(\Using_FPGA.Native_n_0 ),
        .I1(Q[1]),
        .I2(\Using_FPGA.Native_0 [1]),
        .I3(p_26_in),
        .I4(\Using_FPGA.Native_1 [1]),
        .O(Other_Result[1]));
  LUT5 #(
    .INIT(32'hFFFFE320)) 
    \Using_FPGA.Native_i_1__95 
       (.I0(barrel_result_i_14),
        .I1(Q[0]),
        .I2(\Using_FPGA.Native_0 [0]),
        .I3(p_2_in83_in),
        .I4(\Using_FPGA.Native_1 [0]),
        .O(Other_Result[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_191
   (Last_Mux_1_30,
    Last_Mux_1_14,
    Q,
    I3,
    B);
  output Last_Mux_1_30;
  output Last_Mux_1_14;
  input [1:0]Q;
  input I3;
  input [0:0]B;

  wire [0:0]B;
  wire I3;
  wire Last_Mux_1_14;
  wire Last_Mux_1_30;
  wire [1:0]Q;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[0]),
        .I3(I3),
        .I4(B),
        .I5(1'b1),
        .O5(Last_Mux_1_30),
        .O6(Last_Mux_1_14));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_192
   (\Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    D,
    \Using_FPGA.Native_2 ,
    EX_Op1,
    \C[4]_i_2 ,
    \C[4]_i_2_0 ,
    \C[4]_i_2_1 ,
    \C[4]_i_2_2 ,
    \C_reg[14] ,
    B,
    \C_reg[14]_0 ,
    \C_reg[14]_1 ,
    \C_reg[14]_2 ,
    \C_reg[14]_3 ,
    \C_reg[14]_4 ,
    \C_reg[14]_5 );
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  output [0:0]D;
  output \Using_FPGA.Native_2 ;
  input EX_Op1;
  input \C[4]_i_2 ;
  input \C[4]_i_2_0 ;
  input \C[4]_i_2_1 ;
  input \C[4]_i_2_2 ;
  input \C_reg[14] ;
  input [2:0]B;
  input \C_reg[14]_0 ;
  input \C_reg[14]_1 ;
  input \C_reg[14]_2 ;
  input \C_reg[14]_3 ;
  input \C_reg[14]_4 ;
  input \C_reg[14]_5 ;

  wire [2:0]B;
  wire \C[4]_i_2 ;
  wire \C[4]_i_2_0 ;
  wire \C[4]_i_2_1 ;
  wire \C[4]_i_2_2 ;
  wire \C_reg[14] ;
  wire \C_reg[14]_0 ;
  wire \C_reg[14]_1 ;
  wire \C_reg[14]_2 ;
  wire \C_reg[14]_3 ;
  wire \C_reg[14]_4 ;
  wire \C_reg[14]_5 ;
  wire [0:0]D;
  wire EX_Op1;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;

  LUT6 #(
    .INIT(64'h3500350F35F035FF)) 
    \C[14]_i_1 
       (.I0(\Using_FPGA.Native_2 ),
        .I1(\C_reg[14] ),
        .I2(B[2]),
        .I3(B[1]),
        .I4(\C_reg[14]_0 ),
        .I5(\C_reg[14]_1 ),
        .O(D));
  LUT6 #(
    .INIT(64'h00330F55FF330F55)) 
    \C[6]_i_2 
       (.I0(\Using_FPGA.Native_1 ),
        .I1(\C_reg[14]_2 ),
        .I2(\C_reg[14]_3 ),
        .I3(B[0]),
        .I4(\C_reg[14]_4 ),
        .I5(\C_reg[14]_5 ),
        .O(\Using_FPGA.Native_2 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(EX_Op1),
        .I1(\C[4]_i_2 ),
        .I2(\C[4]_i_2_0 ),
        .I3(\C[4]_i_2_1 ),
        .I4(\C[4]_i_2_2 ),
        .I5(1'b1),
        .O5(\Using_FPGA.Native_0 ),
        .O6(\Using_FPGA.Native_1 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_193
   (Other_Result,
    Last_Mux_1_2,
    Last_Mux_1_29,
    Last_Mux_1_18,
    Last_Mux_1_13,
    \Using_FPGA.Native_i_1__94_0 ,
    Q,
    \Using_FPGA.Native_0 ,
    p_2_in77_in,
    \Using_FPGA.Native_1 ,
    p_22_in);
  output [1:0]Other_Result;
  input Last_Mux_1_2;
  input Last_Mux_1_29;
  input Last_Mux_1_18;
  input Last_Mux_1_13;
  input \Using_FPGA.Native_i_1__94_0 ;
  input [1:0]Q;
  input [1:0]\Using_FPGA.Native_0 ;
  input p_2_in77_in;
  input [1:0]\Using_FPGA.Native_1 ;
  input p_22_in;

  wire Last_Mux_1_13;
  wire Last_Mux_1_18;
  wire Last_Mux_1_2;
  wire Last_Mux_1_29;
  wire [1:0]Other_Result;
  wire [1:0]Q;
  wire [1:0]\Using_FPGA.Native_0 ;
  wire [1:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_i_1__94_0 ;
  wire \Using_FPGA.Native_n_0 ;
  wire barrel_result_i_13;
  wire p_22_in;
  wire p_2_in77_in;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Last_Mux_1_2),
        .I1(Last_Mux_1_29),
        .I2(Last_Mux_1_18),
        .I3(Last_Mux_1_13),
        .I4(\Using_FPGA.Native_i_1__94_0 ),
        .I5(1'b1),
        .O5(\Using_FPGA.Native_n_0 ),
        .O6(barrel_result_i_13));
  LUT5 #(
    .INIT(32'hFFFFE320)) 
    \Using_FPGA.Native_i_1__110 
       (.I0(\Using_FPGA.Native_n_0 ),
        .I1(Q[1]),
        .I2(\Using_FPGA.Native_0 [1]),
        .I3(p_22_in),
        .I4(\Using_FPGA.Native_1 [1]),
        .O(Other_Result[1]));
  LUT5 #(
    .INIT(32'hFFFFE320)) 
    \Using_FPGA.Native_i_1__94 
       (.I0(barrel_result_i_13),
        .I1(Q[0]),
        .I2(\Using_FPGA.Native_0 [0]),
        .I3(p_2_in77_in),
        .I4(\Using_FPGA.Native_1 [0]),
        .O(Other_Result[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_194
   (Last_Mux_1_29,
    Last_Mux_1_13,
    Q,
    I3,
    B);
  output Last_Mux_1_29;
  output Last_Mux_1_13;
  input [1:0]Q;
  input I3;
  input [0:0]B;

  wire [0:0]B;
  wire I3;
  wire Last_Mux_1_13;
  wire Last_Mux_1_29;
  wire [1:0]Q;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[0]),
        .I3(I3),
        .I4(B),
        .I5(1'b1),
        .O5(Last_Mux_1_29),
        .O6(Last_Mux_1_13));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_195
   (\Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \C[4]_i_2 ,
    \C[4]_i_2_0 ,
    \C[4]_i_2_1 ,
    \C[4]_i_2_2 ,
    \C[4]_i_2_3 ,
    \C_reg[19] ,
    \C_reg[19]_0 ,
    B,
    \C_reg[2] ,
    \C_reg[19]_1 ,
    \C_reg[2]_0 ,
    \C_reg[2]_1 ,
    \C_reg[2]_2 );
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  output \Using_FPGA.Native_3 ;
  input \C[4]_i_2 ;
  input \C[4]_i_2_0 ;
  input \C[4]_i_2_1 ;
  input \C[4]_i_2_2 ;
  input \C[4]_i_2_3 ;
  input \C_reg[19] ;
  input \C_reg[19]_0 ;
  input [0:0]B;
  input \C_reg[2] ;
  input \C_reg[19]_1 ;
  input \C_reg[2]_0 ;
  input \C_reg[2]_1 ;
  input \C_reg[2]_2 ;

  wire [0:0]B;
  wire \C[4]_i_2 ;
  wire \C[4]_i_2_0 ;
  wire \C[4]_i_2_1 ;
  wire \C[4]_i_2_2 ;
  wire \C[4]_i_2_3 ;
  wire \C_reg[19] ;
  wire \C_reg[19]_0 ;
  wire \C_reg[19]_1 ;
  wire \C_reg[2] ;
  wire \C_reg[2]_0 ;
  wire \C_reg[2]_1 ;
  wire \C_reg[2]_2 ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;

  LUT6 #(
    .INIT(64'h00550F33FF550F33)) 
    \C[2]_i_4 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\C_reg[2]_0 ),
        .I2(\C_reg[2]_1 ),
        .I3(B),
        .I4(\C_reg[2] ),
        .I5(\C_reg[2]_2 ),
        .O(\Using_FPGA.Native_3 ));
  LUT6 #(
    .INIT(64'h00330F55FF330F55)) 
    \C[7]_i_2 
       (.I0(\Using_FPGA.Native_1 ),
        .I1(\C_reg[19] ),
        .I2(\C_reg[19]_0 ),
        .I3(B),
        .I4(\C_reg[2] ),
        .I5(\C_reg[19]_1 ),
        .O(\Using_FPGA.Native_2 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(\C[4]_i_2 ),
        .I1(\C[4]_i_2_0 ),
        .I2(\C[4]_i_2_1 ),
        .I3(\C[4]_i_2_2 ),
        .I4(\C[4]_i_2_3 ),
        .I5(1'b1),
        .O5(\Using_FPGA.Native_0 ),
        .O6(\Using_FPGA.Native_1 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_196
   (Other_Result,
    Last_Mux_1_3,
    Last_Mux_1_28,
    Last_Mux_1_19,
    Last_Mux_1_12,
    \Using_FPGA.Native_i_1__93_0 ,
    Q,
    \Using_FPGA.Native_0 ,
    p_2_in71_in,
    \Using_FPGA.Native_1 ,
    p_18_in);
  output [1:0]Other_Result;
  input Last_Mux_1_3;
  input Last_Mux_1_28;
  input Last_Mux_1_19;
  input Last_Mux_1_12;
  input \Using_FPGA.Native_i_1__93_0 ;
  input [1:0]Q;
  input [1:0]\Using_FPGA.Native_0 ;
  input p_2_in71_in;
  input [1:0]\Using_FPGA.Native_1 ;
  input p_18_in;

  wire Last_Mux_1_12;
  wire Last_Mux_1_19;
  wire Last_Mux_1_28;
  wire Last_Mux_1_3;
  wire [1:0]Other_Result;
  wire [1:0]Q;
  wire [1:0]\Using_FPGA.Native_0 ;
  wire [1:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_i_1__93_0 ;
  wire \Using_FPGA.Native_n_0 ;
  wire barrel_result_i_12;
  wire p_18_in;
  wire p_2_in71_in;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Last_Mux_1_3),
        .I1(Last_Mux_1_28),
        .I2(Last_Mux_1_19),
        .I3(Last_Mux_1_12),
        .I4(\Using_FPGA.Native_i_1__93_0 ),
        .I5(1'b1),
        .O5(\Using_FPGA.Native_n_0 ),
        .O6(barrel_result_i_12));
  LUT5 #(
    .INIT(32'hFFFFE320)) 
    \Using_FPGA.Native_i_1__109 
       (.I0(\Using_FPGA.Native_n_0 ),
        .I1(Q[1]),
        .I2(\Using_FPGA.Native_0 [1]),
        .I3(p_18_in),
        .I4(\Using_FPGA.Native_1 [1]),
        .O(Other_Result[1]));
  LUT5 #(
    .INIT(32'hFFFFE320)) 
    \Using_FPGA.Native_i_1__93 
       (.I0(barrel_result_i_12),
        .I1(Q[0]),
        .I2(\Using_FPGA.Native_0 [0]),
        .I3(p_2_in71_in),
        .I4(\Using_FPGA.Native_1 [0]),
        .O(Other_Result[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_197
   (Last_Mux_1_28,
    Last_Mux_1_12,
    Q,
    I3,
    B);
  output Last_Mux_1_28;
  output Last_Mux_1_12;
  input [1:0]Q;
  input I3;
  input [0:0]B;

  wire [0:0]B;
  wire I3;
  wire Last_Mux_1_12;
  wire Last_Mux_1_28;
  wire [1:0]Q;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[0]),
        .I3(I3),
        .I4(B),
        .I5(1'b1),
        .O5(Last_Mux_1_28),
        .O6(Last_Mux_1_12));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_198
   (\Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    D,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \C[5]_i_2 ,
    \C[5]_i_2_0 ,
    \C[5]_i_2_1 ,
    \C[5]_i_2_2 ,
    \C[5]_i_2_3 ,
    void_bit,
    B,
    \C_reg[16] ,
    \C_reg[20] ,
    \C_reg[16]_0 ,
    \C_reg[20]_0 ,
    \C_reg[20]_1 ,
    \C_reg[4] ,
    \C_reg[20]_2 ,
    \C_reg[4]_0 ,
    \C_reg[4]_1 ,
    \C_reg[4]_2 );
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  output [1:0]D;
  output \Using_FPGA.Native_2 ;
  output \Using_FPGA.Native_3 ;
  input \C[5]_i_2 ;
  input \C[5]_i_2_0 ;
  input \C[5]_i_2_1 ;
  input \C[5]_i_2_2 ;
  input \C[5]_i_2_3 ;
  input void_bit;
  input [2:0]B;
  input \C_reg[16] ;
  input \C_reg[20] ;
  input \C_reg[16]_0 ;
  input \C_reg[20]_0 ;
  input \C_reg[20]_1 ;
  input \C_reg[4] ;
  input \C_reg[20]_2 ;
  input \C_reg[4]_0 ;
  input \C_reg[4]_1 ;
  input \C_reg[4]_2 ;

  wire [2:0]B;
  wire \C[5]_i_2 ;
  wire \C[5]_i_2_0 ;
  wire \C[5]_i_2_1 ;
  wire \C[5]_i_2_2 ;
  wire \C[5]_i_2_3 ;
  wire \C_reg[16] ;
  wire \C_reg[16]_0 ;
  wire \C_reg[20] ;
  wire \C_reg[20]_0 ;
  wire \C_reg[20]_1 ;
  wire \C_reg[20]_2 ;
  wire \C_reg[4] ;
  wire \C_reg[4]_0 ;
  wire \C_reg[4]_1 ;
  wire \C_reg[4]_2 ;
  wire [1:0]D;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire void_bit;

  LUT6 #(
    .INIT(64'h00330F55FF330F55)) 
    \C[0]_i_5 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\C_reg[4]_0 ),
        .I2(\C_reg[4]_1 ),
        .I3(B[0]),
        .I4(\C_reg[4] ),
        .I5(\C_reg[4]_2 ),
        .O(\Using_FPGA.Native_3 ));
  LUT6 #(
    .INIT(64'h3500350F35F035FF)) 
    \C[16]_i_1 
       (.I0(\Using_FPGA.Native_2 ),
        .I1(\C_reg[16] ),
        .I2(B[2]),
        .I3(B[1]),
        .I4(\C_reg[16]_0 ),
        .I5(\C_reg[20] ),
        .O(D[1]));
  LUT6 #(
    .INIT(64'hA003AF03A0F3AFF3)) 
    \C[20]_i_1 
       (.I0(void_bit),
        .I1(\Using_FPGA.Native_2 ),
        .I2(B[1]),
        .I3(B[2]),
        .I4(\C_reg[16] ),
        .I5(\C_reg[20] ),
        .O(D[0]));
  LUT6 #(
    .INIT(64'h00330F55FF330F55)) 
    \C[8]_i_2 
       (.I0(\Using_FPGA.Native_1 ),
        .I1(\C_reg[20]_0 ),
        .I2(\C_reg[20]_1 ),
        .I3(B[0]),
        .I4(\C_reg[4] ),
        .I5(\C_reg[20]_2 ),
        .O(\Using_FPGA.Native_2 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(\C[5]_i_2 ),
        .I1(\C[5]_i_2_0 ),
        .I2(\C[5]_i_2_1 ),
        .I3(\C[5]_i_2_2 ),
        .I4(\C[5]_i_2_3 ),
        .I5(1'b1),
        .O5(\Using_FPGA.Native_0 ),
        .O6(\Using_FPGA.Native_1 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_199
   (Other_Result,
    Last_Mux_1_4,
    Last_Mux_1_27,
    Last_Mux_1_20,
    Last_Mux_1_11,
    \Using_FPGA.Native_i_1__92_0 ,
    Q,
    \Using_FPGA.Native_0 ,
    p_2_in65_in,
    \Using_FPGA.Native_1 ,
    p_14_in);
  output [1:0]Other_Result;
  input Last_Mux_1_4;
  input Last_Mux_1_27;
  input Last_Mux_1_20;
  input Last_Mux_1_11;
  input \Using_FPGA.Native_i_1__92_0 ;
  input [1:0]Q;
  input [1:0]\Using_FPGA.Native_0 ;
  input p_2_in65_in;
  input [1:0]\Using_FPGA.Native_1 ;
  input p_14_in;

  wire Last_Mux_1_11;
  wire Last_Mux_1_20;
  wire Last_Mux_1_27;
  wire Last_Mux_1_4;
  wire [1:0]Other_Result;
  wire [1:0]Q;
  wire [1:0]\Using_FPGA.Native_0 ;
  wire [1:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_i_1__92_0 ;
  wire \Using_FPGA.Native_n_0 ;
  wire barrel_result_i_11;
  wire p_14_in;
  wire p_2_in65_in;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Last_Mux_1_4),
        .I1(Last_Mux_1_27),
        .I2(Last_Mux_1_20),
        .I3(Last_Mux_1_11),
        .I4(\Using_FPGA.Native_i_1__92_0 ),
        .I5(1'b1),
        .O5(\Using_FPGA.Native_n_0 ),
        .O6(barrel_result_i_11));
  LUT5 #(
    .INIT(32'hFFFFE320)) 
    \Using_FPGA.Native_i_1__108 
       (.I0(\Using_FPGA.Native_n_0 ),
        .I1(Q[1]),
        .I2(\Using_FPGA.Native_0 [1]),
        .I3(p_14_in),
        .I4(\Using_FPGA.Native_1 [1]),
        .O(Other_Result[1]));
  LUT5 #(
    .INIT(32'hFFFFE320)) 
    \Using_FPGA.Native_i_1__92 
       (.I0(barrel_result_i_11),
        .I1(Q[0]),
        .I2(\Using_FPGA.Native_0 [0]),
        .I3(p_2_in65_in),
        .I4(\Using_FPGA.Native_1 [0]),
        .O(Other_Result[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_2
   (Y,
    Instr,
    LOCKSTEP_Master_Out);
  output [1:0]Y;
  input [1:0]Instr;
  input [2:0]LOCKSTEP_Master_Out;

  wire [1:0]Instr;
  wire [2:0]LOCKSTEP_Master_Out;
  wire [1:0]Y;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Instr[1]),
        .I1(LOCKSTEP_Master_Out[1]),
        .I2(Instr[0]),
        .I3(LOCKSTEP_Master_Out[0]),
        .I4(LOCKSTEP_Master_Out[2]),
        .I5(1'b1),
        .O5(Y[1]),
        .O6(Y[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_200
   (Last_Mux_1_27,
    Last_Mux_1_11,
    Q,
    I3,
    B);
  output Last_Mux_1_27;
  output Last_Mux_1_11;
  input [1:0]Q;
  input I3;
  input [0:0]B;

  wire [0:0]B;
  wire I3;
  wire Last_Mux_1_11;
  wire Last_Mux_1_27;
  wire [1:0]Q;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[0]),
        .I3(I3),
        .I4(B),
        .I5(1'b1),
        .O5(Last_Mux_1_27),
        .O6(Last_Mux_1_11));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_201
   (\Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \C[6]_i_2 ,
    \C[6]_i_2_0 ,
    \C[6]_i_2_1 ,
    \C[6]_i_2_2 ,
    \C[6]_i_2_3 ,
    \C_reg[3] ,
    \C_reg[3]_0 ,
    \C_reg[3]_1 ,
    B,
    \C_reg[3]_2 );
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  input \C[6]_i_2 ;
  input \C[6]_i_2_0 ;
  input \C[6]_i_2_1 ;
  input \C[6]_i_2_2 ;
  input \C[6]_i_2_3 ;
  input \C_reg[3] ;
  input \C_reg[3]_0 ;
  input \C_reg[3]_1 ;
  input [0:0]B;
  input \C_reg[3]_2 ;

  wire [0:0]B;
  wire \C[6]_i_2 ;
  wire \C[6]_i_2_0 ;
  wire \C[6]_i_2_1 ;
  wire \C[6]_i_2_2 ;
  wire \C[6]_i_2_3 ;
  wire \C_reg[3] ;
  wire \C_reg[3]_0 ;
  wire \C_reg[3]_1 ;
  wire \C_reg[3]_2 ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;

  LUT6 #(
    .INIT(64'h33550F0033550FFF)) 
    \C[3]_i_3 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\C_reg[3] ),
        .I2(\C_reg[3]_0 ),
        .I3(\C_reg[3]_1 ),
        .I4(B),
        .I5(\C_reg[3]_2 ),
        .O(\Using_FPGA.Native_2 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(\C[6]_i_2 ),
        .I1(\C[6]_i_2_0 ),
        .I2(\C[6]_i_2_1 ),
        .I3(\C[6]_i_2_2 ),
        .I4(\C[6]_i_2_3 ),
        .I5(1'b1),
        .O5(\Using_FPGA.Native_0 ),
        .O6(\Using_FPGA.Native_1 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_202
   (Other_Result,
    Last_Mux_1_5,
    Last_Mux_1_26,
    Last_Mux_1_21,
    Last_Mux_1_10,
    \Using_FPGA.Native_i_1__91_0 ,
    Q,
    \Using_FPGA.Native_0 ,
    p_2_in59_in,
    \Using_FPGA.Native_1 ,
    p_10_in);
  output [1:0]Other_Result;
  input Last_Mux_1_5;
  input Last_Mux_1_26;
  input Last_Mux_1_21;
  input Last_Mux_1_10;
  input \Using_FPGA.Native_i_1__91_0 ;
  input [1:0]Q;
  input [1:0]\Using_FPGA.Native_0 ;
  input p_2_in59_in;
  input [1:0]\Using_FPGA.Native_1 ;
  input p_10_in;

  wire Last_Mux_1_10;
  wire Last_Mux_1_21;
  wire Last_Mux_1_26;
  wire Last_Mux_1_5;
  wire [1:0]Other_Result;
  wire [1:0]Q;
  wire [1:0]\Using_FPGA.Native_0 ;
  wire [1:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_i_1__91_0 ;
  wire \Using_FPGA.Native_n_0 ;
  wire barrel_result_i_10;
  wire p_10_in;
  wire p_2_in59_in;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Last_Mux_1_5),
        .I1(Last_Mux_1_26),
        .I2(Last_Mux_1_21),
        .I3(Last_Mux_1_10),
        .I4(\Using_FPGA.Native_i_1__91_0 ),
        .I5(1'b1),
        .O5(\Using_FPGA.Native_n_0 ),
        .O6(barrel_result_i_10));
  LUT5 #(
    .INIT(32'hFFFFE320)) 
    \Using_FPGA.Native_i_1__107 
       (.I0(\Using_FPGA.Native_n_0 ),
        .I1(Q[1]),
        .I2(\Using_FPGA.Native_0 [1]),
        .I3(p_10_in),
        .I4(\Using_FPGA.Native_1 [1]),
        .O(Other_Result[1]));
  LUT5 #(
    .INIT(32'hFFFFE320)) 
    \Using_FPGA.Native_i_1__91 
       (.I0(barrel_result_i_10),
        .I1(Q[0]),
        .I2(\Using_FPGA.Native_0 [0]),
        .I3(p_2_in59_in),
        .I4(\Using_FPGA.Native_1 [0]),
        .O(Other_Result[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_203
   (Last_Mux_1_26,
    Last_Mux_1_10,
    Q,
    I3,
    B);
  output Last_Mux_1_26;
  output Last_Mux_1_10;
  input [1:0]Q;
  input I3;
  input [0:0]B;

  wire [0:0]B;
  wire I3;
  wire Last_Mux_1_10;
  wire Last_Mux_1_26;
  wire [1:0]Q;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[0]),
        .I3(I3),
        .I4(B),
        .I5(1'b1),
        .O5(Last_Mux_1_26),
        .O6(Last_Mux_1_10));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_204
   (\Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    D,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \C[7]_i_2 ,
    \C[7]_i_2_0 ,
    \C[7]_i_2_1 ,
    \C[7]_i_2_2 ,
    \C[7]_i_2_3 ,
    \C_reg[2] ,
    B,
    \C_reg[2]_0 ,
    \C_reg[2]_1 ,
    \C_reg[2]_2 ,
    \C_reg[2]_3 ,
    \C_reg[5] ,
    \C_reg[2]_4 ,
    \C_reg[5]_0 );
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  output [0:0]D;
  output \Using_FPGA.Native_2 ;
  output \Using_FPGA.Native_3 ;
  input \C[7]_i_2 ;
  input \C[7]_i_2_0 ;
  input \C[7]_i_2_1 ;
  input \C[7]_i_2_2 ;
  input \C[7]_i_2_3 ;
  input \C_reg[2] ;
  input [2:0]B;
  input \C_reg[2]_0 ;
  input \C_reg[2]_1 ;
  input \C_reg[2]_2 ;
  input \C_reg[2]_3 ;
  input \C_reg[5] ;
  input \C_reg[2]_4 ;
  input \C_reg[5]_0 ;

  wire [2:0]B;
  wire \C[7]_i_2 ;
  wire \C[7]_i_2_0 ;
  wire \C[7]_i_2_1 ;
  wire \C[7]_i_2_2 ;
  wire \C[7]_i_2_3 ;
  wire \C_reg[2] ;
  wire \C_reg[2]_0 ;
  wire \C_reg[2]_1 ;
  wire \C_reg[2]_2 ;
  wire \C_reg[2]_3 ;
  wire \C_reg[2]_4 ;
  wire \C_reg[5] ;
  wire \C_reg[5]_0 ;
  wire [0:0]D;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;

  LUT6 #(
    .INIT(64'h00550F33FF550F33)) 
    \C[1]_i_4 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\C_reg[5]_0 ),
        .I2(\C_reg[2]_2 ),
        .I3(B[0]),
        .I4(\C_reg[5] ),
        .I5(\C_reg[2]_3 ),
        .O(\Using_FPGA.Native_3 ));
  LUT6 #(
    .INIT(64'h0530053FF530F53F)) 
    \C[2]_i_1 
       (.I0(\Using_FPGA.Native_2 ),
        .I1(\C_reg[2] ),
        .I2(B[2]),
        .I3(B[1]),
        .I4(\C_reg[2]_0 ),
        .I5(\C_reg[2]_1 ),
        .O(D));
  LUT6 #(
    .INIT(64'h00330F55FF330F55)) 
    \C[2]_i_2 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\C_reg[2]_2 ),
        .I2(\C_reg[2]_3 ),
        .I3(B[0]),
        .I4(\C_reg[5] ),
        .I5(\C_reg[2]_4 ),
        .O(\Using_FPGA.Native_2 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(\C[7]_i_2 ),
        .I1(\C[7]_i_2_0 ),
        .I2(\C[7]_i_2_1 ),
        .I3(\C[7]_i_2_2 ),
        .I4(\C[7]_i_2_3 ),
        .I5(1'b1),
        .O5(\Using_FPGA.Native_0 ),
        .O6(\Using_FPGA.Native_1 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_205
   (Other_Result,
    Last_Mux_1_6,
    Last_Mux_1_25,
    Last_Mux_1_22,
    Last_Mux_1_9,
    \Using_FPGA.Native_i_1__90_0 ,
    Q,
    \Using_FPGA.Native_0 ,
    p_2_in53_in,
    \Using_FPGA.Native_1 ,
    p_6_in);
  output [1:0]Other_Result;
  input Last_Mux_1_6;
  input Last_Mux_1_25;
  input Last_Mux_1_22;
  input Last_Mux_1_9;
  input \Using_FPGA.Native_i_1__90_0 ;
  input [1:0]Q;
  input [1:0]\Using_FPGA.Native_0 ;
  input p_2_in53_in;
  input [1:0]\Using_FPGA.Native_1 ;
  input p_6_in;

  wire Last_Mux_1_22;
  wire Last_Mux_1_25;
  wire Last_Mux_1_6;
  wire Last_Mux_1_9;
  wire [1:0]Other_Result;
  wire [1:0]Q;
  wire [1:0]\Using_FPGA.Native_0 ;
  wire [1:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_i_1__90_0 ;
  wire \Using_FPGA.Native_n_0 ;
  wire barrel_result_i_9;
  wire p_2_in53_in;
  wire p_6_in;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Last_Mux_1_6),
        .I1(Last_Mux_1_25),
        .I2(Last_Mux_1_22),
        .I3(Last_Mux_1_9),
        .I4(\Using_FPGA.Native_i_1__90_0 ),
        .I5(1'b1),
        .O5(\Using_FPGA.Native_n_0 ),
        .O6(barrel_result_i_9));
  LUT5 #(
    .INIT(32'hFFFFE320)) 
    \Using_FPGA.Native_i_1__106 
       (.I0(\Using_FPGA.Native_n_0 ),
        .I1(Q[1]),
        .I2(\Using_FPGA.Native_0 [1]),
        .I3(p_6_in),
        .I4(\Using_FPGA.Native_1 [1]),
        .O(Other_Result[1]));
  LUT5 #(
    .INIT(32'hFFFFE320)) 
    \Using_FPGA.Native_i_1__90 
       (.I0(barrel_result_i_9),
        .I1(Q[0]),
        .I2(\Using_FPGA.Native_0 [0]),
        .I3(p_2_in53_in),
        .I4(\Using_FPGA.Native_1 [0]),
        .O(Other_Result[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_206
   (Last_Mux_1_25,
    Last_Mux_1_9,
    Q,
    I3,
    B);
  output Last_Mux_1_25;
  output Last_Mux_1_9;
  input [1:0]Q;
  input I3;
  input [0:0]B;

  wire [0:0]B;
  wire I3;
  wire Last_Mux_1_25;
  wire Last_Mux_1_9;
  wire [1:0]Q;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[0]),
        .I3(I3),
        .I4(B),
        .I5(1'b1),
        .O5(Last_Mux_1_25),
        .O6(Last_Mux_1_9));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_207
   (\Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    D,
    \Using_FPGA.Native_3 ,
    \C[8]_i_2 ,
    \C[8]_i_2_0 ,
    \C[8]_i_2_1 ,
    Shifted,
    \C[8]_i_2_2 ,
    \C_reg[21] ,
    \C_reg[21]_0 ,
    \C_reg[3] ,
    B,
    \C_reg[21]_1 ,
    \C_reg[3]_0 ,
    \C_reg[3]_1 ,
    \C_reg[3]_2 ,
    \C_reg[3]_3 ,
    \C_reg[3]_4 ,
    \C_reg[3]_5 );
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  output [0:0]D;
  output \Using_FPGA.Native_3 ;
  input \C[8]_i_2 ;
  input \C[8]_i_2_0 ;
  input \C[8]_i_2_1 ;
  input Shifted;
  input \C[8]_i_2_2 ;
  input \C_reg[21] ;
  input \C_reg[21]_0 ;
  input \C_reg[3] ;
  input [2:0]B;
  input \C_reg[21]_1 ;
  input \C_reg[3]_0 ;
  input \C_reg[3]_1 ;
  input \C_reg[3]_2 ;
  input \C_reg[3]_3 ;
  input \C_reg[3]_4 ;
  input \C_reg[3]_5 ;

  wire [2:0]B;
  wire \C[8]_i_2 ;
  wire \C[8]_i_2_0 ;
  wire \C[8]_i_2_1 ;
  wire \C[8]_i_2_2 ;
  wire \C_reg[21] ;
  wire \C_reg[21]_0 ;
  wire \C_reg[21]_1 ;
  wire \C_reg[3] ;
  wire \C_reg[3]_0 ;
  wire \C_reg[3]_1 ;
  wire \C_reg[3]_2 ;
  wire \C_reg[3]_3 ;
  wire \C_reg[3]_4 ;
  wire \C_reg[3]_5 ;
  wire [0:0]D;
  wire Shifted;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;

  LUT6 #(
    .INIT(64'h00530F53F053FF53)) 
    \C[3]_i_1 
       (.I0(\Using_FPGA.Native_3 ),
        .I1(\C_reg[3]_0 ),
        .I2(B[1]),
        .I3(B[2]),
        .I4(\C_reg[3]_1 ),
        .I5(\C_reg[3]_2 ),
        .O(D));
  LUT6 #(
    .INIT(64'h00330F55FF330F55)) 
    \C[3]_i_2 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\C_reg[3]_3 ),
        .I2(\C_reg[3]_4 ),
        .I3(B[0]),
        .I4(\C_reg[3] ),
        .I5(\C_reg[3]_5 ),
        .O(\Using_FPGA.Native_3 ));
  LUT6 #(
    .INIT(64'h33550F0033550FFF)) 
    \C[9]_i_2 
       (.I0(\Using_FPGA.Native_1 ),
        .I1(\C_reg[21] ),
        .I2(\C_reg[21]_0 ),
        .I3(\C_reg[3] ),
        .I4(B[0]),
        .I5(\C_reg[21]_1 ),
        .O(\Using_FPGA.Native_2 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(\C[8]_i_2 ),
        .I1(\C[8]_i_2_0 ),
        .I2(\C[8]_i_2_1 ),
        .I3(Shifted),
        .I4(\C[8]_i_2_2 ),
        .I5(1'b1),
        .O5(\Using_FPGA.Native_0 ),
        .O6(\Using_FPGA.Native_1 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_208
   (Other_Result,
    Last_Mux_1_7,
    Last_Mux_1_24,
    Last_Mux_1_23,
    Last_Mux_1_8,
    \Using_FPGA.Native_i_1__89_0 ,
    Q,
    \Using_FPGA.Native_0 ,
    p_2_in47_in,
    \Using_FPGA.Native_1 ,
    p_2_in152_in);
  output [1:0]Other_Result;
  input Last_Mux_1_7;
  input Last_Mux_1_24;
  input Last_Mux_1_23;
  input Last_Mux_1_8;
  input \Using_FPGA.Native_i_1__89_0 ;
  input [1:0]Q;
  input [1:0]\Using_FPGA.Native_0 ;
  input p_2_in47_in;
  input [1:0]\Using_FPGA.Native_1 ;
  input p_2_in152_in;

  wire Last_Mux_1_23;
  wire Last_Mux_1_24;
  wire Last_Mux_1_7;
  wire Last_Mux_1_8;
  wire [1:0]Other_Result;
  wire [1:0]Q;
  wire [1:0]\Using_FPGA.Native_0 ;
  wire [1:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_i_1__89_0 ;
  wire \Using_FPGA.Native_n_0 ;
  wire barrel_result_i_8;
  wire p_2_in152_in;
  wire p_2_in47_in;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Last_Mux_1_7),
        .I1(Last_Mux_1_24),
        .I2(Last_Mux_1_23),
        .I3(Last_Mux_1_8),
        .I4(\Using_FPGA.Native_i_1__89_0 ),
        .I5(1'b1),
        .O5(\Using_FPGA.Native_n_0 ),
        .O6(barrel_result_i_8));
  LUT5 #(
    .INIT(32'hFFFFE320)) 
    \Using_FPGA.Native_i_1__105 
       (.I0(\Using_FPGA.Native_n_0 ),
        .I1(Q[1]),
        .I2(\Using_FPGA.Native_0 [1]),
        .I3(p_2_in152_in),
        .I4(\Using_FPGA.Native_1 [1]),
        .O(Other_Result[1]));
  LUT5 #(
    .INIT(32'hFFFFE320)) 
    \Using_FPGA.Native_i_1__89 
       (.I0(barrel_result_i_8),
        .I1(Q[0]),
        .I2(\Using_FPGA.Native_0 [0]),
        .I3(p_2_in47_in),
        .I4(\Using_FPGA.Native_1 [0]),
        .O(Other_Result[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_209
   (Last_Mux_1_24,
    Last_Mux_1_8,
    Q,
    I3,
    B);
  output Last_Mux_1_24;
  output Last_Mux_1_8;
  input [1:0]Q;
  input I3;
  input [0:0]B;

  wire [0:0]B;
  wire I3;
  wire Last_Mux_1_24;
  wire Last_Mux_1_8;
  wire [1:0]Q;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[0]),
        .I3(I3),
        .I4(B),
        .I5(1'b1),
        .O5(Last_Mux_1_24),
        .O6(Last_Mux_1_8));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_210
   (\Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    D,
    \Using_FPGA.Native_3 ,
    Shifted,
    \C[12]_i_2 ,
    \C[12]_i_2_0 ,
    \C[12]_i_2_1 ,
    \C[12]_i_2_2 ,
    \C_reg[14] ,
    \C_reg[14]_0 ,
    B,
    \C_reg[4] ,
    \C_reg[14]_1 ,
    \C_reg[4]_0 ,
    \C_reg[4]_1 ,
    \C_reg[4]_2 ,
    \C_reg[4]_3 ,
    \C_reg[4]_4 ,
    \C_reg[4]_5 );
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  output [0:0]D;
  output \Using_FPGA.Native_3 ;
  input Shifted;
  input \C[12]_i_2 ;
  input \C[12]_i_2_0 ;
  input \C[12]_i_2_1 ;
  input \C[12]_i_2_2 ;
  input \C_reg[14] ;
  input \C_reg[14]_0 ;
  input [2:0]B;
  input \C_reg[4] ;
  input \C_reg[14]_1 ;
  input \C_reg[4]_0 ;
  input \C_reg[4]_1 ;
  input \C_reg[4]_2 ;
  input \C_reg[4]_3 ;
  input \C_reg[4]_4 ;
  input \C_reg[4]_5 ;

  wire [2:0]B;
  wire \C[12]_i_2 ;
  wire \C[12]_i_2_0 ;
  wire \C[12]_i_2_1 ;
  wire \C[12]_i_2_2 ;
  wire \C_reg[14] ;
  wire \C_reg[14]_0 ;
  wire \C_reg[14]_1 ;
  wire \C_reg[4] ;
  wire \C_reg[4]_0 ;
  wire \C_reg[4]_1 ;
  wire \C_reg[4]_2 ;
  wire \C_reg[4]_3 ;
  wire \C_reg[4]_4 ;
  wire \C_reg[4]_5 ;
  wire [0:0]D;
  wire Shifted;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;

  LUT6 #(
    .INIT(64'h00330F55FF330F55)) 
    \C[0]_i_6 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\C_reg[4]_3 ),
        .I2(\C_reg[4]_4 ),
        .I3(B[0]),
        .I4(\C_reg[4] ),
        .I5(\C_reg[4]_5 ),
        .O(\Using_FPGA.Native_3 ));
  LUT6 #(
    .INIT(64'h3300550F33FF550F)) 
    \C[10]_i_2 
       (.I0(\Using_FPGA.Native_1 ),
        .I1(\C_reg[14] ),
        .I2(\C_reg[14]_0 ),
        .I3(B[0]),
        .I4(\C_reg[4] ),
        .I5(\C_reg[14]_1 ),
        .O(\Using_FPGA.Native_2 ));
  LUT6 #(
    .INIT(64'h0530053FF530F53F)) 
    \C[4]_i_1 
       (.I0(\Using_FPGA.Native_3 ),
        .I1(\C_reg[4]_0 ),
        .I2(B[2]),
        .I3(B[1]),
        .I4(\C_reg[4]_1 ),
        .I5(\C_reg[4]_2 ),
        .O(D));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Shifted),
        .I1(\C[12]_i_2 ),
        .I2(\C[12]_i_2_0 ),
        .I3(\C[12]_i_2_1 ),
        .I4(\C[12]_i_2_2 ),
        .I5(1'b1),
        .O5(\Using_FPGA.Native_0 ),
        .O6(\Using_FPGA.Native_1 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_211
   (Other_Result,
    Last_Mux_1_8,
    Last_Mux_1_23,
    Last_Mux_1_24,
    Last_Mux_1_7,
    \Using_FPGA.Native_i_1__88_0 ,
    Q,
    \Using_FPGA.Native_0 ,
    p_2_in41_in,
    \Using_FPGA.Native_1 ,
    p_2_in144_in);
  output [1:0]Other_Result;
  input Last_Mux_1_8;
  input Last_Mux_1_23;
  input Last_Mux_1_24;
  input Last_Mux_1_7;
  input \Using_FPGA.Native_i_1__88_0 ;
  input [1:0]Q;
  input [1:0]\Using_FPGA.Native_0 ;
  input p_2_in41_in;
  input [1:0]\Using_FPGA.Native_1 ;
  input p_2_in144_in;

  wire Last_Mux_1_23;
  wire Last_Mux_1_24;
  wire Last_Mux_1_7;
  wire Last_Mux_1_8;
  wire [1:0]Other_Result;
  wire [1:0]Q;
  wire [1:0]\Using_FPGA.Native_0 ;
  wire [1:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_i_1__88_0 ;
  wire \Using_FPGA.Native_n_0 ;
  wire barrel_result_i_7;
  wire p_2_in144_in;
  wire p_2_in41_in;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Last_Mux_1_8),
        .I1(Last_Mux_1_23),
        .I2(Last_Mux_1_24),
        .I3(Last_Mux_1_7),
        .I4(\Using_FPGA.Native_i_1__88_0 ),
        .I5(1'b1),
        .O5(\Using_FPGA.Native_n_0 ),
        .O6(barrel_result_i_7));
  LUT5 #(
    .INIT(32'hFFFFE320)) 
    \Using_FPGA.Native_i_1__104 
       (.I0(\Using_FPGA.Native_n_0 ),
        .I1(Q[1]),
        .I2(\Using_FPGA.Native_0 [1]),
        .I3(p_2_in144_in),
        .I4(\Using_FPGA.Native_1 [1]),
        .O(Other_Result[1]));
  LUT5 #(
    .INIT(32'hFFFFE320)) 
    \Using_FPGA.Native_i_1__88 
       (.I0(barrel_result_i_7),
        .I1(Q[0]),
        .I2(\Using_FPGA.Native_0 [0]),
        .I3(p_2_in41_in),
        .I4(\Using_FPGA.Native_1 [0]),
        .O(Other_Result[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_212
   (Last_Mux_1_23,
    Last_Mux_1_7,
    Q,
    I3,
    B);
  output Last_Mux_1_23;
  output Last_Mux_1_7;
  input [1:0]Q;
  input I3;
  input [0:0]B;

  wire [0:0]B;
  wire I3;
  wire Last_Mux_1_23;
  wire Last_Mux_1_7;
  wire [1:0]Q;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[0]),
        .I3(I3),
        .I4(B),
        .I5(1'b1),
        .O5(Last_Mux_1_23),
        .O6(Last_Mux_1_7));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_213
   (\Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    D,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \C[12]_i_2 ,
    \C[12]_i_2_0 ,
    \C[12]_i_2_1 ,
    \C[12]_i_2_2 ,
    \C[12]_i_2_3 ,
    \C_reg[19] ,
    B,
    \C_reg[19]_0 ,
    \C_reg[19]_1 ,
    \C_reg[19]_2 ,
    \C_reg[19]_3 ,
    \C_reg[5] ,
    \C_reg[19]_4 ,
    \C_reg[5]_0 ,
    \C_reg[5]_1 ,
    \C_reg[5]_2 ,
    \C_reg[5]_3 ,
    \C_reg[5]_4 ,
    \C_reg[5]_5 );
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  output [1:0]D;
  output \Using_FPGA.Native_2 ;
  output \Using_FPGA.Native_3 ;
  input \C[12]_i_2 ;
  input \C[12]_i_2_0 ;
  input \C[12]_i_2_1 ;
  input \C[12]_i_2_2 ;
  input \C[12]_i_2_3 ;
  input \C_reg[19] ;
  input [2:0]B;
  input \C_reg[19]_0 ;
  input \C_reg[19]_1 ;
  input \C_reg[19]_2 ;
  input \C_reg[19]_3 ;
  input \C_reg[5] ;
  input \C_reg[19]_4 ;
  input \C_reg[5]_0 ;
  input \C_reg[5]_1 ;
  input \C_reg[5]_2 ;
  input \C_reg[5]_3 ;
  input \C_reg[5]_4 ;
  input \C_reg[5]_5 ;

  wire [2:0]B;
  wire \C[12]_i_2 ;
  wire \C[12]_i_2_0 ;
  wire \C[12]_i_2_1 ;
  wire \C[12]_i_2_2 ;
  wire \C[12]_i_2_3 ;
  wire \C_reg[19] ;
  wire \C_reg[19]_0 ;
  wire \C_reg[19]_1 ;
  wire \C_reg[19]_2 ;
  wire \C_reg[19]_3 ;
  wire \C_reg[19]_4 ;
  wire \C_reg[5] ;
  wire \C_reg[5]_0 ;
  wire \C_reg[5]_1 ;
  wire \C_reg[5]_2 ;
  wire \C_reg[5]_3 ;
  wire \C_reg[5]_4 ;
  wire \C_reg[5]_5 ;
  wire [1:0]D;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;

  LUT6 #(
    .INIT(64'h3300550F33FF550F)) 
    \C[11]_i_2 
       (.I0(\Using_FPGA.Native_1 ),
        .I1(\C_reg[19]_2 ),
        .I2(\C_reg[19]_3 ),
        .I3(B[0]),
        .I4(\C_reg[5] ),
        .I5(\C_reg[19]_4 ),
        .O(\Using_FPGA.Native_2 ));
  LUT6 #(
    .INIT(64'h0530F530053FF53F)) 
    \C[19]_i_1 
       (.I0(\Using_FPGA.Native_2 ),
        .I1(\C_reg[19] ),
        .I2(B[2]),
        .I3(B[1]),
        .I4(\C_reg[19]_0 ),
        .I5(\C_reg[19]_1 ),
        .O(D[0]));
  LUT6 #(
    .INIT(64'h00330F55FF330F55)) 
    \C[1]_i_3 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\C_reg[5]_3 ),
        .I2(\C_reg[5]_4 ),
        .I3(B[0]),
        .I4(\C_reg[5] ),
        .I5(\C_reg[5]_5 ),
        .O(\Using_FPGA.Native_3 ));
  LUT6 #(
    .INIT(64'h3500350F35F035FF)) 
    \C[5]_i_1 
       (.I0(\Using_FPGA.Native_3 ),
        .I1(\C_reg[5]_0 ),
        .I2(B[2]),
        .I3(B[1]),
        .I4(\C_reg[5]_1 ),
        .I5(\C_reg[5]_2 ),
        .O(D[1]));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(\C[12]_i_2 ),
        .I1(\C[12]_i_2_0 ),
        .I2(\C[12]_i_2_1 ),
        .I3(\C[12]_i_2_2 ),
        .I4(\C[12]_i_2_3 ),
        .I5(1'b1),
        .O5(\Using_FPGA.Native_0 ),
        .O6(\Using_FPGA.Native_1 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_214
   (Other_Result,
    Last_Mux_1_9,
    Last_Mux_1_22,
    Last_Mux_1_25,
    Last_Mux_1_6,
    \Using_FPGA.Native_i_1__87_0 ,
    Q,
    \Using_FPGA.Native_0 ,
    p_2_in35_in,
    \Using_FPGA.Native_1 ,
    p_2_in137_in);
  output [1:0]Other_Result;
  input Last_Mux_1_9;
  input Last_Mux_1_22;
  input Last_Mux_1_25;
  input Last_Mux_1_6;
  input \Using_FPGA.Native_i_1__87_0 ;
  input [1:0]Q;
  input [1:0]\Using_FPGA.Native_0 ;
  input p_2_in35_in;
  input [1:0]\Using_FPGA.Native_1 ;
  input p_2_in137_in;

  wire Last_Mux_1_22;
  wire Last_Mux_1_25;
  wire Last_Mux_1_6;
  wire Last_Mux_1_9;
  wire [1:0]Other_Result;
  wire [1:0]Q;
  wire [1:0]\Using_FPGA.Native_0 ;
  wire [1:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_i_1__87_0 ;
  wire \Using_FPGA.Native_n_0 ;
  wire barrel_result_i_6;
  wire p_2_in137_in;
  wire p_2_in35_in;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Last_Mux_1_9),
        .I1(Last_Mux_1_22),
        .I2(Last_Mux_1_25),
        .I3(Last_Mux_1_6),
        .I4(\Using_FPGA.Native_i_1__87_0 ),
        .I5(1'b1),
        .O5(\Using_FPGA.Native_n_0 ),
        .O6(barrel_result_i_6));
  LUT5 #(
    .INIT(32'hFFFFE320)) 
    \Using_FPGA.Native_i_1__103 
       (.I0(\Using_FPGA.Native_n_0 ),
        .I1(Q[1]),
        .I2(\Using_FPGA.Native_0 [1]),
        .I3(p_2_in137_in),
        .I4(\Using_FPGA.Native_1 [1]),
        .O(Other_Result[1]));
  LUT5 #(
    .INIT(32'hFFFFE320)) 
    \Using_FPGA.Native_i_1__87 
       (.I0(barrel_result_i_6),
        .I1(Q[0]),
        .I2(\Using_FPGA.Native_0 [0]),
        .I3(p_2_in35_in),
        .I4(\Using_FPGA.Native_1 [0]),
        .O(Other_Result[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_215
   (Last_Mux_1_22,
    Last_Mux_1_6,
    Q,
    I3,
    B);
  output Last_Mux_1_22;
  output Last_Mux_1_6;
  input [1:0]Q;
  input I3;
  input [0:0]B;

  wire [0:0]B;
  wire I3;
  wire Last_Mux_1_22;
  wire Last_Mux_1_6;
  wire [1:0]Q;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[0]),
        .I3(I3),
        .I4(B),
        .I5(1'b1),
        .O5(Last_Mux_1_22),
        .O6(Last_Mux_1_6));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_3
   (Y,
    Instr,
    LOCKSTEP_Master_Out);
  output [1:0]Y;
  input [1:0]Instr;
  input [2:0]LOCKSTEP_Master_Out;

  wire [1:0]Instr;
  wire [2:0]LOCKSTEP_Master_Out;
  wire [1:0]Y;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Instr[1]),
        .I1(LOCKSTEP_Master_Out[1]),
        .I2(Instr[0]),
        .I3(LOCKSTEP_Master_Out[0]),
        .I4(LOCKSTEP_Master_Out[2]),
        .I5(1'b1),
        .O5(Y[1]),
        .O6(Y[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_4
   (Y,
    Instr,
    LOCKSTEP_Master_Out);
  output [1:0]Y;
  input [1:0]Instr;
  input [2:0]LOCKSTEP_Master_Out;

  wire [1:0]Instr;
  wire [2:0]LOCKSTEP_Master_Out;
  wire [1:0]Y;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Instr[1]),
        .I1(LOCKSTEP_Master_Out[1]),
        .I2(Instr[0]),
        .I3(LOCKSTEP_Master_Out[0]),
        .I4(LOCKSTEP_Master_Out[2]),
        .I5(1'b1),
        .O5(Y[1]),
        .O6(Y[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_5
   (Y,
    Instr,
    LOCKSTEP_Master_Out);
  output [1:0]Y;
  input [1:0]Instr;
  input [2:0]LOCKSTEP_Master_Out;

  wire [1:0]Instr;
  wire [2:0]LOCKSTEP_Master_Out;
  wire [1:0]Y;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Instr[1]),
        .I1(LOCKSTEP_Master_Out[1]),
        .I2(Instr[0]),
        .I3(LOCKSTEP_Master_Out[0]),
        .I4(LOCKSTEP_Master_Out[2]),
        .I5(1'b1),
        .O5(Y[1]),
        .O6(Y[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_6
   (Y,
    Instr,
    LOCKSTEP_Master_Out);
  output [1:0]Y;
  input [1:0]Instr;
  input [2:0]LOCKSTEP_Master_Out;

  wire [1:0]Instr;
  wire [2:0]LOCKSTEP_Master_Out;
  wire [1:0]Y;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Instr[1]),
        .I1(LOCKSTEP_Master_Out[1]),
        .I2(Instr[0]),
        .I3(LOCKSTEP_Master_Out[0]),
        .I4(LOCKSTEP_Master_Out[2]),
        .I5(1'b1),
        .O5(Y[1]),
        .O6(Y[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_7
   (Y,
    Instr,
    LOCKSTEP_Master_Out);
  output [1:0]Y;
  input [1:0]Instr;
  input [2:0]LOCKSTEP_Master_Out;

  wire [1:0]Instr;
  wire [2:0]LOCKSTEP_Master_Out;
  wire [1:0]Y;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Instr[1]),
        .I1(LOCKSTEP_Master_Out[1]),
        .I2(Instr[0]),
        .I3(LOCKSTEP_Master_Out[0]),
        .I4(LOCKSTEP_Master_Out[2]),
        .I5(1'b1),
        .O5(Y[1]),
        .O6(Y[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_8
   (Y,
    Instr,
    LOCKSTEP_Master_Out);
  output [1:0]Y;
  input [1:0]Instr;
  input [2:0]LOCKSTEP_Master_Out;

  wire [1:0]Instr;
  wire [2:0]LOCKSTEP_Master_Out;
  wire [1:0]Y;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Instr[1]),
        .I1(LOCKSTEP_Master_Out[1]),
        .I2(Instr[0]),
        .I3(LOCKSTEP_Master_Out[0]),
        .I4(LOCKSTEP_Master_Out[2]),
        .I5(1'b1),
        .O5(Y[1]),
        .O6(Y[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized4_9
   (Y,
    Instr,
    LOCKSTEP_Master_Out);
  output [1:0]Y;
  input [1:0]Instr;
  input [2:0]LOCKSTEP_Master_Out;

  wire [1:0]Instr;
  wire [2:0]LOCKSTEP_Master_Out;
  wire [1:0]Y;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Instr[1]),
        .I1(LOCKSTEP_Master_Out[1]),
        .I2(Instr[0]),
        .I3(LOCKSTEP_Master_Out[0]),
        .I4(LOCKSTEP_Master_Out[2]),
        .I5(1'b1),
        .O5(Y[1]),
        .O6(Y[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized6
   (low_addr_i_0,
    low_addr_i_1,
    Op2,
    Op1);
  output low_addr_i_0;
  output low_addr_i_1;
  input [1:0]Op2;
  input [1:0]Op1;

  wire [1:0]Op1;
  wire [1:0]Op2;
  wire low_addr_i_0;
  wire low_addr_i_1;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h8778877866666666)) 
    \Using_FPGA.Native 
       (.I0(Op2[0]),
        .I1(Op1[0]),
        .I2(Op2[1]),
        .I3(Op1[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(low_addr_i_0),
        .O6(low_addr_i_1));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module block_design_microblaze_0_0_MB_LUT6_2__parameterized8
   (byte_selects_0,
    byte_selects_1,
    Op2,
    Op1);
  output byte_selects_0;
  output byte_selects_1;
  input [1:0]Op2;
  input [1:0]Op1;

  wire [1:0]Op1;
  wire [1:0]Op2;
  wire byte_selects_0;
  wire byte_selects_1;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h7887877899996666)) 
    \Using_FPGA.Native 
       (.I0(Op2[0]),
        .I1(Op1[0]),
        .I2(Op2[1]),
        .I3(Op1[1]),
        .I4(1'b1),
        .I5(1'b1),
        .O5(byte_selects_0),
        .O6(byte_selects_1));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module block_design_microblaze_0_0_MB_LUT6__parameterized1
   (ex_Result,
    Result_Sel,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Data_Read0_out,
    mul_ALU_Res);
  output [0:0]ex_Result;
  input [0:1]Result_Sel;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]Data_Read0_out;
  input mul_ALU_Res;

  wire [0:0]Data_Read0_out;
  wire [0:1]Result_Sel;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [0:0]ex_Result;
  wire mul_ALU_Res;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Result_Sel[1]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(Data_Read0_out),
        .I4(mul_ALU_Res),
        .I5(Result_Sel[0]),
        .O(ex_Result));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module block_design_microblaze_0_0_MB_LUT6__parameterized1_397
   (ex_Result,
    Result_Sel,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Data_Read0_out,
    mul_ALU_Res);
  output [0:0]ex_Result;
  input [0:1]Result_Sel;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]Data_Read0_out;
  input mul_ALU_Res;

  wire [0:0]Data_Read0_out;
  wire [0:1]Result_Sel;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [0:0]ex_Result;
  wire mul_ALU_Res;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Result_Sel[1]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(Data_Read0_out),
        .I4(mul_ALU_Res),
        .I5(Result_Sel[0]),
        .O(ex_Result));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module block_design_microblaze_0_0_MB_LUT6__parameterized1_400
   (ex_Result,
    Result_Sel,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Data_Read0_out,
    mul_ALU_Res);
  output [0:0]ex_Result;
  input [0:1]Result_Sel;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]Data_Read0_out;
  input mul_ALU_Res;

  wire [0:0]Data_Read0_out;
  wire [0:1]Result_Sel;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [0:0]ex_Result;
  wire mul_ALU_Res;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Result_Sel[1]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(Data_Read0_out),
        .I4(mul_ALU_Res),
        .I5(Result_Sel[0]),
        .O(ex_Result));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module block_design_microblaze_0_0_MB_LUT6__parameterized1_403
   (ex_Result,
    Result_Sel,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Data_Read0_out,
    mul_ALU_Res);
  output [0:0]ex_Result;
  input [0:1]Result_Sel;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]Data_Read0_out;
  input mul_ALU_Res;

  wire [0:0]Data_Read0_out;
  wire [0:1]Result_Sel;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [0:0]ex_Result;
  wire mul_ALU_Res;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Result_Sel[1]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(Data_Read0_out),
        .I4(mul_ALU_Res),
        .I5(Result_Sel[0]),
        .O(ex_Result));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module block_design_microblaze_0_0_MB_LUT6__parameterized1_406
   (ex_Result,
    Result_Sel,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Data_Read0_out,
    mul_ALU_Res);
  output [0:0]ex_Result;
  input [0:1]Result_Sel;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]Data_Read0_out;
  input mul_ALU_Res;

  wire [0:0]Data_Read0_out;
  wire [0:1]Result_Sel;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [0:0]ex_Result;
  wire mul_ALU_Res;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Result_Sel[1]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(Data_Read0_out),
        .I4(mul_ALU_Res),
        .I5(Result_Sel[0]),
        .O(ex_Result));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module block_design_microblaze_0_0_MB_LUT6__parameterized1_409
   (ex_Result,
    Result_Sel,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Data_Read0_out,
    mul_ALU_Res);
  output [0:0]ex_Result;
  input [0:1]Result_Sel;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]Data_Read0_out;
  input mul_ALU_Res;

  wire [0:0]Data_Read0_out;
  wire [0:1]Result_Sel;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [0:0]ex_Result;
  wire mul_ALU_Res;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Result_Sel[1]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(Data_Read0_out),
        .I4(mul_ALU_Res),
        .I5(Result_Sel[0]),
        .O(ex_Result));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module block_design_microblaze_0_0_MB_LUT6__parameterized1_412
   (ex_Result,
    Result_Sel,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Data_Read0_out,
    mul_ALU_Res);
  output [0:0]ex_Result;
  input [0:1]Result_Sel;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]Data_Read0_out;
  input mul_ALU_Res;

  wire [0:0]Data_Read0_out;
  wire [0:1]Result_Sel;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [0:0]ex_Result;
  wire mul_ALU_Res;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Result_Sel[1]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(Data_Read0_out),
        .I4(mul_ALU_Res),
        .I5(Result_Sel[0]),
        .O(ex_Result));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module block_design_microblaze_0_0_MB_LUT6__parameterized1_415
   (ex_Result,
    Result_Sel,
    shift_Logic_Result,
    extend_Data_Read,
    mul_ALU_Res);
  output [0:0]ex_Result;
  input [0:1]Result_Sel;
  input [0:0]shift_Logic_Result;
  input [0:0]extend_Data_Read;
  input mul_ALU_Res;

  wire [0:1]Result_Sel;
  wire [0:0]ex_Result;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]shift_Logic_Result;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Result_Sel[1]),
        .I1(shift_Logic_Result),
        .I2(1'b1),
        .I3(extend_Data_Read),
        .I4(mul_ALU_Res),
        .I5(Result_Sel[0]),
        .O(ex_Result));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module block_design_microblaze_0_0_MB_LUT6__parameterized1_418
   (ex_Result,
    Result_Sel,
    shift_Logic_Result,
    extend_Data_Read,
    mul_ALU_Res);
  output [0:0]ex_Result;
  input [0:1]Result_Sel;
  input [0:0]shift_Logic_Result;
  input [0:0]extend_Data_Read;
  input mul_ALU_Res;

  wire [0:1]Result_Sel;
  wire [0:0]ex_Result;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]shift_Logic_Result;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Result_Sel[1]),
        .I1(shift_Logic_Result),
        .I2(1'b1),
        .I3(extend_Data_Read),
        .I4(mul_ALU_Res),
        .I5(Result_Sel[0]),
        .O(ex_Result));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module block_design_microblaze_0_0_MB_LUT6__parameterized1_421
   (ex_Result,
    Result_Sel,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Data_Read0_out,
    mul_ALU_Res);
  output [0:0]ex_Result;
  input [0:1]Result_Sel;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]Data_Read0_out;
  input mul_ALU_Res;

  wire [0:0]Data_Read0_out;
  wire [0:1]Result_Sel;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [0:0]ex_Result;
  wire mul_ALU_Res;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Result_Sel[1]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(Data_Read0_out),
        .I4(mul_ALU_Res),
        .I5(Result_Sel[0]),
        .O(ex_Result));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module block_design_microblaze_0_0_MB_LUT6__parameterized1_424
   (ex_Result,
    Result_Sel,
    shift_Logic_Result,
    extend_Data_Read,
    mul_ALU_Res);
  output [0:0]ex_Result;
  input [0:1]Result_Sel;
  input [0:0]shift_Logic_Result;
  input [0:0]extend_Data_Read;
  input mul_ALU_Res;

  wire [0:1]Result_Sel;
  wire [0:0]ex_Result;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]shift_Logic_Result;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Result_Sel[1]),
        .I1(shift_Logic_Result),
        .I2(1'b1),
        .I3(extend_Data_Read),
        .I4(mul_ALU_Res),
        .I5(Result_Sel[0]),
        .O(ex_Result));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module block_design_microblaze_0_0_MB_LUT6__parameterized1_427
   (ex_Result,
    Result_Sel,
    shift_Logic_Result,
    extend_Data_Read,
    mul_ALU_Res);
  output [0:0]ex_Result;
  input [0:1]Result_Sel;
  input [0:0]shift_Logic_Result;
  input [0:0]extend_Data_Read;
  input mul_ALU_Res;

  wire [0:1]Result_Sel;
  wire [0:0]ex_Result;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]shift_Logic_Result;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Result_Sel[1]),
        .I1(shift_Logic_Result),
        .I2(1'b1),
        .I3(extend_Data_Read),
        .I4(mul_ALU_Res),
        .I5(Result_Sel[0]),
        .O(ex_Result));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module block_design_microblaze_0_0_MB_LUT6__parameterized1_430
   (ex_Result,
    Result_Sel,
    shift_Logic_Result,
    extend_Data_Read,
    mul_ALU_Res);
  output [0:0]ex_Result;
  input [0:1]Result_Sel;
  input [0:0]shift_Logic_Result;
  input [0:0]extend_Data_Read;
  input mul_ALU_Res;

  wire [0:1]Result_Sel;
  wire [0:0]ex_Result;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]shift_Logic_Result;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Result_Sel[1]),
        .I1(shift_Logic_Result),
        .I2(1'b1),
        .I3(extend_Data_Read),
        .I4(mul_ALU_Res),
        .I5(Result_Sel[0]),
        .O(ex_Result));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module block_design_microblaze_0_0_MB_LUT6__parameterized1_433
   (ex_Result,
    Result_Sel,
    shift_Logic_Result,
    extend_Data_Read,
    mul_ALU_Res);
  output [0:0]ex_Result;
  input [0:1]Result_Sel;
  input [0:0]shift_Logic_Result;
  input [0:0]extend_Data_Read;
  input mul_ALU_Res;

  wire [0:1]Result_Sel;
  wire [0:0]ex_Result;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]shift_Logic_Result;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Result_Sel[1]),
        .I1(shift_Logic_Result),
        .I2(1'b1),
        .I3(extend_Data_Read),
        .I4(mul_ALU_Res),
        .I5(Result_Sel[0]),
        .O(ex_Result));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module block_design_microblaze_0_0_MB_LUT6__parameterized1_436
   (ex_Result,
    Result_Sel,
    \Using_FPGA.Native_0 ,
    extend_Data_Read,
    mul_ALU_Res);
  output [0:0]ex_Result;
  input [0:1]Result_Sel;
  input [0:0]\Using_FPGA.Native_0 ;
  input [0:0]extend_Data_Read;
  input mul_ALU_Res;

  wire [0:1]Result_Sel;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Result_Sel[1]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(1'b1),
        .I3(extend_Data_Read),
        .I4(mul_ALU_Res),
        .I5(Result_Sel[0]),
        .O(ex_Result));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module block_design_microblaze_0_0_MB_LUT6__parameterized1_439
   (ex_Result,
    Result_Sel,
    \Using_FPGA.Native_0 ,
    extend_Data_Read,
    mul_ALU_Res);
  output [0:0]ex_Result;
  input [0:1]Result_Sel;
  input [0:0]\Using_FPGA.Native_0 ;
  input [0:0]extend_Data_Read;
  input mul_ALU_Res;

  wire [0:1]Result_Sel;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Result_Sel[1]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(1'b1),
        .I3(extend_Data_Read),
        .I4(mul_ALU_Res),
        .I5(Result_Sel[0]),
        .O(ex_Result));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module block_design_microblaze_0_0_MB_LUT6__parameterized1_442
   (ex_Result,
    Result_Sel,
    Shift_Logic_Res,
    Data_Read_Mask,
    extend_Data_Read,
    mul_ALU_Res);
  output [0:0]ex_Result;
  input [0:1]Result_Sel;
  input Shift_Logic_Res;
  input Data_Read_Mask;
  input [0:0]extend_Data_Read;
  input mul_ALU_Res;

  wire Data_Read_Mask;
  wire [0:1]Result_Sel;
  wire Shift_Logic_Res;
  wire [0:0]ex_Result;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Result_Sel[1]),
        .I1(Shift_Logic_Res),
        .I2(Data_Read_Mask),
        .I3(extend_Data_Read),
        .I4(mul_ALU_Res),
        .I5(Result_Sel[0]),
        .O(ex_Result));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module block_design_microblaze_0_0_MB_LUT6__parameterized1_445
   (ex_Result,
    Result_Sel,
    \Using_FPGA.Native_0 ,
    Data_Read_Mask,
    extend_Data_Read,
    mul_ALU_Res);
  output [0:0]ex_Result;
  input [0:1]Result_Sel;
  input \Using_FPGA.Native_0 ;
  input Data_Read_Mask;
  input [0:0]extend_Data_Read;
  input mul_ALU_Res;

  wire Data_Read_Mask;
  wire [0:1]Result_Sel;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Result_Sel[1]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Data_Read_Mask),
        .I3(extend_Data_Read),
        .I4(mul_ALU_Res),
        .I5(Result_Sel[0]),
        .O(ex_Result));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module block_design_microblaze_0_0_MB_LUT6__parameterized1_448
   (ex_Result,
    Result_Sel,
    \Using_FPGA.Native_0 ,
    Data_Read_Mask,
    extend_Data_Read,
    mul_ALU_Res);
  output [0:0]ex_Result;
  input [0:1]Result_Sel;
  input \Using_FPGA.Native_0 ;
  input Data_Read_Mask;
  input [0:0]extend_Data_Read;
  input mul_ALU_Res;

  wire Data_Read_Mask;
  wire [0:1]Result_Sel;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Result_Sel[1]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Data_Read_Mask),
        .I3(extend_Data_Read),
        .I4(mul_ALU_Res),
        .I5(Result_Sel[0]),
        .O(ex_Result));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module block_design_microblaze_0_0_MB_LUT6__parameterized1_451
   (ex_Result,
    Result_Sel,
    \Using_FPGA.Native_0 ,
    Data_Read_Mask,
    extend_Data_Read,
    mul_ALU_Res);
  output [0:0]ex_Result;
  input [0:1]Result_Sel;
  input \Using_FPGA.Native_0 ;
  input Data_Read_Mask;
  input [0:0]extend_Data_Read;
  input mul_ALU_Res;

  wire Data_Read_Mask;
  wire [0:1]Result_Sel;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Result_Sel[1]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Data_Read_Mask),
        .I3(extend_Data_Read),
        .I4(mul_ALU_Res),
        .I5(Result_Sel[0]),
        .O(ex_Result));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module block_design_microblaze_0_0_MB_LUT6__parameterized1_454
   (ex_Result,
    Result_Sel,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Data_Read0_out,
    mul_ALU_Res);
  output [0:0]ex_Result;
  input [0:1]Result_Sel;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]Data_Read0_out;
  input mul_ALU_Res;

  wire [0:0]Data_Read0_out;
  wire [0:1]Result_Sel;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [0:0]ex_Result;
  wire mul_ALU_Res;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Result_Sel[1]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(Data_Read0_out),
        .I4(mul_ALU_Res),
        .I5(Result_Sel[0]),
        .O(ex_Result));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module block_design_microblaze_0_0_MB_LUT6__parameterized1_457
   (ex_Result,
    Result_Sel,
    \Using_FPGA.Native_0 ,
    Data_Read_Mask,
    extend_Data_Read,
    mul_ALU_Res);
  output [0:0]ex_Result;
  input [0:1]Result_Sel;
  input \Using_FPGA.Native_0 ;
  input Data_Read_Mask;
  input [0:0]extend_Data_Read;
  input mul_ALU_Res;

  wire Data_Read_Mask;
  wire [0:1]Result_Sel;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Result_Sel[1]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Data_Read_Mask),
        .I3(extend_Data_Read),
        .I4(mul_ALU_Res),
        .I5(Result_Sel[0]),
        .O(ex_Result));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module block_design_microblaze_0_0_MB_LUT6__parameterized1_460
   (ex_Result,
    Result_Sel,
    \Using_FPGA.Native_0 ,
    Data_Read_Mask,
    extend_Data_Read,
    mul_ALU_Res);
  output [0:0]ex_Result;
  input [0:1]Result_Sel;
  input \Using_FPGA.Native_0 ;
  input Data_Read_Mask;
  input [0:0]extend_Data_Read;
  input mul_ALU_Res;

  wire Data_Read_Mask;
  wire [0:1]Result_Sel;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Result_Sel[1]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Data_Read_Mask),
        .I3(extend_Data_Read),
        .I4(mul_ALU_Res),
        .I5(Result_Sel[0]),
        .O(ex_Result));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module block_design_microblaze_0_0_MB_LUT6__parameterized1_463
   (ex_Result,
    Result_Sel,
    \Using_FPGA.Native_0 ,
    Data_Read_Mask,
    extend_Data_Read,
    mul_ALU_Res);
  output [0:0]ex_Result;
  input [0:1]Result_Sel;
  input \Using_FPGA.Native_0 ;
  input Data_Read_Mask;
  input [0:0]extend_Data_Read;
  input mul_ALU_Res;

  wire Data_Read_Mask;
  wire [0:1]Result_Sel;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Result_Sel[1]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Data_Read_Mask),
        .I3(extend_Data_Read),
        .I4(mul_ALU_Res),
        .I5(Result_Sel[0]),
        .O(ex_Result));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module block_design_microblaze_0_0_MB_LUT6__parameterized1_466
   (ex_Result,
    Result_Sel,
    \Using_FPGA.Native_0 ,
    Data_Read_Mask,
    extend_Data_Read,
    mul_ALU_Res);
  output [0:0]ex_Result;
  input [0:1]Result_Sel;
  input \Using_FPGA.Native_0 ;
  input Data_Read_Mask;
  input [0:0]extend_Data_Read;
  input mul_ALU_Res;

  wire Data_Read_Mask;
  wire [0:1]Result_Sel;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Result_Sel[1]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Data_Read_Mask),
        .I3(extend_Data_Read),
        .I4(mul_ALU_Res),
        .I5(Result_Sel[0]),
        .O(ex_Result));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module block_design_microblaze_0_0_MB_LUT6__parameterized1_469
   (ex_Result,
    Result_Sel,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Data_Read0_out,
    mul_ALU_Res);
  output [0:0]ex_Result;
  input [0:1]Result_Sel;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]Data_Read0_out;
  input mul_ALU_Res;

  wire [0:0]Data_Read0_out;
  wire [0:1]Result_Sel;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [0:0]ex_Result;
  wire mul_ALU_Res;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Result_Sel[1]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(Data_Read0_out),
        .I4(mul_ALU_Res),
        .I5(Result_Sel[0]),
        .O(ex_Result));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module block_design_microblaze_0_0_MB_LUT6__parameterized1_472
   (ex_Result,
    Result_Sel,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Data_Read0_out,
    mul_ALU_Res);
  output [0:0]ex_Result;
  input [0:1]Result_Sel;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]Data_Read0_out;
  input mul_ALU_Res;

  wire [0:0]Data_Read0_out;
  wire [0:1]Result_Sel;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [0:0]ex_Result;
  wire mul_ALU_Res;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Result_Sel[1]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(Data_Read0_out),
        .I4(mul_ALU_Res),
        .I5(Result_Sel[0]),
        .O(ex_Result));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module block_design_microblaze_0_0_MB_LUT6__parameterized1_475
   (ex_Result,
    Result_Sel,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Data_Read0_out,
    mul_ALU_Res);
  output [0:0]ex_Result;
  input [0:1]Result_Sel;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]Data_Read0_out;
  input mul_ALU_Res;

  wire [0:0]Data_Read0_out;
  wire [0:1]Result_Sel;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [0:0]ex_Result;
  wire mul_ALU_Res;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Result_Sel[1]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(Data_Read0_out),
        .I4(mul_ALU_Res),
        .I5(Result_Sel[0]),
        .O(ex_Result));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module block_design_microblaze_0_0_MB_LUT6__parameterized1_478
   (ex_Result,
    Result_Sel,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Data_Read0_out,
    mul_ALU_Res);
  output [0:0]ex_Result;
  input [0:1]Result_Sel;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]Data_Read0_out;
  input mul_ALU_Res;

  wire [0:0]Data_Read0_out;
  wire [0:1]Result_Sel;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [0:0]ex_Result;
  wire mul_ALU_Res;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Result_Sel[1]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(Data_Read0_out),
        .I4(mul_ALU_Res),
        .I5(Result_Sel[0]),
        .O(ex_Result));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module block_design_microblaze_0_0_MB_LUT6__parameterized1_481
   (ex_Result,
    Result_Sel,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Data_Read0_out,
    mul_ALU_Res);
  output [0:0]ex_Result;
  input [0:1]Result_Sel;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]Data_Read0_out;
  input mul_ALU_Res;

  wire [0:0]Data_Read0_out;
  wire [0:1]Result_Sel;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [0:0]ex_Result;
  wire mul_ALU_Res;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Result_Sel[1]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(Data_Read0_out),
        .I4(mul_ALU_Res),
        .I5(Result_Sel[0]),
        .O(ex_Result));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module block_design_microblaze_0_0_MB_LUT6__parameterized1_484
   (ex_Result,
    Result_Sel,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Data_Read0_out,
    mul_ALU_Res);
  output [0:0]ex_Result;
  input [0:1]Result_Sel;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]Data_Read0_out;
  input mul_ALU_Res;

  wire [0:0]Data_Read0_out;
  wire [0:1]Result_Sel;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [0:0]ex_Result;
  wire mul_ALU_Res;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Result_Sel[1]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(Data_Read0_out),
        .I4(mul_ALU_Res),
        .I5(Result_Sel[0]),
        .O(ex_Result));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module block_design_microblaze_0_0_MB_LUT6__parameterized1_487
   (ex_Result,
    Result_Sel,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Data_Read0_out,
    mul_ALU_Res);
  output [0:0]ex_Result;
  input [0:1]Result_Sel;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]Data_Read0_out;
  input mul_ALU_Res;

  wire [0:0]Data_Read0_out;
  wire [0:1]Result_Sel;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [0:0]ex_Result;
  wire mul_ALU_Res;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Result_Sel[1]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(Data_Read0_out),
        .I4(mul_ALU_Res),
        .I5(Result_Sel[0]),
        .O(ex_Result));
endmodule

module block_design_microblaze_0_0_MB_MULT_AND
   (sub_Carry,
    alu_Op_II,
    \Using_FPGA.Native_0 );
  output sub_Carry;
  input [0:0]alu_Op_II;
  input \Using_FPGA.Native_0 ;

  wire \Using_FPGA.Native_0 ;
  wire [0:0]alu_Op_II;
  wire sub_Carry;

  (* XILINX_LEGACY_PRIM = "MULT_AND" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native 
       (.I0(alu_Op_II),
        .I1(\Using_FPGA.Native_0 ),
        .O(sub_Carry));
endmodule

(* ORIG_REF_NAME = "MB_MULT_AND" *) 
module block_design_microblaze_0_0_MB_MULT_AND_1054
   (DI,
    Op2,
    alu_Op);
  output DI;
  input Op2;
  input [0:0]alu_Op;

  wire DI;
  wire Op2;
  wire [0:0]alu_Op;

  (* XILINX_LEGACY_PRIM = "MULT_AND" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native 
       (.I0(Op2),
        .I1(alu_Op),
        .O(DI));
endmodule

module block_design_microblaze_0_0_MB_MUXCY
   (carry_7,
    SRL16_Sel_7,
    Q,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output carry_7;
  input SRL16_Sel_7;
  input [0:0]Q;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire [0:0]Q;
  wire SRL16_Sel_7;
  wire carry_7;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,carry_7}),
        .CYINIT(Q),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,SRL16_Sel_7}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_1056
   (CI,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31] ,
    Unsigned_Op,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9);
  output CI;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31] ;
  input Unsigned_Op;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31] ;
  wire CI;
  wire LO;
  wire Unsigned_Op;
  wire \^lopt_1 ;
  wire lopt_10;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign \^lopt_9  = lopt_8;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_10;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(LO),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,CI}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,Unsigned_Op}),
        .O({\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:2],lopt_10,\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [0]}),
        .S({\^lopt_9 ,\^lopt_6 ,\^lopt_3 ,\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31] }));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_108
   (opsel1_SPR_I,
    opsel1_SPR_Select,
    take_Intr_Now_III,
    lopt,
    lopt_1,
    lopt_2);
  output opsel1_SPR_I;
  input opsel1_SPR_Select;
  input take_Intr_Now_III;
  output lopt;
  input lopt_1;
  input lopt_2;

  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire lopt_3;
  wire opsel1_SPR_I;
  wire opsel1_SPR_Select;
  wire take_Intr_Now_III;
  wire [3:2]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [3:2]\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;
  wire [3:2]\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = lopt_2;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(take_Intr_Now_III),
        .CO({\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [3:2],\^lopt_1 ,opsel1_SPR_I}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED [3:2],\^lopt_2 ,1'b1}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED [3:2],lopt_3,opsel1_SPR_Select}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_109
   (take_Intr_Now_I,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    inHibit_EX,
    FSL_Break_No_Dbg,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    lopt,
    lopt_1,
    lopt_2);
  output take_Intr_Now_I;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input inHibit_EX;
  input FSL_Break_No_Dbg;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire FSL_Break_No_Dbg;
  wire S23_out;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire inHibit_EX;
  wire take_Intr_Now_I;

  assign lopt_1 = \<const0> ;
  assign lopt_2 = S23_out;
  assign take_Intr_Now_I = lopt;
  GND GND
       (.G(\<const0> ));
  LUT5 #(
    .INIT(32'hAAAAAAAB)) 
    \Using_FPGA.Native_i_1__131 
       (.I0(\Using_FPGA.Native_1 ),
        .I1(inHibit_EX),
        .I2(FSL_Break_No_Dbg),
        .I3(\Using_FPGA.Native_2 ),
        .I4(\Using_FPGA.Native_3 ),
        .O(S23_out));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_110
   (take_Intr_Now_II,
    S,
    take_Intr_Now_I,
    lopt,
    lopt_1);
  output take_Intr_Now_II;
  input S;
  input take_Intr_Now_I;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire S;
  wire take_Intr_Now_I;
  wire take_Intr_Now_II;

  assign lopt_1 = \<const0> ;
  assign take_Intr_Now_II = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_111
   (take_Intr_Now_III,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    load_Store_i2,
    ok_To_Stop,
    take_intr_2nd_cycle0,
    \Use_Async_Reset.sync_reset_reg ,
    Select_Logic0,
    \Using_FPGA.Native_0 ,
    take_Intr_Now_II,
    inHibit_EX_reg,
    inHibit_EX_reg_0,
    inHibit_EX_reg_1,
    inHibit_EX,
    inHibit_EX_reg_2,
    mbar_first_reg,
    FSL_Break_No_Dbg,
    sync_reset,
    instr_OF_raw,
    B,
    \Using_FPGA.Native_1 ,
    FSL_Will_Break_No_Dbg,
    break_Pipe_i_reg__0,
    lopt,
    lopt_1,
    lopt_2);
  output take_Intr_Now_III;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output load_Store_i2;
  output ok_To_Stop;
  output take_intr_2nd_cycle0;
  output \Use_Async_Reset.sync_reset_reg ;
  output Select_Logic0;
  output \Using_FPGA.Native_0 ;
  input take_Intr_Now_II;
  input inHibit_EX_reg;
  input inHibit_EX_reg_0;
  input inHibit_EX_reg_1;
  input inHibit_EX;
  input inHibit_EX_reg_2;
  input mbar_first_reg;
  input FSL_Break_No_Dbg;
  input sync_reset;
  input [0:0]instr_OF_raw;
  input [0:0]B;
  input \Using_FPGA.Native_1 ;
  input FSL_Will_Break_No_Dbg;
  input break_Pipe_i_reg__0;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire [0:0]B;
  wire FSL_Break_No_Dbg;
  wire FSL_Will_Break_No_Dbg;
  wire Select_Logic0;
  wire \Use_Async_Reset.sync_reset_reg ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire break_Pipe_i_reg__0;
  wire inHibit_EX;
  wire inHibit_EX_reg;
  wire inHibit_EX_reg_0;
  wire inHibit_EX_reg_1;
  wire inHibit_EX_reg_2;
  wire [0:0]instr_OF_raw;
  wire load_Store_i2;
  wire mbar_first_reg;
  wire ok_To_Stop;
  wire sync_reset;
  wire take_Intr_Now_II;
  wire take_Intr_Now_III;
  wire take_intr_2nd_cycle0;

  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  assign take_Intr_Now_III = lopt;
  GND GND
       (.G(\<const0> ));
  (* SOFT_HLUTNM = "soft_lutpair48" *) 
  LUT2 #(
    .INIT(4'h1)) 
    Select_Logic_i_1
       (.I0(take_Intr_Now_III),
        .I1(instr_OF_raw),
        .O(Select_Logic0));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.Native_i_1__121 
       (.I0(take_Intr_Now_III),
        .O(load_Store_i2));
  LUT6 #(
    .INIT(64'hBBBBBBBBBBBBB888)) 
    \Using_FPGA.Native_i_1__69 
       (.I0(B),
        .I1(\Using_FPGA.Native_1 ),
        .I2(FSL_Will_Break_No_Dbg),
        .I3(break_Pipe_i_reg__0),
        .I4(take_Intr_Now_III),
        .I5(sync_reset),
        .O(\Using_FPGA.Native_0 ));
  (* SOFT_HLUTNM = "soft_lutpair48" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \Using_LWX_SWX_instr.reservation_i_3 
       (.I0(sync_reset),
        .I1(take_Intr_Now_III),
        .O(\Use_Async_Reset.sync_reset_reg ));
  VCC VCC
       (.P(\<const1> ));
  LUT6 #(
    .INIT(64'h00000000DCDDDCCC)) 
    inHibit_EX_i_1
       (.I0(take_Intr_Now_III),
        .I1(inHibit_EX_reg),
        .I2(inHibit_EX_reg_0),
        .I3(inHibit_EX_reg_1),
        .I4(inHibit_EX),
        .I5(inHibit_EX_reg_2),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
  (* SOFT_HLUTNM = "soft_lutpair47" *) 
  LUT4 #(
    .INIT(16'h0444)) 
    mul_first_i_2
       (.I0(take_Intr_Now_III),
        .I1(inHibit_EX_reg_1),
        .I2(inHibit_EX),
        .I3(mbar_first_reg),
        .O(ok_To_Stop));
  (* SOFT_HLUTNM = "soft_lutpair47" *) 
  LUT2 #(
    .INIT(4'hE)) 
    take_intr_2nd_cycle_i_2
       (.I0(take_Intr_Now_III),
        .I1(FSL_Break_No_Dbg),
        .O(take_intr_2nd_cycle0));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_112
   (opsel1_SPR,
    p_20_in,
    opsel1_SPR_I,
    lopt,
    lopt_1);
  output opsel1_SPR;
  input p_20_in;
  input opsel1_SPR_I;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire opsel1_SPR;
  wire opsel1_SPR_I;
  wire p_20_in;

  assign lopt_1 = \<const1> ;
  assign opsel1_SPR = lopt;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_113
   (IReady,
    \instr_EX_i_reg[9] ,
    IReady1_out,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output IReady;
  input \instr_EX_i_reg[9] ;
  input IReady1_out;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  output lopt_5;
  output lopt_6;
  output lopt_7;
  input lopt_8;

  wire IReady;
  wire IReady1_out;
  wire \instr_EX_i_reg[9] ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire [3:3]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED ;
  wire [0:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_5 = \^lopt_6 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_7 = \^lopt_8 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(1'b0),
        .CO({\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [3],\^lopt_4 ,\^lopt_1 ,IReady}),
        .CYINIT(IReady1_out),
        .DI({\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED [3],\^lopt_2 ,\^lopt_2 ,1'b0}),
        .O({\^lopt_8 ,\^lopt_7 ,\^lopt_6 ,\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [0]}),
        .S({lopt_9,\^lopt_5 ,\^lopt_3 ,\instr_EX_i_reg[9] }));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_116
   (ifetch_carry1,
    buffer_Full,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1);
  output ifetch_carry1;
  input buffer_Full;
  input \Using_FPGA.Native_0 ;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire \Using_FPGA.Native_0 ;
  wire buffer_Full;
  wire ifetch_carry1;

  assign ifetch_carry1 = lopt;
  assign lopt_1 = \<const1> ;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_117
   (ifetch_carry2,
    mbar_hold_I_reg,
    mul_Executing_reg,
    iFetch_In_Progress_reg,
    \Serial_Dbg_Intf.if_debug_ready_i_reg ,
    iFetch_In_Progress_reg_0,
    ifetch_carry1,
    mbar_hold_I_reg_0,
    take_Intr_Now_III,
    mbar_hold_I_reg_1,
    mbar_hold_I_reg_2,
    sync_reset,
    mul_Executing,
    mbar_decode_I,
    \LOCKSTEP_Out_reg[3] ,
    iFetch_In_Progress,
    \LOCKSTEP_Out_reg[3]_0 ,
    missed_IFetch_reg,
    missed_IFetch_reg_0,
    missed_IFetch,
    missed_IFetch_reg_1,
    lopt,
    lopt_1);
  output ifetch_carry2;
  output mbar_hold_I_reg;
  output mul_Executing_reg;
  output iFetch_In_Progress_reg;
  output \Serial_Dbg_Intf.if_debug_ready_i_reg ;
  input iFetch_In_Progress_reg_0;
  input ifetch_carry1;
  input mbar_hold_I_reg_0;
  input take_Intr_Now_III;
  input mbar_hold_I_reg_1;
  input mbar_hold_I_reg_2;
  input sync_reset;
  input mul_Executing;
  input mbar_decode_I;
  input \LOCKSTEP_Out_reg[3] ;
  input iFetch_In_Progress;
  input \LOCKSTEP_Out_reg[3]_0 ;
  input missed_IFetch_reg;
  input missed_IFetch_reg_0;
  input missed_IFetch;
  input missed_IFetch_reg_1;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \LOCKSTEP_Out_reg[3] ;
  wire \LOCKSTEP_Out_reg[3]_0 ;
  wire \Serial_Dbg_Intf.if_debug_ready_i_reg ;
  wire iFetch_In_Progress;
  wire iFetch_In_Progress_reg;
  wire iFetch_In_Progress_reg_0;
  wire ifetch_carry1;
  wire ifetch_carry2;
  wire mbar_decode_I;
  wire mbar_hold_I_reg;
  wire mbar_hold_I_reg_0;
  wire mbar_hold_I_reg_1;
  wire mbar_hold_I_reg_2;
  wire missed_IFetch;
  wire missed_IFetch_reg;
  wire missed_IFetch_reg_0;
  wire missed_IFetch_reg_1;
  wire mul_Executing;
  wire mul_Executing_reg;
  wire sync_reset;
  wire take_Intr_Now_III;

  assign ifetch_carry2 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
  LUT6 #(
    .INIT(64'h0000F700F700F700)) 
    I_AS_INST_0
       (.I0(mul_Executing),
        .I1(mbar_decode_I),
        .I2(\LOCKSTEP_Out_reg[3] ),
        .I3(ifetch_carry2),
        .I4(iFetch_In_Progress),
        .I5(\LOCKSTEP_Out_reg[3]_0 ),
        .O(mul_Executing_reg));
  LUT6 #(
    .INIT(64'hF888F8F8F8F8F8F8)) 
    iFetch_In_Progress_i_1
       (.I0(\LOCKSTEP_Out_reg[3]_0 ),
        .I1(iFetch_In_Progress),
        .I2(ifetch_carry2),
        .I3(\LOCKSTEP_Out_reg[3] ),
        .I4(mbar_decode_I),
        .I5(mul_Executing),
        .O(iFetch_In_Progress_reg));
  LUT6 #(
    .INIT(64'h000000000C550C00)) 
    mbar_hold_I_i_1
       (.I0(mul_Executing_reg),
        .I1(mbar_hold_I_reg_0),
        .I2(take_Intr_Now_III),
        .I3(mbar_hold_I_reg_1),
        .I4(mbar_hold_I_reg_2),
        .I5(sync_reset),
        .O(mbar_hold_I_reg));
  LUT5 #(
    .INIT(32'h101F1010)) 
    missed_IFetch_i_1
       (.I0(missed_IFetch_reg),
        .I1(missed_IFetch_reg_0),
        .I2(missed_IFetch),
        .I3(mul_Executing_reg),
        .I4(missed_IFetch_reg_1),
        .O(\Serial_Dbg_Intf.if_debug_ready_i_reg ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_118
   (D,
    ifetch_carry2,
    iFetch_In_Progress);
  output [0:0]D;
  input ifetch_carry2;
  input iFetch_In_Progress;

  wire [0:0]D;
  wire \Using_FPGA.Native_i_1__118_n_0 ;
  wire iFetch_In_Progress;
  wire ifetch_carry2;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED ;

  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(ifetch_carry2),
        .CO({\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [3:1],D}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED [3:1],1'b1}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED [3:1],\Using_FPGA.Native_i_1__118_n_0 }));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.Native_i_1__118 
       (.I0(iFetch_In_Progress),
        .O(\Using_FPGA.Native_i_1__118_n_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_119
   (mul_Executing_reg,
    break_Pipe_i_reg,
    using_Imm_reg,
    is_swx_I_reg,
    \Using_FSL_Links.Using_Extended_FSL.FSL_Will_Break_reg ,
    \Using_FPGA.Native_0 ,
    is_swx_I,
    Valid_Instr0,
    inHibit_EX_reg,
    \Using_FPGA.Native_1 ,
    E,
    \Using_LWX_SWX_instr.reservation_reg ,
    \Use_Async_Reset.sync_reset_reg ,
    MSRclr_Instr_i,
    Blocked_Valid_Instr0,
    \Using_FPGA.Native_2 ,
    write_Reg_reg,
    \Using_FSL_Links.mb_Put_i_reg ,
    load_Store_i_reg,
    is_swx_I_reg_0,
    OF_PipeRun,
    of_PipeRun_Select,
    of_PipeRun_without_dready,
    DReady0_out,
    break_Pipe_i_reg__0,
    Unsigned_Op_reg,
    take_intr_2nd_cycle0,
    take_intr_2nd_cycle_reg,
    sync_reset,
    using_Imm_reg_0,
    using_Imm_reg_1,
    S115_out,
    using_Imm_reg_2,
    \Using_LWX_SWX_instr.reservation_reg_0 ,
    \Using_LWX_SWX_instr.reservation_reg_1 ,
    is_lwx_I,
    \Using_LWX_SWX_instr.reservation_reg_2 ,
    reservation2,
    load_Store_i,
    ex_Valid_reg,
    ex_Valid_reg_0,
    MEM_DAXI_Data_Strobe,
    DReady,
    FSL_Put_Inhibit,
    mb_Put_i,
    \Using_FSL_Links.mb_Put_i_reg_0 ,
    FSL_Break,
    \Using_FSL_Links.mb_Put_i_reg_1 ,
    \Using_FSL_Links.mb_Get_i_i_4_0 ,
    \Using_FSL_Links.mb_Get_i_i_4_1 ,
    \Using_FSL_Links.mb_Get_i_i_4_2 ,
    Buffer_Addr,
    swx_ready,
    I2118_out,
    inHibit_EX,
    ex_Valid_1st_cycle_reg,
    take_Intr_Now_III,
    FSL_Will_Break_No_Dbg,
    Blocked_Valid_Instr_reg,
    take_intr_Done,
    ex_Valid_reg_1,
    write_Reg_reg_0,
    write_Reg_reg_1,
    mb_Put_i5_out,
    load_Store_i_reg_0,
    is_swx_I0,
    jump_Carry2,
    of_Valid_Raw,
    dbg_pause,
    mul_Executing,
    delay_slot_instr_reg,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output mul_Executing_reg;
  output break_Pipe_i_reg;
  output using_Imm_reg;
  output is_swx_I_reg;
  output \Using_FSL_Links.Using_Extended_FSL.FSL_Will_Break_reg ;
  output \Using_FPGA.Native_0 ;
  output is_swx_I;
  output Valid_Instr0;
  output inHibit_EX_reg;
  output \Using_FPGA.Native_1 ;
  output [0:0]E;
  output \Using_LWX_SWX_instr.reservation_reg ;
  output \Use_Async_Reset.sync_reset_reg ;
  output MSRclr_Instr_i;
  output Blocked_Valid_Instr0;
  output \Using_FPGA.Native_2 ;
  output write_Reg_reg;
  output \Using_FSL_Links.mb_Put_i_reg ;
  output load_Store_i_reg;
  output is_swx_I_reg_0;
  output OF_PipeRun;
  input of_PipeRun_Select;
  input of_PipeRun_without_dready;
  input DReady0_out;
  input break_Pipe_i_reg__0;
  input Unsigned_Op_reg;
  input take_intr_2nd_cycle0;
  input take_intr_2nd_cycle_reg;
  input sync_reset;
  input using_Imm_reg_0;
  input using_Imm_reg_1;
  input S115_out;
  input using_Imm_reg_2;
  input \Using_LWX_SWX_instr.reservation_reg_0 ;
  input \Using_LWX_SWX_instr.reservation_reg_1 ;
  input is_lwx_I;
  input \Using_LWX_SWX_instr.reservation_reg_2 ;
  input reservation2;
  input load_Store_i;
  input ex_Valid_reg;
  input ex_Valid_reg_0;
  input MEM_DAXI_Data_Strobe;
  input DReady;
  input FSL_Put_Inhibit;
  input mb_Put_i;
  input \Using_FSL_Links.mb_Put_i_reg_0 ;
  input FSL_Break;
  input \Using_FSL_Links.mb_Put_i_reg_1 ;
  input \Using_FSL_Links.mb_Get_i_i_4_0 ;
  input \Using_FSL_Links.mb_Get_i_i_4_1 ;
  input \Using_FSL_Links.mb_Get_i_i_4_2 ;
  input [0:0]Buffer_Addr;
  input swx_ready;
  input I2118_out;
  input inHibit_EX;
  input ex_Valid_1st_cycle_reg;
  input take_Intr_Now_III;
  input FSL_Will_Break_No_Dbg;
  input Blocked_Valid_Instr_reg;
  input take_intr_Done;
  input ex_Valid_reg_1;
  input write_Reg_reg_0;
  input write_Reg_reg_1;
  input mb_Put_i5_out;
  input load_Store_i_reg_0;
  input is_swx_I0;
  input jump_Carry2;
  input of_Valid_Raw;
  input dbg_pause;
  input mul_Executing;
  input delay_slot_instr_reg;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire Blocked_Valid_Instr0;
  wire Blocked_Valid_Instr_reg;
  wire [0:0]Buffer_Addr;
  wire DReady;
  wire DReady0_out;
  wire [0:0]E;
  wire FSL_Break;
  wire FSL_Put_Inhibit;
  wire FSL_Will_Break_No_Dbg;
  wire I2118_out;
  wire MEM_DAXI_Data_Strobe;
  wire MSRclr_Instr_i;
  wire OF_PipeRun;
  wire S115_out;
  wire Unsigned_Op_reg;
  wire \Use_Async_Reset.sync_reset_reg ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FSL_Links.Using_Extended_FSL.FSL_Will_Break_reg ;
  wire \Using_FSL_Links.mb_Get_i_i_4_0 ;
  wire \Using_FSL_Links.mb_Get_i_i_4_1 ;
  wire \Using_FSL_Links.mb_Get_i_i_4_2 ;
  wire \Using_FSL_Links.mb_Get_i_i_6_n_0 ;
  wire \Using_FSL_Links.mb_Put_i_reg ;
  wire \Using_FSL_Links.mb_Put_i_reg_0 ;
  wire \Using_FSL_Links.mb_Put_i_reg_1 ;
  wire \Using_LWX_SWX_instr.reservation_i_2_n_0 ;
  wire \Using_LWX_SWX_instr.reservation_reg ;
  wire \Using_LWX_SWX_instr.reservation_reg_0 ;
  wire \Using_LWX_SWX_instr.reservation_reg_1 ;
  wire \Using_LWX_SWX_instr.reservation_reg_2 ;
  wire Valid_Instr0;
  wire break_Pipe_i_reg;
  wire break_Pipe_i_reg__0;
  wire dbg_pause;
  wire delay_slot_instr_reg;
  wire ex_Valid_1st_cycle_reg;
  wire ex_Valid_i_2_n_0;
  wire ex_Valid_reg;
  wire ex_Valid_reg_0;
  wire ex_Valid_reg_1;
  wire inHibit_EX;
  wire inHibit_EX_reg;
  wire is_lwx_I;
  wire is_swx_I;
  wire is_swx_I0;
  wire is_swx_I_reg;
  wire is_swx_I_reg_0;
  wire jump_Carry2;
  wire load_Store_i;
  wire load_Store_i_reg;
  wire load_Store_i_reg_0;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire mb_Put_i;
  wire mb_Put_i5_out;
  wire mul_Executing;
  wire mul_Executing_reg;
  wire of_PipeRun_Select;
  wire of_PipeRun_without_dready;
  wire of_Valid_Raw;
  wire reservation2;
  wire swx_ready;
  wire sync_reset;
  wire take_Intr_Now_III;
  wire take_intr_2nd_cycle0;
  wire take_intr_2nd_cycle_reg;
  wire take_intr_Done;
  wire using_Imm_reg;
  wire using_Imm_reg_0;
  wire using_Imm_reg_1;
  wire using_Imm_reg_2;
  wire write_Reg_reg;
  wire write_Reg_reg_0;
  wire write_Reg_reg_1;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* SOFT_HLUTNM = "soft_lutpair53" *) 
  LUT3 #(
    .INIT(8'h08)) 
    Blocked_Valid_Instr_i_1
       (.I0(Blocked_Valid_Instr_reg),
        .I1(mul_Executing_reg),
        .I2(take_intr_Done),
        .O(Blocked_Valid_Instr0));
  (* SOFT_HLUTNM = "soft_lutpair51" *) 
  LUT3 #(
    .INIT(8'hF8)) 
    Compare_Instr_i_1
       (.I0(mul_Executing_reg),
        .I1(take_Intr_Now_III),
        .I2(sync_reset),
        .O(MSRclr_Instr_i));
  (* SOFT_HLUTNM = "soft_lutpair52" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    Unsigned_Op_i_1
       (.I0(sync_reset),
        .I1(Unsigned_Op_reg),
        .I2(mul_Executing_reg),
        .O(\Use_Async_Reset.sync_reset_reg ));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,mul_Executing_reg}),
        .CYINIT(DReady0_out),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,of_PipeRun_without_dready}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,of_PipeRun_Select}));
  LUT2 #(
    .INIT(4'h6)) 
    \Using_FPGA.Native_I1_i_1__0 
       (.I0(mul_Executing_reg),
        .I1(Buffer_Addr),
        .O(\Using_FPGA.Native_0 ));
  (* SOFT_HLUTNM = "soft_lutpair53" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \Using_FPGA.Native_i_1__168 
       (.I0(mul_Executing_reg),
        .I1(delay_slot_instr_reg),
        .O(OF_PipeRun));
  (* SOFT_HLUTNM = "soft_lutpair49" *) 
  LUT3 #(
    .INIT(8'h2A)) 
    \Using_FPGA.Valid_Instr_i_1 
       (.I0(mul_Executing_reg),
        .I1(inHibit_EX),
        .I2(ex_Valid_1st_cycle_reg),
        .O(Valid_Instr0));
  (* SOFT_HLUTNM = "soft_lutpair50" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \Using_FSL_Links.mb_Get_i_i_2 
       (.I0(mul_Executing_reg),
        .I1(take_Intr_Now_III),
        .O(\Using_FPGA.Native_1 ));
  LUT6 #(
    .INIT(64'h00000000FBFBFBFF)) 
    \Using_FSL_Links.mb_Get_i_i_4 
       (.I0(FSL_Put_Inhibit),
        .I1(mb_Put_i),
        .I2(\Using_FSL_Links.mb_Put_i_reg_0 ),
        .I3(FSL_Break),
        .I4(\Using_FSL_Links.mb_Put_i_reg_1 ),
        .I5(\Using_FSL_Links.mb_Get_i_i_6_n_0 ),
        .O(\Using_FSL_Links.Using_Extended_FSL.FSL_Will_Break_reg ));
  LUT6 #(
    .INIT(64'hFFFFFFFFAAAAFEAA)) 
    \Using_FSL_Links.mb_Get_i_i_6 
       (.I0(\Using_FSL_Links.mb_Get_i_i_4_0 ),
        .I1(\Using_FSL_Links.mb_Get_i_i_4_1 ),
        .I2(FSL_Break),
        .I3(\Using_FSL_Links.mb_Get_i_i_4_2 ),
        .I4(FSL_Put_Inhibit),
        .I5(mul_Executing_reg),
        .O(\Using_FSL_Links.mb_Get_i_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h000000E200E200E2)) 
    \Using_FSL_Links.mb_Put_i_i_1 
       (.I0(mb_Put_i5_out),
        .I1(\Using_FSL_Links.Using_Extended_FSL.FSL_Will_Break_reg ),
        .I2(mb_Put_i),
        .I3(sync_reset),
        .I4(take_Intr_Now_III),
        .I5(mul_Executing_reg),
        .O(\Using_FSL_Links.mb_Put_i_reg ));
  LUT6 #(
    .INIT(64'h00000000CC540000)) 
    \Using_LWX_SWX_instr.reservation_i_1 
       (.I0(\Using_LWX_SWX_instr.reservation_reg_0 ),
        .I1(\Using_LWX_SWX_instr.reservation_reg_1 ),
        .I2(is_lwx_I),
        .I3(\Using_LWX_SWX_instr.reservation_i_2_n_0 ),
        .I4(\Using_LWX_SWX_instr.reservation_reg_2 ),
        .I5(reservation2),
        .O(is_swx_I_reg));
  LUT6 #(
    .INIT(64'hDFDFDFDFDFDFDFFF)) 
    \Using_LWX_SWX_instr.reservation_i_2 
       (.I0(load_Store_i),
        .I1(ex_Valid_reg),
        .I2(ex_Valid_reg_0),
        .I3(MEM_DAXI_Data_Strobe),
        .I4(DReady),
        .I5(mul_Executing_reg),
        .O(\Using_LWX_SWX_instr.reservation_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair49" *) 
  LUT4 #(
    .INIT(16'h8AAA)) 
    ex_Valid_1st_cycle_i_1
       (.I0(mul_Executing_reg),
        .I1(take_Intr_Now_III),
        .I2(ex_Valid_1st_cycle_reg),
        .I3(inHibit_EX),
        .O(inHibit_EX_reg));
  LUT5 #(
    .INIT(32'hEFEEE0EE)) 
    ex_Valid_i_1
       (.I0(ex_Valid_i_2_n_0),
        .I1(ex_Valid_reg_1),
        .I2(mul_Executing_reg),
        .I3(ex_Valid_reg),
        .I4(ex_Valid_reg_0),
        .O(\Using_FPGA.Native_2 ));
  LUT6 #(
    .INIT(64'h5555555540400040)) 
    ex_Valid_i_2
       (.I0(mul_Executing_reg),
        .I1(jump_Carry2),
        .I2(Blocked_Valid_Instr_reg),
        .I3(of_Valid_Raw),
        .I4(dbg_pause),
        .I5(mul_Executing),
        .O(ex_Valid_i_2_n_0));
  LUT6 #(
    .INIT(64'hAAAAAAAAFFFEAAAA)) 
    is_lwx_I_i_4
       (.I0(sync_reset),
        .I1(MEM_DAXI_Data_Strobe),
        .I2(DReady),
        .I3(swx_ready),
        .I4(I2118_out),
        .I5(mul_Executing_reg),
        .O(is_swx_I));
  (* SOFT_HLUTNM = "soft_lutpair50" *) 
  LUT4 #(
    .INIT(16'h00E2)) 
    is_swx_I_i_1
       (.I0(\Using_LWX_SWX_instr.reservation_reg_0 ),
        .I1(mul_Executing_reg),
        .I2(is_swx_I0),
        .I3(is_swx_I),
        .O(is_swx_I_reg_0));
  LUT6 #(
    .INIT(64'h0000000022222E22)) 
    load_Store_i_i_1
       (.I0(load_Store_i),
        .I1(mul_Executing_reg),
        .I2(S115_out),
        .I3(load_Store_i_reg_0),
        .I4(take_Intr_Now_III),
        .I5(is_swx_I),
        .O(load_Store_i_reg));
  (* SOFT_HLUTNM = "soft_lutpair51" *) 
  LUT4 #(
    .INIT(16'h0004)) 
    swx_ready_i_1
       (.I0(\Using_LWX_SWX_instr.reservation_reg_1 ),
        .I1(\Using_LWX_SWX_instr.reservation_reg_0 ),
        .I2(sync_reset),
        .I3(mul_Executing_reg),
        .O(\Using_LWX_SWX_instr.reservation_reg ));
  LUT6 #(
    .INIT(64'h000000000C550C00)) 
    take_intr_2nd_cycle_i_1
       (.I0(mul_Executing_reg),
        .I1(break_Pipe_i_reg__0),
        .I2(Unsigned_Op_reg),
        .I3(take_intr_2nd_cycle0),
        .I4(take_intr_2nd_cycle_reg),
        .I5(sync_reset),
        .O(break_Pipe_i_reg));
  LUT6 #(
    .INIT(64'h000000000000222E)) 
    using_Imm_i_1
       (.I0(using_Imm_reg_0),
        .I1(mul_Executing_reg),
        .I2(using_Imm_reg_1),
        .I3(S115_out),
        .I4(using_Imm_reg_2),
        .I5(sync_reset),
        .O(using_Imm_reg));
  (* SOFT_HLUTNM = "soft_lutpair52" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \write_Addr_I[0]_i_1 
       (.I0(mul_Executing_reg),
        .I1(FSL_Will_Break_No_Dbg),
        .O(E));
  LUT6 #(
    .INIT(64'h000000000002FCFE)) 
    write_Reg_i_1
       (.I0(write_Reg_reg_0),
        .I1(mul_Executing_reg),
        .I2(FSL_Will_Break_No_Dbg),
        .I3(FSL_Put_Inhibit),
        .I4(write_Reg_reg_1),
        .I5(\Use_Async_Reset.sync_reset_reg ),
        .O(write_Reg_reg));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_161
   (zero_CI_6,
    reg_Test_Equal,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6);
  output zero_CI_6;
  input reg_Test_Equal;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  output lopt_5;
  input lopt_6;

  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire lopt_7;
  wire reg_Test_Equal;
  wire zero_CI_6;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_5 = \^lopt_6 ;
  assign lopt_7 = lopt_6;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_6 ,\^lopt_4 ,\^lopt_1 ,zero_CI_6}),
        .CYINIT(1'b1),
        .DI({\^lopt_2 ,\^lopt_2 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_7,\^lopt_5 ,\^lopt_3 ,reg_Test_Equal}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_162
   (reg_zero,
    \Using_FPGA.Native_0 ,
    reg_Test_Equal_N,
    zero_CI_1,
    lopt);
  output reg_zero;
  input \Using_FPGA.Native_0 ;
  input reg_Test_Equal_N;
  input zero_CI_1;
  input lopt;

  wire \Using_FPGA.Native_0 ;
  wire reg_Test_Equal_N;
  wire reg_zero;
  wire zero_CI_1;

  assign reg_zero = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_163
   (zero_CI_1,
    \Using_FPGA.Native_0 ,
    reg_Test_Equal_N,
    zero_CI_2,
    lopt);
  output zero_CI_1;
  input \Using_FPGA.Native_0 ;
  input reg_Test_Equal_N;
  input zero_CI_2;
  input lopt;

  wire \Using_FPGA.Native_0 ;
  wire reg_Test_Equal_N;
  wire zero_CI_1;
  wire zero_CI_2;

  assign zero_CI_1 = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_164
   (zero_CI_2,
    \Using_FPGA.Native_0 ,
    reg_Test_Equal_N,
    zero_CI_3,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6);
  output zero_CI_2;
  input \Using_FPGA.Native_0 ;
  input reg_Test_Equal_N;
  input zero_CI_3;
  output lopt;
  input lopt_1;
  output lopt_2;
  input lopt_3;
  output lopt_4;
  input lopt_5;
  input lopt_6;

  wire \Using_FPGA.Native_0 ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire lopt_7;
  wire reg_Test_Equal_N;
  wire zero_CI_2;
  wire zero_CI_3;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_4  = lopt_3;
  assign \^lopt_6  = lopt_5;
  assign lopt = \^lopt_1 ;
  assign lopt_2 = \^lopt_3 ;
  assign lopt_4 = \^lopt_5 ;
  assign lopt_7 = lopt_6;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(zero_CI_3),
        .CO({\^lopt_5 ,\^lopt_3 ,\^lopt_1 ,zero_CI_2}),
        .CYINIT(1'b0),
        .DI({\^lopt_6 ,reg_Test_Equal_N,reg_Test_Equal_N,reg_Test_Equal_N}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_7,\^lopt_4 ,\^lopt_2 ,\Using_FPGA.Native_0 }));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_165
   (zero_CI_3,
    \Using_FPGA.Native_0 ,
    reg_Test_Equal_N,
    zero_CI_4,
    lopt);
  output zero_CI_3;
  input \Using_FPGA.Native_0 ;
  input reg_Test_Equal_N;
  input zero_CI_4;
  input lopt;

  wire \Using_FPGA.Native_0 ;
  wire reg_Test_Equal_N;
  wire zero_CI_3;
  wire zero_CI_4;

  assign zero_CI_3 = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_166
   (zero_CI_4,
    \Using_FPGA.Native_0 ,
    reg_Test_Equal_N,
    zero_CI_5,
    lopt);
  output zero_CI_4;
  input \Using_FPGA.Native_0 ;
  input reg_Test_Equal_N;
  input zero_CI_5;
  input lopt;

  wire \Using_FPGA.Native_0 ;
  wire reg_Test_Equal_N;
  wire zero_CI_4;
  wire zero_CI_5;

  assign zero_CI_4 = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_167
   (zero_CI_5,
    S,
    reg_Test_Equal_N,
    zero_CI_6,
    lopt);
  output zero_CI_5;
  input S;
  input reg_Test_Equal_N;
  input zero_CI_6;
  input lopt;

  wire S;
  wire reg_Test_Equal_N;
  wire zero_CI_5;
  wire zero_CI_6;

  assign zero_CI_5 = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_252
   (byte_0,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    lopt,
    lopt_1);
  output byte_0;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire byte_0;

  assign byte_0 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_253
   (byte_0x_0,
    Enable_2,
    byte_0);
  output byte_0x_0;
  input Enable_2;
  input byte_0;

  wire Enable_2;
  wire byte_0;
  wire byte_0x_0;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED ;

  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(byte_0),
        .CO({\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [3:1],byte_0x_0}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED [3:1],1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED [3:1],Enable_2}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_254
   (\Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.The_Compare[0].sel_reg_8 ,
    carry_2,
    \Using_FPGA.Native_i_7 ,
    Op1_Shift,
    \Using_FPGA.Native_i_7_0 ,
    lopt,
    lopt_1);
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  input \Using_FPGA.The_Compare[0].sel_reg_8 ;
  input carry_2;
  input \Using_FPGA.Native_i_7 ;
  input Op1_Shift;
  input \Using_FPGA.Native_i_7_0 ;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire Op1_Shift;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_i_7 ;
  wire \Using_FPGA.Native_i_7_0 ;
  wire \Using_FPGA.The_Compare[0].sel_reg_8 ;
  wire carry_2;

  assign \Using_FPGA.Native_0  = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
  LUT4 #(
    .INIT(16'h0004)) 
    \Using_FPGA.Native_i_10 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_i_7 ),
        .I2(Op1_Shift),
        .I3(\Using_FPGA.Native_i_7_0 ),
        .O(\Using_FPGA.Native_1 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_255
   (carry_2,
    S_7,
    carry_1,
    lopt,
    lopt_1);
  output carry_2;
  input S_7;
  input carry_1;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire S_7;
  wire carry_1;
  wire carry_2;

  assign carry_2 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_256
   (carry_1,
    \Using_FPGA.The_Compare[2].sel_reg_6 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output carry_1;
  input \Using_FPGA.The_Compare[2].sel_reg_6 ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \Using_FPGA.The_Compare[2].sel_reg_6 ;
  wire carry_1;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,carry_1}),
        .CYINIT(1'b1),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,\Using_FPGA.The_Compare[2].sel_reg_6 }));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_257
   (byte_1,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    lopt,
    lopt_1);
  output byte_1;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire byte_1;

  assign byte_1 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_258
   (byte_0x_1,
    \Using_FPGA.Native_0 ,
    byte_1);
  output byte_0x_1;
  input \Using_FPGA.Native_0 ;
  input byte_1;

  wire \Using_FPGA.Native_0 ;
  wire byte_0x_1;
  wire byte_1;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED ;

  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(byte_1),
        .CO({\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [3:1],byte_0x_1}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED [3:1],1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED [3:1],\Using_FPGA.Native_0 }));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_259
   (\Using_FPGA.Native_0 ,
    \Using_FPGA.The_Compare[0].sel_reg_5 ,
    carry_2,
    lopt,
    lopt_1);
  output \Using_FPGA.Native_0 ;
  input \Using_FPGA.The_Compare[0].sel_reg_5 ;
  input carry_2;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.The_Compare[0].sel_reg_5 ;
  wire carry_2;

  assign \Using_FPGA.Native_0  = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_260
   (carry_2,
    S_4,
    carry_1,
    lopt,
    lopt_1);
  output carry_2;
  input S_4;
  input carry_1;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire S_4;
  wire carry_1;
  wire carry_2;

  assign carry_2 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_261
   (carry_1,
    \Using_FPGA.The_Compare[2].sel_reg_3 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output carry_1;
  input \Using_FPGA.The_Compare[2].sel_reg_3 ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \Using_FPGA.The_Compare[2].sel_reg_3 ;
  wire carry_1;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,carry_1}),
        .CYINIT(1'b1),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,\Using_FPGA.The_Compare[2].sel_reg_3 }));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_262
   (byte_2,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    lopt,
    lopt_1);
  output byte_2;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire byte_2;

  assign byte_2 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_263
   (byte_0x_2,
    \Using_FPGA.Native_0 ,
    byte_2);
  output byte_0x_2;
  input \Using_FPGA.Native_0 ;
  input byte_2;

  wire \Using_FPGA.Native_0 ;
  wire byte_0x_2;
  wire byte_2;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED ;

  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(byte_2),
        .CO({\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [3:1],byte_0x_2}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED [3:1],1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED [3:1],\Using_FPGA.Native_0 }));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_264
   (\Using_FPGA.Native_0 ,
    \Using_FPGA.The_Compare[0].sel_reg_2 ,
    carry_2,
    lopt,
    lopt_1);
  output \Using_FPGA.Native_0 ;
  input \Using_FPGA.The_Compare[0].sel_reg_2 ;
  input carry_2;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.The_Compare[0].sel_reg_2 ;
  wire carry_2;

  assign \Using_FPGA.Native_0  = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_265
   (carry_2,
    S_1,
    carry_1,
    lopt,
    lopt_1);
  output carry_2;
  input S_1;
  input carry_1;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire S_1;
  wire carry_1;
  wire carry_2;

  assign carry_2 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_266
   (carry_1,
    \Using_FPGA.The_Compare[2].sel_reg_0 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output carry_1;
  input \Using_FPGA.The_Compare[2].sel_reg_0 ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \Using_FPGA.The_Compare[2].sel_reg_0 ;
  wire carry_1;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,carry_1}),
        .CYINIT(1'b1),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,\Using_FPGA.The_Compare[2].sel_reg_0 }));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_267
   (byte_3,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    lopt,
    lopt_1);
  output byte_3;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire byte_3;

  assign byte_3 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_268
   (byte_0x_3,
    \Using_FPGA.Native_0 ,
    byte_3);
  output byte_0x_3;
  input \Using_FPGA.Native_0 ;
  input byte_3;

  wire \Using_FPGA.Native_0 ;
  wire byte_0x_3;
  wire byte_3;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED ;

  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(byte_3),
        .CO({\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [3:1],byte_0x_3}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED [3:1],1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED [3:1],\Using_FPGA.Native_0 }));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_269
   (\Using_FPGA.Native_0 ,
    \Use_The_PCMP_instr.CLZ_Instr_reg ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.The_Compare[0].sel_reg ,
    carry_2,
    clz_instr,
    \Using_FPGA.Native_i_5 ,
    \Using_FPGA.Native_i_1__46 ,
    Shifted,
    lopt,
    lopt_1);
  output \Using_FPGA.Native_0 ;
  output \Use_The_PCMP_instr.CLZ_Instr_reg ;
  output \Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  input \Using_FPGA.The_Compare[0].sel_reg ;
  input carry_2;
  input clz_instr;
  input \Using_FPGA.Native_i_5 ;
  input \Using_FPGA.Native_i_1__46 ;
  input Shifted;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire Shifted;
  wire \Use_The_PCMP_instr.CLZ_Instr_reg ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_i_1__46 ;
  wire \Using_FPGA.Native_i_5 ;
  wire \Using_FPGA.The_Compare[0].sel_reg ;
  wire carry_2;
  wire clz_instr;

  assign \Using_FPGA.Native_0  = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
  LUT4 #(
    .INIT(16'h2000)) 
    \Using_FPGA.Native_i_3__18 
       (.I0(clz_instr),
        .I1(\Using_FPGA.Native_i_5 ),
        .I2(\Using_FPGA.Native_0 ),
        .I3(\Using_FPGA.Native_i_1__46 ),
        .O(\Use_The_PCMP_instr.CLZ_Instr_reg ));
  (* SOFT_HLUTNM = "soft_lutpair22" *) 
  LUT3 #(
    .INIT(8'h20)) 
    \Using_FPGA.Native_i_5__0 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_i_5 ),
        .I2(clz_instr),
        .O(\Using_FPGA.Native_2 ));
  (* SOFT_HLUTNM = "soft_lutpair22" *) 
  LUT4 #(
    .INIT(16'h0004)) 
    \Using_FPGA.Native_i_9 
       (.I0(\Using_FPGA.Native_i_5 ),
        .I1(clz_instr),
        .I2(\Using_FPGA.Native_0 ),
        .I3(Shifted),
        .O(\Using_FPGA.Native_1 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_270
   (carry_2,
    S,
    carry_1,
    lopt,
    lopt_1);
  output carry_2;
  input S;
  input carry_1;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire S;
  wire carry_1;
  wire carry_2;

  assign carry_2 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_271
   (carry_1,
    \Using_FPGA.The_Compare[2].sel_reg ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output carry_1;
  input \Using_FPGA.The_Compare[2].sel_reg ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \Using_FPGA.The_Compare[2].sel_reg ;
  wire carry_1;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,carry_1}),
        .CYINIT(1'b1),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,\Using_FPGA.The_Compare[2].sel_reg }));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_32
   (carry_6,
    SRL16_Sel_6,
    carry_7,
    lopt,
    lopt_1);
  output carry_6;
  input SRL16_Sel_6;
  input carry_7;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire SRL16_Sel_6;
  wire carry_6;
  wire carry_7;

  assign carry_6 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_34
   (carry_5,
    SRL16_Sel_5,
    carry_6,
    lopt,
    lopt_1);
  output carry_5;
  input SRL16_Sel_5;
  input carry_6;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire SRL16_Sel_5;
  wire carry_5;
  wire carry_6;

  assign carry_5 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_36
   (carry_4,
    SRL16_Sel_4,
    carry_5,
    lopt,
    lopt_1);
  output carry_4;
  input SRL16_Sel_4;
  input carry_5;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire SRL16_Sel_4;
  wire carry_4;
  wire carry_5;

  assign carry_4 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_38
   (carry_3,
    SRL16_Sel_3,
    carry_4,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output carry_3;
  input SRL16_Sel_3;
  input carry_4;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire SRL16_Sel_3;
  wire carry_3;
  wire carry_4;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(carry_4),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,carry_3}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,SRL16_Sel_3}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_40
   (carry_2,
    SRL16_Sel_2,
    carry_3,
    lopt,
    lopt_1);
  output carry_2;
  input SRL16_Sel_2;
  input carry_3;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire SRL16_Sel_2;
  wire carry_2;
  wire carry_3;

  assign carry_2 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_42
   (carry_1,
    SRL16_Sel_1,
    carry_2,
    lopt,
    lopt_1);
  output carry_1;
  input SRL16_Sel_1;
  input carry_2;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire SRL16_Sel_1;
  wire carry_1;
  wire carry_2;

  assign carry_1 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_44
   (carry_0,
    SRL16_Sel_0,
    carry_1,
    lopt,
    lopt_1);
  output carry_0;
  input SRL16_Sel_0;
  input carry_1;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire SRL16_Sel_0;
  wire carry_0;
  wire carry_1;

  assign carry_0 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_46
   (\Serial_Dbg_Intf.control_reg_reg[0] ,
    \Area_Debug_Control.dbg_hit_i_1_reg[0] ,
    hit_carry,
    lopt,
    lopt_1);
  output \Serial_Dbg_Intf.control_reg_reg[0] ;
  input \Area_Debug_Control.dbg_hit_i_1_reg[0] ;
  input hit_carry;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \Area_Debug_Control.dbg_hit_i_1_reg[0] ;
  wire \Serial_Dbg_Intf.control_reg_reg[0] ;
  wire hit_carry;

  assign \Serial_Dbg_Intf.control_reg_reg[0]  = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_47
   (hit_carry,
    single_Step_N,
    carry_0,
    lopt,
    lopt_1,
    lopt_2);
  output hit_carry;
  input single_Step_N;
  input carry_0;
  output lopt;
  input lopt_1;
  input lopt_2;

  wire carry_0;
  wire hit_carry;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire lopt_3;
  wire single_Step_N;
  wire [3:2]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [3:2]\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;
  wire [3:2]\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = lopt_2;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(carry_0),
        .CO({\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [3:2],\^lopt_1 ,hit_carry}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED [3:2],\^lopt_2 ,1'b1}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED [3:2],lopt_3,single_Step_N}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_87
   (correct_Carry_I,
    correct_Carry_Select,
    sub_Carry,
    correct_Carry,
    lopt,
    lopt_1,
    lopt_2);
  output correct_Carry_I;
  input correct_Carry_Select;
  input sub_Carry;
  input correct_Carry;
  output lopt;
  input lopt_1;
  input lopt_2;

  wire correct_Carry;
  wire correct_Carry_I;
  wire correct_Carry_Select;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire lopt_3;
  wire sub_Carry;
  wire [3:2]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [3:2]\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;
  wire [3:2]\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = lopt_2;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(correct_Carry),
        .CO({\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [3:2],\^lopt_1 ,correct_Carry_I}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED [3:2],\^lopt_2 ,sub_Carry}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED [3:2],lopt_3,correct_Carry_Select}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_90
   (correct_Carry,
    EX_FSL_Carry,
    new_Carry,
    Shift_Carry_In_reg,
    msrxxx_carry,
    Shift_Carry_In_reg_0,
    \Using_FPGA.Native_i_2__34_0 ,
    load_Store_i,
    \Using_FPGA.Native_i_2__34_1 ,
    is_lwx_I,
    \Using_FPGA.Native_i_2__34_2 ,
    \Using_FPGA.Native_i_2__34_3 ,
    fsl_carry_hold_value,
    mb_Get_i,
    \Using_FPGA.Native_i_6__2 ,
    \Using_FPGA.Native_i_6__2_0 ,
    mb_Put_i,
    Shift_Carry_In_reg_1,
    Shift_Carry_In_reg_2,
    Shift_Carry_In_reg_3,
    lopt,
    lopt_1,
    lopt_2);
  output correct_Carry;
  output EX_FSL_Carry;
  input new_Carry;
  input Shift_Carry_In_reg;
  input msrxxx_carry;
  input Shift_Carry_In_reg_0;
  input [0:0]\Using_FPGA.Native_i_2__34_0 ;
  input load_Store_i;
  input \Using_FPGA.Native_i_2__34_1 ;
  input is_lwx_I;
  input \Using_FPGA.Native_i_2__34_2 ;
  input \Using_FPGA.Native_i_2__34_3 ;
  input fsl_carry_hold_value;
  input mb_Get_i;
  input \Using_FPGA.Native_i_6__2 ;
  input \Using_FPGA.Native_i_6__2_0 ;
  input mb_Put_i;
  input Shift_Carry_In_reg_1;
  input Shift_Carry_In_reg_2;
  input Shift_Carry_In_reg_3;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire DI_0;
  wire EX_FSL_Carry;
  wire Shift_Carry_In_reg;
  wire Shift_Carry_In_reg_0;
  wire Shift_Carry_In_reg_1;
  wire Shift_Carry_In_reg_2;
  wire Shift_Carry_In_reg_3;
  wire \Using_FPGA.Native_i_1__162_n_0 ;
  wire [0:0]\Using_FPGA.Native_i_2__34_0 ;
  wire \Using_FPGA.Native_i_2__34_1 ;
  wire \Using_FPGA.Native_i_2__34_2 ;
  wire \Using_FPGA.Native_i_2__34_3 ;
  wire \Using_FPGA.Native_i_5__4_n_0 ;
  wire \Using_FPGA.Native_i_6__2 ;
  wire \Using_FPGA.Native_i_6__2_0 ;
  wire correct_Carry;
  wire fsl_carry_hold_value;
  wire is_lwx_I;
  wire load_Store_i;
  wire mb_Get_i;
  wire mb_Put_i;
  wire msrxxx_carry;
  wire new_Carry;

  assign correct_Carry = lopt;
  assign lopt_1 = DI_0;
  assign lopt_2 = \Using_FPGA.Native_i_1__162_n_0 ;
  LUT3 #(
    .INIT(8'h08)) 
    \Using_FPGA.Native_i_1__162 
       (.I0(Shift_Carry_In_reg_1),
        .I1(Shift_Carry_In_reg_2),
        .I2(Shift_Carry_In_reg_3),
        .O(\Using_FPGA.Native_i_1__162_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_2__34 
       (.I0(EX_FSL_Carry),
        .I1(Shift_Carry_In_reg),
        .I2(msrxxx_carry),
        .I3(Shift_Carry_In_reg_0),
        .I4(\Using_FPGA.Native_i_5__4_n_0 ),
        .O(DI_0));
  LUT6 #(
    .INIT(64'h88B8BBBB8ABA8ABA)) 
    \Using_FPGA.Native_i_3__7 
       (.I0(fsl_carry_hold_value),
        .I1(\Using_FPGA.Native_i_2__34_1 ),
        .I2(mb_Get_i),
        .I3(\Using_FPGA.Native_i_6__2 ),
        .I4(\Using_FPGA.Native_i_6__2_0 ),
        .I5(mb_Put_i),
        .O(EX_FSL_Carry));
  LUT6 #(
    .INIT(64'hA2A2A2AAAEAEA2AA)) 
    \Using_FPGA.Native_i_5__4 
       (.I0(\Using_FPGA.Native_i_2__34_0 ),
        .I1(load_Store_i),
        .I2(\Using_FPGA.Native_i_2__34_1 ),
        .I3(is_lwx_I),
        .I4(\Using_FPGA.Native_i_2__34_2 ),
        .I5(\Using_FPGA.Native_i_2__34_3 ),
        .O(\Using_FPGA.Native_i_5__4_n_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_95
   (correct_Carry_II,
    load_Store_i2,
    correct_Carry_I,
    lopt,
    lopt_1);
  output correct_Carry_II;
  input load_Store_i2;
  input correct_Carry_I;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire correct_Carry_I;
  wire correct_Carry_II;
  wire load_Store_i2;

  assign correct_Carry_II = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_96
   (jump_Carry1,
    force_jump1,
    force_DI1,
    reg_zero,
    lopt);
  output jump_Carry1;
  input force_jump1;
  input force_DI1;
  input reg_zero;
  input lopt;

  wire force_DI1;
  wire force_jump1;
  wire jump_Carry1;
  wire reg_zero;

  assign jump_Carry1 = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_962
   (CI,
    control_carry,
    carry_In,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output CI;
  input control_carry;
  input carry_In;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire CI;
  wire carry_In;
  wire control_carry;
  wire \^lopt_1 ;
  wire \^lopt_10 ;
  wire \^lopt_11 ;
  wire lopt_12;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;
  wire [0:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign \^lopt_9  = lopt_8;
  assign lopt = \^lopt_1 ;
  assign lopt_10 = \^lopt_11 ;
  assign lopt_11 = lopt_12;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = \^lopt_10 ;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,CI}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,carry_In}),
        .O({lopt_12,\^lopt_11 ,\^lopt_10 ,\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [0]}),
        .S({\^lopt_9 ,\^lopt_6 ,\^lopt_3 ,control_carry}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_97
   (jump_Carry2,
    force_jump2,
    force_DI2,
    jump_Carry1,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output jump_Carry2;
  input force_jump2;
  input force_DI2;
  input jump_Carry1;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire force_DI2;
  wire force_jump2;
  wire jump_Carry1;
  wire jump_Carry2;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(jump_Carry1),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,jump_Carry2}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,force_DI2}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,force_jump2}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_98
   (dbg_pause_reg,
    mul_Executing_reg,
    PC_Write,
    S,
    load_Store_i_reg,
    S115_out,
    R22_out,
    break_Pipe_i_reg0,
    branch_with_delay,
    \Serial_Dbg_Intf.force_stop_cmd_i_reg ,
    trace_jump_taken_i_reg,
    jump_Carry2,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    sync_reset,
    take_Intr_Now_III,
    \Area_Debug_Control.force_stop_cmd_hold_reg ,
    DReady0_out,
    load_Store_i,
    ex_Valid_reg,
    \Using_FPGA.Native_2 ,
    inHibit_EX,
    FSL_Atomic,
    break_Pipe_i_reg,
    Interrupt,
    EX_delayslot_Instr_I_reg,
    break_Pipe_i_reg_0,
    break_Pipe_i_reg_1,
    break_Pipe_i_reg_2,
    force_stop_cmd_i,
    force_stop_cmd_hold,
    lopt,
    lopt_1);
  output dbg_pause_reg;
  output mul_Executing_reg;
  output PC_Write;
  output S;
  output load_Store_i_reg;
  output S115_out;
  output R22_out;
  output break_Pipe_i_reg0;
  output branch_with_delay;
  output \Serial_Dbg_Intf.force_stop_cmd_i_reg ;
  input trace_jump_taken_i_reg;
  input jump_Carry2;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input sync_reset;
  input take_Intr_Now_III;
  input \Area_Debug_Control.force_stop_cmd_hold_reg ;
  input DReady0_out;
  input load_Store_i;
  input ex_Valid_reg;
  input \Using_FPGA.Native_2 ;
  input inHibit_EX;
  input FSL_Atomic;
  input [1:0]break_Pipe_i_reg;
  input Interrupt;
  input EX_delayslot_Instr_I_reg;
  input break_Pipe_i_reg_0;
  input break_Pipe_i_reg_1;
  input break_Pipe_i_reg_2;
  input force_stop_cmd_i;
  input force_stop_cmd_hold;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \Area_Debug_Control.force_stop_cmd_hold_reg ;
  wire DReady0_out;
  wire EX_delayslot_Instr_I_reg;
  wire FSL_Atomic;
  wire Interrupt;
  wire PC_Write;
  wire R22_out;
  wire S;
  wire S115_out;
  wire \Serial_Dbg_Intf.force_stop_cmd_i_reg ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire branch_with_delay;
  wire break_Pipe_i_i_2_n_0;
  wire [1:0]break_Pipe_i_reg;
  wire break_Pipe_i_reg0;
  wire break_Pipe_i_reg_0;
  wire break_Pipe_i_reg_1;
  wire break_Pipe_i_reg_2;
  wire dbg_pause_reg;
  wire ex_Valid_reg;
  wire force_stop_cmd_hold;
  wire force_stop_cmd_i;
  wire inHibit_EX;
  wire jump_Carry2;
  wire load_Store_i;
  wire load_Store_i_reg;
  wire mul_Executing_reg;
  wire sync_reset;
  wire take_Intr_Now_III;
  wire trace_jump_taken_i_reg;

  assign dbg_pause_reg = lopt;
  assign lopt_1 = \<const0> ;
  LUT6 #(
    .INIT(64'hEEEEEEEEE000EEEE)) 
    \Area_Debug_Control.force_stop_cmd_hold_i_1 
       (.I0(force_stop_cmd_i),
        .I1(force_stop_cmd_hold),
        .I2(dbg_pause_reg),
        .I3(inHibit_EX),
        .I4(\Area_Debug_Control.force_stop_cmd_hold_reg ),
        .I5(take_Intr_Now_III),
        .O(\Serial_Dbg_Intf.force_stop_cmd_i_reg ));
  LUT2 #(
    .INIT(4'h8)) 
    EX_delayslot_Instr_I_i_1
       (.I0(dbg_pause_reg),
        .I1(EX_delayslot_Instr_I_reg),
        .O(branch_with_delay));
  GND GND
       (.G(\<const0> ));
  (* SOFT_HLUTNM = "soft_lutpair46" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.Native_i_1__114 
       (.I0(dbg_pause_reg),
        .I1(\Using_FPGA.Native_0 ),
        .O(PC_Write));
  LUT3 #(
    .INIT(8'hFE)) 
    \Using_FPGA.Native_i_1__116 
       (.I0(dbg_pause_reg),
        .I1(\Using_FPGA.Native_1 ),
        .I2(sync_reset),
        .O(S));
  (* SOFT_HLUTNM = "soft_lutpair45" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \Using_FPGA.Native_i_1__122 
       (.I0(\Using_FPGA.Native_2 ),
        .I1(inHibit_EX),
        .I2(dbg_pause_reg),
        .O(R22_out));
  (* SOFT_HLUTNM = "soft_lutpair45" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native_i_2__35 
       (.I0(dbg_pause_reg),
        .I1(inHibit_EX),
        .O(S115_out));
  LUT4 #(
    .INIT(16'h0010)) 
    break_Pipe_i_i_1
       (.I0(FSL_Atomic),
        .I1(break_Pipe_i_reg[1]),
        .I2(Interrupt),
        .I3(break_Pipe_i_i_2_n_0),
        .O(break_Pipe_i_reg0));
  LUT6 #(
    .INIT(64'hFFFFFF8FFF8FFF8F)) 
    break_Pipe_i_i_2
       (.I0(EX_delayslot_Instr_I_reg),
        .I1(dbg_pause_reg),
        .I2(break_Pipe_i_reg[0]),
        .I3(break_Pipe_i_reg_0),
        .I4(break_Pipe_i_reg_1),
        .I5(break_Pipe_i_reg_2),
        .O(break_Pipe_i_i_2_n_0));
  LUT6 #(
    .INIT(64'hD0D0D0D0D0DFD0D0)) 
    ex_Valid_i_3
       (.I0(S115_out),
        .I1(take_Intr_Now_III),
        .I2(\Area_Debug_Control.force_stop_cmd_hold_reg ),
        .I3(DReady0_out),
        .I4(load_Store_i),
        .I5(ex_Valid_reg),
        .O(load_Store_i_reg));
  (* SOFT_HLUTNM = "soft_lutpair46" *) 
  LUT2 #(
    .INIT(4'h2)) 
    nonvalid_IFetch_n_i_2
       (.I0(dbg_pause_reg),
        .I1(\Using_FPGA.Native_0 ),
        .O(mul_Executing_reg));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_99
   (new_Carry,
    \Use_Async_Reset.sync_reset_reg ,
    select_ALU_Carry,
    Op1,
    LO,
    sync_reset,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    lopt);
  output new_Carry;
  output \Use_Async_Reset.sync_reset_reg ;
  input select_ALU_Carry;
  input [0:0]Op1;
  input LO;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input lopt;

  wire LO;
  wire [0:0]Op1;
  wire \Use_Async_Reset.sync_reset_reg ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire new_Carry;
  wire select_ALU_Carry;
  wire sync_reset;

  assign new_Carry = lopt;
  LUT5 #(
    .INIT(32'hAAAABAAA)) 
    \Using_FPGA.Native_i_1__72 
       (.I0(sync_reset),
        .I1(new_Carry),
        .I2(\Using_FPGA.Native_0 ),
        .I3(\Using_FPGA.Native_1 ),
        .I4(\Using_FPGA.Native_2 ),
        .O(\Use_Async_Reset.sync_reset_reg ));
endmodule

module block_design_microblaze_0_0_MB_MUXCY_XORCY
   (buffer_Addr_S_I_2,
    \Using_FPGA.Native ,
    LO,
    lopt);
  output buffer_Addr_S_I_2;
  input \Using_FPGA.Native ;
  input LO;
  input lopt;

  wire LO;
  wire \Using_FPGA.Native ;
  wire buffer_Addr_S_I_2;

  assign buffer_Addr_S_I_2 = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_XORCY_1001
   (EX_CarryOut,
    ALU_Result,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]ALU_Result;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire [0:0]ALU_Result;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign ALU_Result = lopt_1;
  assign EX_CarryOut = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_XORCY_1003
   (EX_CarryOut,
    ALU_Result,
    S,
    DI,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output EX_CarryOut;
  output [0:0]ALU_Result;
  input S;
  input DI;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire [0:0]ALU_Result;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire \^lopt_1 ;
  wire \^lopt_10 ;
  wire \^lopt_11 ;
  wire lopt_12;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign \^lopt_9  = lopt_8;
  assign lopt = \^lopt_1 ;
  assign lopt_10 = \^lopt_11 ;
  assign lopt_11 = lopt_12;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = \^lopt_10 ;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(LO),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,EX_CarryOut}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,DI}),
        .O({lopt_12,\^lopt_11 ,\^lopt_10 ,ALU_Result}),
        .S({\^lopt_9 ,\^lopt_6 ,\^lopt_3 ,S}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_XORCY_1005
   (EX_CarryOut,
    ALU_Result,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]ALU_Result;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire [0:0]ALU_Result;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign ALU_Result = lopt_1;
  assign EX_CarryOut = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_XORCY_1007
   (EX_CarryOut,
    ALU_Result,
    S,
    DI,
    EX_CarryIn,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]ALU_Result;
  input S;
  input DI;
  input EX_CarryIn;
  input lopt;
  input lopt_1;

  wire [0:0]ALU_Result;
  wire DI;
  wire EX_CarryIn;
  wire EX_CarryOut;
  wire S;

  assign ALU_Result = lopt_1;
  assign EX_CarryOut = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_XORCY_1009
   (EX_CarryOut,
    ALU_Result,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]ALU_Result;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire [0:0]ALU_Result;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign ALU_Result = lopt_1;
  assign EX_CarryOut = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_XORCY_1011
   (EX_CarryOut,
    ALU_Result,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]ALU_Result;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire [0:0]ALU_Result;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign ALU_Result = lopt_1;
  assign EX_CarryOut = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_XORCY_1013
   (EX_CarryOut,
    ALU_Result,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]ALU_Result;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire [0:0]ALU_Result;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign ALU_Result = lopt_1;
  assign EX_CarryOut = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_XORCY_1015
   (EX_CarryOut,
    ALU_Result,
    S,
    DI,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output EX_CarryOut;
  output [0:0]ALU_Result;
  input S;
  input DI;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire [0:0]ALU_Result;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire \^lopt_1 ;
  wire \^lopt_10 ;
  wire \^lopt_11 ;
  wire lopt_12;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign \^lopt_9  = lopt_8;
  assign lopt = \^lopt_1 ;
  assign lopt_10 = \^lopt_11 ;
  assign lopt_11 = lopt_12;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = \^lopt_10 ;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(LO),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,EX_CarryOut}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,DI}),
        .O({lopt_12,\^lopt_11 ,\^lopt_10 ,ALU_Result}),
        .S({\^lopt_9 ,\^lopt_6 ,\^lopt_3 ,S}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_XORCY_1017
   (EX_CarryOut,
    ALU_Result,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]ALU_Result;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire [0:0]ALU_Result;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign ALU_Result = lopt_1;
  assign EX_CarryOut = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_XORCY_1019
   (EX_CarryOut,
    ALU_Result,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]ALU_Result;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire [0:0]ALU_Result;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign ALU_Result = lopt_1;
  assign EX_CarryOut = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_XORCY_1021
   (EX_CarryOut,
    ALU_Result,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]ALU_Result;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire [0:0]ALU_Result;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign ALU_Result = lopt_1;
  assign EX_CarryOut = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_XORCY_1023
   (EX_CarryOut,
    ALU_Result,
    S,
    DI,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output EX_CarryOut;
  output [0:0]ALU_Result;
  input S;
  input DI;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire [0:0]ALU_Result;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire \^lopt_1 ;
  wire \^lopt_10 ;
  wire \^lopt_11 ;
  wire lopt_12;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign \^lopt_9  = lopt_8;
  assign lopt = \^lopt_1 ;
  assign lopt_10 = \^lopt_11 ;
  assign lopt_11 = lopt_12;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = \^lopt_10 ;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(LO),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,EX_CarryOut}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,DI}),
        .O({lopt_12,\^lopt_11 ,\^lopt_10 ,ALU_Result}),
        .S({\^lopt_9 ,\^lopt_6 ,\^lopt_3 ,S}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_XORCY_1025
   (EX_CarryOut,
    ALU_Result,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]ALU_Result;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire [0:0]ALU_Result;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign ALU_Result = lopt_1;
  assign EX_CarryOut = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_XORCY_1027
   (EX_CarryOut,
    ALU_Result,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]ALU_Result;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire [0:0]ALU_Result;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign ALU_Result = lopt_1;
  assign EX_CarryOut = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_XORCY_1029
   (EX_CarryOut,
    ALU_Result,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]ALU_Result;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire [0:0]ALU_Result;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign ALU_Result = lopt_1;
  assign EX_CarryOut = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_XORCY_1031
   (EX_CarryOut,
    ALU_Result,
    S,
    DI,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output EX_CarryOut;
  output [0:0]ALU_Result;
  input S;
  input DI;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire [0:0]ALU_Result;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire \^lopt_1 ;
  wire \^lopt_10 ;
  wire \^lopt_11 ;
  wire lopt_12;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign \^lopt_9  = lopt_8;
  assign lopt = \^lopt_1 ;
  assign lopt_10 = \^lopt_11 ;
  assign lopt_11 = lopt_12;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = \^lopt_10 ;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(LO),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,EX_CarryOut}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,DI}),
        .O({lopt_12,\^lopt_11 ,\^lopt_10 ,ALU_Result}),
        .S({\^lopt_9 ,\^lopt_6 ,\^lopt_3 ,S}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_XORCY_1033
   (EX_CarryOut,
    ALU_Result,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]ALU_Result;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire [0:0]ALU_Result;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign ALU_Result = lopt_1;
  assign EX_CarryOut = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_XORCY_1035
   (EX_CarryOut,
    ALU_Result,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]ALU_Result;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire [0:0]ALU_Result;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign ALU_Result = lopt_1;
  assign EX_CarryOut = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_XORCY_1037
   (EX_CarryOut,
    ALU_Result,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]ALU_Result;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire [0:0]ALU_Result;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign ALU_Result = lopt_1;
  assign EX_CarryOut = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_XORCY_1039
   (EX_CarryOut,
    ALU_Result,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]ALU_Result;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire [0:0]ALU_Result;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign ALU_Result = lopt_1;
  assign EX_CarryOut = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_XORCY_1041
   (EX_CarryOut,
    ALU_Result,
    S,
    DI,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output EX_CarryOut;
  output [0:0]ALU_Result;
  input S;
  input DI;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire [0:0]ALU_Result;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire \^lopt_1 ;
  wire \^lopt_10 ;
  wire \^lopt_11 ;
  wire lopt_12;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign \^lopt_9  = lopt_8;
  assign lopt = \^lopt_1 ;
  assign lopt_10 = \^lopt_11 ;
  assign lopt_11 = lopt_12;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = \^lopt_10 ;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(LO),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,EX_CarryOut}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,DI}),
        .O({lopt_12,\^lopt_11 ,\^lopt_10 ,ALU_Result}),
        .S({\^lopt_9 ,\^lopt_6 ,\^lopt_3 ,S}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_XORCY_1043
   (EX_CarryOut,
    ALU_Result,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]ALU_Result;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire [0:0]ALU_Result;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign ALU_Result = lopt_1;
  assign EX_CarryOut = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_XORCY_1045
   (EX_CarryOut,
    ALU_Result,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]ALU_Result;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire [0:0]ALU_Result;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign ALU_Result = lopt_1;
  assign EX_CarryOut = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_XORCY_1047
   (EX_CarryOut,
    ALU_Result,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]ALU_Result;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire [0:0]ALU_Result;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign ALU_Result = lopt_1;
  assign EX_CarryOut = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_XORCY_1049
   (EX_CarryOut,
    ALU_Result,
    S,
    DI,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output EX_CarryOut;
  output [0:0]ALU_Result;
  input S;
  input DI;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire [0:0]ALU_Result;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire \^lopt_1 ;
  wire \^lopt_10 ;
  wire \^lopt_11 ;
  wire lopt_12;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign \^lopt_9  = lopt_8;
  assign lopt = \^lopt_1 ;
  assign lopt_10 = \^lopt_11 ;
  assign lopt_11 = lopt_12;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = \^lopt_10 ;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(LO),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,EX_CarryOut}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,DI}),
        .O({lopt_12,\^lopt_11 ,\^lopt_10 ,ALU_Result}),
        .S({\^lopt_9 ,\^lopt_6 ,\^lopt_3 ,S}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_XORCY_1051
   (EX_CarryOut,
    ALU_Result,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]ALU_Result;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire [0:0]ALU_Result;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign ALU_Result = lopt_1;
  assign EX_CarryOut = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_XORCY_1053
   (EX_CarryOut,
    ALU_Result,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]ALU_Result;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire [0:0]ALU_Result;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign ALU_Result = lopt_1;
  assign EX_CarryOut = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_XORCY_1055
   (\Using_FPGA.Native ,
    ALU_Result,
    S,
    DI,
    CI,
    lopt,
    lopt_1);
  output \Using_FPGA.Native ;
  output [0:0]ALU_Result;
  input S;
  input DI;
  input CI;
  input lopt;
  input lopt_1;

  wire [0:0]ALU_Result;
  wire CI;
  wire DI;
  wire S;
  wire \Using_FPGA.Native ;

  assign ALU_Result = lopt_1;
  assign \Using_FPGA.Native  = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_XORCY_121
   (LO,
    O,
    S,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1);
  output LO;
  output O;
  input S;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input lopt;
  input lopt_1;

  wire LO;
  wire O;
  wire S;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;

  assign LO = lopt;
  assign O = lopt_1;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_XORCY_123
   (LO,
    O,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    CI,
    lopt,
    lopt_1);
  output LO;
  output O;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input CI;
  input lopt;
  input lopt_1;

  wire CI;
  wire LO;
  wire O;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;

  assign LO = lopt;
  assign O = lopt_1;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_XORCY_614
   (Carry_Out,
    O,
    S,
    Carry_In,
    lopt,
    lopt_1,
    lopt_2);
  output Carry_Out;
  output O;
  input S;
  input Carry_In;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire Carry_In;
  wire Carry_Out;
  wire O;
  wire S;

  assign Carry_Out = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_XORCY_617
   (Carry_Out,
    O,
    S,
    LO,
    lopt,
    lopt_1,
    lopt_2);
  output Carry_Out;
  output O;
  input S;
  input LO;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire Carry_Out;
  wire LO;
  wire O;
  wire S;

  assign Carry_Out = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_XORCY_623
   (Carry_Out,
    O,
    S,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output Carry_Out;
  output O;
  input S;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire Carry_Out;
  wire LO;
  wire O;
  wire S;
  wire \^lopt_1 ;
  wire \^lopt_10 ;
  wire \^lopt_11 ;
  wire lopt_12;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign \^lopt_9  = lopt_8;
  assign lopt = \^lopt_1 ;
  assign lopt_10 = \^lopt_11 ;
  assign lopt_11 = lopt_12;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = \^lopt_10 ;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(LO),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,Carry_Out}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O({lopt_12,\^lopt_11 ,\^lopt_10 ,O}),
        .S({\^lopt_9 ,\^lopt_6 ,\^lopt_3 ,S}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_XORCY_629
   (Carry_Out,
    O,
    S,
    LO,
    lopt,
    lopt_1,
    lopt_2);
  output Carry_Out;
  output O;
  input S;
  input LO;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire Carry_Out;
  wire LO;
  wire O;
  wire S;

  assign Carry_Out = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_XORCY_635
   (Carry_Out,
    O,
    S,
    LO,
    lopt,
    lopt_1,
    lopt_2);
  output Carry_Out;
  output O;
  input S;
  input LO;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire Carry_Out;
  wire LO;
  wire O;
  wire S;

  assign Carry_Out = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_XORCY_641
   (Carry_Out,
    O,
    S,
    LO,
    lopt,
    lopt_1,
    lopt_2);
  output Carry_Out;
  output O;
  input S;
  input LO;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire Carry_Out;
  wire LO;
  wire O;
  wire S;

  assign Carry_Out = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_XORCY_647
   (Carry_Out,
    O,
    S,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9);
  output Carry_Out;
  output O;
  input S;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  output lopt_7;
  output lopt_8;
  input lopt_9;

  wire Carry_Out;
  wire LO;
  wire O;
  wire S;
  wire \^lopt_1 ;
  wire lopt_10;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;
  wire [3:3]\NLW_Using_FPGA.Native_I1_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Using_FPGA.Native_I1_CARRY4_DI_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign lopt = \^lopt_1 ;
  assign lopt_10 = lopt_9;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_7 = \^lopt_8 ;
  assign lopt_8 = \^lopt_9 ;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(LO),
        .CO({\NLW_Using_FPGA.Native_I1_CARRY4_CO_UNCONNECTED [3],\^lopt_4 ,\^lopt_1 ,Carry_Out}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.Native_I1_CARRY4_DI_UNCONNECTED [3],\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O({\^lopt_9 ,\^lopt_8 ,\^lopt_7 ,O}),
        .S({lopt_10,\^lopt_6 ,\^lopt_3 ,S}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_XORCY_653
   (LO,
    O,
    S,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output LO;
  output O;
  input S;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire LO;
  wire O;
  wire S;
  wire \^lopt_1 ;
  wire \^lopt_10 ;
  wire \^lopt_11 ;
  wire lopt_12;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign \^lopt_9  = lopt_8;
  assign lopt = \^lopt_1 ;
  assign lopt_10 = \^lopt_11 ;
  assign lopt_11 = lopt_12;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = \^lopt_10 ;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,LO}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O({lopt_12,\^lopt_11 ,\^lopt_10 ,O}),
        .S({\^lopt_9 ,\^lopt_6 ,\^lopt_3 ,S}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_XORCY_659
   (LO,
    O,
    S,
    Carry_Out,
    lopt,
    lopt_1,
    lopt_2);
  output LO;
  output O;
  input S;
  input Carry_Out;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire Carry_Out;
  wire LO;
  wire O;
  wire S;

  assign LO = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_XORCY_665
   (Carry_Out,
    O,
    S,
    LO,
    lopt,
    lopt_1,
    lopt_2);
  output Carry_Out;
  output O;
  input S;
  input LO;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire Carry_Out;
  wire LO;
  wire O;
  wire S;

  assign Carry_Out = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_XORCY_671
   (Carry_Out,
    O,
    S,
    DI,
    \Using_FPGA.Native ,
    lopt,
    lopt_1);
  output Carry_Out;
  output O;
  input S;
  input DI;
  input \Using_FPGA.Native ;
  input lopt;
  input lopt_1;

  wire Carry_Out;
  wire DI;
  wire O;
  wire S;
  wire \Using_FPGA.Native ;

  assign Carry_Out = lopt;
  assign O = lopt_1;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_XORCY_677
   (Carry_Out,
    O,
    S,
    LO,
    lopt,
    lopt_1,
    lopt_2);
  output Carry_Out;
  output O;
  input S;
  input LO;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire Carry_Out;
  wire LO;
  wire O;
  wire S;

  assign Carry_Out = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_XORCY_683
   (Carry_Out,
    O,
    S,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output Carry_Out;
  output O;
  input S;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire Carry_Out;
  wire LO;
  wire O;
  wire S;
  wire \^lopt_1 ;
  wire \^lopt_10 ;
  wire \^lopt_11 ;
  wire lopt_12;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign \^lopt_9  = lopt_8;
  assign lopt = \^lopt_1 ;
  assign lopt_10 = \^lopt_11 ;
  assign lopt_11 = lopt_12;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = \^lopt_10 ;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(LO),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,Carry_Out}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O({lopt_12,\^lopt_11 ,\^lopt_10 ,O}),
        .S({\^lopt_9 ,\^lopt_6 ,\^lopt_3 ,S}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_XORCY_689
   (Carry_Out,
    O,
    S,
    LO,
    lopt,
    lopt_1,
    lopt_2);
  output Carry_Out;
  output O;
  input S;
  input LO;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire Carry_Out;
  wire LO;
  wire O;
  wire S;

  assign Carry_Out = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_XORCY_695
   (Carry_Out,
    O,
    S,
    LO,
    lopt,
    lopt_1,
    lopt_2);
  output Carry_Out;
  output O;
  input S;
  input LO;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire Carry_Out;
  wire LO;
  wire O;
  wire S;

  assign Carry_Out = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_XORCY_701
   (Carry_Out,
    O,
    S,
    LO,
    lopt,
    lopt_1,
    lopt_2);
  output Carry_Out;
  output O;
  input S;
  input LO;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire Carry_Out;
  wire LO;
  wire O;
  wire S;

  assign Carry_Out = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_XORCY_707
   (Carry_Out,
    O,
    S,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output Carry_Out;
  output O;
  input S;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire Carry_Out;
  wire LO;
  wire O;
  wire S;
  wire \^lopt_1 ;
  wire \^lopt_10 ;
  wire \^lopt_11 ;
  wire lopt_12;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign \^lopt_9  = lopt_8;
  assign lopt = \^lopt_1 ;
  assign lopt_10 = \^lopt_11 ;
  assign lopt_11 = lopt_12;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = \^lopt_10 ;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(LO),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,Carry_Out}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O({lopt_12,\^lopt_11 ,\^lopt_10 ,O}),
        .S({\^lopt_9 ,\^lopt_6 ,\^lopt_3 ,S}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_XORCY_713
   (Carry_Out,
    O,
    S,
    LO,
    lopt,
    lopt_1,
    lopt_2);
  output Carry_Out;
  output O;
  input S;
  input LO;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire Carry_Out;
  wire LO;
  wire O;
  wire S;

  assign Carry_Out = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_XORCY_719
   (Carry_Out,
    O,
    S,
    LO,
    lopt,
    lopt_1,
    lopt_2);
  output Carry_Out;
  output O;
  input S;
  input LO;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire Carry_Out;
  wire LO;
  wire O;
  wire S;

  assign Carry_Out = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_XORCY_725
   (Carry_Out,
    O,
    S,
    LO,
    lopt,
    lopt_1,
    lopt_2);
  output Carry_Out;
  output O;
  input S;
  input LO;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire Carry_Out;
  wire LO;
  wire O;
  wire S;

  assign Carry_Out = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_XORCY_731
   (Carry_Out,
    O,
    S,
    LO,
    lopt,
    lopt_1,
    lopt_2);
  output Carry_Out;
  output O;
  input S;
  input LO;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire Carry_Out;
  wire LO;
  wire O;
  wire S;

  assign Carry_Out = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_XORCY_737
   (Carry_Out,
    O,
    S,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output Carry_Out;
  output O;
  input S;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire Carry_Out;
  wire LO;
  wire O;
  wire S;
  wire \^lopt_1 ;
  wire \^lopt_10 ;
  wire \^lopt_11 ;
  wire lopt_12;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign \^lopt_9  = lopt_8;
  assign lopt = \^lopt_1 ;
  assign lopt_10 = \^lopt_11 ;
  assign lopt_11 = lopt_12;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = \^lopt_10 ;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(LO),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,Carry_Out}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O({lopt_12,\^lopt_11 ,\^lopt_10 ,O}),
        .S({\^lopt_9 ,\^lopt_6 ,\^lopt_3 ,S}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_XORCY_743
   (Carry_Out,
    O,
    S,
    LO,
    lopt,
    lopt_1,
    lopt_2);
  output Carry_Out;
  output O;
  input S;
  input LO;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire Carry_Out;
  wire LO;
  wire O;
  wire S;

  assign Carry_Out = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_XORCY_749
   (Carry_Out,
    O,
    S,
    LO,
    lopt,
    lopt_1,
    lopt_2);
  output Carry_Out;
  output O;
  input S;
  input LO;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire Carry_Out;
  wire LO;
  wire O;
  wire S;

  assign Carry_Out = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_XORCY_755
   (Carry_Out,
    O,
    S,
    LO,
    lopt,
    lopt_1,
    lopt_2);
  output Carry_Out;
  output O;
  input S;
  input LO;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire Carry_Out;
  wire LO;
  wire O;
  wire S;

  assign Carry_Out = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_XORCY_761
   (Carry_Out,
    O,
    S,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output Carry_Out;
  output O;
  input S;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire Carry_Out;
  wire LO;
  wire O;
  wire S;
  wire \^lopt_1 ;
  wire \^lopt_10 ;
  wire \^lopt_11 ;
  wire lopt_12;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign \^lopt_9  = lopt_8;
  assign lopt = \^lopt_1 ;
  assign lopt_10 = \^lopt_11 ;
  assign lopt_11 = lopt_12;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = \^lopt_10 ;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(LO),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,Carry_Out}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O({lopt_12,\^lopt_11 ,\^lopt_10 ,O}),
        .S({\^lopt_9 ,\^lopt_6 ,\^lopt_3 ,S}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_XORCY_767
   (Carry_Out,
    O,
    S,
    LO,
    lopt,
    lopt_1,
    lopt_2);
  output Carry_Out;
  output O;
  input S;
  input LO;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire Carry_Out;
  wire LO;
  wire O;
  wire S;

  assign Carry_Out = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_XORCY_773
   (Carry_Out,
    O,
    S,
    LO,
    lopt,
    lopt_1,
    lopt_2);
  output Carry_Out;
  output O;
  input S;
  input LO;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire Carry_Out;
  wire LO;
  wire O;
  wire S;

  assign Carry_Out = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_XORCY_779
   (Carry_Out,
    O,
    S,
    LO,
    lopt,
    lopt_1,
    lopt_2);
  output Carry_Out;
  output O;
  input S;
  input LO;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire Carry_Out;
  wire LO;
  wire O;
  wire S;

  assign Carry_Out = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_XORCY_785
   (Carry_Out,
    O,
    S,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output Carry_Out;
  output O;
  input S;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire Carry_Out;
  wire LO;
  wire O;
  wire S;
  wire \^lopt_1 ;
  wire \^lopt_10 ;
  wire \^lopt_11 ;
  wire lopt_12;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign \^lopt_9  = lopt_8;
  assign lopt = \^lopt_1 ;
  assign lopt_10 = \^lopt_11 ;
  assign lopt_11 = lopt_12;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = \^lopt_10 ;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(LO),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,Carry_Out}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O({lopt_12,\^lopt_11 ,\^lopt_10 ,O}),
        .S({\^lopt_9 ,\^lopt_6 ,\^lopt_3 ,S}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_XORCY_791
   (Carry_Out,
    O,
    S,
    LO,
    lopt,
    lopt_1,
    lopt_2);
  output Carry_Out;
  output O;
  input S;
  input LO;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire Carry_Out;
  wire LO;
  wire O;
  wire S;

  assign Carry_Out = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_XORCY_797
   (pc_Sum,
    xor_Sum,
    LO,
    lopt);
  output pc_Sum;
  input xor_Sum;
  input LO;
  input lopt;

  wire LO;
  wire pc_Sum;
  wire xor_Sum;

  assign pc_Sum = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_XORCY_993
   (EX_CarryOut,
    ALU_Result,
    S,
    DI,
    EX_CarryIn,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]ALU_Result;
  input S;
  input DI;
  input EX_CarryIn;
  input lopt;
  input lopt_1;

  wire [0:0]ALU_Result;
  wire DI;
  wire EX_CarryIn;
  wire EX_CarryOut;
  wire S;

  assign ALU_Result = lopt_1;
  assign EX_CarryOut = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_XORCY_995
   (EX_CarryOut,
    ALU_Result,
    S,
    DI,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output EX_CarryOut;
  output [0:0]ALU_Result;
  input S;
  input DI;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire [0:0]ALU_Result;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire \^lopt_1 ;
  wire \^lopt_10 ;
  wire \^lopt_11 ;
  wire lopt_12;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign \^lopt_9  = lopt_8;
  assign lopt = \^lopt_1 ;
  assign lopt_10 = \^lopt_11 ;
  assign lopt_11 = lopt_12;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = \^lopt_10 ;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(LO),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,EX_CarryOut}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,DI}),
        .O({lopt_12,\^lopt_11 ,\^lopt_10 ,ALU_Result}),
        .S({\^lopt_9 ,\^lopt_6 ,\^lopt_3 ,S}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_XORCY_997
   (EX_CarryOut,
    ALU_Result,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]ALU_Result;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire [0:0]ALU_Result;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign ALU_Result = lopt_1;
  assign EX_CarryOut = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module block_design_microblaze_0_0_MB_MUXCY_XORCY_999
   (EX_CarryOut,
    ALU_Result,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]ALU_Result;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire [0:0]ALU_Result;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign ALU_Result = lopt_1;
  assign EX_CarryOut = lopt;
endmodule

module block_design_microblaze_0_0_MB_MUXF7
   (res_1x,
    Logic_Oper,
    res_10,
    res_11);
  output res_1x;
  input [0:0]Logic_Oper;
  input res_10;
  input res_11;

  wire [0:0]Logic_Oper;
  wire res_10;
  wire res_11;
  wire res_1x;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(res_10),
        .I1(res_11),
        .O(res_1x),
        .S(Logic_Oper));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module block_design_microblaze_0_0_MB_MUXF7_272
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module block_design_microblaze_0_0_MB_MUXF7_275
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module block_design_microblaze_0_0_MB_MUXF7_278
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module block_design_microblaze_0_0_MB_MUXF7_281
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module block_design_microblaze_0_0_MB_MUXF7_284
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module block_design_microblaze_0_0_MB_MUXF7_287
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module block_design_microblaze_0_0_MB_MUXF7_290
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module block_design_microblaze_0_0_MB_MUXF7_293
   (\Using_FPGA.Native_0 ,
    Select_Logic,
    shift_Res,
    logic_Res_i,
    \Using_FPGA.Native_i_1__45 ,
    \Using_FPGA.Native_i_1__45_0 ,
    \Using_FPGA.Native_i_1__45_1 ,
    \Using_FPGA.Native_i_1__45_2 ,
    Shifted);
  output \Using_FPGA.Native_0 ;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;
  input \Using_FPGA.Native_i_1__45 ;
  input \Using_FPGA.Native_i_1__45_0 ;
  input \Using_FPGA.Native_i_1__45_1 ;
  input \Using_FPGA.Native_i_1__45_2 ;
  input Shifted;

  wire Select_Logic;
  wire Shift_Logic_Res_0;
  wire Shifted;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_i_1__45 ;
  wire \Using_FPGA.Native_i_1__45_0 ;
  wire \Using_FPGA.Native_i_1__45_1 ;
  wire \Using_FPGA.Native_i_1__45_2 ;
  wire logic_Res_i;
  wire shift_Res;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Shift_Logic_Res_0),
        .S(Select_Logic));
  LUT6 #(
    .INIT(64'h8888888888888F88)) 
    \Using_FPGA.Native_i_6 
       (.I0(\Using_FPGA.Native_i_1__45 ),
        .I1(Shift_Logic_Res_0),
        .I2(\Using_FPGA.Native_i_1__45_0 ),
        .I3(\Using_FPGA.Native_i_1__45_1 ),
        .I4(\Using_FPGA.Native_i_1__45_2 ),
        .I5(Shifted),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module block_design_microblaze_0_0_MB_MUXF7_296
   (Shift_Logic_Res,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Shift_Logic_Res;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Shift_Logic_Res;
  wire logic_Res_i;
  wire shift_Res;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Shift_Logic_Res),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module block_design_microblaze_0_0_MB_MUXF7_299
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module block_design_microblaze_0_0_MB_MUXF7_302
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module block_design_microblaze_0_0_MB_MUXF7_305
   (shift_Logic_Result,
    Select_Logic,
    shift_Res,
    logic_Res_i,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 );
  output [0:0]shift_Logic_Result;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_4 ;

  wire Select_Logic;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_n_0 ;
  wire logic_Res_i;
  wire [0:0]shift_Logic_Result;
  wire shift_Res;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(\Using_FPGA.Native_n_0 ),
        .S(Select_Logic));
  LUT6 #(
    .INIT(64'h88F8FFFF88888888)) 
    \Using_FPGA.Native_i_1__47 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_n_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(\Using_FPGA.Native_2 ),
        .I4(\Using_FPGA.Native_3 ),
        .I5(\Using_FPGA.Native_4 ),
        .O(shift_Logic_Result));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module block_design_microblaze_0_0_MB_MUXF7_308
   (shift_Logic_Result,
    Select_Logic,
    shift_Res,
    logic_Res_i,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 );
  output [0:0]shift_Logic_Result;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;

  wire Select_Logic;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_n_0 ;
  wire logic_Res_i;
  wire [0:0]shift_Logic_Result;
  wire shift_Res;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(\Using_FPGA.Native_n_0 ),
        .S(Select_Logic));
  LUT5 #(
    .INIT(32'h8FFF8888)) 
    \Using_FPGA.Native_i_1__48 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_n_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(\Using_FPGA.Native_2 ),
        .I4(\Using_FPGA.Native_3 ),
        .O(shift_Logic_Result));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module block_design_microblaze_0_0_MB_MUXF7_311
   (shift_Logic_Result,
    Select_Logic,
    shift_Res,
    logic_Res_i,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 );
  output [0:0]shift_Logic_Result;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;

  wire Select_Logic;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_n_0 ;
  wire logic_Res_i;
  wire [0:0]shift_Logic_Result;
  wire shift_Res;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(\Using_FPGA.Native_n_0 ),
        .S(Select_Logic));
  LUT5 #(
    .INIT(32'hF8888888)) 
    \Using_FPGA.Native_i_1__49 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_n_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(\Using_FPGA.Native_2 ),
        .I4(\Using_FPGA.Native_3 ),
        .O(shift_Logic_Result));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module block_design_microblaze_0_0_MB_MUXF7_314
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module block_design_microblaze_0_0_MB_MUXF7_317
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module block_design_microblaze_0_0_MB_MUXF7_320
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module block_design_microblaze_0_0_MB_MUXF7_323
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module block_design_microblaze_0_0_MB_MUXF7_326
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module block_design_microblaze_0_0_MB_MUXF7_329
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module block_design_microblaze_0_0_MB_MUXF7_332
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module block_design_microblaze_0_0_MB_MUXF7_335
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module block_design_microblaze_0_0_MB_MUXF7_338
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module block_design_microblaze_0_0_MB_MUXF7_341
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module block_design_microblaze_0_0_MB_MUXF7_344
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module block_design_microblaze_0_0_MB_MUXF7_347
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module block_design_microblaze_0_0_MB_MUXF7_350
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module block_design_microblaze_0_0_MB_MUXF7_353
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module block_design_microblaze_0_0_MB_MUXF7_356
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module block_design_microblaze_0_0_MB_MUXF7_359
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module block_design_microblaze_0_0_MB_MUXF7_362
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module block_design_microblaze_0_0_MB_MUXF7_365
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

module block_design_microblaze_0_0_MB_RAM32X1D
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_BitField.Gen_Bits[9].mem_Rd_reg[9] ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_BitField.Gen_Bits[9].mem_Rd_reg[9] ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_BitField.Gen_Bits[9].mem_Rd_reg[9] ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_BitField.Gen_Bits[9].mem_Rd_reg[9] [4]),
        .A1(\Using_BitField.Gen_Bits[9].mem_Rd_reg[9] [3]),
        .A2(\Using_BitField.Gen_Bits[9].mem_Rd_reg[9] [2]),
        .A3(\Using_BitField.Gen_Bits[9].mem_Rd_reg[9] [1]),
        .A4(\Using_BitField.Gen_Bits[9].mem_Rd_reg[9] [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module block_design_microblaze_0_0_MB_RAM32X1D_521
   (op2_Reg__21,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__20_0 ,
    imm_Value,
    exception_kind,
    res_Forward2,
    Interrupt_Address);
  output op2_Reg__21;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__20_0 ;
  input [4:0]imm_Value;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]Interrupt_Address;

  wire Clk;
  wire [0:0]Interrupt_Address;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__20_0 ;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [4:0]imm_Value;
  wire op2_Reg__21;
  wire [9:9]reg2_Data;
  wire res_Forward2;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__20_0 [4]),
        .A1(\Using_FPGA.Native_i_2__20_0 [3]),
        .A2(\Using_FPGA.Native_i_2__20_0 [2]),
        .A3(\Using_FPGA.Native_i_2__20_0 [1]),
        .A4(\Using_FPGA.Native_i_2__20_0 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
  LUT5 #(
    .INIT(32'hFECE3202)) 
    \Using_FPGA.Native_i_2__20 
       (.I0(reg2_Data),
        .I1(exception_kind),
        .I2(res_Forward2),
        .I3(ex_Result),
        .I4(Interrupt_Address),
        .O(op2_Reg__21));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module block_design_microblaze_0_0_MB_RAM32X1D_522
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_BitField.Gen_Bits[8].mem_Rd_reg[8] ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_BitField.Gen_Bits[8].mem_Rd_reg[8] ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_BitField.Gen_Bits[8].mem_Rd_reg[8] ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_BitField.Gen_Bits[8].mem_Rd_reg[8] [4]),
        .A1(\Using_BitField.Gen_Bits[8].mem_Rd_reg[8] [3]),
        .A2(\Using_BitField.Gen_Bits[8].mem_Rd_reg[8] [2]),
        .A3(\Using_BitField.Gen_Bits[8].mem_Rd_reg[8] [1]),
        .A4(\Using_BitField.Gen_Bits[8].mem_Rd_reg[8] [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module block_design_microblaze_0_0_MB_RAM32X1D_523
   (op2_Reg__22,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__21_0 ,
    imm_Value,
    exception_kind,
    res_Forward2,
    Interrupt_Address);
  output op2_Reg__22;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__21_0 ;
  input [4:0]imm_Value;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]Interrupt_Address;

  wire Clk;
  wire [0:0]Interrupt_Address;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__21_0 ;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [4:0]imm_Value;
  wire op2_Reg__22;
  wire [8:8]reg2_Data;
  wire res_Forward2;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__21_0 [4]),
        .A1(\Using_FPGA.Native_i_2__21_0 [3]),
        .A2(\Using_FPGA.Native_i_2__21_0 [2]),
        .A3(\Using_FPGA.Native_i_2__21_0 [1]),
        .A4(\Using_FPGA.Native_i_2__21_0 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
  LUT5 #(
    .INIT(32'hFECE3202)) 
    \Using_FPGA.Native_i_2__21 
       (.I0(reg2_Data),
        .I1(exception_kind),
        .I2(res_Forward2),
        .I3(ex_Result),
        .I4(Interrupt_Address),
        .O(op2_Reg__22));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module block_design_microblaze_0_0_MB_RAM32X1D_524
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_BitField.Gen_Bits[7].mem_Rd_reg[7] ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_BitField.Gen_Bits[7].mem_Rd_reg[7] ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_BitField.Gen_Bits[7].mem_Rd_reg[7] ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_BitField.Gen_Bits[7].mem_Rd_reg[7] [4]),
        .A1(\Using_BitField.Gen_Bits[7].mem_Rd_reg[7] [3]),
        .A2(\Using_BitField.Gen_Bits[7].mem_Rd_reg[7] [2]),
        .A3(\Using_BitField.Gen_Bits[7].mem_Rd_reg[7] [1]),
        .A4(\Using_BitField.Gen_Bits[7].mem_Rd_reg[7] [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module block_design_microblaze_0_0_MB_RAM32X1D_525
   (op2_Reg__23,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__22_0 ,
    imm_Value,
    exception_kind,
    res_Forward2,
    Interrupt_Address);
  output op2_Reg__23;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__22_0 ;
  input [4:0]imm_Value;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]Interrupt_Address;

  wire Clk;
  wire [0:0]Interrupt_Address;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__22_0 ;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [4:0]imm_Value;
  wire op2_Reg__23;
  wire [7:7]reg2_Data;
  wire res_Forward2;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__22_0 [4]),
        .A1(\Using_FPGA.Native_i_2__22_0 [3]),
        .A2(\Using_FPGA.Native_i_2__22_0 [2]),
        .A3(\Using_FPGA.Native_i_2__22_0 [1]),
        .A4(\Using_FPGA.Native_i_2__22_0 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
  LUT5 #(
    .INIT(32'hFECE3202)) 
    \Using_FPGA.Native_i_2__22 
       (.I0(reg2_Data),
        .I1(exception_kind),
        .I2(res_Forward2),
        .I3(ex_Result),
        .I4(Interrupt_Address),
        .O(op2_Reg__23));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module block_design_microblaze_0_0_MB_RAM32X1D_526
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_BitField.Gen_Bits[6].mem_Rd_reg[6] ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_BitField.Gen_Bits[6].mem_Rd_reg[6] ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_BitField.Gen_Bits[6].mem_Rd_reg[6] ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_BitField.Gen_Bits[6].mem_Rd_reg[6] [4]),
        .A1(\Using_BitField.Gen_Bits[6].mem_Rd_reg[6] [3]),
        .A2(\Using_BitField.Gen_Bits[6].mem_Rd_reg[6] [2]),
        .A3(\Using_BitField.Gen_Bits[6].mem_Rd_reg[6] [1]),
        .A4(\Using_BitField.Gen_Bits[6].mem_Rd_reg[6] [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module block_design_microblaze_0_0_MB_RAM32X1D_527
   (op2_Reg__24,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__23_0 ,
    imm_Value,
    exception_kind,
    res_Forward2,
    Interrupt_Address);
  output op2_Reg__24;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__23_0 ;
  input [4:0]imm_Value;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]Interrupt_Address;

  wire Clk;
  wire [0:0]Interrupt_Address;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__23_0 ;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [4:0]imm_Value;
  wire op2_Reg__24;
  wire [6:6]reg2_Data;
  wire res_Forward2;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__23_0 [4]),
        .A1(\Using_FPGA.Native_i_2__23_0 [3]),
        .A2(\Using_FPGA.Native_i_2__23_0 [2]),
        .A3(\Using_FPGA.Native_i_2__23_0 [1]),
        .A4(\Using_FPGA.Native_i_2__23_0 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
  LUT5 #(
    .INIT(32'hFECE3202)) 
    \Using_FPGA.Native_i_2__23 
       (.I0(reg2_Data),
        .I1(exception_kind),
        .I2(res_Forward2),
        .I3(ex_Result),
        .I4(Interrupt_Address),
        .O(op2_Reg__24));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module block_design_microblaze_0_0_MB_RAM32X1D_528
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_BitField.Gen_Bits[5].mem_Rd_reg[5] ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_BitField.Gen_Bits[5].mem_Rd_reg[5] ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_BitField.Gen_Bits[5].mem_Rd_reg[5] ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_BitField.Gen_Bits[5].mem_Rd_reg[5] [4]),
        .A1(\Using_BitField.Gen_Bits[5].mem_Rd_reg[5] [3]),
        .A2(\Using_BitField.Gen_Bits[5].mem_Rd_reg[5] [2]),
        .A3(\Using_BitField.Gen_Bits[5].mem_Rd_reg[5] [1]),
        .A4(\Using_BitField.Gen_Bits[5].mem_Rd_reg[5] [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module block_design_microblaze_0_0_MB_RAM32X1D_529
   (op2_Reg__25,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__24_0 ,
    imm_Value,
    exception_kind,
    res_Forward2,
    Interrupt_Address);
  output op2_Reg__25;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__24_0 ;
  input [4:0]imm_Value;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]Interrupt_Address;

  wire Clk;
  wire [0:0]Interrupt_Address;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__24_0 ;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [4:0]imm_Value;
  wire op2_Reg__25;
  wire [5:5]reg2_Data;
  wire res_Forward2;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__24_0 [4]),
        .A1(\Using_FPGA.Native_i_2__24_0 [3]),
        .A2(\Using_FPGA.Native_i_2__24_0 [2]),
        .A3(\Using_FPGA.Native_i_2__24_0 [1]),
        .A4(\Using_FPGA.Native_i_2__24_0 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
  LUT5 #(
    .INIT(32'hFECE3202)) 
    \Using_FPGA.Native_i_2__24 
       (.I0(reg2_Data),
        .I1(exception_kind),
        .I2(res_Forward2),
        .I3(ex_Result),
        .I4(Interrupt_Address),
        .O(op2_Reg__25));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module block_design_microblaze_0_0_MB_RAM32X1D_530
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_BitField.Gen_Bits[4].mem_Rd_reg[4] ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_BitField.Gen_Bits[4].mem_Rd_reg[4] ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_BitField.Gen_Bits[4].mem_Rd_reg[4] ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_BitField.Gen_Bits[4].mem_Rd_reg[4] [4]),
        .A1(\Using_BitField.Gen_Bits[4].mem_Rd_reg[4] [3]),
        .A2(\Using_BitField.Gen_Bits[4].mem_Rd_reg[4] [2]),
        .A3(\Using_BitField.Gen_Bits[4].mem_Rd_reg[4] [1]),
        .A4(\Using_BitField.Gen_Bits[4].mem_Rd_reg[4] [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module block_design_microblaze_0_0_MB_RAM32X1D_531
   (op2_Reg__26,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__25_0 ,
    imm_Value,
    exception_kind,
    res_Forward2,
    Interrupt_Address);
  output op2_Reg__26;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__25_0 ;
  input [4:0]imm_Value;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]Interrupt_Address;

  wire Clk;
  wire [0:0]Interrupt_Address;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__25_0 ;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [4:0]imm_Value;
  wire op2_Reg__26;
  wire [4:4]reg2_Data;
  wire res_Forward2;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__25_0 [4]),
        .A1(\Using_FPGA.Native_i_2__25_0 [3]),
        .A2(\Using_FPGA.Native_i_2__25_0 [2]),
        .A3(\Using_FPGA.Native_i_2__25_0 [1]),
        .A4(\Using_FPGA.Native_i_2__25_0 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
  LUT5 #(
    .INIT(32'hFECE3202)) 
    \Using_FPGA.Native_i_2__25 
       (.I0(reg2_Data),
        .I1(exception_kind),
        .I2(res_Forward2),
        .I3(ex_Result),
        .I4(Interrupt_Address),
        .O(op2_Reg__26));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module block_design_microblaze_0_0_MB_RAM32X1D_532
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_BitField.Gen_Bits[3].mem_Rd_reg[3] ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_BitField.Gen_Bits[3].mem_Rd_reg[3] ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_BitField.Gen_Bits[3].mem_Rd_reg[3] ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_BitField.Gen_Bits[3].mem_Rd_reg[3] [4]),
        .A1(\Using_BitField.Gen_Bits[3].mem_Rd_reg[3] [3]),
        .A2(\Using_BitField.Gen_Bits[3].mem_Rd_reg[3] [2]),
        .A3(\Using_BitField.Gen_Bits[3].mem_Rd_reg[3] [1]),
        .A4(\Using_BitField.Gen_Bits[3].mem_Rd_reg[3] [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module block_design_microblaze_0_0_MB_RAM32X1D_533
   (op2_Reg__27,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__26_0 ,
    imm_Value,
    exception_kind,
    res_Forward2,
    Interrupt_Address);
  output op2_Reg__27;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__26_0 ;
  input [4:0]imm_Value;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]Interrupt_Address;

  wire Clk;
  wire [0:0]Interrupt_Address;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__26_0 ;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [4:0]imm_Value;
  wire op2_Reg__27;
  wire [3:3]reg2_Data;
  wire res_Forward2;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__26_0 [4]),
        .A1(\Using_FPGA.Native_i_2__26_0 [3]),
        .A2(\Using_FPGA.Native_i_2__26_0 [2]),
        .A3(\Using_FPGA.Native_i_2__26_0 [1]),
        .A4(\Using_FPGA.Native_i_2__26_0 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
  LUT5 #(
    .INIT(32'hFECE3202)) 
    \Using_FPGA.Native_i_2__26 
       (.I0(reg2_Data),
        .I1(exception_kind),
        .I2(res_Forward2),
        .I3(ex_Result),
        .I4(Interrupt_Address),
        .O(op2_Reg__27));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module block_design_microblaze_0_0_MB_RAM32X1D_534
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_BitField.Gen_Bits[31].mem_Rd_reg[31] ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_BitField.Gen_Bits[31].mem_Rd_reg[31] ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_BitField.Gen_Bits[31].mem_Rd_reg[31] ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_BitField.Gen_Bits[31].mem_Rd_reg[31] [4]),
        .A1(\Using_BitField.Gen_Bits[31].mem_Rd_reg[31] [3]),
        .A2(\Using_BitField.Gen_Bits[31].mem_Rd_reg[31] [2]),
        .A3(\Using_BitField.Gen_Bits[31].mem_Rd_reg[31] [1]),
        .A4(\Using_BitField.Gen_Bits[31].mem_Rd_reg[31] [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module block_design_microblaze_0_0_MB_RAM32X1D_535
   (op2_Reg,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_3_0 ,
    imm_Value,
    exception_kind,
    res_Forward2,
    Interrupt_Address);
  output op2_Reg;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_3_0 ;
  input [4:0]imm_Value;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]Interrupt_Address;

  wire Clk;
  wire [0:0]Interrupt_Address;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_3_0 ;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [4:0]imm_Value;
  wire op2_Reg;
  wire [31:31]reg2_Data;
  wire res_Forward2;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_3_0 [4]),
        .A1(\Using_FPGA.Native_i_3_0 [3]),
        .A2(\Using_FPGA.Native_i_3_0 [2]),
        .A3(\Using_FPGA.Native_i_3_0 [1]),
        .A4(\Using_FPGA.Native_i_3_0 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
  LUT5 #(
    .INIT(32'hFECE3202)) 
    \Using_FPGA.Native_i_3 
       (.I0(reg2_Data),
        .I1(exception_kind),
        .I2(res_Forward2),
        .I3(ex_Result),
        .I4(Interrupt_Address),
        .O(op2_Reg));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module block_design_microblaze_0_0_MB_RAM32X1D_536
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_BitField.Gen_Bits[30].mem_Rd_reg[30] ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_BitField.Gen_Bits[30].mem_Rd_reg[30] ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_BitField.Gen_Bits[30].mem_Rd_reg[30] ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_BitField.Gen_Bits[30].mem_Rd_reg[30] [4]),
        .A1(\Using_BitField.Gen_Bits[30].mem_Rd_reg[30] [3]),
        .A2(\Using_BitField.Gen_Bits[30].mem_Rd_reg[30] [2]),
        .A3(\Using_BitField.Gen_Bits[30].mem_Rd_reg[30] [1]),
        .A4(\Using_BitField.Gen_Bits[30].mem_Rd_reg[30] [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module block_design_microblaze_0_0_MB_RAM32X1D_537
   (op2_Reg__0,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2_0 ,
    imm_Value,
    exception_kind,
    res_Forward2,
    Interrupt_Address);
  output op2_Reg__0;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2_0 ;
  input [4:0]imm_Value;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]Interrupt_Address;

  wire Clk;
  wire [0:0]Interrupt_Address;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2_0 ;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [4:0]imm_Value;
  wire op2_Reg__0;
  wire [30:30]reg2_Data;
  wire res_Forward2;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2_0 [4]),
        .A1(\Using_FPGA.Native_i_2_0 [3]),
        .A2(\Using_FPGA.Native_i_2_0 [2]),
        .A3(\Using_FPGA.Native_i_2_0 [1]),
        .A4(\Using_FPGA.Native_i_2_0 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
  LUT5 #(
    .INIT(32'hFECE3202)) 
    \Using_FPGA.Native_i_2 
       (.I0(reg2_Data),
        .I1(exception_kind),
        .I2(res_Forward2),
        .I3(ex_Result),
        .I4(Interrupt_Address),
        .O(op2_Reg__0));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module block_design_microblaze_0_0_MB_RAM32X1D_538
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_BitField.Gen_Bits[2].mem_Rd_reg[2] ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_BitField.Gen_Bits[2].mem_Rd_reg[2] ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_BitField.Gen_Bits[2].mem_Rd_reg[2] ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_BitField.Gen_Bits[2].mem_Rd_reg[2] [4]),
        .A1(\Using_BitField.Gen_Bits[2].mem_Rd_reg[2] [3]),
        .A2(\Using_BitField.Gen_Bits[2].mem_Rd_reg[2] [2]),
        .A3(\Using_BitField.Gen_Bits[2].mem_Rd_reg[2] [1]),
        .A4(\Using_BitField.Gen_Bits[2].mem_Rd_reg[2] [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module block_design_microblaze_0_0_MB_RAM32X1D_539
   (op2_Reg__28,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__27_0 ,
    imm_Value,
    exception_kind,
    res_Forward2,
    Interrupt_Address);
  output op2_Reg__28;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__27_0 ;
  input [4:0]imm_Value;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]Interrupt_Address;

  wire Clk;
  wire [0:0]Interrupt_Address;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__27_0 ;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [4:0]imm_Value;
  wire op2_Reg__28;
  wire [2:2]reg2_Data;
  wire res_Forward2;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__27_0 [4]),
        .A1(\Using_FPGA.Native_i_2__27_0 [3]),
        .A2(\Using_FPGA.Native_i_2__27_0 [2]),
        .A3(\Using_FPGA.Native_i_2__27_0 [1]),
        .A4(\Using_FPGA.Native_i_2__27_0 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
  LUT5 #(
    .INIT(32'hFECE3202)) 
    \Using_FPGA.Native_i_2__27 
       (.I0(reg2_Data),
        .I1(exception_kind),
        .I2(res_Forward2),
        .I3(ex_Result),
        .I4(Interrupt_Address),
        .O(op2_Reg__28));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module block_design_microblaze_0_0_MB_RAM32X1D_540
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_BitField.Gen_Bits[29].mem_Rd_reg[29] ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_BitField.Gen_Bits[29].mem_Rd_reg[29] ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_BitField.Gen_Bits[29].mem_Rd_reg[29] ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_BitField.Gen_Bits[29].mem_Rd_reg[29] [4]),
        .A1(\Using_BitField.Gen_Bits[29].mem_Rd_reg[29] [3]),
        .A2(\Using_BitField.Gen_Bits[29].mem_Rd_reg[29] [2]),
        .A3(\Using_BitField.Gen_Bits[29].mem_Rd_reg[29] [1]),
        .A4(\Using_BitField.Gen_Bits[29].mem_Rd_reg[29] [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module block_design_microblaze_0_0_MB_RAM32X1D_541
   (op2_Reg__1,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__0_0 ,
    imm_Value,
    exception_kind,
    res_Forward2,
    Interrupt_Address);
  output op2_Reg__1;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__0_0 ;
  input [4:0]imm_Value;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]Interrupt_Address;

  wire Clk;
  wire [0:0]Interrupt_Address;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__0_0 ;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [4:0]imm_Value;
  wire op2_Reg__1;
  wire [29:29]reg2_Data;
  wire res_Forward2;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__0_0 [4]),
        .A1(\Using_FPGA.Native_i_2__0_0 [3]),
        .A2(\Using_FPGA.Native_i_2__0_0 [2]),
        .A3(\Using_FPGA.Native_i_2__0_0 [1]),
        .A4(\Using_FPGA.Native_i_2__0_0 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
  LUT5 #(
    .INIT(32'hFECE3202)) 
    \Using_FPGA.Native_i_2__0 
       (.I0(reg2_Data),
        .I1(exception_kind),
        .I2(res_Forward2),
        .I3(ex_Result),
        .I4(Interrupt_Address),
        .O(op2_Reg__1));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module block_design_microblaze_0_0_MB_RAM32X1D_542
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_BitField.Gen_Bits[28].mem_Rd_reg[28] ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_BitField.Gen_Bits[28].mem_Rd_reg[28] ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_BitField.Gen_Bits[28].mem_Rd_reg[28] ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_BitField.Gen_Bits[28].mem_Rd_reg[28] [4]),
        .A1(\Using_BitField.Gen_Bits[28].mem_Rd_reg[28] [3]),
        .A2(\Using_BitField.Gen_Bits[28].mem_Rd_reg[28] [2]),
        .A3(\Using_BitField.Gen_Bits[28].mem_Rd_reg[28] [1]),
        .A4(\Using_BitField.Gen_Bits[28].mem_Rd_reg[28] [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module block_design_microblaze_0_0_MB_RAM32X1D_543
   (op2_Reg__2,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__1_0 ,
    imm_Value,
    exception_kind,
    res_Forward2,
    Interrupt_Address);
  output op2_Reg__2;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__1_0 ;
  input [4:0]imm_Value;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]Interrupt_Address;

  wire Clk;
  wire [0:0]Interrupt_Address;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__1_0 ;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [4:0]imm_Value;
  wire op2_Reg__2;
  wire [28:28]reg2_Data;
  wire res_Forward2;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__1_0 [4]),
        .A1(\Using_FPGA.Native_i_2__1_0 [3]),
        .A2(\Using_FPGA.Native_i_2__1_0 [2]),
        .A3(\Using_FPGA.Native_i_2__1_0 [1]),
        .A4(\Using_FPGA.Native_i_2__1_0 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
  LUT5 #(
    .INIT(32'hFECE3202)) 
    \Using_FPGA.Native_i_2__1 
       (.I0(reg2_Data),
        .I1(exception_kind),
        .I2(res_Forward2),
        .I3(ex_Result),
        .I4(Interrupt_Address),
        .O(op2_Reg__2));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module block_design_microblaze_0_0_MB_RAM32X1D_544
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_BitField.Gen_Bits[27].mem_Rd_reg[27] ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_BitField.Gen_Bits[27].mem_Rd_reg[27] ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_BitField.Gen_Bits[27].mem_Rd_reg[27] ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_BitField.Gen_Bits[27].mem_Rd_reg[27] [4]),
        .A1(\Using_BitField.Gen_Bits[27].mem_Rd_reg[27] [3]),
        .A2(\Using_BitField.Gen_Bits[27].mem_Rd_reg[27] [2]),
        .A3(\Using_BitField.Gen_Bits[27].mem_Rd_reg[27] [1]),
        .A4(\Using_BitField.Gen_Bits[27].mem_Rd_reg[27] [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module block_design_microblaze_0_0_MB_RAM32X1D_545
   (op2_Reg__3,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__2_0 ,
    imm_Value,
    exception_kind,
    res_Forward2,
    Interrupt_Address);
  output op2_Reg__3;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__2_0 ;
  input [4:0]imm_Value;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]Interrupt_Address;

  wire Clk;
  wire [0:0]Interrupt_Address;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__2_0 ;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [4:0]imm_Value;
  wire op2_Reg__3;
  wire [27:27]reg2_Data;
  wire res_Forward2;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__2_0 [4]),
        .A1(\Using_FPGA.Native_i_2__2_0 [3]),
        .A2(\Using_FPGA.Native_i_2__2_0 [2]),
        .A3(\Using_FPGA.Native_i_2__2_0 [1]),
        .A4(\Using_FPGA.Native_i_2__2_0 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
  LUT5 #(
    .INIT(32'hFECE3202)) 
    \Using_FPGA.Native_i_2__2 
       (.I0(reg2_Data),
        .I1(exception_kind),
        .I2(res_Forward2),
        .I3(ex_Result),
        .I4(Interrupt_Address),
        .O(op2_Reg__3));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module block_design_microblaze_0_0_MB_RAM32X1D_546
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_BitField.Gen_Bits[26].mem_Rd_reg[26] ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_BitField.Gen_Bits[26].mem_Rd_reg[26] ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_BitField.Gen_Bits[26].mem_Rd_reg[26] ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_BitField.Gen_Bits[26].mem_Rd_reg[26] [4]),
        .A1(\Using_BitField.Gen_Bits[26].mem_Rd_reg[26] [3]),
        .A2(\Using_BitField.Gen_Bits[26].mem_Rd_reg[26] [2]),
        .A3(\Using_BitField.Gen_Bits[26].mem_Rd_reg[26] [1]),
        .A4(\Using_BitField.Gen_Bits[26].mem_Rd_reg[26] [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module block_design_microblaze_0_0_MB_RAM32X1D_547
   (op2_Reg__4,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__3_0 ,
    imm_Value,
    exception_kind,
    res_Forward2,
    Interrupt_Address);
  output op2_Reg__4;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__3_0 ;
  input [4:0]imm_Value;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]Interrupt_Address;

  wire Clk;
  wire [0:0]Interrupt_Address;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__3_0 ;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [4:0]imm_Value;
  wire op2_Reg__4;
  wire [26:26]reg2_Data;
  wire res_Forward2;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__3_0 [4]),
        .A1(\Using_FPGA.Native_i_2__3_0 [3]),
        .A2(\Using_FPGA.Native_i_2__3_0 [2]),
        .A3(\Using_FPGA.Native_i_2__3_0 [1]),
        .A4(\Using_FPGA.Native_i_2__3_0 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
  LUT5 #(
    .INIT(32'hFECE3202)) 
    \Using_FPGA.Native_i_2__3 
       (.I0(reg2_Data),
        .I1(exception_kind),
        .I2(res_Forward2),
        .I3(ex_Result),
        .I4(Interrupt_Address),
        .O(op2_Reg__4));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module block_design_microblaze_0_0_MB_RAM32X1D_548
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_BitField.Gen_Bits[25].mem_Rd_reg[25] ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_BitField.Gen_Bits[25].mem_Rd_reg[25] ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_BitField.Gen_Bits[25].mem_Rd_reg[25] ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_BitField.Gen_Bits[25].mem_Rd_reg[25] [4]),
        .A1(\Using_BitField.Gen_Bits[25].mem_Rd_reg[25] [3]),
        .A2(\Using_BitField.Gen_Bits[25].mem_Rd_reg[25] [2]),
        .A3(\Using_BitField.Gen_Bits[25].mem_Rd_reg[25] [1]),
        .A4(\Using_BitField.Gen_Bits[25].mem_Rd_reg[25] [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module block_design_microblaze_0_0_MB_RAM32X1D_549
   (op2_Reg__5,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__4_0 ,
    imm_Value,
    exception_kind,
    res_Forward2,
    Interrupt_Address);
  output op2_Reg__5;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__4_0 ;
  input [4:0]imm_Value;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]Interrupt_Address;

  wire Clk;
  wire [0:0]Interrupt_Address;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__4_0 ;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [4:0]imm_Value;
  wire op2_Reg__5;
  wire [25:25]reg2_Data;
  wire res_Forward2;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__4_0 [4]),
        .A1(\Using_FPGA.Native_i_2__4_0 [3]),
        .A2(\Using_FPGA.Native_i_2__4_0 [2]),
        .A3(\Using_FPGA.Native_i_2__4_0 [1]),
        .A4(\Using_FPGA.Native_i_2__4_0 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
  LUT5 #(
    .INIT(32'hFECE3202)) 
    \Using_FPGA.Native_i_2__4 
       (.I0(reg2_Data),
        .I1(exception_kind),
        .I2(res_Forward2),
        .I3(ex_Result),
        .I4(Interrupt_Address),
        .O(op2_Reg__5));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module block_design_microblaze_0_0_MB_RAM32X1D_550
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_BitField.Gen_Bits[24].mem_Rd_reg[24] ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_BitField.Gen_Bits[24].mem_Rd_reg[24] ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_BitField.Gen_Bits[24].mem_Rd_reg[24] ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_BitField.Gen_Bits[24].mem_Rd_reg[24] [4]),
        .A1(\Using_BitField.Gen_Bits[24].mem_Rd_reg[24] [3]),
        .A2(\Using_BitField.Gen_Bits[24].mem_Rd_reg[24] [2]),
        .A3(\Using_BitField.Gen_Bits[24].mem_Rd_reg[24] [1]),
        .A4(\Using_BitField.Gen_Bits[24].mem_Rd_reg[24] [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module block_design_microblaze_0_0_MB_RAM32X1D_551
   (op2_Reg__6,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__5_0 ,
    imm_Value,
    exception_kind,
    res_Forward2,
    Interrupt_Address);
  output op2_Reg__6;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__5_0 ;
  input [4:0]imm_Value;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]Interrupt_Address;

  wire Clk;
  wire [0:0]Interrupt_Address;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__5_0 ;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [4:0]imm_Value;
  wire op2_Reg__6;
  wire [24:24]reg2_Data;
  wire res_Forward2;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__5_0 [4]),
        .A1(\Using_FPGA.Native_i_2__5_0 [3]),
        .A2(\Using_FPGA.Native_i_2__5_0 [2]),
        .A3(\Using_FPGA.Native_i_2__5_0 [1]),
        .A4(\Using_FPGA.Native_i_2__5_0 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
  LUT5 #(
    .INIT(32'hFECE3202)) 
    \Using_FPGA.Native_i_2__5 
       (.I0(reg2_Data),
        .I1(exception_kind),
        .I2(res_Forward2),
        .I3(ex_Result),
        .I4(Interrupt_Address),
        .O(op2_Reg__6));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module block_design_microblaze_0_0_MB_RAM32X1D_552
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_BitField.Gen_Bits[23].mem_Rd_reg[23] ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_BitField.Gen_Bits[23].mem_Rd_reg[23] ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_BitField.Gen_Bits[23].mem_Rd_reg[23] ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_BitField.Gen_Bits[23].mem_Rd_reg[23] [4]),
        .A1(\Using_BitField.Gen_Bits[23].mem_Rd_reg[23] [3]),
        .A2(\Using_BitField.Gen_Bits[23].mem_Rd_reg[23] [2]),
        .A3(\Using_BitField.Gen_Bits[23].mem_Rd_reg[23] [1]),
        .A4(\Using_BitField.Gen_Bits[23].mem_Rd_reg[23] [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module block_design_microblaze_0_0_MB_RAM32X1D_553
   (op2_Reg__7,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__6_0 ,
    imm_Value,
    exception_kind,
    res_Forward2,
    Interrupt_Address);
  output op2_Reg__7;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__6_0 ;
  input [4:0]imm_Value;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]Interrupt_Address;

  wire Clk;
  wire [0:0]Interrupt_Address;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__6_0 ;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [4:0]imm_Value;
  wire op2_Reg__7;
  wire [23:23]reg2_Data;
  wire res_Forward2;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__6_0 [4]),
        .A1(\Using_FPGA.Native_i_2__6_0 [3]),
        .A2(\Using_FPGA.Native_i_2__6_0 [2]),
        .A3(\Using_FPGA.Native_i_2__6_0 [1]),
        .A4(\Using_FPGA.Native_i_2__6_0 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
  LUT5 #(
    .INIT(32'hFECE3202)) 
    \Using_FPGA.Native_i_2__6 
       (.I0(reg2_Data),
        .I1(exception_kind),
        .I2(res_Forward2),
        .I3(ex_Result),
        .I4(Interrupt_Address),
        .O(op2_Reg__7));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module block_design_microblaze_0_0_MB_RAM32X1D_554
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_BitField.Gen_Bits[22].mem_Rd_reg[22] ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_BitField.Gen_Bits[22].mem_Rd_reg[22] ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_BitField.Gen_Bits[22].mem_Rd_reg[22] ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_BitField.Gen_Bits[22].mem_Rd_reg[22] [4]),
        .A1(\Using_BitField.Gen_Bits[22].mem_Rd_reg[22] [3]),
        .A2(\Using_BitField.Gen_Bits[22].mem_Rd_reg[22] [2]),
        .A3(\Using_BitField.Gen_Bits[22].mem_Rd_reg[22] [1]),
        .A4(\Using_BitField.Gen_Bits[22].mem_Rd_reg[22] [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module block_design_microblaze_0_0_MB_RAM32X1D_555
   (op2_Reg__8,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__7_0 ,
    imm_Value,
    exception_kind,
    res_Forward2,
    Interrupt_Address);
  output op2_Reg__8;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__7_0 ;
  input [4:0]imm_Value;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]Interrupt_Address;

  wire Clk;
  wire [0:0]Interrupt_Address;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__7_0 ;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [4:0]imm_Value;
  wire op2_Reg__8;
  wire [22:22]reg2_Data;
  wire res_Forward2;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__7_0 [4]),
        .A1(\Using_FPGA.Native_i_2__7_0 [3]),
        .A2(\Using_FPGA.Native_i_2__7_0 [2]),
        .A3(\Using_FPGA.Native_i_2__7_0 [1]),
        .A4(\Using_FPGA.Native_i_2__7_0 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
  LUT5 #(
    .INIT(32'hFECE3202)) 
    \Using_FPGA.Native_i_2__7 
       (.I0(reg2_Data),
        .I1(exception_kind),
        .I2(res_Forward2),
        .I3(ex_Result),
        .I4(Interrupt_Address),
        .O(op2_Reg__8));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module block_design_microblaze_0_0_MB_RAM32X1D_556
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_BitField.Gen_Bits[21].mem_Rd_reg[21] ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_BitField.Gen_Bits[21].mem_Rd_reg[21] ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_BitField.Gen_Bits[21].mem_Rd_reg[21] ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_BitField.Gen_Bits[21].mem_Rd_reg[21] [4]),
        .A1(\Using_BitField.Gen_Bits[21].mem_Rd_reg[21] [3]),
        .A2(\Using_BitField.Gen_Bits[21].mem_Rd_reg[21] [2]),
        .A3(\Using_BitField.Gen_Bits[21].mem_Rd_reg[21] [1]),
        .A4(\Using_BitField.Gen_Bits[21].mem_Rd_reg[21] [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module block_design_microblaze_0_0_MB_RAM32X1D_557
   (op2_Reg__9,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__8_0 ,
    imm_Value,
    exception_kind,
    res_Forward2,
    Interrupt_Address);
  output op2_Reg__9;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__8_0 ;
  input [4:0]imm_Value;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]Interrupt_Address;

  wire Clk;
  wire [0:0]Interrupt_Address;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__8_0 ;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [4:0]imm_Value;
  wire op2_Reg__9;
  wire [21:21]reg2_Data;
  wire res_Forward2;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__8_0 [4]),
        .A1(\Using_FPGA.Native_i_2__8_0 [3]),
        .A2(\Using_FPGA.Native_i_2__8_0 [2]),
        .A3(\Using_FPGA.Native_i_2__8_0 [1]),
        .A4(\Using_FPGA.Native_i_2__8_0 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
  LUT5 #(
    .INIT(32'hFECE3202)) 
    \Using_FPGA.Native_i_2__8 
       (.I0(reg2_Data),
        .I1(exception_kind),
        .I2(res_Forward2),
        .I3(ex_Result),
        .I4(Interrupt_Address),
        .O(op2_Reg__9));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module block_design_microblaze_0_0_MB_RAM32X1D_558
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_BitField.Gen_Bits[20].mem_Rd_reg[20] ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_BitField.Gen_Bits[20].mem_Rd_reg[20] ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_BitField.Gen_Bits[20].mem_Rd_reg[20] ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_BitField.Gen_Bits[20].mem_Rd_reg[20] [4]),
        .A1(\Using_BitField.Gen_Bits[20].mem_Rd_reg[20] [3]),
        .A2(\Using_BitField.Gen_Bits[20].mem_Rd_reg[20] [2]),
        .A3(\Using_BitField.Gen_Bits[20].mem_Rd_reg[20] [1]),
        .A4(\Using_BitField.Gen_Bits[20].mem_Rd_reg[20] [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module block_design_microblaze_0_0_MB_RAM32X1D_559
   (op2_Reg__10,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__9_0 ,
    imm_Value,
    exception_kind,
    res_Forward2,
    Interrupt_Address);
  output op2_Reg__10;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__9_0 ;
  input [4:0]imm_Value;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]Interrupt_Address;

  wire Clk;
  wire [0:0]Interrupt_Address;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__9_0 ;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [4:0]imm_Value;
  wire op2_Reg__10;
  wire [20:20]reg2_Data;
  wire res_Forward2;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__9_0 [4]),
        .A1(\Using_FPGA.Native_i_2__9_0 [3]),
        .A2(\Using_FPGA.Native_i_2__9_0 [2]),
        .A3(\Using_FPGA.Native_i_2__9_0 [1]),
        .A4(\Using_FPGA.Native_i_2__9_0 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
  LUT5 #(
    .INIT(32'hFECE3202)) 
    \Using_FPGA.Native_i_2__9 
       (.I0(reg2_Data),
        .I1(exception_kind),
        .I2(res_Forward2),
        .I3(ex_Result),
        .I4(Interrupt_Address),
        .O(op2_Reg__10));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module block_design_microblaze_0_0_MB_RAM32X1D_560
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_BitField.Gen_Bits[1].mem_Rd_reg[1] ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_BitField.Gen_Bits[1].mem_Rd_reg[1] ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_BitField.Gen_Bits[1].mem_Rd_reg[1] ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_BitField.Gen_Bits[1].mem_Rd_reg[1] [4]),
        .A1(\Using_BitField.Gen_Bits[1].mem_Rd_reg[1] [3]),
        .A2(\Using_BitField.Gen_Bits[1].mem_Rd_reg[1] [2]),
        .A3(\Using_BitField.Gen_Bits[1].mem_Rd_reg[1] [1]),
        .A4(\Using_BitField.Gen_Bits[1].mem_Rd_reg[1] [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module block_design_microblaze_0_0_MB_RAM32X1D_561
   (op2_Reg__29,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__28_0 ,
    imm_Value,
    exception_kind,
    res_Forward2,
    Interrupt_Address);
  output op2_Reg__29;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__28_0 ;
  input [4:0]imm_Value;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]Interrupt_Address;

  wire Clk;
  wire [0:0]Interrupt_Address;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__28_0 ;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [4:0]imm_Value;
  wire op2_Reg__29;
  wire [1:1]reg2_Data;
  wire res_Forward2;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__28_0 [4]),
        .A1(\Using_FPGA.Native_i_2__28_0 [3]),
        .A2(\Using_FPGA.Native_i_2__28_0 [2]),
        .A3(\Using_FPGA.Native_i_2__28_0 [1]),
        .A4(\Using_FPGA.Native_i_2__28_0 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
  LUT5 #(
    .INIT(32'hFECE3202)) 
    \Using_FPGA.Native_i_2__28 
       (.I0(reg2_Data),
        .I1(exception_kind),
        .I2(res_Forward2),
        .I3(ex_Result),
        .I4(Interrupt_Address),
        .O(op2_Reg__29));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module block_design_microblaze_0_0_MB_RAM32X1D_562
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_BitField.Gen_Bits[19].mem_Rd_reg[19] ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_BitField.Gen_Bits[19].mem_Rd_reg[19] ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_BitField.Gen_Bits[19].mem_Rd_reg[19] ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_BitField.Gen_Bits[19].mem_Rd_reg[19] [4]),
        .A1(\Using_BitField.Gen_Bits[19].mem_Rd_reg[19] [3]),
        .A2(\Using_BitField.Gen_Bits[19].mem_Rd_reg[19] [2]),
        .A3(\Using_BitField.Gen_Bits[19].mem_Rd_reg[19] [1]),
        .A4(\Using_BitField.Gen_Bits[19].mem_Rd_reg[19] [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module block_design_microblaze_0_0_MB_RAM32X1D_563
   (op2_Reg__11,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__10_0 ,
    imm_Value,
    exception_kind,
    res_Forward2,
    Interrupt_Address);
  output op2_Reg__11;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__10_0 ;
  input [4:0]imm_Value;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]Interrupt_Address;

  wire Clk;
  wire [0:0]Interrupt_Address;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__10_0 ;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [4:0]imm_Value;
  wire op2_Reg__11;
  wire [19:19]reg2_Data;
  wire res_Forward2;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__10_0 [4]),
        .A1(\Using_FPGA.Native_i_2__10_0 [3]),
        .A2(\Using_FPGA.Native_i_2__10_0 [2]),
        .A3(\Using_FPGA.Native_i_2__10_0 [1]),
        .A4(\Using_FPGA.Native_i_2__10_0 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
  LUT5 #(
    .INIT(32'hFECE3202)) 
    \Using_FPGA.Native_i_2__10 
       (.I0(reg2_Data),
        .I1(exception_kind),
        .I2(res_Forward2),
        .I3(ex_Result),
        .I4(Interrupt_Address),
        .O(op2_Reg__11));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module block_design_microblaze_0_0_MB_RAM32X1D_564
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_BitField.Gen_Bits[18].mem_Rd_reg[18] ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_BitField.Gen_Bits[18].mem_Rd_reg[18] ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_BitField.Gen_Bits[18].mem_Rd_reg[18] ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_BitField.Gen_Bits[18].mem_Rd_reg[18] [4]),
        .A1(\Using_BitField.Gen_Bits[18].mem_Rd_reg[18] [3]),
        .A2(\Using_BitField.Gen_Bits[18].mem_Rd_reg[18] [2]),
        .A3(\Using_BitField.Gen_Bits[18].mem_Rd_reg[18] [1]),
        .A4(\Using_BitField.Gen_Bits[18].mem_Rd_reg[18] [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module block_design_microblaze_0_0_MB_RAM32X1D_565
   (op2_Reg__12,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__11_0 ,
    imm_Value,
    exception_kind,
    res_Forward2,
    Interrupt_Address);
  output op2_Reg__12;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__11_0 ;
  input [4:0]imm_Value;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]Interrupt_Address;

  wire Clk;
  wire [0:0]Interrupt_Address;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__11_0 ;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [4:0]imm_Value;
  wire op2_Reg__12;
  wire [18:18]reg2_Data;
  wire res_Forward2;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__11_0 [4]),
        .A1(\Using_FPGA.Native_i_2__11_0 [3]),
        .A2(\Using_FPGA.Native_i_2__11_0 [2]),
        .A3(\Using_FPGA.Native_i_2__11_0 [1]),
        .A4(\Using_FPGA.Native_i_2__11_0 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
  LUT5 #(
    .INIT(32'hFECE3202)) 
    \Using_FPGA.Native_i_2__11 
       (.I0(reg2_Data),
        .I1(exception_kind),
        .I2(res_Forward2),
        .I3(ex_Result),
        .I4(Interrupt_Address),
        .O(op2_Reg__12));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module block_design_microblaze_0_0_MB_RAM32X1D_566
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_BitField.Gen_Bits[17].mem_Rd_reg[17] ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_BitField.Gen_Bits[17].mem_Rd_reg[17] ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_BitField.Gen_Bits[17].mem_Rd_reg[17] ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_BitField.Gen_Bits[17].mem_Rd_reg[17] [4]),
        .A1(\Using_BitField.Gen_Bits[17].mem_Rd_reg[17] [3]),
        .A2(\Using_BitField.Gen_Bits[17].mem_Rd_reg[17] [2]),
        .A3(\Using_BitField.Gen_Bits[17].mem_Rd_reg[17] [1]),
        .A4(\Using_BitField.Gen_Bits[17].mem_Rd_reg[17] [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module block_design_microblaze_0_0_MB_RAM32X1D_567
   (op2_Reg__13,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__12_0 ,
    imm_Value,
    exception_kind,
    res_Forward2,
    Interrupt_Address);
  output op2_Reg__13;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__12_0 ;
  input [4:0]imm_Value;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]Interrupt_Address;

  wire Clk;
  wire [0:0]Interrupt_Address;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__12_0 ;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [4:0]imm_Value;
  wire op2_Reg__13;
  wire [17:17]reg2_Data;
  wire res_Forward2;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__12_0 [4]),
        .A1(\Using_FPGA.Native_i_2__12_0 [3]),
        .A2(\Using_FPGA.Native_i_2__12_0 [2]),
        .A3(\Using_FPGA.Native_i_2__12_0 [1]),
        .A4(\Using_FPGA.Native_i_2__12_0 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
  LUT5 #(
    .INIT(32'hFECE3202)) 
    \Using_FPGA.Native_i_2__12 
       (.I0(reg2_Data),
        .I1(exception_kind),
        .I2(res_Forward2),
        .I3(ex_Result),
        .I4(Interrupt_Address),
        .O(op2_Reg__13));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module block_design_microblaze_0_0_MB_RAM32X1D_568
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_BitField.Gen_Bits[16].mem_Rd_reg[16] ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_BitField.Gen_Bits[16].mem_Rd_reg[16] ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_BitField.Gen_Bits[16].mem_Rd_reg[16] ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_BitField.Gen_Bits[16].mem_Rd_reg[16] [4]),
        .A1(\Using_BitField.Gen_Bits[16].mem_Rd_reg[16] [3]),
        .A2(\Using_BitField.Gen_Bits[16].mem_Rd_reg[16] [2]),
        .A3(\Using_BitField.Gen_Bits[16].mem_Rd_reg[16] [1]),
        .A4(\Using_BitField.Gen_Bits[16].mem_Rd_reg[16] [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module block_design_microblaze_0_0_MB_RAM32X1D_569
   (op2_Reg__14,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__13_0 ,
    imm_Value,
    exception_kind,
    res_Forward2,
    Interrupt_Address);
  output op2_Reg__14;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__13_0 ;
  input [4:0]imm_Value;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]Interrupt_Address;

  wire Clk;
  wire [0:0]Interrupt_Address;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__13_0 ;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [4:0]imm_Value;
  wire op2_Reg__14;
  wire [16:16]reg2_Data;
  wire res_Forward2;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__13_0 [4]),
        .A1(\Using_FPGA.Native_i_2__13_0 [3]),
        .A2(\Using_FPGA.Native_i_2__13_0 [2]),
        .A3(\Using_FPGA.Native_i_2__13_0 [1]),
        .A4(\Using_FPGA.Native_i_2__13_0 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
  LUT5 #(
    .INIT(32'hFECE3202)) 
    \Using_FPGA.Native_i_2__13 
       (.I0(reg2_Data),
        .I1(exception_kind),
        .I2(res_Forward2),
        .I3(ex_Result),
        .I4(Interrupt_Address),
        .O(op2_Reg__14));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module block_design_microblaze_0_0_MB_RAM32X1D_570
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_BitField.Gen_Bits[15].mem_Rd_reg[15] ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_BitField.Gen_Bits[15].mem_Rd_reg[15] ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_BitField.Gen_Bits[15].mem_Rd_reg[15] ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_BitField.Gen_Bits[15].mem_Rd_reg[15] [4]),
        .A1(\Using_BitField.Gen_Bits[15].mem_Rd_reg[15] [3]),
        .A2(\Using_BitField.Gen_Bits[15].mem_Rd_reg[15] [2]),
        .A3(\Using_BitField.Gen_Bits[15].mem_Rd_reg[15] [1]),
        .A4(\Using_BitField.Gen_Bits[15].mem_Rd_reg[15] [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module block_design_microblaze_0_0_MB_RAM32X1D_571
   (op2_Reg__15,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__14_0 ,
    imm_Value,
    exception_kind,
    res_Forward2,
    Interrupt_Address);
  output op2_Reg__15;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__14_0 ;
  input [4:0]imm_Value;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]Interrupt_Address;

  wire Clk;
  wire [0:0]Interrupt_Address;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__14_0 ;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [4:0]imm_Value;
  wire op2_Reg__15;
  wire [15:15]reg2_Data;
  wire res_Forward2;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__14_0 [4]),
        .A1(\Using_FPGA.Native_i_2__14_0 [3]),
        .A2(\Using_FPGA.Native_i_2__14_0 [2]),
        .A3(\Using_FPGA.Native_i_2__14_0 [1]),
        .A4(\Using_FPGA.Native_i_2__14_0 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
  LUT5 #(
    .INIT(32'hFECE3202)) 
    \Using_FPGA.Native_i_2__14 
       (.I0(reg2_Data),
        .I1(exception_kind),
        .I2(res_Forward2),
        .I3(ex_Result),
        .I4(Interrupt_Address),
        .O(op2_Reg__15));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module block_design_microblaze_0_0_MB_RAM32X1D_572
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_BitField.Gen_Bits[14].mem_Rd_reg[14] ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_BitField.Gen_Bits[14].mem_Rd_reg[14] ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_BitField.Gen_Bits[14].mem_Rd_reg[14] ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_BitField.Gen_Bits[14].mem_Rd_reg[14] [4]),
        .A1(\Using_BitField.Gen_Bits[14].mem_Rd_reg[14] [3]),
        .A2(\Using_BitField.Gen_Bits[14].mem_Rd_reg[14] [2]),
        .A3(\Using_BitField.Gen_Bits[14].mem_Rd_reg[14] [1]),
        .A4(\Using_BitField.Gen_Bits[14].mem_Rd_reg[14] [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module block_design_microblaze_0_0_MB_RAM32X1D_573
   (op2_Reg__16,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__15_0 ,
    imm_Value,
    exception_kind,
    res_Forward2,
    Interrupt_Address);
  output op2_Reg__16;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__15_0 ;
  input [4:0]imm_Value;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]Interrupt_Address;

  wire Clk;
  wire [0:0]Interrupt_Address;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__15_0 ;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [4:0]imm_Value;
  wire op2_Reg__16;
  wire [14:14]reg2_Data;
  wire res_Forward2;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__15_0 [4]),
        .A1(\Using_FPGA.Native_i_2__15_0 [3]),
        .A2(\Using_FPGA.Native_i_2__15_0 [2]),
        .A3(\Using_FPGA.Native_i_2__15_0 [1]),
        .A4(\Using_FPGA.Native_i_2__15_0 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
  LUT5 #(
    .INIT(32'hFECE3202)) 
    \Using_FPGA.Native_i_2__15 
       (.I0(reg2_Data),
        .I1(exception_kind),
        .I2(res_Forward2),
        .I3(ex_Result),
        .I4(Interrupt_Address),
        .O(op2_Reg__16));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module block_design_microblaze_0_0_MB_RAM32X1D_574
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_BitField.Gen_Bits[13].mem_Rd_reg[13] ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_BitField.Gen_Bits[13].mem_Rd_reg[13] ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_BitField.Gen_Bits[13].mem_Rd_reg[13] ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_BitField.Gen_Bits[13].mem_Rd_reg[13] [4]),
        .A1(\Using_BitField.Gen_Bits[13].mem_Rd_reg[13] [3]),
        .A2(\Using_BitField.Gen_Bits[13].mem_Rd_reg[13] [2]),
        .A3(\Using_BitField.Gen_Bits[13].mem_Rd_reg[13] [1]),
        .A4(\Using_BitField.Gen_Bits[13].mem_Rd_reg[13] [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module block_design_microblaze_0_0_MB_RAM32X1D_575
   (op2_Reg__17,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__16_0 ,
    imm_Value,
    exception_kind,
    res_Forward2,
    Interrupt_Address);
  output op2_Reg__17;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__16_0 ;
  input [4:0]imm_Value;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]Interrupt_Address;

  wire Clk;
  wire [0:0]Interrupt_Address;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__16_0 ;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [4:0]imm_Value;
  wire op2_Reg__17;
  wire [13:13]reg2_Data;
  wire res_Forward2;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__16_0 [4]),
        .A1(\Using_FPGA.Native_i_2__16_0 [3]),
        .A2(\Using_FPGA.Native_i_2__16_0 [2]),
        .A3(\Using_FPGA.Native_i_2__16_0 [1]),
        .A4(\Using_FPGA.Native_i_2__16_0 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
  LUT5 #(
    .INIT(32'hFECE3202)) 
    \Using_FPGA.Native_i_2__16 
       (.I0(reg2_Data),
        .I1(exception_kind),
        .I2(res_Forward2),
        .I3(ex_Result),
        .I4(Interrupt_Address),
        .O(op2_Reg__17));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module block_design_microblaze_0_0_MB_RAM32X1D_576
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_BitField.Gen_Bits[12].mem_Rd_reg[12] ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_BitField.Gen_Bits[12].mem_Rd_reg[12] ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_BitField.Gen_Bits[12].mem_Rd_reg[12] ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_BitField.Gen_Bits[12].mem_Rd_reg[12] [4]),
        .A1(\Using_BitField.Gen_Bits[12].mem_Rd_reg[12] [3]),
        .A2(\Using_BitField.Gen_Bits[12].mem_Rd_reg[12] [2]),
        .A3(\Using_BitField.Gen_Bits[12].mem_Rd_reg[12] [1]),
        .A4(\Using_BitField.Gen_Bits[12].mem_Rd_reg[12] [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module block_design_microblaze_0_0_MB_RAM32X1D_577
   (op2_Reg__18,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__17_0 ,
    imm_Value,
    exception_kind,
    res_Forward2,
    Interrupt_Address);
  output op2_Reg__18;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__17_0 ;
  input [4:0]imm_Value;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]Interrupt_Address;

  wire Clk;
  wire [0:0]Interrupt_Address;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__17_0 ;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [4:0]imm_Value;
  wire op2_Reg__18;
  wire [12:12]reg2_Data;
  wire res_Forward2;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__17_0 [4]),
        .A1(\Using_FPGA.Native_i_2__17_0 [3]),
        .A2(\Using_FPGA.Native_i_2__17_0 [2]),
        .A3(\Using_FPGA.Native_i_2__17_0 [1]),
        .A4(\Using_FPGA.Native_i_2__17_0 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
  LUT5 #(
    .INIT(32'hFECE3202)) 
    \Using_FPGA.Native_i_2__17 
       (.I0(reg2_Data),
        .I1(exception_kind),
        .I2(res_Forward2),
        .I3(ex_Result),
        .I4(Interrupt_Address),
        .O(op2_Reg__18));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module block_design_microblaze_0_0_MB_RAM32X1D_578
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_BitField.Gen_Bits[11].mem_Rd_reg[11] ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_BitField.Gen_Bits[11].mem_Rd_reg[11] ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_BitField.Gen_Bits[11].mem_Rd_reg[11] ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_BitField.Gen_Bits[11].mem_Rd_reg[11] [4]),
        .A1(\Using_BitField.Gen_Bits[11].mem_Rd_reg[11] [3]),
        .A2(\Using_BitField.Gen_Bits[11].mem_Rd_reg[11] [2]),
        .A3(\Using_BitField.Gen_Bits[11].mem_Rd_reg[11] [1]),
        .A4(\Using_BitField.Gen_Bits[11].mem_Rd_reg[11] [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module block_design_microblaze_0_0_MB_RAM32X1D_579
   (op2_Reg__19,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__18_0 ,
    imm_Value,
    exception_kind,
    res_Forward2,
    Interrupt_Address);
  output op2_Reg__19;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__18_0 ;
  input [4:0]imm_Value;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]Interrupt_Address;

  wire Clk;
  wire [0:0]Interrupt_Address;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__18_0 ;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [4:0]imm_Value;
  wire op2_Reg__19;
  wire [11:11]reg2_Data;
  wire res_Forward2;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__18_0 [4]),
        .A1(\Using_FPGA.Native_i_2__18_0 [3]),
        .A2(\Using_FPGA.Native_i_2__18_0 [2]),
        .A3(\Using_FPGA.Native_i_2__18_0 [1]),
        .A4(\Using_FPGA.Native_i_2__18_0 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
  LUT5 #(
    .INIT(32'hFECE3202)) 
    \Using_FPGA.Native_i_2__18 
       (.I0(reg2_Data),
        .I1(exception_kind),
        .I2(res_Forward2),
        .I3(ex_Result),
        .I4(Interrupt_Address),
        .O(op2_Reg__19));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module block_design_microblaze_0_0_MB_RAM32X1D_580
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_BitField.Gen_Bits[10].mem_Rd_reg[10] ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_BitField.Gen_Bits[10].mem_Rd_reg[10] ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_BitField.Gen_Bits[10].mem_Rd_reg[10] ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_BitField.Gen_Bits[10].mem_Rd_reg[10] [4]),
        .A1(\Using_BitField.Gen_Bits[10].mem_Rd_reg[10] [3]),
        .A2(\Using_BitField.Gen_Bits[10].mem_Rd_reg[10] [2]),
        .A3(\Using_BitField.Gen_Bits[10].mem_Rd_reg[10] [1]),
        .A4(\Using_BitField.Gen_Bits[10].mem_Rd_reg[10] [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module block_design_microblaze_0_0_MB_RAM32X1D_581
   (op2_Reg__20,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__19_0 ,
    imm_Value,
    exception_kind,
    res_Forward2,
    Interrupt_Address);
  output op2_Reg__20;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__19_0 ;
  input [4:0]imm_Value;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]Interrupt_Address;

  wire Clk;
  wire [0:0]Interrupt_Address;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__19_0 ;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [4:0]imm_Value;
  wire op2_Reg__20;
  wire [10:10]reg2_Data;
  wire res_Forward2;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__19_0 [4]),
        .A1(\Using_FPGA.Native_i_2__19_0 [3]),
        .A2(\Using_FPGA.Native_i_2__19_0 [2]),
        .A3(\Using_FPGA.Native_i_2__19_0 [1]),
        .A4(\Using_FPGA.Native_i_2__19_0 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
  LUT5 #(
    .INIT(32'hFECE3202)) 
    \Using_FPGA.Native_i_2__19 
       (.I0(reg2_Data),
        .I1(exception_kind),
        .I2(res_Forward2),
        .I3(ex_Result),
        .I4(Interrupt_Address),
        .O(op2_Reg__20));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module block_design_microblaze_0_0_MB_RAM32X1D_582
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_BitField.Gen_Bits[0].mem_Rd_reg[0] ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_BitField.Gen_Bits[0].mem_Rd_reg[0] ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_BitField.Gen_Bits[0].mem_Rd_reg[0] ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_BitField.Gen_Bits[0].mem_Rd_reg[0] [4]),
        .A1(\Using_BitField.Gen_Bits[0].mem_Rd_reg[0] [3]),
        .A2(\Using_BitField.Gen_Bits[0].mem_Rd_reg[0] [2]),
        .A3(\Using_BitField.Gen_Bits[0].mem_Rd_reg[0] [1]),
        .A4(\Using_BitField.Gen_Bits[0].mem_Rd_reg[0] [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module block_design_microblaze_0_0_MB_RAM32X1D_583
   (op2_Reg__30,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__29_0 ,
    imm_Value,
    exception_kind,
    res_Forward2,
    Interrupt_Address);
  output op2_Reg__30;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__29_0 ;
  input [4:0]imm_Value;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]Interrupt_Address;

  wire Clk;
  wire [0:0]Interrupt_Address;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__29_0 ;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [4:0]imm_Value;
  wire op2_Reg__30;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  (* box_type = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__29_0 [4]),
        .A1(\Using_FPGA.Native_i_2__29_0 [3]),
        .A2(\Using_FPGA.Native_i_2__29_0 [2]),
        .A3(\Using_FPGA.Native_i_2__29_0 [1]),
        .A4(\Using_FPGA.Native_i_2__29_0 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
  LUT5 #(
    .INIT(32'hFECE3202)) 
    \Using_FPGA.Native_i_2__29 
       (.I0(reg2_Data),
        .I1(exception_kind),
        .I2(res_Forward2),
        .I3(ex_Result),
        .I4(Interrupt_Address),
        .O(op2_Reg__30));
endmodule

module block_design_microblaze_0_0_MB_RAMB36
   (DATA_OUTA,
    DATA_OUTB,
    Clk,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 );
  output [35:0]DATA_OUTA;
  output [35:0]DATA_OUTB;
  input Clk;
  input [8:0]Q;
  input [71:0]\Using_FPGA.Native_0 ;
  input [3:0]\Using_FPGA.Native_1 ;

  wire Clk;
  wire [35:0]DATA_OUTA;
  wire [35:0]DATA_OUTB;
  wire [8:0]Q;
  wire [71:0]\Using_FPGA.Native_0 ;
  wire [3:0]\Using_FPGA.Native_1 ;
  wire \NLW_Using_FPGA.Native_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_Using_FPGA.Native_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_Using_FPGA.Native_DBITERR_UNCONNECTED ;
  wire \NLW_Using_FPGA.Native_SBITERR_UNCONNECTED ;
  wire [7:0]\NLW_Using_FPGA.Native_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_Using_FPGA.Native_RDADDRECC_UNCONNECTED ;

  (* box_type = "PRIMITIVE" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(36),
    .READ_WIDTH_B(36),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("NONE"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("READ_FIRST"),
    .WRITE_MODE_B("READ_FIRST"),
    .WRITE_WIDTH_A(36),
    .WRITE_WIDTH_B(36)) 
    \Using_FPGA.Native 
       (.ADDRARDADDR({1'b1,1'b0,Q,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .ADDRBWRADDR({1'b1,1'b1,Q,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_Using_FPGA.Native_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_Using_FPGA.Native_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(Clk),
        .CLKBWRCLK(Clk),
        .DBITERR(\NLW_Using_FPGA.Native_DBITERR_UNCONNECTED ),
        .DIADI({\Using_FPGA.Native_0 [71:64],\Using_FPGA.Native_0 [62:55],\Using_FPGA.Native_0 [53:46],\Using_FPGA.Native_0 [44:37]}),
        .DIBDI({\Using_FPGA.Native_0 [35:28],\Using_FPGA.Native_0 [26:19],\Using_FPGA.Native_0 [17:10],\Using_FPGA.Native_0 [8:1]}),
        .DIPADIP({\Using_FPGA.Native_0 [63],\Using_FPGA.Native_0 [54],\Using_FPGA.Native_0 [45],\Using_FPGA.Native_0 [36]}),
        .DIPBDIP({\Using_FPGA.Native_0 [27],\Using_FPGA.Native_0 [18],\Using_FPGA.Native_0 [9],\Using_FPGA.Native_0 [0]}),
        .DOADO(DATA_OUTA[35:4]),
        .DOBDO(DATA_OUTB[35:4]),
        .DOPADOP(DATA_OUTA[3:0]),
        .DOPBDOP(DATA_OUTB[3:0]),
        .ECCPARITY(\NLW_Using_FPGA.Native_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(1'b1),
        .ENBWREN(1'b1),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_Using_FPGA.Native_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b1),
        .REGCEB(1'b1),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_Using_FPGA.Native_SBITERR_UNCONNECTED ),
        .WEA({\Using_FPGA.Native_1 [3],\Using_FPGA.Native_1 [3:2],\Using_FPGA.Native_1 [2]}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,\Using_FPGA.Native_1 [1],\Using_FPGA.Native_1 [1:0],\Using_FPGA.Native_1 [0]}));
endmodule

(* ORIG_REF_NAME = "MB_RAMB36" *) 
module block_design_microblaze_0_0_MB_RAMB36_60
   (D,
    \Embedded_Trace.rddata_reg[0] ,
    \Embedded_Trace.rddata_reg[0]_0 ,
    Clk,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Embedded_Trace.rdaddr_reg );
  output [17:0]D;
  input [35:0]\Embedded_Trace.rddata_reg[0] ;
  input [35:0]\Embedded_Trace.rddata_reg[0]_0 ;
  input Clk;
  input [8:0]Q;
  input [71:0]\Using_FPGA.Native_0 ;
  input [3:0]\Using_FPGA.Native_1 ;
  input [2:0]\Embedded_Trace.rdaddr_reg ;

  wire Clk;
  wire [17:0]D;
  wire [32:71]DATA_OUTA;
  wire [32:71]DATA_OUTB;
  wire [2:0]\Embedded_Trace.rdaddr_reg ;
  wire \Embedded_Trace.rddata[0]_i_3_n_0 ;
  wire \Embedded_Trace.rddata[0]_i_4_n_0 ;
  wire \Embedded_Trace.rddata[10]_i_2_n_0 ;
  wire \Embedded_Trace.rddata[10]_i_3_n_0 ;
  wire \Embedded_Trace.rddata[11]_i_2_n_0 ;
  wire \Embedded_Trace.rddata[11]_i_3_n_0 ;
  wire \Embedded_Trace.rddata[12]_i_2_n_0 ;
  wire \Embedded_Trace.rddata[12]_i_3_n_0 ;
  wire \Embedded_Trace.rddata[13]_i_2_n_0 ;
  wire \Embedded_Trace.rddata[13]_i_3_n_0 ;
  wire \Embedded_Trace.rddata[14]_i_2_n_0 ;
  wire \Embedded_Trace.rddata[14]_i_3_n_0 ;
  wire \Embedded_Trace.rddata[15]_i_2_n_0 ;
  wire \Embedded_Trace.rddata[15]_i_3_n_0 ;
  wire \Embedded_Trace.rddata[16]_i_2_n_0 ;
  wire \Embedded_Trace.rddata[16]_i_3_n_0 ;
  wire \Embedded_Trace.rddata[17]_i_2_n_0 ;
  wire \Embedded_Trace.rddata[17]_i_3_n_0 ;
  wire \Embedded_Trace.rddata[1]_i_2_n_0 ;
  wire \Embedded_Trace.rddata[1]_i_3_n_0 ;
  wire \Embedded_Trace.rddata[2]_i_2_n_0 ;
  wire \Embedded_Trace.rddata[2]_i_3_n_0 ;
  wire \Embedded_Trace.rddata[3]_i_2_n_0 ;
  wire \Embedded_Trace.rddata[3]_i_3_n_0 ;
  wire \Embedded_Trace.rddata[4]_i_2_n_0 ;
  wire \Embedded_Trace.rddata[4]_i_3_n_0 ;
  wire \Embedded_Trace.rddata[5]_i_2_n_0 ;
  wire \Embedded_Trace.rddata[5]_i_3_n_0 ;
  wire \Embedded_Trace.rddata[6]_i_2_n_0 ;
  wire \Embedded_Trace.rddata[6]_i_3_n_0 ;
  wire \Embedded_Trace.rddata[7]_i_2_n_0 ;
  wire \Embedded_Trace.rddata[7]_i_3_n_0 ;
  wire \Embedded_Trace.rddata[8]_i_2_n_0 ;
  wire \Embedded_Trace.rddata[8]_i_3_n_0 ;
  wire \Embedded_Trace.rddata[9]_i_2_n_0 ;
  wire \Embedded_Trace.rddata[9]_i_3_n_0 ;
  wire [35:0]\Embedded_Trace.rddata_reg[0] ;
  wire [35:0]\Embedded_Trace.rddata_reg[0]_0 ;
  wire [8:0]Q;
  wire [71:0]\Using_FPGA.Native_0 ;
  wire [3:0]\Using_FPGA.Native_1 ;
  wire \NLW_Using_FPGA.Native_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_Using_FPGA.Native_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_Using_FPGA.Native_DBITERR_UNCONNECTED ;
  wire \NLW_Using_FPGA.Native_SBITERR_UNCONNECTED ;
  wire [7:0]\NLW_Using_FPGA.Native_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_Using_FPGA.Native_RDADDRECC_UNCONNECTED ;

  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.rddata[0]_i_3 
       (.I0(DATA_OUTA[48]),
        .I1(DATA_OUTA[32]),
        .I2(\Embedded_Trace.rdaddr_reg [1]),
        .I3(\Embedded_Trace.rddata_reg[0] [19]),
        .I4(\Embedded_Trace.rdaddr_reg [0]),
        .I5(\Embedded_Trace.rddata_reg[0] [35]),
        .O(\Embedded_Trace.rddata[0]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.rddata[0]_i_4 
       (.I0(DATA_OUTB[48]),
        .I1(DATA_OUTB[32]),
        .I2(\Embedded_Trace.rdaddr_reg [1]),
        .I3(\Embedded_Trace.rddata_reg[0]_0 [19]),
        .I4(\Embedded_Trace.rdaddr_reg [0]),
        .I5(\Embedded_Trace.rddata_reg[0]_0 [35]),
        .O(\Embedded_Trace.rddata[0]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.rddata[10]_i_2 
       (.I0(DATA_OUTA[57]),
        .I1(DATA_OUTA[41]),
        .I2(\Embedded_Trace.rdaddr_reg [1]),
        .I3(\Embedded_Trace.rddata_reg[0] [10]),
        .I4(\Embedded_Trace.rdaddr_reg [0]),
        .I5(\Embedded_Trace.rddata_reg[0] [26]),
        .O(\Embedded_Trace.rddata[10]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.rddata[10]_i_3 
       (.I0(DATA_OUTB[57]),
        .I1(DATA_OUTB[41]),
        .I2(\Embedded_Trace.rdaddr_reg [1]),
        .I3(\Embedded_Trace.rddata_reg[0]_0 [10]),
        .I4(\Embedded_Trace.rdaddr_reg [0]),
        .I5(\Embedded_Trace.rddata_reg[0]_0 [26]),
        .O(\Embedded_Trace.rddata[10]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.rddata[11]_i_2 
       (.I0(DATA_OUTA[58]),
        .I1(DATA_OUTA[42]),
        .I2(\Embedded_Trace.rdaddr_reg [1]),
        .I3(\Embedded_Trace.rddata_reg[0] [9]),
        .I4(\Embedded_Trace.rdaddr_reg [0]),
        .I5(\Embedded_Trace.rddata_reg[0] [25]),
        .O(\Embedded_Trace.rddata[11]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.rddata[11]_i_3 
       (.I0(DATA_OUTB[58]),
        .I1(DATA_OUTB[42]),
        .I2(\Embedded_Trace.rdaddr_reg [1]),
        .I3(\Embedded_Trace.rddata_reg[0]_0 [9]),
        .I4(\Embedded_Trace.rdaddr_reg [0]),
        .I5(\Embedded_Trace.rddata_reg[0]_0 [25]),
        .O(\Embedded_Trace.rddata[11]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.rddata[12]_i_2 
       (.I0(DATA_OUTA[59]),
        .I1(DATA_OUTA[43]),
        .I2(\Embedded_Trace.rdaddr_reg [1]),
        .I3(\Embedded_Trace.rddata_reg[0] [8]),
        .I4(\Embedded_Trace.rdaddr_reg [0]),
        .I5(\Embedded_Trace.rddata_reg[0] [24]),
        .O(\Embedded_Trace.rddata[12]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.rddata[12]_i_3 
       (.I0(DATA_OUTB[59]),
        .I1(DATA_OUTB[43]),
        .I2(\Embedded_Trace.rdaddr_reg [1]),
        .I3(\Embedded_Trace.rddata_reg[0]_0 [8]),
        .I4(\Embedded_Trace.rdaddr_reg [0]),
        .I5(\Embedded_Trace.rddata_reg[0]_0 [24]),
        .O(\Embedded_Trace.rddata[12]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.rddata[13]_i_2 
       (.I0(DATA_OUTA[60]),
        .I1(DATA_OUTA[44]),
        .I2(\Embedded_Trace.rdaddr_reg [1]),
        .I3(\Embedded_Trace.rddata_reg[0] [7]),
        .I4(\Embedded_Trace.rdaddr_reg [0]),
        .I5(\Embedded_Trace.rddata_reg[0] [23]),
        .O(\Embedded_Trace.rddata[13]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.rddata[13]_i_3 
       (.I0(DATA_OUTB[60]),
        .I1(DATA_OUTB[44]),
        .I2(\Embedded_Trace.rdaddr_reg [1]),
        .I3(\Embedded_Trace.rddata_reg[0]_0 [7]),
        .I4(\Embedded_Trace.rdaddr_reg [0]),
        .I5(\Embedded_Trace.rddata_reg[0]_0 [23]),
        .O(\Embedded_Trace.rddata[13]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.rddata[14]_i_2 
       (.I0(DATA_OUTA[61]),
        .I1(DATA_OUTA[45]),
        .I2(\Embedded_Trace.rdaddr_reg [1]),
        .I3(\Embedded_Trace.rddata_reg[0] [6]),
        .I4(\Embedded_Trace.rdaddr_reg [0]),
        .I5(\Embedded_Trace.rddata_reg[0] [22]),
        .O(\Embedded_Trace.rddata[14]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.rddata[14]_i_3 
       (.I0(DATA_OUTB[61]),
        .I1(DATA_OUTB[45]),
        .I2(\Embedded_Trace.rdaddr_reg [1]),
        .I3(\Embedded_Trace.rddata_reg[0]_0 [6]),
        .I4(\Embedded_Trace.rdaddr_reg [0]),
        .I5(\Embedded_Trace.rddata_reg[0]_0 [22]),
        .O(\Embedded_Trace.rddata[14]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.rddata[15]_i_2 
       (.I0(DATA_OUTA[62]),
        .I1(DATA_OUTA[46]),
        .I2(\Embedded_Trace.rdaddr_reg [1]),
        .I3(\Embedded_Trace.rddata_reg[0] [5]),
        .I4(\Embedded_Trace.rdaddr_reg [0]),
        .I5(\Embedded_Trace.rddata_reg[0] [21]),
        .O(\Embedded_Trace.rddata[15]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.rddata[15]_i_3 
       (.I0(DATA_OUTB[62]),
        .I1(DATA_OUTB[46]),
        .I2(\Embedded_Trace.rdaddr_reg [1]),
        .I3(\Embedded_Trace.rddata_reg[0]_0 [5]),
        .I4(\Embedded_Trace.rdaddr_reg [0]),
        .I5(\Embedded_Trace.rddata_reg[0]_0 [21]),
        .O(\Embedded_Trace.rddata[15]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.rddata[16]_i_2 
       (.I0(DATA_OUTA[63]),
        .I1(DATA_OUTA[47]),
        .I2(\Embedded_Trace.rdaddr_reg [1]),
        .I3(\Embedded_Trace.rddata_reg[0] [4]),
        .I4(\Embedded_Trace.rdaddr_reg [0]),
        .I5(\Embedded_Trace.rddata_reg[0] [20]),
        .O(\Embedded_Trace.rddata[16]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.rddata[16]_i_3 
       (.I0(DATA_OUTB[63]),
        .I1(DATA_OUTB[47]),
        .I2(\Embedded_Trace.rdaddr_reg [1]),
        .I3(\Embedded_Trace.rddata_reg[0]_0 [4]),
        .I4(\Embedded_Trace.rdaddr_reg [0]),
        .I5(\Embedded_Trace.rddata_reg[0]_0 [20]),
        .O(\Embedded_Trace.rddata[16]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.rddata[17]_i_2 
       (.I0(DATA_OUTA[71]),
        .I1(DATA_OUTA[69]),
        .I2(\Embedded_Trace.rdaddr_reg [1]),
        .I3(\Embedded_Trace.rddata_reg[0] [0]),
        .I4(\Embedded_Trace.rdaddr_reg [0]),
        .I5(\Embedded_Trace.rddata_reg[0] [2]),
        .O(\Embedded_Trace.rddata[17]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.rddata[17]_i_3 
       (.I0(DATA_OUTB[71]),
        .I1(DATA_OUTB[69]),
        .I2(\Embedded_Trace.rdaddr_reg [1]),
        .I3(\Embedded_Trace.rddata_reg[0]_0 [0]),
        .I4(\Embedded_Trace.rdaddr_reg [0]),
        .I5(\Embedded_Trace.rddata_reg[0]_0 [2]),
        .O(\Embedded_Trace.rddata[17]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.rddata[1]_i_2 
       (.I0(DATA_OUTA[49]),
        .I1(DATA_OUTA[33]),
        .I2(\Embedded_Trace.rdaddr_reg [1]),
        .I3(\Embedded_Trace.rddata_reg[0] [18]),
        .I4(\Embedded_Trace.rdaddr_reg [0]),
        .I5(\Embedded_Trace.rddata_reg[0] [34]),
        .O(\Embedded_Trace.rddata[1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.rddata[1]_i_3 
       (.I0(DATA_OUTB[49]),
        .I1(DATA_OUTB[33]),
        .I2(\Embedded_Trace.rdaddr_reg [1]),
        .I3(\Embedded_Trace.rddata_reg[0]_0 [18]),
        .I4(\Embedded_Trace.rdaddr_reg [0]),
        .I5(\Embedded_Trace.rddata_reg[0]_0 [34]),
        .O(\Embedded_Trace.rddata[1]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.rddata[2]_i_2 
       (.I0(DATA_OUTA[50]),
        .I1(DATA_OUTA[34]),
        .I2(\Embedded_Trace.rdaddr_reg [1]),
        .I3(\Embedded_Trace.rddata_reg[0] [17]),
        .I4(\Embedded_Trace.rdaddr_reg [0]),
        .I5(\Embedded_Trace.rddata_reg[0] [33]),
        .O(\Embedded_Trace.rddata[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.rddata[2]_i_3 
       (.I0(DATA_OUTB[50]),
        .I1(DATA_OUTB[34]),
        .I2(\Embedded_Trace.rdaddr_reg [1]),
        .I3(\Embedded_Trace.rddata_reg[0]_0 [17]),
        .I4(\Embedded_Trace.rdaddr_reg [0]),
        .I5(\Embedded_Trace.rddata_reg[0]_0 [33]),
        .O(\Embedded_Trace.rddata[2]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.rddata[3]_i_2 
       (.I0(DATA_OUTA[51]),
        .I1(DATA_OUTA[35]),
        .I2(\Embedded_Trace.rdaddr_reg [1]),
        .I3(\Embedded_Trace.rddata_reg[0] [16]),
        .I4(\Embedded_Trace.rdaddr_reg [0]),
        .I5(\Embedded_Trace.rddata_reg[0] [32]),
        .O(\Embedded_Trace.rddata[3]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.rddata[3]_i_3 
       (.I0(DATA_OUTB[51]),
        .I1(DATA_OUTB[35]),
        .I2(\Embedded_Trace.rdaddr_reg [1]),
        .I3(\Embedded_Trace.rddata_reg[0]_0 [16]),
        .I4(\Embedded_Trace.rdaddr_reg [0]),
        .I5(\Embedded_Trace.rddata_reg[0]_0 [32]),
        .O(\Embedded_Trace.rddata[3]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.rddata[4]_i_2 
       (.I0(DATA_OUTA[52]),
        .I1(DATA_OUTA[36]),
        .I2(\Embedded_Trace.rdaddr_reg [1]),
        .I3(\Embedded_Trace.rddata_reg[0] [15]),
        .I4(\Embedded_Trace.rdaddr_reg [0]),
        .I5(\Embedded_Trace.rddata_reg[0] [31]),
        .O(\Embedded_Trace.rddata[4]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.rddata[4]_i_3 
       (.I0(DATA_OUTB[52]),
        .I1(DATA_OUTB[36]),
        .I2(\Embedded_Trace.rdaddr_reg [1]),
        .I3(\Embedded_Trace.rddata_reg[0]_0 [15]),
        .I4(\Embedded_Trace.rdaddr_reg [0]),
        .I5(\Embedded_Trace.rddata_reg[0]_0 [31]),
        .O(\Embedded_Trace.rddata[4]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.rddata[5]_i_2 
       (.I0(DATA_OUTA[53]),
        .I1(DATA_OUTA[37]),
        .I2(\Embedded_Trace.rdaddr_reg [1]),
        .I3(\Embedded_Trace.rddata_reg[0] [14]),
        .I4(\Embedded_Trace.rdaddr_reg [0]),
        .I5(\Embedded_Trace.rddata_reg[0] [30]),
        .O(\Embedded_Trace.rddata[5]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.rddata[5]_i_3 
       (.I0(DATA_OUTB[53]),
        .I1(DATA_OUTB[37]),
        .I2(\Embedded_Trace.rdaddr_reg [1]),
        .I3(\Embedded_Trace.rddata_reg[0]_0 [14]),
        .I4(\Embedded_Trace.rdaddr_reg [0]),
        .I5(\Embedded_Trace.rddata_reg[0]_0 [30]),
        .O(\Embedded_Trace.rddata[5]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.rddata[6]_i_2 
       (.I0(DATA_OUTA[54]),
        .I1(DATA_OUTA[38]),
        .I2(\Embedded_Trace.rdaddr_reg [1]),
        .I3(\Embedded_Trace.rddata_reg[0] [13]),
        .I4(\Embedded_Trace.rdaddr_reg [0]),
        .I5(\Embedded_Trace.rddata_reg[0] [29]),
        .O(\Embedded_Trace.rddata[6]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.rddata[6]_i_3 
       (.I0(DATA_OUTB[54]),
        .I1(DATA_OUTB[38]),
        .I2(\Embedded_Trace.rdaddr_reg [1]),
        .I3(\Embedded_Trace.rddata_reg[0]_0 [13]),
        .I4(\Embedded_Trace.rdaddr_reg [0]),
        .I5(\Embedded_Trace.rddata_reg[0]_0 [29]),
        .O(\Embedded_Trace.rddata[6]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.rddata[7]_i_2 
       (.I0(DATA_OUTA[55]),
        .I1(DATA_OUTA[39]),
        .I2(\Embedded_Trace.rdaddr_reg [1]),
        .I3(\Embedded_Trace.rddata_reg[0] [12]),
        .I4(\Embedded_Trace.rdaddr_reg [0]),
        .I5(\Embedded_Trace.rddata_reg[0] [28]),
        .O(\Embedded_Trace.rddata[7]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.rddata[7]_i_3 
       (.I0(DATA_OUTB[55]),
        .I1(DATA_OUTB[39]),
        .I2(\Embedded_Trace.rdaddr_reg [1]),
        .I3(\Embedded_Trace.rddata_reg[0]_0 [12]),
        .I4(\Embedded_Trace.rdaddr_reg [0]),
        .I5(\Embedded_Trace.rddata_reg[0]_0 [28]),
        .O(\Embedded_Trace.rddata[7]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.rddata[8]_i_2 
       (.I0(DATA_OUTA[70]),
        .I1(DATA_OUTA[68]),
        .I2(\Embedded_Trace.rdaddr_reg [1]),
        .I3(\Embedded_Trace.rddata_reg[0] [1]),
        .I4(\Embedded_Trace.rdaddr_reg [0]),
        .I5(\Embedded_Trace.rddata_reg[0] [3]),
        .O(\Embedded_Trace.rddata[8]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.rddata[8]_i_3 
       (.I0(DATA_OUTB[70]),
        .I1(DATA_OUTB[68]),
        .I2(\Embedded_Trace.rdaddr_reg [1]),
        .I3(\Embedded_Trace.rddata_reg[0]_0 [1]),
        .I4(\Embedded_Trace.rdaddr_reg [0]),
        .I5(\Embedded_Trace.rddata_reg[0]_0 [3]),
        .O(\Embedded_Trace.rddata[8]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.rddata[9]_i_2 
       (.I0(DATA_OUTA[56]),
        .I1(DATA_OUTA[40]),
        .I2(\Embedded_Trace.rdaddr_reg [1]),
        .I3(\Embedded_Trace.rddata_reg[0] [11]),
        .I4(\Embedded_Trace.rdaddr_reg [0]),
        .I5(\Embedded_Trace.rddata_reg[0] [27]),
        .O(\Embedded_Trace.rddata[9]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Embedded_Trace.rddata[9]_i_3 
       (.I0(DATA_OUTB[56]),
        .I1(DATA_OUTB[40]),
        .I2(\Embedded_Trace.rdaddr_reg [1]),
        .I3(\Embedded_Trace.rddata_reg[0]_0 [11]),
        .I4(\Embedded_Trace.rdaddr_reg [0]),
        .I5(\Embedded_Trace.rddata_reg[0]_0 [27]),
        .O(\Embedded_Trace.rddata[9]_i_3_n_0 ));
  MUXF7 \Embedded_Trace.rddata_reg[0]_i_2 
       (.I0(\Embedded_Trace.rddata[0]_i_3_n_0 ),
        .I1(\Embedded_Trace.rddata[0]_i_4_n_0 ),
        .O(D[17]),
        .S(\Embedded_Trace.rdaddr_reg [2]));
  MUXF7 \Embedded_Trace.rddata_reg[10]_i_1 
       (.I0(\Embedded_Trace.rddata[10]_i_2_n_0 ),
        .I1(\Embedded_Trace.rddata[10]_i_3_n_0 ),
        .O(D[7]),
        .S(\Embedded_Trace.rdaddr_reg [2]));
  MUXF7 \Embedded_Trace.rddata_reg[11]_i_1 
       (.I0(\Embedded_Trace.rddata[11]_i_2_n_0 ),
        .I1(\Embedded_Trace.rddata[11]_i_3_n_0 ),
        .O(D[6]),
        .S(\Embedded_Trace.rdaddr_reg [2]));
  MUXF7 \Embedded_Trace.rddata_reg[12]_i_1 
       (.I0(\Embedded_Trace.rddata[12]_i_2_n_0 ),
        .I1(\Embedded_Trace.rddata[12]_i_3_n_0 ),
        .O(D[5]),
        .S(\Embedded_Trace.rdaddr_reg [2]));
  MUXF7 \Embedded_Trace.rddata_reg[13]_i_1 
       (.I0(\Embedded_Trace.rddata[13]_i_2_n_0 ),
        .I1(\Embedded_Trace.rddata[13]_i_3_n_0 ),
        .O(D[4]),
        .S(\Embedded_Trace.rdaddr_reg [2]));
  MUXF7 \Embedded_Trace.rddata_reg[14]_i_1 
       (.I0(\Embedded_Trace.rddata[14]_i_2_n_0 ),
        .I1(\Embedded_Trace.rddata[14]_i_3_n_0 ),
        .O(D[3]),
        .S(\Embedded_Trace.rdaddr_reg [2]));
  MUXF7 \Embedded_Trace.rddata_reg[15]_i_1 
       (.I0(\Embedded_Trace.rddata[15]_i_2_n_0 ),
        .I1(\Embedded_Trace.rddata[15]_i_3_n_0 ),
        .O(D[2]),
        .S(\Embedded_Trace.rdaddr_reg [2]));
  MUXF7 \Embedded_Trace.rddata_reg[16]_i_1 
       (.I0(\Embedded_Trace.rddata[16]_i_2_n_0 ),
        .I1(\Embedded_Trace.rddata[16]_i_3_n_0 ),
        .O(D[1]),
        .S(\Embedded_Trace.rdaddr_reg [2]));
  MUXF7 \Embedded_Trace.rddata_reg[17]_i_1 
       (.I0(\Embedded_Trace.rddata[17]_i_2_n_0 ),
        .I1(\Embedded_Trace.rddata[17]_i_3_n_0 ),
        .O(D[0]),
        .S(\Embedded_Trace.rdaddr_reg [2]));
  MUXF7 \Embedded_Trace.rddata_reg[1]_i_1 
       (.I0(\Embedded_Trace.rddata[1]_i_2_n_0 ),
        .I1(\Embedded_Trace.rddata[1]_i_3_n_0 ),
        .O(D[16]),
        .S(\Embedded_Trace.rdaddr_reg [2]));
  MUXF7 \Embedded_Trace.rddata_reg[2]_i_1 
       (.I0(\Embedded_Trace.rddata[2]_i_2_n_0 ),
        .I1(\Embedded_Trace.rddata[2]_i_3_n_0 ),
        .O(D[15]),
        .S(\Embedded_Trace.rdaddr_reg [2]));
  MUXF7 \Embedded_Trace.rddata_reg[3]_i_1 
       (.I0(\Embedded_Trace.rddata[3]_i_2_n_0 ),
        .I1(\Embedded_Trace.rddata[3]_i_3_n_0 ),
        .O(D[14]),
        .S(\Embedded_Trace.rdaddr_reg [2]));
  MUXF7 \Embedded_Trace.rddata_reg[4]_i_1 
       (.I0(\Embedded_Trace.rddata[4]_i_2_n_0 ),
        .I1(\Embedded_Trace.rddata[4]_i_3_n_0 ),
        .O(D[13]),
        .S(\Embedded_Trace.rdaddr_reg [2]));
  MUXF7 \Embedded_Trace.rddata_reg[5]_i_1 
       (.I0(\Embedded_Trace.rddata[5]_i_2_n_0 ),
        .I1(\Embedded_Trace.rddata[5]_i_3_n_0 ),
        .O(D[12]),
        .S(\Embedded_Trace.rdaddr_reg [2]));
  MUXF7 \Embedded_Trace.rddata_reg[6]_i_1 
       (.I0(\Embedded_Trace.rddata[6]_i_2_n_0 ),
        .I1(\Embedded_Trace.rddata[6]_i_3_n_0 ),
        .O(D[11]),
        .S(\Embedded_Trace.rdaddr_reg [2]));
  MUXF7 \Embedded_Trace.rddata_reg[7]_i_1 
       (.I0(\Embedded_Trace.rddata[7]_i_2_n_0 ),
        .I1(\Embedded_Trace.rddata[7]_i_3_n_0 ),
        .O(D[10]),
        .S(\Embedded_Trace.rdaddr_reg [2]));
  MUXF7 \Embedded_Trace.rddata_reg[8]_i_1 
       (.I0(\Embedded_Trace.rddata[8]_i_2_n_0 ),
        .I1(\Embedded_Trace.rddata[8]_i_3_n_0 ),
        .O(D[9]),
        .S(\Embedded_Trace.rdaddr_reg [2]));
  MUXF7 \Embedded_Trace.rddata_reg[9]_i_1 
       (.I0(\Embedded_Trace.rddata[9]_i_2_n_0 ),
        .I1(\Embedded_Trace.rddata[9]_i_3_n_0 ),
        .O(D[8]),
        .S(\Embedded_Trace.rdaddr_reg [2]));
  (* box_type = "PRIMITIVE" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(36),
    .READ_WIDTH_B(36),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("NONE"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("READ_FIRST"),
    .WRITE_MODE_B("READ_FIRST"),
    .WRITE_WIDTH_A(36),
    .WRITE_WIDTH_B(36)) 
    \Using_FPGA.Native 
       (.ADDRARDADDR({1'b1,1'b0,Q,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .ADDRBWRADDR({1'b1,1'b1,Q,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_Using_FPGA.Native_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_Using_FPGA.Native_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(Clk),
        .CLKBWRCLK(Clk),
        .DBITERR(\NLW_Using_FPGA.Native_DBITERR_UNCONNECTED ),
        .DIADI({\Using_FPGA.Native_0 [71:64],\Using_FPGA.Native_0 [62:55],\Using_FPGA.Native_0 [53:46],\Using_FPGA.Native_0 [44:37]}),
        .DIBDI({\Using_FPGA.Native_0 [35:28],\Using_FPGA.Native_0 [26:19],\Using_FPGA.Native_0 [17:10],\Using_FPGA.Native_0 [8:1]}),
        .DIPADIP({\Using_FPGA.Native_0 [63],\Using_FPGA.Native_0 [54],\Using_FPGA.Native_0 [45],\Using_FPGA.Native_0 [36]}),
        .DIPBDIP({\Using_FPGA.Native_0 [27],\Using_FPGA.Native_0 [18],\Using_FPGA.Native_0 [9],\Using_FPGA.Native_0 [0]}),
        .DOADO({DATA_OUTA[32],DATA_OUTA[33],DATA_OUTA[34],DATA_OUTA[35],DATA_OUTA[36],DATA_OUTA[37],DATA_OUTA[38],DATA_OUTA[39],DATA_OUTA[40],DATA_OUTA[41],DATA_OUTA[42],DATA_OUTA[43],DATA_OUTA[44],DATA_OUTA[45],DATA_OUTA[46],DATA_OUTA[47],DATA_OUTA[48],DATA_OUTA[49],DATA_OUTA[50],DATA_OUTA[51],DATA_OUTA[52],DATA_OUTA[53],DATA_OUTA[54],DATA_OUTA[55],DATA_OUTA[56],DATA_OUTA[57],DATA_OUTA[58],DATA_OUTA[59],DATA_OUTA[60],DATA_OUTA[61],DATA_OUTA[62],DATA_OUTA[63]}),
        .DOBDO({DATA_OUTB[32],DATA_OUTB[33],DATA_OUTB[34],DATA_OUTB[35],DATA_OUTB[36],DATA_OUTB[37],DATA_OUTB[38],DATA_OUTB[39],DATA_OUTB[40],DATA_OUTB[41],DATA_OUTB[42],DATA_OUTB[43],DATA_OUTB[44],DATA_OUTB[45],DATA_OUTB[46],DATA_OUTB[47],DATA_OUTB[48],DATA_OUTB[49],DATA_OUTB[50],DATA_OUTB[51],DATA_OUTB[52],DATA_OUTB[53],DATA_OUTB[54],DATA_OUTB[55],DATA_OUTB[56],DATA_OUTB[57],DATA_OUTB[58],DATA_OUTB[59],DATA_OUTB[60],DATA_OUTB[61],DATA_OUTB[62],DATA_OUTB[63]}),
        .DOPADOP({DATA_OUTA[68],DATA_OUTA[69],DATA_OUTA[70],DATA_OUTA[71]}),
        .DOPBDOP({DATA_OUTB[68],DATA_OUTB[69],DATA_OUTB[70],DATA_OUTB[71]}),
        .ECCPARITY(\NLW_Using_FPGA.Native_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(1'b1),
        .ENBWREN(1'b1),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_Using_FPGA.Native_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b1),
        .REGCEB(1'b1),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_Using_FPGA.Native_SBITERR_UNCONNECTED ),
        .WEA({\Using_FPGA.Native_1 [3],\Using_FPGA.Native_1 [3:2],\Using_FPGA.Native_1 [2]}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,\Using_FPGA.Native_1 [1],\Using_FPGA.Native_1 [1:0],\Using_FPGA.Native_1 [0]}));
endmodule

module block_design_microblaze_0_0_MB_SRL16E
   (\Using_FPGA.Native ,
    mul_first51_out,
    d_AS_I30_out,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    CI,
    Y,
    \instr_EX_i_reg[0] ,
    \instr_EX_i_reg[0]_0 ,
    \instr_EX_i_reg[0]_1 ,
    Clk,
    mul_first_reg,
    Compare_Instr_reg,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    d_AS_I_reg,
    inHibit_EX,
    d_AS_I_reg_0,
    take_Intr_Now_III,
    Compare_Instr_reg_0,
    Compare_Instr_reg_1,
    \Using_FPGA.Native_7 );
  output \Using_FPGA.Native ;
  output mul_first51_out;
  output d_AS_I30_out;
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  output \Using_FPGA.Native_3 ;
  output \Using_FPGA.Native_4 ;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[0] ;
  input \instr_EX_i_reg[0]_0 ;
  input \instr_EX_i_reg[0]_1 ;
  input Clk;
  input mul_first_reg;
  input Compare_Instr_reg;
  input \Using_FPGA.Native_5 ;
  input \Using_FPGA.Native_6 ;
  input d_AS_I_reg;
  input inHibit_EX;
  input d_AS_I_reg_0;
  input take_Intr_Now_III;
  input Compare_Instr_reg_0;
  input Compare_Instr_reg_1;
  input \Using_FPGA.Native_7 ;

  wire CI;
  wire Clk;
  wire Compare_Instr_reg;
  wire Compare_Instr_reg_0;
  wire Compare_Instr_reg_1;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire [0:0]Y;
  wire d_AS_I30_out;
  wire d_AS_I_reg;
  wire d_AS_I_reg_0;
  wire inHibit_EX;
  wire \instr_EX_i_reg[0] ;
  wire \instr_EX_i_reg[0]_0 ;
  wire \instr_EX_i_reg[0]_1 ;
  wire mul_first51_out;
  wire mul_first_reg;
  wire take_Intr_Now_III;

  (* SOFT_HLUTNM = "soft_lutpair25" *) 
  LUT4 #(
    .INIT(16'h0010)) 
    Compare_Instr_i_2
       (.I0(\Using_FPGA.Native ),
        .I1(Compare_Instr_reg),
        .I2(Compare_Instr_reg_0),
        .I3(Compare_Instr_reg_1),
        .O(\Using_FPGA.Native_2 ));
  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[0].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[0] ),
        .A1(\instr_EX_i_reg[0]_0 ),
        .A2(\instr_EX_i_reg[0]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(\Using_FPGA.Native ));
  LUT6 #(
    .INIT(64'h0400000000000000)) 
    \Using_FPGA.Native_i_1__167 
       (.I0(take_Intr_Now_III),
        .I1(\Using_FPGA.Native ),
        .I2(Compare_Instr_reg),
        .I3(\Using_FPGA.Native_6 ),
        .I4(\Using_FPGA.Native_5 ),
        .I5(\Using_FPGA.Native_7 ),
        .O(\Using_FPGA.Native_4 ));
  (* SOFT_HLUTNM = "soft_lutpair25" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \Using_Mul64.ex_mulh_instr_i_i_2 
       (.I0(\Using_FPGA.Native ),
        .I1(Compare_Instr_reg),
        .O(\Using_FPGA.Native_1 ));
  LUT6 #(
    .INIT(64'h0000000008880000)) 
    d_AS_I_i_1
       (.I0(\Using_FPGA.Native ),
        .I1(Compare_Instr_reg),
        .I2(d_AS_I_reg),
        .I3(inHibit_EX),
        .I4(d_AS_I_reg_0),
        .I5(take_Intr_Now_III),
        .O(d_AS_I30_out));
  (* SOFT_HLUTNM = "soft_lutpair24" *) 
  LUT2 #(
    .INIT(4'h2)) 
    mbar_decode_I_i_3
       (.I0(\Using_FPGA.Native ),
        .I1(Compare_Instr_reg),
        .O(\Using_FPGA.Native_0 ));
  (* SOFT_HLUTNM = "soft_lutpair24" *) 
  LUT5 #(
    .INIT(32'h00000020)) 
    mul_first_i_1
       (.I0(mul_first_reg),
        .I1(\Using_FPGA.Native ),
        .I2(Compare_Instr_reg),
        .I3(\Using_FPGA.Native_5 ),
        .I4(\Using_FPGA.Native_6 ),
        .O(mul_first51_out));
  LUT1 #(
    .INIT(2'h1)) 
    select_ALU_Carry_i_1
       (.I0(\Using_FPGA.Native ),
        .O(\Using_FPGA.Native_3 ));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E_124
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    enable_Interrupts_I,
    Reg_Test_Equal_i,
    CI,
    Y,
    \instr_EX_i_reg[10] ,
    \instr_EX_i_reg[10]_0 ,
    \instr_EX_i_reg[10]_1 ,
    Clk,
    take_Intr_Now_III,
    \write_Addr_I_reg[4] ,
    \Using_FPGA.enable_Interrupts_I_reg ,
    \Using_FPGA.enable_Interrupts_I_reg_0 ,
    \Using_FPGA.enable_Interrupts_I_reg_1 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 );
  output \Using_FPGA.Native ;
  output [0:0]\Using_FPGA.Native_0 ;
  output enable_Interrupts_I;
  output Reg_Test_Equal_i;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[10] ;
  input \instr_EX_i_reg[10]_0 ;
  input \instr_EX_i_reg[10]_1 ;
  input Clk;
  input take_Intr_Now_III;
  input \write_Addr_I_reg[4] ;
  input \Using_FPGA.enable_Interrupts_I_reg ;
  input \Using_FPGA.enable_Interrupts_I_reg_0 ;
  input \Using_FPGA.enable_Interrupts_I_reg_1 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;

  wire CI;
  wire Clk;
  wire Reg_Test_Equal_i;
  wire \Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.enable_Interrupts_I_reg ;
  wire \Using_FPGA.enable_Interrupts_I_reg_0 ;
  wire \Using_FPGA.enable_Interrupts_I_reg_1 ;
  wire [0:0]Y;
  wire enable_Interrupts_I;
  wire \instr_EX_i_reg[10] ;
  wire \instr_EX_i_reg[10]_0 ;
  wire \instr_EX_i_reg[10]_1 ;
  wire take_Intr_Now_III;
  wire \write_Addr_I_reg[4] ;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[10].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[10] ),
        .A1(\instr_EX_i_reg[10]_0 ),
        .A2(\instr_EX_i_reg[10]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(\Using_FPGA.Native ));
  LUT5 #(
    .INIT(32'hFFFFFFF9)) 
    \Using_FPGA.Native_i_1__123 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(take_Intr_Now_III),
        .I4(\Using_FPGA.Native_3 ),
        .O(Reg_Test_Equal_i));
  LUT5 #(
    .INIT(32'h00000080)) 
    \Using_FPGA.enable_Interrupts_I_i_1 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.enable_Interrupts_I_reg ),
        .I2(\Using_FPGA.enable_Interrupts_I_reg_0 ),
        .I3(\Using_FPGA.enable_Interrupts_I_reg_1 ),
        .I4(take_Intr_Now_III),
        .O(enable_Interrupts_I));
  LUT3 #(
    .INIT(8'h20)) 
    \write_Addr_I[4]_i_1 
       (.I0(\Using_FPGA.Native ),
        .I1(take_Intr_Now_III),
        .I2(\write_Addr_I_reg[4] ),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E_125
   (\Using_FPGA.Native ,
    set_BIP_I0,
    CI,
    Y,
    \instr_EX_i_reg[11] ,
    \instr_EX_i_reg[11]_0 ,
    \instr_EX_i_reg[11]_1 ,
    Clk,
    \Using_FPGA.set_BIP_I_reg ,
    \Using_FPGA.set_BIP_I_reg_0 );
  output \Using_FPGA.Native ;
  output set_BIP_I0;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[11] ;
  input \instr_EX_i_reg[11]_0 ;
  input \instr_EX_i_reg[11]_1 ;
  input Clk;
  input \Using_FPGA.set_BIP_I_reg ;
  input \Using_FPGA.set_BIP_I_reg_0 ;

  wire CI;
  wire Clk;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.set_BIP_I_reg ;
  wire \Using_FPGA.set_BIP_I_reg_0 ;
  wire [0:0]Y;
  wire \instr_EX_i_reg[11] ;
  wire \instr_EX_i_reg[11]_0 ;
  wire \instr_EX_i_reg[11]_1 ;
  wire set_BIP_I0;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[11].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[11] ),
        .A1(\instr_EX_i_reg[11]_0 ),
        .A2(\instr_EX_i_reg[11]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(\Using_FPGA.Native ));
  LUT3 #(
    .INIT(8'h40)) 
    \Using_FPGA.set_BIP_I_i_2 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.set_BIP_I_reg ),
        .I2(\Using_FPGA.set_BIP_I_reg_0 ),
        .O(set_BIP_I0));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E_126
   (\Using_FPGA.Native ,
    alu_Op_II,
    CI,
    Y,
    \instr_EX_i_reg[12] ,
    \instr_EX_i_reg[12]_0 ,
    \instr_EX_i_reg[12]_1 ,
    Clk,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 );
  output \Using_FPGA.Native ;
  output [0:0]alu_Op_II;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[12] ;
  input \instr_EX_i_reg[12]_0 ;
  input \instr_EX_i_reg[12]_1 ;
  input Clk;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_4 ;

  wire CI;
  wire Clk;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire [0:0]Y;
  wire [0:0]alu_Op_II;
  wire \instr_EX_i_reg[12] ;
  wire \instr_EX_i_reg[12]_0 ;
  wire \instr_EX_i_reg[12]_1 ;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[12].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[12] ),
        .A1(\instr_EX_i_reg[12]_0 ),
        .A2(\instr_EX_i_reg[12]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(\Using_FPGA.Native ));
  LUT6 #(
    .INIT(64'h000000000800F0F0)) 
    \Using_FPGA.Native_i_1__130 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(\Using_FPGA.Native_2 ),
        .I4(\Using_FPGA.Native_3 ),
        .I5(\Using_FPGA.Native_4 ),
        .O(alu_Op_II));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E_127
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    CI,
    Y,
    \instr_EX_i_reg[13] ,
    \instr_EX_i_reg[13]_0 ,
    \instr_EX_i_reg[13]_1 ,
    Clk,
    \Area_Debug_Control.dbg_brki_hit_i_3 ,
    \Area_Debug_Control.dbg_brki_hit_i_3_0 ,
    \Area_Debug_Control.dbg_brki_hit_i_3_1 ,
    \Area_Debug_Control.dbg_brki_hit_i_3_2 ,
    \Area_Debug_Control.dbg_brki_hit_i_3_3 );
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[13] ;
  input \instr_EX_i_reg[13]_0 ;
  input \instr_EX_i_reg[13]_1 ;
  input Clk;
  input \Area_Debug_Control.dbg_brki_hit_i_3 ;
  input \Area_Debug_Control.dbg_brki_hit_i_3_0 ;
  input \Area_Debug_Control.dbg_brki_hit_i_3_1 ;
  input \Area_Debug_Control.dbg_brki_hit_i_3_2 ;
  input \Area_Debug_Control.dbg_brki_hit_i_3_3 ;

  wire \Area_Debug_Control.dbg_brki_hit_i_3 ;
  wire \Area_Debug_Control.dbg_brki_hit_i_3_0 ;
  wire \Area_Debug_Control.dbg_brki_hit_i_3_1 ;
  wire \Area_Debug_Control.dbg_brki_hit_i_3_2 ;
  wire \Area_Debug_Control.dbg_brki_hit_i_3_3 ;
  wire CI;
  wire Clk;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]Y;
  wire \instr_EX_i_reg[13] ;
  wire \instr_EX_i_reg[13]_0 ;
  wire \instr_EX_i_reg[13]_1 ;

  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFF7)) 
    \Area_Debug_Control.dbg_brki_hit_i_6 
       (.I0(\Using_FPGA.Native ),
        .I1(\Area_Debug_Control.dbg_brki_hit_i_3 ),
        .I2(\Area_Debug_Control.dbg_brki_hit_i_3_0 ),
        .I3(\Area_Debug_Control.dbg_brki_hit_i_3_1 ),
        .I4(\Area_Debug_Control.dbg_brki_hit_i_3_2 ),
        .I5(\Area_Debug_Control.dbg_brki_hit_i_3_3 ),
        .O(\Using_FPGA.Native_0 ));
  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[13].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[13] ),
        .A1(\instr_EX_i_reg[13]_0 ),
        .A2(\instr_EX_i_reg[13]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(\Using_FPGA.Native ));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E_128
   (\Using_FPGA.Native ,
    mbar_first,
    \Using_FPGA.Native_0 ,
    CI,
    Y,
    \instr_EX_i_reg[14] ,
    \instr_EX_i_reg[14]_0 ,
    \instr_EX_i_reg[14]_1 ,
    Clk,
    mbar_first_reg,
    mbar_first_reg_0,
    mbar_first_reg_1,
    mbar_first_reg_2,
    mbar_first_reg_3,
    mbar_hold_I_reg,
    mbar_hold_I_reg_0,
    mbar_hold_I_reg_1);
  output \Using_FPGA.Native ;
  output mbar_first;
  output \Using_FPGA.Native_0 ;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[14] ;
  input \instr_EX_i_reg[14]_0 ;
  input \instr_EX_i_reg[14]_1 ;
  input Clk;
  input mbar_first_reg;
  input mbar_first_reg_0;
  input mbar_first_reg_1;
  input mbar_first_reg_2;
  input mbar_first_reg_3;
  input mbar_hold_I_reg;
  input mbar_hold_I_reg_0;
  input mbar_hold_I_reg_1;

  wire CI;
  wire Clk;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]Y;
  wire \instr_EX_i_reg[14] ;
  wire \instr_EX_i_reg[14]_0 ;
  wire \instr_EX_i_reg[14]_1 ;
  wire mbar_first;
  wire mbar_first_reg;
  wire mbar_first_reg_0;
  wire mbar_first_reg_1;
  wire mbar_first_reg_2;
  wire mbar_first_reg_3;
  wire mbar_hold_I_reg;
  wire mbar_hold_I_reg_0;
  wire mbar_hold_I_reg_1;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[14].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[14] ),
        .A1(\instr_EX_i_reg[14]_0 ),
        .A2(\instr_EX_i_reg[14]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(\Using_FPGA.Native ));
  LUT6 #(
    .INIT(64'h0800FFFF08000000)) 
    mbar_first_i_1
       (.I0(\Using_FPGA.Native ),
        .I1(mbar_first_reg),
        .I2(mbar_first_reg_0),
        .I3(mbar_first_reg_1),
        .I4(mbar_first_reg_2),
        .I5(mbar_first_reg_3),
        .O(mbar_first));
  LUT6 #(
    .INIT(64'h0000800000000000)) 
    mbar_hold_I_i_2
       (.I0(\Using_FPGA.Native ),
        .I1(mbar_hold_I_reg),
        .I2(mbar_hold_I_reg_0),
        .I3(mbar_hold_I_reg_1),
        .I4(mbar_first_reg_0),
        .I5(mbar_first_reg_1),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E_129
   (D,
    MSRclr_Instr_i0_in,
    CI,
    Y,
    \instr_EX_i_reg[15] ,
    \instr_EX_i_reg[15]_0 ,
    \instr_EX_i_reg[15]_1 ,
    Clk,
    \Using_MSR_Instr.MSRclr_Instr_i_reg ,
    \Using_MSR_Instr.MSRclr_Instr_i_reg_0 );
  output [0:0]D;
  output MSRclr_Instr_i0_in;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[15] ;
  input \instr_EX_i_reg[15]_0 ;
  input \instr_EX_i_reg[15]_1 ;
  input Clk;
  input \Using_MSR_Instr.MSRclr_Instr_i_reg ;
  input \Using_MSR_Instr.MSRclr_Instr_i_reg_0 ;

  wire CI;
  wire Clk;
  wire [0:0]D;
  wire MSRclr_Instr_i0_in;
  wire \Using_MSR_Instr.MSRclr_Instr_i_reg ;
  wire \Using_MSR_Instr.MSRclr_Instr_i_reg_0 ;
  wire [0:0]Y;
  wire \instr_EX_i_reg[15] ;
  wire \instr_EX_i_reg[15]_0 ;
  wire \instr_EX_i_reg[15]_1 ;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[15].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[15] ),
        .A1(\instr_EX_i_reg[15]_0 ),
        .A2(\instr_EX_i_reg[15]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(D));
  LUT3 #(
    .INIT(8'h02)) 
    \Using_MSR_Instr.MSRclr_Instr_i_i_1 
       (.I0(D),
        .I1(\Using_MSR_Instr.MSRclr_Instr_i_reg ),
        .I2(\Using_MSR_Instr.MSRclr_Instr_i_reg_0 ),
        .O(MSRclr_Instr_i0_in));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E_130
   (\Using_FPGA.Native ,
    \Using_MSR_Instr.write_MSR_I_reg ,
    \Using_FPGA.Native_0 ,
    \Using_MSR_Instr.msrxxx_carry_reg ,
    D_0,
    D_1,
    D_2,
    D_3,
    D_4,
    D_5,
    D_6,
    D_7,
    D_8,
    D_9,
    D_10,
    D_11,
    D_12,
    D_13,
    D_14,
    D_15,
    D_31,
    CI,
    Y,
    \instr_EX_i_reg[16] ,
    \instr_EX_i_reg[16]_0 ,
    \instr_EX_i_reg[16]_1 ,
    Clk,
    \Using_MSR_Instr.write_MSR_I_reg_0 ,
    take_Intr_Now_III,
    \Using_MSR_Instr.write_MSR_I_reg_1 ,
    \Using_MSR_Instr.write_MSR_I_reg_2 ,
    sync_reset,
    D,
    msrxxx_carry,
    \Using_MSR_Instr.MSRxxx_Instr_i_reg ,
    \Using_MSR_Instr.MSRxxx_Instr_i_reg_0 ,
    \Using_MSR_Instr.MSRxxx_Instr_i_reg_1 ,
    \Using_MSR_Instr.MSRxxx_Instr_i_reg_2 ,
    \Using_MSR_Instr.MSRxxx_Instr_i_reg_3 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    opsel2_Imm,
    op2_Reg__15,
    op2_Reg__16,
    op2_Reg__17,
    op2_Reg__18,
    op2_Reg__19,
    op2_Reg__20,
    op2_Reg__21,
    op2_Reg__22,
    op2_Reg__23,
    op2_Reg__24,
    op2_Reg__25,
    op2_Reg__26,
    op2_Reg__27,
    op2_Reg__28,
    op2_Reg__29,
    op2_Reg__30,
    op2_Reg__14);
  output \Using_FPGA.Native ;
  output \Using_MSR_Instr.write_MSR_I_reg ;
  output \Using_FPGA.Native_0 ;
  output \Using_MSR_Instr.msrxxx_carry_reg ;
  output D_0;
  output D_1;
  output D_2;
  output D_3;
  output D_4;
  output D_5;
  output D_6;
  output D_7;
  output D_8;
  output D_9;
  output D_10;
  output D_11;
  output D_12;
  output D_13;
  output D_14;
  output D_15;
  output D_31;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[16] ;
  input \instr_EX_i_reg[16]_0 ;
  input \instr_EX_i_reg[16]_1 ;
  input Clk;
  input \Using_MSR_Instr.write_MSR_I_reg_0 ;
  input take_Intr_Now_III;
  input \Using_MSR_Instr.write_MSR_I_reg_1 ;
  input \Using_MSR_Instr.write_MSR_I_reg_2 ;
  input sync_reset;
  input [1:0]D;
  input msrxxx_carry;
  input \Using_MSR_Instr.MSRxxx_Instr_i_reg ;
  input \Using_MSR_Instr.MSRxxx_Instr_i_reg_0 ;
  input \Using_MSR_Instr.MSRxxx_Instr_i_reg_1 ;
  input \Using_MSR_Instr.MSRxxx_Instr_i_reg_2 ;
  input \Using_MSR_Instr.MSRxxx_Instr_i_reg_3 ;
  input [15:0]\Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input opsel2_Imm;
  input op2_Reg__15;
  input op2_Reg__16;
  input op2_Reg__17;
  input op2_Reg__18;
  input op2_Reg__19;
  input op2_Reg__20;
  input op2_Reg__21;
  input op2_Reg__22;
  input op2_Reg__23;
  input op2_Reg__24;
  input op2_Reg__25;
  input op2_Reg__26;
  input op2_Reg__27;
  input op2_Reg__28;
  input op2_Reg__29;
  input op2_Reg__30;
  input op2_Reg__14;

  wire CI;
  wire Clk;
  wire [1:0]D;
  wire D_0;
  wire D_1;
  wire D_10;
  wire D_11;
  wire D_12;
  wire D_13;
  wire D_14;
  wire D_15;
  wire D_2;
  wire D_3;
  wire D_31;
  wire D_4;
  wire D_5;
  wire D_6;
  wire D_7;
  wire D_8;
  wire D_9;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [15:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_MSR_Instr.MSRxxx_Instr_i_reg ;
  wire \Using_MSR_Instr.MSRxxx_Instr_i_reg_0 ;
  wire \Using_MSR_Instr.MSRxxx_Instr_i_reg_1 ;
  wire \Using_MSR_Instr.MSRxxx_Instr_i_reg_2 ;
  wire \Using_MSR_Instr.MSRxxx_Instr_i_reg_3 ;
  wire \Using_MSR_Instr.msrxxx_carry_reg ;
  wire \Using_MSR_Instr.write_MSR_I_reg ;
  wire \Using_MSR_Instr.write_MSR_I_reg_0 ;
  wire \Using_MSR_Instr.write_MSR_I_reg_1 ;
  wire \Using_MSR_Instr.write_MSR_I_reg_2 ;
  wire [0:0]Y;
  wire \instr_EX_i_reg[16] ;
  wire \instr_EX_i_reg[16]_0 ;
  wire \instr_EX_i_reg[16]_1 ;
  wire msrxxx_carry;
  wire op2_Reg__14;
  wire op2_Reg__15;
  wire op2_Reg__16;
  wire op2_Reg__17;
  wire op2_Reg__18;
  wire op2_Reg__19;
  wire op2_Reg__20;
  wire op2_Reg__21;
  wire op2_Reg__22;
  wire op2_Reg__23;
  wire op2_Reg__24;
  wire op2_Reg__25;
  wire op2_Reg__26;
  wire op2_Reg__27;
  wire op2_Reg__28;
  wire op2_Reg__29;
  wire op2_Reg__30;
  wire opsel2_Imm;
  wire sync_reset;
  wire take_Intr_Now_III;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[16].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[16] ),
        .A1(\instr_EX_i_reg[16]_0 ),
        .A2(\instr_EX_i_reg[16]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(\Using_FPGA.Native ));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \Using_FPGA.Native_i_1 
       (.I0(\Using_FPGA.Native_1 [0]),
        .I1(\Using_FPGA.Native_2 ),
        .I2(\Using_FPGA.Native ),
        .I3(opsel2_Imm),
        .I4(op2_Reg__15),
        .O(D_0));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \Using_FPGA.Native_i_1__0 
       (.I0(\Using_FPGA.Native_1 [1]),
        .I1(\Using_FPGA.Native_2 ),
        .I2(\Using_FPGA.Native ),
        .I3(opsel2_Imm),
        .I4(op2_Reg__16),
        .O(D_1));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \Using_FPGA.Native_i_1__1 
       (.I0(\Using_FPGA.Native_1 [2]),
        .I1(\Using_FPGA.Native_2 ),
        .I2(\Using_FPGA.Native ),
        .I3(opsel2_Imm),
        .I4(op2_Reg__17),
        .O(D_2));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \Using_FPGA.Native_i_1__10 
       (.I0(\Using_FPGA.Native_1 [11]),
        .I1(\Using_FPGA.Native_2 ),
        .I2(\Using_FPGA.Native ),
        .I3(opsel2_Imm),
        .I4(op2_Reg__26),
        .O(D_11));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \Using_FPGA.Native_i_1__11 
       (.I0(\Using_FPGA.Native_1 [12]),
        .I1(\Using_FPGA.Native_2 ),
        .I2(\Using_FPGA.Native ),
        .I3(opsel2_Imm),
        .I4(op2_Reg__27),
        .O(D_12));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \Using_FPGA.Native_i_1__12 
       (.I0(\Using_FPGA.Native_1 [13]),
        .I1(\Using_FPGA.Native_2 ),
        .I2(\Using_FPGA.Native ),
        .I3(opsel2_Imm),
        .I4(op2_Reg__28),
        .O(D_13));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \Using_FPGA.Native_i_1__13 
       (.I0(\Using_FPGA.Native_1 [14]),
        .I1(\Using_FPGA.Native_2 ),
        .I2(\Using_FPGA.Native ),
        .I3(opsel2_Imm),
        .I4(op2_Reg__29),
        .O(D_14));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \Using_FPGA.Native_i_1__14 
       (.I0(\Using_FPGA.Native_1 [15]),
        .I1(\Using_FPGA.Native_2 ),
        .I2(\Using_FPGA.Native ),
        .I3(opsel2_Imm),
        .I4(op2_Reg__30),
        .O(D_15));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \Using_FPGA.Native_i_1__2 
       (.I0(\Using_FPGA.Native_1 [3]),
        .I1(\Using_FPGA.Native_2 ),
        .I2(\Using_FPGA.Native ),
        .I3(opsel2_Imm),
        .I4(op2_Reg__18),
        .O(D_3));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \Using_FPGA.Native_i_1__3 
       (.I0(\Using_FPGA.Native_1 [4]),
        .I1(\Using_FPGA.Native_2 ),
        .I2(\Using_FPGA.Native ),
        .I3(opsel2_Imm),
        .I4(op2_Reg__19),
        .O(D_4));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__30 
       (.I0(\Using_FPGA.Native ),
        .I1(opsel2_Imm),
        .I2(op2_Reg__14),
        .O(D_31));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \Using_FPGA.Native_i_1__4 
       (.I0(\Using_FPGA.Native_1 [5]),
        .I1(\Using_FPGA.Native_2 ),
        .I2(\Using_FPGA.Native ),
        .I3(opsel2_Imm),
        .I4(op2_Reg__20),
        .O(D_5));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \Using_FPGA.Native_i_1__5 
       (.I0(\Using_FPGA.Native_1 [6]),
        .I1(\Using_FPGA.Native_2 ),
        .I2(\Using_FPGA.Native ),
        .I3(opsel2_Imm),
        .I4(op2_Reg__21),
        .O(D_6));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \Using_FPGA.Native_i_1__6 
       (.I0(\Using_FPGA.Native_1 [7]),
        .I1(\Using_FPGA.Native_2 ),
        .I2(\Using_FPGA.Native ),
        .I3(opsel2_Imm),
        .I4(op2_Reg__22),
        .O(D_7));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \Using_FPGA.Native_i_1__7 
       (.I0(\Using_FPGA.Native_1 [8]),
        .I1(\Using_FPGA.Native_2 ),
        .I2(\Using_FPGA.Native ),
        .I3(opsel2_Imm),
        .I4(op2_Reg__23),
        .O(D_8));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \Using_FPGA.Native_i_1__8 
       (.I0(\Using_FPGA.Native_1 [9]),
        .I1(\Using_FPGA.Native_2 ),
        .I2(\Using_FPGA.Native ),
        .I3(opsel2_Imm),
        .I4(op2_Reg__24),
        .O(D_9));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \Using_FPGA.Native_i_1__9 
       (.I0(\Using_FPGA.Native_1 [10]),
        .I1(\Using_FPGA.Native_2 ),
        .I2(\Using_FPGA.Native ),
        .I3(opsel2_Imm),
        .I4(op2_Reg__25),
        .O(D_10));
  LUT6 #(
    .INIT(64'h0000040000000000)) 
    \Using_MSR_Instr.MSRxxx_Instr_i_i_1 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_MSR_Instr.MSRxxx_Instr_i_reg ),
        .I2(\Using_MSR_Instr.MSRxxx_Instr_i_reg_0 ),
        .I3(\Using_MSR_Instr.MSRxxx_Instr_i_reg_1 ),
        .I4(\Using_MSR_Instr.MSRxxx_Instr_i_reg_2 ),
        .I5(\Using_MSR_Instr.MSRxxx_Instr_i_reg_3 ),
        .O(\Using_FPGA.Native_0 ));
  LUT6 #(
    .INIT(64'h0000000028FF2800)) 
    \Using_MSR_Instr.msrxxx_carry_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(D[1]),
        .I2(D[0]),
        .I3(\Using_MSR_Instr.write_MSR_I_reg_1 ),
        .I4(msrxxx_carry),
        .I5(sync_reset),
        .O(\Using_MSR_Instr.msrxxx_carry_reg ));
  LUT6 #(
    .INIT(64'h000000000EFF0E00)) 
    \Using_MSR_Instr.write_MSR_I_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_MSR_Instr.write_MSR_I_reg_0 ),
        .I2(take_Intr_Now_III),
        .I3(\Using_MSR_Instr.write_MSR_I_reg_1 ),
        .I4(\Using_MSR_Instr.write_MSR_I_reg_2 ),
        .I5(sync_reset),
        .O(\Using_MSR_Instr.write_MSR_I_reg ));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E_131
   (\Using_FPGA.Native ,
    mtsmsr_write_i_reg,
    BitField_Extract0,
    D_30,
    CI,
    Y,
    \instr_EX_i_reg[17] ,
    \instr_EX_i_reg[17]_0 ,
    \instr_EX_i_reg[17]_1 ,
    Clk,
    mtsmsr_write_i_reg_0,
    take_Intr_Now_III,
    mtsmsr_write_i_reg_1,
    mtsmsr_write_i_reg_2,
    sync_reset,
    mtsmsr_write_i_reg_3,
    \Using_Barrel_Shifter.BitField_Extract_reg ,
    mtsmsr_write_i_reg_4,
    mtsmsr_write_i_reg_5,
    mtsmsr_write_i_reg_6,
    opsel2_Imm,
    op2_Reg__13);
  output \Using_FPGA.Native ;
  output mtsmsr_write_i_reg;
  output BitField_Extract0;
  output D_30;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[17] ;
  input \instr_EX_i_reg[17]_0 ;
  input \instr_EX_i_reg[17]_1 ;
  input Clk;
  input mtsmsr_write_i_reg_0;
  input take_Intr_Now_III;
  input mtsmsr_write_i_reg_1;
  input mtsmsr_write_i_reg_2;
  input sync_reset;
  input mtsmsr_write_i_reg_3;
  input \Using_Barrel_Shifter.BitField_Extract_reg ;
  input mtsmsr_write_i_reg_4;
  input mtsmsr_write_i_reg_5;
  input mtsmsr_write_i_reg_6;
  input opsel2_Imm;
  input op2_Reg__13;

  wire BitField_Extract0;
  wire CI;
  wire Clk;
  wire D_30;
  wire \Using_Barrel_Shifter.BitField_Extract_reg ;
  wire \Using_FPGA.Native ;
  wire [0:0]Y;
  wire \instr_EX_i_reg[17] ;
  wire \instr_EX_i_reg[17]_0 ;
  wire \instr_EX_i_reg[17]_1 ;
  wire mtsmsr_write_i_i_2_n_0;
  wire mtsmsr_write_i_reg;
  wire mtsmsr_write_i_reg_0;
  wire mtsmsr_write_i_reg_1;
  wire mtsmsr_write_i_reg_2;
  wire mtsmsr_write_i_reg_3;
  wire mtsmsr_write_i_reg_4;
  wire mtsmsr_write_i_reg_5;
  wire mtsmsr_write_i_reg_6;
  wire op2_Reg__13;
  wire opsel2_Imm;
  wire sync_reset;
  wire take_Intr_Now_III;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[17].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[17] ),
        .A1(\instr_EX_i_reg[17]_0 ),
        .A2(\instr_EX_i_reg[17]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(\Using_FPGA.Native ));
  (* SOFT_HLUTNM = "soft_lutpair26" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Using_Barrel_Shifter.BitField_Extract_i_1 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_Barrel_Shifter.BitField_Extract_reg ),
        .O(BitField_Extract0));
  (* SOFT_HLUTNM = "soft_lutpair26" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__29 
       (.I0(\Using_FPGA.Native ),
        .I1(opsel2_Imm),
        .I2(op2_Reg__13),
        .O(D_30));
  LUT6 #(
    .INIT(64'h0000000008FF0800)) 
    mtsmsr_write_i_i_1
       (.I0(mtsmsr_write_i_i_2_n_0),
        .I1(mtsmsr_write_i_reg_0),
        .I2(take_Intr_Now_III),
        .I3(mtsmsr_write_i_reg_1),
        .I4(mtsmsr_write_i_reg_2),
        .I5(sync_reset),
        .O(mtsmsr_write_i_reg));
  LUT6 #(
    .INIT(64'h0000080000000000)) 
    mtsmsr_write_i_i_2
       (.I0(\Using_FPGA.Native ),
        .I1(mtsmsr_write_i_reg_3),
        .I2(\Using_Barrel_Shifter.BitField_Extract_reg ),
        .I3(mtsmsr_write_i_reg_4),
        .I4(mtsmsr_write_i_reg_5),
        .I5(mtsmsr_write_i_reg_6),
        .O(mtsmsr_write_i_i_2_n_0));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E_132
   (\Using_FPGA.Native ,
    of_fsl_control,
    D_29,
    CI,
    Y,
    \instr_EX_i_reg[18] ,
    \instr_EX_i_reg[18]_0 ,
    \instr_EX_i_reg[18]_1 ,
    Clk,
    \Using_FSL_Links.FSL_Control_Bit_i_reg ,
    \Using_FSL_Links.FSL_Control_Bit_i_reg_0 ,
    opsel2_Imm,
    op2_Reg__12);
  output \Using_FPGA.Native ;
  output of_fsl_control;
  output D_29;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[18] ;
  input \instr_EX_i_reg[18]_0 ;
  input \instr_EX_i_reg[18]_1 ;
  input Clk;
  input \Using_FSL_Links.FSL_Control_Bit_i_reg ;
  input \Using_FSL_Links.FSL_Control_Bit_i_reg_0 ;
  input opsel2_Imm;
  input op2_Reg__12;

  wire CI;
  wire Clk;
  wire D_29;
  wire \Using_FPGA.Native ;
  wire \Using_FSL_Links.FSL_Control_Bit_i_reg ;
  wire \Using_FSL_Links.FSL_Control_Bit_i_reg_0 ;
  wire [0:0]Y;
  wire \instr_EX_i_reg[18] ;
  wire \instr_EX_i_reg[18]_0 ;
  wire \instr_EX_i_reg[18]_1 ;
  wire of_fsl_control;
  wire op2_Reg__12;
  wire opsel2_Imm;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[18].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[18] ),
        .A1(\instr_EX_i_reg[18]_0 ),
        .A2(\instr_EX_i_reg[18]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(\Using_FPGA.Native ));
  (* SOFT_HLUTNM = "soft_lutpair27" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__28 
       (.I0(\Using_FPGA.Native ),
        .I1(opsel2_Imm),
        .I2(op2_Reg__12),
        .O(D_29));
  (* SOFT_HLUTNM = "soft_lutpair27" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FSL_Links.FSL_Control_Bit_i_i_1 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FSL_Links.FSL_Control_Bit_i_reg ),
        .I2(\Using_FSL_Links.FSL_Control_Bit_i_reg_0 ),
        .O(of_fsl_control));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E_133
   (\Using_FPGA.Native ,
    of_fsl_test,
    D_28,
    CI,
    Y,
    \instr_EX_i_reg[19] ,
    \instr_EX_i_reg[19]_0 ,
    \instr_EX_i_reg[19]_1 ,
    Clk,
    \Using_FSL_Links.fsl_test_instr_reg ,
    \Using_FSL_Links.fsl_test_instr_reg_0 ,
    opsel2_Imm,
    op2_Reg__11);
  output \Using_FPGA.Native ;
  output of_fsl_test;
  output D_28;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[19] ;
  input \instr_EX_i_reg[19]_0 ;
  input \instr_EX_i_reg[19]_1 ;
  input Clk;
  input \Using_FSL_Links.fsl_test_instr_reg ;
  input \Using_FSL_Links.fsl_test_instr_reg_0 ;
  input opsel2_Imm;
  input op2_Reg__11;

  wire CI;
  wire Clk;
  wire D_28;
  wire \Using_FPGA.Native ;
  wire \Using_FSL_Links.fsl_test_instr_reg ;
  wire \Using_FSL_Links.fsl_test_instr_reg_0 ;
  wire [0:0]Y;
  wire \instr_EX_i_reg[19] ;
  wire \instr_EX_i_reg[19]_0 ;
  wire \instr_EX_i_reg[19]_1 ;
  wire of_fsl_test;
  wire op2_Reg__11;
  wire opsel2_Imm;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[19].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[19] ),
        .A1(\instr_EX_i_reg[19]_0 ),
        .A2(\instr_EX_i_reg[19]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(\Using_FPGA.Native ));
  (* SOFT_HLUTNM = "soft_lutpair28" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__27 
       (.I0(\Using_FPGA.Native ),
        .I1(opsel2_Imm),
        .I2(op2_Reg__11),
        .O(D_28));
  (* SOFT_HLUTNM = "soft_lutpair28" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FSL_Links.fsl_test_instr_i_1 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FSL_Links.fsl_test_instr_reg ),
        .I2(\Using_FSL_Links.fsl_test_instr_reg_0 ),
        .O(of_fsl_test));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E_134
   (\Using_FPGA.Native ,
    \Using_FPGA.set_BIP_I_reg ,
    inHibit_EX_reg,
    \Using_FPGA.Native_0 ,
    byte_i27_out,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    D_32,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    \Using_FPGA.Native_5 ,
    CI,
    Y,
    \instr_EX_i_reg[1] ,
    \instr_EX_i_reg[1]_0 ,
    \instr_EX_i_reg[1]_1 ,
    Clk,
    take_Intr_Now_III,
    set_BIP_I0,
    \Using_FPGA.set_BIP_I_reg_0 ,
    \Using_FPGA.set_BIP_I_reg_1 ,
    sync_reset,
    inHibit_EX_reg_0,
    \Using_FPGA.Native_6 ,
    inHibit_EX_reg_1,
    writing_reg,
    \Using_FPGA.Native_7 ,
    writing_reg_0,
    inHibit_EX,
    inHibit_EX_i_2_0,
    write_Reg_reg,
    write_Reg_reg_0,
    D,
    \Using_FPGA.Native_8 ,
    write_Reg_i_2_0,
    write_Reg_i_2_1,
    write_Reg_i_2_2,
    \Size_17to32.imm_Reg_reg[15] ,
    \Using_FPGA.Native_9 );
  output \Using_FPGA.Native ;
  output \Using_FPGA.set_BIP_I_reg ;
  output inHibit_EX_reg;
  output \Using_FPGA.Native_0 ;
  output byte_i27_out;
  output \Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  output \Using_FPGA.Native_3 ;
  output D_32;
  output \Using_FPGA.Native_4 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output \Using_FPGA.Native_5 ;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[1] ;
  input \instr_EX_i_reg[1]_0 ;
  input \instr_EX_i_reg[1]_1 ;
  input Clk;
  input take_Intr_Now_III;
  input set_BIP_I0;
  input \Using_FPGA.set_BIP_I_reg_0 ;
  input \Using_FPGA.set_BIP_I_reg_1 ;
  input sync_reset;
  input inHibit_EX_reg_0;
  input \Using_FPGA.Native_6 ;
  input inHibit_EX_reg_1;
  input writing_reg;
  input \Using_FPGA.Native_7 ;
  input writing_reg_0;
  input inHibit_EX;
  input inHibit_EX_i_2_0;
  input write_Reg_reg;
  input write_Reg_reg_0;
  input [0:0]D;
  input [2:0]\Using_FPGA.Native_8 ;
  input write_Reg_i_2_0;
  input write_Reg_i_2_1;
  input write_Reg_i_2_2;
  input \Size_17to32.imm_Reg_reg[15] ;
  input \Using_FPGA.Native_9 ;

  wire CI;
  wire Clk;
  wire [0:0]D;
  wire D_32;
  wire \Size_17to32.imm_Reg_reg[15] ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire [2:0]\Using_FPGA.Native_8 ;
  wire \Using_FPGA.Native_9 ;
  wire \Using_FPGA.Native_i_2__40_n_0 ;
  wire \Using_FPGA.Native_i_3__20_n_0 ;
  wire \Using_FPGA.set_BIP_I_reg ;
  wire \Using_FPGA.set_BIP_I_reg_0 ;
  wire \Using_FPGA.set_BIP_I_reg_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]Y;
  wire byte_i27_out;
  wire inHibit_EX;
  wire inHibit_EX_i_2_0;
  wire inHibit_EX_i_4_n_0;
  wire inHibit_EX_reg;
  wire inHibit_EX_reg_0;
  wire inHibit_EX_reg_1;
  wire \instr_EX_i_reg[1] ;
  wire \instr_EX_i_reg[1]_0 ;
  wire \instr_EX_i_reg[1]_1 ;
  wire set_BIP_I0;
  wire sync_reset;
  wire take_Intr_Now_III;
  wire write_Reg_i_2_0;
  wire write_Reg_i_2_1;
  wire write_Reg_i_2_2;
  wire write_Reg_i_3_n_0;
  wire write_Reg_reg;
  wire write_Reg_reg_0;
  wire writing_reg;
  wire writing_reg_0;

  (* SOFT_HLUTNM = "soft_lutpair30" *) 
  LUT4 #(
    .INIT(16'h4000)) 
    \Size_17to32.imm_Reg[0]_i_2 
       (.I0(\Using_FPGA.Native ),
        .I1(writing_reg_0),
        .I2(\Size_17to32.imm_Reg_reg[15] ),
        .I3(writing_reg),
        .O(\Using_FPGA.Native_2 ));
  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[1].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[1] ),
        .A1(\instr_EX_i_reg[1]_0 ),
        .A2(\instr_EX_i_reg[1]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(\Using_FPGA.Native ));
  LUT3 #(
    .INIT(8'h02)) 
    \Using_FPGA.Native_i_1__128 
       (.I0(\Using_FPGA.Native_4 ),
        .I1(\Using_FPGA.Native_9 ),
        .I2(take_Intr_Now_III),
        .O(D_32));
  LUT6 #(
    .INIT(64'hAAAAAAAAFFEAEAEA)) 
    \Using_FPGA.Native_i_1__129 
       (.I0(\Using_FPGA.Native_9 ),
        .I1(\Using_FPGA.Native_6 ),
        .I2(\Using_FPGA.Native_i_2__40_n_0 ),
        .I3(\Using_FPGA.Native_i_3__20_n_0 ),
        .I4(\Using_FPGA.Native_8 [2]),
        .I5(take_Intr_Now_III),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
  (* SOFT_HLUTNM = "soft_lutpair31" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \Using_FPGA.Native_i_2__40 
       (.I0(\Using_FPGA.Native ),
        .I1(writing_reg_0),
        .O(\Using_FPGA.Native_i_2__40_n_0 ));
  LUT6 #(
    .INIT(64'hFDBFFFFFFDFFFFFF)) 
    \Using_FPGA.Native_i_2__54 
       (.I0(\Using_FPGA.Native ),
        .I1(writing_reg_0),
        .I2(writing_reg),
        .I3(\Using_FPGA.Native_6 ),
        .I4(\Using_FPGA.Native_7 ),
        .I5(\Using_FPGA.Native_8 [2]),
        .O(\Using_FPGA.Native_4 ));
  (* SOFT_HLUTNM = "soft_lutpair29" *) 
  LUT5 #(
    .INIT(32'h00400000)) 
    \Using_FPGA.Native_i_3__20 
       (.I0(\Using_FPGA.Native ),
        .I1(writing_reg_0),
        .I2(writing_reg),
        .I3(\Using_FPGA.Native_6 ),
        .I4(\Using_FPGA.Native_7 ),
        .O(\Using_FPGA.Native_i_3__20_n_0 ));
  LUT6 #(
    .INIT(64'hBAAEBAAAAAAAAAAA)) 
    \Using_FPGA.Native_i_3__9 
       (.I0(take_Intr_Now_III),
        .I1(\Using_FPGA.Native ),
        .I2(writing_reg_0),
        .I3(writing_reg),
        .I4(\Using_FPGA.Native_6 ),
        .I5(\Using_FPGA.Native_7 ),
        .O(\Using_FPGA.Native_3 ));
  LUT6 #(
    .INIT(64'h0000000020FF2000)) 
    \Using_FPGA.set_BIP_I_i_1 
       (.I0(\Using_FPGA.Native_i_3__20_n_0 ),
        .I1(take_Intr_Now_III),
        .I2(set_BIP_I0),
        .I3(\Using_FPGA.set_BIP_I_reg_0 ),
        .I4(\Using_FPGA.set_BIP_I_reg_1 ),
        .I5(sync_reset),
        .O(\Using_FPGA.set_BIP_I_reg ));
  (* SOFT_HLUTNM = "soft_lutpair31" *) 
  LUT4 #(
    .INIT(16'h8AAA)) 
    byte_i_i_2
       (.I0(\Using_FPGA.set_BIP_I_reg_0 ),
        .I1(take_Intr_Now_III),
        .I2(\Using_FPGA.Native ),
        .I3(writing_reg_0),
        .O(byte_i27_out));
  LUT6 #(
    .INIT(64'h202A000000000000)) 
    inHibit_EX_i_2
       (.I0(inHibit_EX_i_4_n_0),
        .I1(inHibit_EX_reg_0),
        .I2(\Using_FPGA.Native_6 ),
        .I3(inHibit_EX_reg_1),
        .I4(writing_reg),
        .I5(\Using_FPGA.Native_7 ),
        .O(inHibit_EX_reg));
  LUT4 #(
    .INIT(16'h0444)) 
    inHibit_EX_i_4
       (.I0(\Using_FPGA.Native ),
        .I1(writing_reg_0),
        .I2(inHibit_EX),
        .I3(inHibit_EX_i_2_0),
        .O(inHibit_EX_i_4_n_0));
  (* SOFT_HLUTNM = "soft_lutpair29" *) 
  LUT2 #(
    .INIT(4'h8)) 
    is_lwx_I_i_2
       (.I0(\Using_FPGA.Native ),
        .I1(writing_reg_0),
        .O(\Using_FPGA.Native_1 ));
  LUT6 #(
    .INIT(64'h4440444044404040)) 
    write_Reg_i_2
       (.I0(take_Intr_Now_III),
        .I1(\Using_FPGA.set_BIP_I_reg_0 ),
        .I2(write_Reg_i_3_n_0),
        .I3(write_Reg_reg),
        .I4(write_Reg_reg_0),
        .I5(D),
        .O(\Using_FPGA.Native_0 ));
  LUT6 #(
    .INIT(64'h7777070077777777)) 
    write_Reg_i_3
       (.I0(\Using_FPGA.Native_i_3__20_n_0 ),
        .I1(\Using_FPGA.Native_8 [1]),
        .I2(write_Reg_i_2_0),
        .I3(\Using_FPGA.Native_8 [0]),
        .I4(write_Reg_i_2_1),
        .I5(write_Reg_i_2_2),
        .O(write_Reg_i_3_n_0));
  (* SOFT_HLUTNM = "soft_lutpair30" *) 
  LUT4 #(
    .INIT(16'h4000)) 
    writing_i_1
       (.I0(take_Intr_Now_III),
        .I1(\Using_FPGA.Native ),
        .I2(writing_reg_0),
        .I3(writing_reg),
        .O(\Using_FPGA.Native_5 ));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E_135
   (D,
    D_27,
    CI,
    Y,
    \instr_EX_i_reg[20] ,
    \instr_EX_i_reg[20]_0 ,
    \instr_EX_i_reg[20]_1 ,
    Clk,
    opsel2_Imm,
    op2_Reg__10);
  output [0:0]D;
  output D_27;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[20] ;
  input \instr_EX_i_reg[20]_0 ;
  input \instr_EX_i_reg[20]_1 ;
  input Clk;
  input opsel2_Imm;
  input op2_Reg__10;

  wire CI;
  wire Clk;
  wire [0:0]D;
  wire D_27;
  wire [0:0]Y;
  wire \instr_EX_i_reg[20] ;
  wire \instr_EX_i_reg[20]_0 ;
  wire \instr_EX_i_reg[20]_1 ;
  wire op2_Reg__10;
  wire opsel2_Imm;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[20].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[20] ),
        .A1(\instr_EX_i_reg[20]_0 ),
        .A2(\instr_EX_i_reg[20]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(D));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__26 
       (.I0(D),
        .I1(opsel2_Imm),
        .I2(op2_Reg__10),
        .O(D_27));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E_136
   (\Using_FPGA.Native ,
    \Use_Async_Reset.sync_reset_reg ,
    \Using_FPGA.Native_0 ,
    D_26,
    CI,
    Y,
    \instr_EX_i_reg[21] ,
    \instr_EX_i_reg[21]_0 ,
    \instr_EX_i_reg[21]_1 ,
    Clk,
    sync_reset,
    mb_Get_i,
    \Using_FSL_Links.mb_Get_i_reg ,
    \Using_FSL_Links.mb_Get_i_reg_0 ,
    \Using_FSL_Links.mb_Get_i_reg_1 ,
    is_lwx_I_reg,
    is_lwx_I_reg_0,
    opsel2_Imm,
    op2_Reg__9);
  output \Using_FPGA.Native ;
  output \Use_Async_Reset.sync_reset_reg ;
  output \Using_FPGA.Native_0 ;
  output D_26;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[21] ;
  input \instr_EX_i_reg[21]_0 ;
  input \instr_EX_i_reg[21]_1 ;
  input Clk;
  input sync_reset;
  input mb_Get_i;
  input \Using_FSL_Links.mb_Get_i_reg ;
  input \Using_FSL_Links.mb_Get_i_reg_0 ;
  input \Using_FSL_Links.mb_Get_i_reg_1 ;
  input is_lwx_I_reg;
  input is_lwx_I_reg_0;
  input opsel2_Imm;
  input op2_Reg__9;

  wire CI;
  wire Clk;
  wire D_26;
  wire \Use_Async_Reset.sync_reset_reg ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FSL_Links.mb_Get_i_reg ;
  wire \Using_FSL_Links.mb_Get_i_reg_0 ;
  wire \Using_FSL_Links.mb_Get_i_reg_1 ;
  wire [0:0]Y;
  wire \instr_EX_i_reg[21] ;
  wire \instr_EX_i_reg[21]_0 ;
  wire \instr_EX_i_reg[21]_1 ;
  wire is_lwx_I_reg;
  wire is_lwx_I_reg_0;
  wire mb_Get_i;
  wire op2_Reg__9;
  wire opsel2_Imm;
  wire sync_reset;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[21].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[21] ),
        .A1(\instr_EX_i_reg[21]_0 ),
        .A2(\instr_EX_i_reg[21]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(\Using_FPGA.Native ));
  (* SOFT_HLUTNM = "soft_lutpair32" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__25 
       (.I0(\Using_FPGA.Native ),
        .I1(opsel2_Imm),
        .I2(op2_Reg__9),
        .O(D_26));
  LUT6 #(
    .INIT(64'hFBFBFBABABABFBAB)) 
    \Using_FSL_Links.mb_Get_i_i_5 
       (.I0(sync_reset),
        .I1(mb_Get_i),
        .I2(\Using_FSL_Links.mb_Get_i_reg ),
        .I3(\Using_FPGA.Native ),
        .I4(\Using_FSL_Links.mb_Get_i_reg_0 ),
        .I5(\Using_FSL_Links.mb_Get_i_reg_1 ),
        .O(\Use_Async_Reset.sync_reset_reg ));
  (* SOFT_HLUTNM = "soft_lutpair32" *) 
  LUT3 #(
    .INIT(8'h02)) 
    is_lwx_I_i_3
       (.I0(\Using_FPGA.Native ),
        .I1(is_lwx_I_reg),
        .I2(is_lwx_I_reg_0),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E_137
   (\Using_FPGA.Native ,
    of_fsl_blocking,
    D_25,
    CI,
    Y,
    \instr_EX_i_reg[22] ,
    \instr_EX_i_reg[22]_0 ,
    \instr_EX_i_reg[22]_1 ,
    Clk,
    \Using_FSL_Links.fsl_block_instr_reg ,
    \Using_FSL_Links.fsl_block_instr_reg_0 ,
    opsel2_Imm,
    op2_Reg__8);
  output \Using_FPGA.Native ;
  output of_fsl_blocking;
  output D_25;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[22] ;
  input \instr_EX_i_reg[22]_0 ;
  input \instr_EX_i_reg[22]_1 ;
  input Clk;
  input \Using_FSL_Links.fsl_block_instr_reg ;
  input \Using_FSL_Links.fsl_block_instr_reg_0 ;
  input opsel2_Imm;
  input op2_Reg__8;

  wire CI;
  wire Clk;
  wire D_25;
  wire \Using_FPGA.Native ;
  wire \Using_FSL_Links.fsl_block_instr_reg ;
  wire \Using_FSL_Links.fsl_block_instr_reg_0 ;
  wire [0:0]Y;
  wire \instr_EX_i_reg[22] ;
  wire \instr_EX_i_reg[22]_0 ;
  wire \instr_EX_i_reg[22]_1 ;
  wire of_fsl_blocking;
  wire op2_Reg__8;
  wire opsel2_Imm;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[22].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[22] ),
        .A1(\instr_EX_i_reg[22]_0 ),
        .A2(\instr_EX_i_reg[22]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(\Using_FPGA.Native ));
  (* SOFT_HLUTNM = "soft_lutpair33" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__24 
       (.I0(\Using_FPGA.Native ),
        .I1(opsel2_Imm),
        .I2(op2_Reg__8),
        .O(D_25));
  (* SOFT_HLUTNM = "soft_lutpair33" *) 
  LUT3 #(
    .INIT(8'h1D)) 
    \Using_FSL_Links.fsl_block_instr_i_1 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FSL_Links.fsl_block_instr_reg ),
        .I2(\Using_FSL_Links.fsl_block_instr_reg_0 ),
        .O(of_fsl_blocking));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E_138
   (\Using_FPGA.Native ,
    D_24,
    CI,
    Y,
    \instr_EX_i_reg[23] ,
    \instr_EX_i_reg[23]_0 ,
    \instr_EX_i_reg[23]_1 ,
    Clk,
    opsel2_Imm,
    op2_Reg__7);
  output \Using_FPGA.Native ;
  output D_24;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[23] ;
  input \instr_EX_i_reg[23]_0 ;
  input \instr_EX_i_reg[23]_1 ;
  input Clk;
  input opsel2_Imm;
  input op2_Reg__7;

  wire CI;
  wire Clk;
  wire D_24;
  wire \Using_FPGA.Native ;
  wire [0:0]Y;
  wire \instr_EX_i_reg[23] ;
  wire \instr_EX_i_reg[23]_0 ;
  wire \instr_EX_i_reg[23]_1 ;
  wire op2_Reg__7;
  wire opsel2_Imm;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[23].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[23] ),
        .A1(\instr_EX_i_reg[23]_0 ),
        .A2(\instr_EX_i_reg[23]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(\Using_FPGA.Native ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__23 
       (.I0(\Using_FPGA.Native ),
        .I1(opsel2_Imm),
        .I2(op2_Reg__7),
        .O(D_24));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E_139
   (\Using_FPGA.Native ,
    D_23,
    CI,
    Y,
    \instr_EX_i_reg[24] ,
    \instr_EX_i_reg[24]_0 ,
    \instr_EX_i_reg[24]_1 ,
    Clk,
    opsel2_Imm,
    op2_Reg__6);
  output \Using_FPGA.Native ;
  output D_23;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[24] ;
  input \instr_EX_i_reg[24]_0 ;
  input \instr_EX_i_reg[24]_1 ;
  input Clk;
  input opsel2_Imm;
  input op2_Reg__6;

  wire CI;
  wire Clk;
  wire D_23;
  wire \Using_FPGA.Native ;
  wire [0:0]Y;
  wire \instr_EX_i_reg[24] ;
  wire \instr_EX_i_reg[24]_0 ;
  wire \instr_EX_i_reg[24]_1 ;
  wire op2_Reg__6;
  wire opsel2_Imm;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[24].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[24] ),
        .A1(\instr_EX_i_reg[24]_0 ),
        .A2(\instr_EX_i_reg[24]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(\Using_FPGA.Native ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__22 
       (.I0(\Using_FPGA.Native ),
        .I1(opsel2_Imm),
        .I2(op2_Reg__6),
        .O(D_23));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E_140
   (\Using_FPGA.Native ,
    check_srx8_in,
    D_22,
    CI,
    Y,
    \instr_EX_i_reg[25] ,
    \instr_EX_i_reg[25]_0 ,
    \instr_EX_i_reg[25]_1 ,
    Clk,
    Sext16_reg,
    Sext16_reg_0,
    opsel2_Imm,
    op2_Reg__5);
  output \Using_FPGA.Native ;
  output check_srx8_in;
  output D_22;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[25] ;
  input \instr_EX_i_reg[25]_0 ;
  input \instr_EX_i_reg[25]_1 ;
  input Clk;
  input Sext16_reg;
  input Sext16_reg_0;
  input opsel2_Imm;
  input op2_Reg__5;

  wire CI;
  wire Clk;
  wire D_22;
  wire Sext16_reg;
  wire Sext16_reg_0;
  wire \Using_FPGA.Native ;
  wire [0:0]Y;
  wire check_srx8_in;
  wire \instr_EX_i_reg[25] ;
  wire \instr_EX_i_reg[25]_0 ;
  wire \instr_EX_i_reg[25]_1 ;
  wire op2_Reg__5;
  wire opsel2_Imm;

  (* SOFT_HLUTNM = "soft_lutpair34" *) 
  LUT3 #(
    .INIT(8'h08)) 
    Sext8_i_2
       (.I0(\Using_FPGA.Native ),
        .I1(Sext16_reg),
        .I2(Sext16_reg_0),
        .O(check_srx8_in));
  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[25].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[25] ),
        .A1(\instr_EX_i_reg[25]_0 ),
        .A2(\instr_EX_i_reg[25]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(\Using_FPGA.Native ));
  (* SOFT_HLUTNM = "soft_lutpair34" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__21 
       (.I0(\Using_FPGA.Native ),
        .I1(opsel2_Imm),
        .I2(op2_Reg__5),
        .O(D_22));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E_141
   (\Using_FPGA.Native ,
    \Serial_Dbg_Intf.control_reg_reg[8] ,
    D_21,
    CI,
    Y,
    \instr_EX_i_reg[26] ,
    \instr_EX_i_reg[26]_0 ,
    \instr_EX_i_reg[26]_1 ,
    Clk,
    \Area_Debug_Control.dbg_brki_hit_i_2 ,
    \Area_Debug_Control.dbg_brki_hit_i_2_0 ,
    \Area_Debug_Control.dbg_brki_hit_i_2_1 ,
    \Area_Debug_Control.dbg_brki_hit_i_2_2 ,
    \Area_Debug_Control.dbg_brki_hit_i_2_3 ,
    opsel2_Imm,
    op2_Reg__4);
  output \Using_FPGA.Native ;
  output \Serial_Dbg_Intf.control_reg_reg[8] ;
  output D_21;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[26] ;
  input \instr_EX_i_reg[26]_0 ;
  input \instr_EX_i_reg[26]_1 ;
  input Clk;
  input [0:0]\Area_Debug_Control.dbg_brki_hit_i_2 ;
  input \Area_Debug_Control.dbg_brki_hit_i_2_0 ;
  input \Area_Debug_Control.dbg_brki_hit_i_2_1 ;
  input \Area_Debug_Control.dbg_brki_hit_i_2_2 ;
  input \Area_Debug_Control.dbg_brki_hit_i_2_3 ;
  input opsel2_Imm;
  input op2_Reg__4;

  wire [0:0]\Area_Debug_Control.dbg_brki_hit_i_2 ;
  wire \Area_Debug_Control.dbg_brki_hit_i_2_0 ;
  wire \Area_Debug_Control.dbg_brki_hit_i_2_1 ;
  wire \Area_Debug_Control.dbg_brki_hit_i_2_2 ;
  wire \Area_Debug_Control.dbg_brki_hit_i_2_3 ;
  wire CI;
  wire Clk;
  wire D_21;
  wire \Serial_Dbg_Intf.control_reg_reg[8] ;
  wire \Using_FPGA.Native ;
  wire [0:0]Y;
  wire \instr_EX_i_reg[26] ;
  wire \instr_EX_i_reg[26]_0 ;
  wire \instr_EX_i_reg[26]_1 ;
  wire op2_Reg__4;
  wire opsel2_Imm;

  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFD)) 
    \Area_Debug_Control.dbg_brki_hit_i_4 
       (.I0(\Area_Debug_Control.dbg_brki_hit_i_2 ),
        .I1(\Using_FPGA.Native ),
        .I2(\Area_Debug_Control.dbg_brki_hit_i_2_0 ),
        .I3(\Area_Debug_Control.dbg_brki_hit_i_2_1 ),
        .I4(\Area_Debug_Control.dbg_brki_hit_i_2_2 ),
        .I5(\Area_Debug_Control.dbg_brki_hit_i_2_3 ),
        .O(\Serial_Dbg_Intf.control_reg_reg[8] ));
  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[26].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[26] ),
        .A1(\instr_EX_i_reg[26]_0 ),
        .A2(\instr_EX_i_reg[26]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(\Using_FPGA.Native ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__20 
       (.I0(\Using_FPGA.Native ),
        .I1(opsel2_Imm),
        .I2(op2_Reg__4),
        .O(D_21));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E_142
   (\Using_FPGA.Native ,
    dbg_brki_hit0,
    \Serial_Dbg_Intf.control_reg_reg[8] ,
    D_20,
    CI,
    Y,
    \instr_EX_i_reg[27] ,
    \instr_EX_i_reg[27]_0 ,
    \instr_EX_i_reg[27]_1 ,
    Clk,
    \Area_Debug_Control.dbg_brki_hit_reg ,
    dbg_brki_hit,
    \Area_Debug_Control.dbg_brki_hit_reg_0 ,
    \Area_Debug_Control.dbg_brki_hit_reg_1 ,
    \Area_Debug_Control.dbg_brki_hit_reg_2 ,
    \Area_Debug_Control.dbg_brki_hit_reg_3 ,
    \Area_Debug_Control.dbg_brki_hit_reg_4 ,
    \Area_Debug_Control.dbg_brki_hit_i_2_0 ,
    D,
    \Area_Debug_Control.dbg_brki_hit_i_2_1 ,
    \Area_Debug_Control.dbg_brki_hit_i_3_0 ,
    opsel2_Imm,
    op2_Reg__3);
  output \Using_FPGA.Native ;
  output dbg_brki_hit0;
  output \Serial_Dbg_Intf.control_reg_reg[8] ;
  output D_20;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[27] ;
  input \instr_EX_i_reg[27]_0 ;
  input \instr_EX_i_reg[27]_1 ;
  input Clk;
  input \Area_Debug_Control.dbg_brki_hit_reg ;
  input dbg_brki_hit;
  input \Area_Debug_Control.dbg_brki_hit_reg_0 ;
  input \Area_Debug_Control.dbg_brki_hit_reg_1 ;
  input \Area_Debug_Control.dbg_brki_hit_reg_2 ;
  input \Area_Debug_Control.dbg_brki_hit_reg_3 ;
  input \Area_Debug_Control.dbg_brki_hit_reg_4 ;
  input \Area_Debug_Control.dbg_brki_hit_i_2_0 ;
  input [4:0]D;
  input \Area_Debug_Control.dbg_brki_hit_i_2_1 ;
  input \Area_Debug_Control.dbg_brki_hit_i_3_0 ;
  input opsel2_Imm;
  input op2_Reg__3;

  wire \Area_Debug_Control.dbg_brki_hit_i_2_0 ;
  wire \Area_Debug_Control.dbg_brki_hit_i_2_1 ;
  wire \Area_Debug_Control.dbg_brki_hit_i_3_0 ;
  wire \Area_Debug_Control.dbg_brki_hit_i_3_n_0 ;
  wire \Area_Debug_Control.dbg_brki_hit_i_5_n_0 ;
  wire \Area_Debug_Control.dbg_brki_hit_reg ;
  wire \Area_Debug_Control.dbg_brki_hit_reg_0 ;
  wire \Area_Debug_Control.dbg_brki_hit_reg_1 ;
  wire \Area_Debug_Control.dbg_brki_hit_reg_2 ;
  wire \Area_Debug_Control.dbg_brki_hit_reg_3 ;
  wire \Area_Debug_Control.dbg_brki_hit_reg_4 ;
  wire CI;
  wire Clk;
  wire [4:0]D;
  wire D_20;
  wire \Serial_Dbg_Intf.control_reg_reg[8] ;
  wire \Using_FPGA.Native ;
  wire [0:0]Y;
  wire dbg_brki_hit;
  wire dbg_brki_hit0;
  wire \instr_EX_i_reg[27] ;
  wire \instr_EX_i_reg[27]_0 ;
  wire \instr_EX_i_reg[27]_1 ;
  wire op2_Reg__3;
  wire opsel2_Imm;

  LUT3 #(
    .INIT(8'hBA)) 
    \Area_Debug_Control.dbg_brki_hit_i_1 
       (.I0(\Serial_Dbg_Intf.control_reg_reg[8] ),
        .I1(\Area_Debug_Control.dbg_brki_hit_reg ),
        .I2(dbg_brki_hit),
        .O(dbg_brki_hit0));
  LUT6 #(
    .INIT(64'h0200000000000000)) 
    \Area_Debug_Control.dbg_brki_hit_i_2 
       (.I0(\Area_Debug_Control.dbg_brki_hit_i_3_n_0 ),
        .I1(\Area_Debug_Control.dbg_brki_hit_reg_0 ),
        .I2(\Area_Debug_Control.dbg_brki_hit_reg_1 ),
        .I3(\Area_Debug_Control.dbg_brki_hit_reg_2 ),
        .I4(\Area_Debug_Control.dbg_brki_hit_reg_3 ),
        .I5(\Area_Debug_Control.dbg_brki_hit_reg_4 ),
        .O(\Serial_Dbg_Intf.control_reg_reg[8] ));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \Area_Debug_Control.dbg_brki_hit_i_3 
       (.I0(\Area_Debug_Control.dbg_brki_hit_i_5_n_0 ),
        .I1(\Area_Debug_Control.dbg_brki_hit_i_2_0 ),
        .I2(D[4]),
        .I3(D[0]),
        .I4(D[3]),
        .I5(\Area_Debug_Control.dbg_brki_hit_i_2_1 ),
        .O(\Area_Debug_Control.dbg_brki_hit_i_3_n_0 ));
  LUT4 #(
    .INIT(16'hFFDF)) 
    \Area_Debug_Control.dbg_brki_hit_i_5 
       (.I0(\Using_FPGA.Native ),
        .I1(D[2]),
        .I2(D[1]),
        .I3(\Area_Debug_Control.dbg_brki_hit_i_3_0 ),
        .O(\Area_Debug_Control.dbg_brki_hit_i_5_n_0 ));
  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[27].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[27] ),
        .A1(\instr_EX_i_reg[27]_0 ),
        .A2(\instr_EX_i_reg[27]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(\Using_FPGA.Native ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__19 
       (.I0(\Using_FPGA.Native ),
        .I1(opsel2_Imm),
        .I2(op2_Reg__3),
        .O(D_20));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E_143
   (D,
    D_19,
    CI,
    Y,
    \instr_EX_i_reg[28] ,
    \instr_EX_i_reg[28]_0 ,
    \instr_EX_i_reg[28]_1 ,
    Clk,
    opsel2_Imm,
    op2_Reg__2);
  output [0:0]D;
  output D_19;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[28] ;
  input \instr_EX_i_reg[28]_0 ;
  input \instr_EX_i_reg[28]_1 ;
  input Clk;
  input opsel2_Imm;
  input op2_Reg__2;

  wire CI;
  wire Clk;
  wire [0:0]D;
  wire D_19;
  wire [0:0]Y;
  wire \instr_EX_i_reg[28] ;
  wire \instr_EX_i_reg[28]_0 ;
  wire \instr_EX_i_reg[28]_1 ;
  wire op2_Reg__2;
  wire opsel2_Imm;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[28].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[28] ),
        .A1(\instr_EX_i_reg[28]_0 ),
        .A2(\instr_EX_i_reg[28]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(D));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__18 
       (.I0(D),
        .I1(opsel2_Imm),
        .I2(op2_Reg__2),
        .O(D_19));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E_144
   (D,
    D_18,
    CI,
    Y,
    \instr_EX_i_reg[29] ,
    \instr_EX_i_reg[29]_0 ,
    \instr_EX_i_reg[29]_1 ,
    Clk,
    opsel2_Imm,
    op2_Reg__1);
  output [0:0]D;
  output D_18;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[29] ;
  input \instr_EX_i_reg[29]_0 ;
  input \instr_EX_i_reg[29]_1 ;
  input Clk;
  input opsel2_Imm;
  input op2_Reg__1;

  wire CI;
  wire Clk;
  wire [0:0]D;
  wire D_18;
  wire [0:0]Y;
  wire \instr_EX_i_reg[29] ;
  wire \instr_EX_i_reg[29]_0 ;
  wire \instr_EX_i_reg[29]_1 ;
  wire op2_Reg__1;
  wire opsel2_Imm;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[29].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[29] ),
        .A1(\instr_EX_i_reg[29]_0 ),
        .A2(\instr_EX_i_reg[29]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(D));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__17 
       (.I0(D),
        .I1(opsel2_Imm),
        .I2(op2_Reg__1),
        .O(D_18));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E_145
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    is_swx_I0,
    \Using_FPGA.Native_1 ,
    opsel2_Imm,
    BitField_Insert0,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    CI,
    Y,
    \instr_EX_i_reg[2] ,
    \instr_EX_i_reg[2]_0 ,
    \instr_EX_i_reg[2]_1 ,
    Clk,
    \Using_FSL_Links.mb_Get_i_reg ,
    \Using_FSL_Links.mb_Get_i_reg_0 ,
    \Using_FSL_Links.mb_Get_i_reg_1 ,
    \Using_FSL_Links.mb_Get_i_reg_2 ,
    \Using_FSL_Links.mb_Get_i_reg_3 ,
    is_swx_I_reg,
    \Using_FPGA.Native_4 ,
    is_swx_I_reg_0,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    \Using_FPGA.Native_7 ,
    take_Intr_Now_II,
    \Using_FPGA.Native_8 ,
    \Using_Barrel_Shifter.BitField_Insert_reg ,
    S115_out,
    force_Val2_N,
    \Using_FPGA.Native_9 ,
    take_Intr_Now_III,
    \Using_FPGA.Native_10 );
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output is_swx_I0;
  output \Using_FPGA.Native_1 ;
  output opsel2_Imm;
  output BitField_Insert0;
  output \Using_FPGA.Native_2 ;
  output \Using_FPGA.Native_3 ;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[2] ;
  input \instr_EX_i_reg[2]_0 ;
  input \instr_EX_i_reg[2]_1 ;
  input Clk;
  input \Using_FSL_Links.mb_Get_i_reg ;
  input \Using_FSL_Links.mb_Get_i_reg_0 ;
  input \Using_FSL_Links.mb_Get_i_reg_1 ;
  input \Using_FSL_Links.mb_Get_i_reg_2 ;
  input \Using_FSL_Links.mb_Get_i_reg_3 ;
  input is_swx_I_reg;
  input \Using_FPGA.Native_4 ;
  input is_swx_I_reg_0;
  input \Using_FPGA.Native_5 ;
  input \Using_FPGA.Native_6 ;
  input \Using_FPGA.Native_7 ;
  input take_Intr_Now_II;
  input \Using_FPGA.Native_8 ;
  input \Using_Barrel_Shifter.BitField_Insert_reg ;
  input S115_out;
  input force_Val2_N;
  input \Using_FPGA.Native_9 ;
  input take_Intr_Now_III;
  input \Using_FPGA.Native_10 ;

  wire BitField_Insert0;
  wire CI;
  wire Clk;
  wire S115_out;
  wire \Using_Barrel_Shifter.BitField_Insert_reg ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_10 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire \Using_FPGA.Native_8 ;
  wire \Using_FPGA.Native_9 ;
  wire \Using_FSL_Links.mb_Get_i_reg ;
  wire \Using_FSL_Links.mb_Get_i_reg_0 ;
  wire \Using_FSL_Links.mb_Get_i_reg_1 ;
  wire \Using_FSL_Links.mb_Get_i_reg_2 ;
  wire \Using_FSL_Links.mb_Get_i_reg_3 ;
  wire [0:0]Y;
  wire force_Val2_N;
  wire \instr_EX_i_reg[2] ;
  wire \instr_EX_i_reg[2]_0 ;
  wire \instr_EX_i_reg[2]_1 ;
  wire is_swx_I0;
  wire is_swx_I_reg;
  wire is_swx_I_reg_0;
  wire opsel2_Imm;
  wire take_Intr_Now_II;
  wire take_Intr_Now_III;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[2].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[2] ),
        .A1(\instr_EX_i_reg[2]_0 ),
        .A2(\instr_EX_i_reg[2]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(\Using_FPGA.Native ));
  LUT2 #(
    .INIT(4'h8)) 
    \Using_Barrel_Shifter.BitField_Insert_i_1 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_Barrel_Shifter.BitField_Insert_reg ),
        .O(BitField_Insert0));
  LUT6 #(
    .INIT(64'hFEFEAEFEFEFEFEFE)) 
    \Using_FPGA.Native_i_1__166 
       (.I0(S115_out),
        .I1(force_Val2_N),
        .I2(\Using_FPGA.Native_9 ),
        .I3(\Using_FPGA.Native_1 ),
        .I4(take_Intr_Now_III),
        .I5(\Using_FPGA.Native_10 ),
        .O(\Using_FPGA.Native_3 ));
  LUT6 #(
    .INIT(64'h4454444444444444)) 
    \Using_FPGA.Native_i_2__38 
       (.I0(take_Intr_Now_II),
        .I1(\Using_FPGA.Native ),
        .I2(\Using_FPGA.Native_4 ),
        .I3(\Using_FPGA.Native_5 ),
        .I4(\Using_FPGA.Native_8 ),
        .I5(\Using_FSL_Links.mb_Get_i_reg ),
        .O(opsel2_Imm));
  LUT6 #(
    .INIT(64'h000000002C000000)) 
    \Using_FPGA.Native_i_3__8 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(\Using_FPGA.Native_4 ),
        .I3(\Using_FSL_Links.mb_Get_i_reg ),
        .I4(\Using_FPGA.Native_6 ),
        .I5(\Using_FPGA.Native_7 ),
        .O(\Using_FPGA.Native_1 ));
  LUT6 #(
    .INIT(64'h00000000FFFF00B0)) 
    \Using_FSL_Links.mb_Get_i_i_1 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FSL_Links.mb_Get_i_reg ),
        .I2(\Using_FSL_Links.mb_Get_i_reg_0 ),
        .I3(\Using_FSL_Links.mb_Get_i_reg_1 ),
        .I4(\Using_FSL_Links.mb_Get_i_reg_2 ),
        .I5(\Using_FSL_Links.mb_Get_i_reg_3 ),
        .O(\Using_FPGA.Native_0 ));
  LUT5 #(
    .INIT(32'h20000000)) 
    \Using_FSL_Links.mb_Get_i_i_7 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.Native_6 ),
        .I2(\Using_FPGA.Native_7 ),
        .I3(\Using_FPGA.Native_5 ),
        .I4(\Using_FPGA.Native_4 ),
        .O(\Using_FPGA.Native_2 ));
  LUT6 #(
    .INIT(64'h0400000000000000)) 
    is_swx_I_i_2
       (.I0(\Using_FPGA.Native ),
        .I1(is_swx_I_reg),
        .I2(\Using_FPGA.Native_4 ),
        .I3(is_swx_I_reg_0),
        .I4(\Using_FSL_Links.mb_Get_i_reg ),
        .I5(\Using_FPGA.Native_5 ),
        .O(is_swx_I0));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E_146
   (\Using_FPGA.Native ,
    ex_mulhu_instr_i0,
    ex_mulh_instr_i0,
    D_17,
    CI,
    Y,
    \instr_EX_i_reg[30] ,
    \instr_EX_i_reg[30]_0 ,
    \instr_EX_i_reg[30]_1 ,
    Clk,
    \Using_Mul64.ex_mulh_instr_i_reg ,
    \Using_Mul64.ex_mulh_instr_i_reg_0 ,
    \Using_Mul64.ex_mulhu_instr_i_reg ,
    \Using_Mul64.ex_mulh_instr_i_reg_1 ,
    \Using_Mul64.ex_mulhu_instr_i_reg_0 ,
    opsel2_Imm,
    op2_Reg__0);
  output \Using_FPGA.Native ;
  output ex_mulhu_instr_i0;
  output ex_mulh_instr_i0;
  output D_17;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[30] ;
  input \instr_EX_i_reg[30]_0 ;
  input \instr_EX_i_reg[30]_1 ;
  input Clk;
  input \Using_Mul64.ex_mulh_instr_i_reg ;
  input \Using_Mul64.ex_mulh_instr_i_reg_0 ;
  input \Using_Mul64.ex_mulhu_instr_i_reg ;
  input \Using_Mul64.ex_mulh_instr_i_reg_1 ;
  input \Using_Mul64.ex_mulhu_instr_i_reg_0 ;
  input opsel2_Imm;
  input op2_Reg__0;

  wire CI;
  wire Clk;
  wire D_17;
  wire \Using_FPGA.Native ;
  wire \Using_Mul64.ex_mulh_instr_i_reg ;
  wire \Using_Mul64.ex_mulh_instr_i_reg_0 ;
  wire \Using_Mul64.ex_mulh_instr_i_reg_1 ;
  wire \Using_Mul64.ex_mulhu_instr_i_reg ;
  wire \Using_Mul64.ex_mulhu_instr_i_reg_0 ;
  wire [0:0]Y;
  wire ex_mulh_instr_i0;
  wire ex_mulhu_instr_i0;
  wire \instr_EX_i_reg[30] ;
  wire \instr_EX_i_reg[30]_0 ;
  wire \instr_EX_i_reg[30]_1 ;
  wire op2_Reg__0;
  wire opsel2_Imm;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[30].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[30] ),
        .A1(\instr_EX_i_reg[30]_0 ),
        .A2(\instr_EX_i_reg[30]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(\Using_FPGA.Native ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__16 
       (.I0(\Using_FPGA.Native ),
        .I1(opsel2_Imm),
        .I2(op2_Reg__0),
        .O(D_17));
  LUT6 #(
    .INIT(64'h0000000100000000)) 
    \Using_Mul64.ex_mulh_instr_i_i_1 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_Mul64.ex_mulh_instr_i_reg ),
        .I2(\Using_Mul64.ex_mulh_instr_i_reg_0 ),
        .I3(\Using_Mul64.ex_mulhu_instr_i_reg ),
        .I4(\Using_Mul64.ex_mulh_instr_i_reg_1 ),
        .I5(\Using_Mul64.ex_mulhu_instr_i_reg_0 ),
        .O(ex_mulh_instr_i0));
  LUT6 #(
    .INIT(64'h0000000200000000)) 
    \Using_Mul64.ex_mulhu_instr_i_i_1 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_Mul64.ex_mulh_instr_i_reg ),
        .I2(\Using_Mul64.ex_mulh_instr_i_reg_0 ),
        .I3(\Using_Mul64.ex_mulhu_instr_i_reg ),
        .I4(\Using_Mul64.ex_mulh_instr_i_reg_1 ),
        .I5(\Using_Mul64.ex_mulhu_instr_i_reg_0 ),
        .O(ex_mulhu_instr_i0));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E_147
   (\Using_FPGA.Native ,
    Sext16_reg,
    Sext8_reg,
    D_16,
    CI,
    Y,
    \instr_EX_i_reg[31] ,
    \instr_EX_i_reg[31]_0 ,
    \instr_EX_i_reg[31]_1 ,
    Clk,
    sext16,
    Sext16_reg_0,
    check_srx8_in,
    Sext8_reg_0,
    sync_reset,
    Sext8_reg_1,
    opsel2_Imm,
    op2_Reg);
  output \Using_FPGA.Native ;
  output Sext16_reg;
  output Sext8_reg;
  output D_16;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[31] ;
  input \instr_EX_i_reg[31]_0 ;
  input \instr_EX_i_reg[31]_1 ;
  input Clk;
  input sext16;
  input Sext16_reg_0;
  input check_srx8_in;
  input Sext8_reg_0;
  input sync_reset;
  input Sext8_reg_1;
  input opsel2_Imm;
  input op2_Reg;

  wire CI;
  wire Clk;
  wire D_16;
  wire Sext16_reg;
  wire Sext16_reg_0;
  wire Sext8_reg;
  wire Sext8_reg_0;
  wire Sext8_reg_1;
  wire \Using_FPGA.Native ;
  wire [0:0]Y;
  wire check_srx8_in;
  wire \instr_EX_i_reg[31] ;
  wire \instr_EX_i_reg[31]_0 ;
  wire \instr_EX_i_reg[31]_1 ;
  wire op2_Reg;
  wire opsel2_Imm;
  wire sext16;
  wire sync_reset;

  LUT6 #(
    .INIT(64'h000000000000E222)) 
    Sext16_i_1
       (.I0(sext16),
        .I1(Sext16_reg_0),
        .I2(\Using_FPGA.Native ),
        .I3(check_srx8_in),
        .I4(Sext8_reg_0),
        .I5(sync_reset),
        .O(Sext16_reg));
  LUT6 #(
    .INIT(64'h0000000000002E22)) 
    Sext8_i_1
       (.I0(Sext8_reg_1),
        .I1(Sext16_reg_0),
        .I2(\Using_FPGA.Native ),
        .I3(check_srx8_in),
        .I4(Sext8_reg_0),
        .I5(sync_reset),
        .O(Sext8_reg));
  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[31].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[31] ),
        .A1(\instr_EX_i_reg[31]_0 ),
        .A2(\instr_EX_i_reg[31]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(\Using_FPGA.Native ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__15 
       (.I0(\Using_FPGA.Native ),
        .I1(opsel2_Imm),
        .I2(op2_Reg),
        .O(D_16));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E_148
   (instr_OF_raw,
    S,
    CI,
    Instr_Data,
    \Using_FSL_Links.FSL_Atomic_reg ,
    \Using_FSL_Links.FSL_Atomic_reg_0 ,
    \Using_FSL_Links.FSL_Atomic_reg_1 ,
    Clk,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    break_Pipe_i_reg__0);
  output [0:0]instr_OF_raw;
  output S;
  input CI;
  input [0:0]Instr_Data;
  input \Using_FSL_Links.FSL_Atomic_reg ;
  input \Using_FSL_Links.FSL_Atomic_reg_0 ;
  input \Using_FSL_Links.FSL_Atomic_reg_1 ;
  input Clk;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input break_Pipe_i_reg__0;

  wire CI;
  wire Clk;
  wire [0:0]Instr_Data;
  wire S;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FSL_Links.FSL_Atomic_reg ;
  wire \Using_FSL_Links.FSL_Atomic_reg_0 ;
  wire \Using_FSL_Links.FSL_Atomic_reg_1 ;
  wire break_Pipe_i_reg__0;
  wire [0:0]instr_OF_raw;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[32].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\Using_FSL_Links.FSL_Atomic_reg ),
        .A1(\Using_FSL_Links.FSL_Atomic_reg_0 ),
        .A2(\Using_FSL_Links.FSL_Atomic_reg_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Instr_Data),
        .Q(instr_OF_raw));
  LUT5 #(
    .INIT(32'hAAAABFAA)) 
    \Using_FPGA.Native_i_1__136 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(break_Pipe_i_reg__0),
        .I4(instr_OF_raw),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E_149
   (\Using_FPGA.Native ,
    inHibit_EX_reg,
    \Using_FPGA.Native_0 ,
    Reg_Test_Equal_N_i13_out,
    \Using_FPGA.Native_1 ,
    use_Reg_Neg_S_i42_out,
    force_Val1_i41_out,
    use_Reg_Neg_DI_i40_out,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    CI,
    Y,
    \instr_EX_i_reg[3] ,
    \instr_EX_i_reg[3]_0 ,
    \instr_EX_i_reg[3]_1 ,
    Clk,
    jump2_I_reg,
    inHibit_EX,
    write_Carry_I_reg,
    write_Carry_I_reg_0,
    \Use_The_PCMP_instr.PCMP_Instr_reg ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    take_Intr_Now_III,
    \Using_FPGA.Native_6 ,
    \Using_FPGA.Native_7 ,
    \Using_FPGA.Native_8 ,
    write_Carry_I_reg_1,
    write_Carry_I_reg_2,
    write_Carry_I_reg_3,
    \Use_The_PCMP_instr.PCMP_Instr_reg_0 );
  output \Using_FPGA.Native ;
  output inHibit_EX_reg;
  output \Using_FPGA.Native_0 ;
  output Reg_Test_Equal_N_i13_out;
  output \Using_FPGA.Native_1 ;
  output use_Reg_Neg_S_i42_out;
  output force_Val1_i41_out;
  output use_Reg_Neg_DI_i40_out;
  output \Using_FPGA.Native_2 ;
  output \Using_FPGA.Native_3 ;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[3] ;
  input \instr_EX_i_reg[3]_0 ;
  input \instr_EX_i_reg[3]_1 ;
  input Clk;
  input jump2_I_reg;
  input inHibit_EX;
  input write_Carry_I_reg;
  input write_Carry_I_reg_0;
  input \Use_The_PCMP_instr.PCMP_Instr_reg ;
  input \Using_FPGA.Native_4 ;
  input \Using_FPGA.Native_5 ;
  input take_Intr_Now_III;
  input \Using_FPGA.Native_6 ;
  input \Using_FPGA.Native_7 ;
  input \Using_FPGA.Native_8 ;
  input write_Carry_I_reg_1;
  input write_Carry_I_reg_2;
  input write_Carry_I_reg_3;
  input \Use_The_PCMP_instr.PCMP_Instr_reg_0 ;

  wire CI;
  wire Clk;
  wire Reg_Test_Equal_N_i13_out;
  wire \Use_The_PCMP_instr.PCMP_Instr_reg ;
  wire \Use_The_PCMP_instr.PCMP_Instr_reg_0 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire \Using_FPGA.Native_8 ;
  wire [0:0]Y;
  wire force_Val1_i41_out;
  wire inHibit_EX;
  wire inHibit_EX_reg;
  wire \instr_EX_i_reg[3] ;
  wire \instr_EX_i_reg[3]_0 ;
  wire \instr_EX_i_reg[3]_1 ;
  wire jump2_I_reg;
  wire take_Intr_Now_III;
  wire use_Reg_Neg_DI_i40_out;
  wire use_Reg_Neg_S_i42_out;
  wire write_Carry_I_reg;
  wire write_Carry_I_reg_0;
  wire write_Carry_I_reg_1;
  wire write_Carry_I_reg_2;
  wire write_Carry_I_reg_3;

  LUT5 #(
    .INIT(32'h00100000)) 
    \Use_The_PCMP_instr.PCMP_Instr_i_1 
       (.I0(\Using_FPGA.Native ),
        .I1(\Use_The_PCMP_instr.PCMP_Instr_reg ),
        .I2(\Use_The_PCMP_instr.PCMP_Instr_reg_0 ),
        .I3(write_Carry_I_reg_0),
        .I4(write_Carry_I_reg),
        .O(\Using_FPGA.Native_3 ));
  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[3].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[3] ),
        .A1(\instr_EX_i_reg[3]_0 ),
        .A2(\instr_EX_i_reg[3]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(\Using_FPGA.Native ));
  (* SOFT_HLUTNM = "soft_lutpair35" *) 
  LUT5 #(
    .INIT(32'h00010100)) 
    \Using_FPGA.Native_i_1__124 
       (.I0(\Using_FPGA.Native_1 ),
        .I1(take_Intr_Now_III),
        .I2(\Using_FPGA.Native_6 ),
        .I3(\Using_FPGA.Native_7 ),
        .I4(\Using_FPGA.Native_8 ),
        .O(Reg_Test_Equal_N_i13_out));
  (* SOFT_HLUTNM = "soft_lutpair35" *) 
  LUT5 #(
    .INIT(32'h01000010)) 
    \Using_FPGA.Native_i_1__125 
       (.I0(\Using_FPGA.Native_1 ),
        .I1(take_Intr_Now_III),
        .I2(\Using_FPGA.Native_7 ),
        .I3(\Using_FPGA.Native_6 ),
        .I4(\Using_FPGA.Native_8 ),
        .O(use_Reg_Neg_S_i42_out));
  (* SOFT_HLUTNM = "soft_lutpair36" *) 
  LUT4 #(
    .INIT(16'h0010)) 
    \Using_FPGA.Native_i_1__126 
       (.I0(\Using_FPGA.Native_1 ),
        .I1(take_Intr_Now_III),
        .I2(\Using_FPGA.Native_6 ),
        .I3(\Using_FPGA.Native_7 ),
        .O(force_Val1_i41_out));
  (* SOFT_HLUTNM = "soft_lutpair36" *) 
  LUT5 #(
    .INIT(32'h01000010)) 
    \Using_FPGA.Native_i_1__127 
       (.I0(\Using_FPGA.Native_1 ),
        .I1(take_Intr_Now_III),
        .I2(\Using_FPGA.Native_6 ),
        .I3(\Using_FPGA.Native_7 ),
        .I4(\Using_FPGA.Native_8 ),
        .O(use_Reg_Neg_DI_i40_out));
  LUT5 #(
    .INIT(32'hFF7FFFFF)) 
    \Using_FPGA.Native_i_3__19 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(\Using_FPGA.Native_4 ),
        .I3(write_Carry_I_reg_0),
        .I4(write_Carry_I_reg),
        .O(\Using_FPGA.Native_1 ));
  LUT5 #(
    .INIT(32'hFFFFD5FF)) 
    jump2_I_i_2
       (.I0(\Using_FPGA.Native ),
        .I1(jump2_I_reg),
        .I2(inHibit_EX),
        .I3(write_Carry_I_reg),
        .I4(write_Carry_I_reg_0),
        .O(inHibit_EX_reg));
  LUT6 #(
    .INIT(64'h01FFFFFF01010101)) 
    write_Carry_I_i_1
       (.I0(\Using_FPGA.Native ),
        .I1(write_Carry_I_reg_0),
        .I2(write_Carry_I_reg),
        .I3(write_Carry_I_reg_1),
        .I4(write_Carry_I_reg_2),
        .I5(write_Carry_I_reg_3),
        .O(\Using_FPGA.Native_2 ));
  LUT6 #(
    .INIT(64'h0F5F0FFF0FFF0F7F)) 
    write_Reg_i_4
       (.I0(\Using_FPGA.Native ),
        .I1(\Use_The_PCMP_instr.PCMP_Instr_reg ),
        .I2(write_Carry_I_reg),
        .I3(write_Carry_I_reg_0),
        .I4(\Using_FPGA.Native_4 ),
        .I5(\Using_FPGA.Native_5 ),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E_150
   (\Using_FPGA.Native ,
    ex_mulhsu_instr_i0,
    \Using_FPGA.Native_0 ,
    \Use_Async_Reset.sync_reset_reg ,
    Not_MB_Get_Op0,
    use_ALU_Carry21_out,
    doublet_i_reg,
    byte_i_reg,
    \Using_FPGA.Native_1 ,
    CI,
    Y,
    \instr_EX_i_reg[4] ,
    \instr_EX_i_reg[4]_0 ,
    \instr_EX_i_reg[4]_1 ,
    Clk,
    \Using_Mul64.ex_mulhsu_instr_i_reg ,
    \Using_Barrel_Shifter.Not_Barrel_Op_reg ,
    \Using_Mul64.ex_mulhsu_instr_i_reg_0 ,
    D,
    \Using_FSL_Links.Not_MB_Get_Op_reg ,
    doublet_i_reg_0,
    sync_reset,
    using_Imm_reg,
    using_Imm_reg_0,
    isdoublet,
    byte_i27_out,
    isbyte,
    take_Intr_Now_III);
  output \Using_FPGA.Native ;
  output ex_mulhsu_instr_i0;
  output \Using_FPGA.Native_0 ;
  output \Use_Async_Reset.sync_reset_reg ;
  output Not_MB_Get_Op0;
  output use_ALU_Carry21_out;
  output doublet_i_reg;
  output byte_i_reg;
  output \Using_FPGA.Native_1 ;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[4] ;
  input \instr_EX_i_reg[4]_0 ;
  input \instr_EX_i_reg[4]_1 ;
  input Clk;
  input \Using_Mul64.ex_mulhsu_instr_i_reg ;
  input \Using_Barrel_Shifter.Not_Barrel_Op_reg ;
  input \Using_Mul64.ex_mulhsu_instr_i_reg_0 ;
  input [1:0]D;
  input \Using_FSL_Links.Not_MB_Get_Op_reg ;
  input doublet_i_reg_0;
  input sync_reset;
  input using_Imm_reg;
  input using_Imm_reg_0;
  input isdoublet;
  input byte_i27_out;
  input isbyte;
  input take_Intr_Now_III;

  wire CI;
  wire Clk;
  wire [1:0]D;
  wire Not_MB_Get_Op0;
  wire \Use_Async_Reset.sync_reset_reg ;
  wire \Using_Barrel_Shifter.Not_Barrel_Op_reg ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FSL_Links.Not_MB_Get_Op_reg ;
  wire \Using_Mul64.ex_mulhsu_instr_i_reg ;
  wire \Using_Mul64.ex_mulhsu_instr_i_reg_0 ;
  wire [0:0]Y;
  wire byte_i27_out;
  wire byte_i_reg;
  wire doublet_i_reg;
  wire doublet_i_reg_0;
  wire ex_mulhsu_instr_i0;
  wire \instr_EX_i_reg[4] ;
  wire \instr_EX_i_reg[4]_0 ;
  wire \instr_EX_i_reg[4]_1 ;
  wire isbyte;
  wire isdoublet;
  wire sync_reset;
  wire take_Intr_Now_III;
  wire use_ALU_Carry21_out;
  wire using_Imm_reg;
  wire using_Imm_reg_0;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[4].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[4] ),
        .A1(\instr_EX_i_reg[4]_0 ),
        .A2(\instr_EX_i_reg[4]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(\Using_FPGA.Native ));
  (* SOFT_HLUTNM = "soft_lutpair37" *) 
  LUT5 #(
    .INIT(32'hFFFFFDFF)) 
    \Using_Barrel_Shifter.Not_Barrel_Op_i_1 
       (.I0(doublet_i_reg_0),
        .I1(sync_reset),
        .I2(\Using_FPGA.Native ),
        .I3(\Using_FSL_Links.Not_MB_Get_Op_reg ),
        .I4(\Using_Barrel_Shifter.Not_Barrel_Op_reg ),
        .O(\Use_Async_Reset.sync_reset_reg ));
  (* SOFT_HLUTNM = "soft_lutpair38" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \Using_FPGA.Native_i_3__10 
       (.I0(\Using_FPGA.Native ),
        .I1(using_Imm_reg),
        .I2(using_Imm_reg_0),
        .O(use_ALU_Carry21_out));
  (* SOFT_HLUTNM = "soft_lutpair38" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \Using_FSL_Links.Not_MB_Get_Op_i_1 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FSL_Links.Not_MB_Get_Op_reg ),
        .O(Not_MB_Get_Op0));
  LUT6 #(
    .INIT(64'h0000000000010000)) 
    \Using_Mul64.ex_mulhsu_instr_i_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_Mul64.ex_mulhsu_instr_i_reg ),
        .I2(\Using_Barrel_Shifter.Not_Barrel_Op_reg ),
        .I3(\Using_Mul64.ex_mulhsu_instr_i_reg_0 ),
        .I4(D[1]),
        .I5(D[0]),
        .O(ex_mulhsu_instr_i0));
  (* SOFT_HLUTNM = "soft_lutpair37" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \Using_Mul_Instr.ex_not_mul_op_i_i_1 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FSL_Links.Not_MB_Get_Op_reg ),
        .O(\Using_FPGA.Native_0 ));
  LUT6 #(
    .INIT(64'h000000000000222E)) 
    byte_i_i_1
       (.I0(isbyte),
        .I1(doublet_i_reg_0),
        .I2(\Using_FPGA.Native ),
        .I3(\Using_FSL_Links.Not_MB_Get_Op_reg ),
        .I4(byte_i27_out),
        .I5(sync_reset),
        .O(byte_i_reg));
  LUT6 #(
    .INIT(64'h0000000000002E22)) 
    doublet_i_i_1
       (.I0(isdoublet),
        .I1(doublet_i_reg_0),
        .I2(\Using_FPGA.Native ),
        .I3(\Using_FSL_Links.Not_MB_Get_Op_reg ),
        .I4(byte_i27_out),
        .I5(sync_reset),
        .O(doublet_i_reg));
  LUT6 #(
    .INIT(64'hFEFFFFFFFFFFFFFF)) 
    using_Imm_i_2
       (.I0(take_Intr_Now_III),
        .I1(\Using_FPGA.Native_0 ),
        .I2(using_Imm_reg_0),
        .I3(using_Imm_reg),
        .I4(\Using_Mul64.ex_mulhsu_instr_i_reg_0 ),
        .I5(\Using_Barrel_Shifter.Not_Barrel_Op_reg ),
        .O(\Using_FPGA.Native_1 ));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E_151
   (\Using_FPGA.Native ,
    mul_Executing0,
    msrxxx_write_carry,
    \Using_FPGA.Native_0 ,
    of_mbar_decode,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    \Using_FPGA.Native_3 ,
    CLZ_Instr0,
    p_20_in,
    mb_Put_i5_out,
    \Using_FPGA.Native_4 ,
    is_lwx_I_reg,
    \Using_FPGA.Native_5 ,
    I3,
    I3_32,
    I3_33,
    I3_34,
    CI,
    Y,
    \instr_EX_i_reg[5] ,
    \instr_EX_i_reg[5]_0 ,
    \instr_EX_i_reg[5]_1 ,
    Clk,
    mul_Executing_reg,
    mul_first,
    mul_Executing_reg_0,
    FSL_Put_Inhibit,
    mbar_first,
    mul_Executing_reg_1,
    \Using_FSL_Links.mb_Get_i_reg ,
    \Using_FSL_Links.mb_Get_i_reg_0 ,
    \Using_FSL_Links.mb_Get_i_reg_1 ,
    \Using_MSR_Instr.msrxxx_write_carry_reg ,
    D,
    \Using_MSR_Instr.msrxxx_write_carry_reg_0 ,
    inHibit_EX,
    mbar_decode_I_reg,
    mbar_decode_I_reg_0,
    mbar_decode_I_reg_1,
    mbar_decode_I_reg_2,
    take_Intr_Now_III,
    \Using_FPGA.Native_i_1__39 ,
    Sext8_reg,
    is_lwx_I_reg_0,
    \Use_The_PCMP_instr.CLZ_Instr_reg ,
    \Use_The_PCMP_instr.CLZ_Instr_reg_0 ,
    \Use_The_PCMP_instr.CLZ_Instr_reg_1 ,
    \Using_FSL_Links.mb_Put_i_reg ,
    is_lwx_I,
    is_lwx_I_reg_1,
    is_lwx_I_reg_2,
    is_swx_I,
    PC_OF);
  output \Using_FPGA.Native ;
  output mul_Executing0;
  output msrxxx_write_carry;
  output \Using_FPGA.Native_0 ;
  output of_mbar_decode;
  output \Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output \Using_FPGA.Native_3 ;
  output CLZ_Instr0;
  output p_20_in;
  output mb_Put_i5_out;
  output \Using_FPGA.Native_4 ;
  output is_lwx_I_reg;
  output \Using_FPGA.Native_5 ;
  output I3;
  output I3_32;
  output I3_33;
  output I3_34;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[5] ;
  input \instr_EX_i_reg[5]_0 ;
  input \instr_EX_i_reg[5]_1 ;
  input Clk;
  input [0:0]mul_Executing_reg;
  input mul_first;
  input mul_Executing_reg_0;
  input FSL_Put_Inhibit;
  input mbar_first;
  input mul_Executing_reg_1;
  input \Using_FSL_Links.mb_Get_i_reg ;
  input \Using_FSL_Links.mb_Get_i_reg_0 ;
  input \Using_FSL_Links.mb_Get_i_reg_1 ;
  input \Using_MSR_Instr.msrxxx_write_carry_reg ;
  input [0:0]D;
  input \Using_MSR_Instr.msrxxx_write_carry_reg_0 ;
  input inHibit_EX;
  input mbar_decode_I_reg;
  input mbar_decode_I_reg_0;
  input mbar_decode_I_reg_1;
  input [2:0]mbar_decode_I_reg_2;
  input take_Intr_Now_III;
  input \Using_FPGA.Native_i_1__39 ;
  input Sext8_reg;
  input is_lwx_I_reg_0;
  input \Use_The_PCMP_instr.CLZ_Instr_reg ;
  input \Use_The_PCMP_instr.CLZ_Instr_reg_0 ;
  input \Use_The_PCMP_instr.CLZ_Instr_reg_1 ;
  input \Using_FSL_Links.mb_Put_i_reg ;
  input is_lwx_I;
  input is_lwx_I_reg_1;
  input is_lwx_I_reg_2;
  input is_swx_I;
  input [3:0]PC_OF;

  wire CI;
  wire CLZ_Instr0;
  wire Clk;
  wire [0:0]D;
  wire FSL_Put_Inhibit;
  wire I3;
  wire I3_32;
  wire I3_33;
  wire I3_34;
  wire [3:0]PC_OF;
  wire Sext8_reg;
  wire \Use_The_PCMP_instr.CLZ_Instr_reg ;
  wire \Use_The_PCMP_instr.CLZ_Instr_reg_0 ;
  wire \Use_The_PCMP_instr.CLZ_Instr_reg_1 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_i_1__39 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire \Using_FSL_Links.mb_Get_i_reg ;
  wire \Using_FSL_Links.mb_Get_i_reg_0 ;
  wire \Using_FSL_Links.mb_Get_i_reg_1 ;
  wire \Using_FSL_Links.mb_Put_i_reg ;
  wire \Using_MSR_Instr.msrxxx_write_carry_reg ;
  wire \Using_MSR_Instr.msrxxx_write_carry_reg_0 ;
  wire [0:0]Y;
  wire inHibit_EX;
  wire \instr_EX_i_reg[5] ;
  wire \instr_EX_i_reg[5]_0 ;
  wire \instr_EX_i_reg[5]_1 ;
  wire is_lwx_I;
  wire is_lwx_I_reg;
  wire is_lwx_I_reg_0;
  wire is_lwx_I_reg_1;
  wire is_lwx_I_reg_2;
  wire is_swx_I;
  wire mb_Put_i5_out;
  wire mbar_decode_I_reg;
  wire mbar_decode_I_reg_0;
  wire mbar_decode_I_reg_1;
  wire [2:0]mbar_decode_I_reg_2;
  wire mbar_first;
  wire msrxxx_write_carry;
  wire mul_Executing0;
  wire mul_Executing_i_2_n_0;
  wire [0:0]mul_Executing_reg;
  wire mul_Executing_reg_0;
  wire mul_Executing_reg_1;
  wire mul_first;
  wire of_mbar_decode;
  wire p_20_in;
  wire take_Intr_Now_III;

  LUT3 #(
    .INIT(8'hB0)) 
    Sign_Extend_i_2
       (.I0(Sext8_reg),
        .I1(\Using_FPGA.Native_3 ),
        .I2(is_lwx_I_reg_0),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
  LUT4 #(
    .INIT(16'h8000)) 
    \Use_The_PCMP_instr.CLZ_Instr_i_1 
       (.I0(\Using_FPGA.Native_3 ),
        .I1(\Use_The_PCMP_instr.CLZ_Instr_reg ),
        .I2(\Use_The_PCMP_instr.CLZ_Instr_reg_0 ),
        .I3(\Use_The_PCMP_instr.CLZ_Instr_reg_1 ),
        .O(CLZ_Instr0));
  LUT6 #(
    .INIT(64'h0000001000000000)) 
    \Use_The_PCMP_instr.CLZ_Instr_i_2 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FSL_Links.mb_Get_i_reg ),
        .I2(\Using_FSL_Links.mb_Get_i_reg_0 ),
        .I3(\Using_FSL_Links.mb_Get_i_reg_1 ),
        .I4(mbar_decode_I_reg_0),
        .I5(mbar_decode_I_reg),
        .O(\Using_FPGA.Native_3 ));
  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[5].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[5] ),
        .A1(\instr_EX_i_reg[5]_0 ),
        .A2(\instr_EX_i_reg[5]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(\Using_FPGA.Native ));
  LUT5 #(
    .INIT(32'hFFFFFF7F)) 
    \Using_FPGA.Native_i_1__132 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FSL_Links.mb_Get_i_reg ),
        .I2(\Using_FSL_Links.mb_Get_i_reg_1 ),
        .I3(\Using_FSL_Links.mb_Get_i_reg_0 ),
        .I4(mbar_decode_I_reg),
        .O(p_20_in));
  (* SOFT_HLUTNM = "soft_lutpair41" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native_i_1__31 
       (.I0(\Using_FPGA.Native_2 ),
        .I1(PC_OF[0]),
        .O(I3));
  (* SOFT_HLUTNM = "soft_lutpair41" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native_i_1__36 
       (.I0(\Using_FPGA.Native_2 ),
        .I1(PC_OF[1]),
        .O(I3_32));
  (* SOFT_HLUTNM = "soft_lutpair42" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native_i_1__37 
       (.I0(\Using_FPGA.Native_2 ),
        .I1(PC_OF[2]),
        .O(I3_33));
  (* SOFT_HLUTNM = "soft_lutpair42" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native_i_1__38 
       (.I0(\Using_FPGA.Native_2 ),
        .I1(PC_OF[3]),
        .O(I3_34));
  (* SOFT_HLUTNM = "soft_lutpair39" *) 
  LUT5 #(
    .INIT(32'hFFFF0010)) 
    \Using_FPGA.Native_i_2__37 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(mbar_decode_I_reg_2[0]),
        .I2(\Using_MSR_Instr.msrxxx_write_carry_reg ),
        .I3(mbar_decode_I_reg_2[1]),
        .I4(\Using_FPGA.Native_i_1__39 ),
        .O(\Using_FPGA.Native_2 ));
  (* SOFT_HLUTNM = "soft_lutpair40" *) 
  LUT4 #(
    .INIT(16'hFF7F)) 
    \Using_FSL_Links.mb_Get_i_i_3 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FSL_Links.mb_Get_i_reg ),
        .I2(\Using_FSL_Links.mb_Get_i_reg_1 ),
        .I3(\Using_FSL_Links.mb_Get_i_reg_0 ),
        .O(\Using_FPGA.Native_4 ));
  LUT6 #(
    .INIT(64'h2000220220002000)) 
    \Using_FSL_Links.mb_Put_i_i_2 
       (.I0(is_lwx_I_reg_0),
        .I1(\Using_FPGA.Native_4 ),
        .I2(mbar_decode_I_reg_0),
        .I3(\Using_MSR_Instr.msrxxx_write_carry_reg ),
        .I4(mbar_decode_I_reg),
        .I5(\Using_FSL_Links.mb_Put_i_reg ),
        .O(mb_Put_i5_out));
  LUT6 #(
    .INIT(64'hFFFFFFDFFFFFFFFF)) 
    \Using_MSR_Instr.MSRclr_Instr_i_i_2 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FSL_Links.mb_Get_i_reg ),
        .I2(\Using_FSL_Links.mb_Get_i_reg_0 ),
        .I3(\Using_FSL_Links.mb_Get_i_reg_1 ),
        .I4(mbar_decode_I_reg_0),
        .I5(mbar_decode_I_reg),
        .O(\Using_FPGA.Native_0 ));
  LUT5 #(
    .INIT(32'h00101010)) 
    \Using_MSR_Instr.msrxxx_write_carry_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_MSR_Instr.msrxxx_write_carry_reg ),
        .I2(D),
        .I3(\Using_MSR_Instr.msrxxx_write_carry_reg_0 ),
        .I4(inHibit_EX),
        .O(msrxxx_write_carry));
  (* SOFT_HLUTNM = "soft_lutpair39" *) 
  LUT3 #(
    .INIT(8'h40)) 
    \Using_MSR_Instr.write_MSR_I_i_2 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(mbar_decode_I_reg_2[1]),
        .I2(mbar_decode_I_reg_2[0]),
        .O(\Using_FPGA.Native_5 ));
  LUT6 #(
    .INIT(64'h000000002E222222)) 
    is_lwx_I_i_1
       (.I0(is_lwx_I),
        .I1(is_lwx_I_reg_0),
        .I2(\Using_FPGA.Native_1 ),
        .I3(is_lwx_I_reg_1),
        .I4(is_lwx_I_reg_2),
        .I5(is_swx_I),
        .O(is_lwx_I_reg));
  LUT6 #(
    .INIT(64'h0000000040000000)) 
    mbar_decode_I_i_1
       (.I0(\Using_FPGA.Native_1 ),
        .I1(mbar_decode_I_reg),
        .I2(mbar_decode_I_reg_0),
        .I3(mbar_decode_I_reg_1),
        .I4(mbar_decode_I_reg_2[2]),
        .I5(take_Intr_Now_III),
        .O(of_mbar_decode));
  LUT2 #(
    .INIT(4'hB)) 
    mbar_decode_I_i_2
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FSL_Links.mb_Get_i_reg ),
        .O(\Using_FPGA.Native_1 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFAE)) 
    mul_Executing_i_1
       (.I0(mul_Executing_reg),
        .I1(mul_first),
        .I2(mul_Executing_reg_0),
        .I3(FSL_Put_Inhibit),
        .I4(mul_Executing_i_2_n_0),
        .I5(mbar_first),
        .O(mul_Executing0));
  (* SOFT_HLUTNM = "soft_lutpair40" *) 
  LUT5 #(
    .INIT(32'h008A0000)) 
    mul_Executing_i_2
       (.I0(mul_Executing_reg_1),
        .I1(\Using_FPGA.Native ),
        .I2(\Using_FSL_Links.mb_Get_i_reg ),
        .I3(\Using_FSL_Links.mb_Get_i_reg_0 ),
        .I4(\Using_FSL_Links.mb_Get_i_reg_1 ),
        .O(mul_Executing_i_2_n_0));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E_152
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    mbar_is_sleep0,
    CI,
    Y,
    \instr_EX_i_reg[6] ,
    \instr_EX_i_reg[6]_0 ,
    \instr_EX_i_reg[6]_1 ,
    Clk,
    jump2_I_reg,
    jump2_I_reg_0,
    jump2_I_reg_1,
    jump2_I_reg_2,
    jump2_I_reg_3,
    take_Intr_Now_III,
    \write_Addr_I_reg[0] ,
    instr_OF_raw);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output [0:0]\Using_FPGA.Native_1 ;
  output mbar_is_sleep0;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[6] ;
  input \instr_EX_i_reg[6]_0 ;
  input \instr_EX_i_reg[6]_1 ;
  input Clk;
  input jump2_I_reg;
  input jump2_I_reg_0;
  input jump2_I_reg_1;
  input jump2_I_reg_2;
  input jump2_I_reg_3;
  input take_Intr_Now_III;
  input \write_Addr_I_reg[0] ;
  input [0:0]instr_OF_raw;

  wire CI;
  wire Clk;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire [0:0]Y;
  wire \instr_EX_i_reg[6] ;
  wire \instr_EX_i_reg[6]_0 ;
  wire \instr_EX_i_reg[6]_1 ;
  wire [0:0]instr_OF_raw;
  wire jump2_I_reg;
  wire jump2_I_reg_0;
  wire jump2_I_reg_1;
  wire jump2_I_reg_2;
  wire jump2_I_reg_3;
  wire mbar_is_sleep0;
  wire take_Intr_Now_III;
  wire \write_Addr_I_reg[0] ;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[6].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[6] ),
        .A1(\instr_EX_i_reg[6]_0 ),
        .A2(\instr_EX_i_reg[6]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(\Using_FPGA.Native ));
  LUT6 #(
    .INIT(64'h00000000BBC088C0)) 
    jump2_I_i_1
       (.I0(\Using_FPGA.Native ),
        .I1(jump2_I_reg),
        .I2(jump2_I_reg_0),
        .I3(jump2_I_reg_1),
        .I4(jump2_I_reg_2),
        .I5(jump2_I_reg_3),
        .O(\Using_FPGA.Native_0 ));
  (* SOFT_HLUTNM = "soft_lutpair43" *) 
  LUT2 #(
    .INIT(4'hE)) 
    mbar_is_sleep_i_1
       (.I0(\Using_FPGA.Native ),
        .I1(instr_OF_raw),
        .O(mbar_is_sleep0));
  (* SOFT_HLUTNM = "soft_lutpair43" *) 
  LUT3 #(
    .INIT(8'h20)) 
    \write_Addr_I[0]_i_2 
       (.I0(\Using_FPGA.Native ),
        .I1(take_Intr_Now_III),
        .I2(\write_Addr_I_reg[0] ),
        .O(\Using_FPGA.Native_1 ));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E_153
   (instr_OF_raw,
    \Using_FPGA.Native ,
    CI,
    Y,
    \instr_EX_i_reg[7] ,
    \instr_EX_i_reg[7]_0 ,
    \instr_EX_i_reg[7]_1 ,
    Clk,
    take_Intr_Now_III,
    \write_Addr_I_reg[1] );
  output [0:0]instr_OF_raw;
  output [0:0]\Using_FPGA.Native ;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[7] ;
  input \instr_EX_i_reg[7]_0 ;
  input \instr_EX_i_reg[7]_1 ;
  input Clk;
  input take_Intr_Now_III;
  input \write_Addr_I_reg[1] ;

  wire CI;
  wire Clk;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]Y;
  wire \instr_EX_i_reg[7] ;
  wire \instr_EX_i_reg[7]_0 ;
  wire \instr_EX_i_reg[7]_1 ;
  wire [0:0]instr_OF_raw;
  wire take_Intr_Now_III;
  wire \write_Addr_I_reg[1] ;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[7].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[7] ),
        .A1(\instr_EX_i_reg[7]_0 ),
        .A2(\instr_EX_i_reg[7]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(instr_OF_raw));
  LUT3 #(
    .INIT(8'hEF)) 
    \write_Addr_I[1]_i_1 
       (.I0(instr_OF_raw),
        .I1(take_Intr_Now_III),
        .I2(\write_Addr_I_reg[1] ),
        .O(\Using_FPGA.Native ));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E_154
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    force1_i43_out,
    CI,
    Y,
    \instr_EX_i_reg[8] ,
    \instr_EX_i_reg[8]_0 ,
    \instr_EX_i_reg[8]_1 ,
    Clk,
    take_Intr_Now_III,
    \write_Addr_I_reg[2] ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 );
  output \Using_FPGA.Native ;
  output [0:0]\Using_FPGA.Native_0 ;
  output force1_i43_out;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[8] ;
  input \instr_EX_i_reg[8]_0 ;
  input \instr_EX_i_reg[8]_1 ;
  input Clk;
  input take_Intr_Now_III;
  input \write_Addr_I_reg[2] ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;

  wire CI;
  wire Clk;
  wire \Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire [0:0]Y;
  wire force1_i43_out;
  wire \instr_EX_i_reg[8] ;
  wire \instr_EX_i_reg[8]_0 ;
  wire \instr_EX_i_reg[8]_1 ;
  wire take_Intr_Now_III;
  wire \write_Addr_I_reg[2] ;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[8].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[8] ),
        .A1(\instr_EX_i_reg[8]_0 ),
        .A2(\instr_EX_i_reg[8]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(\Using_FPGA.Native ));
  (* SOFT_HLUTNM = "soft_lutpair44" *) 
  LUT4 #(
    .INIT(16'h0001)) 
    \Using_FPGA.Native_i_2__36 
       (.I0(\Using_FPGA.Native ),
        .I1(take_Intr_Now_III),
        .I2(\Using_FPGA.Native_1 ),
        .I3(\Using_FPGA.Native_2 ),
        .O(force1_i43_out));
  (* SOFT_HLUTNM = "soft_lutpair44" *) 
  LUT3 #(
    .INIT(8'hEF)) 
    \write_Addr_I[2]_i_1 
       (.I0(\Using_FPGA.Native ),
        .I1(take_Intr_Now_III),
        .I2(\write_Addr_I_reg[2] ),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E_155
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    reset_BIP_I15_out,
    CI,
    Y,
    \instr_EX_i_reg[9] ,
    \instr_EX_i_reg[9]_0 ,
    \instr_EX_i_reg[9]_1 ,
    Clk,
    take_Intr_Now_III,
    \write_Addr_I_reg[3] ,
    \Using_FPGA.reset_BIP_I_reg ,
    \Using_FPGA.reset_BIP_I_reg_0 ,
    \Using_FPGA.reset_BIP_I_reg_1 );
  output \Using_FPGA.Native ;
  output [0:0]\Using_FPGA.Native_0 ;
  output reset_BIP_I15_out;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[9] ;
  input \instr_EX_i_reg[9]_0 ;
  input \instr_EX_i_reg[9]_1 ;
  input Clk;
  input take_Intr_Now_III;
  input \write_Addr_I_reg[3] ;
  input \Using_FPGA.reset_BIP_I_reg ;
  input \Using_FPGA.reset_BIP_I_reg_0 ;
  input \Using_FPGA.reset_BIP_I_reg_1 ;

  wire CI;
  wire Clk;
  wire \Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.reset_BIP_I_reg ;
  wire \Using_FPGA.reset_BIP_I_reg_0 ;
  wire \Using_FPGA.reset_BIP_I_reg_1 ;
  wire [0:0]Y;
  wire \instr_EX_i_reg[9] ;
  wire \instr_EX_i_reg[9]_0 ;
  wire \instr_EX_i_reg[9]_1 ;
  wire reset_BIP_I15_out;
  wire take_Intr_Now_III;
  wire \write_Addr_I_reg[3] ;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[9].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[9] ),
        .A1(\instr_EX_i_reg[9]_0 ),
        .A2(\instr_EX_i_reg[9]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(\Using_FPGA.Native ));
  LUT5 #(
    .INIT(32'h00000080)) 
    \Using_FPGA.reset_BIP_I_i_1 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.reset_BIP_I_reg ),
        .I2(\Using_FPGA.reset_BIP_I_reg_0 ),
        .I3(\Using_FPGA.reset_BIP_I_reg_1 ),
        .I4(take_Intr_Now_III),
        .O(reset_BIP_I15_out));
  LUT3 #(
    .INIT(8'hEF)) 
    \write_Addr_I[3]_i_1 
       (.I0(\Using_FPGA.Native ),
        .I1(take_Intr_Now_III),
        .I2(\write_Addr_I_reg[3] ),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E_615
   (PC_OF,
    IReady,
    pc_I,
    Buffer_Addr,
    Clk);
  output [0:0]PC_OF;
  input IReady;
  input pc_I;
  input [2:0]Buffer_Addr;
  input Clk;

  wire [2:0]Buffer_Addr;
  wire Clk;
  wire IReady;
  wire [0:0]PC_OF;
  wire pc_I;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/All_Bits.Using_FPGA.PC_GEN " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/All_Bits.Using_FPGA.PC_GEN[9].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(IReady),
        .CLK(Clk),
        .D(pc_I),
        .Q(PC_OF));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E_620
   (PC_OF,
    IReady,
    pc_I,
    Buffer_Addr,
    Clk);
  output [0:0]PC_OF;
  input IReady;
  input pc_I;
  input [2:0]Buffer_Addr;
  input Clk;

  wire [2:0]Buffer_Addr;
  wire Clk;
  wire IReady;
  wire [0:0]PC_OF;
  wire pc_I;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/All_Bits.Using_FPGA.PC_GEN " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/All_Bits.Using_FPGA.PC_GEN[8].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(IReady),
        .CLK(Clk),
        .D(pc_I),
        .Q(PC_OF));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E_626
   (PC_OF,
    IReady,
    pc_I,
    Buffer_Addr,
    Clk);
  output [0:0]PC_OF;
  input IReady;
  input pc_I;
  input [2:0]Buffer_Addr;
  input Clk;

  wire [2:0]Buffer_Addr;
  wire Clk;
  wire IReady;
  wire [0:0]PC_OF;
  wire pc_I;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/All_Bits.Using_FPGA.PC_GEN " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/All_Bits.Using_FPGA.PC_GEN[7].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(IReady),
        .CLK(Clk),
        .D(pc_I),
        .Q(PC_OF));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E_632
   (PC_OF,
    IReady,
    pc_I,
    Buffer_Addr,
    Clk);
  output [0:0]PC_OF;
  input IReady;
  input pc_I;
  input [2:0]Buffer_Addr;
  input Clk;

  wire [2:0]Buffer_Addr;
  wire Clk;
  wire IReady;
  wire [0:0]PC_OF;
  wire pc_I;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/All_Bits.Using_FPGA.PC_GEN " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/All_Bits.Using_FPGA.PC_GEN[6].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(IReady),
        .CLK(Clk),
        .D(pc_I),
        .Q(PC_OF));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E_638
   (PC_OF,
    IReady,
    pc_I,
    Buffer_Addr,
    Clk);
  output [0:0]PC_OF;
  input IReady;
  input pc_I;
  input [2:0]Buffer_Addr;
  input Clk;

  wire [2:0]Buffer_Addr;
  wire Clk;
  wire IReady;
  wire [0:0]PC_OF;
  wire pc_I;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/All_Bits.Using_FPGA.PC_GEN " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/All_Bits.Using_FPGA.PC_GEN[5].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(IReady),
        .CLK(Clk),
        .D(pc_I),
        .Q(PC_OF));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E_644
   (PC_OF,
    IReady,
    pc_I,
    Buffer_Addr,
    Clk);
  output [0:0]PC_OF;
  input IReady;
  input pc_I;
  input [2:0]Buffer_Addr;
  input Clk;

  wire [2:0]Buffer_Addr;
  wire Clk;
  wire IReady;
  wire [0:0]PC_OF;
  wire pc_I;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/All_Bits.Using_FPGA.PC_GEN " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/All_Bits.Using_FPGA.PC_GEN[4].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(IReady),
        .CLK(Clk),
        .D(pc_I),
        .Q(PC_OF));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E_650
   (PC_OF,
    IReady,
    pc_I,
    Buffer_Addr,
    Clk);
  output [0:0]PC_OF;
  input IReady;
  input pc_I;
  input [2:0]Buffer_Addr;
  input Clk;

  wire [2:0]Buffer_Addr;
  wire Clk;
  wire IReady;
  wire [0:0]PC_OF;
  wire pc_I;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/All_Bits.Using_FPGA.PC_GEN " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/All_Bits.Using_FPGA.PC_GEN[3].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(IReady),
        .CLK(Clk),
        .D(pc_I),
        .Q(PC_OF));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E_656
   (PC_OF,
    IReady,
    pc_I,
    Buffer_Addr,
    Clk);
  output [0:0]PC_OF;
  input IReady;
  input pc_I;
  input [2:0]Buffer_Addr;
  input Clk;

  wire [2:0]Buffer_Addr;
  wire Clk;
  wire IReady;
  wire [0:0]PC_OF;
  wire pc_I;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/All_Bits.Using_FPGA.PC_GEN " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/All_Bits.Using_FPGA.PC_GEN[31].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(IReady),
        .CLK(Clk),
        .D(pc_I),
        .Q(PC_OF));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E_662
   (PC_OF,
    I3,
    IReady,
    pc_I,
    Buffer_Addr,
    Clk,
    opsel1_PC,
    Enable_Interrupt);
  output [0:0]PC_OF;
  output I3;
  input IReady;
  input pc_I;
  input [2:0]Buffer_Addr;
  input Clk;
  input opsel1_PC;
  input Enable_Interrupt;

  wire [2:0]Buffer_Addr;
  wire Clk;
  wire Enable_Interrupt;
  wire I3;
  wire IReady;
  wire [0:0]PC_OF;
  wire opsel1_PC;
  wire pc_I;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/All_Bits.Using_FPGA.PC_GEN " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/All_Bits.Using_FPGA.PC_GEN[30].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(IReady),
        .CLK(Clk),
        .D(pc_I),
        .Q(PC_OF));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__32 
       (.I0(PC_OF),
        .I1(opsel1_PC),
        .I2(Enable_Interrupt),
        .O(I3));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E_668
   (PC_OF,
    IReady,
    pc_I,
    Buffer_Addr,
    Clk);
  output [0:0]PC_OF;
  input IReady;
  input pc_I;
  input [2:0]Buffer_Addr;
  input Clk;

  wire [2:0]Buffer_Addr;
  wire Clk;
  wire IReady;
  wire [0:0]PC_OF;
  wire pc_I;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/All_Bits.Using_FPGA.PC_GEN " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/All_Bits.Using_FPGA.PC_GEN[2].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(IReady),
        .CLK(Clk),
        .D(pc_I),
        .Q(PC_OF));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E_674
   (PC_OF,
    I3_0,
    IReady,
    pc_I,
    Buffer_Addr,
    Clk,
    opsel1_PC,
    \Using_FPGA.Native );
  output [0:0]PC_OF;
  output I3_0;
  input IReady;
  input pc_I;
  input [2:0]Buffer_Addr;
  input Clk;
  input opsel1_PC;
  input \Using_FPGA.Native ;

  wire [2:0]Buffer_Addr;
  wire Clk;
  wire I3_0;
  wire IReady;
  wire [0:0]PC_OF;
  wire \Using_FPGA.Native ;
  wire opsel1_PC;
  wire pc_I;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/All_Bits.Using_FPGA.PC_GEN " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/All_Bits.Using_FPGA.PC_GEN[29].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(IReady),
        .CLK(Clk),
        .D(pc_I),
        .Q(PC_OF));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__33 
       (.I0(PC_OF),
        .I1(opsel1_PC),
        .I2(\Using_FPGA.Native ),
        .O(I3_0));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E_680
   (PC_OF,
    I3_1,
    IReady,
    pc_I,
    Buffer_Addr,
    Clk,
    opsel1_PC,
    msr_I);
  output [0:0]PC_OF;
  output I3_1;
  input IReady;
  input pc_I;
  input [2:0]Buffer_Addr;
  input Clk;
  input opsel1_PC;
  input [0:0]msr_I;

  wire [2:0]Buffer_Addr;
  wire Clk;
  wire I3_1;
  wire IReady;
  wire [0:0]PC_OF;
  wire [0:0]msr_I;
  wire opsel1_PC;
  wire pc_I;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/All_Bits.Using_FPGA.PC_GEN " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/All_Bits.Using_FPGA.PC_GEN[28].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(IReady),
        .CLK(Clk),
        .D(pc_I),
        .Q(PC_OF));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__34 
       (.I0(PC_OF),
        .I1(opsel1_PC),
        .I2(msr_I),
        .O(I3_1));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E_686
   (PC_OF,
    I3_2,
    IReady,
    pc_I,
    Buffer_Addr,
    Clk,
    opsel1_PC,
    msr_I);
  output [0:0]PC_OF;
  output I3_2;
  input IReady;
  input pc_I;
  input [2:0]Buffer_Addr;
  input Clk;
  input opsel1_PC;
  input [0:0]msr_I;

  wire [2:0]Buffer_Addr;
  wire Clk;
  wire I3_2;
  wire IReady;
  wire [0:0]PC_OF;
  wire [0:0]msr_I;
  wire opsel1_PC;
  wire pc_I;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/All_Bits.Using_FPGA.PC_GEN " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/All_Bits.Using_FPGA.PC_GEN[27].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(IReady),
        .CLK(Clk),
        .D(pc_I),
        .Q(PC_OF));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__35 
       (.I0(PC_OF),
        .I1(opsel1_PC),
        .I2(msr_I),
        .O(I3_2));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E_692
   (PC_OF,
    IReady,
    pc_I,
    Buffer_Addr,
    Clk);
  output [0:0]PC_OF;
  input IReady;
  input pc_I;
  input [2:0]Buffer_Addr;
  input Clk;

  wire [2:0]Buffer_Addr;
  wire Clk;
  wire IReady;
  wire [0:0]PC_OF;
  wire pc_I;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/All_Bits.Using_FPGA.PC_GEN " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/All_Bits.Using_FPGA.PC_GEN[26].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(IReady),
        .CLK(Clk),
        .D(pc_I),
        .Q(PC_OF));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E_698
   (PC_OF,
    IReady,
    pc_I,
    Buffer_Addr,
    Clk);
  output [0:0]PC_OF;
  input IReady;
  input pc_I;
  input [2:0]Buffer_Addr;
  input Clk;

  wire [2:0]Buffer_Addr;
  wire Clk;
  wire IReady;
  wire [0:0]PC_OF;
  wire pc_I;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/All_Bits.Using_FPGA.PC_GEN " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/All_Bits.Using_FPGA.PC_GEN[25].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(IReady),
        .CLK(Clk),
        .D(pc_I),
        .Q(PC_OF));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E_704
   (PC_OF,
    IReady,
    pc_I,
    Buffer_Addr,
    Clk);
  output [0:0]PC_OF;
  input IReady;
  input pc_I;
  input [2:0]Buffer_Addr;
  input Clk;

  wire [2:0]Buffer_Addr;
  wire Clk;
  wire IReady;
  wire [0:0]PC_OF;
  wire pc_I;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/All_Bits.Using_FPGA.PC_GEN " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/All_Bits.Using_FPGA.PC_GEN[24].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(IReady),
        .CLK(Clk),
        .D(pc_I),
        .Q(PC_OF));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E_710
   (PC_OF,
    IReady,
    pc_I,
    Buffer_Addr,
    Clk);
  output [0:0]PC_OF;
  input IReady;
  input pc_I;
  input [2:0]Buffer_Addr;
  input Clk;

  wire [2:0]Buffer_Addr;
  wire Clk;
  wire IReady;
  wire [0:0]PC_OF;
  wire pc_I;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/All_Bits.Using_FPGA.PC_GEN " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/All_Bits.Using_FPGA.PC_GEN[23].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(IReady),
        .CLK(Clk),
        .D(pc_I),
        .Q(PC_OF));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E_716
   (PC_OF,
    IReady,
    pc_I,
    Buffer_Addr,
    Clk);
  output [0:0]PC_OF;
  input IReady;
  input pc_I;
  input [2:0]Buffer_Addr;
  input Clk;

  wire [2:0]Buffer_Addr;
  wire Clk;
  wire IReady;
  wire [0:0]PC_OF;
  wire pc_I;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/All_Bits.Using_FPGA.PC_GEN " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/All_Bits.Using_FPGA.PC_GEN[22].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(IReady),
        .CLK(Clk),
        .D(pc_I),
        .Q(PC_OF));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E_722
   (PC_OF,
    IReady,
    pc_I,
    Buffer_Addr,
    Clk);
  output [0:0]PC_OF;
  input IReady;
  input pc_I;
  input [2:0]Buffer_Addr;
  input Clk;

  wire [2:0]Buffer_Addr;
  wire Clk;
  wire IReady;
  wire [0:0]PC_OF;
  wire pc_I;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/All_Bits.Using_FPGA.PC_GEN " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/All_Bits.Using_FPGA.PC_GEN[21].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(IReady),
        .CLK(Clk),
        .D(pc_I),
        .Q(PC_OF));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E_728
   (PC_OF,
    IReady,
    pc_I,
    Buffer_Addr,
    Clk);
  output [0:0]PC_OF;
  input IReady;
  input pc_I;
  input [2:0]Buffer_Addr;
  input Clk;

  wire [2:0]Buffer_Addr;
  wire Clk;
  wire IReady;
  wire [0:0]PC_OF;
  wire pc_I;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/All_Bits.Using_FPGA.PC_GEN " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/All_Bits.Using_FPGA.PC_GEN[20].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(IReady),
        .CLK(Clk),
        .D(pc_I),
        .Q(PC_OF));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E_734
   (PC_OF,
    IReady,
    pc_I,
    Buffer_Addr,
    Clk);
  output [0:0]PC_OF;
  input IReady;
  input pc_I;
  input [2:0]Buffer_Addr;
  input Clk;

  wire [2:0]Buffer_Addr;
  wire Clk;
  wire IReady;
  wire [0:0]PC_OF;
  wire pc_I;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/All_Bits.Using_FPGA.PC_GEN " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/All_Bits.Using_FPGA.PC_GEN[1].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(IReady),
        .CLK(Clk),
        .D(pc_I),
        .Q(PC_OF));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E_740
   (PC_OF,
    IReady,
    pc_I,
    Buffer_Addr,
    Clk);
  output [0:0]PC_OF;
  input IReady;
  input pc_I;
  input [2:0]Buffer_Addr;
  input Clk;

  wire [2:0]Buffer_Addr;
  wire Clk;
  wire IReady;
  wire [0:0]PC_OF;
  wire pc_I;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/All_Bits.Using_FPGA.PC_GEN " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/All_Bits.Using_FPGA.PC_GEN[19].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(IReady),
        .CLK(Clk),
        .D(pc_I),
        .Q(PC_OF));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E_746
   (PC_OF,
    IReady,
    pc_I,
    Buffer_Addr,
    Clk);
  output [0:0]PC_OF;
  input IReady;
  input pc_I;
  input [2:0]Buffer_Addr;
  input Clk;

  wire [2:0]Buffer_Addr;
  wire Clk;
  wire IReady;
  wire [0:0]PC_OF;
  wire pc_I;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/All_Bits.Using_FPGA.PC_GEN " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/All_Bits.Using_FPGA.PC_GEN[18].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(IReady),
        .CLK(Clk),
        .D(pc_I),
        .Q(PC_OF));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E_752
   (PC_OF,
    IReady,
    pc_I,
    Buffer_Addr,
    Clk);
  output [0:0]PC_OF;
  input IReady;
  input pc_I;
  input [2:0]Buffer_Addr;
  input Clk;

  wire [2:0]Buffer_Addr;
  wire Clk;
  wire IReady;
  wire [0:0]PC_OF;
  wire pc_I;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/All_Bits.Using_FPGA.PC_GEN " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/All_Bits.Using_FPGA.PC_GEN[17].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(IReady),
        .CLK(Clk),
        .D(pc_I),
        .Q(PC_OF));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E_758
   (PC_OF,
    IReady,
    pc_I,
    Buffer_Addr,
    Clk);
  output [0:0]PC_OF;
  input IReady;
  input pc_I;
  input [2:0]Buffer_Addr;
  input Clk;

  wire [2:0]Buffer_Addr;
  wire Clk;
  wire IReady;
  wire [0:0]PC_OF;
  wire pc_I;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/All_Bits.Using_FPGA.PC_GEN " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/All_Bits.Using_FPGA.PC_GEN[16].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(IReady),
        .CLK(Clk),
        .D(pc_I),
        .Q(PC_OF));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E_764
   (PC_OF,
    IReady,
    pc_I,
    Buffer_Addr,
    Clk);
  output [0:0]PC_OF;
  input IReady;
  input pc_I;
  input [2:0]Buffer_Addr;
  input Clk;

  wire [2:0]Buffer_Addr;
  wire Clk;
  wire IReady;
  wire [0:0]PC_OF;
  wire pc_I;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/All_Bits.Using_FPGA.PC_GEN " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/All_Bits.Using_FPGA.PC_GEN[15].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(IReady),
        .CLK(Clk),
        .D(pc_I),
        .Q(PC_OF));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E_770
   (PC_OF,
    IReady,
    pc_I,
    Buffer_Addr,
    Clk);
  output [0:0]PC_OF;
  input IReady;
  input pc_I;
  input [2:0]Buffer_Addr;
  input Clk;

  wire [2:0]Buffer_Addr;
  wire Clk;
  wire IReady;
  wire [0:0]PC_OF;
  wire pc_I;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/All_Bits.Using_FPGA.PC_GEN " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/All_Bits.Using_FPGA.PC_GEN[14].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(IReady),
        .CLK(Clk),
        .D(pc_I),
        .Q(PC_OF));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E_776
   (PC_OF,
    IReady,
    pc_I,
    Buffer_Addr,
    Clk);
  output [0:0]PC_OF;
  input IReady;
  input pc_I;
  input [2:0]Buffer_Addr;
  input Clk;

  wire [2:0]Buffer_Addr;
  wire Clk;
  wire IReady;
  wire [0:0]PC_OF;
  wire pc_I;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/All_Bits.Using_FPGA.PC_GEN " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/All_Bits.Using_FPGA.PC_GEN[13].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(IReady),
        .CLK(Clk),
        .D(pc_I),
        .Q(PC_OF));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E_782
   (PC_OF,
    IReady,
    pc_I,
    Buffer_Addr,
    Clk);
  output [0:0]PC_OF;
  input IReady;
  input pc_I;
  input [2:0]Buffer_Addr;
  input Clk;

  wire [2:0]Buffer_Addr;
  wire Clk;
  wire IReady;
  wire [0:0]PC_OF;
  wire pc_I;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/All_Bits.Using_FPGA.PC_GEN " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/All_Bits.Using_FPGA.PC_GEN[12].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(IReady),
        .CLK(Clk),
        .D(pc_I),
        .Q(PC_OF));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E_788
   (PC_OF,
    IReady,
    pc_I,
    Buffer_Addr,
    Clk);
  output [0:0]PC_OF;
  input IReady;
  input pc_I;
  input [2:0]Buffer_Addr;
  input Clk;

  wire [2:0]Buffer_Addr;
  wire Clk;
  wire IReady;
  wire [0:0]PC_OF;
  wire pc_I;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/All_Bits.Using_FPGA.PC_GEN " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/All_Bits.Using_FPGA.PC_GEN[11].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(IReady),
        .CLK(Clk),
        .D(pc_I),
        .Q(PC_OF));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E_794
   (PC_OF,
    IReady,
    pc_I,
    Buffer_Addr,
    Clk);
  output [0:0]PC_OF;
  input IReady;
  input pc_I;
  input [2:0]Buffer_Addr;
  input Clk;

  wire [2:0]Buffer_Addr;
  wire Clk;
  wire IReady;
  wire [0:0]PC_OF;
  wire pc_I;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/All_Bits.Using_FPGA.PC_GEN " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/All_Bits.Using_FPGA.PC_GEN[10].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(IReady),
        .CLK(Clk),
        .D(pc_I),
        .Q(PC_OF));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E_800
   (PC_OF,
    I3_3,
    IReady,
    pc_I,
    Buffer_Addr,
    Clk,
    opsel1_PC,
    \Using_FPGA.Native );
  output [0:0]PC_OF;
  output I3_3;
  input IReady;
  input pc_I;
  input [2:0]Buffer_Addr;
  input Clk;
  input opsel1_PC;
  input \Using_FPGA.Native ;

  wire [2:0]Buffer_Addr;
  wire Clk;
  wire I3_3;
  wire IReady;
  wire [0:0]PC_OF;
  wire \Using_FPGA.Native ;
  wire opsel1_PC;
  wire pc_I;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/All_Bits.Using_FPGA.PC_GEN " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/All_Bits.Using_FPGA.PC_GEN[0].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(IReady),
        .CLK(Clk),
        .D(pc_I),
        .Q(PC_OF));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__39 
       (.I0(PC_OF),
        .I1(opsel1_PC),
        .I2(\Using_FPGA.Native ),
        .O(I3_3));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E__parameterized10
   (\Serial_Dbg_Intf.shift_count_reg[5] ,
    Q,
    Dbg_Clk,
    tdo_config_word1_2,
    Dbg_TDO_INST_0_i_5);
  output \Serial_Dbg_Intf.shift_count_reg[5] ;
  input [6:0]Q;
  input Dbg_Clk;
  input tdo_config_word1_2;
  input Dbg_TDO_INST_0_i_5;

  wire Dbg_Clk;
  wire Dbg_TDO_INST_0_i_5;
  wire [6:0]Q;
  wire \Serial_Dbg_Intf.shift_count_reg[5] ;
  wire tdo_config_word1_2;
  wire tdo_config_word1_3;

  LUT6 #(
    .INIT(64'hA808A808FFFF0000)) 
    Dbg_TDO_INST_0_i_18
       (.I0(Q[5]),
        .I1(tdo_config_word1_3),
        .I2(Q[4]),
        .I3(tdo_config_word1_2),
        .I4(Dbg_TDO_INST_0_i_5),
        .I5(Q[6]),
        .O(\Serial_Dbg_Intf.shift_count_reg[5] ));
  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Serial_Dbg_Intf.The_Base_Vector " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Serial_Dbg_Intf.The_Base_Vector[1].SRL16E_Base_Vector/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(Dbg_Clk),
        .D(1'b0),
        .Q(tdo_config_word1_3));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E__parameterized10_18
   (tdo_config_word1_2,
    Q,
    Dbg_Clk);
  output tdo_config_word1_2;
  input [3:0]Q;
  input Dbg_Clk;

  wire Dbg_Clk;
  wire [3:0]Q;
  wire tdo_config_word1_2;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Serial_Dbg_Intf.The_Base_Vector " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Serial_Dbg_Intf.The_Base_Vector[2].SRL16E_Base_Vector/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(Dbg_Clk),
        .D(1'b0),
        .Q(tdo_config_word1_2));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E__parameterized10_19
   (tdo_config_word1_13,
    Q,
    Dbg_Clk);
  output tdo_config_word1_13;
  input [3:0]Q;
  input Dbg_Clk;

  wire Dbg_Clk;
  wire [3:0]Q;
  wire tdo_config_word1_13;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Serial_Dbg_Intf.The_Cache_Addresses " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Serial_Dbg_Intf.The_Cache_Addresses[3].SRL16E_Cache_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(Dbg_Clk),
        .D(1'b0),
        .Q(tdo_config_word1_13));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E__parameterized10_20
   (tdo_config_word1_12,
    Q,
    Dbg_Clk);
  output tdo_config_word1_12;
  input [3:0]Q;
  input Dbg_Clk;

  wire Dbg_Clk;
  wire [3:0]Q;
  wire tdo_config_word1_12;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Serial_Dbg_Intf.The_Cache_Addresses " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Serial_Dbg_Intf.The_Cache_Addresses[4].SRL16E_Cache_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(Dbg_Clk),
        .D(1'b0),
        .Q(tdo_config_word1_12));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E__parameterized10_23
   (tdo_config_word1_9,
    Q,
    Dbg_Clk);
  output tdo_config_word1_9;
  input [3:0]Q;
  input Dbg_Clk;

  wire Dbg_Clk;
  wire [3:0]Q;
  wire tdo_config_word1_9;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Serial_Dbg_Intf.The_Cache_Addresses " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Serial_Dbg_Intf.The_Cache_Addresses[7].SRL16E_Cache_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(Dbg_Clk),
        .D(1'b0),
        .Q(tdo_config_word1_9));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E__parameterized10_24
   (tdo_config_word1_8,
    Q,
    Dbg_Clk);
  output tdo_config_word1_8;
  input [3:0]Q;
  input Dbg_Clk;

  wire Dbg_Clk;
  wire [3:0]Q;
  wire tdo_config_word1_8;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Serial_Dbg_Intf.The_Cache_Addresses " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Serial_Dbg_Intf.The_Cache_Addresses[8].SRL16E_Cache_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(Dbg_Clk),
        .D(1'b0),
        .Q(tdo_config_word1_8));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E__parameterized10_25
   (tdo_config_word1_0,
    Q,
    Dbg_Clk);
  output tdo_config_word1_0;
  input [3:0]Q;
  input Dbg_Clk;

  wire Dbg_Clk;
  wire [3:0]Q;
  wire tdo_config_word1_0;

  (* box_type = "PRIMITIVE" *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Serial_Dbg_Intf.Use_Extended_Features.SRL16E_10/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(Dbg_Clk),
        .D(1'b0),
        .Q(tdo_config_word1_0));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E__parameterized12
   (tdo_config_word1_7,
    Q,
    Dbg_Clk);
  output tdo_config_word1_7;
  input [3:0]Q;
  input Dbg_Clk;

  wire Dbg_Clk;
  wire [3:0]Q;
  wire tdo_config_word1_7;

  (* box_type = "PRIMITIVE" *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Serial_Dbg_Intf.SRL16E_3/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h30E3),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(Dbg_Clk),
        .D(1'b0),
        .Q(tdo_config_word1_7));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E__parameterized14
   (\Serial_Dbg_Intf.shift_count_reg[5] ,
    Q,
    Dbg_Clk,
    tdo_config_word1_7,
    tdo_config_word1_8,
    tdo_config_word1_9);
  output \Serial_Dbg_Intf.shift_count_reg[5] ;
  input [5:0]Q;
  input Dbg_Clk;
  input tdo_config_word1_7;
  input tdo_config_word1_8;
  input tdo_config_word1_9;

  wire Dbg_Clk;
  wire [5:0]Q;
  wire \Serial_Dbg_Intf.shift_count_reg[5] ;
  wire tdo_config_word1_6;
  wire tdo_config_word1_7;
  wire tdo_config_word1_8;
  wire tdo_config_word1_9;

  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    Dbg_TDO_INST_0_i_32
       (.I0(tdo_config_word1_6),
        .I1(tdo_config_word1_7),
        .I2(Q[5]),
        .I3(tdo_config_word1_8),
        .I4(Q[4]),
        .I5(tdo_config_word1_9),
        .O(\Serial_Dbg_Intf.shift_count_reg[5] ));
  (* box_type = "PRIMITIVE" *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Serial_Dbg_Intf.SRL16E_4/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h2500),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(Dbg_Clk),
        .D(1'b0),
        .Q(tdo_config_word1_6));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E__parameterized16
   (\Serial_Dbg_Intf.shift_count_reg[8] ,
    Q,
    Dbg_Clk,
    Dbg_TDO,
    Dbg_TDO_0,
    Dbg_TDO_1,
    Dbg_Reg_En,
    Dbg_TDO_INST_0_i_5_0,
    tdo_config_word1_0,
    Dbg_TDO_INST_0_i_16_0,
    tdo_config_word1_17);
  output \Serial_Dbg_Intf.shift_count_reg[8] ;
  input [6:0]Q;
  input Dbg_Clk;
  input Dbg_TDO;
  input Dbg_TDO_0;
  input Dbg_TDO_1;
  input [2:0]Dbg_Reg_En;
  input Dbg_TDO_INST_0_i_5_0;
  input tdo_config_word1_0;
  input Dbg_TDO_INST_0_i_16_0;
  input tdo_config_word1_17;

  wire Dbg_Clk;
  wire [2:0]Dbg_Reg_En;
  wire Dbg_TDO;
  wire Dbg_TDO_0;
  wire Dbg_TDO_1;
  wire Dbg_TDO_INST_0_i_16_0;
  wire Dbg_TDO_INST_0_i_16_n_0;
  wire Dbg_TDO_INST_0_i_29_n_0;
  wire Dbg_TDO_INST_0_i_5_0;
  wire [6:0]Q;
  wire \Serial_Dbg_Intf.shift_count_reg[8] ;
  wire tdo_config_word1_0;
  wire tdo_config_word1_1;
  wire tdo_config_word1_17;

  LUT5 #(
    .INIT(32'hFFFDFFFF)) 
    Dbg_TDO_INST_0_i_16
       (.I0(Dbg_Reg_En[0]),
        .I1(Dbg_TDO_INST_0_i_5_0),
        .I2(Dbg_TDO_INST_0_i_29_n_0),
        .I3(Dbg_Reg_En[2]),
        .I4(Dbg_Reg_En[1]),
        .O(Dbg_TDO_INST_0_i_16_n_0));
  LUT6 #(
    .INIT(64'h000002A2AAAA02A2)) 
    Dbg_TDO_INST_0_i_29
       (.I0(Q[6]),
        .I1(tdo_config_word1_1),
        .I2(Q[4]),
        .I3(tdo_config_word1_0),
        .I4(Dbg_TDO_INST_0_i_16_0),
        .I5(tdo_config_word1_17),
        .O(Dbg_TDO_INST_0_i_29_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFF55544454)) 
    Dbg_TDO_INST_0_i_5
       (.I0(Dbg_TDO_INST_0_i_16_n_0),
        .I1(Q[6]),
        .I2(Dbg_TDO),
        .I3(Q[5]),
        .I4(Dbg_TDO_0),
        .I5(Dbg_TDO_1),
        .O(\Serial_Dbg_Intf.shift_count_reg[8] ));
  (* box_type = "PRIMITIVE" *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Serial_Dbg_Intf.Use_Extended_Features.SRL16E_9/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h2885),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(Dbg_Clk),
        .D(1'b0),
        .Q(tdo_config_word1_1));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E__parameterized2
   (tdo_config_word1_17,
    Q,
    Dbg_Clk);
  output tdo_config_word1_17;
  input [3:0]Q;
  input Dbg_Clk;

  wire Dbg_Clk;
  wire [3:0]Q;
  wire tdo_config_word1_17;

  (* box_type = "PRIMITIVE" *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Serial_Dbg_Intf.SRL16E_1/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h001B),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(Dbg_Clk),
        .D(1'b0),
        .Q(tdo_config_word1_17));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E__parameterized4
   (tdo_config_word1_16,
    Q,
    Dbg_Clk);
  output tdo_config_word1_16;
  input [3:0]Q;
  input Dbg_Clk;

  wire Dbg_Clk;
  wire [3:0]Q;
  wire tdo_config_word1_16;

  (* box_type = "PRIMITIVE" *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Serial_Dbg_Intf.SRL16E_2/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0A38),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(Dbg_Clk),
        .D(1'b0),
        .Q(tdo_config_word1_16));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E__parameterized6
   (tdo_config_word1_15,
    Q,
    Dbg_Clk);
  output tdo_config_word1_15;
  input [3:0]Q;
  input Dbg_Clk;

  wire Dbg_Clk;
  wire [3:0]Q;
  wire tdo_config_word1_15;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Serial_Dbg_Intf.The_Cache_Addresses " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Serial_Dbg_Intf.The_Cache_Addresses[1].SRL16E_Cache_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'hFFFF),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(Dbg_Clk),
        .D(1'b0),
        .Q(tdo_config_word1_15));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E__parameterized6_21
   (tdo_config_word1_11,
    Q,
    Dbg_Clk);
  output tdo_config_word1_11;
  input [3:0]Q;
  input Dbg_Clk;

  wire Dbg_Clk;
  wire [3:0]Q;
  wire tdo_config_word1_11;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Serial_Dbg_Intf.The_Cache_Addresses " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Serial_Dbg_Intf.The_Cache_Addresses[5].SRL16E_Cache_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'hFFFF),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(Dbg_Clk),
        .D(1'b0),
        .Q(tdo_config_word1_11));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E__parameterized8
   (\Serial_Dbg_Intf.shift_count_reg[6] ,
    Q,
    Dbg_Clk,
    Dbg_TDO_INST_0_i_5,
    tdo_config_word1_15,
    tdo_config_word1_16,
    tdo_config_word1_17);
  output \Serial_Dbg_Intf.shift_count_reg[6] ;
  input [6:0]Q;
  input Dbg_Clk;
  input Dbg_TDO_INST_0_i_5;
  input tdo_config_word1_15;
  input tdo_config_word1_16;
  input tdo_config_word1_17;

  wire Dbg_Clk;
  wire Dbg_TDO_INST_0_i_30_n_0;
  wire Dbg_TDO_INST_0_i_5;
  wire [6:0]Q;
  wire \Serial_Dbg_Intf.shift_count_reg[6] ;
  wire tdo_config_word1_14;
  wire tdo_config_word1_15;
  wire tdo_config_word1_16;
  wire tdo_config_word1_17;

  MUXF7 Dbg_TDO_INST_0_i_17
       (.I0(Dbg_TDO_INST_0_i_30_n_0),
        .I1(Dbg_TDO_INST_0_i_5),
        .O(\Serial_Dbg_Intf.shift_count_reg[6] ),
        .S(Q[6]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    Dbg_TDO_INST_0_i_30
       (.I0(tdo_config_word1_14),
        .I1(tdo_config_word1_15),
        .I2(Q[5]),
        .I3(tdo_config_word1_16),
        .I4(Q[4]),
        .I5(tdo_config_word1_17),
        .O(Dbg_TDO_INST_0_i_30_n_0));
  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Serial_Dbg_Intf.The_Cache_Addresses " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Serial_Dbg_Intf.The_Cache_Addresses[2].SRL16E_Cache_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h3FFF),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(Dbg_Clk),
        .D(1'b0),
        .Q(tdo_config_word1_14));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module block_design_microblaze_0_0_MB_SRL16E__parameterized8_22
   (\Serial_Dbg_Intf.shift_count_reg[5] ,
    Q,
    Dbg_Clk,
    tdo_config_word1_11,
    tdo_config_word1_12,
    tdo_config_word1_13);
  output \Serial_Dbg_Intf.shift_count_reg[5] ;
  input [5:0]Q;
  input Dbg_Clk;
  input tdo_config_word1_11;
  input tdo_config_word1_12;
  input tdo_config_word1_13;

  wire Dbg_Clk;
  wire [5:0]Q;
  wire \Serial_Dbg_Intf.shift_count_reg[5] ;
  wire tdo_config_word1_10;
  wire tdo_config_word1_11;
  wire tdo_config_word1_12;
  wire tdo_config_word1_13;

  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    Dbg_TDO_INST_0_i_31
       (.I0(tdo_config_word1_10),
        .I1(tdo_config_word1_11),
        .I2(Q[5]),
        .I3(tdo_config_word1_12),
        .I4(Q[4]),
        .I5(tdo_config_word1_13),
        .O(\Serial_Dbg_Intf.shift_count_reg[5] ));
  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Serial_Dbg_Intf.The_Cache_Addresses " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Serial_Dbg_Intf.The_Cache_Addresses[6].SRL16E_Cache_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h3FFF),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(Dbg_Clk),
        .D(1'b0),
        .Q(tdo_config_word1_10));
endmodule

module block_design_microblaze_0_0_MB_SRLC16E
   (SRL16_Sel_7,
    which_pc__0,
    SRL16_MC15_7,
    PC_OF,
    Dbg_Clk,
    Dbg_Reg_En);
  output SRL16_Sel_7;
  output which_pc__0;
  input SRL16_MC15_7;
  input [3:0]PC_OF;
  input Dbg_Clk;
  input [0:7]Dbg_Reg_En;

  wire Dbg_Clk;
  wire [0:7]Dbg_Reg_En;
  wire [3:0]PC_OF;
  wire SRL16_MC15_7;
  wire SRL16_Sel_7;
  wire \Use_unisim.MB_SRL16CE_I1_i_2_n_0 ;
  wire \Use_unisim.MB_SRL16CE_I1_n_1 ;
  wire which_pc__0;

  (* box_type = "PRIMITIVE" *) 
  SRLC16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16CE_I1 
       (.A0(PC_OF[0]),
        .A1(PC_OF[1]),
        .A2(PC_OF[2]),
        .A3(PC_OF[3]),
        .CE(which_pc__0),
        .CLK(Dbg_Clk),
        .D(SRL16_MC15_7),
        .Q(SRL16_Sel_7),
        .Q15(\Use_unisim.MB_SRL16CE_I1_n_1 ));
  LUT6 #(
    .INIT(64'h0000000000000002)) 
    \Use_unisim.MB_SRL16CE_I1_i_1 
       (.I0(Dbg_Reg_En[3]),
        .I1(Dbg_Reg_En[6]),
        .I2(Dbg_Reg_En[7]),
        .I3(Dbg_Reg_En[5]),
        .I4(Dbg_Reg_En[4]),
        .I5(\Use_unisim.MB_SRL16CE_I1_i_2_n_0 ),
        .O(which_pc__0));
  LUT3 #(
    .INIT(8'hFE)) 
    \Use_unisim.MB_SRL16CE_I1_i_2 
       (.I0(Dbg_Reg_En[2]),
        .I1(Dbg_Reg_En[1]),
        .I2(Dbg_Reg_En[0]),
        .O(\Use_unisim.MB_SRL16CE_I1_i_2_n_0 ));
endmodule

(* ORIG_REF_NAME = "MB_SRLC16E" *) 
module block_design_microblaze_0_0_MB_SRLC16E_33
   (SRL16_Sel_6,
    SRL16_MC15_7,
    which_pc__0,
    SRL16_MC15_6,
    PC_OF,
    Dbg_Clk);
  output SRL16_Sel_6;
  output SRL16_MC15_7;
  input which_pc__0;
  input SRL16_MC15_6;
  input [3:0]PC_OF;
  input Dbg_Clk;

  wire Dbg_Clk;
  wire [3:0]PC_OF;
  wire SRL16_MC15_6;
  wire SRL16_MC15_7;
  wire SRL16_Sel_6;
  wire which_pc__0;

  (* box_type = "PRIMITIVE" *) 
  SRLC16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16CE_I1 
       (.A0(PC_OF[0]),
        .A1(PC_OF[1]),
        .A2(PC_OF[2]),
        .A3(PC_OF[3]),
        .CE(which_pc__0),
        .CLK(Dbg_Clk),
        .D(SRL16_MC15_6),
        .Q(SRL16_Sel_6),
        .Q15(SRL16_MC15_7));
endmodule

(* ORIG_REF_NAME = "MB_SRLC16E" *) 
module block_design_microblaze_0_0_MB_SRLC16E_35
   (SRL16_Sel_5,
    SRL16_MC15_6,
    which_pc__0,
    SRL16_MC15_5,
    PC_OF,
    Dbg_Clk);
  output SRL16_Sel_5;
  output SRL16_MC15_6;
  input which_pc__0;
  input SRL16_MC15_5;
  input [3:0]PC_OF;
  input Dbg_Clk;

  wire Dbg_Clk;
  wire [3:0]PC_OF;
  wire SRL16_MC15_5;
  wire SRL16_MC15_6;
  wire SRL16_Sel_5;
  wire which_pc__0;

  (* box_type = "PRIMITIVE" *) 
  SRLC16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16CE_I1 
       (.A0(PC_OF[0]),
        .A1(PC_OF[1]),
        .A2(PC_OF[2]),
        .A3(PC_OF[3]),
        .CE(which_pc__0),
        .CLK(Dbg_Clk),
        .D(SRL16_MC15_5),
        .Q(SRL16_Sel_5),
        .Q15(SRL16_MC15_6));
endmodule

(* ORIG_REF_NAME = "MB_SRLC16E" *) 
module block_design_microblaze_0_0_MB_SRLC16E_37
   (SRL16_Sel_4,
    SRL16_MC15_5,
    which_pc__0,
    SRL16_MC15_4,
    PC_OF,
    Dbg_Clk);
  output SRL16_Sel_4;
  output SRL16_MC15_5;
  input which_pc__0;
  input SRL16_MC15_4;
  input [3:0]PC_OF;
  input Dbg_Clk;

  wire Dbg_Clk;
  wire [3:0]PC_OF;
  wire SRL16_MC15_4;
  wire SRL16_MC15_5;
  wire SRL16_Sel_4;
  wire which_pc__0;

  (* box_type = "PRIMITIVE" *) 
  SRLC16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16CE_I1 
       (.A0(PC_OF[0]),
        .A1(PC_OF[1]),
        .A2(PC_OF[2]),
        .A3(PC_OF[3]),
        .CE(which_pc__0),
        .CLK(Dbg_Clk),
        .D(SRL16_MC15_4),
        .Q(SRL16_Sel_4),
        .Q15(SRL16_MC15_5));
endmodule

(* ORIG_REF_NAME = "MB_SRLC16E" *) 
module block_design_microblaze_0_0_MB_SRLC16E_39
   (SRL16_Sel_3,
    SRL16_MC15_4,
    which_pc__0,
    SRL16_MC15_3,
    PC_OF,
    Dbg_Clk);
  output SRL16_Sel_3;
  output SRL16_MC15_4;
  input which_pc__0;
  input SRL16_MC15_3;
  input [3:0]PC_OF;
  input Dbg_Clk;

  wire Dbg_Clk;
  wire [3:0]PC_OF;
  wire SRL16_MC15_3;
  wire SRL16_MC15_4;
  wire SRL16_Sel_3;
  wire which_pc__0;

  (* box_type = "PRIMITIVE" *) 
  SRLC16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16CE_I1 
       (.A0(PC_OF[0]),
        .A1(PC_OF[1]),
        .A2(PC_OF[2]),
        .A3(PC_OF[3]),
        .CE(which_pc__0),
        .CLK(Dbg_Clk),
        .D(SRL16_MC15_3),
        .Q(SRL16_Sel_3),
        .Q15(SRL16_MC15_4));
endmodule

(* ORIG_REF_NAME = "MB_SRLC16E" *) 
module block_design_microblaze_0_0_MB_SRLC16E_41
   (SRL16_Sel_2,
    SRL16_MC15_3,
    which_pc__0,
    SRL16_MC15_2,
    PC_OF,
    Dbg_Clk);
  output SRL16_Sel_2;
  output SRL16_MC15_3;
  input which_pc__0;
  input SRL16_MC15_2;
  input [3:0]PC_OF;
  input Dbg_Clk;

  wire Dbg_Clk;
  wire [3:0]PC_OF;
  wire SRL16_MC15_2;
  wire SRL16_MC15_3;
  wire SRL16_Sel_2;
  wire which_pc__0;

  (* box_type = "PRIMITIVE" *) 
  SRLC16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16CE_I1 
       (.A0(PC_OF[0]),
        .A1(PC_OF[1]),
        .A2(PC_OF[2]),
        .A3(PC_OF[3]),
        .CE(which_pc__0),
        .CLK(Dbg_Clk),
        .D(SRL16_MC15_2),
        .Q(SRL16_Sel_2),
        .Q15(SRL16_MC15_3));
endmodule

(* ORIG_REF_NAME = "MB_SRLC16E" *) 
module block_design_microblaze_0_0_MB_SRLC16E_43
   (SRL16_Sel_1,
    SRL16_MC15_2,
    which_pc__0,
    SRL16_MC15_1,
    PC_OF,
    Dbg_Clk);
  output SRL16_Sel_1;
  output SRL16_MC15_2;
  input which_pc__0;
  input SRL16_MC15_1;
  input [3:0]PC_OF;
  input Dbg_Clk;

  wire Dbg_Clk;
  wire [3:0]PC_OF;
  wire SRL16_MC15_1;
  wire SRL16_MC15_2;
  wire SRL16_Sel_1;
  wire which_pc__0;

  (* box_type = "PRIMITIVE" *) 
  SRLC16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16CE_I1 
       (.A0(PC_OF[0]),
        .A1(PC_OF[1]),
        .A2(PC_OF[2]),
        .A3(PC_OF[3]),
        .CE(which_pc__0),
        .CLK(Dbg_Clk),
        .D(SRL16_MC15_1),
        .Q(SRL16_Sel_1),
        .Q15(SRL16_MC15_2));
endmodule

(* ORIG_REF_NAME = "MB_SRLC16E" *) 
module block_design_microblaze_0_0_MB_SRLC16E_45
   (SRL16_Sel_0,
    SRL16_MC15_1,
    which_pc__0,
    Dbg_TDI,
    PC_OF,
    Dbg_Clk);
  output SRL16_Sel_0;
  output SRL16_MC15_1;
  input which_pc__0;
  input Dbg_TDI;
  input [3:0]PC_OF;
  input Dbg_Clk;

  wire Dbg_Clk;
  wire Dbg_TDI;
  wire [3:0]PC_OF;
  wire SRL16_MC15_1;
  wire SRL16_Sel_0;
  wire which_pc__0;

  (* box_type = "PRIMITIVE" *) 
  SRLC16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16CE_I1 
       (.A0(PC_OF[0]),
        .A1(PC_OF[1]),
        .A2(PC_OF[2]),
        .A3(PC_OF[3]),
        .CE(which_pc__0),
        .CLK(Dbg_Clk),
        .D(Dbg_TDI),
        .Q(SRL16_Sel_0),
        .Q15(SRL16_MC15_1));
endmodule

module block_design_microblaze_0_0_MSR_Reg
   (msr_I,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    MSR_Rst,
    \Using_FPGA.Native_2 ,
    Clk,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    \Using_FPGA.Native_7 ,
    \Using_FPGA.Native_8 ,
    \Using_dynamic_instr_Address.old_IE_value_reg );
  output [1:0]msr_I;
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  input MSR_Rst;
  input \Using_FPGA.Native_2 ;
  input Clk;
  input \Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_4 ;
  input \Using_FPGA.Native_5 ;
  input \Using_FPGA.Native_6 ;
  input \Using_FPGA.Native_7 ;
  input \Using_FPGA.Native_8 ;
  input \Using_dynamic_instr_Address.old_IE_value_reg ;

  wire Clk;
  wire MSR_Rst;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire \Using_FPGA.Native_8 ;
  wire \Using_dynamic_instr_Address.old_IE_value_reg ;
  wire [1:0]msr_I;

  block_design_microblaze_0_0_MSR_Reg_Bit \MSR_Bits[27].Using_MSR_Reg_Bit.MSR_Reg_Bit_I 
       (.Clk(Clk),
        .MSR_Rst(MSR_Rst),
        .\Using_FPGA.Native (\Using_FPGA.Native_2 ),
        .msr_I(msr_I[1]));
  block_design_microblaze_0_0_MSR_Reg_Bit_955 \MSR_Bits[28].Using_MSR_Reg_Bit.MSR_Reg_Bit_I 
       (.Clk(Clk),
        .\Using_FPGA.Native (\Using_FPGA.Native_3 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_4 ),
        .msr_I(msr_I[0]));
  block_design_microblaze_0_0_MSR_Reg_Bit_956 \MSR_Bits[29].Using_MSR_Reg_Bit.MSR_Reg_Bit_I 
       (.Clk(Clk),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_5 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_6 ));
  block_design_microblaze_0_0_MSR_Reg_Bit_957 \MSR_Bits[30].Using_MSR_Reg_Bit.MSR_Reg_Bit_I 
       (.Clk(Clk),
        .\Using_FPGA.Native (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_7 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_8 ),
        .\Using_dynamic_instr_Address.old_IE_value_reg (\Using_dynamic_instr_Address.old_IE_value_reg ));
endmodule

module block_design_microblaze_0_0_MSR_Reg_Bit
   (msr_I,
    MSR_Rst,
    \Using_FPGA.Native ,
    Clk);
  output [0:0]msr_I;
  input MSR_Rst;
  input \Using_FPGA.Native ;
  input Clk;

  wire Clk;
  wire MSR_Rst;
  wire \Using_FPGA.Native ;
  wire [0:0]msr_I;

  block_design_microblaze_0_0_MB_FDRSE_961 MSR_I
       (.Clk(Clk),
        .MSR_Rst(MSR_Rst),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .msr_I(msr_I));
endmodule

(* ORIG_REF_NAME = "MSR_Reg_Bit" *) 
module block_design_microblaze_0_0_MSR_Reg_Bit_955
   (msr_I,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    Clk);
  output [0:0]msr_I;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]msr_I;

  block_design_microblaze_0_0_MB_FDRSE_960 MSR_I
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .msr_I(msr_I));
endmodule

(* ORIG_REF_NAME = "MSR_Reg_Bit" *) 
module block_design_microblaze_0_0_MSR_Reg_Bit_956
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Clk);
  output \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;

  block_design_microblaze_0_0_MB_FDRSE_959 MSR_I
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ));
endmodule

(* ORIG_REF_NAME = "MSR_Reg_Bit" *) 
module block_design_microblaze_0_0_MSR_Reg_Bit_957
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Clk,
    \Using_dynamic_instr_Address.old_IE_value_reg );
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Clk;
  input \Using_dynamic_instr_Address.old_IE_value_reg ;

  wire Clk;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_dynamic_instr_Address.old_IE_value_reg ;

  block_design_microblaze_0_0_MB_FDRSE_958 MSR_I
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_2 ),
        .\Using_dynamic_instr_Address.old_IE_value_reg (\Using_dynamic_instr_Address.old_IE_value_reg ));
endmodule

(* C_ADDR_TAG_BITS = "0" *) (* C_ALLOW_DCACHE_WR = "1" *) (* C_ALLOW_ICACHE_WR = "1" *) 
(* C_AREA_OPTIMIZED = "1" *) (* C_ASYNC_INTERRUPT = "1" *) (* C_ASYNC_WAKEUP = "2" *) 
(* C_AVOID_PRIMITIVES = "0" *) (* C_BASE_VECTORS = "64'b0000000000000000000000000000000000000000000000000000000000000000" *) (* C_BRANCH_TARGET_CACHE_SIZE = "0" *) 
(* C_CACHE_BYTE_SIZE = "4096" *) (* C_DADDR_SIZE = "32" *) (* C_DATA_SIZE = "32" *) 
(* C_DCACHE_ADDR_TAG = "0" *) (* C_DCACHE_ALWAYS_USED = "1" *) (* C_DCACHE_BASEADDR = "64'b0000000000000000000000000000000000000000000000000000000000000000" *) 
(* C_DCACHE_BYTE_SIZE = "4096" *) (* C_DCACHE_DATA_WIDTH = "0" *) (* C_DCACHE_FORCE_TAG_LUTRAM = "0" *) 
(* C_DCACHE_HIGHADDR = "64'b0000000000000000000000000000000000111111111111111111111111111111" *) (* C_DCACHE_LINE_LEN = "4" *) (* C_DCACHE_USE_WRITEBACK = "0" *) 
(* C_DCACHE_VICTIMS = "0" *) (* C_DEBUG_COUNTER_WIDTH = "32" *) (* C_DEBUG_ENABLED = "2" *) 
(* C_DEBUG_EVENT_COUNTERS = "5" *) (* C_DEBUG_EXTERNAL_TRACE = "0" *) (* C_DEBUG_INTERFACE = "0" *) 
(* C_DEBUG_LATENCY_COUNTERS = "1" *) (* C_DEBUG_PROFILE_SIZE = "0" *) (* C_DEBUG_TRACE_ASYNC_RESET = "0" *) 
(* C_DEBUG_TRACE_SIZE = "8192" *) (* C_DIV_ZERO_EXCEPTION = "0" *) (* C_DYNAMIC_BUS_SIZING = "0" *) 
(* C_D_AXI = "1" *) (* C_D_LMB = "1" *) (* C_D_LMB_PROTOCOL = "0" *) 
(* C_ECC_USE_CE_EXCEPTION = "0" *) (* C_EDGE_IS_POSITIVE = "1" *) (* C_ENDIANNESS = "1" *) 
(* C_FAMILY = "spartan7" *) (* C_FAULT_TOLERANT = "0" *) (* C_FPU_EXCEPTION = "0" *) 
(* C_FREQ = "81247969" *) (* C_FSL_EXCEPTION = "0" *) (* C_FSL_LINKS = "2" *) 
(* C_IADDR_SIZE = "32" *) (* C_ICACHE_ALWAYS_USED = "1" *) (* C_ICACHE_BASEADDR = "64'b0000000000000000000000000000000000000000000000000000000000000000" *) 
(* C_ICACHE_DATA_WIDTH = "0" *) (* C_ICACHE_FORCE_TAG_LUTRAM = "0" *) (* C_ICACHE_HIGHADDR = "64'b0000000000000000000000000000000000111111111111111111111111111111" *) 
(* C_ICACHE_LINE_LEN = "4" *) (* C_ICACHE_STREAMS = "0" *) (* C_ICACHE_VICTIMS = "0" *) 
(* C_ILL_OPCODE_EXCEPTION = "0" *) (* C_IMPRECISE_EXCEPTIONS = "0" *) (* C_INSTANCE = "block_design_microblaze_0_0" *) 
(* C_INSTR_SIZE = "32" *) (* C_INTERCONNECT = "2" *) (* C_INTERRUPT_IS_EDGE = "0" *) 
(* C_I_AXI = "0" *) (* C_I_LMB = "1" *) (* C_I_LMB_PROTOCOL = "0" *) 
(* C_LMB_DATA_SIZE = "32" *) (* C_LOCKSTEP_MASTER = "0" *) (* C_LOCKSTEP_SLAVE = "0" *) 
(* C_M0_AXIS_DATA_WIDTH = "32" *) (* C_M10_AXIS_DATA_WIDTH = "32" *) (* C_M11_AXIS_DATA_WIDTH = "32" *) 
(* C_M12_AXIS_DATA_WIDTH = "32" *) (* C_M13_AXIS_DATA_WIDTH = "32" *) (* C_M14_AXIS_DATA_WIDTH = "32" *) 
(* C_M15_AXIS_DATA_WIDTH = "32" *) (* C_M1_AXIS_DATA_WIDTH = "32" *) (* C_M2_AXIS_DATA_WIDTH = "32" *) 
(* C_M3_AXIS_DATA_WIDTH = "32" *) (* C_M4_AXIS_DATA_WIDTH = "32" *) (* C_M5_AXIS_DATA_WIDTH = "32" *) 
(* C_M6_AXIS_DATA_WIDTH = "32" *) (* C_M7_AXIS_DATA_WIDTH = "32" *) (* C_M8_AXIS_DATA_WIDTH = "32" *) 
(* C_M9_AXIS_DATA_WIDTH = "32" *) (* C_MMU_DTLB_SIZE = "2" *) (* C_MMU_ITLB_SIZE = "1" *) 
(* C_MMU_PRIVILEGED_INSTR = "0" *) (* C_MMU_TLB_ACCESS = "3" *) (* C_MMU_ZONES = "2" *) 
(* C_M_AXI_DC_ADDR_WIDTH = "32" *) (* C_M_AXI_DC_ARUSER_WIDTH = "5" *) (* C_M_AXI_DC_AWUSER_WIDTH = "5" *) 
(* C_M_AXI_DC_BUSER_WIDTH = "1" *) (* C_M_AXI_DC_DATA_WIDTH = "32" *) (* C_M_AXI_DC_EXCLUSIVE_ACCESS = "0" *) 
(* C_M_AXI_DC_RUSER_WIDTH = "1" *) (* C_M_AXI_DC_THREAD_ID_WIDTH = "1" *) (* C_M_AXI_DC_USER_VALUE = "31" *) 
(* C_M_AXI_DC_WUSER_WIDTH = "1" *) (* C_M_AXI_DP_ADDR_WIDTH = "32" *) (* C_M_AXI_DP_DATA_WIDTH = "32" *) 
(* C_M_AXI_DP_EXCLUSIVE_ACCESS = "0" *) (* C_M_AXI_DP_THREAD_ID_WIDTH = "1" *) (* C_M_AXI_D_BUS_EXCEPTION = "0" *) 
(* C_M_AXI_IC_ADDR_WIDTH = "32" *) (* C_M_AXI_IC_ARUSER_WIDTH = "5" *) (* C_M_AXI_IC_AWUSER_WIDTH = "5" *) 
(* C_M_AXI_IC_BUSER_WIDTH = "1" *) (* C_M_AXI_IC_DATA_WIDTH = "32" *) (* C_M_AXI_IC_RUSER_WIDTH = "1" *) 
(* C_M_AXI_IC_THREAD_ID_WIDTH = "1" *) (* C_M_AXI_IC_USER_VALUE = "31" *) (* C_M_AXI_IC_WUSER_WIDTH = "1" *) 
(* C_M_AXI_IP_ADDR_WIDTH = "32" *) (* C_M_AXI_IP_DATA_WIDTH = "32" *) (* C_M_AXI_IP_THREAD_ID_WIDTH = "1" *) 
(* C_M_AXI_I_BUS_EXCEPTION = "0" *) (* C_NUMBER_OF_PC_BRK = "1" *) (* C_NUMBER_OF_RD_ADDR_BRK = "0" *) 
(* C_NUMBER_OF_WR_ADDR_BRK = "0" *) (* C_NUM_SYNC_FF_CLK = "2" *) (* C_NUM_SYNC_FF_CLK_DEBUG = "2" *) 
(* C_NUM_SYNC_FF_CLK_IRQ = "1" *) (* C_NUM_SYNC_FF_DBG_CLK = "1" *) (* C_NUM_SYNC_FF_DBG_TRACE_CLK = "2" *) 
(* C_OPCODE_0x0_ILLEGAL = "0" *) (* C_OPTIMIZATION = "0" *) (* C_PC_WIDTH = "32" *) 
(* C_PIADDR_SIZE = "32" *) (* C_PVR = "0" *) (* C_PVR_USER1 = "8'b00000000" *) 
(* C_PVR_USER2 = "0" *) (* C_RESET_MSR = "0" *) (* C_S0_AXIS_DATA_WIDTH = "32" *) 
(* C_S10_AXIS_DATA_WIDTH = "32" *) (* C_S11_AXIS_DATA_WIDTH = "32" *) (* C_S12_AXIS_DATA_WIDTH = "32" *) 
(* C_S13_AXIS_DATA_WIDTH = "32" *) (* C_S14_AXIS_DATA_WIDTH = "32" *) (* C_S15_AXIS_DATA_WIDTH = "32" *) 
(* C_S1_AXIS_DATA_WIDTH = "32" *) (* C_S2_AXIS_DATA_WIDTH = "32" *) (* C_S3_AXIS_DATA_WIDTH = "32" *) 
(* C_S4_AXIS_DATA_WIDTH = "32" *) (* C_S5_AXIS_DATA_WIDTH = "32" *) (* C_S6_AXIS_DATA_WIDTH = "32" *) 
(* C_S7_AXIS_DATA_WIDTH = "32" *) (* C_S8_AXIS_DATA_WIDTH = "32" *) (* C_S9_AXIS_DATA_WIDTH = "32" *) 
(* C_SCO = "0" *) (* C_UNALIGNED_EXCEPTIONS = "0" *) (* C_USE_BARREL = "1" *) 
(* C_USE_BRANCH_TARGET_CACHE = "0" *) (* C_USE_CONFIG_RESET = "0" *) (* C_USE_DCACHE = "0" *) 
(* C_USE_DIV = "0" *) (* C_USE_EXTENDED_FSL_INSTR = "1" *) (* C_USE_EXT_BRK = "0" *) 
(* C_USE_EXT_NM_BRK = "0" *) (* C_USE_FPU = "0" *) (* C_USE_HW_MUL = "2" *) 
(* C_USE_ICACHE = "0" *) (* C_USE_INTERRUPT = "2" *) (* C_USE_MMU = "0" *) 
(* C_USE_MSR_INSTR = "1" *) (* C_USE_NON_SECURE = "0" *) (* C_USE_PCMP_INSTR = "1" *) 
(* C_USE_REORDER_INSTR = "0" *) (* C_USE_STACK_PROTECTION = "0" *) (* downgradeipidentifiedwarnings = "yes" *) 
module block_design_microblaze_0_0_MicroBlaze
   (RAM_To,
    RAM_From,
    Clk,
    Reset,
    Mb_Reset,
    Config_Reset,
    Scan_Reset_Sel,
    Scan_Reset,
    Scan_En,
    Reset_Mode,
    Non_Secure,
    Interrupt,
    Interrupt_Address,
    Interrupt_Ack,
    Ext_BRK,
    Ext_NM_BRK,
    Pause,
    Pause_Ack,
    Dbg_Continue,
    Dbg_Stop,
    Dbg_Intr,
    MB_Halted,
    MB_Error,
    Wakeup,
    Sleep,
    Hibernate,
    Suspend,
    Dbg_Wakeup,
    LOCKSTEP_Slave_In,
    LOCKSTEP_Master_Out,
    LOCKSTEP_Out,
    Instr_Addr,
    Instr,
    IFetch,
    I_AS,
    IReady,
    IWAIT,
    ICE,
    IUE,
    M_AXI_IP_AWID,
    M_AXI_IP_AWADDR,
    M_AXI_IP_AWLEN,
    M_AXI_IP_AWSIZE,
    M_AXI_IP_AWBURST,
    M_AXI_IP_AWLOCK,
    M_AXI_IP_AWCACHE,
    M_AXI_IP_AWPROT,
    M_AXI_IP_AWQOS,
    M_AXI_IP_AWVALID,
    M_AXI_IP_AWREADY,
    M_AXI_IP_WDATA,
    M_AXI_IP_WSTRB,
    M_AXI_IP_WLAST,
    M_AXI_IP_WVALID,
    M_AXI_IP_WREADY,
    M_AXI_IP_BID,
    M_AXI_IP_BRESP,
    M_AXI_IP_BVALID,
    M_AXI_IP_BREADY,
    M_AXI_IP_ARID,
    M_AXI_IP_ARADDR,
    M_AXI_IP_ARLEN,
    M_AXI_IP_ARSIZE,
    M_AXI_IP_ARBURST,
    M_AXI_IP_ARLOCK,
    M_AXI_IP_ARCACHE,
    M_AXI_IP_ARPROT,
    M_AXI_IP_ARQOS,
    M_AXI_IP_ARVALID,
    M_AXI_IP_ARREADY,
    M_AXI_IP_RID,
    M_AXI_IP_RDATA,
    M_AXI_IP_RRESP,
    M_AXI_IP_RLAST,
    M_AXI_IP_RVALID,
    M_AXI_IP_RREADY,
    Data_Addr,
    Data_Read,
    Data_Write,
    D_AS,
    Read_Strobe,
    Write_Strobe,
    DReady,
    DWait,
    DCE,
    DUE,
    Byte_Enable,
    M_AXI_DP_AWID,
    M_AXI_DP_AWADDR,
    M_AXI_DP_AWLEN,
    M_AXI_DP_AWSIZE,
    M_AXI_DP_AWBURST,
    M_AXI_DP_AWLOCK,
    M_AXI_DP_AWCACHE,
    M_AXI_DP_AWPROT,
    M_AXI_DP_AWQOS,
    M_AXI_DP_AWVALID,
    M_AXI_DP_AWREADY,
    M_AXI_DP_WDATA,
    M_AXI_DP_WSTRB,
    M_AXI_DP_WLAST,
    M_AXI_DP_WVALID,
    M_AXI_DP_WREADY,
    M_AXI_DP_BID,
    M_AXI_DP_BRESP,
    M_AXI_DP_BVALID,
    M_AXI_DP_BREADY,
    M_AXI_DP_ARID,
    M_AXI_DP_ARADDR,
    M_AXI_DP_ARLEN,
    M_AXI_DP_ARSIZE,
    M_AXI_DP_ARBURST,
    M_AXI_DP_ARLOCK,
    M_AXI_DP_ARCACHE,
    M_AXI_DP_ARPROT,
    M_AXI_DP_ARQOS,
    M_AXI_DP_ARVALID,
    M_AXI_DP_ARREADY,
    M_AXI_DP_RID,
    M_AXI_DP_RDATA,
    M_AXI_DP_RRESP,
    M_AXI_DP_RLAST,
    M_AXI_DP_RVALID,
    M_AXI_DP_RREADY,
    Dbg_Disable,
    Dbg_Clk,
    Dbg_TDI,
    Dbg_TDO,
    Dbg_Reg_En,
    Dbg_Shift,
    Dbg_Capture,
    Dbg_Update,
    Debug_Rst,
    Dbg_Trig_In,
    Dbg_Trig_Ack_In,
    Dbg_Trig_Out,
    Dbg_Trig_Ack_Out,
    Dbg_Trace_Clk,
    Dbg_Trace_Data,
    Dbg_Trace_Ready,
    Dbg_Trace_Valid,
    Dbg_AWADDR,
    Dbg_AWVALID,
    Dbg_AWREADY,
    Dbg_WDATA,
    Dbg_WVALID,
    Dbg_WREADY,
    Dbg_BRESP,
    Dbg_BVALID,
    Dbg_BREADY,
    Dbg_ARADDR,
    Dbg_ARVALID,
    Dbg_ARREADY,
    Dbg_RDATA,
    Dbg_RRESP,
    Dbg_RVALID,
    Dbg_RREADY,
    DEBUG_ACLK,
    DEBUG_ARESETN,
    Trace_Instruction,
    Trace_Valid_Instr,
    Trace_PC,
    Trace_Reg_Write,
    Trace_Reg_Addr,
    Trace_MSR_Reg,
    Trace_PID_Reg,
    Trace_New_Reg_Value,
    Trace_Exception_Taken,
    Trace_Exception_Kind,
    Trace_Jump_Taken,
    Trace_Delay_Slot,
    Trace_Data_Address,
    Trace_Data_Write_Value,
    Trace_Data_Byte_Enable,
    Trace_Data_Access,
    Trace_Data_Read,
    Trace_Data_Write,
    Trace_DCache_Req,
    Trace_DCache_Hit,
    Trace_DCache_Rdy,
    Trace_DCache_Read,
    Trace_ICache_Req,
    Trace_ICache_Hit,
    Trace_ICache_Rdy,
    Trace_OF_PipeRun,
    Trace_EX_PipeRun,
    Trace_MEM_PipeRun,
    Trace_MB_Halted,
    Trace_Jump_Hit,
    M0_AXIS_TLAST,
    M0_AXIS_TDATA,
    M0_AXIS_TVALID,
    M0_AXIS_TREADY,
    M1_AXIS_TLAST,
    M1_AXIS_TDATA,
    M1_AXIS_TVALID,
    M1_AXIS_TREADY,
    M2_AXIS_TLAST,
    M2_AXIS_TDATA,
    M2_AXIS_TVALID,
    M2_AXIS_TREADY,
    M3_AXIS_TLAST,
    M3_AXIS_TDATA,
    M3_AXIS_TVALID,
    M3_AXIS_TREADY,
    M4_AXIS_TLAST,
    M4_AXIS_TDATA,
    M4_AXIS_TVALID,
    M4_AXIS_TREADY,
    M5_AXIS_TLAST,
    M5_AXIS_TDATA,
    M5_AXIS_TVALID,
    M5_AXIS_TREADY,
    M6_AXIS_TLAST,
    M6_AXIS_TDATA,
    M6_AXIS_TVALID,
    M6_AXIS_TREADY,
    M7_AXIS_TLAST,
    M7_AXIS_TDATA,
    M7_AXIS_TVALID,
    M7_AXIS_TREADY,
    M8_AXIS_TLAST,
    M8_AXIS_TDATA,
    M8_AXIS_TVALID,
    M8_AXIS_TREADY,
    M9_AXIS_TLAST,
    M9_AXIS_TDATA,
    M9_AXIS_TVALID,
    M9_AXIS_TREADY,
    M10_AXIS_TLAST,
    M10_AXIS_TDATA,
    M10_AXIS_TVALID,
    M10_AXIS_TREADY,
    M11_AXIS_TLAST,
    M11_AXIS_TDATA,
    M11_AXIS_TVALID,
    M11_AXIS_TREADY,
    M12_AXIS_TLAST,
    M12_AXIS_TDATA,
    M12_AXIS_TVALID,
    M12_AXIS_TREADY,
    M13_AXIS_TLAST,
    M13_AXIS_TDATA,
    M13_AXIS_TVALID,
    M13_AXIS_TREADY,
    M14_AXIS_TLAST,
    M14_AXIS_TDATA,
    M14_AXIS_TVALID,
    M14_AXIS_TREADY,
    M15_AXIS_TLAST,
    M15_AXIS_TDATA,
    M15_AXIS_TVALID,
    M15_AXIS_TREADY,
    S0_AXIS_TLAST,
    S0_AXIS_TDATA,
    S0_AXIS_TVALID,
    S0_AXIS_TREADY,
    S1_AXIS_TLAST,
    S1_AXIS_TDATA,
    S1_AXIS_TVALID,
    S1_AXIS_TREADY,
    S2_AXIS_TLAST,
    S2_AXIS_TDATA,
    S2_AXIS_TVALID,
    S2_AXIS_TREADY,
    S3_AXIS_TLAST,
    S3_AXIS_TDATA,
    S3_AXIS_TVALID,
    S3_AXIS_TREADY,
    S4_AXIS_TLAST,
    S4_AXIS_TDATA,
    S4_AXIS_TVALID,
    S4_AXIS_TREADY,
    S5_AXIS_TLAST,
    S5_AXIS_TDATA,
    S5_AXIS_TVALID,
    S5_AXIS_TREADY,
    S6_AXIS_TLAST,
    S6_AXIS_TDATA,
    S6_AXIS_TVALID,
    S6_AXIS_TREADY,
    S7_AXIS_TLAST,
    S7_AXIS_TDATA,
    S7_AXIS_TVALID,
    S7_AXIS_TREADY,
    S8_AXIS_TLAST,
    S8_AXIS_TDATA,
    S8_AXIS_TVALID,
    S8_AXIS_TREADY,
    S9_AXIS_TLAST,
    S9_AXIS_TDATA,
    S9_AXIS_TVALID,
    S9_AXIS_TREADY,
    S10_AXIS_TLAST,
    S10_AXIS_TDATA,
    S10_AXIS_TVALID,
    S10_AXIS_TREADY,
    S11_AXIS_TLAST,
    S11_AXIS_TDATA,
    S11_AXIS_TVALID,
    S11_AXIS_TREADY,
    S12_AXIS_TLAST,
    S12_AXIS_TDATA,
    S12_AXIS_TVALID,
    S12_AXIS_TREADY,
    S13_AXIS_TLAST,
    S13_AXIS_TDATA,
    S13_AXIS_TVALID,
    S13_AXIS_TREADY,
    S14_AXIS_TLAST,
    S14_AXIS_TDATA,
    S14_AXIS_TVALID,
    S14_AXIS_TREADY,
    S15_AXIS_TLAST,
    S15_AXIS_TDATA,
    S15_AXIS_TVALID,
    S15_AXIS_TREADY,
    M_AXI_IC_AWID,
    M_AXI_IC_AWADDR,
    M_AXI_IC_AWLEN,
    M_AXI_IC_AWSIZE,
    M_AXI_IC_AWBURST,
    M_AXI_IC_AWLOCK,
    M_AXI_IC_AWCACHE,
    M_AXI_IC_AWPROT,
    M_AXI_IC_AWQOS,
    M_AXI_IC_AWVALID,
    M_AXI_IC_AWREADY,
    M_AXI_IC_AWUSER,
    M_AXI_IC_AWDOMAIN,
    M_AXI_IC_AWSNOOP,
    M_AXI_IC_AWBAR,
    M_AXI_IC_WDATA,
    M_AXI_IC_WSTRB,
    M_AXI_IC_WLAST,
    M_AXI_IC_WVALID,
    M_AXI_IC_WREADY,
    M_AXI_IC_WUSER,
    M_AXI_IC_BID,
    M_AXI_IC_BRESP,
    M_AXI_IC_BVALID,
    M_AXI_IC_BREADY,
    M_AXI_IC_BUSER,
    M_AXI_IC_WACK,
    M_AXI_IC_ARID,
    M_AXI_IC_ARADDR,
    M_AXI_IC_ARLEN,
    M_AXI_IC_ARSIZE,
    M_AXI_IC_ARBURST,
    M_AXI_IC_ARLOCK,
    M_AXI_IC_ARCACHE,
    M_AXI_IC_ARPROT,
    M_AXI_IC_ARQOS,
    M_AXI_IC_ARVALID,
    M_AXI_IC_ARREADY,
    M_AXI_IC_ARUSER,
    M_AXI_IC_ARDOMAIN,
    M_AXI_IC_ARSNOOP,
    M_AXI_IC_ARBAR,
    M_AXI_IC_RID,
    M_AXI_IC_RDATA,
    M_AXI_IC_RRESP,
    M_AXI_IC_RLAST,
    M_AXI_IC_RVALID,
    M_AXI_IC_RREADY,
    M_AXI_IC_RUSER,
    M_AXI_IC_RACK,
    M_AXI_IC_ACVALID,
    M_AXI_IC_ACADDR,
    M_AXI_IC_ACSNOOP,
    M_AXI_IC_ACPROT,
    M_AXI_IC_ACREADY,
    M_AXI_IC_CRVALID,
    M_AXI_IC_CRRESP,
    M_AXI_IC_CRREADY,
    M_AXI_IC_CDVALID,
    M_AXI_IC_CDDATA,
    M_AXI_IC_CDLAST,
    M_AXI_IC_CDREADY,
    M_AXI_DC_AWID,
    M_AXI_DC_AWADDR,
    M_AXI_DC_AWLEN,
    M_AXI_DC_AWSIZE,
    M_AXI_DC_AWBURST,
    M_AXI_DC_AWLOCK,
    M_AXI_DC_AWCACHE,
    M_AXI_DC_AWPROT,
    M_AXI_DC_AWQOS,
    M_AXI_DC_AWVALID,
    M_AXI_DC_AWREADY,
    M_AXI_DC_AWUSER,
    M_AXI_DC_AWDOMAIN,
    M_AXI_DC_AWSNOOP,
    M_AXI_DC_AWBAR,
    M_AXI_DC_WDATA,
    M_AXI_DC_WSTRB,
    M_AXI_DC_WLAST,
    M_AXI_DC_WVALID,
    M_AXI_DC_WREADY,
    M_AXI_DC_WUSER,
    M_AXI_DC_BRESP,
    M_AXI_DC_BID,
    M_AXI_DC_BVALID,
    M_AXI_DC_BREADY,
    M_AXI_DC_BUSER,
    M_AXI_DC_WACK,
    M_AXI_DC_ARID,
    M_AXI_DC_ARADDR,
    M_AXI_DC_ARLEN,
    M_AXI_DC_ARSIZE,
    M_AXI_DC_ARBURST,
    M_AXI_DC_ARLOCK,
    M_AXI_DC_ARCACHE,
    M_AXI_DC_ARPROT,
    M_AXI_DC_ARQOS,
    M_AXI_DC_ARVALID,
    M_AXI_DC_ARREADY,
    M_AXI_DC_ARUSER,
    M_AXI_DC_ARDOMAIN,
    M_AXI_DC_ARSNOOP,
    M_AXI_DC_ARBAR,
    M_AXI_DC_RID,
    M_AXI_DC_RDATA,
    M_AXI_DC_RRESP,
    M_AXI_DC_RLAST,
    M_AXI_DC_RVALID,
    M_AXI_DC_RREADY,
    M_AXI_DC_RUSER,
    M_AXI_DC_RACK,
    M_AXI_DC_ACVALID,
    M_AXI_DC_ACADDR,
    M_AXI_DC_ACSNOOP,
    M_AXI_DC_ACPROT,
    M_AXI_DC_ACREADY,
    M_AXI_DC_CRVALID,
    M_AXI_DC_CRRESP,
    M_AXI_DC_CRREADY,
    M_AXI_DC_CDVALID,
    M_AXI_DC_CDDATA,
    M_AXI_DC_CDLAST,
    M_AXI_DC_CDREADY);
  input [255:0]RAM_To;
  output [255:0]RAM_From;
  input Clk;
  input Reset;
  input Mb_Reset;
  input Config_Reset;
  input Scan_Reset_Sel;
  input Scan_Reset;
  input Scan_En;
  input [0:1]Reset_Mode;
  input [0:3]Non_Secure;
  input Interrupt;
  input [0:31]Interrupt_Address;
  output [0:1]Interrupt_Ack;
  input Ext_BRK;
  input Ext_NM_BRK;
  input Pause;
  output Pause_Ack;
  output Dbg_Continue;
  input Dbg_Stop;
  output Dbg_Intr;
  output MB_Halted;
  output MB_Error;
  input [0:1]Wakeup;
  output Sleep;
  output Hibernate;
  output Suspend;
  output Dbg_Wakeup;
  input [0:4095]LOCKSTEP_Slave_In;
  output [0:4095]LOCKSTEP_Master_Out;
  output [0:4095]LOCKSTEP_Out;
  output [0:31]Instr_Addr;
  input [0:31]Instr;
  output IFetch;
  output I_AS;
  input IReady;
  input IWAIT;
  input ICE;
  input IUE;
  output [0:0]M_AXI_IP_AWID;
  output [31:0]M_AXI_IP_AWADDR;
  output [7:0]M_AXI_IP_AWLEN;
  output [2:0]M_AXI_IP_AWSIZE;
  output [1:0]M_AXI_IP_AWBURST;
  output M_AXI_IP_AWLOCK;
  output [3:0]M_AXI_IP_AWCACHE;
  output [2:0]M_AXI_IP_AWPROT;
  output [3:0]M_AXI_IP_AWQOS;
  output M_AXI_IP_AWVALID;
  input M_AXI_IP_AWREADY;
  output [31:0]M_AXI_IP_WDATA;
  output [3:0]M_AXI_IP_WSTRB;
  output M_AXI_IP_WLAST;
  output M_AXI_IP_WVALID;
  input M_AXI_IP_WREADY;
  input [0:0]M_AXI_IP_BID;
  input [1:0]M_AXI_IP_BRESP;
  input M_AXI_IP_BVALID;
  output M_AXI_IP_BREADY;
  output [0:0]M_AXI_IP_ARID;
  output [31:0]M_AXI_IP_ARADDR;
  output [7:0]M_AXI_IP_ARLEN;
  output [2:0]M_AXI_IP_ARSIZE;
  output [1:0]M_AXI_IP_ARBURST;
  output M_AXI_IP_ARLOCK;
  output [3:0]M_AXI_IP_ARCACHE;
  output [2:0]M_AXI_IP_ARPROT;
  output [3:0]M_AXI_IP_ARQOS;
  output M_AXI_IP_ARVALID;
  input M_AXI_IP_ARREADY;
  input [0:0]M_AXI_IP_RID;
  input [31:0]M_AXI_IP_RDATA;
  input [1:0]M_AXI_IP_RRESP;
  input M_AXI_IP_RLAST;
  input M_AXI_IP_RVALID;
  output M_AXI_IP_RREADY;
  output [0:31]Data_Addr;
  input [0:31]Data_Read;
  output [0:31]Data_Write;
  output D_AS;
  output Read_Strobe;
  output Write_Strobe;
  input DReady;
  input DWait;
  input DCE;
  input DUE;
  output [0:3]Byte_Enable;
  output [0:0]M_AXI_DP_AWID;
  output [31:0]M_AXI_DP_AWADDR;
  output [7:0]M_AXI_DP_AWLEN;
  output [2:0]M_AXI_DP_AWSIZE;
  output [1:0]M_AXI_DP_AWBURST;
  output M_AXI_DP_AWLOCK;
  output [3:0]M_AXI_DP_AWCACHE;
  output [2:0]M_AXI_DP_AWPROT;
  output [3:0]M_AXI_DP_AWQOS;
  output M_AXI_DP_AWVALID;
  input M_AXI_DP_AWREADY;
  output [31:0]M_AXI_DP_WDATA;
  output [3:0]M_AXI_DP_WSTRB;
  output M_AXI_DP_WLAST;
  output M_AXI_DP_WVALID;
  input M_AXI_DP_WREADY;
  input [0:0]M_AXI_DP_BID;
  input [1:0]M_AXI_DP_BRESP;
  input M_AXI_DP_BVALID;
  output M_AXI_DP_BREADY;
  output [0:0]M_AXI_DP_ARID;
  output [31:0]M_AXI_DP_ARADDR;
  output [7:0]M_AXI_DP_ARLEN;
  output [2:0]M_AXI_DP_ARSIZE;
  output [1:0]M_AXI_DP_ARBURST;
  output M_AXI_DP_ARLOCK;
  output [3:0]M_AXI_DP_ARCACHE;
  output [2:0]M_AXI_DP_ARPROT;
  output [3:0]M_AXI_DP_ARQOS;
  output M_AXI_DP_ARVALID;
  input M_AXI_DP_ARREADY;
  input [0:0]M_AXI_DP_RID;
  input [31:0]M_AXI_DP_RDATA;
  input [1:0]M_AXI_DP_RRESP;
  input M_AXI_DP_RLAST;
  input M_AXI_DP_RVALID;
  output M_AXI_DP_RREADY;
  input Dbg_Disable;
  input Dbg_Clk;
  input Dbg_TDI;
  output Dbg_TDO;
  input [0:7]Dbg_Reg_En;
  input Dbg_Shift;
  input Dbg_Capture;
  input Dbg_Update;
  input Debug_Rst;
  output [0:7]Dbg_Trig_In;
  input [0:7]Dbg_Trig_Ack_In;
  input [0:7]Dbg_Trig_Out;
  output [0:7]Dbg_Trig_Ack_Out;
  input Dbg_Trace_Clk;
  output [0:35]Dbg_Trace_Data;
  input Dbg_Trace_Ready;
  output Dbg_Trace_Valid;
  input [14:2]Dbg_AWADDR;
  input Dbg_AWVALID;
  output Dbg_AWREADY;
  input [31:0]Dbg_WDATA;
  input Dbg_WVALID;
  output Dbg_WREADY;
  output [1:0]Dbg_BRESP;
  output Dbg_BVALID;
  input Dbg_BREADY;
  input [14:2]Dbg_ARADDR;
  input Dbg_ARVALID;
  output Dbg_ARREADY;
  output [31:0]Dbg_RDATA;
  output [1:0]Dbg_RRESP;
  output Dbg_RVALID;
  input Dbg_RREADY;
  input DEBUG_ACLK;
  input DEBUG_ARESETN;
  (* mark_debug = "false" *) output [0:31]Trace_Instruction;
  (* mark_debug = "false" *) output Trace_Valid_Instr;
  (* mark_debug = "false" *) output [0:31]Trace_PC;
  (* mark_debug = "false" *) output Trace_Reg_Write;
  (* mark_debug = "false" *) output [0:4]Trace_Reg_Addr;
  (* mark_debug = "false" *) output [0:14]Trace_MSR_Reg;
  (* mark_debug = "false" *) output [0:7]Trace_PID_Reg;
  (* mark_debug = "false" *) output [0:31]Trace_New_Reg_Value;
  (* mark_debug = "false" *) output Trace_Exception_Taken;
  (* mark_debug = "false" *) output [0:4]Trace_Exception_Kind;
  (* mark_debug = "false" *) output Trace_Jump_Taken;
  (* mark_debug = "false" *) output Trace_Delay_Slot;
  (* mark_debug = "false" *) output [0:31]Trace_Data_Address;
  (* mark_debug = "false" *) output [0:31]Trace_Data_Write_Value;
  (* mark_debug = "false" *) output [0:3]Trace_Data_Byte_Enable;
  (* mark_debug = "false" *) output Trace_Data_Access;
  (* mark_debug = "false" *) output Trace_Data_Read;
  (* mark_debug = "false" *) output Trace_Data_Write;
  (* mark_debug = "false" *) output Trace_DCache_Req;
  (* mark_debug = "false" *) output Trace_DCache_Hit;
  (* mark_debug = "false" *) output Trace_DCache_Rdy;
  (* mark_debug = "false" *) output Trace_DCache_Read;
  (* mark_debug = "false" *) output Trace_ICache_Req;
  (* mark_debug = "false" *) output Trace_ICache_Hit;
  (* mark_debug = "false" *) output Trace_ICache_Rdy;
  (* mark_debug = "false" *) output Trace_OF_PipeRun;
  (* mark_debug = "false" *) output Trace_EX_PipeRun;
  (* mark_debug = "false" *) output Trace_MEM_PipeRun;
  (* mark_debug = "false" *) output Trace_MB_Halted;
  (* mark_debug = "false" *) output Trace_Jump_Hit;
  output M0_AXIS_TLAST;
  output [31:0]M0_AXIS_TDATA;
  output M0_AXIS_TVALID;
  input M0_AXIS_TREADY;
  output M1_AXIS_TLAST;
  output [31:0]M1_AXIS_TDATA;
  output M1_AXIS_TVALID;
  input M1_AXIS_TREADY;
  output M2_AXIS_TLAST;
  output [31:0]M2_AXIS_TDATA;
  output M2_AXIS_TVALID;
  input M2_AXIS_TREADY;
  output M3_AXIS_TLAST;
  output [31:0]M3_AXIS_TDATA;
  output M3_AXIS_TVALID;
  input M3_AXIS_TREADY;
  output M4_AXIS_TLAST;
  output [31:0]M4_AXIS_TDATA;
  output M4_AXIS_TVALID;
  input M4_AXIS_TREADY;
  output M5_AXIS_TLAST;
  output [31:0]M5_AXIS_TDATA;
  output M5_AXIS_TVALID;
  input M5_AXIS_TREADY;
  output M6_AXIS_TLAST;
  output [31:0]M6_AXIS_TDATA;
  output M6_AXIS_TVALID;
  input M6_AXIS_TREADY;
  output M7_AXIS_TLAST;
  output [31:0]M7_AXIS_TDATA;
  output M7_AXIS_TVALID;
  input M7_AXIS_TREADY;
  output M8_AXIS_TLAST;
  output [31:0]M8_AXIS_TDATA;
  output M8_AXIS_TVALID;
  input M8_AXIS_TREADY;
  output M9_AXIS_TLAST;
  output [31:0]M9_AXIS_TDATA;
  output M9_AXIS_TVALID;
  input M9_AXIS_TREADY;
  output M10_AXIS_TLAST;
  output [31:0]M10_AXIS_TDATA;
  output M10_AXIS_TVALID;
  input M10_AXIS_TREADY;
  output M11_AXIS_TLAST;
  output [31:0]M11_AXIS_TDATA;
  output M11_AXIS_TVALID;
  input M11_AXIS_TREADY;
  output M12_AXIS_TLAST;
  output [31:0]M12_AXIS_TDATA;
  output M12_AXIS_TVALID;
  input M12_AXIS_TREADY;
  output M13_AXIS_TLAST;
  output [31:0]M13_AXIS_TDATA;
  output M13_AXIS_TVALID;
  input M13_AXIS_TREADY;
  output M14_AXIS_TLAST;
  output [31:0]M14_AXIS_TDATA;
  output M14_AXIS_TVALID;
  input M14_AXIS_TREADY;
  output M15_AXIS_TLAST;
  output [31:0]M15_AXIS_TDATA;
  output M15_AXIS_TVALID;
  input M15_AXIS_TREADY;
  input S0_AXIS_TLAST;
  input [31:0]S0_AXIS_TDATA;
  input S0_AXIS_TVALID;
  output S0_AXIS_TREADY;
  input S1_AXIS_TLAST;
  input [31:0]S1_AXIS_TDATA;
  input S1_AXIS_TVALID;
  output S1_AXIS_TREADY;
  input S2_AXIS_TLAST;
  input [31:0]S2_AXIS_TDATA;
  input S2_AXIS_TVALID;
  output S2_AXIS_TREADY;
  input S3_AXIS_TLAST;
  input [31:0]S3_AXIS_TDATA;
  input S3_AXIS_TVALID;
  output S3_AXIS_TREADY;
  input S4_AXIS_TLAST;
  input [31:0]S4_AXIS_TDATA;
  input S4_AXIS_TVALID;
  output S4_AXIS_TREADY;
  input S5_AXIS_TLAST;
  input [31:0]S5_AXIS_TDATA;
  input S5_AXIS_TVALID;
  output S5_AXIS_TREADY;
  input S6_AXIS_TLAST;
  input [31:0]S6_AXIS_TDATA;
  input S6_AXIS_TVALID;
  output S6_AXIS_TREADY;
  input S7_AXIS_TLAST;
  input [31:0]S7_AXIS_TDATA;
  input S7_AXIS_TVALID;
  output S7_AXIS_TREADY;
  input S8_AXIS_TLAST;
  input [31:0]S8_AXIS_TDATA;
  input S8_AXIS_TVALID;
  output S8_AXIS_TREADY;
  input S9_AXIS_TLAST;
  input [31:0]S9_AXIS_TDATA;
  input S9_AXIS_TVALID;
  output S9_AXIS_TREADY;
  input S10_AXIS_TLAST;
  input [31:0]S10_AXIS_TDATA;
  input S10_AXIS_TVALID;
  output S10_AXIS_TREADY;
  input S11_AXIS_TLAST;
  input [31:0]S11_AXIS_TDATA;
  input S11_AXIS_TVALID;
  output S11_AXIS_TREADY;
  input S12_AXIS_TLAST;
  input [31:0]S12_AXIS_TDATA;
  input S12_AXIS_TVALID;
  output S12_AXIS_TREADY;
  input S13_AXIS_TLAST;
  input [31:0]S13_AXIS_TDATA;
  input S13_AXIS_TVALID;
  output S13_AXIS_TREADY;
  input S14_AXIS_TLAST;
  input [31:0]S14_AXIS_TDATA;
  input S14_AXIS_TVALID;
  output S14_AXIS_TREADY;
  input S15_AXIS_TLAST;
  input [31:0]S15_AXIS_TDATA;
  input S15_AXIS_TVALID;
  output S15_AXIS_TREADY;
  output [0:0]M_AXI_IC_AWID;
  output [31:0]M_AXI_IC_AWADDR;
  output [7:0]M_AXI_IC_AWLEN;
  output [2:0]M_AXI_IC_AWSIZE;
  output [1:0]M_AXI_IC_AWBURST;
  output M_AXI_IC_AWLOCK;
  output [3:0]M_AXI_IC_AWCACHE;
  output [2:0]M_AXI_IC_AWPROT;
  output [3:0]M_AXI_IC_AWQOS;
  output M_AXI_IC_AWVALID;
  input M_AXI_IC_AWREADY;
  output [4:0]M_AXI_IC_AWUSER;
  output [1:0]M_AXI_IC_AWDOMAIN;
  output [2:0]M_AXI_IC_AWSNOOP;
  output [1:0]M_AXI_IC_AWBAR;
  output [31:0]M_AXI_IC_WDATA;
  output [3:0]M_AXI_IC_WSTRB;
  output M_AXI_IC_WLAST;
  output M_AXI_IC_WVALID;
  input M_AXI_IC_WREADY;
  output [0:0]M_AXI_IC_WUSER;
  input [0:0]M_AXI_IC_BID;
  input [1:0]M_AXI_IC_BRESP;
  input M_AXI_IC_BVALID;
  output M_AXI_IC_BREADY;
  input [0:0]M_AXI_IC_BUSER;
  output M_AXI_IC_WACK;
  output [0:0]M_AXI_IC_ARID;
  output [31:0]M_AXI_IC_ARADDR;
  output [7:0]M_AXI_IC_ARLEN;
  output [2:0]M_AXI_IC_ARSIZE;
  output [1:0]M_AXI_IC_ARBURST;
  output M_AXI_IC_ARLOCK;
  output [3:0]M_AXI_IC_ARCACHE;
  output [2:0]M_AXI_IC_ARPROT;
  output [3:0]M_AXI_IC_ARQOS;
  output M_AXI_IC_ARVALID;
  input M_AXI_IC_ARREADY;
  output [4:0]M_AXI_IC_ARUSER;
  output [1:0]M_AXI_IC_ARDOMAIN;
  output [3:0]M_AXI_IC_ARSNOOP;
  output [1:0]M_AXI_IC_ARBAR;
  input [0:0]M_AXI_IC_RID;
  input [31:0]M_AXI_IC_RDATA;
  input [1:0]M_AXI_IC_RRESP;
  input M_AXI_IC_RLAST;
  input M_AXI_IC_RVALID;
  output M_AXI_IC_RREADY;
  input [0:0]M_AXI_IC_RUSER;
  output M_AXI_IC_RACK;
  input M_AXI_IC_ACVALID;
  input [31:0]M_AXI_IC_ACADDR;
  input [3:0]M_AXI_IC_ACSNOOP;
  input [2:0]M_AXI_IC_ACPROT;
  output M_AXI_IC_ACREADY;
  output M_AXI_IC_CRVALID;
  output [4:0]M_AXI_IC_CRRESP;
  input M_AXI_IC_CRREADY;
  output M_AXI_IC_CDVALID;
  output [31:0]M_AXI_IC_CDDATA;
  output M_AXI_IC_CDLAST;
  input M_AXI_IC_CDREADY;
  output [0:0]M_AXI_DC_AWID;
  output [31:0]M_AXI_DC_AWADDR;
  output [7:0]M_AXI_DC_AWLEN;
  output [2:0]M_AXI_DC_AWSIZE;
  output [1:0]M_AXI_DC_AWBURST;
  output M_AXI_DC_AWLOCK;
  output [3:0]M_AXI_DC_AWCACHE;
  output [2:0]M_AXI_DC_AWPROT;
  output [3:0]M_AXI_DC_AWQOS;
  output M_AXI_DC_AWVALID;
  input M_AXI_DC_AWREADY;
  output [4:0]M_AXI_DC_AWUSER;
  output [1:0]M_AXI_DC_AWDOMAIN;
  output [2:0]M_AXI_DC_AWSNOOP;
  output [1:0]M_AXI_DC_AWBAR;
  output [31:0]M_AXI_DC_WDATA;
  output [3:0]M_AXI_DC_WSTRB;
  output M_AXI_DC_WLAST;
  output M_AXI_DC_WVALID;
  input M_AXI_DC_WREADY;
  output [0:0]M_AXI_DC_WUSER;
  input [1:0]M_AXI_DC_BRESP;
  input [0:0]M_AXI_DC_BID;
  input M_AXI_DC_BVALID;
  output M_AXI_DC_BREADY;
  input [0:0]M_AXI_DC_BUSER;
  output M_AXI_DC_WACK;
  output [0:0]M_AXI_DC_ARID;
  output [31:0]M_AXI_DC_ARADDR;
  output [7:0]M_AXI_DC_ARLEN;
  output [2:0]M_AXI_DC_ARSIZE;
  output [1:0]M_AXI_DC_ARBURST;
  output M_AXI_DC_ARLOCK;
  output [3:0]M_AXI_DC_ARCACHE;
  output [2:0]M_AXI_DC_ARPROT;
  output [3:0]M_AXI_DC_ARQOS;
  output M_AXI_DC_ARVALID;
  input M_AXI_DC_ARREADY;
  output [4:0]M_AXI_DC_ARUSER;
  output [1:0]M_AXI_DC_ARDOMAIN;
  output [3:0]M_AXI_DC_ARSNOOP;
  output [1:0]M_AXI_DC_ARBAR;
  input [0:0]M_AXI_DC_RID;
  input [31:0]M_AXI_DC_RDATA;
  input [1:0]M_AXI_DC_RRESP;
  input M_AXI_DC_RLAST;
  input M_AXI_DC_RVALID;
  output M_AXI_DC_RREADY;
  input [0:0]M_AXI_DC_RUSER;
  output M_AXI_DC_RACK;
  input M_AXI_DC_ACVALID;
  input [31:0]M_AXI_DC_ACADDR;
  input [3:0]M_AXI_DC_ACSNOOP;
  input [2:0]M_AXI_DC_ACPROT;
  output M_AXI_DC_ACREADY;
  output M_AXI_DC_CRVALID;
  output [4:0]M_AXI_DC_CRRESP;
  input M_AXI_DC_CRREADY;
  output M_AXI_DC_CDVALID;
  output [31:0]M_AXI_DC_CDDATA;
  output M_AXI_DC_CDLAST;
  input M_AXI_DC_CDREADY;

  wire \<const0> ;
  wire \<const1> ;
  wire \Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Status_Reg_En ;
  wire [0:3]Byte_Enable;
  wire Clk;
  wire DReady;
  wire DWait;
  wire D_AS;
  wire [0:31]Data_Addr;
  wire [0:31]Data_Read;
  wire [0:31]Data_Write;
  wire Dbg_Capture;
  wire Dbg_Clk;
  wire Dbg_Intr;
  wire [0:7]Dbg_Reg_En;
  wire Dbg_Shift;
  wire Dbg_Stop;
  wire Dbg_TDI;
  wire Dbg_TDO;
  wire Dbg_TDO_INST_0_i_10_n_0;
  wire Dbg_TDO_INST_0_i_1_n_0;
  wire Dbg_TDO_INST_0_i_25_n_0;
  wire Dbg_TDO_INST_0_i_2_n_0;
  wire Dbg_TDO_INST_0_i_35_n_0;
  wire Dbg_TDO_INST_0_i_9_n_0;
  wire [0:7]Dbg_Trig_Ack_In;
  wire [0:5]\^Dbg_Trig_Ack_Out ;
  wire [0:5]\^Dbg_Trig_In ;
  wire [0:7]Dbg_Trig_Out;
  wire Dbg_Update;
  wire Dbg_Wakeup;
  wire Debug_Rst;
  wire Hibernate;
  wire IFetch;
  wire IReady;
  wire I_AS;
  wire [0:31]Instr;
  wire [0:31]Instr_Addr;
  wire Interrupt;
  wire [0:1]Interrupt_Ack;
  wire [0:31]Interrupt_Address;
  wire [0:46]\^LOCKSTEP_Master_Out ;
  wire [2:3228]\^LOCKSTEP_Out ;
  wire [31:0]M0_AXIS_TDATA;
  wire M0_AXIS_TLAST;
  wire M0_AXIS_TREADY;
  wire M0_AXIS_TVALID;
  wire [31:0]M1_AXIS_TDATA;
  wire M1_AXIS_TLAST;
  wire M1_AXIS_TREADY;
  wire M1_AXIS_TVALID;
  wire MB_Halted;
  wire M_AXI_DP_ARREADY;
  wire M_AXI_DP_ARVALID;
  wire [31:0]M_AXI_DP_AWADDR;
  wire M_AXI_DP_AWREADY;
  wire M_AXI_DP_AWVALID;
  wire M_AXI_DP_BVALID;
  wire [31:0]M_AXI_DP_RDATA;
  wire M_AXI_DP_RVALID;
  wire [31:0]M_AXI_DP_WDATA;
  wire M_AXI_DP_WREADY;
  wire [3:0]M_AXI_DP_WSTRB;
  wire M_AXI_DP_WVALID;
  wire Mb_Reset;
  wire MicroBlaze_Core_I_n_487;
  wire MicroBlaze_Core_I_n_488;
  wire MicroBlaze_Core_I_n_489;
  wire MicroBlaze_Core_I_n_491;
  wire Pause;
  wire Pause_Ack;
  wire Read_Strobe;
  wire Reset;
  wire [0:1]Reset_Mode;
  wire [31:0]S0_AXIS_TDATA;
  wire S0_AXIS_TLAST;
  wire S0_AXIS_TREADY;
  wire S0_AXIS_TVALID;
  wire [31:0]S1_AXIS_TDATA;
  wire S1_AXIS_TLAST;
  wire S1_AXIS_TREADY;
  wire S1_AXIS_TVALID;
  wire Scan_En;
  wire Scan_Reset;
  wire Scan_Reset_Sel;
  wire Sleep;
  wire Suspend;
  wire Trace_Data_Access;
  wire [0:31]Trace_Data_Address;
  wire [0:3]Trace_Data_Byte_Enable;
  wire Trace_Data_Read;
  wire Trace_Data_Write;
  wire [0:31]Trace_Data_Write_Value;
  wire Trace_Delay_Slot;
  wire Trace_Exception_Taken;
  wire [0:31]Trace_Instruction;
  wire Trace_Jump_Taken;
  wire [10:13]\^Trace_MSR_Reg ;
  wire [0:31]Trace_New_Reg_Value;
  wire Trace_OF_PipeRun;
  wire [0:31]Trace_PC;
  wire [0:4]Trace_Reg_Addr;
  wire Trace_Reg_Write;
  wire Trace_Valid_Instr;
  wire [0:1]Wakeup;
  wire Write_Strobe;

  assign Dbg_ARREADY = \<const0> ;
  assign Dbg_AWREADY = \<const0> ;
  assign Dbg_BRESP[1] = \<const0> ;
  assign Dbg_BRESP[0] = \<const0> ;
  assign Dbg_BVALID = \<const0> ;
  assign Dbg_Continue = \^LOCKSTEP_Master_Out [12];
  assign Dbg_RDATA[31] = \<const0> ;
  assign Dbg_RDATA[30] = \<const0> ;
  assign Dbg_RDATA[29] = \<const0> ;
  assign Dbg_RDATA[28] = \<const0> ;
  assign Dbg_RDATA[27] = \<const0> ;
  assign Dbg_RDATA[26] = \<const0> ;
  assign Dbg_RDATA[25] = \<const0> ;
  assign Dbg_RDATA[24] = \<const0> ;
  assign Dbg_RDATA[23] = \<const0> ;
  assign Dbg_RDATA[22] = \<const0> ;
  assign Dbg_RDATA[21] = \<const0> ;
  assign Dbg_RDATA[20] = \<const0> ;
  assign Dbg_RDATA[19] = \<const0> ;
  assign Dbg_RDATA[18] = \<const0> ;
  assign Dbg_RDATA[17] = \<const0> ;
  assign Dbg_RDATA[16] = \<const0> ;
  assign Dbg_RDATA[15] = \<const0> ;
  assign Dbg_RDATA[14] = \<const0> ;
  assign Dbg_RDATA[13] = \<const0> ;
  assign Dbg_RDATA[12] = \<const0> ;
  assign Dbg_RDATA[11] = \<const0> ;
  assign Dbg_RDATA[10] = \<const0> ;
  assign Dbg_RDATA[9] = \<const0> ;
  assign Dbg_RDATA[8] = \<const0> ;
  assign Dbg_RDATA[7] = \<const0> ;
  assign Dbg_RDATA[6] = \<const0> ;
  assign Dbg_RDATA[5] = \<const0> ;
  assign Dbg_RDATA[4] = \<const0> ;
  assign Dbg_RDATA[3] = \<const0> ;
  assign Dbg_RDATA[2] = \<const0> ;
  assign Dbg_RDATA[1] = \<const0> ;
  assign Dbg_RDATA[0] = \<const0> ;
  assign Dbg_RRESP[1] = \<const0> ;
  assign Dbg_RRESP[0] = \<const0> ;
  assign Dbg_RVALID = \<const0> ;
  assign Dbg_Trace_Data[0] = \<const0> ;
  assign Dbg_Trace_Data[1] = \<const0> ;
  assign Dbg_Trace_Data[2] = \<const0> ;
  assign Dbg_Trace_Data[3] = \<const0> ;
  assign Dbg_Trace_Data[4] = \<const0> ;
  assign Dbg_Trace_Data[5] = \<const0> ;
  assign Dbg_Trace_Data[6] = \<const0> ;
  assign Dbg_Trace_Data[7] = \<const0> ;
  assign Dbg_Trace_Data[8] = \<const0> ;
  assign Dbg_Trace_Data[9] = \<const0> ;
  assign Dbg_Trace_Data[10] = \<const0> ;
  assign Dbg_Trace_Data[11] = \<const0> ;
  assign Dbg_Trace_Data[12] = \<const0> ;
  assign Dbg_Trace_Data[13] = \<const0> ;
  assign Dbg_Trace_Data[14] = \<const0> ;
  assign Dbg_Trace_Data[15] = \<const0> ;
  assign Dbg_Trace_Data[16] = \<const0> ;
  assign Dbg_Trace_Data[17] = \<const0> ;
  assign Dbg_Trace_Data[18] = \<const0> ;
  assign Dbg_Trace_Data[19] = \<const0> ;
  assign Dbg_Trace_Data[20] = \<const0> ;
  assign Dbg_Trace_Data[21] = \<const0> ;
  assign Dbg_Trace_Data[22] = \<const0> ;
  assign Dbg_Trace_Data[23] = \<const0> ;
  assign Dbg_Trace_Data[24] = \<const0> ;
  assign Dbg_Trace_Data[25] = \<const0> ;
  assign Dbg_Trace_Data[26] = \<const0> ;
  assign Dbg_Trace_Data[27] = \<const0> ;
  assign Dbg_Trace_Data[28] = \<const0> ;
  assign Dbg_Trace_Data[29] = \<const0> ;
  assign Dbg_Trace_Data[30] = \<const0> ;
  assign Dbg_Trace_Data[31] = \<const0> ;
  assign Dbg_Trace_Data[32] = \<const0> ;
  assign Dbg_Trace_Data[33] = \<const0> ;
  assign Dbg_Trace_Data[34] = \<const0> ;
  assign Dbg_Trace_Data[35] = \<const0> ;
  assign Dbg_Trace_Valid = \<const0> ;
  assign Dbg_Trig_Ack_Out[0:5] = \^Dbg_Trig_Ack_Out [0:5];
  assign Dbg_Trig_Ack_Out[6] = \<const0> ;
  assign Dbg_Trig_Ack_Out[7] = \<const0> ;
  assign Dbg_Trig_In[0:5] = \^Dbg_Trig_In [0:5];
  assign Dbg_Trig_In[6] = \<const0> ;
  assign Dbg_Trig_In[7] = \<const0> ;
  assign Dbg_WREADY = \<const0> ;
  assign LOCKSTEP_Master_Out[0:5] = \^LOCKSTEP_Master_Out [0:5];
  assign LOCKSTEP_Master_Out[6] = \<const0> ;
  assign LOCKSTEP_Master_Out[7] = \<const0> ;
  assign LOCKSTEP_Master_Out[8] = \<const0> ;
  assign LOCKSTEP_Master_Out[9] = \^LOCKSTEP_Master_Out [9];
  assign LOCKSTEP_Master_Out[10] = MB_Halted;
  assign LOCKSTEP_Master_Out[11] = Dbg_Wakeup;
  assign LOCKSTEP_Master_Out[12] = \^LOCKSTEP_Master_Out [12];
  assign LOCKSTEP_Master_Out[13] = \<const0> ;
  assign LOCKSTEP_Master_Out[14] = Debug_Rst;
  assign LOCKSTEP_Master_Out[15:46] = \^LOCKSTEP_Master_Out [15:46];
  assign LOCKSTEP_Master_Out[47] = \<const0> ;
  assign LOCKSTEP_Master_Out[48] = \<const0> ;
  assign LOCKSTEP_Master_Out[49] = \<const0> ;
  assign LOCKSTEP_Master_Out[50] = \<const0> ;
  assign LOCKSTEP_Master_Out[51] = \<const0> ;
  assign LOCKSTEP_Master_Out[52] = \<const0> ;
  assign LOCKSTEP_Master_Out[53] = \<const0> ;
  assign LOCKSTEP_Master_Out[54] = \<const0> ;
  assign LOCKSTEP_Master_Out[55] = \<const0> ;
  assign LOCKSTEP_Master_Out[56] = \<const0> ;
  assign LOCKSTEP_Master_Out[57] = \<const0> ;
  assign LOCKSTEP_Master_Out[58] = \<const0> ;
  assign LOCKSTEP_Master_Out[59] = \<const0> ;
  assign LOCKSTEP_Master_Out[60] = \<const0> ;
  assign LOCKSTEP_Master_Out[61] = \<const0> ;
  assign LOCKSTEP_Master_Out[62] = \<const0> ;
  assign LOCKSTEP_Master_Out[63] = \<const0> ;
  assign LOCKSTEP_Master_Out[64] = \<const0> ;
  assign LOCKSTEP_Master_Out[65] = \<const0> ;
  assign LOCKSTEP_Master_Out[66] = \<const0> ;
  assign LOCKSTEP_Master_Out[67] = \<const0> ;
  assign LOCKSTEP_Master_Out[68] = \<const0> ;
  assign LOCKSTEP_Master_Out[69] = \<const0> ;
  assign LOCKSTEP_Master_Out[70] = \<const0> ;
  assign LOCKSTEP_Master_Out[71] = \<const0> ;
  assign LOCKSTEP_Master_Out[72] = \<const0> ;
  assign LOCKSTEP_Master_Out[73] = \<const0> ;
  assign LOCKSTEP_Master_Out[74] = \<const0> ;
  assign LOCKSTEP_Master_Out[75] = \<const0> ;
  assign LOCKSTEP_Master_Out[76] = \<const0> ;
  assign LOCKSTEP_Master_Out[77] = \<const0> ;
  assign LOCKSTEP_Master_Out[78] = \<const0> ;
  assign LOCKSTEP_Master_Out[79] = \<const0> ;
  assign LOCKSTEP_Master_Out[80] = \<const0> ;
  assign LOCKSTEP_Master_Out[81] = \<const0> ;
  assign LOCKSTEP_Master_Out[82] = \<const0> ;
  assign LOCKSTEP_Master_Out[83] = \<const0> ;
  assign LOCKSTEP_Master_Out[84] = \<const0> ;
  assign LOCKSTEP_Master_Out[85] = \<const0> ;
  assign LOCKSTEP_Master_Out[86] = \<const0> ;
  assign LOCKSTEP_Master_Out[87] = \<const0> ;
  assign LOCKSTEP_Master_Out[88] = \<const0> ;
  assign LOCKSTEP_Master_Out[89] = \<const0> ;
  assign LOCKSTEP_Master_Out[90] = \<const0> ;
  assign LOCKSTEP_Master_Out[91] = \<const0> ;
  assign LOCKSTEP_Master_Out[92] = \<const0> ;
  assign LOCKSTEP_Master_Out[93] = \<const0> ;
  assign LOCKSTEP_Master_Out[94] = \<const0> ;
  assign LOCKSTEP_Master_Out[95] = \<const0> ;
  assign LOCKSTEP_Master_Out[96] = \<const0> ;
  assign LOCKSTEP_Master_Out[97] = \<const0> ;
  assign LOCKSTEP_Master_Out[98] = \<const0> ;
  assign LOCKSTEP_Master_Out[99] = \<const0> ;
  assign LOCKSTEP_Master_Out[100] = \<const0> ;
  assign LOCKSTEP_Master_Out[101] = \<const0> ;
  assign LOCKSTEP_Master_Out[102] = \<const0> ;
  assign LOCKSTEP_Master_Out[103] = \<const0> ;
  assign LOCKSTEP_Master_Out[104] = \<const0> ;
  assign LOCKSTEP_Master_Out[105] = \<const0> ;
  assign LOCKSTEP_Master_Out[106] = \<const0> ;
  assign LOCKSTEP_Master_Out[107] = \<const0> ;
  assign LOCKSTEP_Master_Out[108] = \<const0> ;
  assign LOCKSTEP_Master_Out[109] = \<const0> ;
  assign LOCKSTEP_Master_Out[110] = \<const0> ;
  assign LOCKSTEP_Master_Out[111] = \<const0> ;
  assign LOCKSTEP_Master_Out[112] = \<const0> ;
  assign LOCKSTEP_Master_Out[113] = \<const0> ;
  assign LOCKSTEP_Master_Out[114] = \<const0> ;
  assign LOCKSTEP_Master_Out[115] = \<const0> ;
  assign LOCKSTEP_Master_Out[116] = \<const0> ;
  assign LOCKSTEP_Master_Out[117] = \<const0> ;
  assign LOCKSTEP_Master_Out[118] = \<const0> ;
  assign LOCKSTEP_Master_Out[119] = \<const0> ;
  assign LOCKSTEP_Master_Out[120] = \<const0> ;
  assign LOCKSTEP_Master_Out[121] = \<const0> ;
  assign LOCKSTEP_Master_Out[122] = \<const0> ;
  assign LOCKSTEP_Master_Out[123] = \<const0> ;
  assign LOCKSTEP_Master_Out[124] = \<const0> ;
  assign LOCKSTEP_Master_Out[125] = \<const0> ;
  assign LOCKSTEP_Master_Out[126] = \<const0> ;
  assign LOCKSTEP_Master_Out[127] = \<const0> ;
  assign LOCKSTEP_Master_Out[128] = \<const0> ;
  assign LOCKSTEP_Master_Out[129] = \<const0> ;
  assign LOCKSTEP_Master_Out[130] = \<const0> ;
  assign LOCKSTEP_Master_Out[131] = \<const0> ;
  assign LOCKSTEP_Master_Out[132] = \<const0> ;
  assign LOCKSTEP_Master_Out[133] = \<const0> ;
  assign LOCKSTEP_Master_Out[134] = \<const0> ;
  assign LOCKSTEP_Master_Out[135] = \<const0> ;
  assign LOCKSTEP_Master_Out[136] = \<const0> ;
  assign LOCKSTEP_Master_Out[137] = \<const0> ;
  assign LOCKSTEP_Master_Out[138] = \<const0> ;
  assign LOCKSTEP_Master_Out[139] = \<const0> ;
  assign LOCKSTEP_Master_Out[140] = \<const0> ;
  assign LOCKSTEP_Master_Out[141] = \<const0> ;
  assign LOCKSTEP_Master_Out[142] = \<const0> ;
  assign LOCKSTEP_Master_Out[143] = \<const0> ;
  assign LOCKSTEP_Master_Out[144] = \<const0> ;
  assign LOCKSTEP_Master_Out[145] = \<const0> ;
  assign LOCKSTEP_Master_Out[146] = \<const0> ;
  assign LOCKSTEP_Master_Out[147] = \<const0> ;
  assign LOCKSTEP_Master_Out[148] = \<const0> ;
  assign LOCKSTEP_Master_Out[149] = \<const0> ;
  assign LOCKSTEP_Master_Out[150] = \<const0> ;
  assign LOCKSTEP_Master_Out[151] = \<const0> ;
  assign LOCKSTEP_Master_Out[152] = \<const0> ;
  assign LOCKSTEP_Master_Out[153] = \<const0> ;
  assign LOCKSTEP_Master_Out[154] = \<const0> ;
  assign LOCKSTEP_Master_Out[155] = \<const0> ;
  assign LOCKSTEP_Master_Out[156] = \<const0> ;
  assign LOCKSTEP_Master_Out[157] = \<const0> ;
  assign LOCKSTEP_Master_Out[158] = \<const0> ;
  assign LOCKSTEP_Master_Out[159] = \<const0> ;
  assign LOCKSTEP_Master_Out[160] = \<const0> ;
  assign LOCKSTEP_Master_Out[161] = \<const0> ;
  assign LOCKSTEP_Master_Out[162] = \<const0> ;
  assign LOCKSTEP_Master_Out[163] = \<const0> ;
  assign LOCKSTEP_Master_Out[164] = \<const0> ;
  assign LOCKSTEP_Master_Out[165] = \<const0> ;
  assign LOCKSTEP_Master_Out[166] = \<const0> ;
  assign LOCKSTEP_Master_Out[167] = \<const0> ;
  assign LOCKSTEP_Master_Out[168] = \<const0> ;
  assign LOCKSTEP_Master_Out[169] = \<const0> ;
  assign LOCKSTEP_Master_Out[170] = \<const0> ;
  assign LOCKSTEP_Master_Out[171] = \<const0> ;
  assign LOCKSTEP_Master_Out[172] = \<const0> ;
  assign LOCKSTEP_Master_Out[173] = \<const0> ;
  assign LOCKSTEP_Master_Out[174] = \<const0> ;
  assign LOCKSTEP_Master_Out[175] = \<const0> ;
  assign LOCKSTEP_Master_Out[176] = \<const0> ;
  assign LOCKSTEP_Master_Out[177] = \<const0> ;
  assign LOCKSTEP_Master_Out[178] = \<const0> ;
  assign LOCKSTEP_Master_Out[179] = \<const0> ;
  assign LOCKSTEP_Master_Out[180] = \<const0> ;
  assign LOCKSTEP_Master_Out[181] = \<const0> ;
  assign LOCKSTEP_Master_Out[182] = \<const0> ;
  assign LOCKSTEP_Master_Out[183] = \<const0> ;
  assign LOCKSTEP_Master_Out[184] = \<const0> ;
  assign LOCKSTEP_Master_Out[185] = \<const0> ;
  assign LOCKSTEP_Master_Out[186] = \<const0> ;
  assign LOCKSTEP_Master_Out[187] = \<const0> ;
  assign LOCKSTEP_Master_Out[188] = \<const0> ;
  assign LOCKSTEP_Master_Out[189] = \<const0> ;
  assign LOCKSTEP_Master_Out[190] = \<const0> ;
  assign LOCKSTEP_Master_Out[191] = \<const0> ;
  assign LOCKSTEP_Master_Out[192] = \<const0> ;
  assign LOCKSTEP_Master_Out[193] = \<const0> ;
  assign LOCKSTEP_Master_Out[194] = \<const0> ;
  assign LOCKSTEP_Master_Out[195] = \<const0> ;
  assign LOCKSTEP_Master_Out[196] = \<const0> ;
  assign LOCKSTEP_Master_Out[197] = \<const0> ;
  assign LOCKSTEP_Master_Out[198] = \<const0> ;
  assign LOCKSTEP_Master_Out[199] = \<const0> ;
  assign LOCKSTEP_Master_Out[200] = \<const0> ;
  assign LOCKSTEP_Master_Out[201] = \<const0> ;
  assign LOCKSTEP_Master_Out[202] = \<const0> ;
  assign LOCKSTEP_Master_Out[203] = \<const0> ;
  assign LOCKSTEP_Master_Out[204] = \<const0> ;
  assign LOCKSTEP_Master_Out[205] = \<const0> ;
  assign LOCKSTEP_Master_Out[206] = \<const0> ;
  assign LOCKSTEP_Master_Out[207] = \<const0> ;
  assign LOCKSTEP_Master_Out[208] = \<const0> ;
  assign LOCKSTEP_Master_Out[209] = \<const0> ;
  assign LOCKSTEP_Master_Out[210] = \<const0> ;
  assign LOCKSTEP_Master_Out[211] = \<const0> ;
  assign LOCKSTEP_Master_Out[212] = \<const0> ;
  assign LOCKSTEP_Master_Out[213] = \<const0> ;
  assign LOCKSTEP_Master_Out[214] = \<const0> ;
  assign LOCKSTEP_Master_Out[215] = \<const0> ;
  assign LOCKSTEP_Master_Out[216] = \<const0> ;
  assign LOCKSTEP_Master_Out[217] = \<const0> ;
  assign LOCKSTEP_Master_Out[218] = \<const0> ;
  assign LOCKSTEP_Master_Out[219] = \<const0> ;
  assign LOCKSTEP_Master_Out[220] = \<const0> ;
  assign LOCKSTEP_Master_Out[221] = \<const0> ;
  assign LOCKSTEP_Master_Out[222] = \<const0> ;
  assign LOCKSTEP_Master_Out[223] = \<const0> ;
  assign LOCKSTEP_Master_Out[224] = \<const0> ;
  assign LOCKSTEP_Master_Out[225] = \<const0> ;
  assign LOCKSTEP_Master_Out[226] = \<const0> ;
  assign LOCKSTEP_Master_Out[227] = \<const0> ;
  assign LOCKSTEP_Master_Out[228] = \<const0> ;
  assign LOCKSTEP_Master_Out[229] = \<const0> ;
  assign LOCKSTEP_Master_Out[230] = \<const0> ;
  assign LOCKSTEP_Master_Out[231] = \<const0> ;
  assign LOCKSTEP_Master_Out[232] = \<const0> ;
  assign LOCKSTEP_Master_Out[233] = \<const0> ;
  assign LOCKSTEP_Master_Out[234] = \<const0> ;
  assign LOCKSTEP_Master_Out[235] = \<const0> ;
  assign LOCKSTEP_Master_Out[236] = \<const0> ;
  assign LOCKSTEP_Master_Out[237] = \<const0> ;
  assign LOCKSTEP_Master_Out[238] = \<const0> ;
  assign LOCKSTEP_Master_Out[239] = \<const0> ;
  assign LOCKSTEP_Master_Out[240] = \<const0> ;
  assign LOCKSTEP_Master_Out[241] = \<const0> ;
  assign LOCKSTEP_Master_Out[242] = \<const0> ;
  assign LOCKSTEP_Master_Out[243] = \<const0> ;
  assign LOCKSTEP_Master_Out[244] = \<const0> ;
  assign LOCKSTEP_Master_Out[245] = \<const0> ;
  assign LOCKSTEP_Master_Out[246] = \<const0> ;
  assign LOCKSTEP_Master_Out[247] = \<const0> ;
  assign LOCKSTEP_Master_Out[248] = \<const0> ;
  assign LOCKSTEP_Master_Out[249] = \<const0> ;
  assign LOCKSTEP_Master_Out[250] = \<const0> ;
  assign LOCKSTEP_Master_Out[251] = \<const0> ;
  assign LOCKSTEP_Master_Out[252] = \<const0> ;
  assign LOCKSTEP_Master_Out[253] = \<const0> ;
  assign LOCKSTEP_Master_Out[254] = \<const0> ;
  assign LOCKSTEP_Master_Out[255] = \<const0> ;
  assign LOCKSTEP_Master_Out[256] = \<const0> ;
  assign LOCKSTEP_Master_Out[257] = \<const0> ;
  assign LOCKSTEP_Master_Out[258] = \<const0> ;
  assign LOCKSTEP_Master_Out[259] = \<const0> ;
  assign LOCKSTEP_Master_Out[260] = \<const0> ;
  assign LOCKSTEP_Master_Out[261] = \<const0> ;
  assign LOCKSTEP_Master_Out[262] = \<const0> ;
  assign LOCKSTEP_Master_Out[263] = \<const0> ;
  assign LOCKSTEP_Master_Out[264] = \<const0> ;
  assign LOCKSTEP_Master_Out[265] = \<const0> ;
  assign LOCKSTEP_Master_Out[266] = \<const0> ;
  assign LOCKSTEP_Master_Out[267] = \<const0> ;
  assign LOCKSTEP_Master_Out[268] = \<const0> ;
  assign LOCKSTEP_Master_Out[269] = \<const0> ;
  assign LOCKSTEP_Master_Out[270] = \<const0> ;
  assign LOCKSTEP_Master_Out[271] = \<const0> ;
  assign LOCKSTEP_Master_Out[272] = \<const0> ;
  assign LOCKSTEP_Master_Out[273] = \<const0> ;
  assign LOCKSTEP_Master_Out[274] = \<const0> ;
  assign LOCKSTEP_Master_Out[275] = \<const0> ;
  assign LOCKSTEP_Master_Out[276] = \<const0> ;
  assign LOCKSTEP_Master_Out[277] = \<const0> ;
  assign LOCKSTEP_Master_Out[278] = \<const0> ;
  assign LOCKSTEP_Master_Out[279] = \<const0> ;
  assign LOCKSTEP_Master_Out[280] = \<const0> ;
  assign LOCKSTEP_Master_Out[281] = \<const0> ;
  assign LOCKSTEP_Master_Out[282] = \<const0> ;
  assign LOCKSTEP_Master_Out[283] = \<const0> ;
  assign LOCKSTEP_Master_Out[284] = \<const0> ;
  assign LOCKSTEP_Master_Out[285] = \<const0> ;
  assign LOCKSTEP_Master_Out[286] = \<const0> ;
  assign LOCKSTEP_Master_Out[287] = \<const0> ;
  assign LOCKSTEP_Master_Out[288] = \<const0> ;
  assign LOCKSTEP_Master_Out[289] = \<const0> ;
  assign LOCKSTEP_Master_Out[290] = \<const0> ;
  assign LOCKSTEP_Master_Out[291] = \<const0> ;
  assign LOCKSTEP_Master_Out[292] = \<const0> ;
  assign LOCKSTEP_Master_Out[293] = \<const0> ;
  assign LOCKSTEP_Master_Out[294] = \<const0> ;
  assign LOCKSTEP_Master_Out[295] = \<const0> ;
  assign LOCKSTEP_Master_Out[296] = \<const0> ;
  assign LOCKSTEP_Master_Out[297] = \<const0> ;
  assign LOCKSTEP_Master_Out[298] = \<const0> ;
  assign LOCKSTEP_Master_Out[299] = \<const0> ;
  assign LOCKSTEP_Master_Out[300] = \<const0> ;
  assign LOCKSTEP_Master_Out[301] = \<const0> ;
  assign LOCKSTEP_Master_Out[302] = \<const0> ;
  assign LOCKSTEP_Master_Out[303] = \<const0> ;
  assign LOCKSTEP_Master_Out[304] = \<const0> ;
  assign LOCKSTEP_Master_Out[305] = \<const0> ;
  assign LOCKSTEP_Master_Out[306] = \<const0> ;
  assign LOCKSTEP_Master_Out[307] = \<const0> ;
  assign LOCKSTEP_Master_Out[308] = \<const0> ;
  assign LOCKSTEP_Master_Out[309] = \<const0> ;
  assign LOCKSTEP_Master_Out[310] = \<const0> ;
  assign LOCKSTEP_Master_Out[311] = \<const0> ;
  assign LOCKSTEP_Master_Out[312] = \<const0> ;
  assign LOCKSTEP_Master_Out[313] = \<const0> ;
  assign LOCKSTEP_Master_Out[314] = \<const0> ;
  assign LOCKSTEP_Master_Out[315] = \<const0> ;
  assign LOCKSTEP_Master_Out[316] = \<const0> ;
  assign LOCKSTEP_Master_Out[317] = \<const0> ;
  assign LOCKSTEP_Master_Out[318] = \<const0> ;
  assign LOCKSTEP_Master_Out[319] = \<const0> ;
  assign LOCKSTEP_Master_Out[320] = \<const0> ;
  assign LOCKSTEP_Master_Out[321] = \<const0> ;
  assign LOCKSTEP_Master_Out[322] = \<const0> ;
  assign LOCKSTEP_Master_Out[323] = \<const0> ;
  assign LOCKSTEP_Master_Out[324] = \<const0> ;
  assign LOCKSTEP_Master_Out[325] = \<const0> ;
  assign LOCKSTEP_Master_Out[326] = \<const0> ;
  assign LOCKSTEP_Master_Out[327] = \<const0> ;
  assign LOCKSTEP_Master_Out[328] = \<const0> ;
  assign LOCKSTEP_Master_Out[329] = \<const0> ;
  assign LOCKSTEP_Master_Out[330] = \<const0> ;
  assign LOCKSTEP_Master_Out[331] = \<const0> ;
  assign LOCKSTEP_Master_Out[332] = \<const0> ;
  assign LOCKSTEP_Master_Out[333] = \<const0> ;
  assign LOCKSTEP_Master_Out[334] = \<const0> ;
  assign LOCKSTEP_Master_Out[335] = \<const0> ;
  assign LOCKSTEP_Master_Out[336] = \<const0> ;
  assign LOCKSTEP_Master_Out[337] = \<const0> ;
  assign LOCKSTEP_Master_Out[338] = \<const0> ;
  assign LOCKSTEP_Master_Out[339] = \<const0> ;
  assign LOCKSTEP_Master_Out[340] = \<const0> ;
  assign LOCKSTEP_Master_Out[341] = \<const0> ;
  assign LOCKSTEP_Master_Out[342] = \<const0> ;
  assign LOCKSTEP_Master_Out[343] = \<const0> ;
  assign LOCKSTEP_Master_Out[344] = \<const0> ;
  assign LOCKSTEP_Master_Out[345] = \<const0> ;
  assign LOCKSTEP_Master_Out[346] = \<const0> ;
  assign LOCKSTEP_Master_Out[347] = \<const0> ;
  assign LOCKSTEP_Master_Out[348] = \<const0> ;
  assign LOCKSTEP_Master_Out[349] = \<const0> ;
  assign LOCKSTEP_Master_Out[350] = \<const0> ;
  assign LOCKSTEP_Master_Out[351] = \<const0> ;
  assign LOCKSTEP_Master_Out[352] = \<const0> ;
  assign LOCKSTEP_Master_Out[353] = \<const0> ;
  assign LOCKSTEP_Master_Out[354] = \<const0> ;
  assign LOCKSTEP_Master_Out[355] = \<const0> ;
  assign LOCKSTEP_Master_Out[356] = \<const0> ;
  assign LOCKSTEP_Master_Out[357] = \<const0> ;
  assign LOCKSTEP_Master_Out[358] = \<const0> ;
  assign LOCKSTEP_Master_Out[359] = \<const0> ;
  assign LOCKSTEP_Master_Out[360] = \<const0> ;
  assign LOCKSTEP_Master_Out[361] = \<const0> ;
  assign LOCKSTEP_Master_Out[362] = \<const0> ;
  assign LOCKSTEP_Master_Out[363] = \<const0> ;
  assign LOCKSTEP_Master_Out[364] = \<const0> ;
  assign LOCKSTEP_Master_Out[365] = \<const0> ;
  assign LOCKSTEP_Master_Out[366] = \<const0> ;
  assign LOCKSTEP_Master_Out[367] = \<const0> ;
  assign LOCKSTEP_Master_Out[368] = \<const0> ;
  assign LOCKSTEP_Master_Out[369] = \<const0> ;
  assign LOCKSTEP_Master_Out[370] = \<const0> ;
  assign LOCKSTEP_Master_Out[371] = \<const0> ;
  assign LOCKSTEP_Master_Out[372] = \<const0> ;
  assign LOCKSTEP_Master_Out[373] = \<const0> ;
  assign LOCKSTEP_Master_Out[374] = \<const0> ;
  assign LOCKSTEP_Master_Out[375] = \<const0> ;
  assign LOCKSTEP_Master_Out[376] = \<const0> ;
  assign LOCKSTEP_Master_Out[377] = \<const0> ;
  assign LOCKSTEP_Master_Out[378] = \<const0> ;
  assign LOCKSTEP_Master_Out[379] = \<const0> ;
  assign LOCKSTEP_Master_Out[380] = \<const0> ;
  assign LOCKSTEP_Master_Out[381] = \<const0> ;
  assign LOCKSTEP_Master_Out[382] = \<const0> ;
  assign LOCKSTEP_Master_Out[383] = \<const0> ;
  assign LOCKSTEP_Master_Out[384] = \<const0> ;
  assign LOCKSTEP_Master_Out[385] = \<const0> ;
  assign LOCKSTEP_Master_Out[386] = \<const0> ;
  assign LOCKSTEP_Master_Out[387] = \<const0> ;
  assign LOCKSTEP_Master_Out[388] = \<const0> ;
  assign LOCKSTEP_Master_Out[389] = \<const0> ;
  assign LOCKSTEP_Master_Out[390] = \<const0> ;
  assign LOCKSTEP_Master_Out[391] = \<const0> ;
  assign LOCKSTEP_Master_Out[392] = \<const0> ;
  assign LOCKSTEP_Master_Out[393] = \<const0> ;
  assign LOCKSTEP_Master_Out[394] = \<const0> ;
  assign LOCKSTEP_Master_Out[395] = \<const0> ;
  assign LOCKSTEP_Master_Out[396] = \<const0> ;
  assign LOCKSTEP_Master_Out[397] = \<const0> ;
  assign LOCKSTEP_Master_Out[398] = \<const0> ;
  assign LOCKSTEP_Master_Out[399] = \<const0> ;
  assign LOCKSTEP_Master_Out[400] = \<const0> ;
  assign LOCKSTEP_Master_Out[401] = \<const0> ;
  assign LOCKSTEP_Master_Out[402] = \<const0> ;
  assign LOCKSTEP_Master_Out[403] = \<const0> ;
  assign LOCKSTEP_Master_Out[404] = \<const0> ;
  assign LOCKSTEP_Master_Out[405] = \<const0> ;
  assign LOCKSTEP_Master_Out[406] = \<const0> ;
  assign LOCKSTEP_Master_Out[407] = \<const0> ;
  assign LOCKSTEP_Master_Out[408] = \<const0> ;
  assign LOCKSTEP_Master_Out[409] = \<const0> ;
  assign LOCKSTEP_Master_Out[410] = \<const0> ;
  assign LOCKSTEP_Master_Out[411] = \<const0> ;
  assign LOCKSTEP_Master_Out[412] = \<const0> ;
  assign LOCKSTEP_Master_Out[413] = \<const0> ;
  assign LOCKSTEP_Master_Out[414] = \<const0> ;
  assign LOCKSTEP_Master_Out[415] = \<const0> ;
  assign LOCKSTEP_Master_Out[416] = \<const0> ;
  assign LOCKSTEP_Master_Out[417] = \<const0> ;
  assign LOCKSTEP_Master_Out[418] = \<const0> ;
  assign LOCKSTEP_Master_Out[419] = \<const0> ;
  assign LOCKSTEP_Master_Out[420] = \<const0> ;
  assign LOCKSTEP_Master_Out[421] = \<const0> ;
  assign LOCKSTEP_Master_Out[422] = \<const0> ;
  assign LOCKSTEP_Master_Out[423] = \<const0> ;
  assign LOCKSTEP_Master_Out[424] = \<const0> ;
  assign LOCKSTEP_Master_Out[425] = \<const0> ;
  assign LOCKSTEP_Master_Out[426] = \<const0> ;
  assign LOCKSTEP_Master_Out[427] = \<const0> ;
  assign LOCKSTEP_Master_Out[428] = \<const0> ;
  assign LOCKSTEP_Master_Out[429] = \<const0> ;
  assign LOCKSTEP_Master_Out[430] = \<const0> ;
  assign LOCKSTEP_Master_Out[431] = \<const0> ;
  assign LOCKSTEP_Master_Out[432] = \<const0> ;
  assign LOCKSTEP_Master_Out[433] = \<const0> ;
  assign LOCKSTEP_Master_Out[434] = \<const0> ;
  assign LOCKSTEP_Master_Out[435] = \<const0> ;
  assign LOCKSTEP_Master_Out[436] = \<const0> ;
  assign LOCKSTEP_Master_Out[437] = \<const0> ;
  assign LOCKSTEP_Master_Out[438] = \<const0> ;
  assign LOCKSTEP_Master_Out[439] = \<const0> ;
  assign LOCKSTEP_Master_Out[440] = \<const0> ;
  assign LOCKSTEP_Master_Out[441] = \<const0> ;
  assign LOCKSTEP_Master_Out[442] = \<const0> ;
  assign LOCKSTEP_Master_Out[443] = \<const0> ;
  assign LOCKSTEP_Master_Out[444] = \<const0> ;
  assign LOCKSTEP_Master_Out[445] = \<const0> ;
  assign LOCKSTEP_Master_Out[446] = \<const0> ;
  assign LOCKSTEP_Master_Out[447] = \<const0> ;
  assign LOCKSTEP_Master_Out[448] = \<const0> ;
  assign LOCKSTEP_Master_Out[449] = \<const0> ;
  assign LOCKSTEP_Master_Out[450] = \<const0> ;
  assign LOCKSTEP_Master_Out[451] = \<const0> ;
  assign LOCKSTEP_Master_Out[452] = \<const0> ;
  assign LOCKSTEP_Master_Out[453] = \<const0> ;
  assign LOCKSTEP_Master_Out[454] = \<const0> ;
  assign LOCKSTEP_Master_Out[455] = \<const0> ;
  assign LOCKSTEP_Master_Out[456] = \<const0> ;
  assign LOCKSTEP_Master_Out[457] = \<const0> ;
  assign LOCKSTEP_Master_Out[458] = \<const0> ;
  assign LOCKSTEP_Master_Out[459] = \<const0> ;
  assign LOCKSTEP_Master_Out[460] = \<const0> ;
  assign LOCKSTEP_Master_Out[461] = \<const0> ;
  assign LOCKSTEP_Master_Out[462] = \<const0> ;
  assign LOCKSTEP_Master_Out[463] = \<const0> ;
  assign LOCKSTEP_Master_Out[464] = \<const0> ;
  assign LOCKSTEP_Master_Out[465] = \<const0> ;
  assign LOCKSTEP_Master_Out[466] = \<const0> ;
  assign LOCKSTEP_Master_Out[467] = \<const0> ;
  assign LOCKSTEP_Master_Out[468] = \<const0> ;
  assign LOCKSTEP_Master_Out[469] = \<const0> ;
  assign LOCKSTEP_Master_Out[470] = \<const0> ;
  assign LOCKSTEP_Master_Out[471] = \<const0> ;
  assign LOCKSTEP_Master_Out[472] = \<const0> ;
  assign LOCKSTEP_Master_Out[473] = \<const0> ;
  assign LOCKSTEP_Master_Out[474] = \<const0> ;
  assign LOCKSTEP_Master_Out[475] = \<const0> ;
  assign LOCKSTEP_Master_Out[476] = \<const0> ;
  assign LOCKSTEP_Master_Out[477] = \<const0> ;
  assign LOCKSTEP_Master_Out[478] = \<const0> ;
  assign LOCKSTEP_Master_Out[479] = \<const0> ;
  assign LOCKSTEP_Master_Out[480] = \<const0> ;
  assign LOCKSTEP_Master_Out[481] = \<const0> ;
  assign LOCKSTEP_Master_Out[482] = \<const0> ;
  assign LOCKSTEP_Master_Out[483] = \<const0> ;
  assign LOCKSTEP_Master_Out[484] = \<const0> ;
  assign LOCKSTEP_Master_Out[485] = \<const0> ;
  assign LOCKSTEP_Master_Out[486] = \<const0> ;
  assign LOCKSTEP_Master_Out[487] = \<const0> ;
  assign LOCKSTEP_Master_Out[488] = \<const0> ;
  assign LOCKSTEP_Master_Out[489] = \<const0> ;
  assign LOCKSTEP_Master_Out[490] = \<const0> ;
  assign LOCKSTEP_Master_Out[491] = \<const0> ;
  assign LOCKSTEP_Master_Out[492] = \<const0> ;
  assign LOCKSTEP_Master_Out[493] = \<const0> ;
  assign LOCKSTEP_Master_Out[494] = \<const0> ;
  assign LOCKSTEP_Master_Out[495] = \<const0> ;
  assign LOCKSTEP_Master_Out[496] = \<const0> ;
  assign LOCKSTEP_Master_Out[497] = \<const0> ;
  assign LOCKSTEP_Master_Out[498] = \<const0> ;
  assign LOCKSTEP_Master_Out[499] = \<const0> ;
  assign LOCKSTEP_Master_Out[500] = \<const0> ;
  assign LOCKSTEP_Master_Out[501] = \<const0> ;
  assign LOCKSTEP_Master_Out[502] = \<const0> ;
  assign LOCKSTEP_Master_Out[503] = \<const0> ;
  assign LOCKSTEP_Master_Out[504] = \<const0> ;
  assign LOCKSTEP_Master_Out[505] = \<const0> ;
  assign LOCKSTEP_Master_Out[506] = \<const0> ;
  assign LOCKSTEP_Master_Out[507] = \<const0> ;
  assign LOCKSTEP_Master_Out[508] = \<const0> ;
  assign LOCKSTEP_Master_Out[509] = \<const0> ;
  assign LOCKSTEP_Master_Out[510] = \<const0> ;
  assign LOCKSTEP_Master_Out[511] = \<const0> ;
  assign LOCKSTEP_Master_Out[512] = \<const0> ;
  assign LOCKSTEP_Master_Out[513] = \<const0> ;
  assign LOCKSTEP_Master_Out[514] = \<const0> ;
  assign LOCKSTEP_Master_Out[515] = \<const0> ;
  assign LOCKSTEP_Master_Out[516] = \<const0> ;
  assign LOCKSTEP_Master_Out[517] = \<const0> ;
  assign LOCKSTEP_Master_Out[518] = \<const0> ;
  assign LOCKSTEP_Master_Out[519] = \<const0> ;
  assign LOCKSTEP_Master_Out[520] = \<const0> ;
  assign LOCKSTEP_Master_Out[521] = \<const0> ;
  assign LOCKSTEP_Master_Out[522] = \<const0> ;
  assign LOCKSTEP_Master_Out[523] = \<const0> ;
  assign LOCKSTEP_Master_Out[524] = \<const0> ;
  assign LOCKSTEP_Master_Out[525] = \<const0> ;
  assign LOCKSTEP_Master_Out[526] = \<const0> ;
  assign LOCKSTEP_Master_Out[527] = \<const0> ;
  assign LOCKSTEP_Master_Out[528] = \<const0> ;
  assign LOCKSTEP_Master_Out[529] = \<const0> ;
  assign LOCKSTEP_Master_Out[530] = \<const0> ;
  assign LOCKSTEP_Master_Out[531] = \<const0> ;
  assign LOCKSTEP_Master_Out[532] = \<const0> ;
  assign LOCKSTEP_Master_Out[533] = \<const0> ;
  assign LOCKSTEP_Master_Out[534] = \<const0> ;
  assign LOCKSTEP_Master_Out[535] = \<const0> ;
  assign LOCKSTEP_Master_Out[536] = \<const0> ;
  assign LOCKSTEP_Master_Out[537] = \<const0> ;
  assign LOCKSTEP_Master_Out[538] = \<const0> ;
  assign LOCKSTEP_Master_Out[539] = \<const0> ;
  assign LOCKSTEP_Master_Out[540] = \<const0> ;
  assign LOCKSTEP_Master_Out[541] = \<const0> ;
  assign LOCKSTEP_Master_Out[542] = \<const0> ;
  assign LOCKSTEP_Master_Out[543] = \<const0> ;
  assign LOCKSTEP_Master_Out[544] = \<const0> ;
  assign LOCKSTEP_Master_Out[545] = \<const0> ;
  assign LOCKSTEP_Master_Out[546] = \<const0> ;
  assign LOCKSTEP_Master_Out[547] = \<const0> ;
  assign LOCKSTEP_Master_Out[548] = \<const0> ;
  assign LOCKSTEP_Master_Out[549] = \<const0> ;
  assign LOCKSTEP_Master_Out[550] = \<const0> ;
  assign LOCKSTEP_Master_Out[551] = \<const0> ;
  assign LOCKSTEP_Master_Out[552] = \<const0> ;
  assign LOCKSTEP_Master_Out[553] = \<const0> ;
  assign LOCKSTEP_Master_Out[554] = \<const0> ;
  assign LOCKSTEP_Master_Out[555] = \<const0> ;
  assign LOCKSTEP_Master_Out[556] = \<const0> ;
  assign LOCKSTEP_Master_Out[557] = \<const0> ;
  assign LOCKSTEP_Master_Out[558] = \<const0> ;
  assign LOCKSTEP_Master_Out[559] = \<const0> ;
  assign LOCKSTEP_Master_Out[560] = \<const0> ;
  assign LOCKSTEP_Master_Out[561] = \<const0> ;
  assign LOCKSTEP_Master_Out[562] = \<const0> ;
  assign LOCKSTEP_Master_Out[563] = \<const0> ;
  assign LOCKSTEP_Master_Out[564] = \<const0> ;
  assign LOCKSTEP_Master_Out[565] = \<const0> ;
  assign LOCKSTEP_Master_Out[566] = \<const0> ;
  assign LOCKSTEP_Master_Out[567] = \<const0> ;
  assign LOCKSTEP_Master_Out[568] = \<const0> ;
  assign LOCKSTEP_Master_Out[569] = \<const0> ;
  assign LOCKSTEP_Master_Out[570] = \<const0> ;
  assign LOCKSTEP_Master_Out[571] = \<const0> ;
  assign LOCKSTEP_Master_Out[572] = \<const0> ;
  assign LOCKSTEP_Master_Out[573] = \<const0> ;
  assign LOCKSTEP_Master_Out[574] = \<const0> ;
  assign LOCKSTEP_Master_Out[575] = \<const0> ;
  assign LOCKSTEP_Master_Out[576] = \<const0> ;
  assign LOCKSTEP_Master_Out[577] = \<const0> ;
  assign LOCKSTEP_Master_Out[578] = \<const0> ;
  assign LOCKSTEP_Master_Out[579] = \<const0> ;
  assign LOCKSTEP_Master_Out[580] = \<const0> ;
  assign LOCKSTEP_Master_Out[581] = \<const0> ;
  assign LOCKSTEP_Master_Out[582] = \<const0> ;
  assign LOCKSTEP_Master_Out[583] = \<const0> ;
  assign LOCKSTEP_Master_Out[584] = \<const0> ;
  assign LOCKSTEP_Master_Out[585] = \<const0> ;
  assign LOCKSTEP_Master_Out[586] = \<const0> ;
  assign LOCKSTEP_Master_Out[587] = \<const0> ;
  assign LOCKSTEP_Master_Out[588] = \<const0> ;
  assign LOCKSTEP_Master_Out[589] = \<const0> ;
  assign LOCKSTEP_Master_Out[590] = \<const0> ;
  assign LOCKSTEP_Master_Out[591] = \<const0> ;
  assign LOCKSTEP_Master_Out[592] = \<const0> ;
  assign LOCKSTEP_Master_Out[593] = \<const0> ;
  assign LOCKSTEP_Master_Out[594] = \<const0> ;
  assign LOCKSTEP_Master_Out[595] = \<const0> ;
  assign LOCKSTEP_Master_Out[596] = \<const0> ;
  assign LOCKSTEP_Master_Out[597] = \<const0> ;
  assign LOCKSTEP_Master_Out[598] = \<const0> ;
  assign LOCKSTEP_Master_Out[599] = \<const0> ;
  assign LOCKSTEP_Master_Out[600] = \<const0> ;
  assign LOCKSTEP_Master_Out[601] = \<const0> ;
  assign LOCKSTEP_Master_Out[602] = \<const0> ;
  assign LOCKSTEP_Master_Out[603] = \<const0> ;
  assign LOCKSTEP_Master_Out[604] = \<const0> ;
  assign LOCKSTEP_Master_Out[605] = \<const0> ;
  assign LOCKSTEP_Master_Out[606] = \<const0> ;
  assign LOCKSTEP_Master_Out[607] = \<const0> ;
  assign LOCKSTEP_Master_Out[608] = \<const0> ;
  assign LOCKSTEP_Master_Out[609] = \<const0> ;
  assign LOCKSTEP_Master_Out[610] = \<const0> ;
  assign LOCKSTEP_Master_Out[611] = \<const0> ;
  assign LOCKSTEP_Master_Out[612] = \<const0> ;
  assign LOCKSTEP_Master_Out[613] = \<const0> ;
  assign LOCKSTEP_Master_Out[614] = \<const0> ;
  assign LOCKSTEP_Master_Out[615] = \<const0> ;
  assign LOCKSTEP_Master_Out[616] = \<const0> ;
  assign LOCKSTEP_Master_Out[617] = \<const0> ;
  assign LOCKSTEP_Master_Out[618] = \<const0> ;
  assign LOCKSTEP_Master_Out[619] = \<const0> ;
  assign LOCKSTEP_Master_Out[620] = \<const0> ;
  assign LOCKSTEP_Master_Out[621] = \<const0> ;
  assign LOCKSTEP_Master_Out[622] = \<const0> ;
  assign LOCKSTEP_Master_Out[623] = \<const0> ;
  assign LOCKSTEP_Master_Out[624] = \<const0> ;
  assign LOCKSTEP_Master_Out[625] = \<const0> ;
  assign LOCKSTEP_Master_Out[626] = \<const0> ;
  assign LOCKSTEP_Master_Out[627] = \<const0> ;
  assign LOCKSTEP_Master_Out[628] = \<const0> ;
  assign LOCKSTEP_Master_Out[629] = \<const0> ;
  assign LOCKSTEP_Master_Out[630] = \<const0> ;
  assign LOCKSTEP_Master_Out[631] = \<const0> ;
  assign LOCKSTEP_Master_Out[632] = \<const0> ;
  assign LOCKSTEP_Master_Out[633] = \<const0> ;
  assign LOCKSTEP_Master_Out[634] = \<const0> ;
  assign LOCKSTEP_Master_Out[635] = \<const0> ;
  assign LOCKSTEP_Master_Out[636] = \<const0> ;
  assign LOCKSTEP_Master_Out[637] = \<const0> ;
  assign LOCKSTEP_Master_Out[638] = \<const0> ;
  assign LOCKSTEP_Master_Out[639] = \<const0> ;
  assign LOCKSTEP_Master_Out[640] = \<const0> ;
  assign LOCKSTEP_Master_Out[641] = \<const0> ;
  assign LOCKSTEP_Master_Out[642] = \<const0> ;
  assign LOCKSTEP_Master_Out[643] = \<const0> ;
  assign LOCKSTEP_Master_Out[644] = \<const0> ;
  assign LOCKSTEP_Master_Out[645] = \<const0> ;
  assign LOCKSTEP_Master_Out[646] = \<const0> ;
  assign LOCKSTEP_Master_Out[647] = \<const0> ;
  assign LOCKSTEP_Master_Out[648] = \<const0> ;
  assign LOCKSTEP_Master_Out[649] = \<const0> ;
  assign LOCKSTEP_Master_Out[650] = \<const0> ;
  assign LOCKSTEP_Master_Out[651] = \<const0> ;
  assign LOCKSTEP_Master_Out[652] = \<const0> ;
  assign LOCKSTEP_Master_Out[653] = \<const0> ;
  assign LOCKSTEP_Master_Out[654] = \<const0> ;
  assign LOCKSTEP_Master_Out[655] = \<const0> ;
  assign LOCKSTEP_Master_Out[656] = \<const0> ;
  assign LOCKSTEP_Master_Out[657] = \<const0> ;
  assign LOCKSTEP_Master_Out[658] = \<const0> ;
  assign LOCKSTEP_Master_Out[659] = \<const0> ;
  assign LOCKSTEP_Master_Out[660] = \<const0> ;
  assign LOCKSTEP_Master_Out[661] = \<const0> ;
  assign LOCKSTEP_Master_Out[662] = \<const0> ;
  assign LOCKSTEP_Master_Out[663] = \<const0> ;
  assign LOCKSTEP_Master_Out[664] = \<const0> ;
  assign LOCKSTEP_Master_Out[665] = \<const0> ;
  assign LOCKSTEP_Master_Out[666] = \<const0> ;
  assign LOCKSTEP_Master_Out[667] = \<const0> ;
  assign LOCKSTEP_Master_Out[668] = \<const0> ;
  assign LOCKSTEP_Master_Out[669] = \<const0> ;
  assign LOCKSTEP_Master_Out[670] = \<const0> ;
  assign LOCKSTEP_Master_Out[671] = \<const0> ;
  assign LOCKSTEP_Master_Out[672] = \<const0> ;
  assign LOCKSTEP_Master_Out[673] = \<const0> ;
  assign LOCKSTEP_Master_Out[674] = \<const0> ;
  assign LOCKSTEP_Master_Out[675] = \<const0> ;
  assign LOCKSTEP_Master_Out[676] = \<const0> ;
  assign LOCKSTEP_Master_Out[677] = \<const0> ;
  assign LOCKSTEP_Master_Out[678] = \<const0> ;
  assign LOCKSTEP_Master_Out[679] = \<const0> ;
  assign LOCKSTEP_Master_Out[680] = \<const0> ;
  assign LOCKSTEP_Master_Out[681] = \<const0> ;
  assign LOCKSTEP_Master_Out[682] = \<const0> ;
  assign LOCKSTEP_Master_Out[683] = \<const0> ;
  assign LOCKSTEP_Master_Out[684] = \<const0> ;
  assign LOCKSTEP_Master_Out[685] = \<const0> ;
  assign LOCKSTEP_Master_Out[686] = \<const0> ;
  assign LOCKSTEP_Master_Out[687] = \<const0> ;
  assign LOCKSTEP_Master_Out[688] = \<const0> ;
  assign LOCKSTEP_Master_Out[689] = \<const0> ;
  assign LOCKSTEP_Master_Out[690] = \<const0> ;
  assign LOCKSTEP_Master_Out[691] = \<const0> ;
  assign LOCKSTEP_Master_Out[692] = \<const0> ;
  assign LOCKSTEP_Master_Out[693] = \<const0> ;
  assign LOCKSTEP_Master_Out[694] = \<const0> ;
  assign LOCKSTEP_Master_Out[695] = \<const0> ;
  assign LOCKSTEP_Master_Out[696] = \<const0> ;
  assign LOCKSTEP_Master_Out[697] = \<const0> ;
  assign LOCKSTEP_Master_Out[698] = \<const0> ;
  assign LOCKSTEP_Master_Out[699] = \<const0> ;
  assign LOCKSTEP_Master_Out[700] = \<const0> ;
  assign LOCKSTEP_Master_Out[701] = \<const0> ;
  assign LOCKSTEP_Master_Out[702] = \<const0> ;
  assign LOCKSTEP_Master_Out[703] = \<const0> ;
  assign LOCKSTEP_Master_Out[704] = \<const0> ;
  assign LOCKSTEP_Master_Out[705] = \<const0> ;
  assign LOCKSTEP_Master_Out[706] = \<const0> ;
  assign LOCKSTEP_Master_Out[707] = \<const0> ;
  assign LOCKSTEP_Master_Out[708] = \<const0> ;
  assign LOCKSTEP_Master_Out[709] = \<const0> ;
  assign LOCKSTEP_Master_Out[710] = \<const0> ;
  assign LOCKSTEP_Master_Out[711] = \<const0> ;
  assign LOCKSTEP_Master_Out[712] = \<const0> ;
  assign LOCKSTEP_Master_Out[713] = \<const0> ;
  assign LOCKSTEP_Master_Out[714] = \<const0> ;
  assign LOCKSTEP_Master_Out[715] = \<const0> ;
  assign LOCKSTEP_Master_Out[716] = \<const0> ;
  assign LOCKSTEP_Master_Out[717] = \<const0> ;
  assign LOCKSTEP_Master_Out[718] = \<const0> ;
  assign LOCKSTEP_Master_Out[719] = \<const0> ;
  assign LOCKSTEP_Master_Out[720] = \<const0> ;
  assign LOCKSTEP_Master_Out[721] = \<const0> ;
  assign LOCKSTEP_Master_Out[722] = \<const0> ;
  assign LOCKSTEP_Master_Out[723] = \<const0> ;
  assign LOCKSTEP_Master_Out[724] = \<const0> ;
  assign LOCKSTEP_Master_Out[725] = \<const0> ;
  assign LOCKSTEP_Master_Out[726] = \<const0> ;
  assign LOCKSTEP_Master_Out[727] = \<const0> ;
  assign LOCKSTEP_Master_Out[728] = \<const0> ;
  assign LOCKSTEP_Master_Out[729] = \<const0> ;
  assign LOCKSTEP_Master_Out[730] = \<const0> ;
  assign LOCKSTEP_Master_Out[731] = \<const0> ;
  assign LOCKSTEP_Master_Out[732] = \<const0> ;
  assign LOCKSTEP_Master_Out[733] = \<const0> ;
  assign LOCKSTEP_Master_Out[734] = \<const0> ;
  assign LOCKSTEP_Master_Out[735] = \<const0> ;
  assign LOCKSTEP_Master_Out[736] = \<const0> ;
  assign LOCKSTEP_Master_Out[737] = \<const0> ;
  assign LOCKSTEP_Master_Out[738] = \<const0> ;
  assign LOCKSTEP_Master_Out[739] = \<const0> ;
  assign LOCKSTEP_Master_Out[740] = \<const0> ;
  assign LOCKSTEP_Master_Out[741] = \<const0> ;
  assign LOCKSTEP_Master_Out[742] = \<const0> ;
  assign LOCKSTEP_Master_Out[743] = \<const0> ;
  assign LOCKSTEP_Master_Out[744] = \<const0> ;
  assign LOCKSTEP_Master_Out[745] = \<const0> ;
  assign LOCKSTEP_Master_Out[746] = \<const0> ;
  assign LOCKSTEP_Master_Out[747] = \<const0> ;
  assign LOCKSTEP_Master_Out[748] = \<const0> ;
  assign LOCKSTEP_Master_Out[749] = \<const0> ;
  assign LOCKSTEP_Master_Out[750] = \<const0> ;
  assign LOCKSTEP_Master_Out[751] = \<const0> ;
  assign LOCKSTEP_Master_Out[752] = \<const0> ;
  assign LOCKSTEP_Master_Out[753] = \<const0> ;
  assign LOCKSTEP_Master_Out[754] = \<const0> ;
  assign LOCKSTEP_Master_Out[755] = \<const0> ;
  assign LOCKSTEP_Master_Out[756] = \<const0> ;
  assign LOCKSTEP_Master_Out[757] = \<const0> ;
  assign LOCKSTEP_Master_Out[758] = \<const0> ;
  assign LOCKSTEP_Master_Out[759] = \<const0> ;
  assign LOCKSTEP_Master_Out[760] = \<const0> ;
  assign LOCKSTEP_Master_Out[761] = \<const0> ;
  assign LOCKSTEP_Master_Out[762] = \<const0> ;
  assign LOCKSTEP_Master_Out[763] = \<const0> ;
  assign LOCKSTEP_Master_Out[764] = \<const0> ;
  assign LOCKSTEP_Master_Out[765] = \<const0> ;
  assign LOCKSTEP_Master_Out[766] = \<const0> ;
  assign LOCKSTEP_Master_Out[767] = \<const0> ;
  assign LOCKSTEP_Master_Out[768] = \<const0> ;
  assign LOCKSTEP_Master_Out[769] = \<const0> ;
  assign LOCKSTEP_Master_Out[770] = \<const0> ;
  assign LOCKSTEP_Master_Out[771] = \<const0> ;
  assign LOCKSTEP_Master_Out[772] = \<const0> ;
  assign LOCKSTEP_Master_Out[773] = \<const0> ;
  assign LOCKSTEP_Master_Out[774] = \<const0> ;
  assign LOCKSTEP_Master_Out[775] = \<const0> ;
  assign LOCKSTEP_Master_Out[776] = \<const0> ;
  assign LOCKSTEP_Master_Out[777] = \<const0> ;
  assign LOCKSTEP_Master_Out[778] = \<const0> ;
  assign LOCKSTEP_Master_Out[779] = \<const0> ;
  assign LOCKSTEP_Master_Out[780] = \<const0> ;
  assign LOCKSTEP_Master_Out[781] = \<const0> ;
  assign LOCKSTEP_Master_Out[782] = \<const0> ;
  assign LOCKSTEP_Master_Out[783] = \<const0> ;
  assign LOCKSTEP_Master_Out[784] = \<const0> ;
  assign LOCKSTEP_Master_Out[785] = \<const0> ;
  assign LOCKSTEP_Master_Out[786] = \<const0> ;
  assign LOCKSTEP_Master_Out[787] = \<const0> ;
  assign LOCKSTEP_Master_Out[788] = \<const0> ;
  assign LOCKSTEP_Master_Out[789] = \<const0> ;
  assign LOCKSTEP_Master_Out[790] = \<const0> ;
  assign LOCKSTEP_Master_Out[791] = \<const0> ;
  assign LOCKSTEP_Master_Out[792] = \<const0> ;
  assign LOCKSTEP_Master_Out[793] = \<const0> ;
  assign LOCKSTEP_Master_Out[794] = \<const0> ;
  assign LOCKSTEP_Master_Out[795] = \<const0> ;
  assign LOCKSTEP_Master_Out[796] = \<const0> ;
  assign LOCKSTEP_Master_Out[797] = \<const0> ;
  assign LOCKSTEP_Master_Out[798] = \<const0> ;
  assign LOCKSTEP_Master_Out[799] = \<const0> ;
  assign LOCKSTEP_Master_Out[800] = \<const0> ;
  assign LOCKSTEP_Master_Out[801] = \<const0> ;
  assign LOCKSTEP_Master_Out[802] = \<const0> ;
  assign LOCKSTEP_Master_Out[803] = \<const0> ;
  assign LOCKSTEP_Master_Out[804] = \<const0> ;
  assign LOCKSTEP_Master_Out[805] = \<const0> ;
  assign LOCKSTEP_Master_Out[806] = \<const0> ;
  assign LOCKSTEP_Master_Out[807] = \<const0> ;
  assign LOCKSTEP_Master_Out[808] = \<const0> ;
  assign LOCKSTEP_Master_Out[809] = \<const0> ;
  assign LOCKSTEP_Master_Out[810] = \<const0> ;
  assign LOCKSTEP_Master_Out[811] = \<const0> ;
  assign LOCKSTEP_Master_Out[812] = \<const0> ;
  assign LOCKSTEP_Master_Out[813] = \<const0> ;
  assign LOCKSTEP_Master_Out[814] = \<const0> ;
  assign LOCKSTEP_Master_Out[815] = \<const0> ;
  assign LOCKSTEP_Master_Out[816] = \<const0> ;
  assign LOCKSTEP_Master_Out[817] = \<const0> ;
  assign LOCKSTEP_Master_Out[818] = \<const0> ;
  assign LOCKSTEP_Master_Out[819] = \<const0> ;
  assign LOCKSTEP_Master_Out[820] = \<const0> ;
  assign LOCKSTEP_Master_Out[821] = \<const0> ;
  assign LOCKSTEP_Master_Out[822] = \<const0> ;
  assign LOCKSTEP_Master_Out[823] = \<const0> ;
  assign LOCKSTEP_Master_Out[824] = \<const0> ;
  assign LOCKSTEP_Master_Out[825] = \<const0> ;
  assign LOCKSTEP_Master_Out[826] = \<const0> ;
  assign LOCKSTEP_Master_Out[827] = \<const0> ;
  assign LOCKSTEP_Master_Out[828] = \<const0> ;
  assign LOCKSTEP_Master_Out[829] = \<const0> ;
  assign LOCKSTEP_Master_Out[830] = \<const0> ;
  assign LOCKSTEP_Master_Out[831] = \<const0> ;
  assign LOCKSTEP_Master_Out[832] = \<const0> ;
  assign LOCKSTEP_Master_Out[833] = \<const0> ;
  assign LOCKSTEP_Master_Out[834] = \<const0> ;
  assign LOCKSTEP_Master_Out[835] = \<const0> ;
  assign LOCKSTEP_Master_Out[836] = \<const0> ;
  assign LOCKSTEP_Master_Out[837] = \<const0> ;
  assign LOCKSTEP_Master_Out[838] = \<const0> ;
  assign LOCKSTEP_Master_Out[839] = \<const0> ;
  assign LOCKSTEP_Master_Out[840] = \<const0> ;
  assign LOCKSTEP_Master_Out[841] = \<const0> ;
  assign LOCKSTEP_Master_Out[842] = \<const0> ;
  assign LOCKSTEP_Master_Out[843] = \<const0> ;
  assign LOCKSTEP_Master_Out[844] = \<const0> ;
  assign LOCKSTEP_Master_Out[845] = \<const0> ;
  assign LOCKSTEP_Master_Out[846] = \<const0> ;
  assign LOCKSTEP_Master_Out[847] = \<const0> ;
  assign LOCKSTEP_Master_Out[848] = \<const0> ;
  assign LOCKSTEP_Master_Out[849] = \<const0> ;
  assign LOCKSTEP_Master_Out[850] = \<const0> ;
  assign LOCKSTEP_Master_Out[851] = \<const0> ;
  assign LOCKSTEP_Master_Out[852] = \<const0> ;
  assign LOCKSTEP_Master_Out[853] = \<const0> ;
  assign LOCKSTEP_Master_Out[854] = \<const0> ;
  assign LOCKSTEP_Master_Out[855] = \<const0> ;
  assign LOCKSTEP_Master_Out[856] = \<const0> ;
  assign LOCKSTEP_Master_Out[857] = \<const0> ;
  assign LOCKSTEP_Master_Out[858] = \<const0> ;
  assign LOCKSTEP_Master_Out[859] = \<const0> ;
  assign LOCKSTEP_Master_Out[860] = \<const0> ;
  assign LOCKSTEP_Master_Out[861] = \<const0> ;
  assign LOCKSTEP_Master_Out[862] = \<const0> ;
  assign LOCKSTEP_Master_Out[863] = \<const0> ;
  assign LOCKSTEP_Master_Out[864] = \<const0> ;
  assign LOCKSTEP_Master_Out[865] = \<const0> ;
  assign LOCKSTEP_Master_Out[866] = \<const0> ;
  assign LOCKSTEP_Master_Out[867] = \<const0> ;
  assign LOCKSTEP_Master_Out[868] = \<const0> ;
  assign LOCKSTEP_Master_Out[869] = \<const0> ;
  assign LOCKSTEP_Master_Out[870] = \<const0> ;
  assign LOCKSTEP_Master_Out[871] = \<const0> ;
  assign LOCKSTEP_Master_Out[872] = \<const0> ;
  assign LOCKSTEP_Master_Out[873] = \<const0> ;
  assign LOCKSTEP_Master_Out[874] = \<const0> ;
  assign LOCKSTEP_Master_Out[875] = \<const0> ;
  assign LOCKSTEP_Master_Out[876] = \<const0> ;
  assign LOCKSTEP_Master_Out[877] = \<const0> ;
  assign LOCKSTEP_Master_Out[878] = \<const0> ;
  assign LOCKSTEP_Master_Out[879] = \<const0> ;
  assign LOCKSTEP_Master_Out[880] = \<const0> ;
  assign LOCKSTEP_Master_Out[881] = \<const0> ;
  assign LOCKSTEP_Master_Out[882] = \<const0> ;
  assign LOCKSTEP_Master_Out[883] = \<const0> ;
  assign LOCKSTEP_Master_Out[884] = \<const0> ;
  assign LOCKSTEP_Master_Out[885] = \<const0> ;
  assign LOCKSTEP_Master_Out[886] = \<const0> ;
  assign LOCKSTEP_Master_Out[887] = \<const0> ;
  assign LOCKSTEP_Master_Out[888] = \<const0> ;
  assign LOCKSTEP_Master_Out[889] = \<const0> ;
  assign LOCKSTEP_Master_Out[890] = \<const0> ;
  assign LOCKSTEP_Master_Out[891] = \<const0> ;
  assign LOCKSTEP_Master_Out[892] = \<const0> ;
  assign LOCKSTEP_Master_Out[893] = \<const0> ;
  assign LOCKSTEP_Master_Out[894] = \<const0> ;
  assign LOCKSTEP_Master_Out[895] = \<const0> ;
  assign LOCKSTEP_Master_Out[896] = \<const0> ;
  assign LOCKSTEP_Master_Out[897] = \<const0> ;
  assign LOCKSTEP_Master_Out[898] = \<const0> ;
  assign LOCKSTEP_Master_Out[899] = \<const0> ;
  assign LOCKSTEP_Master_Out[900] = \<const0> ;
  assign LOCKSTEP_Master_Out[901] = \<const0> ;
  assign LOCKSTEP_Master_Out[902] = \<const0> ;
  assign LOCKSTEP_Master_Out[903] = \<const0> ;
  assign LOCKSTEP_Master_Out[904] = \<const0> ;
  assign LOCKSTEP_Master_Out[905] = \<const0> ;
  assign LOCKSTEP_Master_Out[906] = \<const0> ;
  assign LOCKSTEP_Master_Out[907] = \<const0> ;
  assign LOCKSTEP_Master_Out[908] = \<const0> ;
  assign LOCKSTEP_Master_Out[909] = \<const0> ;
  assign LOCKSTEP_Master_Out[910] = \<const0> ;
  assign LOCKSTEP_Master_Out[911] = \<const0> ;
  assign LOCKSTEP_Master_Out[912] = \<const0> ;
  assign LOCKSTEP_Master_Out[913] = \<const0> ;
  assign LOCKSTEP_Master_Out[914] = \<const0> ;
  assign LOCKSTEP_Master_Out[915] = \<const0> ;
  assign LOCKSTEP_Master_Out[916] = \<const0> ;
  assign LOCKSTEP_Master_Out[917] = \<const0> ;
  assign LOCKSTEP_Master_Out[918] = \<const0> ;
  assign LOCKSTEP_Master_Out[919] = \<const0> ;
  assign LOCKSTEP_Master_Out[920] = \<const0> ;
  assign LOCKSTEP_Master_Out[921] = \<const0> ;
  assign LOCKSTEP_Master_Out[922] = \<const0> ;
  assign LOCKSTEP_Master_Out[923] = \<const0> ;
  assign LOCKSTEP_Master_Out[924] = \<const0> ;
  assign LOCKSTEP_Master_Out[925] = \<const0> ;
  assign LOCKSTEP_Master_Out[926] = \<const0> ;
  assign LOCKSTEP_Master_Out[927] = \<const0> ;
  assign LOCKSTEP_Master_Out[928] = \<const0> ;
  assign LOCKSTEP_Master_Out[929] = \<const0> ;
  assign LOCKSTEP_Master_Out[930] = \<const0> ;
  assign LOCKSTEP_Master_Out[931] = \<const0> ;
  assign LOCKSTEP_Master_Out[932] = \<const0> ;
  assign LOCKSTEP_Master_Out[933] = \<const0> ;
  assign LOCKSTEP_Master_Out[934] = \<const0> ;
  assign LOCKSTEP_Master_Out[935] = \<const0> ;
  assign LOCKSTEP_Master_Out[936] = \<const0> ;
  assign LOCKSTEP_Master_Out[937] = \<const0> ;
  assign LOCKSTEP_Master_Out[938] = \<const0> ;
  assign LOCKSTEP_Master_Out[939] = \<const0> ;
  assign LOCKSTEP_Master_Out[940] = \<const0> ;
  assign LOCKSTEP_Master_Out[941] = \<const0> ;
  assign LOCKSTEP_Master_Out[942] = \<const0> ;
  assign LOCKSTEP_Master_Out[943] = \<const0> ;
  assign LOCKSTEP_Master_Out[944] = \<const0> ;
  assign LOCKSTEP_Master_Out[945] = \<const0> ;
  assign LOCKSTEP_Master_Out[946] = \<const0> ;
  assign LOCKSTEP_Master_Out[947] = \<const0> ;
  assign LOCKSTEP_Master_Out[948] = \<const0> ;
  assign LOCKSTEP_Master_Out[949] = \<const0> ;
  assign LOCKSTEP_Master_Out[950] = \<const0> ;
  assign LOCKSTEP_Master_Out[951] = \<const0> ;
  assign LOCKSTEP_Master_Out[952] = \<const0> ;
  assign LOCKSTEP_Master_Out[953] = \<const0> ;
  assign LOCKSTEP_Master_Out[954] = \<const0> ;
  assign LOCKSTEP_Master_Out[955] = \<const0> ;
  assign LOCKSTEP_Master_Out[956] = \<const0> ;
  assign LOCKSTEP_Master_Out[957] = \<const0> ;
  assign LOCKSTEP_Master_Out[958] = \<const0> ;
  assign LOCKSTEP_Master_Out[959] = \<const0> ;
  assign LOCKSTEP_Master_Out[960] = \<const0> ;
  assign LOCKSTEP_Master_Out[961] = \<const0> ;
  assign LOCKSTEP_Master_Out[962] = \<const0> ;
  assign LOCKSTEP_Master_Out[963] = \<const0> ;
  assign LOCKSTEP_Master_Out[964] = \<const0> ;
  assign LOCKSTEP_Master_Out[965] = \<const0> ;
  assign LOCKSTEP_Master_Out[966] = \<const0> ;
  assign LOCKSTEP_Master_Out[967] = \<const0> ;
  assign LOCKSTEP_Master_Out[968] = \<const0> ;
  assign LOCKSTEP_Master_Out[969] = \<const0> ;
  assign LOCKSTEP_Master_Out[970] = \<const0> ;
  assign LOCKSTEP_Master_Out[971] = \<const0> ;
  assign LOCKSTEP_Master_Out[972] = \<const0> ;
  assign LOCKSTEP_Master_Out[973] = \<const0> ;
  assign LOCKSTEP_Master_Out[974] = \<const0> ;
  assign LOCKSTEP_Master_Out[975] = \<const0> ;
  assign LOCKSTEP_Master_Out[976] = \<const0> ;
  assign LOCKSTEP_Master_Out[977] = \<const0> ;
  assign LOCKSTEP_Master_Out[978] = \<const0> ;
  assign LOCKSTEP_Master_Out[979] = \<const0> ;
  assign LOCKSTEP_Master_Out[980] = \<const0> ;
  assign LOCKSTEP_Master_Out[981] = \<const0> ;
  assign LOCKSTEP_Master_Out[982] = \<const0> ;
  assign LOCKSTEP_Master_Out[983] = \<const0> ;
  assign LOCKSTEP_Master_Out[984] = \<const0> ;
  assign LOCKSTEP_Master_Out[985] = \<const0> ;
  assign LOCKSTEP_Master_Out[986] = \<const0> ;
  assign LOCKSTEP_Master_Out[987] = \<const0> ;
  assign LOCKSTEP_Master_Out[988] = \<const0> ;
  assign LOCKSTEP_Master_Out[989] = \<const0> ;
  assign LOCKSTEP_Master_Out[990] = \<const0> ;
  assign LOCKSTEP_Master_Out[991] = \<const0> ;
  assign LOCKSTEP_Master_Out[992] = \<const0> ;
  assign LOCKSTEP_Master_Out[993] = \<const0> ;
  assign LOCKSTEP_Master_Out[994] = \<const0> ;
  assign LOCKSTEP_Master_Out[995] = \<const0> ;
  assign LOCKSTEP_Master_Out[996] = \<const0> ;
  assign LOCKSTEP_Master_Out[997] = \<const0> ;
  assign LOCKSTEP_Master_Out[998] = \<const0> ;
  assign LOCKSTEP_Master_Out[999] = \<const0> ;
  assign LOCKSTEP_Master_Out[1000] = \<const0> ;
  assign LOCKSTEP_Master_Out[1001] = \<const0> ;
  assign LOCKSTEP_Master_Out[1002] = \<const0> ;
  assign LOCKSTEP_Master_Out[1003] = \<const0> ;
  assign LOCKSTEP_Master_Out[1004] = \<const0> ;
  assign LOCKSTEP_Master_Out[1005] = \<const0> ;
  assign LOCKSTEP_Master_Out[1006] = \<const0> ;
  assign LOCKSTEP_Master_Out[1007] = \<const0> ;
  assign LOCKSTEP_Master_Out[1008] = \<const0> ;
  assign LOCKSTEP_Master_Out[1009] = \<const0> ;
  assign LOCKSTEP_Master_Out[1010] = \<const0> ;
  assign LOCKSTEP_Master_Out[1011] = \<const0> ;
  assign LOCKSTEP_Master_Out[1012] = \<const0> ;
  assign LOCKSTEP_Master_Out[1013] = \<const0> ;
  assign LOCKSTEP_Master_Out[1014] = \<const0> ;
  assign LOCKSTEP_Master_Out[1015] = \<const0> ;
  assign LOCKSTEP_Master_Out[1016] = \<const0> ;
  assign LOCKSTEP_Master_Out[1017] = \<const0> ;
  assign LOCKSTEP_Master_Out[1018] = \<const0> ;
  assign LOCKSTEP_Master_Out[1019] = \<const0> ;
  assign LOCKSTEP_Master_Out[1020] = \<const0> ;
  assign LOCKSTEP_Master_Out[1021] = \<const0> ;
  assign LOCKSTEP_Master_Out[1022] = \<const0> ;
  assign LOCKSTEP_Master_Out[1023] = \<const0> ;
  assign LOCKSTEP_Master_Out[1024] = \<const0> ;
  assign LOCKSTEP_Master_Out[1025] = \<const0> ;
  assign LOCKSTEP_Master_Out[1026] = \<const0> ;
  assign LOCKSTEP_Master_Out[1027] = \<const0> ;
  assign LOCKSTEP_Master_Out[1028] = \<const0> ;
  assign LOCKSTEP_Master_Out[1029] = \<const0> ;
  assign LOCKSTEP_Master_Out[1030] = \<const0> ;
  assign LOCKSTEP_Master_Out[1031] = \<const0> ;
  assign LOCKSTEP_Master_Out[1032] = \<const0> ;
  assign LOCKSTEP_Master_Out[1033] = \<const0> ;
  assign LOCKSTEP_Master_Out[1034] = \<const0> ;
  assign LOCKSTEP_Master_Out[1035] = \<const0> ;
  assign LOCKSTEP_Master_Out[1036] = \<const0> ;
  assign LOCKSTEP_Master_Out[1037] = \<const0> ;
  assign LOCKSTEP_Master_Out[1038] = \<const0> ;
  assign LOCKSTEP_Master_Out[1039] = \<const0> ;
  assign LOCKSTEP_Master_Out[1040] = \<const0> ;
  assign LOCKSTEP_Master_Out[1041] = \<const0> ;
  assign LOCKSTEP_Master_Out[1042] = \<const0> ;
  assign LOCKSTEP_Master_Out[1043] = \<const0> ;
  assign LOCKSTEP_Master_Out[1044] = \<const0> ;
  assign LOCKSTEP_Master_Out[1045] = \<const0> ;
  assign LOCKSTEP_Master_Out[1046] = \<const0> ;
  assign LOCKSTEP_Master_Out[1047] = \<const0> ;
  assign LOCKSTEP_Master_Out[1048] = \<const0> ;
  assign LOCKSTEP_Master_Out[1049] = \<const0> ;
  assign LOCKSTEP_Master_Out[1050] = \<const0> ;
  assign LOCKSTEP_Master_Out[1051] = \<const0> ;
  assign LOCKSTEP_Master_Out[1052] = \<const0> ;
  assign LOCKSTEP_Master_Out[1053] = \<const0> ;
  assign LOCKSTEP_Master_Out[1054] = \<const0> ;
  assign LOCKSTEP_Master_Out[1055] = \<const0> ;
  assign LOCKSTEP_Master_Out[1056] = \<const0> ;
  assign LOCKSTEP_Master_Out[1057] = \<const0> ;
  assign LOCKSTEP_Master_Out[1058] = \<const0> ;
  assign LOCKSTEP_Master_Out[1059] = \<const0> ;
  assign LOCKSTEP_Master_Out[1060] = \<const0> ;
  assign LOCKSTEP_Master_Out[1061] = \<const0> ;
  assign LOCKSTEP_Master_Out[1062] = \<const0> ;
  assign LOCKSTEP_Master_Out[1063] = \<const0> ;
  assign LOCKSTEP_Master_Out[1064] = \<const0> ;
  assign LOCKSTEP_Master_Out[1065] = \<const0> ;
  assign LOCKSTEP_Master_Out[1066] = \<const0> ;
  assign LOCKSTEP_Master_Out[1067] = \<const0> ;
  assign LOCKSTEP_Master_Out[1068] = \<const0> ;
  assign LOCKSTEP_Master_Out[1069] = \<const0> ;
  assign LOCKSTEP_Master_Out[1070] = \<const0> ;
  assign LOCKSTEP_Master_Out[1071] = \<const0> ;
  assign LOCKSTEP_Master_Out[1072] = \<const0> ;
  assign LOCKSTEP_Master_Out[1073] = \<const0> ;
  assign LOCKSTEP_Master_Out[1074] = \<const0> ;
  assign LOCKSTEP_Master_Out[1075] = \<const0> ;
  assign LOCKSTEP_Master_Out[1076] = \<const0> ;
  assign LOCKSTEP_Master_Out[1077] = \<const0> ;
  assign LOCKSTEP_Master_Out[1078] = \<const0> ;
  assign LOCKSTEP_Master_Out[1079] = \<const0> ;
  assign LOCKSTEP_Master_Out[1080] = \<const0> ;
  assign LOCKSTEP_Master_Out[1081] = \<const0> ;
  assign LOCKSTEP_Master_Out[1082] = \<const0> ;
  assign LOCKSTEP_Master_Out[1083] = \<const0> ;
  assign LOCKSTEP_Master_Out[1084] = \<const0> ;
  assign LOCKSTEP_Master_Out[1085] = \<const0> ;
  assign LOCKSTEP_Master_Out[1086] = \<const0> ;
  assign LOCKSTEP_Master_Out[1087] = \<const0> ;
  assign LOCKSTEP_Master_Out[1088] = \<const0> ;
  assign LOCKSTEP_Master_Out[1089] = \<const0> ;
  assign LOCKSTEP_Master_Out[1090] = \<const0> ;
  assign LOCKSTEP_Master_Out[1091] = \<const0> ;
  assign LOCKSTEP_Master_Out[1092] = \<const0> ;
  assign LOCKSTEP_Master_Out[1093] = \<const0> ;
  assign LOCKSTEP_Master_Out[1094] = \<const0> ;
  assign LOCKSTEP_Master_Out[1095] = \<const0> ;
  assign LOCKSTEP_Master_Out[1096] = \<const0> ;
  assign LOCKSTEP_Master_Out[1097] = \<const0> ;
  assign LOCKSTEP_Master_Out[1098] = \<const0> ;
  assign LOCKSTEP_Master_Out[1099] = \<const0> ;
  assign LOCKSTEP_Master_Out[1100] = \<const0> ;
  assign LOCKSTEP_Master_Out[1101] = \<const0> ;
  assign LOCKSTEP_Master_Out[1102] = \<const0> ;
  assign LOCKSTEP_Master_Out[1103] = \<const0> ;
  assign LOCKSTEP_Master_Out[1104] = \<const0> ;
  assign LOCKSTEP_Master_Out[1105] = \<const0> ;
  assign LOCKSTEP_Master_Out[1106] = \<const0> ;
  assign LOCKSTEP_Master_Out[1107] = \<const0> ;
  assign LOCKSTEP_Master_Out[1108] = \<const0> ;
  assign LOCKSTEP_Master_Out[1109] = \<const0> ;
  assign LOCKSTEP_Master_Out[1110] = \<const0> ;
  assign LOCKSTEP_Master_Out[1111] = \<const0> ;
  assign LOCKSTEP_Master_Out[1112] = \<const0> ;
  assign LOCKSTEP_Master_Out[1113] = \<const0> ;
  assign LOCKSTEP_Master_Out[1114] = \<const0> ;
  assign LOCKSTEP_Master_Out[1115] = \<const0> ;
  assign LOCKSTEP_Master_Out[1116] = \<const0> ;
  assign LOCKSTEP_Master_Out[1117] = \<const0> ;
  assign LOCKSTEP_Master_Out[1118] = \<const0> ;
  assign LOCKSTEP_Master_Out[1119] = \<const0> ;
  assign LOCKSTEP_Master_Out[1120] = \<const0> ;
  assign LOCKSTEP_Master_Out[1121] = \<const0> ;
  assign LOCKSTEP_Master_Out[1122] = \<const0> ;
  assign LOCKSTEP_Master_Out[1123] = \<const0> ;
  assign LOCKSTEP_Master_Out[1124] = \<const0> ;
  assign LOCKSTEP_Master_Out[1125] = \<const0> ;
  assign LOCKSTEP_Master_Out[1126] = \<const0> ;
  assign LOCKSTEP_Master_Out[1127] = \<const0> ;
  assign LOCKSTEP_Master_Out[1128] = \<const0> ;
  assign LOCKSTEP_Master_Out[1129] = \<const0> ;
  assign LOCKSTEP_Master_Out[1130] = \<const0> ;
  assign LOCKSTEP_Master_Out[1131] = \<const0> ;
  assign LOCKSTEP_Master_Out[1132] = \<const0> ;
  assign LOCKSTEP_Master_Out[1133] = \<const0> ;
  assign LOCKSTEP_Master_Out[1134] = \<const0> ;
  assign LOCKSTEP_Master_Out[1135] = \<const0> ;
  assign LOCKSTEP_Master_Out[1136] = \<const0> ;
  assign LOCKSTEP_Master_Out[1137] = \<const0> ;
  assign LOCKSTEP_Master_Out[1138] = \<const0> ;
  assign LOCKSTEP_Master_Out[1139] = \<const0> ;
  assign LOCKSTEP_Master_Out[1140] = \<const0> ;
  assign LOCKSTEP_Master_Out[1141] = \<const0> ;
  assign LOCKSTEP_Master_Out[1142] = \<const0> ;
  assign LOCKSTEP_Master_Out[1143] = \<const0> ;
  assign LOCKSTEP_Master_Out[1144] = \<const0> ;
  assign LOCKSTEP_Master_Out[1145] = \<const0> ;
  assign LOCKSTEP_Master_Out[1146] = \<const0> ;
  assign LOCKSTEP_Master_Out[1147] = \<const0> ;
  assign LOCKSTEP_Master_Out[1148] = \<const0> ;
  assign LOCKSTEP_Master_Out[1149] = \<const0> ;
  assign LOCKSTEP_Master_Out[1150] = \<const0> ;
  assign LOCKSTEP_Master_Out[1151] = \<const0> ;
  assign LOCKSTEP_Master_Out[1152] = \<const0> ;
  assign LOCKSTEP_Master_Out[1153] = \<const0> ;
  assign LOCKSTEP_Master_Out[1154] = \<const0> ;
  assign LOCKSTEP_Master_Out[1155] = \<const0> ;
  assign LOCKSTEP_Master_Out[1156] = \<const0> ;
  assign LOCKSTEP_Master_Out[1157] = \<const0> ;
  assign LOCKSTEP_Master_Out[1158] = \<const0> ;
  assign LOCKSTEP_Master_Out[1159] = \<const0> ;
  assign LOCKSTEP_Master_Out[1160] = \<const0> ;
  assign LOCKSTEP_Master_Out[1161] = \<const0> ;
  assign LOCKSTEP_Master_Out[1162] = \<const0> ;
  assign LOCKSTEP_Master_Out[1163] = \<const0> ;
  assign LOCKSTEP_Master_Out[1164] = \<const0> ;
  assign LOCKSTEP_Master_Out[1165] = \<const0> ;
  assign LOCKSTEP_Master_Out[1166] = \<const0> ;
  assign LOCKSTEP_Master_Out[1167] = \<const0> ;
  assign LOCKSTEP_Master_Out[1168] = \<const0> ;
  assign LOCKSTEP_Master_Out[1169] = \<const0> ;
  assign LOCKSTEP_Master_Out[1170] = \<const0> ;
  assign LOCKSTEP_Master_Out[1171] = \<const0> ;
  assign LOCKSTEP_Master_Out[1172] = \<const0> ;
  assign LOCKSTEP_Master_Out[1173] = \<const0> ;
  assign LOCKSTEP_Master_Out[1174] = \<const0> ;
  assign LOCKSTEP_Master_Out[1175] = \<const0> ;
  assign LOCKSTEP_Master_Out[1176] = \<const0> ;
  assign LOCKSTEP_Master_Out[1177] = \<const0> ;
  assign LOCKSTEP_Master_Out[1178] = \<const0> ;
  assign LOCKSTEP_Master_Out[1179] = \<const0> ;
  assign LOCKSTEP_Master_Out[1180] = \<const0> ;
  assign LOCKSTEP_Master_Out[1181] = \<const0> ;
  assign LOCKSTEP_Master_Out[1182] = \<const0> ;
  assign LOCKSTEP_Master_Out[1183] = \<const0> ;
  assign LOCKSTEP_Master_Out[1184] = \<const0> ;
  assign LOCKSTEP_Master_Out[1185] = \<const0> ;
  assign LOCKSTEP_Master_Out[1186] = \<const0> ;
  assign LOCKSTEP_Master_Out[1187] = \<const0> ;
  assign LOCKSTEP_Master_Out[1188] = \<const0> ;
  assign LOCKSTEP_Master_Out[1189] = \<const0> ;
  assign LOCKSTEP_Master_Out[1190] = \<const0> ;
  assign LOCKSTEP_Master_Out[1191] = \<const0> ;
  assign LOCKSTEP_Master_Out[1192] = \<const0> ;
  assign LOCKSTEP_Master_Out[1193] = \<const0> ;
  assign LOCKSTEP_Master_Out[1194] = \<const0> ;
  assign LOCKSTEP_Master_Out[1195] = \<const0> ;
  assign LOCKSTEP_Master_Out[1196] = \<const0> ;
  assign LOCKSTEP_Master_Out[1197] = \<const0> ;
  assign LOCKSTEP_Master_Out[1198] = \<const0> ;
  assign LOCKSTEP_Master_Out[1199] = \<const0> ;
  assign LOCKSTEP_Master_Out[1200] = \<const0> ;
  assign LOCKSTEP_Master_Out[1201] = \<const0> ;
  assign LOCKSTEP_Master_Out[1202] = \<const0> ;
  assign LOCKSTEP_Master_Out[1203] = \<const0> ;
  assign LOCKSTEP_Master_Out[1204] = \<const0> ;
  assign LOCKSTEP_Master_Out[1205] = \<const0> ;
  assign LOCKSTEP_Master_Out[1206] = \<const0> ;
  assign LOCKSTEP_Master_Out[1207] = \<const0> ;
  assign LOCKSTEP_Master_Out[1208] = \<const0> ;
  assign LOCKSTEP_Master_Out[1209] = \<const0> ;
  assign LOCKSTEP_Master_Out[1210] = \<const0> ;
  assign LOCKSTEP_Master_Out[1211] = \<const0> ;
  assign LOCKSTEP_Master_Out[1212] = \<const0> ;
  assign LOCKSTEP_Master_Out[1213] = \<const0> ;
  assign LOCKSTEP_Master_Out[1214] = \<const0> ;
  assign LOCKSTEP_Master_Out[1215] = \<const0> ;
  assign LOCKSTEP_Master_Out[1216] = \<const0> ;
  assign LOCKSTEP_Master_Out[1217] = \<const0> ;
  assign LOCKSTEP_Master_Out[1218] = \<const0> ;
  assign LOCKSTEP_Master_Out[1219] = \<const0> ;
  assign LOCKSTEP_Master_Out[1220] = \<const0> ;
  assign LOCKSTEP_Master_Out[1221] = \<const0> ;
  assign LOCKSTEP_Master_Out[1222] = \<const0> ;
  assign LOCKSTEP_Master_Out[1223] = \<const0> ;
  assign LOCKSTEP_Master_Out[1224] = \<const0> ;
  assign LOCKSTEP_Master_Out[1225] = \<const0> ;
  assign LOCKSTEP_Master_Out[1226] = \<const0> ;
  assign LOCKSTEP_Master_Out[1227] = \<const0> ;
  assign LOCKSTEP_Master_Out[1228] = \<const0> ;
  assign LOCKSTEP_Master_Out[1229] = \<const0> ;
  assign LOCKSTEP_Master_Out[1230] = \<const0> ;
  assign LOCKSTEP_Master_Out[1231] = \<const0> ;
  assign LOCKSTEP_Master_Out[1232] = \<const0> ;
  assign LOCKSTEP_Master_Out[1233] = \<const0> ;
  assign LOCKSTEP_Master_Out[1234] = \<const0> ;
  assign LOCKSTEP_Master_Out[1235] = \<const0> ;
  assign LOCKSTEP_Master_Out[1236] = \<const0> ;
  assign LOCKSTEP_Master_Out[1237] = \<const0> ;
  assign LOCKSTEP_Master_Out[1238] = \<const0> ;
  assign LOCKSTEP_Master_Out[1239] = \<const0> ;
  assign LOCKSTEP_Master_Out[1240] = \<const0> ;
  assign LOCKSTEP_Master_Out[1241] = \<const0> ;
  assign LOCKSTEP_Master_Out[1242] = \<const0> ;
  assign LOCKSTEP_Master_Out[1243] = \<const0> ;
  assign LOCKSTEP_Master_Out[1244] = \<const0> ;
  assign LOCKSTEP_Master_Out[1245] = \<const0> ;
  assign LOCKSTEP_Master_Out[1246] = \<const0> ;
  assign LOCKSTEP_Master_Out[1247] = \<const0> ;
  assign LOCKSTEP_Master_Out[1248] = \<const0> ;
  assign LOCKSTEP_Master_Out[1249] = \<const0> ;
  assign LOCKSTEP_Master_Out[1250] = \<const0> ;
  assign LOCKSTEP_Master_Out[1251] = \<const0> ;
  assign LOCKSTEP_Master_Out[1252] = \<const0> ;
  assign LOCKSTEP_Master_Out[1253] = \<const0> ;
  assign LOCKSTEP_Master_Out[1254] = \<const0> ;
  assign LOCKSTEP_Master_Out[1255] = \<const0> ;
  assign LOCKSTEP_Master_Out[1256] = \<const0> ;
  assign LOCKSTEP_Master_Out[1257] = \<const0> ;
  assign LOCKSTEP_Master_Out[1258] = \<const0> ;
  assign LOCKSTEP_Master_Out[1259] = \<const0> ;
  assign LOCKSTEP_Master_Out[1260] = \<const0> ;
  assign LOCKSTEP_Master_Out[1261] = \<const0> ;
  assign LOCKSTEP_Master_Out[1262] = \<const0> ;
  assign LOCKSTEP_Master_Out[1263] = \<const0> ;
  assign LOCKSTEP_Master_Out[1264] = \<const0> ;
  assign LOCKSTEP_Master_Out[1265] = \<const0> ;
  assign LOCKSTEP_Master_Out[1266] = \<const0> ;
  assign LOCKSTEP_Master_Out[1267] = \<const0> ;
  assign LOCKSTEP_Master_Out[1268] = \<const0> ;
  assign LOCKSTEP_Master_Out[1269] = \<const0> ;
  assign LOCKSTEP_Master_Out[1270] = \<const0> ;
  assign LOCKSTEP_Master_Out[1271] = \<const0> ;
  assign LOCKSTEP_Master_Out[1272] = \<const0> ;
  assign LOCKSTEP_Master_Out[1273] = \<const0> ;
  assign LOCKSTEP_Master_Out[1274] = \<const0> ;
  assign LOCKSTEP_Master_Out[1275] = \<const0> ;
  assign LOCKSTEP_Master_Out[1276] = \<const0> ;
  assign LOCKSTEP_Master_Out[1277] = \<const0> ;
  assign LOCKSTEP_Master_Out[1278] = \<const0> ;
  assign LOCKSTEP_Master_Out[1279] = \<const0> ;
  assign LOCKSTEP_Master_Out[1280] = \<const0> ;
  assign LOCKSTEP_Master_Out[1281] = \<const0> ;
  assign LOCKSTEP_Master_Out[1282] = \<const0> ;
  assign LOCKSTEP_Master_Out[1283] = \<const0> ;
  assign LOCKSTEP_Master_Out[1284] = \<const0> ;
  assign LOCKSTEP_Master_Out[1285] = \<const0> ;
  assign LOCKSTEP_Master_Out[1286] = \<const0> ;
  assign LOCKSTEP_Master_Out[1287] = \<const0> ;
  assign LOCKSTEP_Master_Out[1288] = \<const0> ;
  assign LOCKSTEP_Master_Out[1289] = \<const0> ;
  assign LOCKSTEP_Master_Out[1290] = \<const0> ;
  assign LOCKSTEP_Master_Out[1291] = \<const0> ;
  assign LOCKSTEP_Master_Out[1292] = \<const0> ;
  assign LOCKSTEP_Master_Out[1293] = \<const0> ;
  assign LOCKSTEP_Master_Out[1294] = \<const0> ;
  assign LOCKSTEP_Master_Out[1295] = \<const0> ;
  assign LOCKSTEP_Master_Out[1296] = \<const0> ;
  assign LOCKSTEP_Master_Out[1297] = \<const0> ;
  assign LOCKSTEP_Master_Out[1298] = \<const0> ;
  assign LOCKSTEP_Master_Out[1299] = \<const0> ;
  assign LOCKSTEP_Master_Out[1300] = \<const0> ;
  assign LOCKSTEP_Master_Out[1301] = \<const0> ;
  assign LOCKSTEP_Master_Out[1302] = \<const0> ;
  assign LOCKSTEP_Master_Out[1303] = \<const0> ;
  assign LOCKSTEP_Master_Out[1304] = \<const0> ;
  assign LOCKSTEP_Master_Out[1305] = \<const0> ;
  assign LOCKSTEP_Master_Out[1306] = \<const0> ;
  assign LOCKSTEP_Master_Out[1307] = \<const0> ;
  assign LOCKSTEP_Master_Out[1308] = \<const0> ;
  assign LOCKSTEP_Master_Out[1309] = \<const0> ;
  assign LOCKSTEP_Master_Out[1310] = \<const0> ;
  assign LOCKSTEP_Master_Out[1311] = \<const0> ;
  assign LOCKSTEP_Master_Out[1312] = \<const0> ;
  assign LOCKSTEP_Master_Out[1313] = \<const0> ;
  assign LOCKSTEP_Master_Out[1314] = \<const0> ;
  assign LOCKSTEP_Master_Out[1315] = \<const0> ;
  assign LOCKSTEP_Master_Out[1316] = \<const0> ;
  assign LOCKSTEP_Master_Out[1317] = \<const0> ;
  assign LOCKSTEP_Master_Out[1318] = \<const0> ;
  assign LOCKSTEP_Master_Out[1319] = \<const0> ;
  assign LOCKSTEP_Master_Out[1320] = \<const0> ;
  assign LOCKSTEP_Master_Out[1321] = \<const0> ;
  assign LOCKSTEP_Master_Out[1322] = \<const0> ;
  assign LOCKSTEP_Master_Out[1323] = \<const0> ;
  assign LOCKSTEP_Master_Out[1324] = \<const0> ;
  assign LOCKSTEP_Master_Out[1325] = \<const0> ;
  assign LOCKSTEP_Master_Out[1326] = \<const0> ;
  assign LOCKSTEP_Master_Out[1327] = \<const0> ;
  assign LOCKSTEP_Master_Out[1328] = \<const0> ;
  assign LOCKSTEP_Master_Out[1329] = \<const0> ;
  assign LOCKSTEP_Master_Out[1330] = \<const0> ;
  assign LOCKSTEP_Master_Out[1331] = \<const0> ;
  assign LOCKSTEP_Master_Out[1332] = \<const0> ;
  assign LOCKSTEP_Master_Out[1333] = \<const0> ;
  assign LOCKSTEP_Master_Out[1334] = \<const0> ;
  assign LOCKSTEP_Master_Out[1335] = \<const0> ;
  assign LOCKSTEP_Master_Out[1336] = \<const0> ;
  assign LOCKSTEP_Master_Out[1337] = \<const0> ;
  assign LOCKSTEP_Master_Out[1338] = \<const0> ;
  assign LOCKSTEP_Master_Out[1339] = \<const0> ;
  assign LOCKSTEP_Master_Out[1340] = \<const0> ;
  assign LOCKSTEP_Master_Out[1341] = \<const0> ;
  assign LOCKSTEP_Master_Out[1342] = \<const0> ;
  assign LOCKSTEP_Master_Out[1343] = \<const0> ;
  assign LOCKSTEP_Master_Out[1344] = \<const0> ;
  assign LOCKSTEP_Master_Out[1345] = \<const0> ;
  assign LOCKSTEP_Master_Out[1346] = \<const0> ;
  assign LOCKSTEP_Master_Out[1347] = \<const0> ;
  assign LOCKSTEP_Master_Out[1348] = \<const0> ;
  assign LOCKSTEP_Master_Out[1349] = \<const0> ;
  assign LOCKSTEP_Master_Out[1350] = \<const0> ;
  assign LOCKSTEP_Master_Out[1351] = \<const0> ;
  assign LOCKSTEP_Master_Out[1352] = \<const0> ;
  assign LOCKSTEP_Master_Out[1353] = \<const0> ;
  assign LOCKSTEP_Master_Out[1354] = \<const0> ;
  assign LOCKSTEP_Master_Out[1355] = \<const0> ;
  assign LOCKSTEP_Master_Out[1356] = \<const0> ;
  assign LOCKSTEP_Master_Out[1357] = \<const0> ;
  assign LOCKSTEP_Master_Out[1358] = \<const0> ;
  assign LOCKSTEP_Master_Out[1359] = \<const0> ;
  assign LOCKSTEP_Master_Out[1360] = \<const0> ;
  assign LOCKSTEP_Master_Out[1361] = \<const0> ;
  assign LOCKSTEP_Master_Out[1362] = \<const0> ;
  assign LOCKSTEP_Master_Out[1363] = \<const0> ;
  assign LOCKSTEP_Master_Out[1364] = \<const0> ;
  assign LOCKSTEP_Master_Out[1365] = \<const0> ;
  assign LOCKSTEP_Master_Out[1366] = \<const0> ;
  assign LOCKSTEP_Master_Out[1367] = \<const0> ;
  assign LOCKSTEP_Master_Out[1368] = \<const0> ;
  assign LOCKSTEP_Master_Out[1369] = \<const0> ;
  assign LOCKSTEP_Master_Out[1370] = \<const0> ;
  assign LOCKSTEP_Master_Out[1371] = \<const0> ;
  assign LOCKSTEP_Master_Out[1372] = \<const0> ;
  assign LOCKSTEP_Master_Out[1373] = \<const0> ;
  assign LOCKSTEP_Master_Out[1374] = \<const0> ;
  assign LOCKSTEP_Master_Out[1375] = \<const0> ;
  assign LOCKSTEP_Master_Out[1376] = \<const0> ;
  assign LOCKSTEP_Master_Out[1377] = \<const0> ;
  assign LOCKSTEP_Master_Out[1378] = \<const0> ;
  assign LOCKSTEP_Master_Out[1379] = \<const0> ;
  assign LOCKSTEP_Master_Out[1380] = \<const0> ;
  assign LOCKSTEP_Master_Out[1381] = \<const0> ;
  assign LOCKSTEP_Master_Out[1382] = \<const0> ;
  assign LOCKSTEP_Master_Out[1383] = \<const0> ;
  assign LOCKSTEP_Master_Out[1384] = \<const0> ;
  assign LOCKSTEP_Master_Out[1385] = \<const0> ;
  assign LOCKSTEP_Master_Out[1386] = \<const0> ;
  assign LOCKSTEP_Master_Out[1387] = \<const0> ;
  assign LOCKSTEP_Master_Out[1388] = \<const0> ;
  assign LOCKSTEP_Master_Out[1389] = \<const0> ;
  assign LOCKSTEP_Master_Out[1390] = \<const0> ;
  assign LOCKSTEP_Master_Out[1391] = \<const0> ;
  assign LOCKSTEP_Master_Out[1392] = \<const0> ;
  assign LOCKSTEP_Master_Out[1393] = \<const0> ;
  assign LOCKSTEP_Master_Out[1394] = \<const0> ;
  assign LOCKSTEP_Master_Out[1395] = \<const0> ;
  assign LOCKSTEP_Master_Out[1396] = \<const0> ;
  assign LOCKSTEP_Master_Out[1397] = \<const0> ;
  assign LOCKSTEP_Master_Out[1398] = \<const0> ;
  assign LOCKSTEP_Master_Out[1399] = \<const0> ;
  assign LOCKSTEP_Master_Out[1400] = \<const0> ;
  assign LOCKSTEP_Master_Out[1401] = \<const0> ;
  assign LOCKSTEP_Master_Out[1402] = \<const0> ;
  assign LOCKSTEP_Master_Out[1403] = \<const0> ;
  assign LOCKSTEP_Master_Out[1404] = \<const0> ;
  assign LOCKSTEP_Master_Out[1405] = \<const0> ;
  assign LOCKSTEP_Master_Out[1406] = \<const0> ;
  assign LOCKSTEP_Master_Out[1407] = \<const0> ;
  assign LOCKSTEP_Master_Out[1408] = \<const0> ;
  assign LOCKSTEP_Master_Out[1409] = \<const0> ;
  assign LOCKSTEP_Master_Out[1410] = \<const0> ;
  assign LOCKSTEP_Master_Out[1411] = \<const0> ;
  assign LOCKSTEP_Master_Out[1412] = \<const0> ;
  assign LOCKSTEP_Master_Out[1413] = \<const0> ;
  assign LOCKSTEP_Master_Out[1414] = \<const0> ;
  assign LOCKSTEP_Master_Out[1415] = \<const0> ;
  assign LOCKSTEP_Master_Out[1416] = \<const0> ;
  assign LOCKSTEP_Master_Out[1417] = \<const0> ;
  assign LOCKSTEP_Master_Out[1418] = \<const0> ;
  assign LOCKSTEP_Master_Out[1419] = \<const0> ;
  assign LOCKSTEP_Master_Out[1420] = \<const0> ;
  assign LOCKSTEP_Master_Out[1421] = \<const0> ;
  assign LOCKSTEP_Master_Out[1422] = \<const0> ;
  assign LOCKSTEP_Master_Out[1423] = \<const0> ;
  assign LOCKSTEP_Master_Out[1424] = \<const0> ;
  assign LOCKSTEP_Master_Out[1425] = \<const0> ;
  assign LOCKSTEP_Master_Out[1426] = \<const0> ;
  assign LOCKSTEP_Master_Out[1427] = \<const0> ;
  assign LOCKSTEP_Master_Out[1428] = \<const0> ;
  assign LOCKSTEP_Master_Out[1429] = \<const0> ;
  assign LOCKSTEP_Master_Out[1430] = \<const0> ;
  assign LOCKSTEP_Master_Out[1431] = \<const0> ;
  assign LOCKSTEP_Master_Out[1432] = \<const0> ;
  assign LOCKSTEP_Master_Out[1433] = \<const0> ;
  assign LOCKSTEP_Master_Out[1434] = \<const0> ;
  assign LOCKSTEP_Master_Out[1435] = \<const0> ;
  assign LOCKSTEP_Master_Out[1436] = \<const0> ;
  assign LOCKSTEP_Master_Out[1437] = \<const0> ;
  assign LOCKSTEP_Master_Out[1438] = \<const0> ;
  assign LOCKSTEP_Master_Out[1439] = \<const0> ;
  assign LOCKSTEP_Master_Out[1440] = \<const0> ;
  assign LOCKSTEP_Master_Out[1441] = \<const0> ;
  assign LOCKSTEP_Master_Out[1442] = \<const0> ;
  assign LOCKSTEP_Master_Out[1443] = \<const0> ;
  assign LOCKSTEP_Master_Out[1444] = \<const0> ;
  assign LOCKSTEP_Master_Out[1445] = \<const0> ;
  assign LOCKSTEP_Master_Out[1446] = \<const0> ;
  assign LOCKSTEP_Master_Out[1447] = \<const0> ;
  assign LOCKSTEP_Master_Out[1448] = \<const0> ;
  assign LOCKSTEP_Master_Out[1449] = \<const0> ;
  assign LOCKSTEP_Master_Out[1450] = \<const0> ;
  assign LOCKSTEP_Master_Out[1451] = \<const0> ;
  assign LOCKSTEP_Master_Out[1452] = \<const0> ;
  assign LOCKSTEP_Master_Out[1453] = \<const0> ;
  assign LOCKSTEP_Master_Out[1454] = \<const0> ;
  assign LOCKSTEP_Master_Out[1455] = \<const0> ;
  assign LOCKSTEP_Master_Out[1456] = \<const0> ;
  assign LOCKSTEP_Master_Out[1457] = \<const0> ;
  assign LOCKSTEP_Master_Out[1458] = \<const0> ;
  assign LOCKSTEP_Master_Out[1459] = \<const0> ;
  assign LOCKSTEP_Master_Out[1460] = \<const0> ;
  assign LOCKSTEP_Master_Out[1461] = \<const0> ;
  assign LOCKSTEP_Master_Out[1462] = \<const0> ;
  assign LOCKSTEP_Master_Out[1463] = \<const0> ;
  assign LOCKSTEP_Master_Out[1464] = \<const0> ;
  assign LOCKSTEP_Master_Out[1465] = \<const0> ;
  assign LOCKSTEP_Master_Out[1466] = \<const0> ;
  assign LOCKSTEP_Master_Out[1467] = \<const0> ;
  assign LOCKSTEP_Master_Out[1468] = \<const0> ;
  assign LOCKSTEP_Master_Out[1469] = \<const0> ;
  assign LOCKSTEP_Master_Out[1470] = \<const0> ;
  assign LOCKSTEP_Master_Out[1471] = \<const0> ;
  assign LOCKSTEP_Master_Out[1472] = \<const0> ;
  assign LOCKSTEP_Master_Out[1473] = \<const0> ;
  assign LOCKSTEP_Master_Out[1474] = \<const0> ;
  assign LOCKSTEP_Master_Out[1475] = \<const0> ;
  assign LOCKSTEP_Master_Out[1476] = \<const0> ;
  assign LOCKSTEP_Master_Out[1477] = \<const0> ;
  assign LOCKSTEP_Master_Out[1478] = \<const0> ;
  assign LOCKSTEP_Master_Out[1479] = \<const0> ;
  assign LOCKSTEP_Master_Out[1480] = \<const0> ;
  assign LOCKSTEP_Master_Out[1481] = \<const0> ;
  assign LOCKSTEP_Master_Out[1482] = \<const0> ;
  assign LOCKSTEP_Master_Out[1483] = \<const0> ;
  assign LOCKSTEP_Master_Out[1484] = \<const0> ;
  assign LOCKSTEP_Master_Out[1485] = \<const0> ;
  assign LOCKSTEP_Master_Out[1486] = \<const0> ;
  assign LOCKSTEP_Master_Out[1487] = \<const0> ;
  assign LOCKSTEP_Master_Out[1488] = \<const0> ;
  assign LOCKSTEP_Master_Out[1489] = \<const0> ;
  assign LOCKSTEP_Master_Out[1490] = \<const0> ;
  assign LOCKSTEP_Master_Out[1491] = \<const0> ;
  assign LOCKSTEP_Master_Out[1492] = \<const0> ;
  assign LOCKSTEP_Master_Out[1493] = \<const0> ;
  assign LOCKSTEP_Master_Out[1494] = \<const0> ;
  assign LOCKSTEP_Master_Out[1495] = \<const0> ;
  assign LOCKSTEP_Master_Out[1496] = \<const0> ;
  assign LOCKSTEP_Master_Out[1497] = \<const0> ;
  assign LOCKSTEP_Master_Out[1498] = \<const0> ;
  assign LOCKSTEP_Master_Out[1499] = \<const0> ;
  assign LOCKSTEP_Master_Out[1500] = \<const0> ;
  assign LOCKSTEP_Master_Out[1501] = \<const0> ;
  assign LOCKSTEP_Master_Out[1502] = \<const0> ;
  assign LOCKSTEP_Master_Out[1503] = \<const0> ;
  assign LOCKSTEP_Master_Out[1504] = \<const0> ;
  assign LOCKSTEP_Master_Out[1505] = \<const0> ;
  assign LOCKSTEP_Master_Out[1506] = \<const0> ;
  assign LOCKSTEP_Master_Out[1507] = \<const0> ;
  assign LOCKSTEP_Master_Out[1508] = \<const0> ;
  assign LOCKSTEP_Master_Out[1509] = \<const0> ;
  assign LOCKSTEP_Master_Out[1510] = \<const0> ;
  assign LOCKSTEP_Master_Out[1511] = \<const0> ;
  assign LOCKSTEP_Master_Out[1512] = \<const0> ;
  assign LOCKSTEP_Master_Out[1513] = \<const0> ;
  assign LOCKSTEP_Master_Out[1514] = \<const0> ;
  assign LOCKSTEP_Master_Out[1515] = \<const0> ;
  assign LOCKSTEP_Master_Out[1516] = \<const0> ;
  assign LOCKSTEP_Master_Out[1517] = \<const0> ;
  assign LOCKSTEP_Master_Out[1518] = \<const0> ;
  assign LOCKSTEP_Master_Out[1519] = \<const0> ;
  assign LOCKSTEP_Master_Out[1520] = \<const0> ;
  assign LOCKSTEP_Master_Out[1521] = \<const0> ;
  assign LOCKSTEP_Master_Out[1522] = \<const0> ;
  assign LOCKSTEP_Master_Out[1523] = \<const0> ;
  assign LOCKSTEP_Master_Out[1524] = \<const0> ;
  assign LOCKSTEP_Master_Out[1525] = \<const0> ;
  assign LOCKSTEP_Master_Out[1526] = \<const0> ;
  assign LOCKSTEP_Master_Out[1527] = \<const0> ;
  assign LOCKSTEP_Master_Out[1528] = \<const0> ;
  assign LOCKSTEP_Master_Out[1529] = \<const0> ;
  assign LOCKSTEP_Master_Out[1530] = \<const0> ;
  assign LOCKSTEP_Master_Out[1531] = \<const0> ;
  assign LOCKSTEP_Master_Out[1532] = \<const0> ;
  assign LOCKSTEP_Master_Out[1533] = \<const0> ;
  assign LOCKSTEP_Master_Out[1534] = \<const0> ;
  assign LOCKSTEP_Master_Out[1535] = \<const0> ;
  assign LOCKSTEP_Master_Out[1536] = \<const0> ;
  assign LOCKSTEP_Master_Out[1537] = \<const0> ;
  assign LOCKSTEP_Master_Out[1538] = \<const0> ;
  assign LOCKSTEP_Master_Out[1539] = \<const0> ;
  assign LOCKSTEP_Master_Out[1540] = \<const0> ;
  assign LOCKSTEP_Master_Out[1541] = \<const0> ;
  assign LOCKSTEP_Master_Out[1542] = \<const0> ;
  assign LOCKSTEP_Master_Out[1543] = \<const0> ;
  assign LOCKSTEP_Master_Out[1544] = \<const0> ;
  assign LOCKSTEP_Master_Out[1545] = \<const0> ;
  assign LOCKSTEP_Master_Out[1546] = \<const0> ;
  assign LOCKSTEP_Master_Out[1547] = \<const0> ;
  assign LOCKSTEP_Master_Out[1548] = \<const0> ;
  assign LOCKSTEP_Master_Out[1549] = \<const0> ;
  assign LOCKSTEP_Master_Out[1550] = \<const0> ;
  assign LOCKSTEP_Master_Out[1551] = \<const0> ;
  assign LOCKSTEP_Master_Out[1552] = \<const0> ;
  assign LOCKSTEP_Master_Out[1553] = \<const0> ;
  assign LOCKSTEP_Master_Out[1554] = \<const0> ;
  assign LOCKSTEP_Master_Out[1555] = \<const0> ;
  assign LOCKSTEP_Master_Out[1556] = \<const0> ;
  assign LOCKSTEP_Master_Out[1557] = \<const0> ;
  assign LOCKSTEP_Master_Out[1558] = \<const0> ;
  assign LOCKSTEP_Master_Out[1559] = \<const0> ;
  assign LOCKSTEP_Master_Out[1560] = \<const0> ;
  assign LOCKSTEP_Master_Out[1561] = \<const0> ;
  assign LOCKSTEP_Master_Out[1562] = \<const0> ;
  assign LOCKSTEP_Master_Out[1563] = \<const0> ;
  assign LOCKSTEP_Master_Out[1564] = \<const0> ;
  assign LOCKSTEP_Master_Out[1565] = \<const0> ;
  assign LOCKSTEP_Master_Out[1566] = \<const0> ;
  assign LOCKSTEP_Master_Out[1567] = \<const0> ;
  assign LOCKSTEP_Master_Out[1568] = \<const0> ;
  assign LOCKSTEP_Master_Out[1569] = \<const0> ;
  assign LOCKSTEP_Master_Out[1570] = \<const0> ;
  assign LOCKSTEP_Master_Out[1571] = \<const0> ;
  assign LOCKSTEP_Master_Out[1572] = \<const0> ;
  assign LOCKSTEP_Master_Out[1573] = \<const0> ;
  assign LOCKSTEP_Master_Out[1574] = \<const0> ;
  assign LOCKSTEP_Master_Out[1575] = \<const0> ;
  assign LOCKSTEP_Master_Out[1576] = \<const0> ;
  assign LOCKSTEP_Master_Out[1577] = \<const0> ;
  assign LOCKSTEP_Master_Out[1578] = \<const0> ;
  assign LOCKSTEP_Master_Out[1579] = \<const0> ;
  assign LOCKSTEP_Master_Out[1580] = \<const0> ;
  assign LOCKSTEP_Master_Out[1581] = \<const0> ;
  assign LOCKSTEP_Master_Out[1582] = \<const0> ;
  assign LOCKSTEP_Master_Out[1583] = \<const0> ;
  assign LOCKSTEP_Master_Out[1584] = \<const0> ;
  assign LOCKSTEP_Master_Out[1585] = \<const0> ;
  assign LOCKSTEP_Master_Out[1586] = \<const0> ;
  assign LOCKSTEP_Master_Out[1587] = \<const0> ;
  assign LOCKSTEP_Master_Out[1588] = \<const0> ;
  assign LOCKSTEP_Master_Out[1589] = \<const0> ;
  assign LOCKSTEP_Master_Out[1590] = \<const0> ;
  assign LOCKSTEP_Master_Out[1591] = \<const0> ;
  assign LOCKSTEP_Master_Out[1592] = \<const0> ;
  assign LOCKSTEP_Master_Out[1593] = \<const0> ;
  assign LOCKSTEP_Master_Out[1594] = \<const0> ;
  assign LOCKSTEP_Master_Out[1595] = \<const0> ;
  assign LOCKSTEP_Master_Out[1596] = \<const0> ;
  assign LOCKSTEP_Master_Out[1597] = \<const0> ;
  assign LOCKSTEP_Master_Out[1598] = \<const0> ;
  assign LOCKSTEP_Master_Out[1599] = \<const0> ;
  assign LOCKSTEP_Master_Out[1600] = \<const0> ;
  assign LOCKSTEP_Master_Out[1601] = \<const0> ;
  assign LOCKSTEP_Master_Out[1602] = \<const0> ;
  assign LOCKSTEP_Master_Out[1603] = \<const0> ;
  assign LOCKSTEP_Master_Out[1604] = \<const0> ;
  assign LOCKSTEP_Master_Out[1605] = \<const0> ;
  assign LOCKSTEP_Master_Out[1606] = \<const0> ;
  assign LOCKSTEP_Master_Out[1607] = \<const0> ;
  assign LOCKSTEP_Master_Out[1608] = \<const0> ;
  assign LOCKSTEP_Master_Out[1609] = \<const0> ;
  assign LOCKSTEP_Master_Out[1610] = \<const0> ;
  assign LOCKSTEP_Master_Out[1611] = \<const0> ;
  assign LOCKSTEP_Master_Out[1612] = \<const0> ;
  assign LOCKSTEP_Master_Out[1613] = \<const0> ;
  assign LOCKSTEP_Master_Out[1614] = \<const0> ;
  assign LOCKSTEP_Master_Out[1615] = \<const0> ;
  assign LOCKSTEP_Master_Out[1616] = \<const0> ;
  assign LOCKSTEP_Master_Out[1617] = \<const0> ;
  assign LOCKSTEP_Master_Out[1618] = \<const0> ;
  assign LOCKSTEP_Master_Out[1619] = \<const0> ;
  assign LOCKSTEP_Master_Out[1620] = \<const0> ;
  assign LOCKSTEP_Master_Out[1621] = \<const0> ;
  assign LOCKSTEP_Master_Out[1622] = \<const0> ;
  assign LOCKSTEP_Master_Out[1623] = \<const0> ;
  assign LOCKSTEP_Master_Out[1624] = \<const0> ;
  assign LOCKSTEP_Master_Out[1625] = \<const0> ;
  assign LOCKSTEP_Master_Out[1626] = \<const0> ;
  assign LOCKSTEP_Master_Out[1627] = \<const0> ;
  assign LOCKSTEP_Master_Out[1628] = \<const0> ;
  assign LOCKSTEP_Master_Out[1629] = \<const0> ;
  assign LOCKSTEP_Master_Out[1630] = \<const0> ;
  assign LOCKSTEP_Master_Out[1631] = \<const0> ;
  assign LOCKSTEP_Master_Out[1632] = \<const0> ;
  assign LOCKSTEP_Master_Out[1633] = \<const0> ;
  assign LOCKSTEP_Master_Out[1634] = \<const0> ;
  assign LOCKSTEP_Master_Out[1635] = \<const0> ;
  assign LOCKSTEP_Master_Out[1636] = \<const0> ;
  assign LOCKSTEP_Master_Out[1637] = \<const0> ;
  assign LOCKSTEP_Master_Out[1638] = \<const0> ;
  assign LOCKSTEP_Master_Out[1639] = \<const0> ;
  assign LOCKSTEP_Master_Out[1640] = \<const0> ;
  assign LOCKSTEP_Master_Out[1641] = \<const0> ;
  assign LOCKSTEP_Master_Out[1642] = \<const0> ;
  assign LOCKSTEP_Master_Out[1643] = \<const0> ;
  assign LOCKSTEP_Master_Out[1644] = \<const0> ;
  assign LOCKSTEP_Master_Out[1645] = \<const0> ;
  assign LOCKSTEP_Master_Out[1646] = \<const0> ;
  assign LOCKSTEP_Master_Out[1647] = \<const0> ;
  assign LOCKSTEP_Master_Out[1648] = \<const0> ;
  assign LOCKSTEP_Master_Out[1649] = \<const0> ;
  assign LOCKSTEP_Master_Out[1650] = \<const0> ;
  assign LOCKSTEP_Master_Out[1651] = \<const0> ;
  assign LOCKSTEP_Master_Out[1652] = \<const0> ;
  assign LOCKSTEP_Master_Out[1653] = \<const0> ;
  assign LOCKSTEP_Master_Out[1654] = \<const0> ;
  assign LOCKSTEP_Master_Out[1655] = \<const0> ;
  assign LOCKSTEP_Master_Out[1656] = \<const0> ;
  assign LOCKSTEP_Master_Out[1657] = \<const0> ;
  assign LOCKSTEP_Master_Out[1658] = \<const0> ;
  assign LOCKSTEP_Master_Out[1659] = \<const0> ;
  assign LOCKSTEP_Master_Out[1660] = \<const0> ;
  assign LOCKSTEP_Master_Out[1661] = \<const0> ;
  assign LOCKSTEP_Master_Out[1662] = \<const0> ;
  assign LOCKSTEP_Master_Out[1663] = \<const0> ;
  assign LOCKSTEP_Master_Out[1664] = \<const0> ;
  assign LOCKSTEP_Master_Out[1665] = \<const0> ;
  assign LOCKSTEP_Master_Out[1666] = \<const0> ;
  assign LOCKSTEP_Master_Out[1667] = \<const0> ;
  assign LOCKSTEP_Master_Out[1668] = \<const0> ;
  assign LOCKSTEP_Master_Out[1669] = \<const0> ;
  assign LOCKSTEP_Master_Out[1670] = \<const0> ;
  assign LOCKSTEP_Master_Out[1671] = \<const0> ;
  assign LOCKSTEP_Master_Out[1672] = \<const0> ;
  assign LOCKSTEP_Master_Out[1673] = \<const0> ;
  assign LOCKSTEP_Master_Out[1674] = \<const0> ;
  assign LOCKSTEP_Master_Out[1675] = \<const0> ;
  assign LOCKSTEP_Master_Out[1676] = \<const0> ;
  assign LOCKSTEP_Master_Out[1677] = \<const0> ;
  assign LOCKSTEP_Master_Out[1678] = \<const0> ;
  assign LOCKSTEP_Master_Out[1679] = \<const0> ;
  assign LOCKSTEP_Master_Out[1680] = \<const0> ;
  assign LOCKSTEP_Master_Out[1681] = \<const0> ;
  assign LOCKSTEP_Master_Out[1682] = \<const0> ;
  assign LOCKSTEP_Master_Out[1683] = \<const0> ;
  assign LOCKSTEP_Master_Out[1684] = \<const0> ;
  assign LOCKSTEP_Master_Out[1685] = \<const0> ;
  assign LOCKSTEP_Master_Out[1686] = \<const0> ;
  assign LOCKSTEP_Master_Out[1687] = \<const0> ;
  assign LOCKSTEP_Master_Out[1688] = \<const0> ;
  assign LOCKSTEP_Master_Out[1689] = \<const0> ;
  assign LOCKSTEP_Master_Out[1690] = \<const0> ;
  assign LOCKSTEP_Master_Out[1691] = \<const0> ;
  assign LOCKSTEP_Master_Out[1692] = \<const0> ;
  assign LOCKSTEP_Master_Out[1693] = \<const0> ;
  assign LOCKSTEP_Master_Out[1694] = \<const0> ;
  assign LOCKSTEP_Master_Out[1695] = \<const0> ;
  assign LOCKSTEP_Master_Out[1696] = \<const0> ;
  assign LOCKSTEP_Master_Out[1697] = \<const0> ;
  assign LOCKSTEP_Master_Out[1698] = \<const0> ;
  assign LOCKSTEP_Master_Out[1699] = \<const0> ;
  assign LOCKSTEP_Master_Out[1700] = \<const0> ;
  assign LOCKSTEP_Master_Out[1701] = \<const0> ;
  assign LOCKSTEP_Master_Out[1702] = \<const0> ;
  assign LOCKSTEP_Master_Out[1703] = \<const0> ;
  assign LOCKSTEP_Master_Out[1704] = \<const0> ;
  assign LOCKSTEP_Master_Out[1705] = \<const0> ;
  assign LOCKSTEP_Master_Out[1706] = \<const0> ;
  assign LOCKSTEP_Master_Out[1707] = \<const0> ;
  assign LOCKSTEP_Master_Out[1708] = \<const0> ;
  assign LOCKSTEP_Master_Out[1709] = \<const0> ;
  assign LOCKSTEP_Master_Out[1710] = \<const0> ;
  assign LOCKSTEP_Master_Out[1711] = \<const0> ;
  assign LOCKSTEP_Master_Out[1712] = \<const0> ;
  assign LOCKSTEP_Master_Out[1713] = \<const0> ;
  assign LOCKSTEP_Master_Out[1714] = \<const0> ;
  assign LOCKSTEP_Master_Out[1715] = \<const0> ;
  assign LOCKSTEP_Master_Out[1716] = \<const0> ;
  assign LOCKSTEP_Master_Out[1717] = \<const0> ;
  assign LOCKSTEP_Master_Out[1718] = \<const0> ;
  assign LOCKSTEP_Master_Out[1719] = \<const0> ;
  assign LOCKSTEP_Master_Out[1720] = \<const0> ;
  assign LOCKSTEP_Master_Out[1721] = \<const0> ;
  assign LOCKSTEP_Master_Out[1722] = \<const0> ;
  assign LOCKSTEP_Master_Out[1723] = \<const0> ;
  assign LOCKSTEP_Master_Out[1724] = \<const0> ;
  assign LOCKSTEP_Master_Out[1725] = \<const0> ;
  assign LOCKSTEP_Master_Out[1726] = \<const0> ;
  assign LOCKSTEP_Master_Out[1727] = \<const0> ;
  assign LOCKSTEP_Master_Out[1728] = \<const0> ;
  assign LOCKSTEP_Master_Out[1729] = \<const0> ;
  assign LOCKSTEP_Master_Out[1730] = \<const0> ;
  assign LOCKSTEP_Master_Out[1731] = \<const0> ;
  assign LOCKSTEP_Master_Out[1732] = \<const0> ;
  assign LOCKSTEP_Master_Out[1733] = \<const0> ;
  assign LOCKSTEP_Master_Out[1734] = \<const0> ;
  assign LOCKSTEP_Master_Out[1735] = \<const0> ;
  assign LOCKSTEP_Master_Out[1736] = \<const0> ;
  assign LOCKSTEP_Master_Out[1737] = \<const0> ;
  assign LOCKSTEP_Master_Out[1738] = \<const0> ;
  assign LOCKSTEP_Master_Out[1739] = \<const0> ;
  assign LOCKSTEP_Master_Out[1740] = \<const0> ;
  assign LOCKSTEP_Master_Out[1741] = \<const0> ;
  assign LOCKSTEP_Master_Out[1742] = \<const0> ;
  assign LOCKSTEP_Master_Out[1743] = \<const0> ;
  assign LOCKSTEP_Master_Out[1744] = \<const0> ;
  assign LOCKSTEP_Master_Out[1745] = \<const0> ;
  assign LOCKSTEP_Master_Out[1746] = \<const0> ;
  assign LOCKSTEP_Master_Out[1747] = \<const0> ;
  assign LOCKSTEP_Master_Out[1748] = \<const0> ;
  assign LOCKSTEP_Master_Out[1749] = \<const0> ;
  assign LOCKSTEP_Master_Out[1750] = \<const0> ;
  assign LOCKSTEP_Master_Out[1751] = \<const0> ;
  assign LOCKSTEP_Master_Out[1752] = \<const0> ;
  assign LOCKSTEP_Master_Out[1753] = \<const0> ;
  assign LOCKSTEP_Master_Out[1754] = \<const0> ;
  assign LOCKSTEP_Master_Out[1755] = \<const0> ;
  assign LOCKSTEP_Master_Out[1756] = \<const0> ;
  assign LOCKSTEP_Master_Out[1757] = \<const0> ;
  assign LOCKSTEP_Master_Out[1758] = \<const0> ;
  assign LOCKSTEP_Master_Out[1759] = \<const0> ;
  assign LOCKSTEP_Master_Out[1760] = \<const0> ;
  assign LOCKSTEP_Master_Out[1761] = \<const0> ;
  assign LOCKSTEP_Master_Out[1762] = \<const0> ;
  assign LOCKSTEP_Master_Out[1763] = \<const0> ;
  assign LOCKSTEP_Master_Out[1764] = \<const0> ;
  assign LOCKSTEP_Master_Out[1765] = \<const0> ;
  assign LOCKSTEP_Master_Out[1766] = \<const0> ;
  assign LOCKSTEP_Master_Out[1767] = \<const0> ;
  assign LOCKSTEP_Master_Out[1768] = \<const0> ;
  assign LOCKSTEP_Master_Out[1769] = \<const0> ;
  assign LOCKSTEP_Master_Out[1770] = \<const0> ;
  assign LOCKSTEP_Master_Out[1771] = \<const0> ;
  assign LOCKSTEP_Master_Out[1772] = \<const0> ;
  assign LOCKSTEP_Master_Out[1773] = \<const0> ;
  assign LOCKSTEP_Master_Out[1774] = \<const0> ;
  assign LOCKSTEP_Master_Out[1775] = \<const0> ;
  assign LOCKSTEP_Master_Out[1776] = \<const0> ;
  assign LOCKSTEP_Master_Out[1777] = \<const0> ;
  assign LOCKSTEP_Master_Out[1778] = \<const0> ;
  assign LOCKSTEP_Master_Out[1779] = \<const0> ;
  assign LOCKSTEP_Master_Out[1780] = \<const0> ;
  assign LOCKSTEP_Master_Out[1781] = \<const0> ;
  assign LOCKSTEP_Master_Out[1782] = \<const0> ;
  assign LOCKSTEP_Master_Out[1783] = \<const0> ;
  assign LOCKSTEP_Master_Out[1784] = \<const0> ;
  assign LOCKSTEP_Master_Out[1785] = \<const0> ;
  assign LOCKSTEP_Master_Out[1786] = \<const0> ;
  assign LOCKSTEP_Master_Out[1787] = \<const0> ;
  assign LOCKSTEP_Master_Out[1788] = \<const0> ;
  assign LOCKSTEP_Master_Out[1789] = \<const0> ;
  assign LOCKSTEP_Master_Out[1790] = \<const0> ;
  assign LOCKSTEP_Master_Out[1791] = \<const0> ;
  assign LOCKSTEP_Master_Out[1792] = \<const0> ;
  assign LOCKSTEP_Master_Out[1793] = \<const0> ;
  assign LOCKSTEP_Master_Out[1794] = \<const0> ;
  assign LOCKSTEP_Master_Out[1795] = \<const0> ;
  assign LOCKSTEP_Master_Out[1796] = \<const0> ;
  assign LOCKSTEP_Master_Out[1797] = \<const0> ;
  assign LOCKSTEP_Master_Out[1798] = \<const0> ;
  assign LOCKSTEP_Master_Out[1799] = \<const0> ;
  assign LOCKSTEP_Master_Out[1800] = \<const0> ;
  assign LOCKSTEP_Master_Out[1801] = \<const0> ;
  assign LOCKSTEP_Master_Out[1802] = \<const0> ;
  assign LOCKSTEP_Master_Out[1803] = \<const0> ;
  assign LOCKSTEP_Master_Out[1804] = \<const0> ;
  assign LOCKSTEP_Master_Out[1805] = \<const0> ;
  assign LOCKSTEP_Master_Out[1806] = \<const0> ;
  assign LOCKSTEP_Master_Out[1807] = \<const0> ;
  assign LOCKSTEP_Master_Out[1808] = \<const0> ;
  assign LOCKSTEP_Master_Out[1809] = \<const0> ;
  assign LOCKSTEP_Master_Out[1810] = \<const0> ;
  assign LOCKSTEP_Master_Out[1811] = \<const0> ;
  assign LOCKSTEP_Master_Out[1812] = \<const0> ;
  assign LOCKSTEP_Master_Out[1813] = \<const0> ;
  assign LOCKSTEP_Master_Out[1814] = \<const0> ;
  assign LOCKSTEP_Master_Out[1815] = \<const0> ;
  assign LOCKSTEP_Master_Out[1816] = \<const0> ;
  assign LOCKSTEP_Master_Out[1817] = \<const0> ;
  assign LOCKSTEP_Master_Out[1818] = \<const0> ;
  assign LOCKSTEP_Master_Out[1819] = \<const0> ;
  assign LOCKSTEP_Master_Out[1820] = \<const0> ;
  assign LOCKSTEP_Master_Out[1821] = \<const0> ;
  assign LOCKSTEP_Master_Out[1822] = \<const0> ;
  assign LOCKSTEP_Master_Out[1823] = \<const0> ;
  assign LOCKSTEP_Master_Out[1824] = \<const0> ;
  assign LOCKSTEP_Master_Out[1825] = \<const0> ;
  assign LOCKSTEP_Master_Out[1826] = \<const0> ;
  assign LOCKSTEP_Master_Out[1827] = \<const0> ;
  assign LOCKSTEP_Master_Out[1828] = \<const0> ;
  assign LOCKSTEP_Master_Out[1829] = \<const0> ;
  assign LOCKSTEP_Master_Out[1830] = \<const0> ;
  assign LOCKSTEP_Master_Out[1831] = \<const0> ;
  assign LOCKSTEP_Master_Out[1832] = \<const0> ;
  assign LOCKSTEP_Master_Out[1833] = \<const0> ;
  assign LOCKSTEP_Master_Out[1834] = \<const0> ;
  assign LOCKSTEP_Master_Out[1835] = \<const0> ;
  assign LOCKSTEP_Master_Out[1836] = \<const0> ;
  assign LOCKSTEP_Master_Out[1837] = \<const0> ;
  assign LOCKSTEP_Master_Out[1838] = \<const0> ;
  assign LOCKSTEP_Master_Out[1839] = \<const0> ;
  assign LOCKSTEP_Master_Out[1840] = \<const0> ;
  assign LOCKSTEP_Master_Out[1841] = \<const0> ;
  assign LOCKSTEP_Master_Out[1842] = \<const0> ;
  assign LOCKSTEP_Master_Out[1843] = \<const0> ;
  assign LOCKSTEP_Master_Out[1844] = \<const0> ;
  assign LOCKSTEP_Master_Out[1845] = \<const0> ;
  assign LOCKSTEP_Master_Out[1846] = \<const0> ;
  assign LOCKSTEP_Master_Out[1847] = \<const0> ;
  assign LOCKSTEP_Master_Out[1848] = \<const0> ;
  assign LOCKSTEP_Master_Out[1849] = \<const0> ;
  assign LOCKSTEP_Master_Out[1850] = \<const0> ;
  assign LOCKSTEP_Master_Out[1851] = \<const0> ;
  assign LOCKSTEP_Master_Out[1852] = \<const0> ;
  assign LOCKSTEP_Master_Out[1853] = \<const0> ;
  assign LOCKSTEP_Master_Out[1854] = \<const0> ;
  assign LOCKSTEP_Master_Out[1855] = \<const0> ;
  assign LOCKSTEP_Master_Out[1856] = \<const0> ;
  assign LOCKSTEP_Master_Out[1857] = \<const0> ;
  assign LOCKSTEP_Master_Out[1858] = \<const0> ;
  assign LOCKSTEP_Master_Out[1859] = \<const0> ;
  assign LOCKSTEP_Master_Out[1860] = \<const0> ;
  assign LOCKSTEP_Master_Out[1861] = \<const0> ;
  assign LOCKSTEP_Master_Out[1862] = \<const0> ;
  assign LOCKSTEP_Master_Out[1863] = \<const0> ;
  assign LOCKSTEP_Master_Out[1864] = \<const0> ;
  assign LOCKSTEP_Master_Out[1865] = \<const0> ;
  assign LOCKSTEP_Master_Out[1866] = \<const0> ;
  assign LOCKSTEP_Master_Out[1867] = \<const0> ;
  assign LOCKSTEP_Master_Out[1868] = \<const0> ;
  assign LOCKSTEP_Master_Out[1869] = \<const0> ;
  assign LOCKSTEP_Master_Out[1870] = \<const0> ;
  assign LOCKSTEP_Master_Out[1871] = \<const0> ;
  assign LOCKSTEP_Master_Out[1872] = \<const0> ;
  assign LOCKSTEP_Master_Out[1873] = \<const0> ;
  assign LOCKSTEP_Master_Out[1874] = \<const0> ;
  assign LOCKSTEP_Master_Out[1875] = \<const0> ;
  assign LOCKSTEP_Master_Out[1876] = \<const0> ;
  assign LOCKSTEP_Master_Out[1877] = \<const0> ;
  assign LOCKSTEP_Master_Out[1878] = \<const0> ;
  assign LOCKSTEP_Master_Out[1879] = \<const0> ;
  assign LOCKSTEP_Master_Out[1880] = \<const0> ;
  assign LOCKSTEP_Master_Out[1881] = \<const0> ;
  assign LOCKSTEP_Master_Out[1882] = \<const0> ;
  assign LOCKSTEP_Master_Out[1883] = \<const0> ;
  assign LOCKSTEP_Master_Out[1884] = \<const0> ;
  assign LOCKSTEP_Master_Out[1885] = \<const0> ;
  assign LOCKSTEP_Master_Out[1886] = \<const0> ;
  assign LOCKSTEP_Master_Out[1887] = \<const0> ;
  assign LOCKSTEP_Master_Out[1888] = \<const0> ;
  assign LOCKSTEP_Master_Out[1889] = \<const0> ;
  assign LOCKSTEP_Master_Out[1890] = \<const0> ;
  assign LOCKSTEP_Master_Out[1891] = \<const0> ;
  assign LOCKSTEP_Master_Out[1892] = \<const0> ;
  assign LOCKSTEP_Master_Out[1893] = \<const0> ;
  assign LOCKSTEP_Master_Out[1894] = \<const0> ;
  assign LOCKSTEP_Master_Out[1895] = \<const0> ;
  assign LOCKSTEP_Master_Out[1896] = \<const0> ;
  assign LOCKSTEP_Master_Out[1897] = \<const0> ;
  assign LOCKSTEP_Master_Out[1898] = \<const0> ;
  assign LOCKSTEP_Master_Out[1899] = \<const0> ;
  assign LOCKSTEP_Master_Out[1900] = \<const0> ;
  assign LOCKSTEP_Master_Out[1901] = \<const0> ;
  assign LOCKSTEP_Master_Out[1902] = \<const0> ;
  assign LOCKSTEP_Master_Out[1903] = \<const0> ;
  assign LOCKSTEP_Master_Out[1904] = \<const0> ;
  assign LOCKSTEP_Master_Out[1905] = \<const0> ;
  assign LOCKSTEP_Master_Out[1906] = \<const0> ;
  assign LOCKSTEP_Master_Out[1907] = \<const0> ;
  assign LOCKSTEP_Master_Out[1908] = \<const0> ;
  assign LOCKSTEP_Master_Out[1909] = \<const0> ;
  assign LOCKSTEP_Master_Out[1910] = \<const0> ;
  assign LOCKSTEP_Master_Out[1911] = \<const0> ;
  assign LOCKSTEP_Master_Out[1912] = \<const0> ;
  assign LOCKSTEP_Master_Out[1913] = \<const0> ;
  assign LOCKSTEP_Master_Out[1914] = \<const0> ;
  assign LOCKSTEP_Master_Out[1915] = \<const0> ;
  assign LOCKSTEP_Master_Out[1916] = \<const0> ;
  assign LOCKSTEP_Master_Out[1917] = \<const0> ;
  assign LOCKSTEP_Master_Out[1918] = \<const0> ;
  assign LOCKSTEP_Master_Out[1919] = \<const0> ;
  assign LOCKSTEP_Master_Out[1920] = \<const0> ;
  assign LOCKSTEP_Master_Out[1921] = \<const0> ;
  assign LOCKSTEP_Master_Out[1922] = \<const0> ;
  assign LOCKSTEP_Master_Out[1923] = \<const0> ;
  assign LOCKSTEP_Master_Out[1924] = \<const0> ;
  assign LOCKSTEP_Master_Out[1925] = \<const0> ;
  assign LOCKSTEP_Master_Out[1926] = \<const0> ;
  assign LOCKSTEP_Master_Out[1927] = \<const0> ;
  assign LOCKSTEP_Master_Out[1928] = \<const0> ;
  assign LOCKSTEP_Master_Out[1929] = \<const0> ;
  assign LOCKSTEP_Master_Out[1930] = \<const0> ;
  assign LOCKSTEP_Master_Out[1931] = \<const0> ;
  assign LOCKSTEP_Master_Out[1932] = \<const0> ;
  assign LOCKSTEP_Master_Out[1933] = \<const0> ;
  assign LOCKSTEP_Master_Out[1934] = \<const0> ;
  assign LOCKSTEP_Master_Out[1935] = \<const0> ;
  assign LOCKSTEP_Master_Out[1936] = \<const0> ;
  assign LOCKSTEP_Master_Out[1937] = \<const0> ;
  assign LOCKSTEP_Master_Out[1938] = \<const0> ;
  assign LOCKSTEP_Master_Out[1939] = \<const0> ;
  assign LOCKSTEP_Master_Out[1940] = \<const0> ;
  assign LOCKSTEP_Master_Out[1941] = \<const0> ;
  assign LOCKSTEP_Master_Out[1942] = \<const0> ;
  assign LOCKSTEP_Master_Out[1943] = \<const0> ;
  assign LOCKSTEP_Master_Out[1944] = \<const0> ;
  assign LOCKSTEP_Master_Out[1945] = \<const0> ;
  assign LOCKSTEP_Master_Out[1946] = \<const0> ;
  assign LOCKSTEP_Master_Out[1947] = \<const0> ;
  assign LOCKSTEP_Master_Out[1948] = \<const0> ;
  assign LOCKSTEP_Master_Out[1949] = \<const0> ;
  assign LOCKSTEP_Master_Out[1950] = \<const0> ;
  assign LOCKSTEP_Master_Out[1951] = \<const0> ;
  assign LOCKSTEP_Master_Out[1952] = \<const0> ;
  assign LOCKSTEP_Master_Out[1953] = \<const0> ;
  assign LOCKSTEP_Master_Out[1954] = \<const0> ;
  assign LOCKSTEP_Master_Out[1955] = \<const0> ;
  assign LOCKSTEP_Master_Out[1956] = \<const0> ;
  assign LOCKSTEP_Master_Out[1957] = \<const0> ;
  assign LOCKSTEP_Master_Out[1958] = \<const0> ;
  assign LOCKSTEP_Master_Out[1959] = \<const0> ;
  assign LOCKSTEP_Master_Out[1960] = \<const0> ;
  assign LOCKSTEP_Master_Out[1961] = \<const0> ;
  assign LOCKSTEP_Master_Out[1962] = \<const0> ;
  assign LOCKSTEP_Master_Out[1963] = \<const0> ;
  assign LOCKSTEP_Master_Out[1964] = \<const0> ;
  assign LOCKSTEP_Master_Out[1965] = \<const0> ;
  assign LOCKSTEP_Master_Out[1966] = \<const0> ;
  assign LOCKSTEP_Master_Out[1967] = \<const0> ;
  assign LOCKSTEP_Master_Out[1968] = \<const0> ;
  assign LOCKSTEP_Master_Out[1969] = \<const0> ;
  assign LOCKSTEP_Master_Out[1970] = \<const0> ;
  assign LOCKSTEP_Master_Out[1971] = \<const0> ;
  assign LOCKSTEP_Master_Out[1972] = \<const0> ;
  assign LOCKSTEP_Master_Out[1973] = \<const0> ;
  assign LOCKSTEP_Master_Out[1974] = \<const0> ;
  assign LOCKSTEP_Master_Out[1975] = \<const0> ;
  assign LOCKSTEP_Master_Out[1976] = \<const0> ;
  assign LOCKSTEP_Master_Out[1977] = \<const0> ;
  assign LOCKSTEP_Master_Out[1978] = \<const0> ;
  assign LOCKSTEP_Master_Out[1979] = \<const0> ;
  assign LOCKSTEP_Master_Out[1980] = \<const0> ;
  assign LOCKSTEP_Master_Out[1981] = \<const0> ;
  assign LOCKSTEP_Master_Out[1982] = \<const0> ;
  assign LOCKSTEP_Master_Out[1983] = \<const0> ;
  assign LOCKSTEP_Master_Out[1984] = \<const0> ;
  assign LOCKSTEP_Master_Out[1985] = \<const0> ;
  assign LOCKSTEP_Master_Out[1986] = \<const0> ;
  assign LOCKSTEP_Master_Out[1987] = \<const0> ;
  assign LOCKSTEP_Master_Out[1988] = \<const0> ;
  assign LOCKSTEP_Master_Out[1989] = \<const0> ;
  assign LOCKSTEP_Master_Out[1990] = \<const0> ;
  assign LOCKSTEP_Master_Out[1991] = \<const0> ;
  assign LOCKSTEP_Master_Out[1992] = \<const0> ;
  assign LOCKSTEP_Master_Out[1993] = \<const0> ;
  assign LOCKSTEP_Master_Out[1994] = \<const0> ;
  assign LOCKSTEP_Master_Out[1995] = \<const0> ;
  assign LOCKSTEP_Master_Out[1996] = \<const0> ;
  assign LOCKSTEP_Master_Out[1997] = \<const0> ;
  assign LOCKSTEP_Master_Out[1998] = \<const0> ;
  assign LOCKSTEP_Master_Out[1999] = \<const0> ;
  assign LOCKSTEP_Master_Out[2000] = \<const0> ;
  assign LOCKSTEP_Master_Out[2001] = \<const0> ;
  assign LOCKSTEP_Master_Out[2002] = \<const0> ;
  assign LOCKSTEP_Master_Out[2003] = \<const0> ;
  assign LOCKSTEP_Master_Out[2004] = \<const0> ;
  assign LOCKSTEP_Master_Out[2005] = \<const0> ;
  assign LOCKSTEP_Master_Out[2006] = \<const0> ;
  assign LOCKSTEP_Master_Out[2007] = \<const0> ;
  assign LOCKSTEP_Master_Out[2008] = \<const0> ;
  assign LOCKSTEP_Master_Out[2009] = \<const0> ;
  assign LOCKSTEP_Master_Out[2010] = \<const0> ;
  assign LOCKSTEP_Master_Out[2011] = \<const0> ;
  assign LOCKSTEP_Master_Out[2012] = \<const0> ;
  assign LOCKSTEP_Master_Out[2013] = \<const0> ;
  assign LOCKSTEP_Master_Out[2014] = \<const0> ;
  assign LOCKSTEP_Master_Out[2015] = \<const0> ;
  assign LOCKSTEP_Master_Out[2016] = \<const0> ;
  assign LOCKSTEP_Master_Out[2017] = \<const0> ;
  assign LOCKSTEP_Master_Out[2018] = \<const0> ;
  assign LOCKSTEP_Master_Out[2019] = \<const0> ;
  assign LOCKSTEP_Master_Out[2020] = \<const0> ;
  assign LOCKSTEP_Master_Out[2021] = \<const0> ;
  assign LOCKSTEP_Master_Out[2022] = \<const0> ;
  assign LOCKSTEP_Master_Out[2023] = \<const0> ;
  assign LOCKSTEP_Master_Out[2024] = \<const0> ;
  assign LOCKSTEP_Master_Out[2025] = \<const0> ;
  assign LOCKSTEP_Master_Out[2026] = \<const0> ;
  assign LOCKSTEP_Master_Out[2027] = \<const0> ;
  assign LOCKSTEP_Master_Out[2028] = \<const0> ;
  assign LOCKSTEP_Master_Out[2029] = \<const0> ;
  assign LOCKSTEP_Master_Out[2030] = \<const0> ;
  assign LOCKSTEP_Master_Out[2031] = \<const0> ;
  assign LOCKSTEP_Master_Out[2032] = \<const0> ;
  assign LOCKSTEP_Master_Out[2033] = \<const0> ;
  assign LOCKSTEP_Master_Out[2034] = \<const0> ;
  assign LOCKSTEP_Master_Out[2035] = \<const0> ;
  assign LOCKSTEP_Master_Out[2036] = \<const0> ;
  assign LOCKSTEP_Master_Out[2037] = \<const0> ;
  assign LOCKSTEP_Master_Out[2038] = \<const0> ;
  assign LOCKSTEP_Master_Out[2039] = \<const0> ;
  assign LOCKSTEP_Master_Out[2040] = \<const0> ;
  assign LOCKSTEP_Master_Out[2041] = \<const0> ;
  assign LOCKSTEP_Master_Out[2042] = \<const0> ;
  assign LOCKSTEP_Master_Out[2043] = \<const0> ;
  assign LOCKSTEP_Master_Out[2044] = \<const0> ;
  assign LOCKSTEP_Master_Out[2045] = \<const0> ;
  assign LOCKSTEP_Master_Out[2046] = \<const0> ;
  assign LOCKSTEP_Master_Out[2047] = \<const0> ;
  assign LOCKSTEP_Master_Out[2048] = \<const0> ;
  assign LOCKSTEP_Master_Out[2049] = \<const0> ;
  assign LOCKSTEP_Master_Out[2050] = \<const0> ;
  assign LOCKSTEP_Master_Out[2051] = \<const0> ;
  assign LOCKSTEP_Master_Out[2052] = \<const0> ;
  assign LOCKSTEP_Master_Out[2053] = \<const0> ;
  assign LOCKSTEP_Master_Out[2054] = \<const0> ;
  assign LOCKSTEP_Master_Out[2055] = \<const0> ;
  assign LOCKSTEP_Master_Out[2056] = \<const0> ;
  assign LOCKSTEP_Master_Out[2057] = \<const0> ;
  assign LOCKSTEP_Master_Out[2058] = \<const0> ;
  assign LOCKSTEP_Master_Out[2059] = \<const0> ;
  assign LOCKSTEP_Master_Out[2060] = \<const0> ;
  assign LOCKSTEP_Master_Out[2061] = \<const0> ;
  assign LOCKSTEP_Master_Out[2062] = \<const0> ;
  assign LOCKSTEP_Master_Out[2063] = \<const0> ;
  assign LOCKSTEP_Master_Out[2064] = \<const0> ;
  assign LOCKSTEP_Master_Out[2065] = \<const0> ;
  assign LOCKSTEP_Master_Out[2066] = \<const0> ;
  assign LOCKSTEP_Master_Out[2067] = \<const0> ;
  assign LOCKSTEP_Master_Out[2068] = \<const0> ;
  assign LOCKSTEP_Master_Out[2069] = \<const0> ;
  assign LOCKSTEP_Master_Out[2070] = \<const0> ;
  assign LOCKSTEP_Master_Out[2071] = \<const0> ;
  assign LOCKSTEP_Master_Out[2072] = \<const0> ;
  assign LOCKSTEP_Master_Out[2073] = \<const0> ;
  assign LOCKSTEP_Master_Out[2074] = \<const0> ;
  assign LOCKSTEP_Master_Out[2075] = \<const0> ;
  assign LOCKSTEP_Master_Out[2076] = \<const0> ;
  assign LOCKSTEP_Master_Out[2077] = \<const0> ;
  assign LOCKSTEP_Master_Out[2078] = \<const0> ;
  assign LOCKSTEP_Master_Out[2079] = \<const0> ;
  assign LOCKSTEP_Master_Out[2080] = \<const0> ;
  assign LOCKSTEP_Master_Out[2081] = \<const0> ;
  assign LOCKSTEP_Master_Out[2082] = \<const0> ;
  assign LOCKSTEP_Master_Out[2083] = \<const0> ;
  assign LOCKSTEP_Master_Out[2084] = \<const0> ;
  assign LOCKSTEP_Master_Out[2085] = \<const0> ;
  assign LOCKSTEP_Master_Out[2086] = \<const0> ;
  assign LOCKSTEP_Master_Out[2087] = \<const0> ;
  assign LOCKSTEP_Master_Out[2088] = \<const0> ;
  assign LOCKSTEP_Master_Out[2089] = \<const0> ;
  assign LOCKSTEP_Master_Out[2090] = \<const0> ;
  assign LOCKSTEP_Master_Out[2091] = \<const0> ;
  assign LOCKSTEP_Master_Out[2092] = \<const0> ;
  assign LOCKSTEP_Master_Out[2093] = \<const0> ;
  assign LOCKSTEP_Master_Out[2094] = \<const0> ;
  assign LOCKSTEP_Master_Out[2095] = \<const0> ;
  assign LOCKSTEP_Master_Out[2096] = \<const0> ;
  assign LOCKSTEP_Master_Out[2097] = \<const0> ;
  assign LOCKSTEP_Master_Out[2098] = \<const0> ;
  assign LOCKSTEP_Master_Out[2099] = \<const0> ;
  assign LOCKSTEP_Master_Out[2100] = \<const0> ;
  assign LOCKSTEP_Master_Out[2101] = \<const0> ;
  assign LOCKSTEP_Master_Out[2102] = \<const0> ;
  assign LOCKSTEP_Master_Out[2103] = \<const0> ;
  assign LOCKSTEP_Master_Out[2104] = \<const0> ;
  assign LOCKSTEP_Master_Out[2105] = \<const0> ;
  assign LOCKSTEP_Master_Out[2106] = \<const0> ;
  assign LOCKSTEP_Master_Out[2107] = \<const0> ;
  assign LOCKSTEP_Master_Out[2108] = \<const0> ;
  assign LOCKSTEP_Master_Out[2109] = \<const0> ;
  assign LOCKSTEP_Master_Out[2110] = \<const0> ;
  assign LOCKSTEP_Master_Out[2111] = \<const0> ;
  assign LOCKSTEP_Master_Out[2112] = \<const0> ;
  assign LOCKSTEP_Master_Out[2113] = \<const0> ;
  assign LOCKSTEP_Master_Out[2114] = \<const0> ;
  assign LOCKSTEP_Master_Out[2115] = \<const0> ;
  assign LOCKSTEP_Master_Out[2116] = \<const0> ;
  assign LOCKSTEP_Master_Out[2117] = \<const0> ;
  assign LOCKSTEP_Master_Out[2118] = \<const0> ;
  assign LOCKSTEP_Master_Out[2119] = \<const0> ;
  assign LOCKSTEP_Master_Out[2120] = \<const0> ;
  assign LOCKSTEP_Master_Out[2121] = \<const0> ;
  assign LOCKSTEP_Master_Out[2122] = \<const0> ;
  assign LOCKSTEP_Master_Out[2123] = \<const0> ;
  assign LOCKSTEP_Master_Out[2124] = \<const0> ;
  assign LOCKSTEP_Master_Out[2125] = \<const0> ;
  assign LOCKSTEP_Master_Out[2126] = \<const0> ;
  assign LOCKSTEP_Master_Out[2127] = \<const0> ;
  assign LOCKSTEP_Master_Out[2128] = \<const0> ;
  assign LOCKSTEP_Master_Out[2129] = \<const0> ;
  assign LOCKSTEP_Master_Out[2130] = \<const0> ;
  assign LOCKSTEP_Master_Out[2131] = \<const0> ;
  assign LOCKSTEP_Master_Out[2132] = \<const0> ;
  assign LOCKSTEP_Master_Out[2133] = \<const0> ;
  assign LOCKSTEP_Master_Out[2134] = \<const0> ;
  assign LOCKSTEP_Master_Out[2135] = \<const0> ;
  assign LOCKSTEP_Master_Out[2136] = \<const0> ;
  assign LOCKSTEP_Master_Out[2137] = \<const0> ;
  assign LOCKSTEP_Master_Out[2138] = \<const0> ;
  assign LOCKSTEP_Master_Out[2139] = \<const0> ;
  assign LOCKSTEP_Master_Out[2140] = \<const0> ;
  assign LOCKSTEP_Master_Out[2141] = \<const0> ;
  assign LOCKSTEP_Master_Out[2142] = \<const0> ;
  assign LOCKSTEP_Master_Out[2143] = \<const0> ;
  assign LOCKSTEP_Master_Out[2144] = \<const0> ;
  assign LOCKSTEP_Master_Out[2145] = \<const0> ;
  assign LOCKSTEP_Master_Out[2146] = \<const0> ;
  assign LOCKSTEP_Master_Out[2147] = \<const0> ;
  assign LOCKSTEP_Master_Out[2148] = \<const0> ;
  assign LOCKSTEP_Master_Out[2149] = \<const0> ;
  assign LOCKSTEP_Master_Out[2150] = \<const0> ;
  assign LOCKSTEP_Master_Out[2151] = \<const0> ;
  assign LOCKSTEP_Master_Out[2152] = \<const0> ;
  assign LOCKSTEP_Master_Out[2153] = \<const0> ;
  assign LOCKSTEP_Master_Out[2154] = \<const0> ;
  assign LOCKSTEP_Master_Out[2155] = \<const0> ;
  assign LOCKSTEP_Master_Out[2156] = \<const0> ;
  assign LOCKSTEP_Master_Out[2157] = \<const0> ;
  assign LOCKSTEP_Master_Out[2158] = \<const0> ;
  assign LOCKSTEP_Master_Out[2159] = \<const0> ;
  assign LOCKSTEP_Master_Out[2160] = \<const0> ;
  assign LOCKSTEP_Master_Out[2161] = \<const0> ;
  assign LOCKSTEP_Master_Out[2162] = \<const0> ;
  assign LOCKSTEP_Master_Out[2163] = \<const0> ;
  assign LOCKSTEP_Master_Out[2164] = \<const0> ;
  assign LOCKSTEP_Master_Out[2165] = \<const0> ;
  assign LOCKSTEP_Master_Out[2166] = \<const0> ;
  assign LOCKSTEP_Master_Out[2167] = \<const0> ;
  assign LOCKSTEP_Master_Out[2168] = \<const0> ;
  assign LOCKSTEP_Master_Out[2169] = \<const0> ;
  assign LOCKSTEP_Master_Out[2170] = \<const0> ;
  assign LOCKSTEP_Master_Out[2171] = \<const0> ;
  assign LOCKSTEP_Master_Out[2172] = \<const0> ;
  assign LOCKSTEP_Master_Out[2173] = \<const0> ;
  assign LOCKSTEP_Master_Out[2174] = \<const0> ;
  assign LOCKSTEP_Master_Out[2175] = \<const0> ;
  assign LOCKSTEP_Master_Out[2176] = \<const0> ;
  assign LOCKSTEP_Master_Out[2177] = \<const0> ;
  assign LOCKSTEP_Master_Out[2178] = \<const0> ;
  assign LOCKSTEP_Master_Out[2179] = \<const0> ;
  assign LOCKSTEP_Master_Out[2180] = \<const0> ;
  assign LOCKSTEP_Master_Out[2181] = \<const0> ;
  assign LOCKSTEP_Master_Out[2182] = \<const0> ;
  assign LOCKSTEP_Master_Out[2183] = \<const0> ;
  assign LOCKSTEP_Master_Out[2184] = \<const0> ;
  assign LOCKSTEP_Master_Out[2185] = \<const0> ;
  assign LOCKSTEP_Master_Out[2186] = \<const0> ;
  assign LOCKSTEP_Master_Out[2187] = \<const0> ;
  assign LOCKSTEP_Master_Out[2188] = \<const0> ;
  assign LOCKSTEP_Master_Out[2189] = \<const0> ;
  assign LOCKSTEP_Master_Out[2190] = \<const0> ;
  assign LOCKSTEP_Master_Out[2191] = \<const0> ;
  assign LOCKSTEP_Master_Out[2192] = \<const0> ;
  assign LOCKSTEP_Master_Out[2193] = \<const0> ;
  assign LOCKSTEP_Master_Out[2194] = \<const0> ;
  assign LOCKSTEP_Master_Out[2195] = \<const0> ;
  assign LOCKSTEP_Master_Out[2196] = \<const0> ;
  assign LOCKSTEP_Master_Out[2197] = \<const0> ;
  assign LOCKSTEP_Master_Out[2198] = \<const0> ;
  assign LOCKSTEP_Master_Out[2199] = \<const0> ;
  assign LOCKSTEP_Master_Out[2200] = \<const0> ;
  assign LOCKSTEP_Master_Out[2201] = \<const0> ;
  assign LOCKSTEP_Master_Out[2202] = \<const0> ;
  assign LOCKSTEP_Master_Out[2203] = \<const0> ;
  assign LOCKSTEP_Master_Out[2204] = \<const0> ;
  assign LOCKSTEP_Master_Out[2205] = \<const0> ;
  assign LOCKSTEP_Master_Out[2206] = \<const0> ;
  assign LOCKSTEP_Master_Out[2207] = \<const0> ;
  assign LOCKSTEP_Master_Out[2208] = \<const0> ;
  assign LOCKSTEP_Master_Out[2209] = \<const0> ;
  assign LOCKSTEP_Master_Out[2210] = \<const0> ;
  assign LOCKSTEP_Master_Out[2211] = \<const0> ;
  assign LOCKSTEP_Master_Out[2212] = \<const0> ;
  assign LOCKSTEP_Master_Out[2213] = \<const0> ;
  assign LOCKSTEP_Master_Out[2214] = \<const0> ;
  assign LOCKSTEP_Master_Out[2215] = \<const0> ;
  assign LOCKSTEP_Master_Out[2216] = \<const0> ;
  assign LOCKSTEP_Master_Out[2217] = \<const0> ;
  assign LOCKSTEP_Master_Out[2218] = \<const0> ;
  assign LOCKSTEP_Master_Out[2219] = \<const0> ;
  assign LOCKSTEP_Master_Out[2220] = \<const0> ;
  assign LOCKSTEP_Master_Out[2221] = \<const0> ;
  assign LOCKSTEP_Master_Out[2222] = \<const0> ;
  assign LOCKSTEP_Master_Out[2223] = \<const0> ;
  assign LOCKSTEP_Master_Out[2224] = \<const0> ;
  assign LOCKSTEP_Master_Out[2225] = \<const0> ;
  assign LOCKSTEP_Master_Out[2226] = \<const0> ;
  assign LOCKSTEP_Master_Out[2227] = \<const0> ;
  assign LOCKSTEP_Master_Out[2228] = \<const0> ;
  assign LOCKSTEP_Master_Out[2229] = \<const0> ;
  assign LOCKSTEP_Master_Out[2230] = \<const0> ;
  assign LOCKSTEP_Master_Out[2231] = \<const0> ;
  assign LOCKSTEP_Master_Out[2232] = \<const0> ;
  assign LOCKSTEP_Master_Out[2233] = \<const0> ;
  assign LOCKSTEP_Master_Out[2234] = \<const0> ;
  assign LOCKSTEP_Master_Out[2235] = \<const0> ;
  assign LOCKSTEP_Master_Out[2236] = \<const0> ;
  assign LOCKSTEP_Master_Out[2237] = \<const0> ;
  assign LOCKSTEP_Master_Out[2238] = \<const0> ;
  assign LOCKSTEP_Master_Out[2239] = \<const0> ;
  assign LOCKSTEP_Master_Out[2240] = \<const0> ;
  assign LOCKSTEP_Master_Out[2241] = \<const0> ;
  assign LOCKSTEP_Master_Out[2242] = \<const0> ;
  assign LOCKSTEP_Master_Out[2243] = \<const0> ;
  assign LOCKSTEP_Master_Out[2244] = \<const0> ;
  assign LOCKSTEP_Master_Out[2245] = \<const0> ;
  assign LOCKSTEP_Master_Out[2246] = \<const0> ;
  assign LOCKSTEP_Master_Out[2247] = \<const0> ;
  assign LOCKSTEP_Master_Out[2248] = \<const0> ;
  assign LOCKSTEP_Master_Out[2249] = \<const0> ;
  assign LOCKSTEP_Master_Out[2250] = \<const0> ;
  assign LOCKSTEP_Master_Out[2251] = \<const0> ;
  assign LOCKSTEP_Master_Out[2252] = \<const0> ;
  assign LOCKSTEP_Master_Out[2253] = \<const0> ;
  assign LOCKSTEP_Master_Out[2254] = \<const0> ;
  assign LOCKSTEP_Master_Out[2255] = \<const0> ;
  assign LOCKSTEP_Master_Out[2256] = \<const0> ;
  assign LOCKSTEP_Master_Out[2257] = \<const0> ;
  assign LOCKSTEP_Master_Out[2258] = \<const0> ;
  assign LOCKSTEP_Master_Out[2259] = \<const0> ;
  assign LOCKSTEP_Master_Out[2260] = \<const0> ;
  assign LOCKSTEP_Master_Out[2261] = \<const0> ;
  assign LOCKSTEP_Master_Out[2262] = \<const0> ;
  assign LOCKSTEP_Master_Out[2263] = \<const0> ;
  assign LOCKSTEP_Master_Out[2264] = \<const0> ;
  assign LOCKSTEP_Master_Out[2265] = \<const0> ;
  assign LOCKSTEP_Master_Out[2266] = \<const0> ;
  assign LOCKSTEP_Master_Out[2267] = \<const0> ;
  assign LOCKSTEP_Master_Out[2268] = \<const0> ;
  assign LOCKSTEP_Master_Out[2269] = \<const0> ;
  assign LOCKSTEP_Master_Out[2270] = \<const0> ;
  assign LOCKSTEP_Master_Out[2271] = \<const0> ;
  assign LOCKSTEP_Master_Out[2272] = \<const0> ;
  assign LOCKSTEP_Master_Out[2273] = \<const0> ;
  assign LOCKSTEP_Master_Out[2274] = \<const0> ;
  assign LOCKSTEP_Master_Out[2275] = \<const0> ;
  assign LOCKSTEP_Master_Out[2276] = \<const0> ;
  assign LOCKSTEP_Master_Out[2277] = \<const0> ;
  assign LOCKSTEP_Master_Out[2278] = \<const0> ;
  assign LOCKSTEP_Master_Out[2279] = \<const0> ;
  assign LOCKSTEP_Master_Out[2280] = \<const0> ;
  assign LOCKSTEP_Master_Out[2281] = \<const0> ;
  assign LOCKSTEP_Master_Out[2282] = \<const0> ;
  assign LOCKSTEP_Master_Out[2283] = \<const0> ;
  assign LOCKSTEP_Master_Out[2284] = \<const0> ;
  assign LOCKSTEP_Master_Out[2285] = \<const0> ;
  assign LOCKSTEP_Master_Out[2286] = \<const0> ;
  assign LOCKSTEP_Master_Out[2287] = \<const0> ;
  assign LOCKSTEP_Master_Out[2288] = \<const0> ;
  assign LOCKSTEP_Master_Out[2289] = \<const0> ;
  assign LOCKSTEP_Master_Out[2290] = \<const0> ;
  assign LOCKSTEP_Master_Out[2291] = \<const0> ;
  assign LOCKSTEP_Master_Out[2292] = \<const0> ;
  assign LOCKSTEP_Master_Out[2293] = \<const0> ;
  assign LOCKSTEP_Master_Out[2294] = \<const0> ;
  assign LOCKSTEP_Master_Out[2295] = \<const0> ;
  assign LOCKSTEP_Master_Out[2296] = \<const0> ;
  assign LOCKSTEP_Master_Out[2297] = \<const0> ;
  assign LOCKSTEP_Master_Out[2298] = \<const0> ;
  assign LOCKSTEP_Master_Out[2299] = \<const0> ;
  assign LOCKSTEP_Master_Out[2300] = \<const0> ;
  assign LOCKSTEP_Master_Out[2301] = \<const0> ;
  assign LOCKSTEP_Master_Out[2302] = \<const0> ;
  assign LOCKSTEP_Master_Out[2303] = \<const0> ;
  assign LOCKSTEP_Master_Out[2304] = \<const0> ;
  assign LOCKSTEP_Master_Out[2305] = \<const0> ;
  assign LOCKSTEP_Master_Out[2306] = \<const0> ;
  assign LOCKSTEP_Master_Out[2307] = \<const0> ;
  assign LOCKSTEP_Master_Out[2308] = \<const0> ;
  assign LOCKSTEP_Master_Out[2309] = \<const0> ;
  assign LOCKSTEP_Master_Out[2310] = \<const0> ;
  assign LOCKSTEP_Master_Out[2311] = \<const0> ;
  assign LOCKSTEP_Master_Out[2312] = \<const0> ;
  assign LOCKSTEP_Master_Out[2313] = \<const0> ;
  assign LOCKSTEP_Master_Out[2314] = \<const0> ;
  assign LOCKSTEP_Master_Out[2315] = \<const0> ;
  assign LOCKSTEP_Master_Out[2316] = \<const0> ;
  assign LOCKSTEP_Master_Out[2317] = \<const0> ;
  assign LOCKSTEP_Master_Out[2318] = \<const0> ;
  assign LOCKSTEP_Master_Out[2319] = \<const0> ;
  assign LOCKSTEP_Master_Out[2320] = \<const0> ;
  assign LOCKSTEP_Master_Out[2321] = \<const0> ;
  assign LOCKSTEP_Master_Out[2322] = \<const0> ;
  assign LOCKSTEP_Master_Out[2323] = \<const0> ;
  assign LOCKSTEP_Master_Out[2324] = \<const0> ;
  assign LOCKSTEP_Master_Out[2325] = \<const0> ;
  assign LOCKSTEP_Master_Out[2326] = \<const0> ;
  assign LOCKSTEP_Master_Out[2327] = \<const0> ;
  assign LOCKSTEP_Master_Out[2328] = \<const0> ;
  assign LOCKSTEP_Master_Out[2329] = \<const0> ;
  assign LOCKSTEP_Master_Out[2330] = \<const0> ;
  assign LOCKSTEP_Master_Out[2331] = \<const0> ;
  assign LOCKSTEP_Master_Out[2332] = \<const0> ;
  assign LOCKSTEP_Master_Out[2333] = \<const0> ;
  assign LOCKSTEP_Master_Out[2334] = \<const0> ;
  assign LOCKSTEP_Master_Out[2335] = \<const0> ;
  assign LOCKSTEP_Master_Out[2336] = \<const0> ;
  assign LOCKSTEP_Master_Out[2337] = \<const0> ;
  assign LOCKSTEP_Master_Out[2338] = \<const0> ;
  assign LOCKSTEP_Master_Out[2339] = \<const0> ;
  assign LOCKSTEP_Master_Out[2340] = \<const0> ;
  assign LOCKSTEP_Master_Out[2341] = \<const0> ;
  assign LOCKSTEP_Master_Out[2342] = \<const0> ;
  assign LOCKSTEP_Master_Out[2343] = \<const0> ;
  assign LOCKSTEP_Master_Out[2344] = \<const0> ;
  assign LOCKSTEP_Master_Out[2345] = \<const0> ;
  assign LOCKSTEP_Master_Out[2346] = \<const0> ;
  assign LOCKSTEP_Master_Out[2347] = \<const0> ;
  assign LOCKSTEP_Master_Out[2348] = \<const0> ;
  assign LOCKSTEP_Master_Out[2349] = \<const0> ;
  assign LOCKSTEP_Master_Out[2350] = \<const0> ;
  assign LOCKSTEP_Master_Out[2351] = \<const0> ;
  assign LOCKSTEP_Master_Out[2352] = \<const0> ;
  assign LOCKSTEP_Master_Out[2353] = \<const0> ;
  assign LOCKSTEP_Master_Out[2354] = \<const0> ;
  assign LOCKSTEP_Master_Out[2355] = \<const0> ;
  assign LOCKSTEP_Master_Out[2356] = \<const0> ;
  assign LOCKSTEP_Master_Out[2357] = \<const0> ;
  assign LOCKSTEP_Master_Out[2358] = \<const0> ;
  assign LOCKSTEP_Master_Out[2359] = \<const0> ;
  assign LOCKSTEP_Master_Out[2360] = \<const0> ;
  assign LOCKSTEP_Master_Out[2361] = \<const0> ;
  assign LOCKSTEP_Master_Out[2362] = \<const0> ;
  assign LOCKSTEP_Master_Out[2363] = \<const0> ;
  assign LOCKSTEP_Master_Out[2364] = \<const0> ;
  assign LOCKSTEP_Master_Out[2365] = \<const0> ;
  assign LOCKSTEP_Master_Out[2366] = \<const0> ;
  assign LOCKSTEP_Master_Out[2367] = \<const0> ;
  assign LOCKSTEP_Master_Out[2368] = \<const0> ;
  assign LOCKSTEP_Master_Out[2369] = \<const0> ;
  assign LOCKSTEP_Master_Out[2370] = \<const0> ;
  assign LOCKSTEP_Master_Out[2371] = \<const0> ;
  assign LOCKSTEP_Master_Out[2372] = \<const0> ;
  assign LOCKSTEP_Master_Out[2373] = \<const0> ;
  assign LOCKSTEP_Master_Out[2374] = \<const0> ;
  assign LOCKSTEP_Master_Out[2375] = \<const0> ;
  assign LOCKSTEP_Master_Out[2376] = \<const0> ;
  assign LOCKSTEP_Master_Out[2377] = \<const0> ;
  assign LOCKSTEP_Master_Out[2378] = \<const0> ;
  assign LOCKSTEP_Master_Out[2379] = \<const0> ;
  assign LOCKSTEP_Master_Out[2380] = \<const0> ;
  assign LOCKSTEP_Master_Out[2381] = \<const0> ;
  assign LOCKSTEP_Master_Out[2382] = \<const0> ;
  assign LOCKSTEP_Master_Out[2383] = \<const0> ;
  assign LOCKSTEP_Master_Out[2384] = \<const0> ;
  assign LOCKSTEP_Master_Out[2385] = \<const0> ;
  assign LOCKSTEP_Master_Out[2386] = \<const0> ;
  assign LOCKSTEP_Master_Out[2387] = \<const0> ;
  assign LOCKSTEP_Master_Out[2388] = \<const0> ;
  assign LOCKSTEP_Master_Out[2389] = \<const0> ;
  assign LOCKSTEP_Master_Out[2390] = \<const0> ;
  assign LOCKSTEP_Master_Out[2391] = \<const0> ;
  assign LOCKSTEP_Master_Out[2392] = \<const0> ;
  assign LOCKSTEP_Master_Out[2393] = \<const0> ;
  assign LOCKSTEP_Master_Out[2394] = \<const0> ;
  assign LOCKSTEP_Master_Out[2395] = \<const0> ;
  assign LOCKSTEP_Master_Out[2396] = \<const0> ;
  assign LOCKSTEP_Master_Out[2397] = \<const0> ;
  assign LOCKSTEP_Master_Out[2398] = \<const0> ;
  assign LOCKSTEP_Master_Out[2399] = \<const0> ;
  assign LOCKSTEP_Master_Out[2400] = \<const0> ;
  assign LOCKSTEP_Master_Out[2401] = \<const0> ;
  assign LOCKSTEP_Master_Out[2402] = \<const0> ;
  assign LOCKSTEP_Master_Out[2403] = \<const0> ;
  assign LOCKSTEP_Master_Out[2404] = \<const0> ;
  assign LOCKSTEP_Master_Out[2405] = \<const0> ;
  assign LOCKSTEP_Master_Out[2406] = \<const0> ;
  assign LOCKSTEP_Master_Out[2407] = \<const0> ;
  assign LOCKSTEP_Master_Out[2408] = \<const0> ;
  assign LOCKSTEP_Master_Out[2409] = \<const0> ;
  assign LOCKSTEP_Master_Out[2410] = \<const0> ;
  assign LOCKSTEP_Master_Out[2411] = \<const0> ;
  assign LOCKSTEP_Master_Out[2412] = \<const0> ;
  assign LOCKSTEP_Master_Out[2413] = \<const0> ;
  assign LOCKSTEP_Master_Out[2414] = \<const0> ;
  assign LOCKSTEP_Master_Out[2415] = \<const0> ;
  assign LOCKSTEP_Master_Out[2416] = \<const0> ;
  assign LOCKSTEP_Master_Out[2417] = \<const0> ;
  assign LOCKSTEP_Master_Out[2418] = \<const0> ;
  assign LOCKSTEP_Master_Out[2419] = \<const0> ;
  assign LOCKSTEP_Master_Out[2420] = \<const0> ;
  assign LOCKSTEP_Master_Out[2421] = \<const0> ;
  assign LOCKSTEP_Master_Out[2422] = \<const0> ;
  assign LOCKSTEP_Master_Out[2423] = \<const0> ;
  assign LOCKSTEP_Master_Out[2424] = \<const0> ;
  assign LOCKSTEP_Master_Out[2425] = \<const0> ;
  assign LOCKSTEP_Master_Out[2426] = \<const0> ;
  assign LOCKSTEP_Master_Out[2427] = \<const0> ;
  assign LOCKSTEP_Master_Out[2428] = \<const0> ;
  assign LOCKSTEP_Master_Out[2429] = \<const0> ;
  assign LOCKSTEP_Master_Out[2430] = \<const0> ;
  assign LOCKSTEP_Master_Out[2431] = \<const0> ;
  assign LOCKSTEP_Master_Out[2432] = \<const0> ;
  assign LOCKSTEP_Master_Out[2433] = \<const0> ;
  assign LOCKSTEP_Master_Out[2434] = \<const0> ;
  assign LOCKSTEP_Master_Out[2435] = \<const0> ;
  assign LOCKSTEP_Master_Out[2436] = \<const0> ;
  assign LOCKSTEP_Master_Out[2437] = \<const0> ;
  assign LOCKSTEP_Master_Out[2438] = \<const0> ;
  assign LOCKSTEP_Master_Out[2439] = \<const0> ;
  assign LOCKSTEP_Master_Out[2440] = \<const0> ;
  assign LOCKSTEP_Master_Out[2441] = \<const0> ;
  assign LOCKSTEP_Master_Out[2442] = \<const0> ;
  assign LOCKSTEP_Master_Out[2443] = \<const0> ;
  assign LOCKSTEP_Master_Out[2444] = \<const0> ;
  assign LOCKSTEP_Master_Out[2445] = \<const0> ;
  assign LOCKSTEP_Master_Out[2446] = \<const0> ;
  assign LOCKSTEP_Master_Out[2447] = \<const0> ;
  assign LOCKSTEP_Master_Out[2448] = \<const0> ;
  assign LOCKSTEP_Master_Out[2449] = \<const0> ;
  assign LOCKSTEP_Master_Out[2450] = \<const0> ;
  assign LOCKSTEP_Master_Out[2451] = \<const0> ;
  assign LOCKSTEP_Master_Out[2452] = \<const0> ;
  assign LOCKSTEP_Master_Out[2453] = \<const0> ;
  assign LOCKSTEP_Master_Out[2454] = \<const0> ;
  assign LOCKSTEP_Master_Out[2455] = \<const0> ;
  assign LOCKSTEP_Master_Out[2456] = \<const0> ;
  assign LOCKSTEP_Master_Out[2457] = \<const0> ;
  assign LOCKSTEP_Master_Out[2458] = \<const0> ;
  assign LOCKSTEP_Master_Out[2459] = \<const0> ;
  assign LOCKSTEP_Master_Out[2460] = \<const0> ;
  assign LOCKSTEP_Master_Out[2461] = \<const0> ;
  assign LOCKSTEP_Master_Out[2462] = \<const0> ;
  assign LOCKSTEP_Master_Out[2463] = \<const0> ;
  assign LOCKSTEP_Master_Out[2464] = \<const0> ;
  assign LOCKSTEP_Master_Out[2465] = \<const0> ;
  assign LOCKSTEP_Master_Out[2466] = \<const0> ;
  assign LOCKSTEP_Master_Out[2467] = \<const0> ;
  assign LOCKSTEP_Master_Out[2468] = \<const0> ;
  assign LOCKSTEP_Master_Out[2469] = \<const0> ;
  assign LOCKSTEP_Master_Out[2470] = \<const0> ;
  assign LOCKSTEP_Master_Out[2471] = \<const0> ;
  assign LOCKSTEP_Master_Out[2472] = \<const0> ;
  assign LOCKSTEP_Master_Out[2473] = \<const0> ;
  assign LOCKSTEP_Master_Out[2474] = \<const0> ;
  assign LOCKSTEP_Master_Out[2475] = \<const0> ;
  assign LOCKSTEP_Master_Out[2476] = \<const0> ;
  assign LOCKSTEP_Master_Out[2477] = \<const0> ;
  assign LOCKSTEP_Master_Out[2478] = \<const0> ;
  assign LOCKSTEP_Master_Out[2479] = \<const0> ;
  assign LOCKSTEP_Master_Out[2480] = \<const0> ;
  assign LOCKSTEP_Master_Out[2481] = \<const0> ;
  assign LOCKSTEP_Master_Out[2482] = \<const0> ;
  assign LOCKSTEP_Master_Out[2483] = \<const0> ;
  assign LOCKSTEP_Master_Out[2484] = \<const0> ;
  assign LOCKSTEP_Master_Out[2485] = \<const0> ;
  assign LOCKSTEP_Master_Out[2486] = \<const0> ;
  assign LOCKSTEP_Master_Out[2487] = \<const0> ;
  assign LOCKSTEP_Master_Out[2488] = \<const0> ;
  assign LOCKSTEP_Master_Out[2489] = \<const0> ;
  assign LOCKSTEP_Master_Out[2490] = \<const0> ;
  assign LOCKSTEP_Master_Out[2491] = \<const0> ;
  assign LOCKSTEP_Master_Out[2492] = \<const0> ;
  assign LOCKSTEP_Master_Out[2493] = \<const0> ;
  assign LOCKSTEP_Master_Out[2494] = \<const0> ;
  assign LOCKSTEP_Master_Out[2495] = \<const0> ;
  assign LOCKSTEP_Master_Out[2496] = \<const0> ;
  assign LOCKSTEP_Master_Out[2497] = \<const0> ;
  assign LOCKSTEP_Master_Out[2498] = \<const0> ;
  assign LOCKSTEP_Master_Out[2499] = \<const0> ;
  assign LOCKSTEP_Master_Out[2500] = \<const0> ;
  assign LOCKSTEP_Master_Out[2501] = \<const0> ;
  assign LOCKSTEP_Master_Out[2502] = \<const0> ;
  assign LOCKSTEP_Master_Out[2503] = \<const0> ;
  assign LOCKSTEP_Master_Out[2504] = \<const0> ;
  assign LOCKSTEP_Master_Out[2505] = \<const0> ;
  assign LOCKSTEP_Master_Out[2506] = \<const0> ;
  assign LOCKSTEP_Master_Out[2507] = \<const0> ;
  assign LOCKSTEP_Master_Out[2508] = \<const0> ;
  assign LOCKSTEP_Master_Out[2509] = \<const0> ;
  assign LOCKSTEP_Master_Out[2510] = \<const0> ;
  assign LOCKSTEP_Master_Out[2511] = \<const0> ;
  assign LOCKSTEP_Master_Out[2512] = \<const0> ;
  assign LOCKSTEP_Master_Out[2513] = \<const0> ;
  assign LOCKSTEP_Master_Out[2514] = \<const0> ;
  assign LOCKSTEP_Master_Out[2515] = \<const0> ;
  assign LOCKSTEP_Master_Out[2516] = \<const0> ;
  assign LOCKSTEP_Master_Out[2517] = \<const0> ;
  assign LOCKSTEP_Master_Out[2518] = \<const0> ;
  assign LOCKSTEP_Master_Out[2519] = \<const0> ;
  assign LOCKSTEP_Master_Out[2520] = \<const0> ;
  assign LOCKSTEP_Master_Out[2521] = \<const0> ;
  assign LOCKSTEP_Master_Out[2522] = \<const0> ;
  assign LOCKSTEP_Master_Out[2523] = \<const0> ;
  assign LOCKSTEP_Master_Out[2524] = \<const0> ;
  assign LOCKSTEP_Master_Out[2525] = \<const0> ;
  assign LOCKSTEP_Master_Out[2526] = \<const0> ;
  assign LOCKSTEP_Master_Out[2527] = \<const0> ;
  assign LOCKSTEP_Master_Out[2528] = \<const0> ;
  assign LOCKSTEP_Master_Out[2529] = \<const0> ;
  assign LOCKSTEP_Master_Out[2530] = \<const0> ;
  assign LOCKSTEP_Master_Out[2531] = \<const0> ;
  assign LOCKSTEP_Master_Out[2532] = \<const0> ;
  assign LOCKSTEP_Master_Out[2533] = \<const0> ;
  assign LOCKSTEP_Master_Out[2534] = \<const0> ;
  assign LOCKSTEP_Master_Out[2535] = \<const0> ;
  assign LOCKSTEP_Master_Out[2536] = \<const0> ;
  assign LOCKSTEP_Master_Out[2537] = \<const0> ;
  assign LOCKSTEP_Master_Out[2538] = \<const0> ;
  assign LOCKSTEP_Master_Out[2539] = \<const0> ;
  assign LOCKSTEP_Master_Out[2540] = \<const0> ;
  assign LOCKSTEP_Master_Out[2541] = \<const0> ;
  assign LOCKSTEP_Master_Out[2542] = \<const0> ;
  assign LOCKSTEP_Master_Out[2543] = \<const0> ;
  assign LOCKSTEP_Master_Out[2544] = \<const0> ;
  assign LOCKSTEP_Master_Out[2545] = \<const0> ;
  assign LOCKSTEP_Master_Out[2546] = \<const0> ;
  assign LOCKSTEP_Master_Out[2547] = \<const0> ;
  assign LOCKSTEP_Master_Out[2548] = \<const0> ;
  assign LOCKSTEP_Master_Out[2549] = \<const0> ;
  assign LOCKSTEP_Master_Out[2550] = \<const0> ;
  assign LOCKSTEP_Master_Out[2551] = \<const0> ;
  assign LOCKSTEP_Master_Out[2552] = \<const0> ;
  assign LOCKSTEP_Master_Out[2553] = \<const0> ;
  assign LOCKSTEP_Master_Out[2554] = \<const0> ;
  assign LOCKSTEP_Master_Out[2555] = \<const0> ;
  assign LOCKSTEP_Master_Out[2556] = \<const0> ;
  assign LOCKSTEP_Master_Out[2557] = \<const0> ;
  assign LOCKSTEP_Master_Out[2558] = \<const0> ;
  assign LOCKSTEP_Master_Out[2559] = \<const0> ;
  assign LOCKSTEP_Master_Out[2560] = \<const0> ;
  assign LOCKSTEP_Master_Out[2561] = \<const0> ;
  assign LOCKSTEP_Master_Out[2562] = \<const0> ;
  assign LOCKSTEP_Master_Out[2563] = \<const0> ;
  assign LOCKSTEP_Master_Out[2564] = \<const0> ;
  assign LOCKSTEP_Master_Out[2565] = \<const0> ;
  assign LOCKSTEP_Master_Out[2566] = \<const0> ;
  assign LOCKSTEP_Master_Out[2567] = \<const0> ;
  assign LOCKSTEP_Master_Out[2568] = \<const0> ;
  assign LOCKSTEP_Master_Out[2569] = \<const0> ;
  assign LOCKSTEP_Master_Out[2570] = \<const0> ;
  assign LOCKSTEP_Master_Out[2571] = \<const0> ;
  assign LOCKSTEP_Master_Out[2572] = \<const0> ;
  assign LOCKSTEP_Master_Out[2573] = \<const0> ;
  assign LOCKSTEP_Master_Out[2574] = \<const0> ;
  assign LOCKSTEP_Master_Out[2575] = \<const0> ;
  assign LOCKSTEP_Master_Out[2576] = \<const0> ;
  assign LOCKSTEP_Master_Out[2577] = \<const0> ;
  assign LOCKSTEP_Master_Out[2578] = \<const0> ;
  assign LOCKSTEP_Master_Out[2579] = \<const0> ;
  assign LOCKSTEP_Master_Out[2580] = \<const0> ;
  assign LOCKSTEP_Master_Out[2581] = \<const0> ;
  assign LOCKSTEP_Master_Out[2582] = \<const0> ;
  assign LOCKSTEP_Master_Out[2583] = \<const0> ;
  assign LOCKSTEP_Master_Out[2584] = \<const0> ;
  assign LOCKSTEP_Master_Out[2585] = \<const0> ;
  assign LOCKSTEP_Master_Out[2586] = \<const0> ;
  assign LOCKSTEP_Master_Out[2587] = \<const0> ;
  assign LOCKSTEP_Master_Out[2588] = \<const0> ;
  assign LOCKSTEP_Master_Out[2589] = \<const0> ;
  assign LOCKSTEP_Master_Out[2590] = \<const0> ;
  assign LOCKSTEP_Master_Out[2591] = \<const0> ;
  assign LOCKSTEP_Master_Out[2592] = \<const0> ;
  assign LOCKSTEP_Master_Out[2593] = \<const0> ;
  assign LOCKSTEP_Master_Out[2594] = \<const0> ;
  assign LOCKSTEP_Master_Out[2595] = \<const0> ;
  assign LOCKSTEP_Master_Out[2596] = \<const0> ;
  assign LOCKSTEP_Master_Out[2597] = \<const0> ;
  assign LOCKSTEP_Master_Out[2598] = \<const0> ;
  assign LOCKSTEP_Master_Out[2599] = \<const0> ;
  assign LOCKSTEP_Master_Out[2600] = \<const0> ;
  assign LOCKSTEP_Master_Out[2601] = \<const0> ;
  assign LOCKSTEP_Master_Out[2602] = \<const0> ;
  assign LOCKSTEP_Master_Out[2603] = \<const0> ;
  assign LOCKSTEP_Master_Out[2604] = \<const0> ;
  assign LOCKSTEP_Master_Out[2605] = \<const0> ;
  assign LOCKSTEP_Master_Out[2606] = \<const0> ;
  assign LOCKSTEP_Master_Out[2607] = \<const0> ;
  assign LOCKSTEP_Master_Out[2608] = \<const0> ;
  assign LOCKSTEP_Master_Out[2609] = \<const0> ;
  assign LOCKSTEP_Master_Out[2610] = \<const0> ;
  assign LOCKSTEP_Master_Out[2611] = \<const0> ;
  assign LOCKSTEP_Master_Out[2612] = \<const0> ;
  assign LOCKSTEP_Master_Out[2613] = \<const0> ;
  assign LOCKSTEP_Master_Out[2614] = \<const0> ;
  assign LOCKSTEP_Master_Out[2615] = \<const0> ;
  assign LOCKSTEP_Master_Out[2616] = \<const0> ;
  assign LOCKSTEP_Master_Out[2617] = \<const0> ;
  assign LOCKSTEP_Master_Out[2618] = \<const0> ;
  assign LOCKSTEP_Master_Out[2619] = \<const0> ;
  assign LOCKSTEP_Master_Out[2620] = \<const0> ;
  assign LOCKSTEP_Master_Out[2621] = \<const0> ;
  assign LOCKSTEP_Master_Out[2622] = \<const0> ;
  assign LOCKSTEP_Master_Out[2623] = \<const0> ;
  assign LOCKSTEP_Master_Out[2624] = \<const0> ;
  assign LOCKSTEP_Master_Out[2625] = \<const0> ;
  assign LOCKSTEP_Master_Out[2626] = \<const0> ;
  assign LOCKSTEP_Master_Out[2627] = \<const0> ;
  assign LOCKSTEP_Master_Out[2628] = \<const0> ;
  assign LOCKSTEP_Master_Out[2629] = \<const0> ;
  assign LOCKSTEP_Master_Out[2630] = \<const0> ;
  assign LOCKSTEP_Master_Out[2631] = \<const0> ;
  assign LOCKSTEP_Master_Out[2632] = \<const0> ;
  assign LOCKSTEP_Master_Out[2633] = \<const0> ;
  assign LOCKSTEP_Master_Out[2634] = \<const0> ;
  assign LOCKSTEP_Master_Out[2635] = \<const0> ;
  assign LOCKSTEP_Master_Out[2636] = \<const0> ;
  assign LOCKSTEP_Master_Out[2637] = \<const0> ;
  assign LOCKSTEP_Master_Out[2638] = \<const0> ;
  assign LOCKSTEP_Master_Out[2639] = \<const0> ;
  assign LOCKSTEP_Master_Out[2640] = \<const0> ;
  assign LOCKSTEP_Master_Out[2641] = \<const0> ;
  assign LOCKSTEP_Master_Out[2642] = \<const0> ;
  assign LOCKSTEP_Master_Out[2643] = \<const0> ;
  assign LOCKSTEP_Master_Out[2644] = \<const0> ;
  assign LOCKSTEP_Master_Out[2645] = \<const0> ;
  assign LOCKSTEP_Master_Out[2646] = \<const0> ;
  assign LOCKSTEP_Master_Out[2647] = \<const0> ;
  assign LOCKSTEP_Master_Out[2648] = \<const0> ;
  assign LOCKSTEP_Master_Out[2649] = \<const0> ;
  assign LOCKSTEP_Master_Out[2650] = \<const0> ;
  assign LOCKSTEP_Master_Out[2651] = \<const0> ;
  assign LOCKSTEP_Master_Out[2652] = \<const0> ;
  assign LOCKSTEP_Master_Out[2653] = \<const0> ;
  assign LOCKSTEP_Master_Out[2654] = \<const0> ;
  assign LOCKSTEP_Master_Out[2655] = \<const0> ;
  assign LOCKSTEP_Master_Out[2656] = \<const0> ;
  assign LOCKSTEP_Master_Out[2657] = \<const0> ;
  assign LOCKSTEP_Master_Out[2658] = \<const0> ;
  assign LOCKSTEP_Master_Out[2659] = \<const0> ;
  assign LOCKSTEP_Master_Out[2660] = \<const0> ;
  assign LOCKSTEP_Master_Out[2661] = \<const0> ;
  assign LOCKSTEP_Master_Out[2662] = \<const0> ;
  assign LOCKSTEP_Master_Out[2663] = \<const0> ;
  assign LOCKSTEP_Master_Out[2664] = \<const0> ;
  assign LOCKSTEP_Master_Out[2665] = \<const0> ;
  assign LOCKSTEP_Master_Out[2666] = \<const0> ;
  assign LOCKSTEP_Master_Out[2667] = \<const0> ;
  assign LOCKSTEP_Master_Out[2668] = \<const0> ;
  assign LOCKSTEP_Master_Out[2669] = \<const0> ;
  assign LOCKSTEP_Master_Out[2670] = \<const0> ;
  assign LOCKSTEP_Master_Out[2671] = \<const0> ;
  assign LOCKSTEP_Master_Out[2672] = \<const0> ;
  assign LOCKSTEP_Master_Out[2673] = \<const0> ;
  assign LOCKSTEP_Master_Out[2674] = \<const0> ;
  assign LOCKSTEP_Master_Out[2675] = \<const0> ;
  assign LOCKSTEP_Master_Out[2676] = \<const0> ;
  assign LOCKSTEP_Master_Out[2677] = \<const0> ;
  assign LOCKSTEP_Master_Out[2678] = \<const0> ;
  assign LOCKSTEP_Master_Out[2679] = \<const0> ;
  assign LOCKSTEP_Master_Out[2680] = \<const0> ;
  assign LOCKSTEP_Master_Out[2681] = \<const0> ;
  assign LOCKSTEP_Master_Out[2682] = \<const0> ;
  assign LOCKSTEP_Master_Out[2683] = \<const0> ;
  assign LOCKSTEP_Master_Out[2684] = \<const0> ;
  assign LOCKSTEP_Master_Out[2685] = \<const0> ;
  assign LOCKSTEP_Master_Out[2686] = \<const0> ;
  assign LOCKSTEP_Master_Out[2687] = \<const0> ;
  assign LOCKSTEP_Master_Out[2688] = \<const0> ;
  assign LOCKSTEP_Master_Out[2689] = \<const0> ;
  assign LOCKSTEP_Master_Out[2690] = \<const0> ;
  assign LOCKSTEP_Master_Out[2691] = \<const0> ;
  assign LOCKSTEP_Master_Out[2692] = \<const0> ;
  assign LOCKSTEP_Master_Out[2693] = \<const0> ;
  assign LOCKSTEP_Master_Out[2694] = \<const0> ;
  assign LOCKSTEP_Master_Out[2695] = \<const0> ;
  assign LOCKSTEP_Master_Out[2696] = \<const0> ;
  assign LOCKSTEP_Master_Out[2697] = \<const0> ;
  assign LOCKSTEP_Master_Out[2698] = \<const0> ;
  assign LOCKSTEP_Master_Out[2699] = \<const0> ;
  assign LOCKSTEP_Master_Out[2700] = \<const0> ;
  assign LOCKSTEP_Master_Out[2701] = \<const0> ;
  assign LOCKSTEP_Master_Out[2702] = \<const0> ;
  assign LOCKSTEP_Master_Out[2703] = \<const0> ;
  assign LOCKSTEP_Master_Out[2704] = \<const0> ;
  assign LOCKSTEP_Master_Out[2705] = \<const0> ;
  assign LOCKSTEP_Master_Out[2706] = \<const0> ;
  assign LOCKSTEP_Master_Out[2707] = \<const0> ;
  assign LOCKSTEP_Master_Out[2708] = \<const0> ;
  assign LOCKSTEP_Master_Out[2709] = \<const0> ;
  assign LOCKSTEP_Master_Out[2710] = \<const0> ;
  assign LOCKSTEP_Master_Out[2711] = \<const0> ;
  assign LOCKSTEP_Master_Out[2712] = \<const0> ;
  assign LOCKSTEP_Master_Out[2713] = \<const0> ;
  assign LOCKSTEP_Master_Out[2714] = \<const0> ;
  assign LOCKSTEP_Master_Out[2715] = \<const0> ;
  assign LOCKSTEP_Master_Out[2716] = \<const0> ;
  assign LOCKSTEP_Master_Out[2717] = \<const0> ;
  assign LOCKSTEP_Master_Out[2718] = \<const0> ;
  assign LOCKSTEP_Master_Out[2719] = \<const0> ;
  assign LOCKSTEP_Master_Out[2720] = \<const0> ;
  assign LOCKSTEP_Master_Out[2721] = \<const0> ;
  assign LOCKSTEP_Master_Out[2722] = \<const0> ;
  assign LOCKSTEP_Master_Out[2723] = \<const0> ;
  assign LOCKSTEP_Master_Out[2724] = \<const0> ;
  assign LOCKSTEP_Master_Out[2725] = \<const0> ;
  assign LOCKSTEP_Master_Out[2726] = \<const0> ;
  assign LOCKSTEP_Master_Out[2727] = \<const0> ;
  assign LOCKSTEP_Master_Out[2728] = \<const0> ;
  assign LOCKSTEP_Master_Out[2729] = \<const0> ;
  assign LOCKSTEP_Master_Out[2730] = \<const0> ;
  assign LOCKSTEP_Master_Out[2731] = \<const0> ;
  assign LOCKSTEP_Master_Out[2732] = \<const0> ;
  assign LOCKSTEP_Master_Out[2733] = \<const0> ;
  assign LOCKSTEP_Master_Out[2734] = \<const0> ;
  assign LOCKSTEP_Master_Out[2735] = \<const0> ;
  assign LOCKSTEP_Master_Out[2736] = \<const0> ;
  assign LOCKSTEP_Master_Out[2737] = \<const0> ;
  assign LOCKSTEP_Master_Out[2738] = \<const0> ;
  assign LOCKSTEP_Master_Out[2739] = \<const0> ;
  assign LOCKSTEP_Master_Out[2740] = \<const0> ;
  assign LOCKSTEP_Master_Out[2741] = \<const0> ;
  assign LOCKSTEP_Master_Out[2742] = \<const0> ;
  assign LOCKSTEP_Master_Out[2743] = \<const0> ;
  assign LOCKSTEP_Master_Out[2744] = \<const0> ;
  assign LOCKSTEP_Master_Out[2745] = \<const0> ;
  assign LOCKSTEP_Master_Out[2746] = \<const0> ;
  assign LOCKSTEP_Master_Out[2747] = \<const0> ;
  assign LOCKSTEP_Master_Out[2748] = \<const0> ;
  assign LOCKSTEP_Master_Out[2749] = \<const0> ;
  assign LOCKSTEP_Master_Out[2750] = \<const0> ;
  assign LOCKSTEP_Master_Out[2751] = \<const0> ;
  assign LOCKSTEP_Master_Out[2752] = \<const0> ;
  assign LOCKSTEP_Master_Out[2753] = \<const0> ;
  assign LOCKSTEP_Master_Out[2754] = \<const0> ;
  assign LOCKSTEP_Master_Out[2755] = \<const0> ;
  assign LOCKSTEP_Master_Out[2756] = \<const0> ;
  assign LOCKSTEP_Master_Out[2757] = \<const0> ;
  assign LOCKSTEP_Master_Out[2758] = \<const0> ;
  assign LOCKSTEP_Master_Out[2759] = \<const0> ;
  assign LOCKSTEP_Master_Out[2760] = \<const0> ;
  assign LOCKSTEP_Master_Out[2761] = \<const0> ;
  assign LOCKSTEP_Master_Out[2762] = \<const0> ;
  assign LOCKSTEP_Master_Out[2763] = \<const0> ;
  assign LOCKSTEP_Master_Out[2764] = \<const0> ;
  assign LOCKSTEP_Master_Out[2765] = \<const0> ;
  assign LOCKSTEP_Master_Out[2766] = \<const0> ;
  assign LOCKSTEP_Master_Out[2767] = \<const0> ;
  assign LOCKSTEP_Master_Out[2768] = \<const0> ;
  assign LOCKSTEP_Master_Out[2769] = \<const0> ;
  assign LOCKSTEP_Master_Out[2770] = \<const0> ;
  assign LOCKSTEP_Master_Out[2771] = \<const0> ;
  assign LOCKSTEP_Master_Out[2772] = \<const0> ;
  assign LOCKSTEP_Master_Out[2773] = \<const0> ;
  assign LOCKSTEP_Master_Out[2774] = \<const0> ;
  assign LOCKSTEP_Master_Out[2775] = \<const0> ;
  assign LOCKSTEP_Master_Out[2776] = \<const0> ;
  assign LOCKSTEP_Master_Out[2777] = \<const0> ;
  assign LOCKSTEP_Master_Out[2778] = \<const0> ;
  assign LOCKSTEP_Master_Out[2779] = \<const0> ;
  assign LOCKSTEP_Master_Out[2780] = \<const0> ;
  assign LOCKSTEP_Master_Out[2781] = \<const0> ;
  assign LOCKSTEP_Master_Out[2782] = \<const0> ;
  assign LOCKSTEP_Master_Out[2783] = \<const0> ;
  assign LOCKSTEP_Master_Out[2784] = \<const0> ;
  assign LOCKSTEP_Master_Out[2785] = \<const0> ;
  assign LOCKSTEP_Master_Out[2786] = \<const0> ;
  assign LOCKSTEP_Master_Out[2787] = \<const0> ;
  assign LOCKSTEP_Master_Out[2788] = \<const0> ;
  assign LOCKSTEP_Master_Out[2789] = \<const0> ;
  assign LOCKSTEP_Master_Out[2790] = \<const0> ;
  assign LOCKSTEP_Master_Out[2791] = \<const0> ;
  assign LOCKSTEP_Master_Out[2792] = \<const0> ;
  assign LOCKSTEP_Master_Out[2793] = \<const0> ;
  assign LOCKSTEP_Master_Out[2794] = \<const0> ;
  assign LOCKSTEP_Master_Out[2795] = \<const0> ;
  assign LOCKSTEP_Master_Out[2796] = \<const0> ;
  assign LOCKSTEP_Master_Out[2797] = \<const0> ;
  assign LOCKSTEP_Master_Out[2798] = \<const0> ;
  assign LOCKSTEP_Master_Out[2799] = \<const0> ;
  assign LOCKSTEP_Master_Out[2800] = \<const0> ;
  assign LOCKSTEP_Master_Out[2801] = \<const0> ;
  assign LOCKSTEP_Master_Out[2802] = \<const0> ;
  assign LOCKSTEP_Master_Out[2803] = \<const0> ;
  assign LOCKSTEP_Master_Out[2804] = \<const0> ;
  assign LOCKSTEP_Master_Out[2805] = \<const0> ;
  assign LOCKSTEP_Master_Out[2806] = \<const0> ;
  assign LOCKSTEP_Master_Out[2807] = \<const0> ;
  assign LOCKSTEP_Master_Out[2808] = \<const0> ;
  assign LOCKSTEP_Master_Out[2809] = \<const0> ;
  assign LOCKSTEP_Master_Out[2810] = \<const0> ;
  assign LOCKSTEP_Master_Out[2811] = \<const0> ;
  assign LOCKSTEP_Master_Out[2812] = \<const0> ;
  assign LOCKSTEP_Master_Out[2813] = \<const0> ;
  assign LOCKSTEP_Master_Out[2814] = \<const0> ;
  assign LOCKSTEP_Master_Out[2815] = \<const0> ;
  assign LOCKSTEP_Master_Out[2816] = \<const0> ;
  assign LOCKSTEP_Master_Out[2817] = \<const0> ;
  assign LOCKSTEP_Master_Out[2818] = \<const0> ;
  assign LOCKSTEP_Master_Out[2819] = \<const0> ;
  assign LOCKSTEP_Master_Out[2820] = \<const0> ;
  assign LOCKSTEP_Master_Out[2821] = \<const0> ;
  assign LOCKSTEP_Master_Out[2822] = \<const0> ;
  assign LOCKSTEP_Master_Out[2823] = \<const0> ;
  assign LOCKSTEP_Master_Out[2824] = \<const0> ;
  assign LOCKSTEP_Master_Out[2825] = \<const0> ;
  assign LOCKSTEP_Master_Out[2826] = \<const0> ;
  assign LOCKSTEP_Master_Out[2827] = \<const0> ;
  assign LOCKSTEP_Master_Out[2828] = \<const0> ;
  assign LOCKSTEP_Master_Out[2829] = \<const0> ;
  assign LOCKSTEP_Master_Out[2830] = \<const0> ;
  assign LOCKSTEP_Master_Out[2831] = \<const0> ;
  assign LOCKSTEP_Master_Out[2832] = \<const0> ;
  assign LOCKSTEP_Master_Out[2833] = \<const0> ;
  assign LOCKSTEP_Master_Out[2834] = \<const0> ;
  assign LOCKSTEP_Master_Out[2835] = \<const0> ;
  assign LOCKSTEP_Master_Out[2836] = \<const0> ;
  assign LOCKSTEP_Master_Out[2837] = \<const0> ;
  assign LOCKSTEP_Master_Out[2838] = \<const0> ;
  assign LOCKSTEP_Master_Out[2839] = \<const0> ;
  assign LOCKSTEP_Master_Out[2840] = \<const0> ;
  assign LOCKSTEP_Master_Out[2841] = \<const0> ;
  assign LOCKSTEP_Master_Out[2842] = \<const0> ;
  assign LOCKSTEP_Master_Out[2843] = \<const0> ;
  assign LOCKSTEP_Master_Out[2844] = \<const0> ;
  assign LOCKSTEP_Master_Out[2845] = \<const0> ;
  assign LOCKSTEP_Master_Out[2846] = \<const0> ;
  assign LOCKSTEP_Master_Out[2847] = \<const0> ;
  assign LOCKSTEP_Master_Out[2848] = \<const0> ;
  assign LOCKSTEP_Master_Out[2849] = \<const0> ;
  assign LOCKSTEP_Master_Out[2850] = \<const0> ;
  assign LOCKSTEP_Master_Out[2851] = \<const0> ;
  assign LOCKSTEP_Master_Out[2852] = \<const0> ;
  assign LOCKSTEP_Master_Out[2853] = \<const0> ;
  assign LOCKSTEP_Master_Out[2854] = \<const0> ;
  assign LOCKSTEP_Master_Out[2855] = \<const0> ;
  assign LOCKSTEP_Master_Out[2856] = \<const0> ;
  assign LOCKSTEP_Master_Out[2857] = \<const0> ;
  assign LOCKSTEP_Master_Out[2858] = \<const0> ;
  assign LOCKSTEP_Master_Out[2859] = \<const0> ;
  assign LOCKSTEP_Master_Out[2860] = \<const0> ;
  assign LOCKSTEP_Master_Out[2861] = \<const0> ;
  assign LOCKSTEP_Master_Out[2862] = \<const0> ;
  assign LOCKSTEP_Master_Out[2863] = \<const0> ;
  assign LOCKSTEP_Master_Out[2864] = \<const0> ;
  assign LOCKSTEP_Master_Out[2865] = \<const0> ;
  assign LOCKSTEP_Master_Out[2866] = \<const0> ;
  assign LOCKSTEP_Master_Out[2867] = \<const0> ;
  assign LOCKSTEP_Master_Out[2868] = \<const0> ;
  assign LOCKSTEP_Master_Out[2869] = \<const0> ;
  assign LOCKSTEP_Master_Out[2870] = \<const0> ;
  assign LOCKSTEP_Master_Out[2871] = \<const0> ;
  assign LOCKSTEP_Master_Out[2872] = \<const0> ;
  assign LOCKSTEP_Master_Out[2873] = \<const0> ;
  assign LOCKSTEP_Master_Out[2874] = \<const0> ;
  assign LOCKSTEP_Master_Out[2875] = \<const0> ;
  assign LOCKSTEP_Master_Out[2876] = \<const0> ;
  assign LOCKSTEP_Master_Out[2877] = \<const0> ;
  assign LOCKSTEP_Master_Out[2878] = \<const0> ;
  assign LOCKSTEP_Master_Out[2879] = \<const0> ;
  assign LOCKSTEP_Master_Out[2880] = \<const0> ;
  assign LOCKSTEP_Master_Out[2881] = \<const0> ;
  assign LOCKSTEP_Master_Out[2882] = \<const0> ;
  assign LOCKSTEP_Master_Out[2883] = \<const0> ;
  assign LOCKSTEP_Master_Out[2884] = \<const0> ;
  assign LOCKSTEP_Master_Out[2885] = \<const0> ;
  assign LOCKSTEP_Master_Out[2886] = \<const0> ;
  assign LOCKSTEP_Master_Out[2887] = \<const0> ;
  assign LOCKSTEP_Master_Out[2888] = \<const0> ;
  assign LOCKSTEP_Master_Out[2889] = \<const0> ;
  assign LOCKSTEP_Master_Out[2890] = \<const0> ;
  assign LOCKSTEP_Master_Out[2891] = \<const0> ;
  assign LOCKSTEP_Master_Out[2892] = \<const0> ;
  assign LOCKSTEP_Master_Out[2893] = \<const0> ;
  assign LOCKSTEP_Master_Out[2894] = \<const0> ;
  assign LOCKSTEP_Master_Out[2895] = \<const0> ;
  assign LOCKSTEP_Master_Out[2896] = \<const0> ;
  assign LOCKSTEP_Master_Out[2897] = \<const0> ;
  assign LOCKSTEP_Master_Out[2898] = \<const0> ;
  assign LOCKSTEP_Master_Out[2899] = \<const0> ;
  assign LOCKSTEP_Master_Out[2900] = \<const0> ;
  assign LOCKSTEP_Master_Out[2901] = \<const0> ;
  assign LOCKSTEP_Master_Out[2902] = \<const0> ;
  assign LOCKSTEP_Master_Out[2903] = \<const0> ;
  assign LOCKSTEP_Master_Out[2904] = \<const0> ;
  assign LOCKSTEP_Master_Out[2905] = \<const0> ;
  assign LOCKSTEP_Master_Out[2906] = \<const0> ;
  assign LOCKSTEP_Master_Out[2907] = \<const0> ;
  assign LOCKSTEP_Master_Out[2908] = \<const0> ;
  assign LOCKSTEP_Master_Out[2909] = \<const0> ;
  assign LOCKSTEP_Master_Out[2910] = \<const0> ;
  assign LOCKSTEP_Master_Out[2911] = \<const0> ;
  assign LOCKSTEP_Master_Out[2912] = \<const0> ;
  assign LOCKSTEP_Master_Out[2913] = \<const0> ;
  assign LOCKSTEP_Master_Out[2914] = \<const0> ;
  assign LOCKSTEP_Master_Out[2915] = \<const0> ;
  assign LOCKSTEP_Master_Out[2916] = \<const0> ;
  assign LOCKSTEP_Master_Out[2917] = \<const0> ;
  assign LOCKSTEP_Master_Out[2918] = \<const0> ;
  assign LOCKSTEP_Master_Out[2919] = \<const0> ;
  assign LOCKSTEP_Master_Out[2920] = \<const0> ;
  assign LOCKSTEP_Master_Out[2921] = \<const0> ;
  assign LOCKSTEP_Master_Out[2922] = \<const0> ;
  assign LOCKSTEP_Master_Out[2923] = \<const0> ;
  assign LOCKSTEP_Master_Out[2924] = \<const0> ;
  assign LOCKSTEP_Master_Out[2925] = \<const0> ;
  assign LOCKSTEP_Master_Out[2926] = \<const0> ;
  assign LOCKSTEP_Master_Out[2927] = \<const0> ;
  assign LOCKSTEP_Master_Out[2928] = \<const0> ;
  assign LOCKSTEP_Master_Out[2929] = \<const0> ;
  assign LOCKSTEP_Master_Out[2930] = \<const0> ;
  assign LOCKSTEP_Master_Out[2931] = \<const0> ;
  assign LOCKSTEP_Master_Out[2932] = \<const0> ;
  assign LOCKSTEP_Master_Out[2933] = \<const0> ;
  assign LOCKSTEP_Master_Out[2934] = \<const0> ;
  assign LOCKSTEP_Master_Out[2935] = \<const0> ;
  assign LOCKSTEP_Master_Out[2936] = \<const0> ;
  assign LOCKSTEP_Master_Out[2937] = \<const0> ;
  assign LOCKSTEP_Master_Out[2938] = \<const0> ;
  assign LOCKSTEP_Master_Out[2939] = \<const0> ;
  assign LOCKSTEP_Master_Out[2940] = \<const0> ;
  assign LOCKSTEP_Master_Out[2941] = \<const0> ;
  assign LOCKSTEP_Master_Out[2942] = \<const0> ;
  assign LOCKSTEP_Master_Out[2943] = \<const0> ;
  assign LOCKSTEP_Master_Out[2944] = \<const0> ;
  assign LOCKSTEP_Master_Out[2945] = \<const0> ;
  assign LOCKSTEP_Master_Out[2946] = \<const0> ;
  assign LOCKSTEP_Master_Out[2947] = \<const0> ;
  assign LOCKSTEP_Master_Out[2948] = \<const0> ;
  assign LOCKSTEP_Master_Out[2949] = \<const0> ;
  assign LOCKSTEP_Master_Out[2950] = \<const0> ;
  assign LOCKSTEP_Master_Out[2951] = \<const0> ;
  assign LOCKSTEP_Master_Out[2952] = \<const0> ;
  assign LOCKSTEP_Master_Out[2953] = \<const0> ;
  assign LOCKSTEP_Master_Out[2954] = \<const0> ;
  assign LOCKSTEP_Master_Out[2955] = \<const0> ;
  assign LOCKSTEP_Master_Out[2956] = \<const0> ;
  assign LOCKSTEP_Master_Out[2957] = \<const0> ;
  assign LOCKSTEP_Master_Out[2958] = \<const0> ;
  assign LOCKSTEP_Master_Out[2959] = \<const0> ;
  assign LOCKSTEP_Master_Out[2960] = \<const0> ;
  assign LOCKSTEP_Master_Out[2961] = \<const0> ;
  assign LOCKSTEP_Master_Out[2962] = \<const0> ;
  assign LOCKSTEP_Master_Out[2963] = \<const0> ;
  assign LOCKSTEP_Master_Out[2964] = \<const0> ;
  assign LOCKSTEP_Master_Out[2965] = \<const0> ;
  assign LOCKSTEP_Master_Out[2966] = \<const0> ;
  assign LOCKSTEP_Master_Out[2967] = \<const0> ;
  assign LOCKSTEP_Master_Out[2968] = \<const0> ;
  assign LOCKSTEP_Master_Out[2969] = \<const0> ;
  assign LOCKSTEP_Master_Out[2970] = \<const0> ;
  assign LOCKSTEP_Master_Out[2971] = \<const0> ;
  assign LOCKSTEP_Master_Out[2972] = \<const0> ;
  assign LOCKSTEP_Master_Out[2973] = \<const0> ;
  assign LOCKSTEP_Master_Out[2974] = \<const0> ;
  assign LOCKSTEP_Master_Out[2975] = \<const0> ;
  assign LOCKSTEP_Master_Out[2976] = \<const0> ;
  assign LOCKSTEP_Master_Out[2977] = \<const0> ;
  assign LOCKSTEP_Master_Out[2978] = \<const0> ;
  assign LOCKSTEP_Master_Out[2979] = \<const0> ;
  assign LOCKSTEP_Master_Out[2980] = \<const0> ;
  assign LOCKSTEP_Master_Out[2981] = \<const0> ;
  assign LOCKSTEP_Master_Out[2982] = \<const0> ;
  assign LOCKSTEP_Master_Out[2983] = \<const0> ;
  assign LOCKSTEP_Master_Out[2984] = \<const0> ;
  assign LOCKSTEP_Master_Out[2985] = \<const0> ;
  assign LOCKSTEP_Master_Out[2986] = \<const0> ;
  assign LOCKSTEP_Master_Out[2987] = \<const0> ;
  assign LOCKSTEP_Master_Out[2988] = \<const0> ;
  assign LOCKSTEP_Master_Out[2989] = \<const0> ;
  assign LOCKSTEP_Master_Out[2990] = \<const0> ;
  assign LOCKSTEP_Master_Out[2991] = \<const0> ;
  assign LOCKSTEP_Master_Out[2992] = \<const0> ;
  assign LOCKSTEP_Master_Out[2993] = \<const0> ;
  assign LOCKSTEP_Master_Out[2994] = \<const0> ;
  assign LOCKSTEP_Master_Out[2995] = \<const0> ;
  assign LOCKSTEP_Master_Out[2996] = \<const0> ;
  assign LOCKSTEP_Master_Out[2997] = \<const0> ;
  assign LOCKSTEP_Master_Out[2998] = \<const0> ;
  assign LOCKSTEP_Master_Out[2999] = \<const0> ;
  assign LOCKSTEP_Master_Out[3000] = \<const0> ;
  assign LOCKSTEP_Master_Out[3001] = \<const0> ;
  assign LOCKSTEP_Master_Out[3002] = \<const0> ;
  assign LOCKSTEP_Master_Out[3003] = \<const0> ;
  assign LOCKSTEP_Master_Out[3004] = \<const0> ;
  assign LOCKSTEP_Master_Out[3005] = \<const0> ;
  assign LOCKSTEP_Master_Out[3006] = \<const0> ;
  assign LOCKSTEP_Master_Out[3007] = \<const0> ;
  assign LOCKSTEP_Master_Out[3008] = \<const0> ;
  assign LOCKSTEP_Master_Out[3009] = \<const0> ;
  assign LOCKSTEP_Master_Out[3010] = \<const0> ;
  assign LOCKSTEP_Master_Out[3011] = \<const0> ;
  assign LOCKSTEP_Master_Out[3012] = \<const0> ;
  assign LOCKSTEP_Master_Out[3013] = \<const0> ;
  assign LOCKSTEP_Master_Out[3014] = \<const0> ;
  assign LOCKSTEP_Master_Out[3015] = \<const0> ;
  assign LOCKSTEP_Master_Out[3016] = \<const0> ;
  assign LOCKSTEP_Master_Out[3017] = \<const0> ;
  assign LOCKSTEP_Master_Out[3018] = \<const0> ;
  assign LOCKSTEP_Master_Out[3019] = \<const0> ;
  assign LOCKSTEP_Master_Out[3020] = \<const0> ;
  assign LOCKSTEP_Master_Out[3021] = \<const0> ;
  assign LOCKSTEP_Master_Out[3022] = \<const0> ;
  assign LOCKSTEP_Master_Out[3023] = \<const0> ;
  assign LOCKSTEP_Master_Out[3024] = \<const0> ;
  assign LOCKSTEP_Master_Out[3025] = \<const0> ;
  assign LOCKSTEP_Master_Out[3026] = \<const0> ;
  assign LOCKSTEP_Master_Out[3027] = \<const0> ;
  assign LOCKSTEP_Master_Out[3028] = \<const0> ;
  assign LOCKSTEP_Master_Out[3029] = \<const0> ;
  assign LOCKSTEP_Master_Out[3030] = \<const0> ;
  assign LOCKSTEP_Master_Out[3031] = \<const0> ;
  assign LOCKSTEP_Master_Out[3032] = \<const0> ;
  assign LOCKSTEP_Master_Out[3033] = \<const0> ;
  assign LOCKSTEP_Master_Out[3034] = \<const0> ;
  assign LOCKSTEP_Master_Out[3035] = \<const0> ;
  assign LOCKSTEP_Master_Out[3036] = \<const0> ;
  assign LOCKSTEP_Master_Out[3037] = \<const0> ;
  assign LOCKSTEP_Master_Out[3038] = \<const0> ;
  assign LOCKSTEP_Master_Out[3039] = \<const0> ;
  assign LOCKSTEP_Master_Out[3040] = \<const0> ;
  assign LOCKSTEP_Master_Out[3041] = \<const0> ;
  assign LOCKSTEP_Master_Out[3042] = \<const0> ;
  assign LOCKSTEP_Master_Out[3043] = \<const0> ;
  assign LOCKSTEP_Master_Out[3044] = \<const0> ;
  assign LOCKSTEP_Master_Out[3045] = \<const0> ;
  assign LOCKSTEP_Master_Out[3046] = \<const0> ;
  assign LOCKSTEP_Master_Out[3047] = \<const0> ;
  assign LOCKSTEP_Master_Out[3048] = \<const0> ;
  assign LOCKSTEP_Master_Out[3049] = \<const0> ;
  assign LOCKSTEP_Master_Out[3050] = \<const0> ;
  assign LOCKSTEP_Master_Out[3051] = \<const0> ;
  assign LOCKSTEP_Master_Out[3052] = \<const0> ;
  assign LOCKSTEP_Master_Out[3053] = \<const0> ;
  assign LOCKSTEP_Master_Out[3054] = \<const0> ;
  assign LOCKSTEP_Master_Out[3055] = \<const0> ;
  assign LOCKSTEP_Master_Out[3056] = \<const0> ;
  assign LOCKSTEP_Master_Out[3057] = \<const0> ;
  assign LOCKSTEP_Master_Out[3058] = \<const0> ;
  assign LOCKSTEP_Master_Out[3059] = \<const0> ;
  assign LOCKSTEP_Master_Out[3060] = \<const0> ;
  assign LOCKSTEP_Master_Out[3061] = \<const0> ;
  assign LOCKSTEP_Master_Out[3062] = \<const0> ;
  assign LOCKSTEP_Master_Out[3063] = \<const0> ;
  assign LOCKSTEP_Master_Out[3064] = \<const0> ;
  assign LOCKSTEP_Master_Out[3065] = \<const0> ;
  assign LOCKSTEP_Master_Out[3066] = \<const0> ;
  assign LOCKSTEP_Master_Out[3067] = \<const0> ;
  assign LOCKSTEP_Master_Out[3068] = \<const0> ;
  assign LOCKSTEP_Master_Out[3069] = \<const0> ;
  assign LOCKSTEP_Master_Out[3070] = \<const0> ;
  assign LOCKSTEP_Master_Out[3071] = \<const0> ;
  assign LOCKSTEP_Master_Out[3072] = \<const0> ;
  assign LOCKSTEP_Master_Out[3073] = \<const0> ;
  assign LOCKSTEP_Master_Out[3074] = \<const0> ;
  assign LOCKSTEP_Master_Out[3075] = \<const0> ;
  assign LOCKSTEP_Master_Out[3076] = \<const0> ;
  assign LOCKSTEP_Master_Out[3077] = \<const0> ;
  assign LOCKSTEP_Master_Out[3078] = \<const0> ;
  assign LOCKSTEP_Master_Out[3079] = \<const0> ;
  assign LOCKSTEP_Master_Out[3080] = \<const0> ;
  assign LOCKSTEP_Master_Out[3081] = \<const0> ;
  assign LOCKSTEP_Master_Out[3082] = \<const0> ;
  assign LOCKSTEP_Master_Out[3083] = \<const0> ;
  assign LOCKSTEP_Master_Out[3084] = \<const0> ;
  assign LOCKSTEP_Master_Out[3085] = \<const0> ;
  assign LOCKSTEP_Master_Out[3086] = \<const0> ;
  assign LOCKSTEP_Master_Out[3087] = \<const0> ;
  assign LOCKSTEP_Master_Out[3088] = \<const0> ;
  assign LOCKSTEP_Master_Out[3089] = \<const0> ;
  assign LOCKSTEP_Master_Out[3090] = \<const0> ;
  assign LOCKSTEP_Master_Out[3091] = \<const0> ;
  assign LOCKSTEP_Master_Out[3092] = \<const0> ;
  assign LOCKSTEP_Master_Out[3093] = \<const0> ;
  assign LOCKSTEP_Master_Out[3094] = \<const0> ;
  assign LOCKSTEP_Master_Out[3095] = \<const0> ;
  assign LOCKSTEP_Master_Out[3096] = \<const0> ;
  assign LOCKSTEP_Master_Out[3097] = \<const0> ;
  assign LOCKSTEP_Master_Out[3098] = \<const0> ;
  assign LOCKSTEP_Master_Out[3099] = \<const0> ;
  assign LOCKSTEP_Master_Out[3100] = \<const0> ;
  assign LOCKSTEP_Master_Out[3101] = \<const0> ;
  assign LOCKSTEP_Master_Out[3102] = \<const0> ;
  assign LOCKSTEP_Master_Out[3103] = \<const0> ;
  assign LOCKSTEP_Master_Out[3104] = \<const0> ;
  assign LOCKSTEP_Master_Out[3105] = \<const0> ;
  assign LOCKSTEP_Master_Out[3106] = \<const0> ;
  assign LOCKSTEP_Master_Out[3107] = \<const0> ;
  assign LOCKSTEP_Master_Out[3108] = \<const0> ;
  assign LOCKSTEP_Master_Out[3109] = \<const0> ;
  assign LOCKSTEP_Master_Out[3110] = \<const0> ;
  assign LOCKSTEP_Master_Out[3111] = \<const0> ;
  assign LOCKSTEP_Master_Out[3112] = \<const0> ;
  assign LOCKSTEP_Master_Out[3113] = \<const0> ;
  assign LOCKSTEP_Master_Out[3114] = \<const0> ;
  assign LOCKSTEP_Master_Out[3115] = \<const0> ;
  assign LOCKSTEP_Master_Out[3116] = \<const0> ;
  assign LOCKSTEP_Master_Out[3117] = \<const0> ;
  assign LOCKSTEP_Master_Out[3118] = \<const0> ;
  assign LOCKSTEP_Master_Out[3119] = \<const0> ;
  assign LOCKSTEP_Master_Out[3120] = \<const0> ;
  assign LOCKSTEP_Master_Out[3121] = \<const0> ;
  assign LOCKSTEP_Master_Out[3122] = \<const0> ;
  assign LOCKSTEP_Master_Out[3123] = \<const0> ;
  assign LOCKSTEP_Master_Out[3124] = \<const0> ;
  assign LOCKSTEP_Master_Out[3125] = \<const0> ;
  assign LOCKSTEP_Master_Out[3126] = \<const0> ;
  assign LOCKSTEP_Master_Out[3127] = \<const0> ;
  assign LOCKSTEP_Master_Out[3128] = \<const0> ;
  assign LOCKSTEP_Master_Out[3129] = \<const0> ;
  assign LOCKSTEP_Master_Out[3130] = \<const0> ;
  assign LOCKSTEP_Master_Out[3131] = \<const0> ;
  assign LOCKSTEP_Master_Out[3132] = \<const0> ;
  assign LOCKSTEP_Master_Out[3133] = \<const0> ;
  assign LOCKSTEP_Master_Out[3134] = \<const0> ;
  assign LOCKSTEP_Master_Out[3135] = \<const0> ;
  assign LOCKSTEP_Master_Out[3136] = \<const0> ;
  assign LOCKSTEP_Master_Out[3137] = \<const0> ;
  assign LOCKSTEP_Master_Out[3138] = \<const0> ;
  assign LOCKSTEP_Master_Out[3139] = \<const0> ;
  assign LOCKSTEP_Master_Out[3140] = \<const0> ;
  assign LOCKSTEP_Master_Out[3141] = \<const0> ;
  assign LOCKSTEP_Master_Out[3142] = \<const0> ;
  assign LOCKSTEP_Master_Out[3143] = \<const0> ;
  assign LOCKSTEP_Master_Out[3144] = \<const0> ;
  assign LOCKSTEP_Master_Out[3145] = \<const0> ;
  assign LOCKSTEP_Master_Out[3146] = \<const0> ;
  assign LOCKSTEP_Master_Out[3147] = \<const0> ;
  assign LOCKSTEP_Master_Out[3148] = \<const0> ;
  assign LOCKSTEP_Master_Out[3149] = \<const0> ;
  assign LOCKSTEP_Master_Out[3150] = \<const0> ;
  assign LOCKSTEP_Master_Out[3151] = \<const0> ;
  assign LOCKSTEP_Master_Out[3152] = \<const0> ;
  assign LOCKSTEP_Master_Out[3153] = \<const0> ;
  assign LOCKSTEP_Master_Out[3154] = \<const0> ;
  assign LOCKSTEP_Master_Out[3155] = \<const0> ;
  assign LOCKSTEP_Master_Out[3156] = \<const0> ;
  assign LOCKSTEP_Master_Out[3157] = \<const0> ;
  assign LOCKSTEP_Master_Out[3158] = \<const0> ;
  assign LOCKSTEP_Master_Out[3159] = \<const0> ;
  assign LOCKSTEP_Master_Out[3160] = \<const0> ;
  assign LOCKSTEP_Master_Out[3161] = \<const0> ;
  assign LOCKSTEP_Master_Out[3162] = \<const0> ;
  assign LOCKSTEP_Master_Out[3163] = \<const0> ;
  assign LOCKSTEP_Master_Out[3164] = \<const0> ;
  assign LOCKSTEP_Master_Out[3165] = \<const0> ;
  assign LOCKSTEP_Master_Out[3166] = \<const0> ;
  assign LOCKSTEP_Master_Out[3167] = \<const0> ;
  assign LOCKSTEP_Master_Out[3168] = \<const0> ;
  assign LOCKSTEP_Master_Out[3169] = \<const0> ;
  assign LOCKSTEP_Master_Out[3170] = \<const0> ;
  assign LOCKSTEP_Master_Out[3171] = \<const0> ;
  assign LOCKSTEP_Master_Out[3172] = \<const0> ;
  assign LOCKSTEP_Master_Out[3173] = \<const0> ;
  assign LOCKSTEP_Master_Out[3174] = \<const0> ;
  assign LOCKSTEP_Master_Out[3175] = \<const0> ;
  assign LOCKSTEP_Master_Out[3176] = \<const0> ;
  assign LOCKSTEP_Master_Out[3177] = \<const0> ;
  assign LOCKSTEP_Master_Out[3178] = \<const0> ;
  assign LOCKSTEP_Master_Out[3179] = \<const0> ;
  assign LOCKSTEP_Master_Out[3180] = \<const0> ;
  assign LOCKSTEP_Master_Out[3181] = \<const0> ;
  assign LOCKSTEP_Master_Out[3182] = \<const0> ;
  assign LOCKSTEP_Master_Out[3183] = \<const0> ;
  assign LOCKSTEP_Master_Out[3184] = \<const0> ;
  assign LOCKSTEP_Master_Out[3185] = \<const0> ;
  assign LOCKSTEP_Master_Out[3186] = \<const0> ;
  assign LOCKSTEP_Master_Out[3187] = \<const0> ;
  assign LOCKSTEP_Master_Out[3188] = \<const0> ;
  assign LOCKSTEP_Master_Out[3189] = \<const0> ;
  assign LOCKSTEP_Master_Out[3190] = \<const0> ;
  assign LOCKSTEP_Master_Out[3191] = \<const0> ;
  assign LOCKSTEP_Master_Out[3192] = \<const0> ;
  assign LOCKSTEP_Master_Out[3193] = \<const0> ;
  assign LOCKSTEP_Master_Out[3194] = \<const0> ;
  assign LOCKSTEP_Master_Out[3195] = \<const0> ;
  assign LOCKSTEP_Master_Out[3196] = \<const0> ;
  assign LOCKSTEP_Master_Out[3197] = \<const0> ;
  assign LOCKSTEP_Master_Out[3198] = \<const0> ;
  assign LOCKSTEP_Master_Out[3199] = \<const0> ;
  assign LOCKSTEP_Master_Out[3200] = \<const0> ;
  assign LOCKSTEP_Master_Out[3201] = \<const0> ;
  assign LOCKSTEP_Master_Out[3202] = \<const0> ;
  assign LOCKSTEP_Master_Out[3203] = \<const0> ;
  assign LOCKSTEP_Master_Out[3204] = \<const0> ;
  assign LOCKSTEP_Master_Out[3205] = \<const0> ;
  assign LOCKSTEP_Master_Out[3206] = \<const0> ;
  assign LOCKSTEP_Master_Out[3207] = \<const0> ;
  assign LOCKSTEP_Master_Out[3208] = \<const0> ;
  assign LOCKSTEP_Master_Out[3209] = \<const0> ;
  assign LOCKSTEP_Master_Out[3210] = \<const0> ;
  assign LOCKSTEP_Master_Out[3211] = \<const0> ;
  assign LOCKSTEP_Master_Out[3212] = \<const0> ;
  assign LOCKSTEP_Master_Out[3213] = \<const0> ;
  assign LOCKSTEP_Master_Out[3214] = \<const0> ;
  assign LOCKSTEP_Master_Out[3215] = \<const0> ;
  assign LOCKSTEP_Master_Out[3216] = \<const0> ;
  assign LOCKSTEP_Master_Out[3217] = \<const0> ;
  assign LOCKSTEP_Master_Out[3218] = \<const0> ;
  assign LOCKSTEP_Master_Out[3219] = \<const0> ;
  assign LOCKSTEP_Master_Out[3220] = \<const0> ;
  assign LOCKSTEP_Master_Out[3221] = \<const0> ;
  assign LOCKSTEP_Master_Out[3222] = \<const0> ;
  assign LOCKSTEP_Master_Out[3223] = \<const0> ;
  assign LOCKSTEP_Master_Out[3224] = \<const0> ;
  assign LOCKSTEP_Master_Out[3225] = \<const0> ;
  assign LOCKSTEP_Master_Out[3226] = \<const0> ;
  assign LOCKSTEP_Master_Out[3227] = \<const0> ;
  assign LOCKSTEP_Master_Out[3228] = \<const0> ;
  assign LOCKSTEP_Master_Out[3229] = \<const0> ;
  assign LOCKSTEP_Master_Out[3230] = \<const0> ;
  assign LOCKSTEP_Master_Out[3231] = \<const0> ;
  assign LOCKSTEP_Master_Out[3232] = \<const0> ;
  assign LOCKSTEP_Master_Out[3233] = \<const0> ;
  assign LOCKSTEP_Master_Out[3234] = \<const0> ;
  assign LOCKSTEP_Master_Out[3235] = \<const0> ;
  assign LOCKSTEP_Master_Out[3236] = \<const0> ;
  assign LOCKSTEP_Master_Out[3237] = \<const0> ;
  assign LOCKSTEP_Master_Out[3238] = \<const0> ;
  assign LOCKSTEP_Master_Out[3239] = \<const0> ;
  assign LOCKSTEP_Master_Out[3240] = \<const0> ;
  assign LOCKSTEP_Master_Out[3241] = \<const0> ;
  assign LOCKSTEP_Master_Out[3242] = \<const0> ;
  assign LOCKSTEP_Master_Out[3243] = \<const0> ;
  assign LOCKSTEP_Master_Out[3244] = \<const0> ;
  assign LOCKSTEP_Master_Out[3245] = \<const0> ;
  assign LOCKSTEP_Master_Out[3246] = \<const0> ;
  assign LOCKSTEP_Master_Out[3247] = \<const0> ;
  assign LOCKSTEP_Master_Out[3248] = \<const0> ;
  assign LOCKSTEP_Master_Out[3249] = \<const0> ;
  assign LOCKSTEP_Master_Out[3250] = \<const0> ;
  assign LOCKSTEP_Master_Out[3251] = \<const0> ;
  assign LOCKSTEP_Master_Out[3252] = \<const0> ;
  assign LOCKSTEP_Master_Out[3253] = \<const0> ;
  assign LOCKSTEP_Master_Out[3254] = \<const0> ;
  assign LOCKSTEP_Master_Out[3255] = \<const0> ;
  assign LOCKSTEP_Master_Out[3256] = \<const0> ;
  assign LOCKSTEP_Master_Out[3257] = \<const0> ;
  assign LOCKSTEP_Master_Out[3258] = \<const0> ;
  assign LOCKSTEP_Master_Out[3259] = \<const0> ;
  assign LOCKSTEP_Master_Out[3260] = \<const0> ;
  assign LOCKSTEP_Master_Out[3261] = \<const0> ;
  assign LOCKSTEP_Master_Out[3262] = \<const0> ;
  assign LOCKSTEP_Master_Out[3263] = \<const0> ;
  assign LOCKSTEP_Master_Out[3264] = \<const0> ;
  assign LOCKSTEP_Master_Out[3265] = \<const0> ;
  assign LOCKSTEP_Master_Out[3266] = \<const0> ;
  assign LOCKSTEP_Master_Out[3267] = \<const0> ;
  assign LOCKSTEP_Master_Out[3268] = \<const0> ;
  assign LOCKSTEP_Master_Out[3269] = \<const0> ;
  assign LOCKSTEP_Master_Out[3270] = \<const0> ;
  assign LOCKSTEP_Master_Out[3271] = \<const0> ;
  assign LOCKSTEP_Master_Out[3272] = \<const0> ;
  assign LOCKSTEP_Master_Out[3273] = \<const0> ;
  assign LOCKSTEP_Master_Out[3274] = \<const0> ;
  assign LOCKSTEP_Master_Out[3275] = \<const0> ;
  assign LOCKSTEP_Master_Out[3276] = \<const0> ;
  assign LOCKSTEP_Master_Out[3277] = \<const0> ;
  assign LOCKSTEP_Master_Out[3278] = \<const0> ;
  assign LOCKSTEP_Master_Out[3279] = \<const0> ;
  assign LOCKSTEP_Master_Out[3280] = \<const0> ;
  assign LOCKSTEP_Master_Out[3281] = \<const0> ;
  assign LOCKSTEP_Master_Out[3282] = \<const0> ;
  assign LOCKSTEP_Master_Out[3283] = \<const0> ;
  assign LOCKSTEP_Master_Out[3284] = \<const0> ;
  assign LOCKSTEP_Master_Out[3285] = \<const0> ;
  assign LOCKSTEP_Master_Out[3286] = \<const0> ;
  assign LOCKSTEP_Master_Out[3287] = \<const0> ;
  assign LOCKSTEP_Master_Out[3288] = \<const0> ;
  assign LOCKSTEP_Master_Out[3289] = \<const0> ;
  assign LOCKSTEP_Master_Out[3290] = \<const0> ;
  assign LOCKSTEP_Master_Out[3291] = \<const0> ;
  assign LOCKSTEP_Master_Out[3292] = \<const0> ;
  assign LOCKSTEP_Master_Out[3293] = \<const0> ;
  assign LOCKSTEP_Master_Out[3294] = \<const0> ;
  assign LOCKSTEP_Master_Out[3295] = \<const0> ;
  assign LOCKSTEP_Master_Out[3296] = \<const0> ;
  assign LOCKSTEP_Master_Out[3297] = \<const0> ;
  assign LOCKSTEP_Master_Out[3298] = \<const0> ;
  assign LOCKSTEP_Master_Out[3299] = \<const0> ;
  assign LOCKSTEP_Master_Out[3300] = \<const0> ;
  assign LOCKSTEP_Master_Out[3301] = \<const0> ;
  assign LOCKSTEP_Master_Out[3302] = \<const0> ;
  assign LOCKSTEP_Master_Out[3303] = \<const0> ;
  assign LOCKSTEP_Master_Out[3304] = \<const0> ;
  assign LOCKSTEP_Master_Out[3305] = \<const0> ;
  assign LOCKSTEP_Master_Out[3306] = \<const0> ;
  assign LOCKSTEP_Master_Out[3307] = \<const0> ;
  assign LOCKSTEP_Master_Out[3308] = \<const0> ;
  assign LOCKSTEP_Master_Out[3309] = \<const0> ;
  assign LOCKSTEP_Master_Out[3310] = \<const0> ;
  assign LOCKSTEP_Master_Out[3311] = \<const0> ;
  assign LOCKSTEP_Master_Out[3312] = \<const0> ;
  assign LOCKSTEP_Master_Out[3313] = \<const0> ;
  assign LOCKSTEP_Master_Out[3314] = \<const0> ;
  assign LOCKSTEP_Master_Out[3315] = \<const0> ;
  assign LOCKSTEP_Master_Out[3316] = \<const0> ;
  assign LOCKSTEP_Master_Out[3317] = \<const0> ;
  assign LOCKSTEP_Master_Out[3318] = \<const0> ;
  assign LOCKSTEP_Master_Out[3319] = \<const0> ;
  assign LOCKSTEP_Master_Out[3320] = \<const0> ;
  assign LOCKSTEP_Master_Out[3321] = \<const0> ;
  assign LOCKSTEP_Master_Out[3322] = \<const0> ;
  assign LOCKSTEP_Master_Out[3323] = \<const0> ;
  assign LOCKSTEP_Master_Out[3324] = \<const0> ;
  assign LOCKSTEP_Master_Out[3325] = \<const0> ;
  assign LOCKSTEP_Master_Out[3326] = \<const0> ;
  assign LOCKSTEP_Master_Out[3327] = \<const0> ;
  assign LOCKSTEP_Master_Out[3328] = \<const0> ;
  assign LOCKSTEP_Master_Out[3329] = \<const0> ;
  assign LOCKSTEP_Master_Out[3330] = \<const0> ;
  assign LOCKSTEP_Master_Out[3331] = \<const0> ;
  assign LOCKSTEP_Master_Out[3332] = \<const0> ;
  assign LOCKSTEP_Master_Out[3333] = \<const0> ;
  assign LOCKSTEP_Master_Out[3334] = \<const0> ;
  assign LOCKSTEP_Master_Out[3335] = \<const0> ;
  assign LOCKSTEP_Master_Out[3336] = \<const0> ;
  assign LOCKSTEP_Master_Out[3337] = \<const0> ;
  assign LOCKSTEP_Master_Out[3338] = \<const0> ;
  assign LOCKSTEP_Master_Out[3339] = \<const0> ;
  assign LOCKSTEP_Master_Out[3340] = \<const0> ;
  assign LOCKSTEP_Master_Out[3341] = \<const0> ;
  assign LOCKSTEP_Master_Out[3342] = \<const0> ;
  assign LOCKSTEP_Master_Out[3343] = \<const0> ;
  assign LOCKSTEP_Master_Out[3344] = \<const0> ;
  assign LOCKSTEP_Master_Out[3345] = \<const0> ;
  assign LOCKSTEP_Master_Out[3346] = \<const0> ;
  assign LOCKSTEP_Master_Out[3347] = \<const0> ;
  assign LOCKSTEP_Master_Out[3348] = \<const0> ;
  assign LOCKSTEP_Master_Out[3349] = \<const0> ;
  assign LOCKSTEP_Master_Out[3350] = \<const0> ;
  assign LOCKSTEP_Master_Out[3351] = \<const0> ;
  assign LOCKSTEP_Master_Out[3352] = \<const0> ;
  assign LOCKSTEP_Master_Out[3353] = \<const0> ;
  assign LOCKSTEP_Master_Out[3354] = \<const0> ;
  assign LOCKSTEP_Master_Out[3355] = \<const0> ;
  assign LOCKSTEP_Master_Out[3356] = \<const0> ;
  assign LOCKSTEP_Master_Out[3357] = \<const0> ;
  assign LOCKSTEP_Master_Out[3358] = \<const0> ;
  assign LOCKSTEP_Master_Out[3359] = \<const0> ;
  assign LOCKSTEP_Master_Out[3360] = \<const0> ;
  assign LOCKSTEP_Master_Out[3361] = \<const0> ;
  assign LOCKSTEP_Master_Out[3362] = \<const0> ;
  assign LOCKSTEP_Master_Out[3363] = \<const0> ;
  assign LOCKSTEP_Master_Out[3364] = \<const0> ;
  assign LOCKSTEP_Master_Out[3365] = \<const0> ;
  assign LOCKSTEP_Master_Out[3366] = \<const0> ;
  assign LOCKSTEP_Master_Out[3367] = \<const0> ;
  assign LOCKSTEP_Master_Out[3368] = \<const0> ;
  assign LOCKSTEP_Master_Out[3369] = \<const0> ;
  assign LOCKSTEP_Master_Out[3370] = \<const0> ;
  assign LOCKSTEP_Master_Out[3371] = \<const0> ;
  assign LOCKSTEP_Master_Out[3372] = \<const0> ;
  assign LOCKSTEP_Master_Out[3373] = \<const0> ;
  assign LOCKSTEP_Master_Out[3374] = \<const0> ;
  assign LOCKSTEP_Master_Out[3375] = \<const0> ;
  assign LOCKSTEP_Master_Out[3376] = \<const0> ;
  assign LOCKSTEP_Master_Out[3377] = \<const0> ;
  assign LOCKSTEP_Master_Out[3378] = \<const0> ;
  assign LOCKSTEP_Master_Out[3379] = \<const0> ;
  assign LOCKSTEP_Master_Out[3380] = \<const0> ;
  assign LOCKSTEP_Master_Out[3381] = \<const0> ;
  assign LOCKSTEP_Master_Out[3382] = \<const0> ;
  assign LOCKSTEP_Master_Out[3383] = \<const0> ;
  assign LOCKSTEP_Master_Out[3384] = \<const0> ;
  assign LOCKSTEP_Master_Out[3385] = \<const0> ;
  assign LOCKSTEP_Master_Out[3386] = \<const0> ;
  assign LOCKSTEP_Master_Out[3387] = \<const0> ;
  assign LOCKSTEP_Master_Out[3388] = \<const0> ;
  assign LOCKSTEP_Master_Out[3389] = \<const0> ;
  assign LOCKSTEP_Master_Out[3390] = \<const0> ;
  assign LOCKSTEP_Master_Out[3391] = \<const0> ;
  assign LOCKSTEP_Master_Out[3392] = \<const0> ;
  assign LOCKSTEP_Master_Out[3393] = \<const0> ;
  assign LOCKSTEP_Master_Out[3394] = \<const0> ;
  assign LOCKSTEP_Master_Out[3395] = \<const0> ;
  assign LOCKSTEP_Master_Out[3396] = \<const0> ;
  assign LOCKSTEP_Master_Out[3397] = \<const0> ;
  assign LOCKSTEP_Master_Out[3398] = \<const0> ;
  assign LOCKSTEP_Master_Out[3399] = \<const0> ;
  assign LOCKSTEP_Master_Out[3400] = \<const0> ;
  assign LOCKSTEP_Master_Out[3401] = \<const0> ;
  assign LOCKSTEP_Master_Out[3402] = \<const0> ;
  assign LOCKSTEP_Master_Out[3403] = \<const0> ;
  assign LOCKSTEP_Master_Out[3404] = \<const0> ;
  assign LOCKSTEP_Master_Out[3405] = \<const0> ;
  assign LOCKSTEP_Master_Out[3406] = \<const0> ;
  assign LOCKSTEP_Master_Out[3407] = \<const0> ;
  assign LOCKSTEP_Master_Out[3408] = \<const0> ;
  assign LOCKSTEP_Master_Out[3409] = \<const0> ;
  assign LOCKSTEP_Master_Out[3410] = \<const0> ;
  assign LOCKSTEP_Master_Out[3411] = \<const0> ;
  assign LOCKSTEP_Master_Out[3412] = \<const0> ;
  assign LOCKSTEP_Master_Out[3413] = \<const0> ;
  assign LOCKSTEP_Master_Out[3414] = \<const0> ;
  assign LOCKSTEP_Master_Out[3415] = \<const0> ;
  assign LOCKSTEP_Master_Out[3416] = \<const0> ;
  assign LOCKSTEP_Master_Out[3417] = \<const0> ;
  assign LOCKSTEP_Master_Out[3418] = \<const0> ;
  assign LOCKSTEP_Master_Out[3419] = \<const0> ;
  assign LOCKSTEP_Master_Out[3420] = \<const0> ;
  assign LOCKSTEP_Master_Out[3421] = \<const0> ;
  assign LOCKSTEP_Master_Out[3422] = \<const0> ;
  assign LOCKSTEP_Master_Out[3423] = \<const0> ;
  assign LOCKSTEP_Master_Out[3424] = \<const0> ;
  assign LOCKSTEP_Master_Out[3425] = \<const0> ;
  assign LOCKSTEP_Master_Out[3426] = \<const0> ;
  assign LOCKSTEP_Master_Out[3427] = \<const0> ;
  assign LOCKSTEP_Master_Out[3428] = \<const0> ;
  assign LOCKSTEP_Master_Out[3429] = \<const0> ;
  assign LOCKSTEP_Master_Out[3430] = \<const0> ;
  assign LOCKSTEP_Master_Out[3431] = \<const0> ;
  assign LOCKSTEP_Master_Out[3432] = \<const0> ;
  assign LOCKSTEP_Master_Out[3433] = \<const0> ;
  assign LOCKSTEP_Master_Out[3434] = \<const0> ;
  assign LOCKSTEP_Master_Out[3435] = \<const0> ;
  assign LOCKSTEP_Master_Out[3436] = \<const0> ;
  assign LOCKSTEP_Master_Out[3437] = \<const0> ;
  assign LOCKSTEP_Master_Out[3438] = \<const0> ;
  assign LOCKSTEP_Master_Out[3439] = \<const0> ;
  assign LOCKSTEP_Master_Out[3440] = \<const0> ;
  assign LOCKSTEP_Master_Out[3441] = \<const0> ;
  assign LOCKSTEP_Master_Out[3442] = \<const0> ;
  assign LOCKSTEP_Master_Out[3443] = \<const0> ;
  assign LOCKSTEP_Master_Out[3444] = \<const0> ;
  assign LOCKSTEP_Master_Out[3445] = \<const0> ;
  assign LOCKSTEP_Master_Out[3446] = \<const0> ;
  assign LOCKSTEP_Master_Out[3447] = \<const0> ;
  assign LOCKSTEP_Master_Out[3448] = \<const0> ;
  assign LOCKSTEP_Master_Out[3449] = \<const0> ;
  assign LOCKSTEP_Master_Out[3450] = \<const0> ;
  assign LOCKSTEP_Master_Out[3451] = \<const0> ;
  assign LOCKSTEP_Master_Out[3452] = \<const0> ;
  assign LOCKSTEP_Master_Out[3453] = \<const0> ;
  assign LOCKSTEP_Master_Out[3454] = \<const0> ;
  assign LOCKSTEP_Master_Out[3455] = \<const0> ;
  assign LOCKSTEP_Master_Out[3456] = \<const0> ;
  assign LOCKSTEP_Master_Out[3457] = \<const0> ;
  assign LOCKSTEP_Master_Out[3458] = \<const0> ;
  assign LOCKSTEP_Master_Out[3459] = \<const0> ;
  assign LOCKSTEP_Master_Out[3460] = \<const0> ;
  assign LOCKSTEP_Master_Out[3461] = \<const0> ;
  assign LOCKSTEP_Master_Out[3462] = \<const0> ;
  assign LOCKSTEP_Master_Out[3463] = \<const0> ;
  assign LOCKSTEP_Master_Out[3464] = \<const0> ;
  assign LOCKSTEP_Master_Out[3465] = \<const0> ;
  assign LOCKSTEP_Master_Out[3466] = \<const0> ;
  assign LOCKSTEP_Master_Out[3467] = \<const0> ;
  assign LOCKSTEP_Master_Out[3468] = \<const0> ;
  assign LOCKSTEP_Master_Out[3469] = \<const0> ;
  assign LOCKSTEP_Master_Out[3470] = \<const0> ;
  assign LOCKSTEP_Master_Out[3471] = \<const0> ;
  assign LOCKSTEP_Master_Out[3472] = \<const0> ;
  assign LOCKSTEP_Master_Out[3473] = \<const0> ;
  assign LOCKSTEP_Master_Out[3474] = \<const0> ;
  assign LOCKSTEP_Master_Out[3475] = \<const0> ;
  assign LOCKSTEP_Master_Out[3476] = \<const0> ;
  assign LOCKSTEP_Master_Out[3477] = \<const0> ;
  assign LOCKSTEP_Master_Out[3478] = \<const0> ;
  assign LOCKSTEP_Master_Out[3479] = \<const0> ;
  assign LOCKSTEP_Master_Out[3480] = \<const0> ;
  assign LOCKSTEP_Master_Out[3481] = \<const0> ;
  assign LOCKSTEP_Master_Out[3482] = \<const0> ;
  assign LOCKSTEP_Master_Out[3483] = \<const0> ;
  assign LOCKSTEP_Master_Out[3484] = \<const0> ;
  assign LOCKSTEP_Master_Out[3485] = \<const0> ;
  assign LOCKSTEP_Master_Out[3486] = \<const0> ;
  assign LOCKSTEP_Master_Out[3487] = \<const0> ;
  assign LOCKSTEP_Master_Out[3488] = \<const0> ;
  assign LOCKSTEP_Master_Out[3489] = \<const0> ;
  assign LOCKSTEP_Master_Out[3490] = \<const0> ;
  assign LOCKSTEP_Master_Out[3491] = \<const0> ;
  assign LOCKSTEP_Master_Out[3492] = \<const0> ;
  assign LOCKSTEP_Master_Out[3493] = \<const0> ;
  assign LOCKSTEP_Master_Out[3494] = \<const0> ;
  assign LOCKSTEP_Master_Out[3495] = \<const0> ;
  assign LOCKSTEP_Master_Out[3496] = \<const0> ;
  assign LOCKSTEP_Master_Out[3497] = \<const0> ;
  assign LOCKSTEP_Master_Out[3498] = \<const0> ;
  assign LOCKSTEP_Master_Out[3499] = \<const0> ;
  assign LOCKSTEP_Master_Out[3500] = \<const0> ;
  assign LOCKSTEP_Master_Out[3501] = \<const0> ;
  assign LOCKSTEP_Master_Out[3502] = \<const0> ;
  assign LOCKSTEP_Master_Out[3503] = \<const0> ;
  assign LOCKSTEP_Master_Out[3504] = \<const0> ;
  assign LOCKSTEP_Master_Out[3505] = \<const0> ;
  assign LOCKSTEP_Master_Out[3506] = \<const0> ;
  assign LOCKSTEP_Master_Out[3507] = \<const0> ;
  assign LOCKSTEP_Master_Out[3508] = \<const0> ;
  assign LOCKSTEP_Master_Out[3509] = \<const0> ;
  assign LOCKSTEP_Master_Out[3510] = \<const0> ;
  assign LOCKSTEP_Master_Out[3511] = \<const0> ;
  assign LOCKSTEP_Master_Out[3512] = \<const0> ;
  assign LOCKSTEP_Master_Out[3513] = \<const0> ;
  assign LOCKSTEP_Master_Out[3514] = \<const0> ;
  assign LOCKSTEP_Master_Out[3515] = \<const0> ;
  assign LOCKSTEP_Master_Out[3516] = \<const0> ;
  assign LOCKSTEP_Master_Out[3517] = \<const0> ;
  assign LOCKSTEP_Master_Out[3518] = \<const0> ;
  assign LOCKSTEP_Master_Out[3519] = \<const0> ;
  assign LOCKSTEP_Master_Out[3520] = \<const0> ;
  assign LOCKSTEP_Master_Out[3521] = \<const0> ;
  assign LOCKSTEP_Master_Out[3522] = \<const0> ;
  assign LOCKSTEP_Master_Out[3523] = \<const0> ;
  assign LOCKSTEP_Master_Out[3524] = \<const0> ;
  assign LOCKSTEP_Master_Out[3525] = \<const0> ;
  assign LOCKSTEP_Master_Out[3526] = \<const0> ;
  assign LOCKSTEP_Master_Out[3527] = \<const0> ;
  assign LOCKSTEP_Master_Out[3528] = \<const0> ;
  assign LOCKSTEP_Master_Out[3529] = \<const0> ;
  assign LOCKSTEP_Master_Out[3530] = \<const0> ;
  assign LOCKSTEP_Master_Out[3531] = \<const0> ;
  assign LOCKSTEP_Master_Out[3532] = \<const0> ;
  assign LOCKSTEP_Master_Out[3533] = \<const0> ;
  assign LOCKSTEP_Master_Out[3534] = \<const0> ;
  assign LOCKSTEP_Master_Out[3535] = \<const0> ;
  assign LOCKSTEP_Master_Out[3536] = \<const0> ;
  assign LOCKSTEP_Master_Out[3537] = \<const0> ;
  assign LOCKSTEP_Master_Out[3538] = \<const0> ;
  assign LOCKSTEP_Master_Out[3539] = \<const0> ;
  assign LOCKSTEP_Master_Out[3540] = \<const0> ;
  assign LOCKSTEP_Master_Out[3541] = \<const0> ;
  assign LOCKSTEP_Master_Out[3542] = \<const0> ;
  assign LOCKSTEP_Master_Out[3543] = \<const0> ;
  assign LOCKSTEP_Master_Out[3544] = \<const0> ;
  assign LOCKSTEP_Master_Out[3545] = \<const0> ;
  assign LOCKSTEP_Master_Out[3546] = \<const0> ;
  assign LOCKSTEP_Master_Out[3547] = \<const0> ;
  assign LOCKSTEP_Master_Out[3548] = \<const0> ;
  assign LOCKSTEP_Master_Out[3549] = \<const0> ;
  assign LOCKSTEP_Master_Out[3550] = \<const0> ;
  assign LOCKSTEP_Master_Out[3551] = \<const0> ;
  assign LOCKSTEP_Master_Out[3552] = \<const0> ;
  assign LOCKSTEP_Master_Out[3553] = \<const0> ;
  assign LOCKSTEP_Master_Out[3554] = \<const0> ;
  assign LOCKSTEP_Master_Out[3555] = \<const0> ;
  assign LOCKSTEP_Master_Out[3556] = \<const0> ;
  assign LOCKSTEP_Master_Out[3557] = \<const0> ;
  assign LOCKSTEP_Master_Out[3558] = \<const0> ;
  assign LOCKSTEP_Master_Out[3559] = \<const0> ;
  assign LOCKSTEP_Master_Out[3560] = \<const0> ;
  assign LOCKSTEP_Master_Out[3561] = \<const0> ;
  assign LOCKSTEP_Master_Out[3562] = \<const0> ;
  assign LOCKSTEP_Master_Out[3563] = \<const0> ;
  assign LOCKSTEP_Master_Out[3564] = \<const0> ;
  assign LOCKSTEP_Master_Out[3565] = \<const0> ;
  assign LOCKSTEP_Master_Out[3566] = \<const0> ;
  assign LOCKSTEP_Master_Out[3567] = \<const0> ;
  assign LOCKSTEP_Master_Out[3568] = \<const0> ;
  assign LOCKSTEP_Master_Out[3569] = \<const0> ;
  assign LOCKSTEP_Master_Out[3570] = \<const0> ;
  assign LOCKSTEP_Master_Out[3571] = \<const0> ;
  assign LOCKSTEP_Master_Out[3572] = \<const0> ;
  assign LOCKSTEP_Master_Out[3573] = \<const0> ;
  assign LOCKSTEP_Master_Out[3574] = \<const0> ;
  assign LOCKSTEP_Master_Out[3575] = \<const0> ;
  assign LOCKSTEP_Master_Out[3576] = \<const0> ;
  assign LOCKSTEP_Master_Out[3577] = \<const0> ;
  assign LOCKSTEP_Master_Out[3578] = \<const0> ;
  assign LOCKSTEP_Master_Out[3579] = \<const0> ;
  assign LOCKSTEP_Master_Out[3580] = \<const0> ;
  assign LOCKSTEP_Master_Out[3581] = \<const0> ;
  assign LOCKSTEP_Master_Out[3582] = \<const0> ;
  assign LOCKSTEP_Master_Out[3583] = \<const0> ;
  assign LOCKSTEP_Master_Out[3584] = \<const0> ;
  assign LOCKSTEP_Master_Out[3585] = \<const0> ;
  assign LOCKSTEP_Master_Out[3586] = \<const0> ;
  assign LOCKSTEP_Master_Out[3587] = \<const0> ;
  assign LOCKSTEP_Master_Out[3588] = \<const0> ;
  assign LOCKSTEP_Master_Out[3589] = \<const0> ;
  assign LOCKSTEP_Master_Out[3590] = \<const0> ;
  assign LOCKSTEP_Master_Out[3591] = \<const0> ;
  assign LOCKSTEP_Master_Out[3592] = \<const0> ;
  assign LOCKSTEP_Master_Out[3593] = \<const0> ;
  assign LOCKSTEP_Master_Out[3594] = \<const0> ;
  assign LOCKSTEP_Master_Out[3595] = \<const0> ;
  assign LOCKSTEP_Master_Out[3596] = \<const0> ;
  assign LOCKSTEP_Master_Out[3597] = \<const0> ;
  assign LOCKSTEP_Master_Out[3598] = \<const0> ;
  assign LOCKSTEP_Master_Out[3599] = \<const0> ;
  assign LOCKSTEP_Master_Out[3600] = \<const0> ;
  assign LOCKSTEP_Master_Out[3601] = \<const0> ;
  assign LOCKSTEP_Master_Out[3602] = \<const0> ;
  assign LOCKSTEP_Master_Out[3603] = \<const0> ;
  assign LOCKSTEP_Master_Out[3604] = \<const0> ;
  assign LOCKSTEP_Master_Out[3605] = \<const0> ;
  assign LOCKSTEP_Master_Out[3606] = \<const0> ;
  assign LOCKSTEP_Master_Out[3607] = \<const0> ;
  assign LOCKSTEP_Master_Out[3608] = \<const0> ;
  assign LOCKSTEP_Master_Out[3609] = \<const0> ;
  assign LOCKSTEP_Master_Out[3610] = \<const0> ;
  assign LOCKSTEP_Master_Out[3611] = \<const0> ;
  assign LOCKSTEP_Master_Out[3612] = \<const0> ;
  assign LOCKSTEP_Master_Out[3613] = \<const0> ;
  assign LOCKSTEP_Master_Out[3614] = \<const0> ;
  assign LOCKSTEP_Master_Out[3615] = \<const0> ;
  assign LOCKSTEP_Master_Out[3616] = \<const0> ;
  assign LOCKSTEP_Master_Out[3617] = \<const0> ;
  assign LOCKSTEP_Master_Out[3618] = \<const0> ;
  assign LOCKSTEP_Master_Out[3619] = \<const0> ;
  assign LOCKSTEP_Master_Out[3620] = \<const0> ;
  assign LOCKSTEP_Master_Out[3621] = \<const0> ;
  assign LOCKSTEP_Master_Out[3622] = \<const0> ;
  assign LOCKSTEP_Master_Out[3623] = \<const0> ;
  assign LOCKSTEP_Master_Out[3624] = \<const0> ;
  assign LOCKSTEP_Master_Out[3625] = \<const0> ;
  assign LOCKSTEP_Master_Out[3626] = \<const0> ;
  assign LOCKSTEP_Master_Out[3627] = \<const0> ;
  assign LOCKSTEP_Master_Out[3628] = \<const0> ;
  assign LOCKSTEP_Master_Out[3629] = \<const0> ;
  assign LOCKSTEP_Master_Out[3630] = \<const0> ;
  assign LOCKSTEP_Master_Out[3631] = \<const0> ;
  assign LOCKSTEP_Master_Out[3632] = \<const0> ;
  assign LOCKSTEP_Master_Out[3633] = \<const0> ;
  assign LOCKSTEP_Master_Out[3634] = \<const0> ;
  assign LOCKSTEP_Master_Out[3635] = \<const0> ;
  assign LOCKSTEP_Master_Out[3636] = \<const0> ;
  assign LOCKSTEP_Master_Out[3637] = \<const0> ;
  assign LOCKSTEP_Master_Out[3638] = \<const0> ;
  assign LOCKSTEP_Master_Out[3639] = \<const0> ;
  assign LOCKSTEP_Master_Out[3640] = \<const0> ;
  assign LOCKSTEP_Master_Out[3641] = \<const0> ;
  assign LOCKSTEP_Master_Out[3642] = \<const0> ;
  assign LOCKSTEP_Master_Out[3643] = \<const0> ;
  assign LOCKSTEP_Master_Out[3644] = \<const0> ;
  assign LOCKSTEP_Master_Out[3645] = \<const0> ;
  assign LOCKSTEP_Master_Out[3646] = \<const0> ;
  assign LOCKSTEP_Master_Out[3647] = \<const0> ;
  assign LOCKSTEP_Master_Out[3648] = \<const0> ;
  assign LOCKSTEP_Master_Out[3649] = \<const0> ;
  assign LOCKSTEP_Master_Out[3650] = \<const0> ;
  assign LOCKSTEP_Master_Out[3651] = \<const0> ;
  assign LOCKSTEP_Master_Out[3652] = \<const0> ;
  assign LOCKSTEP_Master_Out[3653] = \<const0> ;
  assign LOCKSTEP_Master_Out[3654] = \<const0> ;
  assign LOCKSTEP_Master_Out[3655] = \<const0> ;
  assign LOCKSTEP_Master_Out[3656] = \<const0> ;
  assign LOCKSTEP_Master_Out[3657] = \<const0> ;
  assign LOCKSTEP_Master_Out[3658] = \<const0> ;
  assign LOCKSTEP_Master_Out[3659] = \<const0> ;
  assign LOCKSTEP_Master_Out[3660] = \<const0> ;
  assign LOCKSTEP_Master_Out[3661] = \<const0> ;
  assign LOCKSTEP_Master_Out[3662] = \<const0> ;
  assign LOCKSTEP_Master_Out[3663] = \<const0> ;
  assign LOCKSTEP_Master_Out[3664] = \<const0> ;
  assign LOCKSTEP_Master_Out[3665] = \<const0> ;
  assign LOCKSTEP_Master_Out[3666] = \<const0> ;
  assign LOCKSTEP_Master_Out[3667] = \<const0> ;
  assign LOCKSTEP_Master_Out[3668] = \<const0> ;
  assign LOCKSTEP_Master_Out[3669] = \<const0> ;
  assign LOCKSTEP_Master_Out[3670] = \<const0> ;
  assign LOCKSTEP_Master_Out[3671] = \<const0> ;
  assign LOCKSTEP_Master_Out[3672] = \<const0> ;
  assign LOCKSTEP_Master_Out[3673] = \<const0> ;
  assign LOCKSTEP_Master_Out[3674] = \<const0> ;
  assign LOCKSTEP_Master_Out[3675] = \<const0> ;
  assign LOCKSTEP_Master_Out[3676] = \<const0> ;
  assign LOCKSTEP_Master_Out[3677] = \<const0> ;
  assign LOCKSTEP_Master_Out[3678] = \<const0> ;
  assign LOCKSTEP_Master_Out[3679] = \<const0> ;
  assign LOCKSTEP_Master_Out[3680] = \<const0> ;
  assign LOCKSTEP_Master_Out[3681] = \<const0> ;
  assign LOCKSTEP_Master_Out[3682] = \<const0> ;
  assign LOCKSTEP_Master_Out[3683] = \<const0> ;
  assign LOCKSTEP_Master_Out[3684] = \<const0> ;
  assign LOCKSTEP_Master_Out[3685] = \<const0> ;
  assign LOCKSTEP_Master_Out[3686] = \<const0> ;
  assign LOCKSTEP_Master_Out[3687] = \<const0> ;
  assign LOCKSTEP_Master_Out[3688] = \<const0> ;
  assign LOCKSTEP_Master_Out[3689] = \<const0> ;
  assign LOCKSTEP_Master_Out[3690] = \<const0> ;
  assign LOCKSTEP_Master_Out[3691] = \<const0> ;
  assign LOCKSTEP_Master_Out[3692] = \<const0> ;
  assign LOCKSTEP_Master_Out[3693] = \<const0> ;
  assign LOCKSTEP_Master_Out[3694] = \<const0> ;
  assign LOCKSTEP_Master_Out[3695] = \<const0> ;
  assign LOCKSTEP_Master_Out[3696] = \<const0> ;
  assign LOCKSTEP_Master_Out[3697] = \<const0> ;
  assign LOCKSTEP_Master_Out[3698] = \<const0> ;
  assign LOCKSTEP_Master_Out[3699] = \<const0> ;
  assign LOCKSTEP_Master_Out[3700] = \<const0> ;
  assign LOCKSTEP_Master_Out[3701] = \<const0> ;
  assign LOCKSTEP_Master_Out[3702] = \<const0> ;
  assign LOCKSTEP_Master_Out[3703] = \<const0> ;
  assign LOCKSTEP_Master_Out[3704] = \<const0> ;
  assign LOCKSTEP_Master_Out[3705] = \<const0> ;
  assign LOCKSTEP_Master_Out[3706] = \<const0> ;
  assign LOCKSTEP_Master_Out[3707] = \<const0> ;
  assign LOCKSTEP_Master_Out[3708] = \<const0> ;
  assign LOCKSTEP_Master_Out[3709] = \<const0> ;
  assign LOCKSTEP_Master_Out[3710] = \<const0> ;
  assign LOCKSTEP_Master_Out[3711] = \<const0> ;
  assign LOCKSTEP_Master_Out[3712] = \<const0> ;
  assign LOCKSTEP_Master_Out[3713] = \<const0> ;
  assign LOCKSTEP_Master_Out[3714] = \<const0> ;
  assign LOCKSTEP_Master_Out[3715] = \<const0> ;
  assign LOCKSTEP_Master_Out[3716] = \<const0> ;
  assign LOCKSTEP_Master_Out[3717] = \<const0> ;
  assign LOCKSTEP_Master_Out[3718] = \<const0> ;
  assign LOCKSTEP_Master_Out[3719] = \<const0> ;
  assign LOCKSTEP_Master_Out[3720] = \<const0> ;
  assign LOCKSTEP_Master_Out[3721] = \<const0> ;
  assign LOCKSTEP_Master_Out[3722] = \<const0> ;
  assign LOCKSTEP_Master_Out[3723] = \<const0> ;
  assign LOCKSTEP_Master_Out[3724] = \<const0> ;
  assign LOCKSTEP_Master_Out[3725] = \<const0> ;
  assign LOCKSTEP_Master_Out[3726] = \<const0> ;
  assign LOCKSTEP_Master_Out[3727] = \<const0> ;
  assign LOCKSTEP_Master_Out[3728] = \<const0> ;
  assign LOCKSTEP_Master_Out[3729] = \<const0> ;
  assign LOCKSTEP_Master_Out[3730] = \<const0> ;
  assign LOCKSTEP_Master_Out[3731] = \<const0> ;
  assign LOCKSTEP_Master_Out[3732] = \<const0> ;
  assign LOCKSTEP_Master_Out[3733] = \<const0> ;
  assign LOCKSTEP_Master_Out[3734] = \<const0> ;
  assign LOCKSTEP_Master_Out[3735] = \<const0> ;
  assign LOCKSTEP_Master_Out[3736] = \<const0> ;
  assign LOCKSTEP_Master_Out[3737] = \<const0> ;
  assign LOCKSTEP_Master_Out[3738] = \<const0> ;
  assign LOCKSTEP_Master_Out[3739] = \<const0> ;
  assign LOCKSTEP_Master_Out[3740] = \<const0> ;
  assign LOCKSTEP_Master_Out[3741] = \<const0> ;
  assign LOCKSTEP_Master_Out[3742] = \<const0> ;
  assign LOCKSTEP_Master_Out[3743] = \<const0> ;
  assign LOCKSTEP_Master_Out[3744] = \<const0> ;
  assign LOCKSTEP_Master_Out[3745] = \<const0> ;
  assign LOCKSTEP_Master_Out[3746] = \<const0> ;
  assign LOCKSTEP_Master_Out[3747] = \<const0> ;
  assign LOCKSTEP_Master_Out[3748] = \<const0> ;
  assign LOCKSTEP_Master_Out[3749] = \<const0> ;
  assign LOCKSTEP_Master_Out[3750] = \<const0> ;
  assign LOCKSTEP_Master_Out[3751] = \<const0> ;
  assign LOCKSTEP_Master_Out[3752] = \<const0> ;
  assign LOCKSTEP_Master_Out[3753] = \<const0> ;
  assign LOCKSTEP_Master_Out[3754] = \<const0> ;
  assign LOCKSTEP_Master_Out[3755] = \<const0> ;
  assign LOCKSTEP_Master_Out[3756] = \<const0> ;
  assign LOCKSTEP_Master_Out[3757] = \<const0> ;
  assign LOCKSTEP_Master_Out[3758] = \<const0> ;
  assign LOCKSTEP_Master_Out[3759] = \<const0> ;
  assign LOCKSTEP_Master_Out[3760] = \<const0> ;
  assign LOCKSTEP_Master_Out[3761] = \<const0> ;
  assign LOCKSTEP_Master_Out[3762] = \<const0> ;
  assign LOCKSTEP_Master_Out[3763] = \<const0> ;
  assign LOCKSTEP_Master_Out[3764] = \<const0> ;
  assign LOCKSTEP_Master_Out[3765] = \<const0> ;
  assign LOCKSTEP_Master_Out[3766] = \<const0> ;
  assign LOCKSTEP_Master_Out[3767] = \<const0> ;
  assign LOCKSTEP_Master_Out[3768] = \<const0> ;
  assign LOCKSTEP_Master_Out[3769] = \<const0> ;
  assign LOCKSTEP_Master_Out[3770] = \<const0> ;
  assign LOCKSTEP_Master_Out[3771] = \<const0> ;
  assign LOCKSTEP_Master_Out[3772] = \<const0> ;
  assign LOCKSTEP_Master_Out[3773] = \<const0> ;
  assign LOCKSTEP_Master_Out[3774] = \<const0> ;
  assign LOCKSTEP_Master_Out[3775] = \<const0> ;
  assign LOCKSTEP_Master_Out[3776] = \<const0> ;
  assign LOCKSTEP_Master_Out[3777] = \<const0> ;
  assign LOCKSTEP_Master_Out[3778] = \<const0> ;
  assign LOCKSTEP_Master_Out[3779] = \<const0> ;
  assign LOCKSTEP_Master_Out[3780] = \<const0> ;
  assign LOCKSTEP_Master_Out[3781] = \<const0> ;
  assign LOCKSTEP_Master_Out[3782] = \<const0> ;
  assign LOCKSTEP_Master_Out[3783] = \<const0> ;
  assign LOCKSTEP_Master_Out[3784] = \<const0> ;
  assign LOCKSTEP_Master_Out[3785] = \<const0> ;
  assign LOCKSTEP_Master_Out[3786] = \<const0> ;
  assign LOCKSTEP_Master_Out[3787] = \<const0> ;
  assign LOCKSTEP_Master_Out[3788] = \<const0> ;
  assign LOCKSTEP_Master_Out[3789] = \<const0> ;
  assign LOCKSTEP_Master_Out[3790] = \<const0> ;
  assign LOCKSTEP_Master_Out[3791] = \<const0> ;
  assign LOCKSTEP_Master_Out[3792] = \<const0> ;
  assign LOCKSTEP_Master_Out[3793] = \<const0> ;
  assign LOCKSTEP_Master_Out[3794] = \<const0> ;
  assign LOCKSTEP_Master_Out[3795] = \<const0> ;
  assign LOCKSTEP_Master_Out[3796] = \<const0> ;
  assign LOCKSTEP_Master_Out[3797] = \<const0> ;
  assign LOCKSTEP_Master_Out[3798] = \<const0> ;
  assign LOCKSTEP_Master_Out[3799] = \<const0> ;
  assign LOCKSTEP_Master_Out[3800] = \<const0> ;
  assign LOCKSTEP_Master_Out[3801] = \<const0> ;
  assign LOCKSTEP_Master_Out[3802] = \<const0> ;
  assign LOCKSTEP_Master_Out[3803] = \<const0> ;
  assign LOCKSTEP_Master_Out[3804] = \<const0> ;
  assign LOCKSTEP_Master_Out[3805] = \<const0> ;
  assign LOCKSTEP_Master_Out[3806] = \<const0> ;
  assign LOCKSTEP_Master_Out[3807] = \<const0> ;
  assign LOCKSTEP_Master_Out[3808] = \<const0> ;
  assign LOCKSTEP_Master_Out[3809] = \<const0> ;
  assign LOCKSTEP_Master_Out[3810] = \<const0> ;
  assign LOCKSTEP_Master_Out[3811] = \<const0> ;
  assign LOCKSTEP_Master_Out[3812] = \<const0> ;
  assign LOCKSTEP_Master_Out[3813] = \<const0> ;
  assign LOCKSTEP_Master_Out[3814] = \<const0> ;
  assign LOCKSTEP_Master_Out[3815] = \<const0> ;
  assign LOCKSTEP_Master_Out[3816] = \<const0> ;
  assign LOCKSTEP_Master_Out[3817] = \<const0> ;
  assign LOCKSTEP_Master_Out[3818] = \<const0> ;
  assign LOCKSTEP_Master_Out[3819] = \<const0> ;
  assign LOCKSTEP_Master_Out[3820] = \<const0> ;
  assign LOCKSTEP_Master_Out[3821] = \<const0> ;
  assign LOCKSTEP_Master_Out[3822] = \<const0> ;
  assign LOCKSTEP_Master_Out[3823] = \<const0> ;
  assign LOCKSTEP_Master_Out[3824] = \<const0> ;
  assign LOCKSTEP_Master_Out[3825] = \<const0> ;
  assign LOCKSTEP_Master_Out[3826] = \<const0> ;
  assign LOCKSTEP_Master_Out[3827] = \<const0> ;
  assign LOCKSTEP_Master_Out[3828] = \<const0> ;
  assign LOCKSTEP_Master_Out[3829] = \<const0> ;
  assign LOCKSTEP_Master_Out[3830] = \<const0> ;
  assign LOCKSTEP_Master_Out[3831] = \<const0> ;
  assign LOCKSTEP_Master_Out[3832] = \<const0> ;
  assign LOCKSTEP_Master_Out[3833] = \<const0> ;
  assign LOCKSTEP_Master_Out[3834] = \<const0> ;
  assign LOCKSTEP_Master_Out[3835] = \<const0> ;
  assign LOCKSTEP_Master_Out[3836] = \<const0> ;
  assign LOCKSTEP_Master_Out[3837] = \<const0> ;
  assign LOCKSTEP_Master_Out[3838] = \<const0> ;
  assign LOCKSTEP_Master_Out[3839] = \<const0> ;
  assign LOCKSTEP_Master_Out[3840] = \<const0> ;
  assign LOCKSTEP_Master_Out[3841] = \<const0> ;
  assign LOCKSTEP_Master_Out[3842] = \<const0> ;
  assign LOCKSTEP_Master_Out[3843] = \<const0> ;
  assign LOCKSTEP_Master_Out[3844] = \<const0> ;
  assign LOCKSTEP_Master_Out[3845] = \<const0> ;
  assign LOCKSTEP_Master_Out[3846] = \<const0> ;
  assign LOCKSTEP_Master_Out[3847] = \<const0> ;
  assign LOCKSTEP_Master_Out[3848] = \<const0> ;
  assign LOCKSTEP_Master_Out[3849] = \<const0> ;
  assign LOCKSTEP_Master_Out[3850] = \<const0> ;
  assign LOCKSTEP_Master_Out[3851] = \<const0> ;
  assign LOCKSTEP_Master_Out[3852] = \<const0> ;
  assign LOCKSTEP_Master_Out[3853] = \<const0> ;
  assign LOCKSTEP_Master_Out[3854] = \<const0> ;
  assign LOCKSTEP_Master_Out[3855] = \<const0> ;
  assign LOCKSTEP_Master_Out[3856] = \<const0> ;
  assign LOCKSTEP_Master_Out[3857] = \<const0> ;
  assign LOCKSTEP_Master_Out[3858] = \<const0> ;
  assign LOCKSTEP_Master_Out[3859] = \<const0> ;
  assign LOCKSTEP_Master_Out[3860] = \<const0> ;
  assign LOCKSTEP_Master_Out[3861] = \<const0> ;
  assign LOCKSTEP_Master_Out[3862] = \<const0> ;
  assign LOCKSTEP_Master_Out[3863] = \<const0> ;
  assign LOCKSTEP_Master_Out[3864] = \<const0> ;
  assign LOCKSTEP_Master_Out[3865] = \<const0> ;
  assign LOCKSTEP_Master_Out[3866] = \<const0> ;
  assign LOCKSTEP_Master_Out[3867] = \<const0> ;
  assign LOCKSTEP_Master_Out[3868] = \<const0> ;
  assign LOCKSTEP_Master_Out[3869] = \<const0> ;
  assign LOCKSTEP_Master_Out[3870] = \<const0> ;
  assign LOCKSTEP_Master_Out[3871] = \<const0> ;
  assign LOCKSTEP_Master_Out[3872] = \<const0> ;
  assign LOCKSTEP_Master_Out[3873] = \<const0> ;
  assign LOCKSTEP_Master_Out[3874] = \<const0> ;
  assign LOCKSTEP_Master_Out[3875] = \<const0> ;
  assign LOCKSTEP_Master_Out[3876] = \<const0> ;
  assign LOCKSTEP_Master_Out[3877] = \<const0> ;
  assign LOCKSTEP_Master_Out[3878] = \<const0> ;
  assign LOCKSTEP_Master_Out[3879] = \<const0> ;
  assign LOCKSTEP_Master_Out[3880] = \<const0> ;
  assign LOCKSTEP_Master_Out[3881] = \<const0> ;
  assign LOCKSTEP_Master_Out[3882] = \<const0> ;
  assign LOCKSTEP_Master_Out[3883] = \<const0> ;
  assign LOCKSTEP_Master_Out[3884] = \<const0> ;
  assign LOCKSTEP_Master_Out[3885] = \<const0> ;
  assign LOCKSTEP_Master_Out[3886] = \<const0> ;
  assign LOCKSTEP_Master_Out[3887] = \<const0> ;
  assign LOCKSTEP_Master_Out[3888] = \<const0> ;
  assign LOCKSTEP_Master_Out[3889] = \<const0> ;
  assign LOCKSTEP_Master_Out[3890] = \<const0> ;
  assign LOCKSTEP_Master_Out[3891] = \<const0> ;
  assign LOCKSTEP_Master_Out[3892] = \<const0> ;
  assign LOCKSTEP_Master_Out[3893] = \<const0> ;
  assign LOCKSTEP_Master_Out[3894] = \<const0> ;
  assign LOCKSTEP_Master_Out[3895] = \<const0> ;
  assign LOCKSTEP_Master_Out[3896] = \<const0> ;
  assign LOCKSTEP_Master_Out[3897] = \<const0> ;
  assign LOCKSTEP_Master_Out[3898] = \<const0> ;
  assign LOCKSTEP_Master_Out[3899] = \<const0> ;
  assign LOCKSTEP_Master_Out[3900] = \<const0> ;
  assign LOCKSTEP_Master_Out[3901] = \<const0> ;
  assign LOCKSTEP_Master_Out[3902] = \<const0> ;
  assign LOCKSTEP_Master_Out[3903] = \<const0> ;
  assign LOCKSTEP_Master_Out[3904] = \<const0> ;
  assign LOCKSTEP_Master_Out[3905] = \<const0> ;
  assign LOCKSTEP_Master_Out[3906] = \<const0> ;
  assign LOCKSTEP_Master_Out[3907] = \<const0> ;
  assign LOCKSTEP_Master_Out[3908] = \<const0> ;
  assign LOCKSTEP_Master_Out[3909] = \<const0> ;
  assign LOCKSTEP_Master_Out[3910] = \<const0> ;
  assign LOCKSTEP_Master_Out[3911] = \<const0> ;
  assign LOCKSTEP_Master_Out[3912] = \<const0> ;
  assign LOCKSTEP_Master_Out[3913] = \<const0> ;
  assign LOCKSTEP_Master_Out[3914] = \<const0> ;
  assign LOCKSTEP_Master_Out[3915] = \<const0> ;
  assign LOCKSTEP_Master_Out[3916] = \<const0> ;
  assign LOCKSTEP_Master_Out[3917] = \<const0> ;
  assign LOCKSTEP_Master_Out[3918] = \<const0> ;
  assign LOCKSTEP_Master_Out[3919] = \<const0> ;
  assign LOCKSTEP_Master_Out[3920] = \<const0> ;
  assign LOCKSTEP_Master_Out[3921] = \<const0> ;
  assign LOCKSTEP_Master_Out[3922] = \<const0> ;
  assign LOCKSTEP_Master_Out[3923] = \<const0> ;
  assign LOCKSTEP_Master_Out[3924] = \<const0> ;
  assign LOCKSTEP_Master_Out[3925] = \<const0> ;
  assign LOCKSTEP_Master_Out[3926] = \<const0> ;
  assign LOCKSTEP_Master_Out[3927] = \<const0> ;
  assign LOCKSTEP_Master_Out[3928] = \<const0> ;
  assign LOCKSTEP_Master_Out[3929] = \<const0> ;
  assign LOCKSTEP_Master_Out[3930] = \<const0> ;
  assign LOCKSTEP_Master_Out[3931] = \<const0> ;
  assign LOCKSTEP_Master_Out[3932] = \<const0> ;
  assign LOCKSTEP_Master_Out[3933] = \<const0> ;
  assign LOCKSTEP_Master_Out[3934] = \<const0> ;
  assign LOCKSTEP_Master_Out[3935] = \<const0> ;
  assign LOCKSTEP_Master_Out[3936] = \<const0> ;
  assign LOCKSTEP_Master_Out[3937] = \<const0> ;
  assign LOCKSTEP_Master_Out[3938] = \<const0> ;
  assign LOCKSTEP_Master_Out[3939] = \<const0> ;
  assign LOCKSTEP_Master_Out[3940] = \<const0> ;
  assign LOCKSTEP_Master_Out[3941] = \<const0> ;
  assign LOCKSTEP_Master_Out[3942] = \<const0> ;
  assign LOCKSTEP_Master_Out[3943] = \<const0> ;
  assign LOCKSTEP_Master_Out[3944] = \<const0> ;
  assign LOCKSTEP_Master_Out[3945] = \<const0> ;
  assign LOCKSTEP_Master_Out[3946] = \<const0> ;
  assign LOCKSTEP_Master_Out[3947] = \<const0> ;
  assign LOCKSTEP_Master_Out[3948] = \<const0> ;
  assign LOCKSTEP_Master_Out[3949] = \<const0> ;
  assign LOCKSTEP_Master_Out[3950] = \<const0> ;
  assign LOCKSTEP_Master_Out[3951] = \<const0> ;
  assign LOCKSTEP_Master_Out[3952] = \<const0> ;
  assign LOCKSTEP_Master_Out[3953] = \<const0> ;
  assign LOCKSTEP_Master_Out[3954] = \<const0> ;
  assign LOCKSTEP_Master_Out[3955] = \<const0> ;
  assign LOCKSTEP_Master_Out[3956] = \<const0> ;
  assign LOCKSTEP_Master_Out[3957] = \<const0> ;
  assign LOCKSTEP_Master_Out[3958] = \<const0> ;
  assign LOCKSTEP_Master_Out[3959] = \<const0> ;
  assign LOCKSTEP_Master_Out[3960] = \<const0> ;
  assign LOCKSTEP_Master_Out[3961] = \<const0> ;
  assign LOCKSTEP_Master_Out[3962] = \<const0> ;
  assign LOCKSTEP_Master_Out[3963] = \<const0> ;
  assign LOCKSTEP_Master_Out[3964] = \<const0> ;
  assign LOCKSTEP_Master_Out[3965] = \<const0> ;
  assign LOCKSTEP_Master_Out[3966] = \<const0> ;
  assign LOCKSTEP_Master_Out[3967] = \<const0> ;
  assign LOCKSTEP_Master_Out[3968] = \<const0> ;
  assign LOCKSTEP_Master_Out[3969] = \<const0> ;
  assign LOCKSTEP_Master_Out[3970] = \<const0> ;
  assign LOCKSTEP_Master_Out[3971] = \<const0> ;
  assign LOCKSTEP_Master_Out[3972] = \<const0> ;
  assign LOCKSTEP_Master_Out[3973] = \<const0> ;
  assign LOCKSTEP_Master_Out[3974] = \<const0> ;
  assign LOCKSTEP_Master_Out[3975] = \<const0> ;
  assign LOCKSTEP_Master_Out[3976] = \<const0> ;
  assign LOCKSTEP_Master_Out[3977] = \<const0> ;
  assign LOCKSTEP_Master_Out[3978] = \<const0> ;
  assign LOCKSTEP_Master_Out[3979] = \<const0> ;
  assign LOCKSTEP_Master_Out[3980] = \<const0> ;
  assign LOCKSTEP_Master_Out[3981] = \<const0> ;
  assign LOCKSTEP_Master_Out[3982] = \<const0> ;
  assign LOCKSTEP_Master_Out[3983] = \<const0> ;
  assign LOCKSTEP_Master_Out[3984] = \<const0> ;
  assign LOCKSTEP_Master_Out[3985] = \<const0> ;
  assign LOCKSTEP_Master_Out[3986] = \<const0> ;
  assign LOCKSTEP_Master_Out[3987] = \<const0> ;
  assign LOCKSTEP_Master_Out[3988] = \<const0> ;
  assign LOCKSTEP_Master_Out[3989] = \<const0> ;
  assign LOCKSTEP_Master_Out[3990] = \<const0> ;
  assign LOCKSTEP_Master_Out[3991] = \<const0> ;
  assign LOCKSTEP_Master_Out[3992] = \<const0> ;
  assign LOCKSTEP_Master_Out[3993] = \<const0> ;
  assign LOCKSTEP_Master_Out[3994] = \<const0> ;
  assign LOCKSTEP_Master_Out[3995] = \<const0> ;
  assign LOCKSTEP_Master_Out[3996] = \<const0> ;
  assign LOCKSTEP_Master_Out[3997] = \<const0> ;
  assign LOCKSTEP_Master_Out[3998] = \<const0> ;
  assign LOCKSTEP_Master_Out[3999] = \<const0> ;
  assign LOCKSTEP_Master_Out[4000] = \<const0> ;
  assign LOCKSTEP_Master_Out[4001] = \<const0> ;
  assign LOCKSTEP_Master_Out[4002] = \<const0> ;
  assign LOCKSTEP_Master_Out[4003] = \<const0> ;
  assign LOCKSTEP_Master_Out[4004] = \<const0> ;
  assign LOCKSTEP_Master_Out[4005] = \<const0> ;
  assign LOCKSTEP_Master_Out[4006] = \<const0> ;
  assign LOCKSTEP_Master_Out[4007] = \<const0> ;
  assign LOCKSTEP_Master_Out[4008] = \<const0> ;
  assign LOCKSTEP_Master_Out[4009] = \<const0> ;
  assign LOCKSTEP_Master_Out[4010] = \<const0> ;
  assign LOCKSTEP_Master_Out[4011] = \<const0> ;
  assign LOCKSTEP_Master_Out[4012] = \<const0> ;
  assign LOCKSTEP_Master_Out[4013] = \<const0> ;
  assign LOCKSTEP_Master_Out[4014] = \<const0> ;
  assign LOCKSTEP_Master_Out[4015] = \<const0> ;
  assign LOCKSTEP_Master_Out[4016] = \<const0> ;
  assign LOCKSTEP_Master_Out[4017] = \<const0> ;
  assign LOCKSTEP_Master_Out[4018] = \<const0> ;
  assign LOCKSTEP_Master_Out[4019] = \<const0> ;
  assign LOCKSTEP_Master_Out[4020] = \<const0> ;
  assign LOCKSTEP_Master_Out[4021] = \<const0> ;
  assign LOCKSTEP_Master_Out[4022] = \<const0> ;
  assign LOCKSTEP_Master_Out[4023] = \<const0> ;
  assign LOCKSTEP_Master_Out[4024] = \<const0> ;
  assign LOCKSTEP_Master_Out[4025] = \<const0> ;
  assign LOCKSTEP_Master_Out[4026] = \<const0> ;
  assign LOCKSTEP_Master_Out[4027] = \<const0> ;
  assign LOCKSTEP_Master_Out[4028] = \<const0> ;
  assign LOCKSTEP_Master_Out[4029] = \<const0> ;
  assign LOCKSTEP_Master_Out[4030] = \<const0> ;
  assign LOCKSTEP_Master_Out[4031] = \<const0> ;
  assign LOCKSTEP_Master_Out[4032] = \<const0> ;
  assign LOCKSTEP_Master_Out[4033] = \<const0> ;
  assign LOCKSTEP_Master_Out[4034] = \<const0> ;
  assign LOCKSTEP_Master_Out[4035] = \<const0> ;
  assign LOCKSTEP_Master_Out[4036] = \<const0> ;
  assign LOCKSTEP_Master_Out[4037] = \<const0> ;
  assign LOCKSTEP_Master_Out[4038] = \<const0> ;
  assign LOCKSTEP_Master_Out[4039] = \<const0> ;
  assign LOCKSTEP_Master_Out[4040] = \<const0> ;
  assign LOCKSTEP_Master_Out[4041] = \<const0> ;
  assign LOCKSTEP_Master_Out[4042] = \<const0> ;
  assign LOCKSTEP_Master_Out[4043] = \<const0> ;
  assign LOCKSTEP_Master_Out[4044] = \<const0> ;
  assign LOCKSTEP_Master_Out[4045] = \<const0> ;
  assign LOCKSTEP_Master_Out[4046] = \<const0> ;
  assign LOCKSTEP_Master_Out[4047] = \<const0> ;
  assign LOCKSTEP_Master_Out[4048] = \<const0> ;
  assign LOCKSTEP_Master_Out[4049] = \<const0> ;
  assign LOCKSTEP_Master_Out[4050] = \<const0> ;
  assign LOCKSTEP_Master_Out[4051] = \<const0> ;
  assign LOCKSTEP_Master_Out[4052] = \<const0> ;
  assign LOCKSTEP_Master_Out[4053] = \<const0> ;
  assign LOCKSTEP_Master_Out[4054] = \<const0> ;
  assign LOCKSTEP_Master_Out[4055] = \<const0> ;
  assign LOCKSTEP_Master_Out[4056] = \<const0> ;
  assign LOCKSTEP_Master_Out[4057] = \<const0> ;
  assign LOCKSTEP_Master_Out[4058] = \<const0> ;
  assign LOCKSTEP_Master_Out[4059] = \<const0> ;
  assign LOCKSTEP_Master_Out[4060] = \<const0> ;
  assign LOCKSTEP_Master_Out[4061] = \<const0> ;
  assign LOCKSTEP_Master_Out[4062] = \<const0> ;
  assign LOCKSTEP_Master_Out[4063] = \<const0> ;
  assign LOCKSTEP_Master_Out[4064] = \<const0> ;
  assign LOCKSTEP_Master_Out[4065] = \<const0> ;
  assign LOCKSTEP_Master_Out[4066] = \<const0> ;
  assign LOCKSTEP_Master_Out[4067] = \<const0> ;
  assign LOCKSTEP_Master_Out[4068] = \<const0> ;
  assign LOCKSTEP_Master_Out[4069] = \<const0> ;
  assign LOCKSTEP_Master_Out[4070] = \<const0> ;
  assign LOCKSTEP_Master_Out[4071] = \<const0> ;
  assign LOCKSTEP_Master_Out[4072] = \<const0> ;
  assign LOCKSTEP_Master_Out[4073] = \<const0> ;
  assign LOCKSTEP_Master_Out[4074] = \<const0> ;
  assign LOCKSTEP_Master_Out[4075] = \<const0> ;
  assign LOCKSTEP_Master_Out[4076] = \<const0> ;
  assign LOCKSTEP_Master_Out[4077] = \<const0> ;
  assign LOCKSTEP_Master_Out[4078] = \<const0> ;
  assign LOCKSTEP_Master_Out[4079] = \<const0> ;
  assign LOCKSTEP_Master_Out[4080] = \<const0> ;
  assign LOCKSTEP_Master_Out[4081] = \<const0> ;
  assign LOCKSTEP_Master_Out[4082] = \<const0> ;
  assign LOCKSTEP_Master_Out[4083] = \<const0> ;
  assign LOCKSTEP_Master_Out[4084] = \<const0> ;
  assign LOCKSTEP_Master_Out[4085] = \<const0> ;
  assign LOCKSTEP_Master_Out[4086] = \<const0> ;
  assign LOCKSTEP_Master_Out[4087] = \<const0> ;
  assign LOCKSTEP_Master_Out[4088] = \<const0> ;
  assign LOCKSTEP_Master_Out[4089] = \<const0> ;
  assign LOCKSTEP_Master_Out[4090] = \<const0> ;
  assign LOCKSTEP_Master_Out[4091] = \<const0> ;
  assign LOCKSTEP_Master_Out[4092] = \<const0> ;
  assign LOCKSTEP_Master_Out[4093] = \<const0> ;
  assign LOCKSTEP_Master_Out[4094] = \<const0> ;
  assign LOCKSTEP_Master_Out[4095] = \<const0> ;
  assign LOCKSTEP_Out[0] = \^LOCKSTEP_Out [3228];
  assign LOCKSTEP_Out[1] = \<const0> ;
  assign LOCKSTEP_Out[2:35] = \^LOCKSTEP_Out [2:35];
  assign LOCKSTEP_Out[36] = \<const0> ;
  assign LOCKSTEP_Out[37] = \<const0> ;
  assign LOCKSTEP_Out[38] = \<const0> ;
  assign LOCKSTEP_Out[39] = \<const0> ;
  assign LOCKSTEP_Out[40] = \<const0> ;
  assign LOCKSTEP_Out[41] = \<const0> ;
  assign LOCKSTEP_Out[42] = \<const0> ;
  assign LOCKSTEP_Out[43] = \<const0> ;
  assign LOCKSTEP_Out[44] = \<const0> ;
  assign LOCKSTEP_Out[45] = \<const0> ;
  assign LOCKSTEP_Out[46] = \<const0> ;
  assign LOCKSTEP_Out[47] = \<const0> ;
  assign LOCKSTEP_Out[48] = \<const0> ;
  assign LOCKSTEP_Out[49] = \<const0> ;
  assign LOCKSTEP_Out[50] = \<const0> ;
  assign LOCKSTEP_Out[51] = \<const0> ;
  assign LOCKSTEP_Out[52] = \<const0> ;
  assign LOCKSTEP_Out[53] = \<const0> ;
  assign LOCKSTEP_Out[54] = \<const0> ;
  assign LOCKSTEP_Out[55] = \<const0> ;
  assign LOCKSTEP_Out[56] = \<const0> ;
  assign LOCKSTEP_Out[57] = \<const0> ;
  assign LOCKSTEP_Out[58] = \<const0> ;
  assign LOCKSTEP_Out[59] = \<const0> ;
  assign LOCKSTEP_Out[60] = \<const0> ;
  assign LOCKSTEP_Out[61] = \<const0> ;
  assign LOCKSTEP_Out[62] = \<const0> ;
  assign LOCKSTEP_Out[63] = \<const0> ;
  assign LOCKSTEP_Out[64] = \<const0> ;
  assign LOCKSTEP_Out[65] = \<const0> ;
  assign LOCKSTEP_Out[66] = \<const0> ;
  assign LOCKSTEP_Out[67] = \<const0> ;
  assign LOCKSTEP_Out[68:99] = \^LOCKSTEP_Out [68:99];
  assign LOCKSTEP_Out[100] = \<const0> ;
  assign LOCKSTEP_Out[101] = \<const0> ;
  assign LOCKSTEP_Out[102] = \<const0> ;
  assign LOCKSTEP_Out[103] = \<const0> ;
  assign LOCKSTEP_Out[104] = \<const0> ;
  assign LOCKSTEP_Out[105] = \<const0> ;
  assign LOCKSTEP_Out[106] = \<const0> ;
  assign LOCKSTEP_Out[107] = \<const0> ;
  assign LOCKSTEP_Out[108] = \<const0> ;
  assign LOCKSTEP_Out[109] = \<const0> ;
  assign LOCKSTEP_Out[110] = \<const0> ;
  assign LOCKSTEP_Out[111] = \<const0> ;
  assign LOCKSTEP_Out[112] = \<const0> ;
  assign LOCKSTEP_Out[113] = \<const0> ;
  assign LOCKSTEP_Out[114] = \<const0> ;
  assign LOCKSTEP_Out[115] = \<const0> ;
  assign LOCKSTEP_Out[116] = \<const0> ;
  assign LOCKSTEP_Out[117] = \<const0> ;
  assign LOCKSTEP_Out[118] = \<const0> ;
  assign LOCKSTEP_Out[119] = \<const0> ;
  assign LOCKSTEP_Out[120] = \<const0> ;
  assign LOCKSTEP_Out[121] = \<const0> ;
  assign LOCKSTEP_Out[122] = \<const0> ;
  assign LOCKSTEP_Out[123] = \<const0> ;
  assign LOCKSTEP_Out[124] = \<const0> ;
  assign LOCKSTEP_Out[125] = \<const0> ;
  assign LOCKSTEP_Out[126] = \<const0> ;
  assign LOCKSTEP_Out[127] = \<const0> ;
  assign LOCKSTEP_Out[128] = \<const0> ;
  assign LOCKSTEP_Out[129] = \<const0> ;
  assign LOCKSTEP_Out[130] = \<const0> ;
  assign LOCKSTEP_Out[131] = \<const0> ;
  assign LOCKSTEP_Out[132:163] = \^LOCKSTEP_Out [132:163];
  assign LOCKSTEP_Out[164] = \<const0> ;
  assign LOCKSTEP_Out[165] = \<const0> ;
  assign LOCKSTEP_Out[166] = \<const0> ;
  assign LOCKSTEP_Out[167] = \<const0> ;
  assign LOCKSTEP_Out[168] = \<const0> ;
  assign LOCKSTEP_Out[169] = \<const0> ;
  assign LOCKSTEP_Out[170] = \<const0> ;
  assign LOCKSTEP_Out[171] = \<const0> ;
  assign LOCKSTEP_Out[172] = \<const0> ;
  assign LOCKSTEP_Out[173] = \<const0> ;
  assign LOCKSTEP_Out[174] = \<const0> ;
  assign LOCKSTEP_Out[175] = \<const0> ;
  assign LOCKSTEP_Out[176] = \<const0> ;
  assign LOCKSTEP_Out[177] = \<const0> ;
  assign LOCKSTEP_Out[178] = \<const0> ;
  assign LOCKSTEP_Out[179] = \<const0> ;
  assign LOCKSTEP_Out[180] = \<const0> ;
  assign LOCKSTEP_Out[181] = \<const0> ;
  assign LOCKSTEP_Out[182] = \<const0> ;
  assign LOCKSTEP_Out[183] = \<const0> ;
  assign LOCKSTEP_Out[184] = \<const0> ;
  assign LOCKSTEP_Out[185] = \<const0> ;
  assign LOCKSTEP_Out[186] = \<const0> ;
  assign LOCKSTEP_Out[187] = \<const0> ;
  assign LOCKSTEP_Out[188] = \<const0> ;
  assign LOCKSTEP_Out[189] = \<const0> ;
  assign LOCKSTEP_Out[190] = \<const0> ;
  assign LOCKSTEP_Out[191] = \<const0> ;
  assign LOCKSTEP_Out[192] = \<const0> ;
  assign LOCKSTEP_Out[193] = \<const0> ;
  assign LOCKSTEP_Out[194] = \<const0> ;
  assign LOCKSTEP_Out[195] = \<const0> ;
  assign LOCKSTEP_Out[196:202] = \^LOCKSTEP_Out [196:202];
  assign LOCKSTEP_Out[203] = \<const0> ;
  assign LOCKSTEP_Out[204] = \<const0> ;
  assign LOCKSTEP_Out[205] = \<const0> ;
  assign LOCKSTEP_Out[206] = \<const0> ;
  assign LOCKSTEP_Out[207] = \<const0> ;
  assign LOCKSTEP_Out[208] = \<const0> ;
  assign LOCKSTEP_Out[209] = \<const0> ;
  assign LOCKSTEP_Out[210] = \<const0> ;
  assign LOCKSTEP_Out[211] = \<const0> ;
  assign LOCKSTEP_Out[212] = \<const0> ;
  assign LOCKSTEP_Out[213] = \<const0> ;
  assign LOCKSTEP_Out[214] = \<const0> ;
  assign LOCKSTEP_Out[215] = \<const0> ;
  assign LOCKSTEP_Out[216] = \<const0> ;
  assign LOCKSTEP_Out[217] = \<const0> ;
  assign LOCKSTEP_Out[218] = \<const0> ;
  assign LOCKSTEP_Out[219] = \<const0> ;
  assign LOCKSTEP_Out[220] = \<const0> ;
  assign LOCKSTEP_Out[221] = \<const0> ;
  assign LOCKSTEP_Out[222] = \<const0> ;
  assign LOCKSTEP_Out[223] = \<const0> ;
  assign LOCKSTEP_Out[224] = \<const0> ;
  assign LOCKSTEP_Out[225] = \<const0> ;
  assign LOCKSTEP_Out[226] = \<const0> ;
  assign LOCKSTEP_Out[227] = \<const0> ;
  assign LOCKSTEP_Out[228] = \<const0> ;
  assign LOCKSTEP_Out[229] = \<const0> ;
  assign LOCKSTEP_Out[230] = \<const0> ;
  assign LOCKSTEP_Out[231] = \<const0> ;
  assign LOCKSTEP_Out[232] = \<const0> ;
  assign LOCKSTEP_Out[233] = \<const0> ;
  assign LOCKSTEP_Out[234] = \<const0> ;
  assign LOCKSTEP_Out[235] = \<const0> ;
  assign LOCKSTEP_Out[236] = \<const0> ;
  assign LOCKSTEP_Out[237] = \<const0> ;
  assign LOCKSTEP_Out[238] = \<const0> ;
  assign LOCKSTEP_Out[239] = \<const0> ;
  assign LOCKSTEP_Out[240] = \<const0> ;
  assign LOCKSTEP_Out[241] = \<const0> ;
  assign LOCKSTEP_Out[242] = \<const0> ;
  assign LOCKSTEP_Out[243] = \<const0> ;
  assign LOCKSTEP_Out[244] = \<const0> ;
  assign LOCKSTEP_Out[245] = \<const0> ;
  assign LOCKSTEP_Out[246] = \<const0> ;
  assign LOCKSTEP_Out[247] = \<const0> ;
  assign LOCKSTEP_Out[248] = \<const0> ;
  assign LOCKSTEP_Out[249] = \<const0> ;
  assign LOCKSTEP_Out[250] = \<const0> ;
  assign LOCKSTEP_Out[251] = \<const0> ;
  assign LOCKSTEP_Out[252] = \<const0> ;
  assign LOCKSTEP_Out[253] = \<const0> ;
  assign LOCKSTEP_Out[254] = \<const0> ;
  assign LOCKSTEP_Out[255] = \<const0> ;
  assign LOCKSTEP_Out[256] = \<const0> ;
  assign LOCKSTEP_Out[257] = \<const0> ;
  assign LOCKSTEP_Out[258] = \<const0> ;
  assign LOCKSTEP_Out[259] = \<const0> ;
  assign LOCKSTEP_Out[260] = \<const0> ;
  assign LOCKSTEP_Out[261] = \<const0> ;
  assign LOCKSTEP_Out[262] = \<const0> ;
  assign LOCKSTEP_Out[263] = \<const0> ;
  assign LOCKSTEP_Out[264] = \<const0> ;
  assign LOCKSTEP_Out[265] = \<const0> ;
  assign LOCKSTEP_Out[266] = \<const0> ;
  assign LOCKSTEP_Out[267] = \<const0> ;
  assign LOCKSTEP_Out[268] = \<const0> ;
  assign LOCKSTEP_Out[269] = \<const0> ;
  assign LOCKSTEP_Out[270] = \<const0> ;
  assign LOCKSTEP_Out[271] = \<const0> ;
  assign LOCKSTEP_Out[272] = \<const0> ;
  assign LOCKSTEP_Out[273] = \<const0> ;
  assign LOCKSTEP_Out[274] = \<const0> ;
  assign LOCKSTEP_Out[275] = \<const0> ;
  assign LOCKSTEP_Out[276] = \<const0> ;
  assign LOCKSTEP_Out[277] = \<const0> ;
  assign LOCKSTEP_Out[278] = \<const0> ;
  assign LOCKSTEP_Out[279] = \<const0> ;
  assign LOCKSTEP_Out[280] = \<const0> ;
  assign LOCKSTEP_Out[281] = \<const0> ;
  assign LOCKSTEP_Out[282] = \<const0> ;
  assign LOCKSTEP_Out[283] = \<const0> ;
  assign LOCKSTEP_Out[284] = \<const0> ;
  assign LOCKSTEP_Out[285] = \<const0> ;
  assign LOCKSTEP_Out[286] = \<const0> ;
  assign LOCKSTEP_Out[287] = \<const0> ;
  assign LOCKSTEP_Out[288] = \<const0> ;
  assign LOCKSTEP_Out[289] = \<const0> ;
  assign LOCKSTEP_Out[290] = \<const0> ;
  assign LOCKSTEP_Out[291] = \<const0> ;
  assign LOCKSTEP_Out[292] = \<const0> ;
  assign LOCKSTEP_Out[293] = \<const0> ;
  assign LOCKSTEP_Out[294] = \<const0> ;
  assign LOCKSTEP_Out[295] = \<const0> ;
  assign LOCKSTEP_Out[296] = \<const0> ;
  assign LOCKSTEP_Out[297] = \<const0> ;
  assign LOCKSTEP_Out[298] = \<const0> ;
  assign LOCKSTEP_Out[299] = \<const0> ;
  assign LOCKSTEP_Out[300] = \<const0> ;
  assign LOCKSTEP_Out[301] = \<const0> ;
  assign LOCKSTEP_Out[302] = \<const0> ;
  assign LOCKSTEP_Out[303] = \<const0> ;
  assign LOCKSTEP_Out[304] = \<const0> ;
  assign LOCKSTEP_Out[305] = \<const0> ;
  assign LOCKSTEP_Out[306] = \<const0> ;
  assign LOCKSTEP_Out[307] = \<const0> ;
  assign LOCKSTEP_Out[308] = \<const0> ;
  assign LOCKSTEP_Out[309] = \<const0> ;
  assign LOCKSTEP_Out[310] = \<const0> ;
  assign LOCKSTEP_Out[311] = \<const0> ;
  assign LOCKSTEP_Out[312] = \<const0> ;
  assign LOCKSTEP_Out[313] = \<const0> ;
  assign LOCKSTEP_Out[314] = \<const0> ;
  assign LOCKSTEP_Out[315] = \<const0> ;
  assign LOCKSTEP_Out[316] = \<const0> ;
  assign LOCKSTEP_Out[317] = \<const0> ;
  assign LOCKSTEP_Out[318] = \<const0> ;
  assign LOCKSTEP_Out[319] = \<const0> ;
  assign LOCKSTEP_Out[320] = \<const0> ;
  assign LOCKSTEP_Out[321] = \<const0> ;
  assign LOCKSTEP_Out[322] = \<const0> ;
  assign LOCKSTEP_Out[323] = \<const0> ;
  assign LOCKSTEP_Out[324] = \<const0> ;
  assign LOCKSTEP_Out[325] = \<const0> ;
  assign LOCKSTEP_Out[326] = \<const0> ;
  assign LOCKSTEP_Out[327] = \<const0> ;
  assign LOCKSTEP_Out[328] = \<const0> ;
  assign LOCKSTEP_Out[329] = \<const0> ;
  assign LOCKSTEP_Out[330] = \<const0> ;
  assign LOCKSTEP_Out[331] = \<const0> ;
  assign LOCKSTEP_Out[332] = \<const0> ;
  assign LOCKSTEP_Out[333] = \<const0> ;
  assign LOCKSTEP_Out[334] = \<const0> ;
  assign LOCKSTEP_Out[335] = \<const0> ;
  assign LOCKSTEP_Out[336] = \<const0> ;
  assign LOCKSTEP_Out[337] = \<const0> ;
  assign LOCKSTEP_Out[338] = \<const0> ;
  assign LOCKSTEP_Out[339] = \<const0> ;
  assign LOCKSTEP_Out[340] = \<const0> ;
  assign LOCKSTEP_Out[341] = \<const0> ;
  assign LOCKSTEP_Out[342] = \<const0> ;
  assign LOCKSTEP_Out[343] = \<const0> ;
  assign LOCKSTEP_Out[344] = \<const0> ;
  assign LOCKSTEP_Out[345] = \<const0> ;
  assign LOCKSTEP_Out[346] = \<const0> ;
  assign LOCKSTEP_Out[347] = \<const0> ;
  assign LOCKSTEP_Out[348] = \<const0> ;
  assign LOCKSTEP_Out[349] = \<const0> ;
  assign LOCKSTEP_Out[350] = \<const0> ;
  assign LOCKSTEP_Out[351] = \<const0> ;
  assign LOCKSTEP_Out[352] = \<const0> ;
  assign LOCKSTEP_Out[353] = \<const0> ;
  assign LOCKSTEP_Out[354] = \<const0> ;
  assign LOCKSTEP_Out[355] = \<const0> ;
  assign LOCKSTEP_Out[356] = \<const0> ;
  assign LOCKSTEP_Out[357] = \<const0> ;
  assign LOCKSTEP_Out[358] = \<const0> ;
  assign LOCKSTEP_Out[359] = \<const0> ;
  assign LOCKSTEP_Out[360] = \<const0> ;
  assign LOCKSTEP_Out[361] = \<const0> ;
  assign LOCKSTEP_Out[362] = \<const0> ;
  assign LOCKSTEP_Out[363] = \<const0> ;
  assign LOCKSTEP_Out[364] = \<const0> ;
  assign LOCKSTEP_Out[365] = \<const0> ;
  assign LOCKSTEP_Out[366] = \<const0> ;
  assign LOCKSTEP_Out[367] = \<const0> ;
  assign LOCKSTEP_Out[368] = \<const0> ;
  assign LOCKSTEP_Out[369] = \<const0> ;
  assign LOCKSTEP_Out[370] = \<const0> ;
  assign LOCKSTEP_Out[371] = \<const0> ;
  assign LOCKSTEP_Out[372] = \<const0> ;
  assign LOCKSTEP_Out[373] = \<const0> ;
  assign LOCKSTEP_Out[374] = \<const0> ;
  assign LOCKSTEP_Out[375] = \<const0> ;
  assign LOCKSTEP_Out[376] = \<const0> ;
  assign LOCKSTEP_Out[377] = \<const0> ;
  assign LOCKSTEP_Out[378] = \<const0> ;
  assign LOCKSTEP_Out[379] = \<const0> ;
  assign LOCKSTEP_Out[380] = \<const0> ;
  assign LOCKSTEP_Out[381] = \<const0> ;
  assign LOCKSTEP_Out[382] = \<const0> ;
  assign LOCKSTEP_Out[383] = \<const0> ;
  assign LOCKSTEP_Out[384] = \<const0> ;
  assign LOCKSTEP_Out[385] = \<const0> ;
  assign LOCKSTEP_Out[386] = \<const0> ;
  assign LOCKSTEP_Out[387] = \<const0> ;
  assign LOCKSTEP_Out[388] = \<const0> ;
  assign LOCKSTEP_Out[389] = \<const0> ;
  assign LOCKSTEP_Out[390] = \<const0> ;
  assign LOCKSTEP_Out[391] = \<const0> ;
  assign LOCKSTEP_Out[392] = \<const0> ;
  assign LOCKSTEP_Out[393] = \<const0> ;
  assign LOCKSTEP_Out[394] = \<const0> ;
  assign LOCKSTEP_Out[395] = \<const0> ;
  assign LOCKSTEP_Out[396] = \<const0> ;
  assign LOCKSTEP_Out[397] = \<const0> ;
  assign LOCKSTEP_Out[398] = \<const0> ;
  assign LOCKSTEP_Out[399] = \<const0> ;
  assign LOCKSTEP_Out[400] = \<const0> ;
  assign LOCKSTEP_Out[401] = \<const0> ;
  assign LOCKSTEP_Out[402] = \<const0> ;
  assign LOCKSTEP_Out[403] = \<const0> ;
  assign LOCKSTEP_Out[404] = \<const0> ;
  assign LOCKSTEP_Out[405] = \<const0> ;
  assign LOCKSTEP_Out[406] = \<const0> ;
  assign LOCKSTEP_Out[407] = \<const0> ;
  assign LOCKSTEP_Out[408] = \<const0> ;
  assign LOCKSTEP_Out[409] = \<const0> ;
  assign LOCKSTEP_Out[410] = \<const0> ;
  assign LOCKSTEP_Out[411] = \<const0> ;
  assign LOCKSTEP_Out[412] = \<const0> ;
  assign LOCKSTEP_Out[413] = \<const0> ;
  assign LOCKSTEP_Out[414] = \<const0> ;
  assign LOCKSTEP_Out[415] = \<const0> ;
  assign LOCKSTEP_Out[416] = \<const0> ;
  assign LOCKSTEP_Out[417] = \<const0> ;
  assign LOCKSTEP_Out[418] = \<const0> ;
  assign LOCKSTEP_Out[419] = \<const0> ;
  assign LOCKSTEP_Out[420] = \<const0> ;
  assign LOCKSTEP_Out[421] = \<const0> ;
  assign LOCKSTEP_Out[422] = \<const0> ;
  assign LOCKSTEP_Out[423] = \<const0> ;
  assign LOCKSTEP_Out[424] = \<const0> ;
  assign LOCKSTEP_Out[425] = \<const0> ;
  assign LOCKSTEP_Out[426] = \<const0> ;
  assign LOCKSTEP_Out[427] = \<const0> ;
  assign LOCKSTEP_Out[428] = \<const0> ;
  assign LOCKSTEP_Out[429] = \<const0> ;
  assign LOCKSTEP_Out[430] = \<const0> ;
  assign LOCKSTEP_Out[431] = \<const0> ;
  assign LOCKSTEP_Out[432] = \<const0> ;
  assign LOCKSTEP_Out[433] = \<const0> ;
  assign LOCKSTEP_Out[434] = \<const0> ;
  assign LOCKSTEP_Out[435] = \<const0> ;
  assign LOCKSTEP_Out[436] = \<const0> ;
  assign LOCKSTEP_Out[437] = \<const0> ;
  assign LOCKSTEP_Out[438] = \<const0> ;
  assign LOCKSTEP_Out[439] = \<const0> ;
  assign LOCKSTEP_Out[440] = \<const0> ;
  assign LOCKSTEP_Out[441] = \<const0> ;
  assign LOCKSTEP_Out[442] = \<const0> ;
  assign LOCKSTEP_Out[443] = \<const0> ;
  assign LOCKSTEP_Out[444] = \<const0> ;
  assign LOCKSTEP_Out[445] = \<const0> ;
  assign LOCKSTEP_Out[446] = \<const0> ;
  assign LOCKSTEP_Out[447] = \<const0> ;
  assign LOCKSTEP_Out[448] = \<const0> ;
  assign LOCKSTEP_Out[449] = \<const0> ;
  assign LOCKSTEP_Out[450] = \<const0> ;
  assign LOCKSTEP_Out[451] = \<const0> ;
  assign LOCKSTEP_Out[452] = \<const0> ;
  assign LOCKSTEP_Out[453] = \<const0> ;
  assign LOCKSTEP_Out[454] = \<const0> ;
  assign LOCKSTEP_Out[455] = \<const0> ;
  assign LOCKSTEP_Out[456] = \<const0> ;
  assign LOCKSTEP_Out[457] = \<const0> ;
  assign LOCKSTEP_Out[458] = \<const0> ;
  assign LOCKSTEP_Out[459] = \<const0> ;
  assign LOCKSTEP_Out[460] = \<const0> ;
  assign LOCKSTEP_Out[461] = \<const0> ;
  assign LOCKSTEP_Out[462] = \<const0> ;
  assign LOCKSTEP_Out[463] = \<const0> ;
  assign LOCKSTEP_Out[464] = \<const0> ;
  assign LOCKSTEP_Out[465] = \<const0> ;
  assign LOCKSTEP_Out[466:497] = \^LOCKSTEP_Out [632:663];
  assign LOCKSTEP_Out[498] = \<const0> ;
  assign LOCKSTEP_Out[499] = \<const0> ;
  assign LOCKSTEP_Out[500] = \<const0> ;
  assign LOCKSTEP_Out[501] = \<const0> ;
  assign LOCKSTEP_Out[502] = \<const0> ;
  assign LOCKSTEP_Out[503] = \<const0> ;
  assign LOCKSTEP_Out[504] = \<const0> ;
  assign LOCKSTEP_Out[505] = \<const0> ;
  assign LOCKSTEP_Out[506] = \<const0> ;
  assign LOCKSTEP_Out[507] = \<const0> ;
  assign LOCKSTEP_Out[508] = \<const0> ;
  assign LOCKSTEP_Out[509] = \<const0> ;
  assign LOCKSTEP_Out[510] = \<const0> ;
  assign LOCKSTEP_Out[511] = \<const0> ;
  assign LOCKSTEP_Out[512] = \<const0> ;
  assign LOCKSTEP_Out[513] = \<const0> ;
  assign LOCKSTEP_Out[514] = \<const0> ;
  assign LOCKSTEP_Out[515] = \<const0> ;
  assign LOCKSTEP_Out[516] = \<const0> ;
  assign LOCKSTEP_Out[517] = \<const0> ;
  assign LOCKSTEP_Out[518] = \<const0> ;
  assign LOCKSTEP_Out[519] = \<const0> ;
  assign LOCKSTEP_Out[520] = \<const0> ;
  assign LOCKSTEP_Out[521] = \<const0> ;
  assign LOCKSTEP_Out[522] = \<const0> ;
  assign LOCKSTEP_Out[523] = \<const0> ;
  assign LOCKSTEP_Out[524] = \<const0> ;
  assign LOCKSTEP_Out[525] = \<const0> ;
  assign LOCKSTEP_Out[526] = \<const0> ;
  assign LOCKSTEP_Out[527] = \<const0> ;
  assign LOCKSTEP_Out[528] = \<const0> ;
  assign LOCKSTEP_Out[529] = \<const0> ;
  assign LOCKSTEP_Out[530] = \<const0> ;
  assign LOCKSTEP_Out[531] = \<const0> ;
  assign LOCKSTEP_Out[532] = \<const0> ;
  assign LOCKSTEP_Out[533] = \<const0> ;
  assign LOCKSTEP_Out[534] = \<const0> ;
  assign LOCKSTEP_Out[535] = \<const0> ;
  assign LOCKSTEP_Out[536] = \<const0> ;
  assign LOCKSTEP_Out[537] = \<const0> ;
  assign LOCKSTEP_Out[538] = \<const0> ;
  assign LOCKSTEP_Out[539] = \^LOCKSTEP_Out [542];
  assign LOCKSTEP_Out[540] = \<const0> ;
  assign LOCKSTEP_Out[541] = \<const0> ;
  assign LOCKSTEP_Out[542] = \^LOCKSTEP_Out [542];
  assign LOCKSTEP_Out[543] = \<const0> ;
  assign LOCKSTEP_Out[544] = \<const0> ;
  assign LOCKSTEP_Out[545] = \<const0> ;
  assign LOCKSTEP_Out[546] = \^LOCKSTEP_Out [542];
  assign LOCKSTEP_Out[547] = \^LOCKSTEP_Out [542];
  assign LOCKSTEP_Out[548] = \<const0> ;
  assign LOCKSTEP_Out[549] = \<const0> ;
  assign LOCKSTEP_Out[550] = \<const0> ;
  assign LOCKSTEP_Out[551] = \^LOCKSTEP_Out [542];
  assign LOCKSTEP_Out[552] = \<const0> ;
  assign LOCKSTEP_Out[553] = \<const0> ;
  assign LOCKSTEP_Out[554] = \<const0> ;
  assign LOCKSTEP_Out[555:587] = \^LOCKSTEP_Out [555:587];
  assign LOCKSTEP_Out[588] = \<const0> ;
  assign LOCKSTEP_Out[589] = \<const0> ;
  assign LOCKSTEP_Out[590] = \<const0> ;
  assign LOCKSTEP_Out[591] = \<const0> ;
  assign LOCKSTEP_Out[592] = \<const0> ;
  assign LOCKSTEP_Out[593] = \<const0> ;
  assign LOCKSTEP_Out[594] = \<const0> ;
  assign LOCKSTEP_Out[595] = \<const0> ;
  assign LOCKSTEP_Out[596] = \<const0> ;
  assign LOCKSTEP_Out[597] = \<const0> ;
  assign LOCKSTEP_Out[598] = \<const0> ;
  assign LOCKSTEP_Out[599] = \<const0> ;
  assign LOCKSTEP_Out[600] = \<const0> ;
  assign LOCKSTEP_Out[601] = \<const0> ;
  assign LOCKSTEP_Out[602] = \<const0> ;
  assign LOCKSTEP_Out[603] = \<const0> ;
  assign LOCKSTEP_Out[604] = \<const0> ;
  assign LOCKSTEP_Out[605] = \<const0> ;
  assign LOCKSTEP_Out[606] = \<const0> ;
  assign LOCKSTEP_Out[607] = \<const0> ;
  assign LOCKSTEP_Out[608] = \<const0> ;
  assign LOCKSTEP_Out[609] = \<const0> ;
  assign LOCKSTEP_Out[610] = \<const0> ;
  assign LOCKSTEP_Out[611] = \<const0> ;
  assign LOCKSTEP_Out[612] = \<const0> ;
  assign LOCKSTEP_Out[613] = \<const0> ;
  assign LOCKSTEP_Out[614] = \<const0> ;
  assign LOCKSTEP_Out[615] = \<const0> ;
  assign LOCKSTEP_Out[616] = \<const0> ;
  assign LOCKSTEP_Out[617] = \<const0> ;
  assign LOCKSTEP_Out[618] = \<const0> ;
  assign LOCKSTEP_Out[619] = \<const0> ;
  assign LOCKSTEP_Out[620:623] = \^LOCKSTEP_Out [620:623];
  assign LOCKSTEP_Out[624] = \<const0> ;
  assign LOCKSTEP_Out[625] = \<const0> ;
  assign LOCKSTEP_Out[626] = \<const0> ;
  assign LOCKSTEP_Out[627] = \<const0> ;
  assign LOCKSTEP_Out[628] = \^LOCKSTEP_Out [542];
  assign LOCKSTEP_Out[629] = \^LOCKSTEP_Out [629];
  assign LOCKSTEP_Out[630] = \^LOCKSTEP_Out [542];
  assign LOCKSTEP_Out[631] = \<const0> ;
  assign LOCKSTEP_Out[632:663] = \^LOCKSTEP_Out [632:663];
  assign LOCKSTEP_Out[664] = \<const0> ;
  assign LOCKSTEP_Out[665] = \<const0> ;
  assign LOCKSTEP_Out[666] = \<const0> ;
  assign LOCKSTEP_Out[667] = \<const0> ;
  assign LOCKSTEP_Out[668] = \<const0> ;
  assign LOCKSTEP_Out[669] = \<const0> ;
  assign LOCKSTEP_Out[670] = \<const0> ;
  assign LOCKSTEP_Out[671] = \<const0> ;
  assign LOCKSTEP_Out[672] = \<const0> ;
  assign LOCKSTEP_Out[673] = \<const0> ;
  assign LOCKSTEP_Out[674] = \<const0> ;
  assign LOCKSTEP_Out[675] = \<const0> ;
  assign LOCKSTEP_Out[676] = \<const0> ;
  assign LOCKSTEP_Out[677] = \<const0> ;
  assign LOCKSTEP_Out[678] = \<const0> ;
  assign LOCKSTEP_Out[679] = \<const0> ;
  assign LOCKSTEP_Out[680] = \<const0> ;
  assign LOCKSTEP_Out[681] = \<const0> ;
  assign LOCKSTEP_Out[682] = \<const0> ;
  assign LOCKSTEP_Out[683] = \<const0> ;
  assign LOCKSTEP_Out[684] = \<const0> ;
  assign LOCKSTEP_Out[685] = \<const0> ;
  assign LOCKSTEP_Out[686] = \<const0> ;
  assign LOCKSTEP_Out[687] = \<const0> ;
  assign LOCKSTEP_Out[688] = \<const0> ;
  assign LOCKSTEP_Out[689] = \<const0> ;
  assign LOCKSTEP_Out[690] = \<const0> ;
  assign LOCKSTEP_Out[691] = \<const0> ;
  assign LOCKSTEP_Out[692] = \<const0> ;
  assign LOCKSTEP_Out[693] = \<const0> ;
  assign LOCKSTEP_Out[694] = \<const0> ;
  assign LOCKSTEP_Out[695] = \<const0> ;
  assign LOCKSTEP_Out[696] = \<const0> ;
  assign LOCKSTEP_Out[697] = \<const0> ;
  assign LOCKSTEP_Out[698] = \<const0> ;
  assign LOCKSTEP_Out[699] = \<const0> ;
  assign LOCKSTEP_Out[700] = \<const0> ;
  assign LOCKSTEP_Out[701] = \<const0> ;
  assign LOCKSTEP_Out[702] = \<const0> ;
  assign LOCKSTEP_Out[703] = \<const0> ;
  assign LOCKSTEP_Out[704] = \<const0> ;
  assign LOCKSTEP_Out[705] = \^LOCKSTEP_Out [542];
  assign LOCKSTEP_Out[706] = \<const0> ;
  assign LOCKSTEP_Out[707] = \<const0> ;
  assign LOCKSTEP_Out[708] = \^LOCKSTEP_Out [542];
  assign LOCKSTEP_Out[709] = \<const0> ;
  assign LOCKSTEP_Out[710] = \<const0> ;
  assign LOCKSTEP_Out[711] = \<const0> ;
  assign LOCKSTEP_Out[712] = \^LOCKSTEP_Out [542];
  assign LOCKSTEP_Out[713] = \^LOCKSTEP_Out [542];
  assign LOCKSTEP_Out[714] = \<const0> ;
  assign LOCKSTEP_Out[715] = \<const0> ;
  assign LOCKSTEP_Out[716] = \<const0> ;
  assign LOCKSTEP_Out[717] = \^LOCKSTEP_Out [542];
  assign LOCKSTEP_Out[718] = \<const0> ;
  assign LOCKSTEP_Out[719] = \<const0> ;
  assign LOCKSTEP_Out[720] = \<const0> ;
  assign LOCKSTEP_Out[721] = \^LOCKSTEP_Out [721];
  assign LOCKSTEP_Out[722] = \^LOCKSTEP_Out [542];
  assign LOCKSTEP_Out[723:792] = \^LOCKSTEP_Out [723:792];
  assign LOCKSTEP_Out[793] = \<const0> ;
  assign LOCKSTEP_Out[794] = \<const0> ;
  assign LOCKSTEP_Out[795] = \<const0> ;
  assign LOCKSTEP_Out[796] = \<const0> ;
  assign LOCKSTEP_Out[797] = \<const0> ;
  assign LOCKSTEP_Out[798] = \<const0> ;
  assign LOCKSTEP_Out[799] = \<const0> ;
  assign LOCKSTEP_Out[800] = \<const0> ;
  assign LOCKSTEP_Out[801] = \<const0> ;
  assign LOCKSTEP_Out[802] = \<const0> ;
  assign LOCKSTEP_Out[803] = \<const0> ;
  assign LOCKSTEP_Out[804] = \<const0> ;
  assign LOCKSTEP_Out[805] = \<const0> ;
  assign LOCKSTEP_Out[806] = \<const0> ;
  assign LOCKSTEP_Out[807] = \<const0> ;
  assign LOCKSTEP_Out[808] = \<const0> ;
  assign LOCKSTEP_Out[809] = \<const0> ;
  assign LOCKSTEP_Out[810] = \<const0> ;
  assign LOCKSTEP_Out[811] = \<const0> ;
  assign LOCKSTEP_Out[812] = \<const0> ;
  assign LOCKSTEP_Out[813] = \<const0> ;
  assign LOCKSTEP_Out[814] = \<const0> ;
  assign LOCKSTEP_Out[815] = \<const0> ;
  assign LOCKSTEP_Out[816] = \<const0> ;
  assign LOCKSTEP_Out[817] = \<const0> ;
  assign LOCKSTEP_Out[818] = \<const0> ;
  assign LOCKSTEP_Out[819] = \<const0> ;
  assign LOCKSTEP_Out[820] = \<const0> ;
  assign LOCKSTEP_Out[821] = \<const0> ;
  assign LOCKSTEP_Out[822] = \<const0> ;
  assign LOCKSTEP_Out[823] = \<const0> ;
  assign LOCKSTEP_Out[824] = \<const0> ;
  assign LOCKSTEP_Out[825] = \<const0> ;
  assign LOCKSTEP_Out[826] = \<const0> ;
  assign LOCKSTEP_Out[827] = \<const0> ;
  assign LOCKSTEP_Out[828] = \<const0> ;
  assign LOCKSTEP_Out[829] = \<const0> ;
  assign LOCKSTEP_Out[830] = \<const0> ;
  assign LOCKSTEP_Out[831] = \<const0> ;
  assign LOCKSTEP_Out[832] = \<const0> ;
  assign LOCKSTEP_Out[833] = \<const0> ;
  assign LOCKSTEP_Out[834] = \<const0> ;
  assign LOCKSTEP_Out[835] = \<const0> ;
  assign LOCKSTEP_Out[836] = \<const0> ;
  assign LOCKSTEP_Out[837] = \<const0> ;
  assign LOCKSTEP_Out[838] = \<const0> ;
  assign LOCKSTEP_Out[839] = \<const0> ;
  assign LOCKSTEP_Out[840] = \<const0> ;
  assign LOCKSTEP_Out[841] = \<const0> ;
  assign LOCKSTEP_Out[842] = \<const0> ;
  assign LOCKSTEP_Out[843] = \<const0> ;
  assign LOCKSTEP_Out[844] = \<const0> ;
  assign LOCKSTEP_Out[845] = \<const0> ;
  assign LOCKSTEP_Out[846] = \<const0> ;
  assign LOCKSTEP_Out[847] = \<const0> ;
  assign LOCKSTEP_Out[848] = \<const0> ;
  assign LOCKSTEP_Out[849] = \<const0> ;
  assign LOCKSTEP_Out[850] = \<const0> ;
  assign LOCKSTEP_Out[851] = \<const0> ;
  assign LOCKSTEP_Out[852] = \<const0> ;
  assign LOCKSTEP_Out[853] = \<const0> ;
  assign LOCKSTEP_Out[854] = \<const0> ;
  assign LOCKSTEP_Out[855] = \<const0> ;
  assign LOCKSTEP_Out[856] = \<const0> ;
  assign LOCKSTEP_Out[857] = \<const0> ;
  assign LOCKSTEP_Out[858] = \<const0> ;
  assign LOCKSTEP_Out[859] = \<const0> ;
  assign LOCKSTEP_Out[860] = \<const0> ;
  assign LOCKSTEP_Out[861] = \<const0> ;
  assign LOCKSTEP_Out[862] = \<const0> ;
  assign LOCKSTEP_Out[863] = \<const0> ;
  assign LOCKSTEP_Out[864] = \<const0> ;
  assign LOCKSTEP_Out[865] = \<const0> ;
  assign LOCKSTEP_Out[866] = \<const0> ;
  assign LOCKSTEP_Out[867] = \<const0> ;
  assign LOCKSTEP_Out[868] = \<const0> ;
  assign LOCKSTEP_Out[869] = \<const0> ;
  assign LOCKSTEP_Out[870] = \<const0> ;
  assign LOCKSTEP_Out[871] = \<const0> ;
  assign LOCKSTEP_Out[872] = \<const0> ;
  assign LOCKSTEP_Out[873] = \<const0> ;
  assign LOCKSTEP_Out[874] = \<const0> ;
  assign LOCKSTEP_Out[875] = \<const0> ;
  assign LOCKSTEP_Out[876] = \<const0> ;
  assign LOCKSTEP_Out[877] = \<const0> ;
  assign LOCKSTEP_Out[878] = \<const0> ;
  assign LOCKSTEP_Out[879] = \<const0> ;
  assign LOCKSTEP_Out[880] = \<const0> ;
  assign LOCKSTEP_Out[881] = \<const0> ;
  assign LOCKSTEP_Out[882] = \<const0> ;
  assign LOCKSTEP_Out[883] = \<const0> ;
  assign LOCKSTEP_Out[884] = \<const0> ;
  assign LOCKSTEP_Out[885] = \<const0> ;
  assign LOCKSTEP_Out[886] = \<const0> ;
  assign LOCKSTEP_Out[887] = \<const0> ;
  assign LOCKSTEP_Out[888] = \<const0> ;
  assign LOCKSTEP_Out[889] = \<const0> ;
  assign LOCKSTEP_Out[890] = \<const0> ;
  assign LOCKSTEP_Out[891] = \<const0> ;
  assign LOCKSTEP_Out[892] = \<const0> ;
  assign LOCKSTEP_Out[893] = \<const0> ;
  assign LOCKSTEP_Out[894] = \<const0> ;
  assign LOCKSTEP_Out[895] = \<const0> ;
  assign LOCKSTEP_Out[896] = \<const0> ;
  assign LOCKSTEP_Out[897] = \<const0> ;
  assign LOCKSTEP_Out[898] = \<const0> ;
  assign LOCKSTEP_Out[899] = \<const0> ;
  assign LOCKSTEP_Out[900] = \<const0> ;
  assign LOCKSTEP_Out[901] = \<const0> ;
  assign LOCKSTEP_Out[902] = \<const0> ;
  assign LOCKSTEP_Out[903] = \<const0> ;
  assign LOCKSTEP_Out[904] = \<const0> ;
  assign LOCKSTEP_Out[905] = \<const0> ;
  assign LOCKSTEP_Out[906] = \<const0> ;
  assign LOCKSTEP_Out[907] = \<const0> ;
  assign LOCKSTEP_Out[908] = \<const0> ;
  assign LOCKSTEP_Out[909] = \<const0> ;
  assign LOCKSTEP_Out[910] = \<const0> ;
  assign LOCKSTEP_Out[911] = \<const0> ;
  assign LOCKSTEP_Out[912] = \<const0> ;
  assign LOCKSTEP_Out[913] = \<const0> ;
  assign LOCKSTEP_Out[914] = \<const0> ;
  assign LOCKSTEP_Out[915] = \<const0> ;
  assign LOCKSTEP_Out[916] = \<const0> ;
  assign LOCKSTEP_Out[917] = \<const0> ;
  assign LOCKSTEP_Out[918] = \<const0> ;
  assign LOCKSTEP_Out[919] = \<const0> ;
  assign LOCKSTEP_Out[920] = \<const0> ;
  assign LOCKSTEP_Out[921] = \<const0> ;
  assign LOCKSTEP_Out[922] = \<const0> ;
  assign LOCKSTEP_Out[923] = \<const0> ;
  assign LOCKSTEP_Out[924] = \<const0> ;
  assign LOCKSTEP_Out[925] = \<const0> ;
  assign LOCKSTEP_Out[926] = \<const0> ;
  assign LOCKSTEP_Out[927] = \<const0> ;
  assign LOCKSTEP_Out[928] = \<const0> ;
  assign LOCKSTEP_Out[929] = \<const0> ;
  assign LOCKSTEP_Out[930] = \<const0> ;
  assign LOCKSTEP_Out[931] = \<const0> ;
  assign LOCKSTEP_Out[932] = \<const0> ;
  assign LOCKSTEP_Out[933] = \<const0> ;
  assign LOCKSTEP_Out[934] = \<const0> ;
  assign LOCKSTEP_Out[935] = \<const0> ;
  assign LOCKSTEP_Out[936] = \<const0> ;
  assign LOCKSTEP_Out[937] = \<const0> ;
  assign LOCKSTEP_Out[938] = \<const0> ;
  assign LOCKSTEP_Out[939] = \<const0> ;
  assign LOCKSTEP_Out[940] = \<const0> ;
  assign LOCKSTEP_Out[941] = \<const0> ;
  assign LOCKSTEP_Out[942] = \<const0> ;
  assign LOCKSTEP_Out[943] = \<const0> ;
  assign LOCKSTEP_Out[944] = \<const0> ;
  assign LOCKSTEP_Out[945] = \<const0> ;
  assign LOCKSTEP_Out[946] = \<const0> ;
  assign LOCKSTEP_Out[947] = \<const0> ;
  assign LOCKSTEP_Out[948] = \<const0> ;
  assign LOCKSTEP_Out[949] = \<const0> ;
  assign LOCKSTEP_Out[950] = \<const0> ;
  assign LOCKSTEP_Out[951] = \<const0> ;
  assign LOCKSTEP_Out[952] = \<const0> ;
  assign LOCKSTEP_Out[953] = \<const0> ;
  assign LOCKSTEP_Out[954] = \<const0> ;
  assign LOCKSTEP_Out[955] = \<const0> ;
  assign LOCKSTEP_Out[956] = \<const0> ;
  assign LOCKSTEP_Out[957] = \<const0> ;
  assign LOCKSTEP_Out[958] = \<const0> ;
  assign LOCKSTEP_Out[959] = \<const0> ;
  assign LOCKSTEP_Out[960] = \<const0> ;
  assign LOCKSTEP_Out[961] = \<const0> ;
  assign LOCKSTEP_Out[962] = \<const0> ;
  assign LOCKSTEP_Out[963] = \<const0> ;
  assign LOCKSTEP_Out[964] = \<const0> ;
  assign LOCKSTEP_Out[965] = \<const0> ;
  assign LOCKSTEP_Out[966] = \<const0> ;
  assign LOCKSTEP_Out[967] = \<const0> ;
  assign LOCKSTEP_Out[968] = \<const0> ;
  assign LOCKSTEP_Out[969] = \<const0> ;
  assign LOCKSTEP_Out[970] = \<const0> ;
  assign LOCKSTEP_Out[971] = \<const0> ;
  assign LOCKSTEP_Out[972] = \<const0> ;
  assign LOCKSTEP_Out[973] = \<const0> ;
  assign LOCKSTEP_Out[974] = \<const0> ;
  assign LOCKSTEP_Out[975] = \<const0> ;
  assign LOCKSTEP_Out[976] = \<const0> ;
  assign LOCKSTEP_Out[977] = \<const0> ;
  assign LOCKSTEP_Out[978] = \<const0> ;
  assign LOCKSTEP_Out[979] = \<const0> ;
  assign LOCKSTEP_Out[980] = \<const0> ;
  assign LOCKSTEP_Out[981] = \<const0> ;
  assign LOCKSTEP_Out[982] = \<const0> ;
  assign LOCKSTEP_Out[983] = \<const0> ;
  assign LOCKSTEP_Out[984] = \<const0> ;
  assign LOCKSTEP_Out[985] = \<const0> ;
  assign LOCKSTEP_Out[986] = \<const0> ;
  assign LOCKSTEP_Out[987] = \<const0> ;
  assign LOCKSTEP_Out[988] = \<const0> ;
  assign LOCKSTEP_Out[989] = \<const0> ;
  assign LOCKSTEP_Out[990] = \<const0> ;
  assign LOCKSTEP_Out[991] = \<const0> ;
  assign LOCKSTEP_Out[992] = \<const0> ;
  assign LOCKSTEP_Out[993] = \<const0> ;
  assign LOCKSTEP_Out[994] = \<const0> ;
  assign LOCKSTEP_Out[995] = \<const0> ;
  assign LOCKSTEP_Out[996] = \<const0> ;
  assign LOCKSTEP_Out[997] = \<const0> ;
  assign LOCKSTEP_Out[998] = \<const0> ;
  assign LOCKSTEP_Out[999] = \<const0> ;
  assign LOCKSTEP_Out[1000] = \<const0> ;
  assign LOCKSTEP_Out[1001] = \<const0> ;
  assign LOCKSTEP_Out[1002] = \<const0> ;
  assign LOCKSTEP_Out[1003] = \<const0> ;
  assign LOCKSTEP_Out[1004] = \<const0> ;
  assign LOCKSTEP_Out[1005] = \<const0> ;
  assign LOCKSTEP_Out[1006] = \<const0> ;
  assign LOCKSTEP_Out[1007] = \<const0> ;
  assign LOCKSTEP_Out[1008] = \<const0> ;
  assign LOCKSTEP_Out[1009] = \<const0> ;
  assign LOCKSTEP_Out[1010] = \<const0> ;
  assign LOCKSTEP_Out[1011] = \<const0> ;
  assign LOCKSTEP_Out[1012] = \<const0> ;
  assign LOCKSTEP_Out[1013] = \<const0> ;
  assign LOCKSTEP_Out[1014] = \<const0> ;
  assign LOCKSTEP_Out[1015] = \<const0> ;
  assign LOCKSTEP_Out[1016] = \<const0> ;
  assign LOCKSTEP_Out[1017] = \<const0> ;
  assign LOCKSTEP_Out[1018] = \<const0> ;
  assign LOCKSTEP_Out[1019] = \<const0> ;
  assign LOCKSTEP_Out[1020] = \<const0> ;
  assign LOCKSTEP_Out[1021] = \<const0> ;
  assign LOCKSTEP_Out[1022] = \<const0> ;
  assign LOCKSTEP_Out[1023] = \<const0> ;
  assign LOCKSTEP_Out[1024] = \<const0> ;
  assign LOCKSTEP_Out[1025] = \<const0> ;
  assign LOCKSTEP_Out[1026] = \<const0> ;
  assign LOCKSTEP_Out[1027] = \<const0> ;
  assign LOCKSTEP_Out[1028] = \<const0> ;
  assign LOCKSTEP_Out[1029] = \<const0> ;
  assign LOCKSTEP_Out[1030] = \<const0> ;
  assign LOCKSTEP_Out[1031] = \<const0> ;
  assign LOCKSTEP_Out[1032] = \<const0> ;
  assign LOCKSTEP_Out[1033] = \<const0> ;
  assign LOCKSTEP_Out[1034] = \<const0> ;
  assign LOCKSTEP_Out[1035] = \<const0> ;
  assign LOCKSTEP_Out[1036] = \<const0> ;
  assign LOCKSTEP_Out[1037] = \<const0> ;
  assign LOCKSTEP_Out[1038] = \<const0> ;
  assign LOCKSTEP_Out[1039] = \<const0> ;
  assign LOCKSTEP_Out[1040] = \<const0> ;
  assign LOCKSTEP_Out[1041] = \<const0> ;
  assign LOCKSTEP_Out[1042] = \<const0> ;
  assign LOCKSTEP_Out[1043] = \<const0> ;
  assign LOCKSTEP_Out[1044] = \<const0> ;
  assign LOCKSTEP_Out[1045] = \<const0> ;
  assign LOCKSTEP_Out[1046] = \<const0> ;
  assign LOCKSTEP_Out[1047] = \<const0> ;
  assign LOCKSTEP_Out[1048] = \<const0> ;
  assign LOCKSTEP_Out[1049] = \<const0> ;
  assign LOCKSTEP_Out[1050] = \<const0> ;
  assign LOCKSTEP_Out[1051] = \<const0> ;
  assign LOCKSTEP_Out[1052] = \<const0> ;
  assign LOCKSTEP_Out[1053] = \<const0> ;
  assign LOCKSTEP_Out[1054] = \<const0> ;
  assign LOCKSTEP_Out[1055] = \<const0> ;
  assign LOCKSTEP_Out[1056] = \<const0> ;
  assign LOCKSTEP_Out[1057] = \<const0> ;
  assign LOCKSTEP_Out[1058] = \<const0> ;
  assign LOCKSTEP_Out[1059] = \<const0> ;
  assign LOCKSTEP_Out[1060] = \<const0> ;
  assign LOCKSTEP_Out[1061] = \<const0> ;
  assign LOCKSTEP_Out[1062] = \<const0> ;
  assign LOCKSTEP_Out[1063] = \<const0> ;
  assign LOCKSTEP_Out[1064] = \<const0> ;
  assign LOCKSTEP_Out[1065] = \<const0> ;
  assign LOCKSTEP_Out[1066] = \<const0> ;
  assign LOCKSTEP_Out[1067] = \<const0> ;
  assign LOCKSTEP_Out[1068] = \<const0> ;
  assign LOCKSTEP_Out[1069] = \<const0> ;
  assign LOCKSTEP_Out[1070] = \<const0> ;
  assign LOCKSTEP_Out[1071] = \<const0> ;
  assign LOCKSTEP_Out[1072] = \<const0> ;
  assign LOCKSTEP_Out[1073] = \<const0> ;
  assign LOCKSTEP_Out[1074] = \<const0> ;
  assign LOCKSTEP_Out[1075] = \<const0> ;
  assign LOCKSTEP_Out[1076] = \<const0> ;
  assign LOCKSTEP_Out[1077] = \<const0> ;
  assign LOCKSTEP_Out[1078] = \<const0> ;
  assign LOCKSTEP_Out[1079] = \<const0> ;
  assign LOCKSTEP_Out[1080] = \<const0> ;
  assign LOCKSTEP_Out[1081] = \<const0> ;
  assign LOCKSTEP_Out[1082] = \<const0> ;
  assign LOCKSTEP_Out[1083] = \<const0> ;
  assign LOCKSTEP_Out[1084] = \<const0> ;
  assign LOCKSTEP_Out[1085] = \<const0> ;
  assign LOCKSTEP_Out[1086] = \<const0> ;
  assign LOCKSTEP_Out[1087] = \<const0> ;
  assign LOCKSTEP_Out[1088] = \<const0> ;
  assign LOCKSTEP_Out[1089] = \<const0> ;
  assign LOCKSTEP_Out[1090] = \<const0> ;
  assign LOCKSTEP_Out[1091] = \<const0> ;
  assign LOCKSTEP_Out[1092] = \<const0> ;
  assign LOCKSTEP_Out[1093] = \<const0> ;
  assign LOCKSTEP_Out[1094] = \<const0> ;
  assign LOCKSTEP_Out[1095] = \<const0> ;
  assign LOCKSTEP_Out[1096] = \<const0> ;
  assign LOCKSTEP_Out[1097] = \<const0> ;
  assign LOCKSTEP_Out[1098] = \<const0> ;
  assign LOCKSTEP_Out[1099] = \<const0> ;
  assign LOCKSTEP_Out[1100] = \<const0> ;
  assign LOCKSTEP_Out[1101] = \<const0> ;
  assign LOCKSTEP_Out[1102] = \<const0> ;
  assign LOCKSTEP_Out[1103] = \<const0> ;
  assign LOCKSTEP_Out[1104] = \<const0> ;
  assign LOCKSTEP_Out[1105] = \<const0> ;
  assign LOCKSTEP_Out[1106] = \<const0> ;
  assign LOCKSTEP_Out[1107] = \<const0> ;
  assign LOCKSTEP_Out[1108] = \<const0> ;
  assign LOCKSTEP_Out[1109] = \<const0> ;
  assign LOCKSTEP_Out[1110] = \<const0> ;
  assign LOCKSTEP_Out[1111] = \<const0> ;
  assign LOCKSTEP_Out[1112] = \<const0> ;
  assign LOCKSTEP_Out[1113] = \<const0> ;
  assign LOCKSTEP_Out[1114] = \<const0> ;
  assign LOCKSTEP_Out[1115] = \<const0> ;
  assign LOCKSTEP_Out[1116] = \<const0> ;
  assign LOCKSTEP_Out[1117] = \<const0> ;
  assign LOCKSTEP_Out[1118] = \<const0> ;
  assign LOCKSTEP_Out[1119] = \<const0> ;
  assign LOCKSTEP_Out[1120] = \<const0> ;
  assign LOCKSTEP_Out[1121] = \<const0> ;
  assign LOCKSTEP_Out[1122] = \<const0> ;
  assign LOCKSTEP_Out[1123] = \<const0> ;
  assign LOCKSTEP_Out[1124] = \<const0> ;
  assign LOCKSTEP_Out[1125] = \<const0> ;
  assign LOCKSTEP_Out[1126] = \<const0> ;
  assign LOCKSTEP_Out[1127] = \<const0> ;
  assign LOCKSTEP_Out[1128] = \<const0> ;
  assign LOCKSTEP_Out[1129] = \<const0> ;
  assign LOCKSTEP_Out[1130] = \<const0> ;
  assign LOCKSTEP_Out[1131] = \<const0> ;
  assign LOCKSTEP_Out[1132] = \<const0> ;
  assign LOCKSTEP_Out[1133] = \<const0> ;
  assign LOCKSTEP_Out[1134] = \<const0> ;
  assign LOCKSTEP_Out[1135] = \<const0> ;
  assign LOCKSTEP_Out[1136] = \<const0> ;
  assign LOCKSTEP_Out[1137] = \<const0> ;
  assign LOCKSTEP_Out[1138] = \<const0> ;
  assign LOCKSTEP_Out[1139] = \<const0> ;
  assign LOCKSTEP_Out[1140] = \<const0> ;
  assign LOCKSTEP_Out[1141] = \<const0> ;
  assign LOCKSTEP_Out[1142] = \<const0> ;
  assign LOCKSTEP_Out[1143] = \<const0> ;
  assign LOCKSTEP_Out[1144] = \<const0> ;
  assign LOCKSTEP_Out[1145] = \<const0> ;
  assign LOCKSTEP_Out[1146] = \<const0> ;
  assign LOCKSTEP_Out[1147] = \<const0> ;
  assign LOCKSTEP_Out[1148] = \<const0> ;
  assign LOCKSTEP_Out[1149] = \<const0> ;
  assign LOCKSTEP_Out[1150] = \<const0> ;
  assign LOCKSTEP_Out[1151] = \<const0> ;
  assign LOCKSTEP_Out[1152] = \<const0> ;
  assign LOCKSTEP_Out[1153] = \<const0> ;
  assign LOCKSTEP_Out[1154] = \<const0> ;
  assign LOCKSTEP_Out[1155] = \<const0> ;
  assign LOCKSTEP_Out[1156] = \<const0> ;
  assign LOCKSTEP_Out[1157] = \<const0> ;
  assign LOCKSTEP_Out[1158] = \<const0> ;
  assign LOCKSTEP_Out[1159] = \<const0> ;
  assign LOCKSTEP_Out[1160] = \<const0> ;
  assign LOCKSTEP_Out[1161] = \<const0> ;
  assign LOCKSTEP_Out[1162] = \<const0> ;
  assign LOCKSTEP_Out[1163] = \<const0> ;
  assign LOCKSTEP_Out[1164] = \<const0> ;
  assign LOCKSTEP_Out[1165] = \<const0> ;
  assign LOCKSTEP_Out[1166] = \<const0> ;
  assign LOCKSTEP_Out[1167] = \<const0> ;
  assign LOCKSTEP_Out[1168] = \<const0> ;
  assign LOCKSTEP_Out[1169] = \<const0> ;
  assign LOCKSTEP_Out[1170] = \<const0> ;
  assign LOCKSTEP_Out[1171] = \<const0> ;
  assign LOCKSTEP_Out[1172] = \<const0> ;
  assign LOCKSTEP_Out[1173] = \<const0> ;
  assign LOCKSTEP_Out[1174] = \<const0> ;
  assign LOCKSTEP_Out[1175] = \<const0> ;
  assign LOCKSTEP_Out[1176] = \<const0> ;
  assign LOCKSTEP_Out[1177] = \<const0> ;
  assign LOCKSTEP_Out[1178] = \<const0> ;
  assign LOCKSTEP_Out[1179] = \<const0> ;
  assign LOCKSTEP_Out[1180] = \<const0> ;
  assign LOCKSTEP_Out[1181] = \<const0> ;
  assign LOCKSTEP_Out[1182] = \<const0> ;
  assign LOCKSTEP_Out[1183] = \<const0> ;
  assign LOCKSTEP_Out[1184] = \<const0> ;
  assign LOCKSTEP_Out[1185] = \<const0> ;
  assign LOCKSTEP_Out[1186] = \<const0> ;
  assign LOCKSTEP_Out[1187] = \<const0> ;
  assign LOCKSTEP_Out[1188] = \<const0> ;
  assign LOCKSTEP_Out[1189] = \<const0> ;
  assign LOCKSTEP_Out[1190] = \<const0> ;
  assign LOCKSTEP_Out[1191] = \<const0> ;
  assign LOCKSTEP_Out[1192] = \<const0> ;
  assign LOCKSTEP_Out[1193] = \<const0> ;
  assign LOCKSTEP_Out[1194] = \<const0> ;
  assign LOCKSTEP_Out[1195] = \<const0> ;
  assign LOCKSTEP_Out[1196] = \<const0> ;
  assign LOCKSTEP_Out[1197] = \<const0> ;
  assign LOCKSTEP_Out[1198] = \<const0> ;
  assign LOCKSTEP_Out[1199] = \<const0> ;
  assign LOCKSTEP_Out[1200] = \<const0> ;
  assign LOCKSTEP_Out[1201] = \<const0> ;
  assign LOCKSTEP_Out[1202] = \<const0> ;
  assign LOCKSTEP_Out[1203] = \<const0> ;
  assign LOCKSTEP_Out[1204] = \<const0> ;
  assign LOCKSTEP_Out[1205] = \<const0> ;
  assign LOCKSTEP_Out[1206] = \<const0> ;
  assign LOCKSTEP_Out[1207] = \<const0> ;
  assign LOCKSTEP_Out[1208] = \<const0> ;
  assign LOCKSTEP_Out[1209] = \<const0> ;
  assign LOCKSTEP_Out[1210] = \<const0> ;
  assign LOCKSTEP_Out[1211] = \<const0> ;
  assign LOCKSTEP_Out[1212] = \<const0> ;
  assign LOCKSTEP_Out[1213] = \<const0> ;
  assign LOCKSTEP_Out[1214] = \<const0> ;
  assign LOCKSTEP_Out[1215] = \<const0> ;
  assign LOCKSTEP_Out[1216] = \<const0> ;
  assign LOCKSTEP_Out[1217] = \<const0> ;
  assign LOCKSTEP_Out[1218] = \<const0> ;
  assign LOCKSTEP_Out[1219] = \<const0> ;
  assign LOCKSTEP_Out[1220] = \<const0> ;
  assign LOCKSTEP_Out[1221] = \<const0> ;
  assign LOCKSTEP_Out[1222] = \<const0> ;
  assign LOCKSTEP_Out[1223] = \<const0> ;
  assign LOCKSTEP_Out[1224] = \<const0> ;
  assign LOCKSTEP_Out[1225] = \<const0> ;
  assign LOCKSTEP_Out[1226] = \<const0> ;
  assign LOCKSTEP_Out[1227] = \<const0> ;
  assign LOCKSTEP_Out[1228] = \<const0> ;
  assign LOCKSTEP_Out[1229] = \<const0> ;
  assign LOCKSTEP_Out[1230] = \<const0> ;
  assign LOCKSTEP_Out[1231] = \<const0> ;
  assign LOCKSTEP_Out[1232] = \<const0> ;
  assign LOCKSTEP_Out[1233] = \<const0> ;
  assign LOCKSTEP_Out[1234] = \<const0> ;
  assign LOCKSTEP_Out[1235] = \<const0> ;
  assign LOCKSTEP_Out[1236] = \<const0> ;
  assign LOCKSTEP_Out[1237] = \<const0> ;
  assign LOCKSTEP_Out[1238] = \<const0> ;
  assign LOCKSTEP_Out[1239] = \<const0> ;
  assign LOCKSTEP_Out[1240] = \<const0> ;
  assign LOCKSTEP_Out[1241] = \<const0> ;
  assign LOCKSTEP_Out[1242] = \<const0> ;
  assign LOCKSTEP_Out[1243] = \<const0> ;
  assign LOCKSTEP_Out[1244] = \<const0> ;
  assign LOCKSTEP_Out[1245] = \<const0> ;
  assign LOCKSTEP_Out[1246] = \<const0> ;
  assign LOCKSTEP_Out[1247] = \<const0> ;
  assign LOCKSTEP_Out[1248] = \<const0> ;
  assign LOCKSTEP_Out[1249] = \<const0> ;
  assign LOCKSTEP_Out[1250] = \<const0> ;
  assign LOCKSTEP_Out[1251] = \<const0> ;
  assign LOCKSTEP_Out[1252] = \<const0> ;
  assign LOCKSTEP_Out[1253] = \<const0> ;
  assign LOCKSTEP_Out[1254] = \<const0> ;
  assign LOCKSTEP_Out[1255] = \<const0> ;
  assign LOCKSTEP_Out[1256] = \<const0> ;
  assign LOCKSTEP_Out[1257] = \<const0> ;
  assign LOCKSTEP_Out[1258] = \<const0> ;
  assign LOCKSTEP_Out[1259] = \<const0> ;
  assign LOCKSTEP_Out[1260] = \<const0> ;
  assign LOCKSTEP_Out[1261] = \<const0> ;
  assign LOCKSTEP_Out[1262] = \<const0> ;
  assign LOCKSTEP_Out[1263] = \<const0> ;
  assign LOCKSTEP_Out[1264] = \<const0> ;
  assign LOCKSTEP_Out[1265] = \<const0> ;
  assign LOCKSTEP_Out[1266] = \<const0> ;
  assign LOCKSTEP_Out[1267] = \<const0> ;
  assign LOCKSTEP_Out[1268] = \<const0> ;
  assign LOCKSTEP_Out[1269] = \<const0> ;
  assign LOCKSTEP_Out[1270] = \<const0> ;
  assign LOCKSTEP_Out[1271] = \<const0> ;
  assign LOCKSTEP_Out[1272] = \<const0> ;
  assign LOCKSTEP_Out[1273] = \<const0> ;
  assign LOCKSTEP_Out[1274] = \<const0> ;
  assign LOCKSTEP_Out[1275] = \<const0> ;
  assign LOCKSTEP_Out[1276] = \<const0> ;
  assign LOCKSTEP_Out[1277] = \<const0> ;
  assign LOCKSTEP_Out[1278] = \<const0> ;
  assign LOCKSTEP_Out[1279] = \<const0> ;
  assign LOCKSTEP_Out[1280] = \<const0> ;
  assign LOCKSTEP_Out[1281] = \<const0> ;
  assign LOCKSTEP_Out[1282] = \<const0> ;
  assign LOCKSTEP_Out[1283] = \<const0> ;
  assign LOCKSTEP_Out[1284] = \<const0> ;
  assign LOCKSTEP_Out[1285] = \<const0> ;
  assign LOCKSTEP_Out[1286] = \<const0> ;
  assign LOCKSTEP_Out[1287] = \<const0> ;
  assign LOCKSTEP_Out[1288] = \<const0> ;
  assign LOCKSTEP_Out[1289] = \<const0> ;
  assign LOCKSTEP_Out[1290] = \<const0> ;
  assign LOCKSTEP_Out[1291] = \<const0> ;
  assign LOCKSTEP_Out[1292] = \<const0> ;
  assign LOCKSTEP_Out[1293] = \<const0> ;
  assign LOCKSTEP_Out[1294] = \<const0> ;
  assign LOCKSTEP_Out[1295] = \<const0> ;
  assign LOCKSTEP_Out[1296] = \<const0> ;
  assign LOCKSTEP_Out[1297] = \<const0> ;
  assign LOCKSTEP_Out[1298] = \<const0> ;
  assign LOCKSTEP_Out[1299] = \<const0> ;
  assign LOCKSTEP_Out[1300] = \<const0> ;
  assign LOCKSTEP_Out[1301] = \<const0> ;
  assign LOCKSTEP_Out[1302] = \<const0> ;
  assign LOCKSTEP_Out[1303] = \<const0> ;
  assign LOCKSTEP_Out[1304] = \<const0> ;
  assign LOCKSTEP_Out[1305] = \<const0> ;
  assign LOCKSTEP_Out[1306] = \<const0> ;
  assign LOCKSTEP_Out[1307] = \<const0> ;
  assign LOCKSTEP_Out[1308] = \<const0> ;
  assign LOCKSTEP_Out[1309] = \<const0> ;
  assign LOCKSTEP_Out[1310] = \<const0> ;
  assign LOCKSTEP_Out[1311] = \<const0> ;
  assign LOCKSTEP_Out[1312] = \<const0> ;
  assign LOCKSTEP_Out[1313] = \<const0> ;
  assign LOCKSTEP_Out[1314] = \<const0> ;
  assign LOCKSTEP_Out[1315] = \<const0> ;
  assign LOCKSTEP_Out[1316] = \<const0> ;
  assign LOCKSTEP_Out[1317] = \<const0> ;
  assign LOCKSTEP_Out[1318] = \<const0> ;
  assign LOCKSTEP_Out[1319] = \<const0> ;
  assign LOCKSTEP_Out[1320] = \<const0> ;
  assign LOCKSTEP_Out[1321] = \<const0> ;
  assign LOCKSTEP_Out[1322] = \<const0> ;
  assign LOCKSTEP_Out[1323] = \<const0> ;
  assign LOCKSTEP_Out[1324] = \<const0> ;
  assign LOCKSTEP_Out[1325] = \<const0> ;
  assign LOCKSTEP_Out[1326] = \<const0> ;
  assign LOCKSTEP_Out[1327] = \<const0> ;
  assign LOCKSTEP_Out[1328] = \<const0> ;
  assign LOCKSTEP_Out[1329] = \<const0> ;
  assign LOCKSTEP_Out[1330] = \<const0> ;
  assign LOCKSTEP_Out[1331] = \<const0> ;
  assign LOCKSTEP_Out[1332] = \<const0> ;
  assign LOCKSTEP_Out[1333] = \<const0> ;
  assign LOCKSTEP_Out[1334] = \<const0> ;
  assign LOCKSTEP_Out[1335] = \<const0> ;
  assign LOCKSTEP_Out[1336] = \<const0> ;
  assign LOCKSTEP_Out[1337] = \<const0> ;
  assign LOCKSTEP_Out[1338] = \<const0> ;
  assign LOCKSTEP_Out[1339] = \<const0> ;
  assign LOCKSTEP_Out[1340] = \<const0> ;
  assign LOCKSTEP_Out[1341] = \<const0> ;
  assign LOCKSTEP_Out[1342] = \<const0> ;
  assign LOCKSTEP_Out[1343] = \<const0> ;
  assign LOCKSTEP_Out[1344] = \<const0> ;
  assign LOCKSTEP_Out[1345] = \<const0> ;
  assign LOCKSTEP_Out[1346] = \<const0> ;
  assign LOCKSTEP_Out[1347] = \<const0> ;
  assign LOCKSTEP_Out[1348] = \<const0> ;
  assign LOCKSTEP_Out[1349] = \<const0> ;
  assign LOCKSTEP_Out[1350] = \<const0> ;
  assign LOCKSTEP_Out[1351] = \<const0> ;
  assign LOCKSTEP_Out[1352] = \<const0> ;
  assign LOCKSTEP_Out[1353] = \<const0> ;
  assign LOCKSTEP_Out[1354] = \<const0> ;
  assign LOCKSTEP_Out[1355] = \<const0> ;
  assign LOCKSTEP_Out[1356] = \<const0> ;
  assign LOCKSTEP_Out[1357] = \<const0> ;
  assign LOCKSTEP_Out[1358] = \<const0> ;
  assign LOCKSTEP_Out[1359] = \<const0> ;
  assign LOCKSTEP_Out[1360] = \<const0> ;
  assign LOCKSTEP_Out[1361] = \<const0> ;
  assign LOCKSTEP_Out[1362] = \<const0> ;
  assign LOCKSTEP_Out[1363] = \<const0> ;
  assign LOCKSTEP_Out[1364] = \<const0> ;
  assign LOCKSTEP_Out[1365] = \<const0> ;
  assign LOCKSTEP_Out[1366] = \<const0> ;
  assign LOCKSTEP_Out[1367] = \<const0> ;
  assign LOCKSTEP_Out[1368] = \<const0> ;
  assign LOCKSTEP_Out[1369] = \<const0> ;
  assign LOCKSTEP_Out[1370] = \<const0> ;
  assign LOCKSTEP_Out[1371] = \<const0> ;
  assign LOCKSTEP_Out[1372] = \<const0> ;
  assign LOCKSTEP_Out[1373] = \<const0> ;
  assign LOCKSTEP_Out[1374] = \<const0> ;
  assign LOCKSTEP_Out[1375] = \<const0> ;
  assign LOCKSTEP_Out[1376] = \<const0> ;
  assign LOCKSTEP_Out[1377] = \<const0> ;
  assign LOCKSTEP_Out[1378] = \<const0> ;
  assign LOCKSTEP_Out[1379] = \<const0> ;
  assign LOCKSTEP_Out[1380] = \<const0> ;
  assign LOCKSTEP_Out[1381] = \<const0> ;
  assign LOCKSTEP_Out[1382] = \<const0> ;
  assign LOCKSTEP_Out[1383] = \<const0> ;
  assign LOCKSTEP_Out[1384] = \<const0> ;
  assign LOCKSTEP_Out[1385] = \<const0> ;
  assign LOCKSTEP_Out[1386] = \<const0> ;
  assign LOCKSTEP_Out[1387] = \<const0> ;
  assign LOCKSTEP_Out[1388] = \<const0> ;
  assign LOCKSTEP_Out[1389] = \<const0> ;
  assign LOCKSTEP_Out[1390] = \<const0> ;
  assign LOCKSTEP_Out[1391] = \<const0> ;
  assign LOCKSTEP_Out[1392] = \<const0> ;
  assign LOCKSTEP_Out[1393] = \<const0> ;
  assign LOCKSTEP_Out[1394] = \<const0> ;
  assign LOCKSTEP_Out[1395] = \<const0> ;
  assign LOCKSTEP_Out[1396] = \<const0> ;
  assign LOCKSTEP_Out[1397] = \<const0> ;
  assign LOCKSTEP_Out[1398] = \<const0> ;
  assign LOCKSTEP_Out[1399] = \<const0> ;
  assign LOCKSTEP_Out[1400] = \<const0> ;
  assign LOCKSTEP_Out[1401] = \<const0> ;
  assign LOCKSTEP_Out[1402] = \<const0> ;
  assign LOCKSTEP_Out[1403] = \<const0> ;
  assign LOCKSTEP_Out[1404] = \<const0> ;
  assign LOCKSTEP_Out[1405] = \<const0> ;
  assign LOCKSTEP_Out[1406] = \<const0> ;
  assign LOCKSTEP_Out[1407] = \<const0> ;
  assign LOCKSTEP_Out[1408] = \<const0> ;
  assign LOCKSTEP_Out[1409] = \<const0> ;
  assign LOCKSTEP_Out[1410] = \<const0> ;
  assign LOCKSTEP_Out[1411] = \<const0> ;
  assign LOCKSTEP_Out[1412] = \<const0> ;
  assign LOCKSTEP_Out[1413] = \<const0> ;
  assign LOCKSTEP_Out[1414] = \<const0> ;
  assign LOCKSTEP_Out[1415] = \<const0> ;
  assign LOCKSTEP_Out[1416] = \<const0> ;
  assign LOCKSTEP_Out[1417] = \<const0> ;
  assign LOCKSTEP_Out[1418] = \<const0> ;
  assign LOCKSTEP_Out[1419] = \<const0> ;
  assign LOCKSTEP_Out[1420] = \<const0> ;
  assign LOCKSTEP_Out[1421] = \<const0> ;
  assign LOCKSTEP_Out[1422] = \<const0> ;
  assign LOCKSTEP_Out[1423] = \<const0> ;
  assign LOCKSTEP_Out[1424] = \<const0> ;
  assign LOCKSTEP_Out[1425] = \<const0> ;
  assign LOCKSTEP_Out[1426] = \<const0> ;
  assign LOCKSTEP_Out[1427] = \<const0> ;
  assign LOCKSTEP_Out[1428] = \<const0> ;
  assign LOCKSTEP_Out[1429] = \<const0> ;
  assign LOCKSTEP_Out[1430] = \<const0> ;
  assign LOCKSTEP_Out[1431] = \<const0> ;
  assign LOCKSTEP_Out[1432] = \<const0> ;
  assign LOCKSTEP_Out[1433] = \<const0> ;
  assign LOCKSTEP_Out[1434] = \<const0> ;
  assign LOCKSTEP_Out[1435] = \<const0> ;
  assign LOCKSTEP_Out[1436] = \<const0> ;
  assign LOCKSTEP_Out[1437] = \<const0> ;
  assign LOCKSTEP_Out[1438] = \<const0> ;
  assign LOCKSTEP_Out[1439] = \<const0> ;
  assign LOCKSTEP_Out[1440] = \<const0> ;
  assign LOCKSTEP_Out[1441] = \<const0> ;
  assign LOCKSTEP_Out[1442] = \<const0> ;
  assign LOCKSTEP_Out[1443] = \<const0> ;
  assign LOCKSTEP_Out[1444] = \<const0> ;
  assign LOCKSTEP_Out[1445] = \<const0> ;
  assign LOCKSTEP_Out[1446] = \<const0> ;
  assign LOCKSTEP_Out[1447] = \<const0> ;
  assign LOCKSTEP_Out[1448] = \<const0> ;
  assign LOCKSTEP_Out[1449] = \<const0> ;
  assign LOCKSTEP_Out[1450] = \<const0> ;
  assign LOCKSTEP_Out[1451] = \<const0> ;
  assign LOCKSTEP_Out[1452] = \<const0> ;
  assign LOCKSTEP_Out[1453] = \<const0> ;
  assign LOCKSTEP_Out[1454] = \<const0> ;
  assign LOCKSTEP_Out[1455] = \<const0> ;
  assign LOCKSTEP_Out[1456] = \<const0> ;
  assign LOCKSTEP_Out[1457] = \<const0> ;
  assign LOCKSTEP_Out[1458] = \<const0> ;
  assign LOCKSTEP_Out[1459] = \<const0> ;
  assign LOCKSTEP_Out[1460] = \<const0> ;
  assign LOCKSTEP_Out[1461] = \<const0> ;
  assign LOCKSTEP_Out[1462] = \<const0> ;
  assign LOCKSTEP_Out[1463] = \<const0> ;
  assign LOCKSTEP_Out[1464] = \<const0> ;
  assign LOCKSTEP_Out[1465] = \<const0> ;
  assign LOCKSTEP_Out[1466] = \<const0> ;
  assign LOCKSTEP_Out[1467] = \<const0> ;
  assign LOCKSTEP_Out[1468] = \<const0> ;
  assign LOCKSTEP_Out[1469] = \<const0> ;
  assign LOCKSTEP_Out[1470] = \<const0> ;
  assign LOCKSTEP_Out[1471] = \<const0> ;
  assign LOCKSTEP_Out[1472] = \<const0> ;
  assign LOCKSTEP_Out[1473] = \<const0> ;
  assign LOCKSTEP_Out[1474] = \<const0> ;
  assign LOCKSTEP_Out[1475] = \<const0> ;
  assign LOCKSTEP_Out[1476] = \<const0> ;
  assign LOCKSTEP_Out[1477] = \<const0> ;
  assign LOCKSTEP_Out[1478] = \<const0> ;
  assign LOCKSTEP_Out[1479] = \<const0> ;
  assign LOCKSTEP_Out[1480] = \<const0> ;
  assign LOCKSTEP_Out[1481] = \<const0> ;
  assign LOCKSTEP_Out[1482] = \<const0> ;
  assign LOCKSTEP_Out[1483] = \<const0> ;
  assign LOCKSTEP_Out[1484] = \<const0> ;
  assign LOCKSTEP_Out[1485] = \<const0> ;
  assign LOCKSTEP_Out[1486] = \<const0> ;
  assign LOCKSTEP_Out[1487] = \<const0> ;
  assign LOCKSTEP_Out[1488] = \<const0> ;
  assign LOCKSTEP_Out[1489] = \<const0> ;
  assign LOCKSTEP_Out[1490] = \<const0> ;
  assign LOCKSTEP_Out[1491] = \<const0> ;
  assign LOCKSTEP_Out[1492] = \<const0> ;
  assign LOCKSTEP_Out[1493] = \<const0> ;
  assign LOCKSTEP_Out[1494] = \<const0> ;
  assign LOCKSTEP_Out[1495] = \<const0> ;
  assign LOCKSTEP_Out[1496] = \<const0> ;
  assign LOCKSTEP_Out[1497] = \<const0> ;
  assign LOCKSTEP_Out[1498] = \<const0> ;
  assign LOCKSTEP_Out[1499] = \<const0> ;
  assign LOCKSTEP_Out[1500] = \<const0> ;
  assign LOCKSTEP_Out[1501] = \<const0> ;
  assign LOCKSTEP_Out[1502] = \<const0> ;
  assign LOCKSTEP_Out[1503] = \<const0> ;
  assign LOCKSTEP_Out[1504] = \<const0> ;
  assign LOCKSTEP_Out[1505] = \<const0> ;
  assign LOCKSTEP_Out[1506] = \<const0> ;
  assign LOCKSTEP_Out[1507] = \<const0> ;
  assign LOCKSTEP_Out[1508] = \<const0> ;
  assign LOCKSTEP_Out[1509] = \<const0> ;
  assign LOCKSTEP_Out[1510] = \<const0> ;
  assign LOCKSTEP_Out[1511] = \<const0> ;
  assign LOCKSTEP_Out[1512] = \<const0> ;
  assign LOCKSTEP_Out[1513] = \<const0> ;
  assign LOCKSTEP_Out[1514] = \<const0> ;
  assign LOCKSTEP_Out[1515] = \<const0> ;
  assign LOCKSTEP_Out[1516] = \<const0> ;
  assign LOCKSTEP_Out[1517] = \<const0> ;
  assign LOCKSTEP_Out[1518] = \<const0> ;
  assign LOCKSTEP_Out[1519] = \<const0> ;
  assign LOCKSTEP_Out[1520] = \<const0> ;
  assign LOCKSTEP_Out[1521] = \<const0> ;
  assign LOCKSTEP_Out[1522] = \<const0> ;
  assign LOCKSTEP_Out[1523] = \<const0> ;
  assign LOCKSTEP_Out[1524] = \<const0> ;
  assign LOCKSTEP_Out[1525] = \<const0> ;
  assign LOCKSTEP_Out[1526] = \<const0> ;
  assign LOCKSTEP_Out[1527] = \<const0> ;
  assign LOCKSTEP_Out[1528] = \<const0> ;
  assign LOCKSTEP_Out[1529] = \<const0> ;
  assign LOCKSTEP_Out[1530] = \<const0> ;
  assign LOCKSTEP_Out[1531] = \<const0> ;
  assign LOCKSTEP_Out[1532] = \<const0> ;
  assign LOCKSTEP_Out[1533] = \<const0> ;
  assign LOCKSTEP_Out[1534] = \<const0> ;
  assign LOCKSTEP_Out[1535] = \<const0> ;
  assign LOCKSTEP_Out[1536] = \<const0> ;
  assign LOCKSTEP_Out[1537] = \<const0> ;
  assign LOCKSTEP_Out[1538] = \<const0> ;
  assign LOCKSTEP_Out[1539] = \<const0> ;
  assign LOCKSTEP_Out[1540] = \<const0> ;
  assign LOCKSTEP_Out[1541] = \<const0> ;
  assign LOCKSTEP_Out[1542] = \<const0> ;
  assign LOCKSTEP_Out[1543] = \<const0> ;
  assign LOCKSTEP_Out[1544] = \<const0> ;
  assign LOCKSTEP_Out[1545] = \<const0> ;
  assign LOCKSTEP_Out[1546] = \<const0> ;
  assign LOCKSTEP_Out[1547] = \<const0> ;
  assign LOCKSTEP_Out[1548] = \<const0> ;
  assign LOCKSTEP_Out[1549] = \<const0> ;
  assign LOCKSTEP_Out[1550] = \<const0> ;
  assign LOCKSTEP_Out[1551] = \<const0> ;
  assign LOCKSTEP_Out[1552] = \<const0> ;
  assign LOCKSTEP_Out[1553] = \<const0> ;
  assign LOCKSTEP_Out[1554] = \<const0> ;
  assign LOCKSTEP_Out[1555] = \<const0> ;
  assign LOCKSTEP_Out[1556] = \<const0> ;
  assign LOCKSTEP_Out[1557] = \<const0> ;
  assign LOCKSTEP_Out[1558] = \<const0> ;
  assign LOCKSTEP_Out[1559] = \<const0> ;
  assign LOCKSTEP_Out[1560] = \<const0> ;
  assign LOCKSTEP_Out[1561] = \<const0> ;
  assign LOCKSTEP_Out[1562] = \<const0> ;
  assign LOCKSTEP_Out[1563] = \<const0> ;
  assign LOCKSTEP_Out[1564] = \<const0> ;
  assign LOCKSTEP_Out[1565] = \<const0> ;
  assign LOCKSTEP_Out[1566] = \<const0> ;
  assign LOCKSTEP_Out[1567] = \<const0> ;
  assign LOCKSTEP_Out[1568] = \<const0> ;
  assign LOCKSTEP_Out[1569] = \<const0> ;
  assign LOCKSTEP_Out[1570] = \<const0> ;
  assign LOCKSTEP_Out[1571] = \<const0> ;
  assign LOCKSTEP_Out[1572] = \<const0> ;
  assign LOCKSTEP_Out[1573] = \<const0> ;
  assign LOCKSTEP_Out[1574] = \<const0> ;
  assign LOCKSTEP_Out[1575] = \<const0> ;
  assign LOCKSTEP_Out[1576] = \<const0> ;
  assign LOCKSTEP_Out[1577] = \<const0> ;
  assign LOCKSTEP_Out[1578] = \<const0> ;
  assign LOCKSTEP_Out[1579] = \<const0> ;
  assign LOCKSTEP_Out[1580] = \<const0> ;
  assign LOCKSTEP_Out[1581] = \<const0> ;
  assign LOCKSTEP_Out[1582] = \<const0> ;
  assign LOCKSTEP_Out[1583] = \<const0> ;
  assign LOCKSTEP_Out[1584] = \<const0> ;
  assign LOCKSTEP_Out[1585] = \<const0> ;
  assign LOCKSTEP_Out[1586] = \<const0> ;
  assign LOCKSTEP_Out[1587] = \<const0> ;
  assign LOCKSTEP_Out[1588] = \<const0> ;
  assign LOCKSTEP_Out[1589] = \<const0> ;
  assign LOCKSTEP_Out[1590] = \<const0> ;
  assign LOCKSTEP_Out[1591] = \<const0> ;
  assign LOCKSTEP_Out[1592] = \<const0> ;
  assign LOCKSTEP_Out[1593] = \<const0> ;
  assign LOCKSTEP_Out[1594] = \<const0> ;
  assign LOCKSTEP_Out[1595] = \<const0> ;
  assign LOCKSTEP_Out[1596] = \<const0> ;
  assign LOCKSTEP_Out[1597] = \<const0> ;
  assign LOCKSTEP_Out[1598] = \<const0> ;
  assign LOCKSTEP_Out[1599] = \<const0> ;
  assign LOCKSTEP_Out[1600] = \<const0> ;
  assign LOCKSTEP_Out[1601] = \<const0> ;
  assign LOCKSTEP_Out[1602] = \<const0> ;
  assign LOCKSTEP_Out[1603] = \<const0> ;
  assign LOCKSTEP_Out[1604] = \<const0> ;
  assign LOCKSTEP_Out[1605] = \<const0> ;
  assign LOCKSTEP_Out[1606] = \<const0> ;
  assign LOCKSTEP_Out[1607] = \<const0> ;
  assign LOCKSTEP_Out[1608] = \<const0> ;
  assign LOCKSTEP_Out[1609] = \<const0> ;
  assign LOCKSTEP_Out[1610] = \<const0> ;
  assign LOCKSTEP_Out[1611] = \<const0> ;
  assign LOCKSTEP_Out[1612] = \<const0> ;
  assign LOCKSTEP_Out[1613] = \<const0> ;
  assign LOCKSTEP_Out[1614] = \<const0> ;
  assign LOCKSTEP_Out[1615] = \<const0> ;
  assign LOCKSTEP_Out[1616] = \<const0> ;
  assign LOCKSTEP_Out[1617] = \<const0> ;
  assign LOCKSTEP_Out[1618] = \<const0> ;
  assign LOCKSTEP_Out[1619] = \<const0> ;
  assign LOCKSTEP_Out[1620] = \<const0> ;
  assign LOCKSTEP_Out[1621] = \<const0> ;
  assign LOCKSTEP_Out[1622] = \<const0> ;
  assign LOCKSTEP_Out[1623] = \<const0> ;
  assign LOCKSTEP_Out[1624] = \<const0> ;
  assign LOCKSTEP_Out[1625] = \<const0> ;
  assign LOCKSTEP_Out[1626] = \<const0> ;
  assign LOCKSTEP_Out[1627] = \<const0> ;
  assign LOCKSTEP_Out[1628] = \<const0> ;
  assign LOCKSTEP_Out[1629] = \<const0> ;
  assign LOCKSTEP_Out[1630] = \<const0> ;
  assign LOCKSTEP_Out[1631] = \<const0> ;
  assign LOCKSTEP_Out[1632] = \<const0> ;
  assign LOCKSTEP_Out[1633] = \<const0> ;
  assign LOCKSTEP_Out[1634] = \<const0> ;
  assign LOCKSTEP_Out[1635] = \<const0> ;
  assign LOCKSTEP_Out[1636] = \<const0> ;
  assign LOCKSTEP_Out[1637] = \<const0> ;
  assign LOCKSTEP_Out[1638] = \<const0> ;
  assign LOCKSTEP_Out[1639] = \<const0> ;
  assign LOCKSTEP_Out[1640] = \<const0> ;
  assign LOCKSTEP_Out[1641] = \<const0> ;
  assign LOCKSTEP_Out[1642] = \<const0> ;
  assign LOCKSTEP_Out[1643] = \<const0> ;
  assign LOCKSTEP_Out[1644] = \<const0> ;
  assign LOCKSTEP_Out[1645] = \<const0> ;
  assign LOCKSTEP_Out[1646] = \<const0> ;
  assign LOCKSTEP_Out[1647] = \<const0> ;
  assign LOCKSTEP_Out[1648] = \<const0> ;
  assign LOCKSTEP_Out[1649] = \<const0> ;
  assign LOCKSTEP_Out[1650] = \<const0> ;
  assign LOCKSTEP_Out[1651] = \<const0> ;
  assign LOCKSTEP_Out[1652] = \<const0> ;
  assign LOCKSTEP_Out[1653] = \<const0> ;
  assign LOCKSTEP_Out[1654] = \<const0> ;
  assign LOCKSTEP_Out[1655] = \<const0> ;
  assign LOCKSTEP_Out[1656] = \<const0> ;
  assign LOCKSTEP_Out[1657] = \<const0> ;
  assign LOCKSTEP_Out[1658] = \<const0> ;
  assign LOCKSTEP_Out[1659] = \<const0> ;
  assign LOCKSTEP_Out[1660] = \<const0> ;
  assign LOCKSTEP_Out[1661] = \<const0> ;
  assign LOCKSTEP_Out[1662] = \<const0> ;
  assign LOCKSTEP_Out[1663] = \<const0> ;
  assign LOCKSTEP_Out[1664] = \<const0> ;
  assign LOCKSTEP_Out[1665] = \<const0> ;
  assign LOCKSTEP_Out[1666] = \<const0> ;
  assign LOCKSTEP_Out[1667] = \<const0> ;
  assign LOCKSTEP_Out[1668] = \<const0> ;
  assign LOCKSTEP_Out[1669] = \<const0> ;
  assign LOCKSTEP_Out[1670] = \<const0> ;
  assign LOCKSTEP_Out[1671] = \<const0> ;
  assign LOCKSTEP_Out[1672] = \<const0> ;
  assign LOCKSTEP_Out[1673] = \<const0> ;
  assign LOCKSTEP_Out[1674] = \<const0> ;
  assign LOCKSTEP_Out[1675] = \<const0> ;
  assign LOCKSTEP_Out[1676] = \<const0> ;
  assign LOCKSTEP_Out[1677] = \<const0> ;
  assign LOCKSTEP_Out[1678] = \<const0> ;
  assign LOCKSTEP_Out[1679] = \<const0> ;
  assign LOCKSTEP_Out[1680] = \<const0> ;
  assign LOCKSTEP_Out[1681] = \<const0> ;
  assign LOCKSTEP_Out[1682] = \<const0> ;
  assign LOCKSTEP_Out[1683] = \<const0> ;
  assign LOCKSTEP_Out[1684] = \<const0> ;
  assign LOCKSTEP_Out[1685] = \<const0> ;
  assign LOCKSTEP_Out[1686] = \<const0> ;
  assign LOCKSTEP_Out[1687] = \<const0> ;
  assign LOCKSTEP_Out[1688] = \<const0> ;
  assign LOCKSTEP_Out[1689] = \<const0> ;
  assign LOCKSTEP_Out[1690] = \<const0> ;
  assign LOCKSTEP_Out[1691] = \<const0> ;
  assign LOCKSTEP_Out[1692] = \<const0> ;
  assign LOCKSTEP_Out[1693] = \<const0> ;
  assign LOCKSTEP_Out[1694] = \<const0> ;
  assign LOCKSTEP_Out[1695] = \<const0> ;
  assign LOCKSTEP_Out[1696] = \<const0> ;
  assign LOCKSTEP_Out[1697] = \<const0> ;
  assign LOCKSTEP_Out[1698] = \<const0> ;
  assign LOCKSTEP_Out[1699] = \<const0> ;
  assign LOCKSTEP_Out[1700] = \<const0> ;
  assign LOCKSTEP_Out[1701] = \<const0> ;
  assign LOCKSTEP_Out[1702] = \<const0> ;
  assign LOCKSTEP_Out[1703] = \<const0> ;
  assign LOCKSTEP_Out[1704] = \<const0> ;
  assign LOCKSTEP_Out[1705] = \<const0> ;
  assign LOCKSTEP_Out[1706] = \<const0> ;
  assign LOCKSTEP_Out[1707] = \<const0> ;
  assign LOCKSTEP_Out[1708] = \<const0> ;
  assign LOCKSTEP_Out[1709] = \<const0> ;
  assign LOCKSTEP_Out[1710] = \<const0> ;
  assign LOCKSTEP_Out[1711] = \<const0> ;
  assign LOCKSTEP_Out[1712] = \<const0> ;
  assign LOCKSTEP_Out[1713] = \<const0> ;
  assign LOCKSTEP_Out[1714] = \<const0> ;
  assign LOCKSTEP_Out[1715] = \<const0> ;
  assign LOCKSTEP_Out[1716] = \<const0> ;
  assign LOCKSTEP_Out[1717] = \<const0> ;
  assign LOCKSTEP_Out[1718] = \<const0> ;
  assign LOCKSTEP_Out[1719] = \<const0> ;
  assign LOCKSTEP_Out[1720] = \<const0> ;
  assign LOCKSTEP_Out[1721] = \<const0> ;
  assign LOCKSTEP_Out[1722] = \<const0> ;
  assign LOCKSTEP_Out[1723] = \<const0> ;
  assign LOCKSTEP_Out[1724] = \<const0> ;
  assign LOCKSTEP_Out[1725] = \<const0> ;
  assign LOCKSTEP_Out[1726] = \<const0> ;
  assign LOCKSTEP_Out[1727] = \<const0> ;
  assign LOCKSTEP_Out[1728] = \<const0> ;
  assign LOCKSTEP_Out[1729] = \<const0> ;
  assign LOCKSTEP_Out[1730] = \<const0> ;
  assign LOCKSTEP_Out[1731] = \<const0> ;
  assign LOCKSTEP_Out[1732] = \<const0> ;
  assign LOCKSTEP_Out[1733] = \<const0> ;
  assign LOCKSTEP_Out[1734] = \<const0> ;
  assign LOCKSTEP_Out[1735] = \<const0> ;
  assign LOCKSTEP_Out[1736] = \<const0> ;
  assign LOCKSTEP_Out[1737] = \<const0> ;
  assign LOCKSTEP_Out[1738] = \<const0> ;
  assign LOCKSTEP_Out[1739] = \<const0> ;
  assign LOCKSTEP_Out[1740] = \<const0> ;
  assign LOCKSTEP_Out[1741] = \<const0> ;
  assign LOCKSTEP_Out[1742] = \<const0> ;
  assign LOCKSTEP_Out[1743] = \<const0> ;
  assign LOCKSTEP_Out[1744] = \<const0> ;
  assign LOCKSTEP_Out[1745] = \<const0> ;
  assign LOCKSTEP_Out[1746] = \<const0> ;
  assign LOCKSTEP_Out[1747] = \<const0> ;
  assign LOCKSTEP_Out[1748] = \<const0> ;
  assign LOCKSTEP_Out[1749] = \<const0> ;
  assign LOCKSTEP_Out[1750] = \<const0> ;
  assign LOCKSTEP_Out[1751] = \<const0> ;
  assign LOCKSTEP_Out[1752] = \<const0> ;
  assign LOCKSTEP_Out[1753] = \<const0> ;
  assign LOCKSTEP_Out[1754] = \<const0> ;
  assign LOCKSTEP_Out[1755] = \<const0> ;
  assign LOCKSTEP_Out[1756] = \<const0> ;
  assign LOCKSTEP_Out[1757] = \<const0> ;
  assign LOCKSTEP_Out[1758] = \<const0> ;
  assign LOCKSTEP_Out[1759] = \<const0> ;
  assign LOCKSTEP_Out[1760] = \<const0> ;
  assign LOCKSTEP_Out[1761] = \<const0> ;
  assign LOCKSTEP_Out[1762] = \<const0> ;
  assign LOCKSTEP_Out[1763] = \<const0> ;
  assign LOCKSTEP_Out[1764] = \<const0> ;
  assign LOCKSTEP_Out[1765] = \<const0> ;
  assign LOCKSTEP_Out[1766] = \<const0> ;
  assign LOCKSTEP_Out[1767] = \<const0> ;
  assign LOCKSTEP_Out[1768] = \<const0> ;
  assign LOCKSTEP_Out[1769] = \<const0> ;
  assign LOCKSTEP_Out[1770] = \<const0> ;
  assign LOCKSTEP_Out[1771] = \<const0> ;
  assign LOCKSTEP_Out[1772] = \<const0> ;
  assign LOCKSTEP_Out[1773] = \<const0> ;
  assign LOCKSTEP_Out[1774] = \<const0> ;
  assign LOCKSTEP_Out[1775] = \<const0> ;
  assign LOCKSTEP_Out[1776] = \<const0> ;
  assign LOCKSTEP_Out[1777] = \<const0> ;
  assign LOCKSTEP_Out[1778] = \<const0> ;
  assign LOCKSTEP_Out[1779] = \<const0> ;
  assign LOCKSTEP_Out[1780] = \<const0> ;
  assign LOCKSTEP_Out[1781] = \<const0> ;
  assign LOCKSTEP_Out[1782] = \<const0> ;
  assign LOCKSTEP_Out[1783] = \<const0> ;
  assign LOCKSTEP_Out[1784] = \<const0> ;
  assign LOCKSTEP_Out[1785] = \<const0> ;
  assign LOCKSTEP_Out[1786] = \<const0> ;
  assign LOCKSTEP_Out[1787] = \<const0> ;
  assign LOCKSTEP_Out[1788] = \<const0> ;
  assign LOCKSTEP_Out[1789] = \<const0> ;
  assign LOCKSTEP_Out[1790] = \<const0> ;
  assign LOCKSTEP_Out[1791] = \<const0> ;
  assign LOCKSTEP_Out[1792] = \<const0> ;
  assign LOCKSTEP_Out[1793] = \<const0> ;
  assign LOCKSTEP_Out[1794] = \<const0> ;
  assign LOCKSTEP_Out[1795] = \<const0> ;
  assign LOCKSTEP_Out[1796] = \<const0> ;
  assign LOCKSTEP_Out[1797] = \<const0> ;
  assign LOCKSTEP_Out[1798] = \<const0> ;
  assign LOCKSTEP_Out[1799] = \<const0> ;
  assign LOCKSTEP_Out[1800] = \<const0> ;
  assign LOCKSTEP_Out[1801] = \<const0> ;
  assign LOCKSTEP_Out[1802] = \<const0> ;
  assign LOCKSTEP_Out[1803] = \<const0> ;
  assign LOCKSTEP_Out[1804] = \<const0> ;
  assign LOCKSTEP_Out[1805] = \<const0> ;
  assign LOCKSTEP_Out[1806] = \<const0> ;
  assign LOCKSTEP_Out[1807] = \<const0> ;
  assign LOCKSTEP_Out[1808] = \<const0> ;
  assign LOCKSTEP_Out[1809] = \<const0> ;
  assign LOCKSTEP_Out[1810] = \<const0> ;
  assign LOCKSTEP_Out[1811] = \<const0> ;
  assign LOCKSTEP_Out[1812] = \<const0> ;
  assign LOCKSTEP_Out[1813] = \<const0> ;
  assign LOCKSTEP_Out[1814] = \<const0> ;
  assign LOCKSTEP_Out[1815] = \<const0> ;
  assign LOCKSTEP_Out[1816] = \<const0> ;
  assign LOCKSTEP_Out[1817] = \<const0> ;
  assign LOCKSTEP_Out[1818] = \<const0> ;
  assign LOCKSTEP_Out[1819] = \<const0> ;
  assign LOCKSTEP_Out[1820] = \<const0> ;
  assign LOCKSTEP_Out[1821] = \<const0> ;
  assign LOCKSTEP_Out[1822] = \<const0> ;
  assign LOCKSTEP_Out[1823] = \<const0> ;
  assign LOCKSTEP_Out[1824] = \<const0> ;
  assign LOCKSTEP_Out[1825] = \<const0> ;
  assign LOCKSTEP_Out[1826] = \<const0> ;
  assign LOCKSTEP_Out[1827] = \<const0> ;
  assign LOCKSTEP_Out[1828] = \<const0> ;
  assign LOCKSTEP_Out[1829] = \<const0> ;
  assign LOCKSTEP_Out[1830] = \<const0> ;
  assign LOCKSTEP_Out[1831] = \<const0> ;
  assign LOCKSTEP_Out[1832] = \<const0> ;
  assign LOCKSTEP_Out[1833] = \<const0> ;
  assign LOCKSTEP_Out[1834] = \<const0> ;
  assign LOCKSTEP_Out[1835] = \<const0> ;
  assign LOCKSTEP_Out[1836] = \<const0> ;
  assign LOCKSTEP_Out[1837] = \<const0> ;
  assign LOCKSTEP_Out[1838] = \<const0> ;
  assign LOCKSTEP_Out[1839] = \<const0> ;
  assign LOCKSTEP_Out[1840] = \<const0> ;
  assign LOCKSTEP_Out[1841] = \<const0> ;
  assign LOCKSTEP_Out[1842] = \<const0> ;
  assign LOCKSTEP_Out[1843] = \<const0> ;
  assign LOCKSTEP_Out[1844] = \<const0> ;
  assign LOCKSTEP_Out[1845] = \<const0> ;
  assign LOCKSTEP_Out[1846] = \<const0> ;
  assign LOCKSTEP_Out[1847] = \<const0> ;
  assign LOCKSTEP_Out[1848] = \<const0> ;
  assign LOCKSTEP_Out[1849] = \<const0> ;
  assign LOCKSTEP_Out[1850] = \<const0> ;
  assign LOCKSTEP_Out[1851] = \<const0> ;
  assign LOCKSTEP_Out[1852] = \<const0> ;
  assign LOCKSTEP_Out[1853] = \<const0> ;
  assign LOCKSTEP_Out[1854] = \<const0> ;
  assign LOCKSTEP_Out[1855] = \<const0> ;
  assign LOCKSTEP_Out[1856] = \<const0> ;
  assign LOCKSTEP_Out[1857] = \<const0> ;
  assign LOCKSTEP_Out[1858] = \<const0> ;
  assign LOCKSTEP_Out[1859] = \<const0> ;
  assign LOCKSTEP_Out[1860] = \<const0> ;
  assign LOCKSTEP_Out[1861] = \<const0> ;
  assign LOCKSTEP_Out[1862] = \<const0> ;
  assign LOCKSTEP_Out[1863] = \<const0> ;
  assign LOCKSTEP_Out[1864] = \<const0> ;
  assign LOCKSTEP_Out[1865] = \<const0> ;
  assign LOCKSTEP_Out[1866] = \<const0> ;
  assign LOCKSTEP_Out[1867] = \<const0> ;
  assign LOCKSTEP_Out[1868] = \<const0> ;
  assign LOCKSTEP_Out[1869] = \<const0> ;
  assign LOCKSTEP_Out[1870] = \<const0> ;
  assign LOCKSTEP_Out[1871] = \<const0> ;
  assign LOCKSTEP_Out[1872] = \<const0> ;
  assign LOCKSTEP_Out[1873] = \<const0> ;
  assign LOCKSTEP_Out[1874] = \<const0> ;
  assign LOCKSTEP_Out[1875] = \<const0> ;
  assign LOCKSTEP_Out[1876] = \<const0> ;
  assign LOCKSTEP_Out[1877] = \<const0> ;
  assign LOCKSTEP_Out[1878] = \<const0> ;
  assign LOCKSTEP_Out[1879] = \<const0> ;
  assign LOCKSTEP_Out[1880] = \<const0> ;
  assign LOCKSTEP_Out[1881] = \<const0> ;
  assign LOCKSTEP_Out[1882] = \<const0> ;
  assign LOCKSTEP_Out[1883] = \<const0> ;
  assign LOCKSTEP_Out[1884] = \<const0> ;
  assign LOCKSTEP_Out[1885] = \<const0> ;
  assign LOCKSTEP_Out[1886] = \<const0> ;
  assign LOCKSTEP_Out[1887] = \<const0> ;
  assign LOCKSTEP_Out[1888] = \<const0> ;
  assign LOCKSTEP_Out[1889] = \<const0> ;
  assign LOCKSTEP_Out[1890] = \<const0> ;
  assign LOCKSTEP_Out[1891] = \<const0> ;
  assign LOCKSTEP_Out[1892] = \<const0> ;
  assign LOCKSTEP_Out[1893] = \<const0> ;
  assign LOCKSTEP_Out[1894] = \<const0> ;
  assign LOCKSTEP_Out[1895] = \<const0> ;
  assign LOCKSTEP_Out[1896] = \<const0> ;
  assign LOCKSTEP_Out[1897] = \<const0> ;
  assign LOCKSTEP_Out[1898] = \<const0> ;
  assign LOCKSTEP_Out[1899] = \<const0> ;
  assign LOCKSTEP_Out[1900] = \<const0> ;
  assign LOCKSTEP_Out[1901] = \<const0> ;
  assign LOCKSTEP_Out[1902] = \<const0> ;
  assign LOCKSTEP_Out[1903] = \<const0> ;
  assign LOCKSTEP_Out[1904] = \<const0> ;
  assign LOCKSTEP_Out[1905] = \<const0> ;
  assign LOCKSTEP_Out[1906] = \<const0> ;
  assign LOCKSTEP_Out[1907] = \<const0> ;
  assign LOCKSTEP_Out[1908] = \<const0> ;
  assign LOCKSTEP_Out[1909] = \<const0> ;
  assign LOCKSTEP_Out[1910] = \<const0> ;
  assign LOCKSTEP_Out[1911] = \<const0> ;
  assign LOCKSTEP_Out[1912] = \<const0> ;
  assign LOCKSTEP_Out[1913] = \<const0> ;
  assign LOCKSTEP_Out[1914] = \<const0> ;
  assign LOCKSTEP_Out[1915] = \<const0> ;
  assign LOCKSTEP_Out[1916] = \<const0> ;
  assign LOCKSTEP_Out[1917] = \<const0> ;
  assign LOCKSTEP_Out[1918] = \<const0> ;
  assign LOCKSTEP_Out[1919] = \<const0> ;
  assign LOCKSTEP_Out[1920] = \<const0> ;
  assign LOCKSTEP_Out[1921] = \<const0> ;
  assign LOCKSTEP_Out[1922] = \<const0> ;
  assign LOCKSTEP_Out[1923] = \<const0> ;
  assign LOCKSTEP_Out[1924] = \<const0> ;
  assign LOCKSTEP_Out[1925] = \<const0> ;
  assign LOCKSTEP_Out[1926] = \<const0> ;
  assign LOCKSTEP_Out[1927] = \<const0> ;
  assign LOCKSTEP_Out[1928] = \<const0> ;
  assign LOCKSTEP_Out[1929] = \<const0> ;
  assign LOCKSTEP_Out[1930] = \<const0> ;
  assign LOCKSTEP_Out[1931] = \<const0> ;
  assign LOCKSTEP_Out[1932] = \<const0> ;
  assign LOCKSTEP_Out[1933] = \<const0> ;
  assign LOCKSTEP_Out[1934] = \<const0> ;
  assign LOCKSTEP_Out[1935] = \<const0> ;
  assign LOCKSTEP_Out[1936] = \<const0> ;
  assign LOCKSTEP_Out[1937] = \<const0> ;
  assign LOCKSTEP_Out[1938] = \<const0> ;
  assign LOCKSTEP_Out[1939] = \<const0> ;
  assign LOCKSTEP_Out[1940] = \<const0> ;
  assign LOCKSTEP_Out[1941] = \<const0> ;
  assign LOCKSTEP_Out[1942] = \<const0> ;
  assign LOCKSTEP_Out[1943] = \<const0> ;
  assign LOCKSTEP_Out[1944] = \<const0> ;
  assign LOCKSTEP_Out[1945] = \<const0> ;
  assign LOCKSTEP_Out[1946] = \<const0> ;
  assign LOCKSTEP_Out[1947] = \<const0> ;
  assign LOCKSTEP_Out[1948] = \<const0> ;
  assign LOCKSTEP_Out[1949] = \<const0> ;
  assign LOCKSTEP_Out[1950] = \<const0> ;
  assign LOCKSTEP_Out[1951] = \<const0> ;
  assign LOCKSTEP_Out[1952] = \<const0> ;
  assign LOCKSTEP_Out[1953] = \<const0> ;
  assign LOCKSTEP_Out[1954] = \<const0> ;
  assign LOCKSTEP_Out[1955] = \<const0> ;
  assign LOCKSTEP_Out[1956] = \<const0> ;
  assign LOCKSTEP_Out[1957] = \<const0> ;
  assign LOCKSTEP_Out[1958] = \<const0> ;
  assign LOCKSTEP_Out[1959] = \<const0> ;
  assign LOCKSTEP_Out[1960] = \<const0> ;
  assign LOCKSTEP_Out[1961] = \<const0> ;
  assign LOCKSTEP_Out[1962] = \<const0> ;
  assign LOCKSTEP_Out[1963] = \<const0> ;
  assign LOCKSTEP_Out[1964] = \<const0> ;
  assign LOCKSTEP_Out[1965] = \<const0> ;
  assign LOCKSTEP_Out[1966] = \<const0> ;
  assign LOCKSTEP_Out[1967] = \<const0> ;
  assign LOCKSTEP_Out[1968] = \<const0> ;
  assign LOCKSTEP_Out[1969] = \<const0> ;
  assign LOCKSTEP_Out[1970] = \<const0> ;
  assign LOCKSTEP_Out[1971] = \<const0> ;
  assign LOCKSTEP_Out[1972] = \<const0> ;
  assign LOCKSTEP_Out[1973] = \<const0> ;
  assign LOCKSTEP_Out[1974] = \<const0> ;
  assign LOCKSTEP_Out[1975] = \<const0> ;
  assign LOCKSTEP_Out[1976] = \<const0> ;
  assign LOCKSTEP_Out[1977] = \<const0> ;
  assign LOCKSTEP_Out[1978] = \<const0> ;
  assign LOCKSTEP_Out[1979] = \<const0> ;
  assign LOCKSTEP_Out[1980] = \<const0> ;
  assign LOCKSTEP_Out[1981] = \<const0> ;
  assign LOCKSTEP_Out[1982] = \<const0> ;
  assign LOCKSTEP_Out[1983] = \<const0> ;
  assign LOCKSTEP_Out[1984] = \<const0> ;
  assign LOCKSTEP_Out[1985] = \<const0> ;
  assign LOCKSTEP_Out[1986] = \<const0> ;
  assign LOCKSTEP_Out[1987] = \<const0> ;
  assign LOCKSTEP_Out[1988] = \<const0> ;
  assign LOCKSTEP_Out[1989] = \<const0> ;
  assign LOCKSTEP_Out[1990] = \<const0> ;
  assign LOCKSTEP_Out[1991] = \<const0> ;
  assign LOCKSTEP_Out[1992] = \<const0> ;
  assign LOCKSTEP_Out[1993] = \<const0> ;
  assign LOCKSTEP_Out[1994] = \<const0> ;
  assign LOCKSTEP_Out[1995] = \<const0> ;
  assign LOCKSTEP_Out[1996] = \<const0> ;
  assign LOCKSTEP_Out[1997] = \<const0> ;
  assign LOCKSTEP_Out[1998] = \<const0> ;
  assign LOCKSTEP_Out[1999] = \<const0> ;
  assign LOCKSTEP_Out[2000] = \<const0> ;
  assign LOCKSTEP_Out[2001] = \<const0> ;
  assign LOCKSTEP_Out[2002] = \<const0> ;
  assign LOCKSTEP_Out[2003] = \<const0> ;
  assign LOCKSTEP_Out[2004] = \<const0> ;
  assign LOCKSTEP_Out[2005] = \<const0> ;
  assign LOCKSTEP_Out[2006] = \<const0> ;
  assign LOCKSTEP_Out[2007] = \<const0> ;
  assign LOCKSTEP_Out[2008] = \<const0> ;
  assign LOCKSTEP_Out[2009] = \<const0> ;
  assign LOCKSTEP_Out[2010] = \<const0> ;
  assign LOCKSTEP_Out[2011] = \<const0> ;
  assign LOCKSTEP_Out[2012] = \<const0> ;
  assign LOCKSTEP_Out[2013] = \<const0> ;
  assign LOCKSTEP_Out[2014] = \<const0> ;
  assign LOCKSTEP_Out[2015] = \<const0> ;
  assign LOCKSTEP_Out[2016] = \<const0> ;
  assign LOCKSTEP_Out[2017] = \<const0> ;
  assign LOCKSTEP_Out[2018] = \<const0> ;
  assign LOCKSTEP_Out[2019] = \<const0> ;
  assign LOCKSTEP_Out[2020] = \<const0> ;
  assign LOCKSTEP_Out[2021] = \<const0> ;
  assign LOCKSTEP_Out[2022] = \<const0> ;
  assign LOCKSTEP_Out[2023] = \<const0> ;
  assign LOCKSTEP_Out[2024] = \<const0> ;
  assign LOCKSTEP_Out[2025] = \<const0> ;
  assign LOCKSTEP_Out[2026] = \<const0> ;
  assign LOCKSTEP_Out[2027] = \<const0> ;
  assign LOCKSTEP_Out[2028] = \<const0> ;
  assign LOCKSTEP_Out[2029] = \<const0> ;
  assign LOCKSTEP_Out[2030] = \<const0> ;
  assign LOCKSTEP_Out[2031] = \<const0> ;
  assign LOCKSTEP_Out[2032] = \<const0> ;
  assign LOCKSTEP_Out[2033] = \<const0> ;
  assign LOCKSTEP_Out[2034] = \<const0> ;
  assign LOCKSTEP_Out[2035] = \<const0> ;
  assign LOCKSTEP_Out[2036] = \<const0> ;
  assign LOCKSTEP_Out[2037] = \<const0> ;
  assign LOCKSTEP_Out[2038] = \<const0> ;
  assign LOCKSTEP_Out[2039] = \<const0> ;
  assign LOCKSTEP_Out[2040] = \<const0> ;
  assign LOCKSTEP_Out[2041] = \<const0> ;
  assign LOCKSTEP_Out[2042] = \<const0> ;
  assign LOCKSTEP_Out[2043] = \<const0> ;
  assign LOCKSTEP_Out[2044] = \<const0> ;
  assign LOCKSTEP_Out[2045] = \<const0> ;
  assign LOCKSTEP_Out[2046] = \<const0> ;
  assign LOCKSTEP_Out[2047] = \<const0> ;
  assign LOCKSTEP_Out[2048] = \<const0> ;
  assign LOCKSTEP_Out[2049] = \<const0> ;
  assign LOCKSTEP_Out[2050] = \<const0> ;
  assign LOCKSTEP_Out[2051] = \<const0> ;
  assign LOCKSTEP_Out[2052] = \<const0> ;
  assign LOCKSTEP_Out[2053] = \<const0> ;
  assign LOCKSTEP_Out[2054] = \<const0> ;
  assign LOCKSTEP_Out[2055] = \<const0> ;
  assign LOCKSTEP_Out[2056] = \<const0> ;
  assign LOCKSTEP_Out[2057] = \<const0> ;
  assign LOCKSTEP_Out[2058] = \<const0> ;
  assign LOCKSTEP_Out[2059] = \<const0> ;
  assign LOCKSTEP_Out[2060] = \<const0> ;
  assign LOCKSTEP_Out[2061] = \<const0> ;
  assign LOCKSTEP_Out[2062] = \<const0> ;
  assign LOCKSTEP_Out[2063] = \<const0> ;
  assign LOCKSTEP_Out[2064] = \<const0> ;
  assign LOCKSTEP_Out[2065] = \<const0> ;
  assign LOCKSTEP_Out[2066] = \<const0> ;
  assign LOCKSTEP_Out[2067] = \<const0> ;
  assign LOCKSTEP_Out[2068] = \<const0> ;
  assign LOCKSTEP_Out[2069] = \<const0> ;
  assign LOCKSTEP_Out[2070] = \<const0> ;
  assign LOCKSTEP_Out[2071] = \<const0> ;
  assign LOCKSTEP_Out[2072] = \<const0> ;
  assign LOCKSTEP_Out[2073] = \<const0> ;
  assign LOCKSTEP_Out[2074] = \<const0> ;
  assign LOCKSTEP_Out[2075] = \<const0> ;
  assign LOCKSTEP_Out[2076] = \<const0> ;
  assign LOCKSTEP_Out[2077] = \<const0> ;
  assign LOCKSTEP_Out[2078] = \<const0> ;
  assign LOCKSTEP_Out[2079] = \<const0> ;
  assign LOCKSTEP_Out[2080] = \<const0> ;
  assign LOCKSTEP_Out[2081] = \<const0> ;
  assign LOCKSTEP_Out[2082] = \<const0> ;
  assign LOCKSTEP_Out[2083] = \<const0> ;
  assign LOCKSTEP_Out[2084] = \<const0> ;
  assign LOCKSTEP_Out[2085] = \<const0> ;
  assign LOCKSTEP_Out[2086] = \<const0> ;
  assign LOCKSTEP_Out[2087] = \<const0> ;
  assign LOCKSTEP_Out[2088] = \<const0> ;
  assign LOCKSTEP_Out[2089] = \<const0> ;
  assign LOCKSTEP_Out[2090] = \<const0> ;
  assign LOCKSTEP_Out[2091] = \<const0> ;
  assign LOCKSTEP_Out[2092] = \<const0> ;
  assign LOCKSTEP_Out[2093] = \<const0> ;
  assign LOCKSTEP_Out[2094] = \<const0> ;
  assign LOCKSTEP_Out[2095] = \<const0> ;
  assign LOCKSTEP_Out[2096] = \<const0> ;
  assign LOCKSTEP_Out[2097] = \<const0> ;
  assign LOCKSTEP_Out[2098] = \<const0> ;
  assign LOCKSTEP_Out[2099] = \<const0> ;
  assign LOCKSTEP_Out[2100] = \<const0> ;
  assign LOCKSTEP_Out[2101] = \<const0> ;
  assign LOCKSTEP_Out[2102] = \<const0> ;
  assign LOCKSTEP_Out[2103] = \<const0> ;
  assign LOCKSTEP_Out[2104] = \<const0> ;
  assign LOCKSTEP_Out[2105] = \<const0> ;
  assign LOCKSTEP_Out[2106] = \<const0> ;
  assign LOCKSTEP_Out[2107] = \<const0> ;
  assign LOCKSTEP_Out[2108] = \<const0> ;
  assign LOCKSTEP_Out[2109] = \<const0> ;
  assign LOCKSTEP_Out[2110] = \<const0> ;
  assign LOCKSTEP_Out[2111] = \<const0> ;
  assign LOCKSTEP_Out[2112] = \<const0> ;
  assign LOCKSTEP_Out[2113] = \<const0> ;
  assign LOCKSTEP_Out[2114] = \<const0> ;
  assign LOCKSTEP_Out[2115] = \<const0> ;
  assign LOCKSTEP_Out[2116] = \<const0> ;
  assign LOCKSTEP_Out[2117] = \<const0> ;
  assign LOCKSTEP_Out[2118] = \<const0> ;
  assign LOCKSTEP_Out[2119] = \<const0> ;
  assign LOCKSTEP_Out[2120] = \<const0> ;
  assign LOCKSTEP_Out[2121] = \<const0> ;
  assign LOCKSTEP_Out[2122] = \<const0> ;
  assign LOCKSTEP_Out[2123] = \<const0> ;
  assign LOCKSTEP_Out[2124] = \<const0> ;
  assign LOCKSTEP_Out[2125] = \<const0> ;
  assign LOCKSTEP_Out[2126] = \<const0> ;
  assign LOCKSTEP_Out[2127] = \<const0> ;
  assign LOCKSTEP_Out[2128] = \<const0> ;
  assign LOCKSTEP_Out[2129] = \<const0> ;
  assign LOCKSTEP_Out[2130] = \<const0> ;
  assign LOCKSTEP_Out[2131] = \<const0> ;
  assign LOCKSTEP_Out[2132] = \<const0> ;
  assign LOCKSTEP_Out[2133] = \<const0> ;
  assign LOCKSTEP_Out[2134] = \<const0> ;
  assign LOCKSTEP_Out[2135] = \<const0> ;
  assign LOCKSTEP_Out[2136] = \<const0> ;
  assign LOCKSTEP_Out[2137] = \<const0> ;
  assign LOCKSTEP_Out[2138] = \<const0> ;
  assign LOCKSTEP_Out[2139] = \<const0> ;
  assign LOCKSTEP_Out[2140] = \<const0> ;
  assign LOCKSTEP_Out[2141] = \<const0> ;
  assign LOCKSTEP_Out[2142] = \<const0> ;
  assign LOCKSTEP_Out[2143] = \<const0> ;
  assign LOCKSTEP_Out[2144] = \<const0> ;
  assign LOCKSTEP_Out[2145] = \<const0> ;
  assign LOCKSTEP_Out[2146] = \<const0> ;
  assign LOCKSTEP_Out[2147] = \<const0> ;
  assign LOCKSTEP_Out[2148] = \<const0> ;
  assign LOCKSTEP_Out[2149] = \<const0> ;
  assign LOCKSTEP_Out[2150] = \<const0> ;
  assign LOCKSTEP_Out[2151] = \<const0> ;
  assign LOCKSTEP_Out[2152] = \<const0> ;
  assign LOCKSTEP_Out[2153] = \<const0> ;
  assign LOCKSTEP_Out[2154] = \<const0> ;
  assign LOCKSTEP_Out[2155] = \<const0> ;
  assign LOCKSTEP_Out[2156] = \<const0> ;
  assign LOCKSTEP_Out[2157] = \<const0> ;
  assign LOCKSTEP_Out[2158] = \<const0> ;
  assign LOCKSTEP_Out[2159] = \<const0> ;
  assign LOCKSTEP_Out[2160] = \<const0> ;
  assign LOCKSTEP_Out[2161] = \<const0> ;
  assign LOCKSTEP_Out[2162] = \<const0> ;
  assign LOCKSTEP_Out[2163] = \<const0> ;
  assign LOCKSTEP_Out[2164] = \<const0> ;
  assign LOCKSTEP_Out[2165] = \<const0> ;
  assign LOCKSTEP_Out[2166] = \<const0> ;
  assign LOCKSTEP_Out[2167] = \<const0> ;
  assign LOCKSTEP_Out[2168] = \<const0> ;
  assign LOCKSTEP_Out[2169] = \<const0> ;
  assign LOCKSTEP_Out[2170] = \<const0> ;
  assign LOCKSTEP_Out[2171] = \<const0> ;
  assign LOCKSTEP_Out[2172] = \<const0> ;
  assign LOCKSTEP_Out[2173] = \<const0> ;
  assign LOCKSTEP_Out[2174] = \<const0> ;
  assign LOCKSTEP_Out[2175] = \<const0> ;
  assign LOCKSTEP_Out[2176] = \<const0> ;
  assign LOCKSTEP_Out[2177] = \<const0> ;
  assign LOCKSTEP_Out[2178] = \<const0> ;
  assign LOCKSTEP_Out[2179] = \<const0> ;
  assign LOCKSTEP_Out[2180] = \<const0> ;
  assign LOCKSTEP_Out[2181] = \<const0> ;
  assign LOCKSTEP_Out[2182] = \<const0> ;
  assign LOCKSTEP_Out[2183] = \<const0> ;
  assign LOCKSTEP_Out[2184] = \<const0> ;
  assign LOCKSTEP_Out[2185] = \<const0> ;
  assign LOCKSTEP_Out[2186] = \<const0> ;
  assign LOCKSTEP_Out[2187] = \<const0> ;
  assign LOCKSTEP_Out[2188] = \<const0> ;
  assign LOCKSTEP_Out[2189] = \<const0> ;
  assign LOCKSTEP_Out[2190] = \<const0> ;
  assign LOCKSTEP_Out[2191] = \<const0> ;
  assign LOCKSTEP_Out[2192] = \<const0> ;
  assign LOCKSTEP_Out[2193] = \<const0> ;
  assign LOCKSTEP_Out[2194] = \<const0> ;
  assign LOCKSTEP_Out[2195] = \<const0> ;
  assign LOCKSTEP_Out[2196] = \<const0> ;
  assign LOCKSTEP_Out[2197] = \<const0> ;
  assign LOCKSTEP_Out[2198] = \<const0> ;
  assign LOCKSTEP_Out[2199] = \<const0> ;
  assign LOCKSTEP_Out[2200] = \<const0> ;
  assign LOCKSTEP_Out[2201] = \<const0> ;
  assign LOCKSTEP_Out[2202] = \<const0> ;
  assign LOCKSTEP_Out[2203] = \<const0> ;
  assign LOCKSTEP_Out[2204] = \<const0> ;
  assign LOCKSTEP_Out[2205] = \<const0> ;
  assign LOCKSTEP_Out[2206] = \<const0> ;
  assign LOCKSTEP_Out[2207] = \<const0> ;
  assign LOCKSTEP_Out[2208] = \<const0> ;
  assign LOCKSTEP_Out[2209] = \<const0> ;
  assign LOCKSTEP_Out[2210] = \<const0> ;
  assign LOCKSTEP_Out[2211] = \<const0> ;
  assign LOCKSTEP_Out[2212] = \<const0> ;
  assign LOCKSTEP_Out[2213] = \<const0> ;
  assign LOCKSTEP_Out[2214] = \<const0> ;
  assign LOCKSTEP_Out[2215] = \<const0> ;
  assign LOCKSTEP_Out[2216] = \<const0> ;
  assign LOCKSTEP_Out[2217] = \<const0> ;
  assign LOCKSTEP_Out[2218] = \<const0> ;
  assign LOCKSTEP_Out[2219] = \<const0> ;
  assign LOCKSTEP_Out[2220] = \<const0> ;
  assign LOCKSTEP_Out[2221] = \<const0> ;
  assign LOCKSTEP_Out[2222] = \<const0> ;
  assign LOCKSTEP_Out[2223] = \<const0> ;
  assign LOCKSTEP_Out[2224] = \<const0> ;
  assign LOCKSTEP_Out[2225] = \<const0> ;
  assign LOCKSTEP_Out[2226] = \<const0> ;
  assign LOCKSTEP_Out[2227] = \<const0> ;
  assign LOCKSTEP_Out[2228] = \<const0> ;
  assign LOCKSTEP_Out[2229] = \<const0> ;
  assign LOCKSTEP_Out[2230] = \<const0> ;
  assign LOCKSTEP_Out[2231] = \<const0> ;
  assign LOCKSTEP_Out[2232] = \<const0> ;
  assign LOCKSTEP_Out[2233] = \<const0> ;
  assign LOCKSTEP_Out[2234] = \<const0> ;
  assign LOCKSTEP_Out[2235] = \<const0> ;
  assign LOCKSTEP_Out[2236] = \<const0> ;
  assign LOCKSTEP_Out[2237] = \<const0> ;
  assign LOCKSTEP_Out[2238] = \<const0> ;
  assign LOCKSTEP_Out[2239] = \<const0> ;
  assign LOCKSTEP_Out[2240] = \<const0> ;
  assign LOCKSTEP_Out[2241] = \<const0> ;
  assign LOCKSTEP_Out[2242] = \<const0> ;
  assign LOCKSTEP_Out[2243] = \<const0> ;
  assign LOCKSTEP_Out[2244] = \<const0> ;
  assign LOCKSTEP_Out[2245] = \<const0> ;
  assign LOCKSTEP_Out[2246] = \<const0> ;
  assign LOCKSTEP_Out[2247] = \<const0> ;
  assign LOCKSTEP_Out[2248] = \<const0> ;
  assign LOCKSTEP_Out[2249] = \<const0> ;
  assign LOCKSTEP_Out[2250] = \<const0> ;
  assign LOCKSTEP_Out[2251] = \<const0> ;
  assign LOCKSTEP_Out[2252] = \<const0> ;
  assign LOCKSTEP_Out[2253] = \<const0> ;
  assign LOCKSTEP_Out[2254] = \<const0> ;
  assign LOCKSTEP_Out[2255] = \<const0> ;
  assign LOCKSTEP_Out[2256] = \<const0> ;
  assign LOCKSTEP_Out[2257] = \<const0> ;
  assign LOCKSTEP_Out[2258] = \<const0> ;
  assign LOCKSTEP_Out[2259] = \<const0> ;
  assign LOCKSTEP_Out[2260] = \<const0> ;
  assign LOCKSTEP_Out[2261] = \<const0> ;
  assign LOCKSTEP_Out[2262] = \<const0> ;
  assign LOCKSTEP_Out[2263] = \<const0> ;
  assign LOCKSTEP_Out[2264] = \<const0> ;
  assign LOCKSTEP_Out[2265] = \<const0> ;
  assign LOCKSTEP_Out[2266] = \<const0> ;
  assign LOCKSTEP_Out[2267] = \<const0> ;
  assign LOCKSTEP_Out[2268] = \<const0> ;
  assign LOCKSTEP_Out[2269] = \<const0> ;
  assign LOCKSTEP_Out[2270] = \<const0> ;
  assign LOCKSTEP_Out[2271] = \<const0> ;
  assign LOCKSTEP_Out[2272] = \<const0> ;
  assign LOCKSTEP_Out[2273] = \<const0> ;
  assign LOCKSTEP_Out[2274] = \<const0> ;
  assign LOCKSTEP_Out[2275] = \<const0> ;
  assign LOCKSTEP_Out[2276] = \<const0> ;
  assign LOCKSTEP_Out[2277] = \<const0> ;
  assign LOCKSTEP_Out[2278] = \<const0> ;
  assign LOCKSTEP_Out[2279] = \<const0> ;
  assign LOCKSTEP_Out[2280] = \<const0> ;
  assign LOCKSTEP_Out[2281] = \<const0> ;
  assign LOCKSTEP_Out[2282] = \<const0> ;
  assign LOCKSTEP_Out[2283] = \<const0> ;
  assign LOCKSTEP_Out[2284] = \<const0> ;
  assign LOCKSTEP_Out[2285] = \<const0> ;
  assign LOCKSTEP_Out[2286] = \<const0> ;
  assign LOCKSTEP_Out[2287] = \<const0> ;
  assign LOCKSTEP_Out[2288] = \<const0> ;
  assign LOCKSTEP_Out[2289] = \<const0> ;
  assign LOCKSTEP_Out[2290] = \<const0> ;
  assign LOCKSTEP_Out[2291] = \<const0> ;
  assign LOCKSTEP_Out[2292] = \<const0> ;
  assign LOCKSTEP_Out[2293] = \<const0> ;
  assign LOCKSTEP_Out[2294] = \<const0> ;
  assign LOCKSTEP_Out[2295] = \<const0> ;
  assign LOCKSTEP_Out[2296] = \<const0> ;
  assign LOCKSTEP_Out[2297] = \<const0> ;
  assign LOCKSTEP_Out[2298] = \<const0> ;
  assign LOCKSTEP_Out[2299] = \<const0> ;
  assign LOCKSTEP_Out[2300] = \<const0> ;
  assign LOCKSTEP_Out[2301] = \<const0> ;
  assign LOCKSTEP_Out[2302] = \<const0> ;
  assign LOCKSTEP_Out[2303] = \<const0> ;
  assign LOCKSTEP_Out[2304] = \<const0> ;
  assign LOCKSTEP_Out[2305] = \<const0> ;
  assign LOCKSTEP_Out[2306] = \<const0> ;
  assign LOCKSTEP_Out[2307] = \<const0> ;
  assign LOCKSTEP_Out[2308] = \<const0> ;
  assign LOCKSTEP_Out[2309] = \<const0> ;
  assign LOCKSTEP_Out[2310] = \<const0> ;
  assign LOCKSTEP_Out[2311] = \<const0> ;
  assign LOCKSTEP_Out[2312] = \<const0> ;
  assign LOCKSTEP_Out[2313] = \<const0> ;
  assign LOCKSTEP_Out[2314] = \<const0> ;
  assign LOCKSTEP_Out[2315] = \<const0> ;
  assign LOCKSTEP_Out[2316] = \<const0> ;
  assign LOCKSTEP_Out[2317] = \<const0> ;
  assign LOCKSTEP_Out[2318] = \<const0> ;
  assign LOCKSTEP_Out[2319] = \<const0> ;
  assign LOCKSTEP_Out[2320] = \<const0> ;
  assign LOCKSTEP_Out[2321] = \<const0> ;
  assign LOCKSTEP_Out[2322] = \<const0> ;
  assign LOCKSTEP_Out[2323] = \<const0> ;
  assign LOCKSTEP_Out[2324] = \<const0> ;
  assign LOCKSTEP_Out[2325] = \<const0> ;
  assign LOCKSTEP_Out[2326] = \<const0> ;
  assign LOCKSTEP_Out[2327] = \<const0> ;
  assign LOCKSTEP_Out[2328] = \<const0> ;
  assign LOCKSTEP_Out[2329] = \<const0> ;
  assign LOCKSTEP_Out[2330] = \<const0> ;
  assign LOCKSTEP_Out[2331] = \<const0> ;
  assign LOCKSTEP_Out[2332] = \<const0> ;
  assign LOCKSTEP_Out[2333] = \<const0> ;
  assign LOCKSTEP_Out[2334] = \<const0> ;
  assign LOCKSTEP_Out[2335] = \<const0> ;
  assign LOCKSTEP_Out[2336] = \<const0> ;
  assign LOCKSTEP_Out[2337] = \<const0> ;
  assign LOCKSTEP_Out[2338] = \<const0> ;
  assign LOCKSTEP_Out[2339] = \<const0> ;
  assign LOCKSTEP_Out[2340] = \<const0> ;
  assign LOCKSTEP_Out[2341] = \<const0> ;
  assign LOCKSTEP_Out[2342] = \<const0> ;
  assign LOCKSTEP_Out[2343] = \<const0> ;
  assign LOCKSTEP_Out[2344] = \<const0> ;
  assign LOCKSTEP_Out[2345] = \<const0> ;
  assign LOCKSTEP_Out[2346] = \<const0> ;
  assign LOCKSTEP_Out[2347] = \<const0> ;
  assign LOCKSTEP_Out[2348] = \<const0> ;
  assign LOCKSTEP_Out[2349] = \<const0> ;
  assign LOCKSTEP_Out[2350] = \<const0> ;
  assign LOCKSTEP_Out[2351] = \<const0> ;
  assign LOCKSTEP_Out[2352] = \<const0> ;
  assign LOCKSTEP_Out[2353] = \<const0> ;
  assign LOCKSTEP_Out[2354] = \<const0> ;
  assign LOCKSTEP_Out[2355] = \<const0> ;
  assign LOCKSTEP_Out[2356] = \<const0> ;
  assign LOCKSTEP_Out[2357] = \<const0> ;
  assign LOCKSTEP_Out[2358] = \<const0> ;
  assign LOCKSTEP_Out[2359] = \<const0> ;
  assign LOCKSTEP_Out[2360] = \<const0> ;
  assign LOCKSTEP_Out[2361] = \<const0> ;
  assign LOCKSTEP_Out[2362] = \<const0> ;
  assign LOCKSTEP_Out[2363] = \<const0> ;
  assign LOCKSTEP_Out[2364] = \<const0> ;
  assign LOCKSTEP_Out[2365] = \<const0> ;
  assign LOCKSTEP_Out[2366] = \<const0> ;
  assign LOCKSTEP_Out[2367] = \<const0> ;
  assign LOCKSTEP_Out[2368] = \<const0> ;
  assign LOCKSTEP_Out[2369] = \<const0> ;
  assign LOCKSTEP_Out[2370] = \<const0> ;
  assign LOCKSTEP_Out[2371] = \<const0> ;
  assign LOCKSTEP_Out[2372] = \<const0> ;
  assign LOCKSTEP_Out[2373] = \<const0> ;
  assign LOCKSTEP_Out[2374] = \<const0> ;
  assign LOCKSTEP_Out[2375] = \<const0> ;
  assign LOCKSTEP_Out[2376] = \<const0> ;
  assign LOCKSTEP_Out[2377] = \<const0> ;
  assign LOCKSTEP_Out[2378] = \<const0> ;
  assign LOCKSTEP_Out[2379] = \<const0> ;
  assign LOCKSTEP_Out[2380] = \<const0> ;
  assign LOCKSTEP_Out[2381] = \<const0> ;
  assign LOCKSTEP_Out[2382] = \<const0> ;
  assign LOCKSTEP_Out[2383] = \<const0> ;
  assign LOCKSTEP_Out[2384] = \<const0> ;
  assign LOCKSTEP_Out[2385] = \<const0> ;
  assign LOCKSTEP_Out[2386] = \<const0> ;
  assign LOCKSTEP_Out[2387] = \<const0> ;
  assign LOCKSTEP_Out[2388] = \<const0> ;
  assign LOCKSTEP_Out[2389] = \<const0> ;
  assign LOCKSTEP_Out[2390] = \<const0> ;
  assign LOCKSTEP_Out[2391] = \<const0> ;
  assign LOCKSTEP_Out[2392] = \<const0> ;
  assign LOCKSTEP_Out[2393] = \<const0> ;
  assign LOCKSTEP_Out[2394] = \<const0> ;
  assign LOCKSTEP_Out[2395] = \<const0> ;
  assign LOCKSTEP_Out[2396] = \<const0> ;
  assign LOCKSTEP_Out[2397] = \<const0> ;
  assign LOCKSTEP_Out[2398] = \<const0> ;
  assign LOCKSTEP_Out[2399] = \<const0> ;
  assign LOCKSTEP_Out[2400] = \<const0> ;
  assign LOCKSTEP_Out[2401] = \<const0> ;
  assign LOCKSTEP_Out[2402] = \<const0> ;
  assign LOCKSTEP_Out[2403] = \<const0> ;
  assign LOCKSTEP_Out[2404] = \<const0> ;
  assign LOCKSTEP_Out[2405] = \<const0> ;
  assign LOCKSTEP_Out[2406] = \<const0> ;
  assign LOCKSTEP_Out[2407] = \<const0> ;
  assign LOCKSTEP_Out[2408] = \<const0> ;
  assign LOCKSTEP_Out[2409] = \<const0> ;
  assign LOCKSTEP_Out[2410] = \<const0> ;
  assign LOCKSTEP_Out[2411] = \<const0> ;
  assign LOCKSTEP_Out[2412] = \<const0> ;
  assign LOCKSTEP_Out[2413] = \<const0> ;
  assign LOCKSTEP_Out[2414] = \<const0> ;
  assign LOCKSTEP_Out[2415] = \<const0> ;
  assign LOCKSTEP_Out[2416] = \<const0> ;
  assign LOCKSTEP_Out[2417] = \<const0> ;
  assign LOCKSTEP_Out[2418] = \<const0> ;
  assign LOCKSTEP_Out[2419] = \<const0> ;
  assign LOCKSTEP_Out[2420] = \<const0> ;
  assign LOCKSTEP_Out[2421] = \<const0> ;
  assign LOCKSTEP_Out[2422] = \<const0> ;
  assign LOCKSTEP_Out[2423] = \<const0> ;
  assign LOCKSTEP_Out[2424] = \<const0> ;
  assign LOCKSTEP_Out[2425] = \<const0> ;
  assign LOCKSTEP_Out[2426] = \<const0> ;
  assign LOCKSTEP_Out[2427] = \<const0> ;
  assign LOCKSTEP_Out[2428] = \<const0> ;
  assign LOCKSTEP_Out[2429] = \<const0> ;
  assign LOCKSTEP_Out[2430] = \<const0> ;
  assign LOCKSTEP_Out[2431] = \<const0> ;
  assign LOCKSTEP_Out[2432] = \<const0> ;
  assign LOCKSTEP_Out[2433] = \<const0> ;
  assign LOCKSTEP_Out[2434] = \<const0> ;
  assign LOCKSTEP_Out[2435] = \<const0> ;
  assign LOCKSTEP_Out[2436] = \<const0> ;
  assign LOCKSTEP_Out[2437] = \<const0> ;
  assign LOCKSTEP_Out[2438] = \<const0> ;
  assign LOCKSTEP_Out[2439] = \<const0> ;
  assign LOCKSTEP_Out[2440] = \<const0> ;
  assign LOCKSTEP_Out[2441] = \<const0> ;
  assign LOCKSTEP_Out[2442] = \<const0> ;
  assign LOCKSTEP_Out[2443] = \<const0> ;
  assign LOCKSTEP_Out[2444] = \<const0> ;
  assign LOCKSTEP_Out[2445] = \<const0> ;
  assign LOCKSTEP_Out[2446] = \<const0> ;
  assign LOCKSTEP_Out[2447] = \<const0> ;
  assign LOCKSTEP_Out[2448] = \<const0> ;
  assign LOCKSTEP_Out[2449] = \<const0> ;
  assign LOCKSTEP_Out[2450] = \<const0> ;
  assign LOCKSTEP_Out[2451] = \<const0> ;
  assign LOCKSTEP_Out[2452] = \<const0> ;
  assign LOCKSTEP_Out[2453] = \<const0> ;
  assign LOCKSTEP_Out[2454] = \<const0> ;
  assign LOCKSTEP_Out[2455] = \<const0> ;
  assign LOCKSTEP_Out[2456] = \<const0> ;
  assign LOCKSTEP_Out[2457] = \<const0> ;
  assign LOCKSTEP_Out[2458] = \<const0> ;
  assign LOCKSTEP_Out[2459] = \<const0> ;
  assign LOCKSTEP_Out[2460] = \<const0> ;
  assign LOCKSTEP_Out[2461] = \<const0> ;
  assign LOCKSTEP_Out[2462] = \<const0> ;
  assign LOCKSTEP_Out[2463] = \<const0> ;
  assign LOCKSTEP_Out[2464] = \<const0> ;
  assign LOCKSTEP_Out[2465] = \<const0> ;
  assign LOCKSTEP_Out[2466] = \<const0> ;
  assign LOCKSTEP_Out[2467] = \<const0> ;
  assign LOCKSTEP_Out[2468] = \<const0> ;
  assign LOCKSTEP_Out[2469] = \<const0> ;
  assign LOCKSTEP_Out[2470] = \<const0> ;
  assign LOCKSTEP_Out[2471] = \<const0> ;
  assign LOCKSTEP_Out[2472] = \<const0> ;
  assign LOCKSTEP_Out[2473] = \<const0> ;
  assign LOCKSTEP_Out[2474] = \<const0> ;
  assign LOCKSTEP_Out[2475] = \<const0> ;
  assign LOCKSTEP_Out[2476] = \<const0> ;
  assign LOCKSTEP_Out[2477] = \<const0> ;
  assign LOCKSTEP_Out[2478] = \<const0> ;
  assign LOCKSTEP_Out[2479] = \<const0> ;
  assign LOCKSTEP_Out[2480] = \<const0> ;
  assign LOCKSTEP_Out[2481] = \<const0> ;
  assign LOCKSTEP_Out[2482] = \<const0> ;
  assign LOCKSTEP_Out[2483] = \<const0> ;
  assign LOCKSTEP_Out[2484] = \<const0> ;
  assign LOCKSTEP_Out[2485] = \<const0> ;
  assign LOCKSTEP_Out[2486] = \<const0> ;
  assign LOCKSTEP_Out[2487] = \<const0> ;
  assign LOCKSTEP_Out[2488] = \<const0> ;
  assign LOCKSTEP_Out[2489] = \<const0> ;
  assign LOCKSTEP_Out[2490] = \<const0> ;
  assign LOCKSTEP_Out[2491] = \<const0> ;
  assign LOCKSTEP_Out[2492] = \<const0> ;
  assign LOCKSTEP_Out[2493] = \<const0> ;
  assign LOCKSTEP_Out[2494] = \<const0> ;
  assign LOCKSTEP_Out[2495] = \<const0> ;
  assign LOCKSTEP_Out[2496] = \<const0> ;
  assign LOCKSTEP_Out[2497] = \<const0> ;
  assign LOCKSTEP_Out[2498] = \<const0> ;
  assign LOCKSTEP_Out[2499] = \<const0> ;
  assign LOCKSTEP_Out[2500] = \<const0> ;
  assign LOCKSTEP_Out[2501] = \<const0> ;
  assign LOCKSTEP_Out[2502] = \<const0> ;
  assign LOCKSTEP_Out[2503] = \<const0> ;
  assign LOCKSTEP_Out[2504] = \<const0> ;
  assign LOCKSTEP_Out[2505] = \<const0> ;
  assign LOCKSTEP_Out[2506] = \<const0> ;
  assign LOCKSTEP_Out[2507] = \<const0> ;
  assign LOCKSTEP_Out[2508] = \<const0> ;
  assign LOCKSTEP_Out[2509] = \<const0> ;
  assign LOCKSTEP_Out[2510] = \<const0> ;
  assign LOCKSTEP_Out[2511] = \<const0> ;
  assign LOCKSTEP_Out[2512] = \<const0> ;
  assign LOCKSTEP_Out[2513] = \<const0> ;
  assign LOCKSTEP_Out[2514] = \<const0> ;
  assign LOCKSTEP_Out[2515] = \<const0> ;
  assign LOCKSTEP_Out[2516] = \<const0> ;
  assign LOCKSTEP_Out[2517] = \<const0> ;
  assign LOCKSTEP_Out[2518] = \<const0> ;
  assign LOCKSTEP_Out[2519] = \<const0> ;
  assign LOCKSTEP_Out[2520] = \<const0> ;
  assign LOCKSTEP_Out[2521] = \<const0> ;
  assign LOCKSTEP_Out[2522] = \<const0> ;
  assign LOCKSTEP_Out[2523] = \<const0> ;
  assign LOCKSTEP_Out[2524] = \<const0> ;
  assign LOCKSTEP_Out[2525] = \<const0> ;
  assign LOCKSTEP_Out[2526] = \<const0> ;
  assign LOCKSTEP_Out[2527] = \<const0> ;
  assign LOCKSTEP_Out[2528] = \<const0> ;
  assign LOCKSTEP_Out[2529] = \<const0> ;
  assign LOCKSTEP_Out[2530] = \<const0> ;
  assign LOCKSTEP_Out[2531] = \<const0> ;
  assign LOCKSTEP_Out[2532] = \<const0> ;
  assign LOCKSTEP_Out[2533] = \<const0> ;
  assign LOCKSTEP_Out[2534] = \<const0> ;
  assign LOCKSTEP_Out[2535] = \<const0> ;
  assign LOCKSTEP_Out[2536] = \<const0> ;
  assign LOCKSTEP_Out[2537] = \<const0> ;
  assign LOCKSTEP_Out[2538] = \<const0> ;
  assign LOCKSTEP_Out[2539] = \<const0> ;
  assign LOCKSTEP_Out[2540] = \<const0> ;
  assign LOCKSTEP_Out[2541] = \<const0> ;
  assign LOCKSTEP_Out[2542] = \<const0> ;
  assign LOCKSTEP_Out[2543] = \<const0> ;
  assign LOCKSTEP_Out[2544] = \<const0> ;
  assign LOCKSTEP_Out[2545] = \<const0> ;
  assign LOCKSTEP_Out[2546] = \<const0> ;
  assign LOCKSTEP_Out[2547] = \<const0> ;
  assign LOCKSTEP_Out[2548] = \<const0> ;
  assign LOCKSTEP_Out[2549] = \<const0> ;
  assign LOCKSTEP_Out[2550] = \<const0> ;
  assign LOCKSTEP_Out[2551] = \<const0> ;
  assign LOCKSTEP_Out[2552] = \<const0> ;
  assign LOCKSTEP_Out[2553] = \<const0> ;
  assign LOCKSTEP_Out[2554] = \<const0> ;
  assign LOCKSTEP_Out[2555] = \<const0> ;
  assign LOCKSTEP_Out[2556] = \<const0> ;
  assign LOCKSTEP_Out[2557] = \<const0> ;
  assign LOCKSTEP_Out[2558] = \<const0> ;
  assign LOCKSTEP_Out[2559] = \<const0> ;
  assign LOCKSTEP_Out[2560] = \<const0> ;
  assign LOCKSTEP_Out[2561] = \<const0> ;
  assign LOCKSTEP_Out[2562] = \<const0> ;
  assign LOCKSTEP_Out[2563] = \<const0> ;
  assign LOCKSTEP_Out[2564] = \<const0> ;
  assign LOCKSTEP_Out[2565] = \<const0> ;
  assign LOCKSTEP_Out[2566] = \<const0> ;
  assign LOCKSTEP_Out[2567] = \<const0> ;
  assign LOCKSTEP_Out[2568] = \<const0> ;
  assign LOCKSTEP_Out[2569] = \<const0> ;
  assign LOCKSTEP_Out[2570] = \<const0> ;
  assign LOCKSTEP_Out[2571] = \<const0> ;
  assign LOCKSTEP_Out[2572] = \<const0> ;
  assign LOCKSTEP_Out[2573] = \<const0> ;
  assign LOCKSTEP_Out[2574] = \<const0> ;
  assign LOCKSTEP_Out[2575] = \<const0> ;
  assign LOCKSTEP_Out[2576] = \<const0> ;
  assign LOCKSTEP_Out[2577] = \<const0> ;
  assign LOCKSTEP_Out[2578] = \<const0> ;
  assign LOCKSTEP_Out[2579] = \<const0> ;
  assign LOCKSTEP_Out[2580] = \<const0> ;
  assign LOCKSTEP_Out[2581] = \<const0> ;
  assign LOCKSTEP_Out[2582] = \<const0> ;
  assign LOCKSTEP_Out[2583] = \<const0> ;
  assign LOCKSTEP_Out[2584] = \<const0> ;
  assign LOCKSTEP_Out[2585] = \<const0> ;
  assign LOCKSTEP_Out[2586] = \<const0> ;
  assign LOCKSTEP_Out[2587] = \<const0> ;
  assign LOCKSTEP_Out[2588] = \<const0> ;
  assign LOCKSTEP_Out[2589] = \<const0> ;
  assign LOCKSTEP_Out[2590] = \<const0> ;
  assign LOCKSTEP_Out[2591] = \<const0> ;
  assign LOCKSTEP_Out[2592] = \<const0> ;
  assign LOCKSTEP_Out[2593] = \<const0> ;
  assign LOCKSTEP_Out[2594] = \<const0> ;
  assign LOCKSTEP_Out[2595] = \<const0> ;
  assign LOCKSTEP_Out[2596] = \<const0> ;
  assign LOCKSTEP_Out[2597] = \<const0> ;
  assign LOCKSTEP_Out[2598] = \<const0> ;
  assign LOCKSTEP_Out[2599] = \<const0> ;
  assign LOCKSTEP_Out[2600] = \<const0> ;
  assign LOCKSTEP_Out[2601] = \<const0> ;
  assign LOCKSTEP_Out[2602] = \<const0> ;
  assign LOCKSTEP_Out[2603] = \<const0> ;
  assign LOCKSTEP_Out[2604] = \<const0> ;
  assign LOCKSTEP_Out[2605] = \<const0> ;
  assign LOCKSTEP_Out[2606] = \<const0> ;
  assign LOCKSTEP_Out[2607] = \<const0> ;
  assign LOCKSTEP_Out[2608] = \<const0> ;
  assign LOCKSTEP_Out[2609] = \<const0> ;
  assign LOCKSTEP_Out[2610] = \<const0> ;
  assign LOCKSTEP_Out[2611] = \<const0> ;
  assign LOCKSTEP_Out[2612] = \<const0> ;
  assign LOCKSTEP_Out[2613] = \<const0> ;
  assign LOCKSTEP_Out[2614] = \<const0> ;
  assign LOCKSTEP_Out[2615] = \<const0> ;
  assign LOCKSTEP_Out[2616] = \<const0> ;
  assign LOCKSTEP_Out[2617] = \<const0> ;
  assign LOCKSTEP_Out[2618] = \<const0> ;
  assign LOCKSTEP_Out[2619] = \<const0> ;
  assign LOCKSTEP_Out[2620] = \<const0> ;
  assign LOCKSTEP_Out[2621] = \<const0> ;
  assign LOCKSTEP_Out[2622] = \<const0> ;
  assign LOCKSTEP_Out[2623] = \<const0> ;
  assign LOCKSTEP_Out[2624] = \<const0> ;
  assign LOCKSTEP_Out[2625] = \<const0> ;
  assign LOCKSTEP_Out[2626] = \<const0> ;
  assign LOCKSTEP_Out[2627] = \<const0> ;
  assign LOCKSTEP_Out[2628] = \<const0> ;
  assign LOCKSTEP_Out[2629] = \<const0> ;
  assign LOCKSTEP_Out[2630] = \<const0> ;
  assign LOCKSTEP_Out[2631] = \<const0> ;
  assign LOCKSTEP_Out[2632] = \<const0> ;
  assign LOCKSTEP_Out[2633] = \<const0> ;
  assign LOCKSTEP_Out[2634] = \<const0> ;
  assign LOCKSTEP_Out[2635] = \<const0> ;
  assign LOCKSTEP_Out[2636] = \<const0> ;
  assign LOCKSTEP_Out[2637] = \<const0> ;
  assign LOCKSTEP_Out[2638] = \<const0> ;
  assign LOCKSTEP_Out[2639] = \<const0> ;
  assign LOCKSTEP_Out[2640] = \<const0> ;
  assign LOCKSTEP_Out[2641] = \<const0> ;
  assign LOCKSTEP_Out[2642] = \<const0> ;
  assign LOCKSTEP_Out[2643] = \<const0> ;
  assign LOCKSTEP_Out[2644] = \<const0> ;
  assign LOCKSTEP_Out[2645] = \<const0> ;
  assign LOCKSTEP_Out[2646] = \<const0> ;
  assign LOCKSTEP_Out[2647] = \<const0> ;
  assign LOCKSTEP_Out[2648] = \<const0> ;
  assign LOCKSTEP_Out[2649] = \<const0> ;
  assign LOCKSTEP_Out[2650] = \<const0> ;
  assign LOCKSTEP_Out[2651] = \<const0> ;
  assign LOCKSTEP_Out[2652] = \<const0> ;
  assign LOCKSTEP_Out[2653] = \<const0> ;
  assign LOCKSTEP_Out[2654] = \<const0> ;
  assign LOCKSTEP_Out[2655] = \<const0> ;
  assign LOCKSTEP_Out[2656] = \<const0> ;
  assign LOCKSTEP_Out[2657] = \<const0> ;
  assign LOCKSTEP_Out[2658] = \<const0> ;
  assign LOCKSTEP_Out[2659] = \<const0> ;
  assign LOCKSTEP_Out[2660] = \<const0> ;
  assign LOCKSTEP_Out[2661] = \<const0> ;
  assign LOCKSTEP_Out[2662] = \<const0> ;
  assign LOCKSTEP_Out[2663] = \<const0> ;
  assign LOCKSTEP_Out[2664] = \<const0> ;
  assign LOCKSTEP_Out[2665] = \<const0> ;
  assign LOCKSTEP_Out[2666] = \<const0> ;
  assign LOCKSTEP_Out[2667] = \<const0> ;
  assign LOCKSTEP_Out[2668] = \<const0> ;
  assign LOCKSTEP_Out[2669] = \<const0> ;
  assign LOCKSTEP_Out[2670] = \<const0> ;
  assign LOCKSTEP_Out[2671] = \<const0> ;
  assign LOCKSTEP_Out[2672] = \<const0> ;
  assign LOCKSTEP_Out[2673] = \<const0> ;
  assign LOCKSTEP_Out[2674] = \<const0> ;
  assign LOCKSTEP_Out[2675] = \<const0> ;
  assign LOCKSTEP_Out[2676] = \<const0> ;
  assign LOCKSTEP_Out[2677] = \<const0> ;
  assign LOCKSTEP_Out[2678] = \<const0> ;
  assign LOCKSTEP_Out[2679] = \<const0> ;
  assign LOCKSTEP_Out[2680] = \<const0> ;
  assign LOCKSTEP_Out[2681] = \<const0> ;
  assign LOCKSTEP_Out[2682] = \<const0> ;
  assign LOCKSTEP_Out[2683] = \<const0> ;
  assign LOCKSTEP_Out[2684] = \<const0> ;
  assign LOCKSTEP_Out[2685] = \<const0> ;
  assign LOCKSTEP_Out[2686] = \<const0> ;
  assign LOCKSTEP_Out[2687] = \<const0> ;
  assign LOCKSTEP_Out[2688] = \<const0> ;
  assign LOCKSTEP_Out[2689] = \<const0> ;
  assign LOCKSTEP_Out[2690] = \<const0> ;
  assign LOCKSTEP_Out[2691] = \<const0> ;
  assign LOCKSTEP_Out[2692] = \<const0> ;
  assign LOCKSTEP_Out[2693] = \<const0> ;
  assign LOCKSTEP_Out[2694] = \<const0> ;
  assign LOCKSTEP_Out[2695] = \<const0> ;
  assign LOCKSTEP_Out[2696] = \<const0> ;
  assign LOCKSTEP_Out[2697] = \<const0> ;
  assign LOCKSTEP_Out[2698] = \<const0> ;
  assign LOCKSTEP_Out[2699] = \<const0> ;
  assign LOCKSTEP_Out[2700] = \<const0> ;
  assign LOCKSTEP_Out[2701] = \<const0> ;
  assign LOCKSTEP_Out[2702] = \<const0> ;
  assign LOCKSTEP_Out[2703] = \<const0> ;
  assign LOCKSTEP_Out[2704] = \<const0> ;
  assign LOCKSTEP_Out[2705] = \<const0> ;
  assign LOCKSTEP_Out[2706] = \<const0> ;
  assign LOCKSTEP_Out[2707] = \<const0> ;
  assign LOCKSTEP_Out[2708] = \<const0> ;
  assign LOCKSTEP_Out[2709] = \<const0> ;
  assign LOCKSTEP_Out[2710] = \<const0> ;
  assign LOCKSTEP_Out[2711] = \<const0> ;
  assign LOCKSTEP_Out[2712] = \<const0> ;
  assign LOCKSTEP_Out[2713] = \<const0> ;
  assign LOCKSTEP_Out[2714] = \<const0> ;
  assign LOCKSTEP_Out[2715] = \<const0> ;
  assign LOCKSTEP_Out[2716] = \<const0> ;
  assign LOCKSTEP_Out[2717] = \<const0> ;
  assign LOCKSTEP_Out[2718] = \<const0> ;
  assign LOCKSTEP_Out[2719] = \<const0> ;
  assign LOCKSTEP_Out[2720] = \<const0> ;
  assign LOCKSTEP_Out[2721] = \<const0> ;
  assign LOCKSTEP_Out[2722] = \<const0> ;
  assign LOCKSTEP_Out[2723] = \<const0> ;
  assign LOCKSTEP_Out[2724] = \<const0> ;
  assign LOCKSTEP_Out[2725] = \<const0> ;
  assign LOCKSTEP_Out[2726] = \<const0> ;
  assign LOCKSTEP_Out[2727] = \<const0> ;
  assign LOCKSTEP_Out[2728] = \<const0> ;
  assign LOCKSTEP_Out[2729] = \<const0> ;
  assign LOCKSTEP_Out[2730] = \<const0> ;
  assign LOCKSTEP_Out[2731] = \<const0> ;
  assign LOCKSTEP_Out[2732] = \<const0> ;
  assign LOCKSTEP_Out[2733] = \<const0> ;
  assign LOCKSTEP_Out[2734] = \<const0> ;
  assign LOCKSTEP_Out[2735] = \<const0> ;
  assign LOCKSTEP_Out[2736] = \<const0> ;
  assign LOCKSTEP_Out[2737] = \<const0> ;
  assign LOCKSTEP_Out[2738] = \<const0> ;
  assign LOCKSTEP_Out[2739] = \<const0> ;
  assign LOCKSTEP_Out[2740] = \<const0> ;
  assign LOCKSTEP_Out[2741] = \<const0> ;
  assign LOCKSTEP_Out[2742] = \<const0> ;
  assign LOCKSTEP_Out[2743] = \<const0> ;
  assign LOCKSTEP_Out[2744] = \<const0> ;
  assign LOCKSTEP_Out[2745] = \<const0> ;
  assign LOCKSTEP_Out[2746] = \<const0> ;
  assign LOCKSTEP_Out[2747] = \<const0> ;
  assign LOCKSTEP_Out[2748] = \<const0> ;
  assign LOCKSTEP_Out[2749] = \<const0> ;
  assign LOCKSTEP_Out[2750] = \<const0> ;
  assign LOCKSTEP_Out[2751] = \<const0> ;
  assign LOCKSTEP_Out[2752] = \<const0> ;
  assign LOCKSTEP_Out[2753] = \<const0> ;
  assign LOCKSTEP_Out[2754] = \<const0> ;
  assign LOCKSTEP_Out[2755] = \<const0> ;
  assign LOCKSTEP_Out[2756] = \<const0> ;
  assign LOCKSTEP_Out[2757] = \<const0> ;
  assign LOCKSTEP_Out[2758] = \<const0> ;
  assign LOCKSTEP_Out[2759] = \<const0> ;
  assign LOCKSTEP_Out[2760] = \<const0> ;
  assign LOCKSTEP_Out[2761] = \<const0> ;
  assign LOCKSTEP_Out[2762] = \<const0> ;
  assign LOCKSTEP_Out[2763] = \<const0> ;
  assign LOCKSTEP_Out[2764] = \<const0> ;
  assign LOCKSTEP_Out[2765] = \<const0> ;
  assign LOCKSTEP_Out[2766] = \<const0> ;
  assign LOCKSTEP_Out[2767] = \<const0> ;
  assign LOCKSTEP_Out[2768] = \<const0> ;
  assign LOCKSTEP_Out[2769] = \<const0> ;
  assign LOCKSTEP_Out[2770] = \<const0> ;
  assign LOCKSTEP_Out[2771] = \<const0> ;
  assign LOCKSTEP_Out[2772] = \<const0> ;
  assign LOCKSTEP_Out[2773] = \<const0> ;
  assign LOCKSTEP_Out[2774] = \<const0> ;
  assign LOCKSTEP_Out[2775] = \<const0> ;
  assign LOCKSTEP_Out[2776] = \<const0> ;
  assign LOCKSTEP_Out[2777] = \<const0> ;
  assign LOCKSTEP_Out[2778] = \<const0> ;
  assign LOCKSTEP_Out[2779] = \<const0> ;
  assign LOCKSTEP_Out[2780] = \<const0> ;
  assign LOCKSTEP_Out[2781] = \<const0> ;
  assign LOCKSTEP_Out[2782] = \<const0> ;
  assign LOCKSTEP_Out[2783] = \<const0> ;
  assign LOCKSTEP_Out[2784] = \<const0> ;
  assign LOCKSTEP_Out[2785] = \<const0> ;
  assign LOCKSTEP_Out[2786] = \<const0> ;
  assign LOCKSTEP_Out[2787] = \<const0> ;
  assign LOCKSTEP_Out[2788] = \<const0> ;
  assign LOCKSTEP_Out[2789] = \<const0> ;
  assign LOCKSTEP_Out[2790] = \<const0> ;
  assign LOCKSTEP_Out[2791] = \<const0> ;
  assign LOCKSTEP_Out[2792] = \<const0> ;
  assign LOCKSTEP_Out[2793] = \<const0> ;
  assign LOCKSTEP_Out[2794] = \<const0> ;
  assign LOCKSTEP_Out[2795] = \<const0> ;
  assign LOCKSTEP_Out[2796] = \<const0> ;
  assign LOCKSTEP_Out[2797] = \<const0> ;
  assign LOCKSTEP_Out[2798] = \<const0> ;
  assign LOCKSTEP_Out[2799] = \<const0> ;
  assign LOCKSTEP_Out[2800] = \<const0> ;
  assign LOCKSTEP_Out[2801] = \<const0> ;
  assign LOCKSTEP_Out[2802] = \<const0> ;
  assign LOCKSTEP_Out[2803] = \<const0> ;
  assign LOCKSTEP_Out[2804] = \<const0> ;
  assign LOCKSTEP_Out[2805] = \<const0> ;
  assign LOCKSTEP_Out[2806] = \<const0> ;
  assign LOCKSTEP_Out[2807] = \<const0> ;
  assign LOCKSTEP_Out[2808] = \<const0> ;
  assign LOCKSTEP_Out[2809] = \<const0> ;
  assign LOCKSTEP_Out[2810] = \<const0> ;
  assign LOCKSTEP_Out[2811] = \<const0> ;
  assign LOCKSTEP_Out[2812] = \<const0> ;
  assign LOCKSTEP_Out[2813] = \<const0> ;
  assign LOCKSTEP_Out[2814] = \<const0> ;
  assign LOCKSTEP_Out[2815] = \<const0> ;
  assign LOCKSTEP_Out[2816] = \<const0> ;
  assign LOCKSTEP_Out[2817] = \<const0> ;
  assign LOCKSTEP_Out[2818] = \<const0> ;
  assign LOCKSTEP_Out[2819] = \<const0> ;
  assign LOCKSTEP_Out[2820] = \<const0> ;
  assign LOCKSTEP_Out[2821] = \<const0> ;
  assign LOCKSTEP_Out[2822] = \<const0> ;
  assign LOCKSTEP_Out[2823] = \<const0> ;
  assign LOCKSTEP_Out[2824] = \<const0> ;
  assign LOCKSTEP_Out[2825] = \<const0> ;
  assign LOCKSTEP_Out[2826] = \<const0> ;
  assign LOCKSTEP_Out[2827] = \<const0> ;
  assign LOCKSTEP_Out[2828] = \<const0> ;
  assign LOCKSTEP_Out[2829] = \<const0> ;
  assign LOCKSTEP_Out[2830] = \<const0> ;
  assign LOCKSTEP_Out[2831] = \<const0> ;
  assign LOCKSTEP_Out[2832] = \<const0> ;
  assign LOCKSTEP_Out[2833] = \<const0> ;
  assign LOCKSTEP_Out[2834] = \<const0> ;
  assign LOCKSTEP_Out[2835] = \<const0> ;
  assign LOCKSTEP_Out[2836] = \<const0> ;
  assign LOCKSTEP_Out[2837] = \<const0> ;
  assign LOCKSTEP_Out[2838] = \<const0> ;
  assign LOCKSTEP_Out[2839] = \<const0> ;
  assign LOCKSTEP_Out[2840] = \<const0> ;
  assign LOCKSTEP_Out[2841] = \<const0> ;
  assign LOCKSTEP_Out[2842] = \<const0> ;
  assign LOCKSTEP_Out[2843] = \<const0> ;
  assign LOCKSTEP_Out[2844] = \<const0> ;
  assign LOCKSTEP_Out[2845] = \<const0> ;
  assign LOCKSTEP_Out[2846] = \<const0> ;
  assign LOCKSTEP_Out[2847] = \<const0> ;
  assign LOCKSTEP_Out[2848] = \<const0> ;
  assign LOCKSTEP_Out[2849] = \<const0> ;
  assign LOCKSTEP_Out[2850] = \<const0> ;
  assign LOCKSTEP_Out[2851] = \<const0> ;
  assign LOCKSTEP_Out[2852] = \<const0> ;
  assign LOCKSTEP_Out[2853] = \<const0> ;
  assign LOCKSTEP_Out[2854] = \<const0> ;
  assign LOCKSTEP_Out[2855] = \<const0> ;
  assign LOCKSTEP_Out[2856] = \<const0> ;
  assign LOCKSTEP_Out[2857] = \<const0> ;
  assign LOCKSTEP_Out[2858] = \<const0> ;
  assign LOCKSTEP_Out[2859] = \<const0> ;
  assign LOCKSTEP_Out[2860] = \<const0> ;
  assign LOCKSTEP_Out[2861] = \<const0> ;
  assign LOCKSTEP_Out[2862] = \<const0> ;
  assign LOCKSTEP_Out[2863] = \<const0> ;
  assign LOCKSTEP_Out[2864] = \<const0> ;
  assign LOCKSTEP_Out[2865] = \<const0> ;
  assign LOCKSTEP_Out[2866] = \<const0> ;
  assign LOCKSTEP_Out[2867] = \<const0> ;
  assign LOCKSTEP_Out[2868] = \<const0> ;
  assign LOCKSTEP_Out[2869] = \<const0> ;
  assign LOCKSTEP_Out[2870] = \<const0> ;
  assign LOCKSTEP_Out[2871] = \<const0> ;
  assign LOCKSTEP_Out[2872] = \<const0> ;
  assign LOCKSTEP_Out[2873] = \<const0> ;
  assign LOCKSTEP_Out[2874] = \<const0> ;
  assign LOCKSTEP_Out[2875] = \<const0> ;
  assign LOCKSTEP_Out[2876] = \<const0> ;
  assign LOCKSTEP_Out[2877] = \<const0> ;
  assign LOCKSTEP_Out[2878] = \<const0> ;
  assign LOCKSTEP_Out[2879] = \<const0> ;
  assign LOCKSTEP_Out[2880] = \<const0> ;
  assign LOCKSTEP_Out[2881:2945] = \^LOCKSTEP_Out [2881:2945];
  assign LOCKSTEP_Out[2946] = \<const0> ;
  assign LOCKSTEP_Out[2947] = \<const0> ;
  assign LOCKSTEP_Out[2948] = \<const0> ;
  assign LOCKSTEP_Out[2949] = \<const0> ;
  assign LOCKSTEP_Out[2950] = \<const0> ;
  assign LOCKSTEP_Out[2951] = \<const0> ;
  assign LOCKSTEP_Out[2952] = \<const0> ;
  assign LOCKSTEP_Out[2953] = \<const0> ;
  assign LOCKSTEP_Out[2954] = \<const0> ;
  assign LOCKSTEP_Out[2955] = \<const0> ;
  assign LOCKSTEP_Out[2956] = \<const0> ;
  assign LOCKSTEP_Out[2957] = \<const0> ;
  assign LOCKSTEP_Out[2958] = \<const0> ;
  assign LOCKSTEP_Out[2959] = \<const0> ;
  assign LOCKSTEP_Out[2960] = \<const0> ;
  assign LOCKSTEP_Out[2961] = \<const0> ;
  assign LOCKSTEP_Out[2962] = \<const0> ;
  assign LOCKSTEP_Out[2963] = \<const0> ;
  assign LOCKSTEP_Out[2964] = \<const0> ;
  assign LOCKSTEP_Out[2965] = \<const0> ;
  assign LOCKSTEP_Out[2966] = \<const0> ;
  assign LOCKSTEP_Out[2967] = \<const0> ;
  assign LOCKSTEP_Out[2968] = \<const0> ;
  assign LOCKSTEP_Out[2969] = \<const0> ;
  assign LOCKSTEP_Out[2970] = \<const0> ;
  assign LOCKSTEP_Out[2971] = \<const0> ;
  assign LOCKSTEP_Out[2972] = \<const0> ;
  assign LOCKSTEP_Out[2973] = \<const0> ;
  assign LOCKSTEP_Out[2974] = \<const0> ;
  assign LOCKSTEP_Out[2975] = \<const0> ;
  assign LOCKSTEP_Out[2976] = \<const0> ;
  assign LOCKSTEP_Out[2977] = \<const0> ;
  assign LOCKSTEP_Out[2978:2983] = \^LOCKSTEP_Out [2978:2983];
  assign LOCKSTEP_Out[2984] = \<const0> ;
  assign LOCKSTEP_Out[2985] = \<const0> ;
  assign LOCKSTEP_Out[2986] = \<const0> ;
  assign LOCKSTEP_Out[2987] = \<const0> ;
  assign LOCKSTEP_Out[2988] = \<const0> ;
  assign LOCKSTEP_Out[2989] = \<const0> ;
  assign LOCKSTEP_Out[2990] = \<const0> ;
  assign LOCKSTEP_Out[2991] = \<const0> ;
  assign LOCKSTEP_Out[2992] = \<const0> ;
  assign LOCKSTEP_Out[2993] = \<const0> ;
  assign LOCKSTEP_Out[2994:2997] = \^LOCKSTEP_Out [2994:2997];
  assign LOCKSTEP_Out[2998] = \<const0> ;
  assign LOCKSTEP_Out[2999] = \<const0> ;
  assign LOCKSTEP_Out[3000] = \<const0> ;
  assign LOCKSTEP_Out[3001] = \<const0> ;
  assign LOCKSTEP_Out[3002] = \<const0> ;
  assign LOCKSTEP_Out[3003] = \<const0> ;
  assign LOCKSTEP_Out[3004] = \<const0> ;
  assign LOCKSTEP_Out[3005] = \<const0> ;
  assign LOCKSTEP_Out[3006] = \<const0> ;
  assign LOCKSTEP_Out[3007:3038] = \^LOCKSTEP_Out [3007:3038];
  assign LOCKSTEP_Out[3039] = \<const0> ;
  assign LOCKSTEP_Out[3040] = \<const0> ;
  assign LOCKSTEP_Out[3041] = \<const0> ;
  assign LOCKSTEP_Out[3042] = \<const0> ;
  assign LOCKSTEP_Out[3043] = \<const0> ;
  assign LOCKSTEP_Out[3044] = \<const0> ;
  assign LOCKSTEP_Out[3045] = \<const0> ;
  assign LOCKSTEP_Out[3046] = \<const0> ;
  assign LOCKSTEP_Out[3047] = \<const0> ;
  assign LOCKSTEP_Out[3048] = \<const0> ;
  assign LOCKSTEP_Out[3049] = \<const0> ;
  assign LOCKSTEP_Out[3050] = \<const0> ;
  assign LOCKSTEP_Out[3051] = \<const0> ;
  assign LOCKSTEP_Out[3052] = \<const0> ;
  assign LOCKSTEP_Out[3053] = \<const0> ;
  assign LOCKSTEP_Out[3054] = \<const0> ;
  assign LOCKSTEP_Out[3055] = \<const0> ;
  assign LOCKSTEP_Out[3056] = \<const0> ;
  assign LOCKSTEP_Out[3057] = \<const0> ;
  assign LOCKSTEP_Out[3058] = \<const0> ;
  assign LOCKSTEP_Out[3059] = \<const0> ;
  assign LOCKSTEP_Out[3060] = \<const0> ;
  assign LOCKSTEP_Out[3061] = \<const0> ;
  assign LOCKSTEP_Out[3062] = \<const0> ;
  assign LOCKSTEP_Out[3063] = \<const0> ;
  assign LOCKSTEP_Out[3064] = \<const0> ;
  assign LOCKSTEP_Out[3065] = \<const0> ;
  assign LOCKSTEP_Out[3066] = \<const0> ;
  assign LOCKSTEP_Out[3067] = \<const0> ;
  assign LOCKSTEP_Out[3068] = \<const0> ;
  assign LOCKSTEP_Out[3069] = \<const0> ;
  assign LOCKSTEP_Out[3070] = \<const0> ;
  assign LOCKSTEP_Out[3071] = \^LOCKSTEP_Out [3073];
  assign LOCKSTEP_Out[3072] = \<const0> ;
  assign LOCKSTEP_Out[3073] = \^LOCKSTEP_Out [3073];
  assign LOCKSTEP_Out[3074] = \<const0> ;
  assign LOCKSTEP_Out[3075] = \^LOCKSTEP_Out [3073];
  assign LOCKSTEP_Out[3076] = \<const0> ;
  assign LOCKSTEP_Out[3077:3110] = \^LOCKSTEP_Out [3077:3110];
  assign LOCKSTEP_Out[3111] = \<const0> ;
  assign LOCKSTEP_Out[3112] = \<const0> ;
  assign LOCKSTEP_Out[3113] = \<const0> ;
  assign LOCKSTEP_Out[3114] = \<const0> ;
  assign LOCKSTEP_Out[3115] = \<const0> ;
  assign LOCKSTEP_Out[3116] = \<const0> ;
  assign LOCKSTEP_Out[3117] = \<const0> ;
  assign LOCKSTEP_Out[3118] = \<const0> ;
  assign LOCKSTEP_Out[3119] = \<const0> ;
  assign LOCKSTEP_Out[3120] = \<const0> ;
  assign LOCKSTEP_Out[3121] = \<const0> ;
  assign LOCKSTEP_Out[3122] = \<const0> ;
  assign LOCKSTEP_Out[3123] = \<const0> ;
  assign LOCKSTEP_Out[3124] = \<const0> ;
  assign LOCKSTEP_Out[3125] = \<const0> ;
  assign LOCKSTEP_Out[3126] = \<const0> ;
  assign LOCKSTEP_Out[3127] = \<const0> ;
  assign LOCKSTEP_Out[3128] = \<const0> ;
  assign LOCKSTEP_Out[3129] = \<const0> ;
  assign LOCKSTEP_Out[3130] = \<const0> ;
  assign LOCKSTEP_Out[3131] = \<const0> ;
  assign LOCKSTEP_Out[3132] = \<const0> ;
  assign LOCKSTEP_Out[3133] = \<const0> ;
  assign LOCKSTEP_Out[3134] = \<const0> ;
  assign LOCKSTEP_Out[3135] = \<const0> ;
  assign LOCKSTEP_Out[3136] = \<const0> ;
  assign LOCKSTEP_Out[3137] = \<const0> ;
  assign LOCKSTEP_Out[3138] = \<const0> ;
  assign LOCKSTEP_Out[3139] = \<const0> ;
  assign LOCKSTEP_Out[3140] = \<const0> ;
  assign LOCKSTEP_Out[3141] = \<const0> ;
  assign LOCKSTEP_Out[3142] = \<const0> ;
  assign LOCKSTEP_Out[3143:3174] = \^LOCKSTEP_Out [3143:3174];
  assign LOCKSTEP_Out[3175] = \<const0> ;
  assign LOCKSTEP_Out[3176] = \<const0> ;
  assign LOCKSTEP_Out[3177] = \<const0> ;
  assign LOCKSTEP_Out[3178] = \<const0> ;
  assign LOCKSTEP_Out[3179] = \<const0> ;
  assign LOCKSTEP_Out[3180] = \<const0> ;
  assign LOCKSTEP_Out[3181] = \<const0> ;
  assign LOCKSTEP_Out[3182] = \<const0> ;
  assign LOCKSTEP_Out[3183] = \<const0> ;
  assign LOCKSTEP_Out[3184] = \<const0> ;
  assign LOCKSTEP_Out[3185] = \<const0> ;
  assign LOCKSTEP_Out[3186] = \<const0> ;
  assign LOCKSTEP_Out[3187] = \<const0> ;
  assign LOCKSTEP_Out[3188] = \<const0> ;
  assign LOCKSTEP_Out[3189] = \<const0> ;
  assign LOCKSTEP_Out[3190] = \<const0> ;
  assign LOCKSTEP_Out[3191] = \<const0> ;
  assign LOCKSTEP_Out[3192] = \<const0> ;
  assign LOCKSTEP_Out[3193] = \<const0> ;
  assign LOCKSTEP_Out[3194] = \<const0> ;
  assign LOCKSTEP_Out[3195] = \<const0> ;
  assign LOCKSTEP_Out[3196] = \<const0> ;
  assign LOCKSTEP_Out[3197] = \<const0> ;
  assign LOCKSTEP_Out[3198] = \<const0> ;
  assign LOCKSTEP_Out[3199] = \<const0> ;
  assign LOCKSTEP_Out[3200] = \<const0> ;
  assign LOCKSTEP_Out[3201] = \<const0> ;
  assign LOCKSTEP_Out[3202] = \<const0> ;
  assign LOCKSTEP_Out[3203] = \<const0> ;
  assign LOCKSTEP_Out[3204] = \<const0> ;
  assign LOCKSTEP_Out[3205] = \<const0> ;
  assign LOCKSTEP_Out[3206] = \<const0> ;
  assign LOCKSTEP_Out[3207:3210] = \^LOCKSTEP_Out [3207:3210];
  assign LOCKSTEP_Out[3211] = \<const0> ;
  assign LOCKSTEP_Out[3212] = \<const0> ;
  assign LOCKSTEP_Out[3213] = \<const0> ;
  assign LOCKSTEP_Out[3214] = \<const0> ;
  assign LOCKSTEP_Out[3215:3217] = \^LOCKSTEP_Out [3215:3217];
  assign LOCKSTEP_Out[3218] = \<const0> ;
  assign LOCKSTEP_Out[3219] = \<const0> ;
  assign LOCKSTEP_Out[3220] = \<const0> ;
  assign LOCKSTEP_Out[3221] = \<const0> ;
  assign LOCKSTEP_Out[3222] = \<const0> ;
  assign LOCKSTEP_Out[3223] = \<const0> ;
  assign LOCKSTEP_Out[3224] = \<const0> ;
  assign LOCKSTEP_Out[3225] = \^LOCKSTEP_Out [3225];
  assign LOCKSTEP_Out[3226] = \^LOCKSTEP_Out [542];
  assign LOCKSTEP_Out[3227] = \^LOCKSTEP_Out [542];
  assign LOCKSTEP_Out[3228] = \^LOCKSTEP_Out [3228];
  assign LOCKSTEP_Out[3229] = \<const0> ;
  assign LOCKSTEP_Out[3230] = \<const0> ;
  assign LOCKSTEP_Out[3231] = \<const0> ;
  assign LOCKSTEP_Out[3232] = \<const0> ;
  assign LOCKSTEP_Out[3233] = \<const0> ;
  assign LOCKSTEP_Out[3234] = \<const0> ;
  assign LOCKSTEP_Out[3235] = \<const0> ;
  assign LOCKSTEP_Out[3236] = \<const0> ;
  assign LOCKSTEP_Out[3237] = \<const0> ;
  assign LOCKSTEP_Out[3238] = \<const0> ;
  assign LOCKSTEP_Out[3239] = \<const0> ;
  assign LOCKSTEP_Out[3240] = \<const0> ;
  assign LOCKSTEP_Out[3241] = \<const0> ;
  assign LOCKSTEP_Out[3242] = \<const0> ;
  assign LOCKSTEP_Out[3243] = \<const0> ;
  assign LOCKSTEP_Out[3244] = \<const0> ;
  assign LOCKSTEP_Out[3245] = \<const0> ;
  assign LOCKSTEP_Out[3246] = \<const0> ;
  assign LOCKSTEP_Out[3247] = \<const0> ;
  assign LOCKSTEP_Out[3248] = \<const0> ;
  assign LOCKSTEP_Out[3249] = \<const0> ;
  assign LOCKSTEP_Out[3250] = \<const0> ;
  assign LOCKSTEP_Out[3251] = \<const0> ;
  assign LOCKSTEP_Out[3252] = \<const0> ;
  assign LOCKSTEP_Out[3253] = \<const0> ;
  assign LOCKSTEP_Out[3254] = \<const0> ;
  assign LOCKSTEP_Out[3255] = \<const0> ;
  assign LOCKSTEP_Out[3256] = \<const0> ;
  assign LOCKSTEP_Out[3257] = \<const0> ;
  assign LOCKSTEP_Out[3258] = \<const0> ;
  assign LOCKSTEP_Out[3259] = \<const0> ;
  assign LOCKSTEP_Out[3260] = \<const0> ;
  assign LOCKSTEP_Out[3261] = \<const0> ;
  assign LOCKSTEP_Out[3262] = \<const0> ;
  assign LOCKSTEP_Out[3263] = \<const0> ;
  assign LOCKSTEP_Out[3264] = \<const0> ;
  assign LOCKSTEP_Out[3265] = \<const0> ;
  assign LOCKSTEP_Out[3266] = \<const0> ;
  assign LOCKSTEP_Out[3267] = \<const0> ;
  assign LOCKSTEP_Out[3268] = \<const0> ;
  assign LOCKSTEP_Out[3269] = \<const0> ;
  assign LOCKSTEP_Out[3270] = \<const0> ;
  assign LOCKSTEP_Out[3271] = \<const0> ;
  assign LOCKSTEP_Out[3272] = \<const0> ;
  assign LOCKSTEP_Out[3273] = \<const0> ;
  assign LOCKSTEP_Out[3274] = \<const0> ;
  assign LOCKSTEP_Out[3275] = \<const0> ;
  assign LOCKSTEP_Out[3276] = \<const0> ;
  assign LOCKSTEP_Out[3277] = \<const0> ;
  assign LOCKSTEP_Out[3278] = \<const0> ;
  assign LOCKSTEP_Out[3279] = \<const0> ;
  assign LOCKSTEP_Out[3280] = \<const0> ;
  assign LOCKSTEP_Out[3281] = \<const0> ;
  assign LOCKSTEP_Out[3282] = \<const0> ;
  assign LOCKSTEP_Out[3283] = \<const0> ;
  assign LOCKSTEP_Out[3284] = \<const0> ;
  assign LOCKSTEP_Out[3285] = \<const0> ;
  assign LOCKSTEP_Out[3286] = \<const0> ;
  assign LOCKSTEP_Out[3287] = \<const0> ;
  assign LOCKSTEP_Out[3288] = \<const0> ;
  assign LOCKSTEP_Out[3289] = \<const0> ;
  assign LOCKSTEP_Out[3290] = \<const0> ;
  assign LOCKSTEP_Out[3291] = \<const0> ;
  assign LOCKSTEP_Out[3292] = \<const0> ;
  assign LOCKSTEP_Out[3293] = \<const0> ;
  assign LOCKSTEP_Out[3294] = \<const0> ;
  assign LOCKSTEP_Out[3295] = \<const0> ;
  assign LOCKSTEP_Out[3296] = \<const0> ;
  assign LOCKSTEP_Out[3297] = \<const0> ;
  assign LOCKSTEP_Out[3298] = \<const0> ;
  assign LOCKSTEP_Out[3299] = \<const0> ;
  assign LOCKSTEP_Out[3300] = \<const0> ;
  assign LOCKSTEP_Out[3301] = \<const0> ;
  assign LOCKSTEP_Out[3302] = \<const0> ;
  assign LOCKSTEP_Out[3303] = \<const0> ;
  assign LOCKSTEP_Out[3304] = \<const0> ;
  assign LOCKSTEP_Out[3305] = \<const0> ;
  assign LOCKSTEP_Out[3306] = \<const0> ;
  assign LOCKSTEP_Out[3307] = \<const0> ;
  assign LOCKSTEP_Out[3308] = \<const0> ;
  assign LOCKSTEP_Out[3309] = \<const0> ;
  assign LOCKSTEP_Out[3310] = \<const0> ;
  assign LOCKSTEP_Out[3311] = \<const0> ;
  assign LOCKSTEP_Out[3312] = \<const0> ;
  assign LOCKSTEP_Out[3313] = \<const0> ;
  assign LOCKSTEP_Out[3314] = \<const0> ;
  assign LOCKSTEP_Out[3315] = \<const0> ;
  assign LOCKSTEP_Out[3316] = \<const0> ;
  assign LOCKSTEP_Out[3317] = \<const0> ;
  assign LOCKSTEP_Out[3318] = \<const0> ;
  assign LOCKSTEP_Out[3319] = \<const0> ;
  assign LOCKSTEP_Out[3320] = \<const0> ;
  assign LOCKSTEP_Out[3321] = \<const0> ;
  assign LOCKSTEP_Out[3322] = \<const0> ;
  assign LOCKSTEP_Out[3323] = \<const0> ;
  assign LOCKSTEP_Out[3324] = \<const0> ;
  assign LOCKSTEP_Out[3325] = \<const0> ;
  assign LOCKSTEP_Out[3326] = \<const0> ;
  assign LOCKSTEP_Out[3327] = \<const0> ;
  assign LOCKSTEP_Out[3328] = \<const0> ;
  assign LOCKSTEP_Out[3329] = \<const0> ;
  assign LOCKSTEP_Out[3330] = \<const0> ;
  assign LOCKSTEP_Out[3331] = \<const0> ;
  assign LOCKSTEP_Out[3332] = \<const0> ;
  assign LOCKSTEP_Out[3333] = \<const0> ;
  assign LOCKSTEP_Out[3334] = \<const0> ;
  assign LOCKSTEP_Out[3335] = \<const0> ;
  assign LOCKSTEP_Out[3336] = \<const0> ;
  assign LOCKSTEP_Out[3337] = \<const0> ;
  assign LOCKSTEP_Out[3338] = \<const0> ;
  assign LOCKSTEP_Out[3339] = \<const0> ;
  assign LOCKSTEP_Out[3340] = \<const0> ;
  assign LOCKSTEP_Out[3341] = \<const0> ;
  assign LOCKSTEP_Out[3342] = \<const0> ;
  assign LOCKSTEP_Out[3343] = \<const0> ;
  assign LOCKSTEP_Out[3344] = \<const0> ;
  assign LOCKSTEP_Out[3345] = \<const0> ;
  assign LOCKSTEP_Out[3346] = \<const0> ;
  assign LOCKSTEP_Out[3347] = \<const0> ;
  assign LOCKSTEP_Out[3348] = \<const0> ;
  assign LOCKSTEP_Out[3349] = \<const0> ;
  assign LOCKSTEP_Out[3350] = \<const0> ;
  assign LOCKSTEP_Out[3351] = \<const0> ;
  assign LOCKSTEP_Out[3352] = \<const0> ;
  assign LOCKSTEP_Out[3353] = \<const0> ;
  assign LOCKSTEP_Out[3354] = \<const0> ;
  assign LOCKSTEP_Out[3355] = \<const0> ;
  assign LOCKSTEP_Out[3356] = \<const0> ;
  assign LOCKSTEP_Out[3357] = \<const0> ;
  assign LOCKSTEP_Out[3358] = \<const0> ;
  assign LOCKSTEP_Out[3359] = \<const0> ;
  assign LOCKSTEP_Out[3360] = \<const0> ;
  assign LOCKSTEP_Out[3361] = \<const0> ;
  assign LOCKSTEP_Out[3362] = \<const0> ;
  assign LOCKSTEP_Out[3363] = \<const0> ;
  assign LOCKSTEP_Out[3364] = \<const0> ;
  assign LOCKSTEP_Out[3365] = \<const0> ;
  assign LOCKSTEP_Out[3366] = \<const0> ;
  assign LOCKSTEP_Out[3367] = \<const0> ;
  assign LOCKSTEP_Out[3368] = \<const0> ;
  assign LOCKSTEP_Out[3369] = \<const0> ;
  assign LOCKSTEP_Out[3370] = \<const0> ;
  assign LOCKSTEP_Out[3371] = \<const0> ;
  assign LOCKSTEP_Out[3372] = \<const0> ;
  assign LOCKSTEP_Out[3373] = \<const0> ;
  assign LOCKSTEP_Out[3374] = \<const0> ;
  assign LOCKSTEP_Out[3375] = \<const0> ;
  assign LOCKSTEP_Out[3376] = \<const0> ;
  assign LOCKSTEP_Out[3377] = \<const0> ;
  assign LOCKSTEP_Out[3378] = \<const0> ;
  assign LOCKSTEP_Out[3379] = \<const0> ;
  assign LOCKSTEP_Out[3380] = \<const0> ;
  assign LOCKSTEP_Out[3381] = \<const0> ;
  assign LOCKSTEP_Out[3382] = \<const0> ;
  assign LOCKSTEP_Out[3383] = \<const0> ;
  assign LOCKSTEP_Out[3384] = \<const0> ;
  assign LOCKSTEP_Out[3385] = \<const0> ;
  assign LOCKSTEP_Out[3386] = \<const0> ;
  assign LOCKSTEP_Out[3387] = \<const0> ;
  assign LOCKSTEP_Out[3388] = \<const0> ;
  assign LOCKSTEP_Out[3389] = \<const0> ;
  assign LOCKSTEP_Out[3390] = \<const0> ;
  assign LOCKSTEP_Out[3391] = \<const0> ;
  assign LOCKSTEP_Out[3392] = \<const0> ;
  assign LOCKSTEP_Out[3393] = \<const0> ;
  assign LOCKSTEP_Out[3394] = \<const0> ;
  assign LOCKSTEP_Out[3395] = \<const0> ;
  assign LOCKSTEP_Out[3396] = \<const0> ;
  assign LOCKSTEP_Out[3397] = \<const0> ;
  assign LOCKSTEP_Out[3398] = \<const0> ;
  assign LOCKSTEP_Out[3399] = \<const0> ;
  assign LOCKSTEP_Out[3400] = \<const0> ;
  assign LOCKSTEP_Out[3401] = \<const0> ;
  assign LOCKSTEP_Out[3402] = \<const0> ;
  assign LOCKSTEP_Out[3403] = \<const0> ;
  assign LOCKSTEP_Out[3404] = \<const0> ;
  assign LOCKSTEP_Out[3405] = \<const0> ;
  assign LOCKSTEP_Out[3406] = \<const0> ;
  assign LOCKSTEP_Out[3407] = \<const0> ;
  assign LOCKSTEP_Out[3408] = \<const0> ;
  assign LOCKSTEP_Out[3409] = \<const0> ;
  assign LOCKSTEP_Out[3410] = \<const0> ;
  assign LOCKSTEP_Out[3411] = \<const0> ;
  assign LOCKSTEP_Out[3412] = \<const0> ;
  assign LOCKSTEP_Out[3413] = \<const0> ;
  assign LOCKSTEP_Out[3414] = \<const0> ;
  assign LOCKSTEP_Out[3415] = \<const0> ;
  assign LOCKSTEP_Out[3416] = \<const0> ;
  assign LOCKSTEP_Out[3417] = \<const0> ;
  assign LOCKSTEP_Out[3418] = \<const0> ;
  assign LOCKSTEP_Out[3419] = \<const0> ;
  assign LOCKSTEP_Out[3420] = \<const0> ;
  assign LOCKSTEP_Out[3421] = \<const0> ;
  assign LOCKSTEP_Out[3422] = \<const0> ;
  assign LOCKSTEP_Out[3423] = \<const0> ;
  assign LOCKSTEP_Out[3424] = \<const0> ;
  assign LOCKSTEP_Out[3425] = \<const0> ;
  assign LOCKSTEP_Out[3426] = \<const0> ;
  assign LOCKSTEP_Out[3427] = \<const0> ;
  assign LOCKSTEP_Out[3428] = \<const0> ;
  assign LOCKSTEP_Out[3429] = \<const0> ;
  assign LOCKSTEP_Out[3430] = \<const0> ;
  assign LOCKSTEP_Out[3431] = \<const0> ;
  assign LOCKSTEP_Out[3432] = \<const0> ;
  assign LOCKSTEP_Out[3433] = \<const0> ;
  assign LOCKSTEP_Out[3434] = \<const0> ;
  assign LOCKSTEP_Out[3435] = \<const0> ;
  assign LOCKSTEP_Out[3436] = \<const0> ;
  assign LOCKSTEP_Out[3437] = \<const0> ;
  assign LOCKSTEP_Out[3438] = \<const0> ;
  assign LOCKSTEP_Out[3439] = \<const0> ;
  assign LOCKSTEP_Out[3440] = \<const0> ;
  assign LOCKSTEP_Out[3441] = \<const0> ;
  assign LOCKSTEP_Out[3442] = \<const0> ;
  assign LOCKSTEP_Out[3443] = \<const0> ;
  assign LOCKSTEP_Out[3444] = \<const0> ;
  assign LOCKSTEP_Out[3445] = \<const0> ;
  assign LOCKSTEP_Out[3446] = \<const0> ;
  assign LOCKSTEP_Out[3447] = \<const0> ;
  assign LOCKSTEP_Out[3448] = \<const0> ;
  assign LOCKSTEP_Out[3449] = \<const0> ;
  assign LOCKSTEP_Out[3450] = \<const0> ;
  assign LOCKSTEP_Out[3451] = \<const0> ;
  assign LOCKSTEP_Out[3452] = \<const0> ;
  assign LOCKSTEP_Out[3453] = \<const0> ;
  assign LOCKSTEP_Out[3454] = \<const0> ;
  assign LOCKSTEP_Out[3455] = \<const0> ;
  assign LOCKSTEP_Out[3456] = \<const0> ;
  assign LOCKSTEP_Out[3457] = \<const0> ;
  assign LOCKSTEP_Out[3458] = \<const0> ;
  assign LOCKSTEP_Out[3459] = \<const0> ;
  assign LOCKSTEP_Out[3460] = \<const0> ;
  assign LOCKSTEP_Out[3461] = \<const0> ;
  assign LOCKSTEP_Out[3462] = \<const0> ;
  assign LOCKSTEP_Out[3463] = \<const0> ;
  assign LOCKSTEP_Out[3464] = \<const0> ;
  assign LOCKSTEP_Out[3465] = \<const0> ;
  assign LOCKSTEP_Out[3466] = \<const0> ;
  assign LOCKSTEP_Out[3467] = \<const0> ;
  assign LOCKSTEP_Out[3468] = \<const0> ;
  assign LOCKSTEP_Out[3469] = \<const0> ;
  assign LOCKSTEP_Out[3470] = \<const0> ;
  assign LOCKSTEP_Out[3471] = \<const0> ;
  assign LOCKSTEP_Out[3472] = \<const0> ;
  assign LOCKSTEP_Out[3473] = \<const0> ;
  assign LOCKSTEP_Out[3474] = \<const0> ;
  assign LOCKSTEP_Out[3475] = \<const0> ;
  assign LOCKSTEP_Out[3476] = \<const0> ;
  assign LOCKSTEP_Out[3477] = \<const0> ;
  assign LOCKSTEP_Out[3478] = \<const0> ;
  assign LOCKSTEP_Out[3479] = \<const0> ;
  assign LOCKSTEP_Out[3480] = \<const0> ;
  assign LOCKSTEP_Out[3481] = \<const0> ;
  assign LOCKSTEP_Out[3482] = \<const0> ;
  assign LOCKSTEP_Out[3483] = \<const0> ;
  assign LOCKSTEP_Out[3484] = \<const0> ;
  assign LOCKSTEP_Out[3485] = \<const0> ;
  assign LOCKSTEP_Out[3486] = \<const0> ;
  assign LOCKSTEP_Out[3487] = \<const0> ;
  assign LOCKSTEP_Out[3488] = \<const0> ;
  assign LOCKSTEP_Out[3489] = \<const0> ;
  assign LOCKSTEP_Out[3490] = \<const0> ;
  assign LOCKSTEP_Out[3491] = \<const0> ;
  assign LOCKSTEP_Out[3492] = \<const0> ;
  assign LOCKSTEP_Out[3493] = \<const0> ;
  assign LOCKSTEP_Out[3494] = \<const0> ;
  assign LOCKSTEP_Out[3495] = \<const0> ;
  assign LOCKSTEP_Out[3496] = \<const0> ;
  assign LOCKSTEP_Out[3497] = \<const0> ;
  assign LOCKSTEP_Out[3498] = \<const0> ;
  assign LOCKSTEP_Out[3499] = \<const0> ;
  assign LOCKSTEP_Out[3500] = \<const0> ;
  assign LOCKSTEP_Out[3501] = \<const0> ;
  assign LOCKSTEP_Out[3502] = \<const0> ;
  assign LOCKSTEP_Out[3503] = \<const0> ;
  assign LOCKSTEP_Out[3504] = \<const0> ;
  assign LOCKSTEP_Out[3505] = \<const0> ;
  assign LOCKSTEP_Out[3506] = \<const0> ;
  assign LOCKSTEP_Out[3507] = \<const0> ;
  assign LOCKSTEP_Out[3508] = \<const0> ;
  assign LOCKSTEP_Out[3509] = \<const0> ;
  assign LOCKSTEP_Out[3510] = \<const0> ;
  assign LOCKSTEP_Out[3511] = \<const0> ;
  assign LOCKSTEP_Out[3512] = \<const0> ;
  assign LOCKSTEP_Out[3513] = \<const0> ;
  assign LOCKSTEP_Out[3514] = \<const0> ;
  assign LOCKSTEP_Out[3515] = \<const0> ;
  assign LOCKSTEP_Out[3516] = \<const0> ;
  assign LOCKSTEP_Out[3517] = \<const0> ;
  assign LOCKSTEP_Out[3518] = \<const0> ;
  assign LOCKSTEP_Out[3519] = \<const0> ;
  assign LOCKSTEP_Out[3520] = \<const0> ;
  assign LOCKSTEP_Out[3521] = \<const0> ;
  assign LOCKSTEP_Out[3522] = \<const0> ;
  assign LOCKSTEP_Out[3523] = \<const0> ;
  assign LOCKSTEP_Out[3524] = \<const0> ;
  assign LOCKSTEP_Out[3525] = \<const0> ;
  assign LOCKSTEP_Out[3526] = \<const0> ;
  assign LOCKSTEP_Out[3527] = \<const0> ;
  assign LOCKSTEP_Out[3528] = \<const0> ;
  assign LOCKSTEP_Out[3529] = \<const0> ;
  assign LOCKSTEP_Out[3530] = \<const0> ;
  assign LOCKSTEP_Out[3531] = \<const0> ;
  assign LOCKSTEP_Out[3532] = \<const0> ;
  assign LOCKSTEP_Out[3533] = \<const0> ;
  assign LOCKSTEP_Out[3534] = \<const0> ;
  assign LOCKSTEP_Out[3535] = \<const0> ;
  assign LOCKSTEP_Out[3536] = \<const0> ;
  assign LOCKSTEP_Out[3537] = \<const0> ;
  assign LOCKSTEP_Out[3538] = \<const0> ;
  assign LOCKSTEP_Out[3539] = \<const0> ;
  assign LOCKSTEP_Out[3540] = \<const0> ;
  assign LOCKSTEP_Out[3541] = \<const0> ;
  assign LOCKSTEP_Out[3542] = \<const0> ;
  assign LOCKSTEP_Out[3543] = \<const0> ;
  assign LOCKSTEP_Out[3544] = \<const0> ;
  assign LOCKSTEP_Out[3545] = \<const0> ;
  assign LOCKSTEP_Out[3546] = \<const0> ;
  assign LOCKSTEP_Out[3547] = \<const0> ;
  assign LOCKSTEP_Out[3548] = \<const0> ;
  assign LOCKSTEP_Out[3549] = \<const0> ;
  assign LOCKSTEP_Out[3550] = \<const0> ;
  assign LOCKSTEP_Out[3551] = \<const0> ;
  assign LOCKSTEP_Out[3552] = \<const0> ;
  assign LOCKSTEP_Out[3553] = \<const0> ;
  assign LOCKSTEP_Out[3554] = \<const0> ;
  assign LOCKSTEP_Out[3555] = \<const0> ;
  assign LOCKSTEP_Out[3556] = \<const0> ;
  assign LOCKSTEP_Out[3557] = \<const0> ;
  assign LOCKSTEP_Out[3558] = \<const0> ;
  assign LOCKSTEP_Out[3559] = \<const0> ;
  assign LOCKSTEP_Out[3560] = \<const0> ;
  assign LOCKSTEP_Out[3561] = \<const0> ;
  assign LOCKSTEP_Out[3562] = \<const0> ;
  assign LOCKSTEP_Out[3563] = \<const0> ;
  assign LOCKSTEP_Out[3564] = \<const0> ;
  assign LOCKSTEP_Out[3565] = \<const0> ;
  assign LOCKSTEP_Out[3566] = \<const0> ;
  assign LOCKSTEP_Out[3567] = \<const0> ;
  assign LOCKSTEP_Out[3568] = \<const0> ;
  assign LOCKSTEP_Out[3569] = \<const0> ;
  assign LOCKSTEP_Out[3570] = \<const0> ;
  assign LOCKSTEP_Out[3571] = \<const0> ;
  assign LOCKSTEP_Out[3572] = \<const0> ;
  assign LOCKSTEP_Out[3573] = \<const0> ;
  assign LOCKSTEP_Out[3574] = \<const0> ;
  assign LOCKSTEP_Out[3575] = \<const0> ;
  assign LOCKSTEP_Out[3576] = \<const0> ;
  assign LOCKSTEP_Out[3577] = \<const0> ;
  assign LOCKSTEP_Out[3578] = \<const0> ;
  assign LOCKSTEP_Out[3579] = \<const0> ;
  assign LOCKSTEP_Out[3580] = \<const0> ;
  assign LOCKSTEP_Out[3581] = \<const0> ;
  assign LOCKSTEP_Out[3582] = \<const0> ;
  assign LOCKSTEP_Out[3583] = \<const0> ;
  assign LOCKSTEP_Out[3584] = \<const0> ;
  assign LOCKSTEP_Out[3585] = \<const0> ;
  assign LOCKSTEP_Out[3586] = \<const0> ;
  assign LOCKSTEP_Out[3587] = \<const0> ;
  assign LOCKSTEP_Out[3588] = \<const0> ;
  assign LOCKSTEP_Out[3589] = \<const0> ;
  assign LOCKSTEP_Out[3590] = \<const0> ;
  assign LOCKSTEP_Out[3591] = \<const0> ;
  assign LOCKSTEP_Out[3592] = \<const0> ;
  assign LOCKSTEP_Out[3593] = \<const0> ;
  assign LOCKSTEP_Out[3594] = \<const0> ;
  assign LOCKSTEP_Out[3595] = \<const0> ;
  assign LOCKSTEP_Out[3596] = \<const0> ;
  assign LOCKSTEP_Out[3597] = \<const0> ;
  assign LOCKSTEP_Out[3598] = \<const0> ;
  assign LOCKSTEP_Out[3599] = \<const0> ;
  assign LOCKSTEP_Out[3600] = \<const0> ;
  assign LOCKSTEP_Out[3601] = \<const0> ;
  assign LOCKSTEP_Out[3602] = \<const0> ;
  assign LOCKSTEP_Out[3603] = \<const0> ;
  assign LOCKSTEP_Out[3604] = \<const0> ;
  assign LOCKSTEP_Out[3605] = \<const0> ;
  assign LOCKSTEP_Out[3606] = \<const0> ;
  assign LOCKSTEP_Out[3607] = \<const0> ;
  assign LOCKSTEP_Out[3608] = \<const0> ;
  assign LOCKSTEP_Out[3609] = \<const0> ;
  assign LOCKSTEP_Out[3610] = \<const0> ;
  assign LOCKSTEP_Out[3611] = \<const0> ;
  assign LOCKSTEP_Out[3612] = \<const0> ;
  assign LOCKSTEP_Out[3613] = \<const0> ;
  assign LOCKSTEP_Out[3614] = \<const0> ;
  assign LOCKSTEP_Out[3615] = \<const0> ;
  assign LOCKSTEP_Out[3616] = \<const0> ;
  assign LOCKSTEP_Out[3617] = \<const0> ;
  assign LOCKSTEP_Out[3618] = \<const0> ;
  assign LOCKSTEP_Out[3619] = \<const0> ;
  assign LOCKSTEP_Out[3620] = \<const0> ;
  assign LOCKSTEP_Out[3621] = \<const0> ;
  assign LOCKSTEP_Out[3622] = \<const0> ;
  assign LOCKSTEP_Out[3623] = \<const0> ;
  assign LOCKSTEP_Out[3624] = \<const0> ;
  assign LOCKSTEP_Out[3625] = \<const0> ;
  assign LOCKSTEP_Out[3626] = \<const0> ;
  assign LOCKSTEP_Out[3627] = \<const0> ;
  assign LOCKSTEP_Out[3628] = \<const0> ;
  assign LOCKSTEP_Out[3629] = \<const0> ;
  assign LOCKSTEP_Out[3630] = \<const0> ;
  assign LOCKSTEP_Out[3631] = \<const0> ;
  assign LOCKSTEP_Out[3632] = \<const0> ;
  assign LOCKSTEP_Out[3633] = \<const0> ;
  assign LOCKSTEP_Out[3634] = \<const0> ;
  assign LOCKSTEP_Out[3635] = \<const0> ;
  assign LOCKSTEP_Out[3636] = \<const0> ;
  assign LOCKSTEP_Out[3637] = \<const0> ;
  assign LOCKSTEP_Out[3638] = \<const0> ;
  assign LOCKSTEP_Out[3639] = \<const0> ;
  assign LOCKSTEP_Out[3640] = \<const0> ;
  assign LOCKSTEP_Out[3641] = \<const0> ;
  assign LOCKSTEP_Out[3642] = \<const0> ;
  assign LOCKSTEP_Out[3643] = \<const0> ;
  assign LOCKSTEP_Out[3644] = \<const0> ;
  assign LOCKSTEP_Out[3645] = \<const0> ;
  assign LOCKSTEP_Out[3646] = \<const0> ;
  assign LOCKSTEP_Out[3647] = \<const0> ;
  assign LOCKSTEP_Out[3648] = \<const0> ;
  assign LOCKSTEP_Out[3649] = \<const0> ;
  assign LOCKSTEP_Out[3650] = \<const0> ;
  assign LOCKSTEP_Out[3651] = \<const0> ;
  assign LOCKSTEP_Out[3652] = \<const0> ;
  assign LOCKSTEP_Out[3653] = \<const0> ;
  assign LOCKSTEP_Out[3654] = \<const0> ;
  assign LOCKSTEP_Out[3655] = \<const0> ;
  assign LOCKSTEP_Out[3656] = \<const0> ;
  assign LOCKSTEP_Out[3657] = \<const0> ;
  assign LOCKSTEP_Out[3658] = \<const0> ;
  assign LOCKSTEP_Out[3659] = \<const0> ;
  assign LOCKSTEP_Out[3660] = \<const0> ;
  assign LOCKSTEP_Out[3661] = \<const0> ;
  assign LOCKSTEP_Out[3662] = \<const0> ;
  assign LOCKSTEP_Out[3663] = \<const0> ;
  assign LOCKSTEP_Out[3664] = \<const0> ;
  assign LOCKSTEP_Out[3665] = \<const0> ;
  assign LOCKSTEP_Out[3666] = \<const0> ;
  assign LOCKSTEP_Out[3667] = \<const0> ;
  assign LOCKSTEP_Out[3668] = \<const0> ;
  assign LOCKSTEP_Out[3669] = \<const0> ;
  assign LOCKSTEP_Out[3670] = \<const0> ;
  assign LOCKSTEP_Out[3671] = \<const0> ;
  assign LOCKSTEP_Out[3672] = \<const0> ;
  assign LOCKSTEP_Out[3673] = \<const0> ;
  assign LOCKSTEP_Out[3674] = \<const0> ;
  assign LOCKSTEP_Out[3675] = \<const0> ;
  assign LOCKSTEP_Out[3676] = \<const0> ;
  assign LOCKSTEP_Out[3677] = \<const0> ;
  assign LOCKSTEP_Out[3678] = \<const0> ;
  assign LOCKSTEP_Out[3679] = \<const0> ;
  assign LOCKSTEP_Out[3680] = \<const0> ;
  assign LOCKSTEP_Out[3681] = \<const0> ;
  assign LOCKSTEP_Out[3682] = \<const0> ;
  assign LOCKSTEP_Out[3683] = \<const0> ;
  assign LOCKSTEP_Out[3684] = \<const0> ;
  assign LOCKSTEP_Out[3685] = \<const0> ;
  assign LOCKSTEP_Out[3686] = \<const0> ;
  assign LOCKSTEP_Out[3687] = \<const0> ;
  assign LOCKSTEP_Out[3688] = \<const0> ;
  assign LOCKSTEP_Out[3689] = \<const0> ;
  assign LOCKSTEP_Out[3690] = \<const0> ;
  assign LOCKSTEP_Out[3691] = \<const0> ;
  assign LOCKSTEP_Out[3692] = \<const0> ;
  assign LOCKSTEP_Out[3693] = \<const0> ;
  assign LOCKSTEP_Out[3694] = \<const0> ;
  assign LOCKSTEP_Out[3695] = \<const0> ;
  assign LOCKSTEP_Out[3696] = \<const0> ;
  assign LOCKSTEP_Out[3697] = \<const0> ;
  assign LOCKSTEP_Out[3698] = \<const0> ;
  assign LOCKSTEP_Out[3699] = \<const0> ;
  assign LOCKSTEP_Out[3700] = \<const0> ;
  assign LOCKSTEP_Out[3701] = \<const0> ;
  assign LOCKSTEP_Out[3702] = \<const0> ;
  assign LOCKSTEP_Out[3703] = \<const0> ;
  assign LOCKSTEP_Out[3704] = \<const0> ;
  assign LOCKSTEP_Out[3705] = \<const0> ;
  assign LOCKSTEP_Out[3706] = \<const0> ;
  assign LOCKSTEP_Out[3707] = \<const0> ;
  assign LOCKSTEP_Out[3708] = \<const0> ;
  assign LOCKSTEP_Out[3709] = \<const0> ;
  assign LOCKSTEP_Out[3710] = \<const0> ;
  assign LOCKSTEP_Out[3711] = \<const0> ;
  assign LOCKSTEP_Out[3712] = \<const0> ;
  assign LOCKSTEP_Out[3713] = \<const0> ;
  assign LOCKSTEP_Out[3714] = \<const0> ;
  assign LOCKSTEP_Out[3715] = \<const0> ;
  assign LOCKSTEP_Out[3716] = \<const0> ;
  assign LOCKSTEP_Out[3717] = \<const0> ;
  assign LOCKSTEP_Out[3718] = \<const0> ;
  assign LOCKSTEP_Out[3719] = \<const0> ;
  assign LOCKSTEP_Out[3720] = \<const0> ;
  assign LOCKSTEP_Out[3721] = \<const0> ;
  assign LOCKSTEP_Out[3722] = \<const0> ;
  assign LOCKSTEP_Out[3723] = \<const0> ;
  assign LOCKSTEP_Out[3724] = \<const0> ;
  assign LOCKSTEP_Out[3725] = \<const0> ;
  assign LOCKSTEP_Out[3726] = \<const0> ;
  assign LOCKSTEP_Out[3727] = \<const0> ;
  assign LOCKSTEP_Out[3728] = \<const0> ;
  assign LOCKSTEP_Out[3729] = \<const0> ;
  assign LOCKSTEP_Out[3730] = \<const0> ;
  assign LOCKSTEP_Out[3731] = \<const0> ;
  assign LOCKSTEP_Out[3732] = \<const0> ;
  assign LOCKSTEP_Out[3733] = \<const0> ;
  assign LOCKSTEP_Out[3734] = \<const0> ;
  assign LOCKSTEP_Out[3735] = \<const0> ;
  assign LOCKSTEP_Out[3736] = \<const0> ;
  assign LOCKSTEP_Out[3737] = \<const0> ;
  assign LOCKSTEP_Out[3738] = \<const0> ;
  assign LOCKSTEP_Out[3739] = \<const0> ;
  assign LOCKSTEP_Out[3740] = \<const0> ;
  assign LOCKSTEP_Out[3741] = \<const0> ;
  assign LOCKSTEP_Out[3742] = \<const0> ;
  assign LOCKSTEP_Out[3743] = \<const0> ;
  assign LOCKSTEP_Out[3744] = \<const0> ;
  assign LOCKSTEP_Out[3745] = \<const0> ;
  assign LOCKSTEP_Out[3746] = \<const0> ;
  assign LOCKSTEP_Out[3747] = \<const0> ;
  assign LOCKSTEP_Out[3748] = \<const0> ;
  assign LOCKSTEP_Out[3749] = \<const0> ;
  assign LOCKSTEP_Out[3750] = \<const0> ;
  assign LOCKSTEP_Out[3751] = \<const0> ;
  assign LOCKSTEP_Out[3752] = \<const0> ;
  assign LOCKSTEP_Out[3753] = \<const0> ;
  assign LOCKSTEP_Out[3754] = \<const0> ;
  assign LOCKSTEP_Out[3755] = \<const0> ;
  assign LOCKSTEP_Out[3756] = \<const0> ;
  assign LOCKSTEP_Out[3757] = \<const0> ;
  assign LOCKSTEP_Out[3758] = \<const0> ;
  assign LOCKSTEP_Out[3759] = \<const0> ;
  assign LOCKSTEP_Out[3760] = \<const0> ;
  assign LOCKSTEP_Out[3761] = \<const0> ;
  assign LOCKSTEP_Out[3762] = \<const0> ;
  assign LOCKSTEP_Out[3763] = \<const0> ;
  assign LOCKSTEP_Out[3764] = \<const0> ;
  assign LOCKSTEP_Out[3765] = \<const0> ;
  assign LOCKSTEP_Out[3766] = \<const0> ;
  assign LOCKSTEP_Out[3767] = \<const0> ;
  assign LOCKSTEP_Out[3768] = \<const0> ;
  assign LOCKSTEP_Out[3769] = \<const0> ;
  assign LOCKSTEP_Out[3770] = \<const0> ;
  assign LOCKSTEP_Out[3771] = \<const0> ;
  assign LOCKSTEP_Out[3772] = \<const0> ;
  assign LOCKSTEP_Out[3773] = \<const0> ;
  assign LOCKSTEP_Out[3774] = \<const0> ;
  assign LOCKSTEP_Out[3775] = \<const0> ;
  assign LOCKSTEP_Out[3776] = \<const0> ;
  assign LOCKSTEP_Out[3777] = \<const0> ;
  assign LOCKSTEP_Out[3778] = \<const0> ;
  assign LOCKSTEP_Out[3779] = \<const0> ;
  assign LOCKSTEP_Out[3780] = \<const0> ;
  assign LOCKSTEP_Out[3781] = \<const0> ;
  assign LOCKSTEP_Out[3782] = \<const0> ;
  assign LOCKSTEP_Out[3783] = \<const0> ;
  assign LOCKSTEP_Out[3784] = \<const0> ;
  assign LOCKSTEP_Out[3785] = \<const0> ;
  assign LOCKSTEP_Out[3786] = \<const0> ;
  assign LOCKSTEP_Out[3787] = \<const0> ;
  assign LOCKSTEP_Out[3788] = \<const0> ;
  assign LOCKSTEP_Out[3789] = \<const0> ;
  assign LOCKSTEP_Out[3790] = \<const0> ;
  assign LOCKSTEP_Out[3791] = \<const0> ;
  assign LOCKSTEP_Out[3792] = \<const0> ;
  assign LOCKSTEP_Out[3793] = \<const0> ;
  assign LOCKSTEP_Out[3794] = \<const0> ;
  assign LOCKSTEP_Out[3795] = \<const0> ;
  assign LOCKSTEP_Out[3796] = \<const0> ;
  assign LOCKSTEP_Out[3797] = \<const0> ;
  assign LOCKSTEP_Out[3798] = \<const0> ;
  assign LOCKSTEP_Out[3799] = \<const0> ;
  assign LOCKSTEP_Out[3800] = \<const0> ;
  assign LOCKSTEP_Out[3801] = \<const0> ;
  assign LOCKSTEP_Out[3802] = \<const0> ;
  assign LOCKSTEP_Out[3803] = \<const0> ;
  assign LOCKSTEP_Out[3804] = \<const0> ;
  assign LOCKSTEP_Out[3805] = \<const0> ;
  assign LOCKSTEP_Out[3806] = \<const0> ;
  assign LOCKSTEP_Out[3807] = \<const0> ;
  assign LOCKSTEP_Out[3808] = \<const0> ;
  assign LOCKSTEP_Out[3809] = \<const0> ;
  assign LOCKSTEP_Out[3810] = \<const0> ;
  assign LOCKSTEP_Out[3811] = \<const0> ;
  assign LOCKSTEP_Out[3812] = \<const0> ;
  assign LOCKSTEP_Out[3813] = \<const0> ;
  assign LOCKSTEP_Out[3814] = \<const0> ;
  assign LOCKSTEP_Out[3815] = \<const0> ;
  assign LOCKSTEP_Out[3816] = \<const0> ;
  assign LOCKSTEP_Out[3817] = \<const0> ;
  assign LOCKSTEP_Out[3818] = \<const0> ;
  assign LOCKSTEP_Out[3819] = \<const0> ;
  assign LOCKSTEP_Out[3820] = \<const0> ;
  assign LOCKSTEP_Out[3821] = \<const0> ;
  assign LOCKSTEP_Out[3822] = \<const0> ;
  assign LOCKSTEP_Out[3823] = \<const0> ;
  assign LOCKSTEP_Out[3824] = \<const0> ;
  assign LOCKSTEP_Out[3825] = \<const0> ;
  assign LOCKSTEP_Out[3826] = \<const0> ;
  assign LOCKSTEP_Out[3827] = \<const0> ;
  assign LOCKSTEP_Out[3828] = \<const0> ;
  assign LOCKSTEP_Out[3829] = \<const0> ;
  assign LOCKSTEP_Out[3830] = \<const0> ;
  assign LOCKSTEP_Out[3831] = \<const0> ;
  assign LOCKSTEP_Out[3832] = \<const0> ;
  assign LOCKSTEP_Out[3833] = \<const0> ;
  assign LOCKSTEP_Out[3834] = \<const0> ;
  assign LOCKSTEP_Out[3835] = \<const0> ;
  assign LOCKSTEP_Out[3836] = \<const0> ;
  assign LOCKSTEP_Out[3837] = \<const0> ;
  assign LOCKSTEP_Out[3838] = \<const0> ;
  assign LOCKSTEP_Out[3839] = \<const0> ;
  assign LOCKSTEP_Out[3840] = \<const0> ;
  assign LOCKSTEP_Out[3841] = \<const0> ;
  assign LOCKSTEP_Out[3842] = \<const0> ;
  assign LOCKSTEP_Out[3843] = \<const0> ;
  assign LOCKSTEP_Out[3844] = \<const0> ;
  assign LOCKSTEP_Out[3845] = \<const0> ;
  assign LOCKSTEP_Out[3846] = \<const0> ;
  assign LOCKSTEP_Out[3847] = \<const0> ;
  assign LOCKSTEP_Out[3848] = \<const0> ;
  assign LOCKSTEP_Out[3849] = \<const0> ;
  assign LOCKSTEP_Out[3850] = \<const0> ;
  assign LOCKSTEP_Out[3851] = \<const0> ;
  assign LOCKSTEP_Out[3852] = \<const0> ;
  assign LOCKSTEP_Out[3853] = \<const0> ;
  assign LOCKSTEP_Out[3854] = \<const0> ;
  assign LOCKSTEP_Out[3855] = \<const0> ;
  assign LOCKSTEP_Out[3856] = \<const0> ;
  assign LOCKSTEP_Out[3857] = \<const0> ;
  assign LOCKSTEP_Out[3858] = \<const0> ;
  assign LOCKSTEP_Out[3859] = \<const0> ;
  assign LOCKSTEP_Out[3860] = \<const0> ;
  assign LOCKSTEP_Out[3861] = \<const0> ;
  assign LOCKSTEP_Out[3862] = \<const0> ;
  assign LOCKSTEP_Out[3863] = \<const0> ;
  assign LOCKSTEP_Out[3864] = \<const0> ;
  assign LOCKSTEP_Out[3865] = \<const0> ;
  assign LOCKSTEP_Out[3866] = \<const0> ;
  assign LOCKSTEP_Out[3867] = \<const0> ;
  assign LOCKSTEP_Out[3868] = \<const0> ;
  assign LOCKSTEP_Out[3869] = \<const0> ;
  assign LOCKSTEP_Out[3870] = \<const0> ;
  assign LOCKSTEP_Out[3871] = \<const0> ;
  assign LOCKSTEP_Out[3872] = \<const0> ;
  assign LOCKSTEP_Out[3873] = \<const0> ;
  assign LOCKSTEP_Out[3874] = \<const0> ;
  assign LOCKSTEP_Out[3875] = \<const0> ;
  assign LOCKSTEP_Out[3876] = \<const0> ;
  assign LOCKSTEP_Out[3877] = \<const0> ;
  assign LOCKSTEP_Out[3878] = \<const0> ;
  assign LOCKSTEP_Out[3879] = \<const0> ;
  assign LOCKSTEP_Out[3880] = \<const0> ;
  assign LOCKSTEP_Out[3881] = \<const0> ;
  assign LOCKSTEP_Out[3882] = \<const0> ;
  assign LOCKSTEP_Out[3883] = \<const0> ;
  assign LOCKSTEP_Out[3884] = \<const0> ;
  assign LOCKSTEP_Out[3885] = \<const0> ;
  assign LOCKSTEP_Out[3886] = \<const0> ;
  assign LOCKSTEP_Out[3887] = \<const0> ;
  assign LOCKSTEP_Out[3888] = \<const0> ;
  assign LOCKSTEP_Out[3889] = \<const0> ;
  assign LOCKSTEP_Out[3890] = \<const0> ;
  assign LOCKSTEP_Out[3891] = \<const0> ;
  assign LOCKSTEP_Out[3892] = \<const0> ;
  assign LOCKSTEP_Out[3893] = \<const0> ;
  assign LOCKSTEP_Out[3894] = \<const0> ;
  assign LOCKSTEP_Out[3895] = \<const0> ;
  assign LOCKSTEP_Out[3896] = \<const0> ;
  assign LOCKSTEP_Out[3897] = \<const0> ;
  assign LOCKSTEP_Out[3898] = \<const0> ;
  assign LOCKSTEP_Out[3899] = \<const0> ;
  assign LOCKSTEP_Out[3900] = \<const0> ;
  assign LOCKSTEP_Out[3901] = \<const0> ;
  assign LOCKSTEP_Out[3902] = \<const0> ;
  assign LOCKSTEP_Out[3903] = \<const0> ;
  assign LOCKSTEP_Out[3904] = \<const0> ;
  assign LOCKSTEP_Out[3905] = \<const0> ;
  assign LOCKSTEP_Out[3906] = \<const0> ;
  assign LOCKSTEP_Out[3907] = \<const0> ;
  assign LOCKSTEP_Out[3908] = \<const0> ;
  assign LOCKSTEP_Out[3909] = \<const0> ;
  assign LOCKSTEP_Out[3910] = \<const0> ;
  assign LOCKSTEP_Out[3911] = \<const0> ;
  assign LOCKSTEP_Out[3912] = \<const0> ;
  assign LOCKSTEP_Out[3913] = \<const0> ;
  assign LOCKSTEP_Out[3914] = \<const0> ;
  assign LOCKSTEP_Out[3915] = \<const0> ;
  assign LOCKSTEP_Out[3916] = \<const0> ;
  assign LOCKSTEP_Out[3917] = \<const0> ;
  assign LOCKSTEP_Out[3918] = \<const0> ;
  assign LOCKSTEP_Out[3919] = \<const0> ;
  assign LOCKSTEP_Out[3920] = \<const0> ;
  assign LOCKSTEP_Out[3921] = \<const0> ;
  assign LOCKSTEP_Out[3922] = \<const0> ;
  assign LOCKSTEP_Out[3923] = \<const0> ;
  assign LOCKSTEP_Out[3924] = \<const0> ;
  assign LOCKSTEP_Out[3925] = \<const0> ;
  assign LOCKSTEP_Out[3926] = \<const0> ;
  assign LOCKSTEP_Out[3927] = \<const0> ;
  assign LOCKSTEP_Out[3928] = \<const0> ;
  assign LOCKSTEP_Out[3929] = \<const0> ;
  assign LOCKSTEP_Out[3930] = \<const0> ;
  assign LOCKSTEP_Out[3931] = \<const0> ;
  assign LOCKSTEP_Out[3932] = \<const0> ;
  assign LOCKSTEP_Out[3933] = \<const0> ;
  assign LOCKSTEP_Out[3934] = \<const0> ;
  assign LOCKSTEP_Out[3935] = \<const0> ;
  assign LOCKSTEP_Out[3936] = \<const0> ;
  assign LOCKSTEP_Out[3937] = \<const0> ;
  assign LOCKSTEP_Out[3938] = \<const0> ;
  assign LOCKSTEP_Out[3939] = \<const0> ;
  assign LOCKSTEP_Out[3940] = \<const0> ;
  assign LOCKSTEP_Out[3941] = \<const0> ;
  assign LOCKSTEP_Out[3942] = \<const0> ;
  assign LOCKSTEP_Out[3943] = \<const0> ;
  assign LOCKSTEP_Out[3944] = \<const0> ;
  assign LOCKSTEP_Out[3945] = \<const0> ;
  assign LOCKSTEP_Out[3946] = \<const0> ;
  assign LOCKSTEP_Out[3947] = \<const0> ;
  assign LOCKSTEP_Out[3948] = \<const0> ;
  assign LOCKSTEP_Out[3949] = \<const0> ;
  assign LOCKSTEP_Out[3950] = \<const0> ;
  assign LOCKSTEP_Out[3951] = \<const0> ;
  assign LOCKSTEP_Out[3952] = \<const0> ;
  assign LOCKSTEP_Out[3953] = \<const0> ;
  assign LOCKSTEP_Out[3954] = \<const0> ;
  assign LOCKSTEP_Out[3955] = \<const0> ;
  assign LOCKSTEP_Out[3956] = \<const0> ;
  assign LOCKSTEP_Out[3957] = \<const0> ;
  assign LOCKSTEP_Out[3958] = \<const0> ;
  assign LOCKSTEP_Out[3959] = \<const0> ;
  assign LOCKSTEP_Out[3960] = \<const0> ;
  assign LOCKSTEP_Out[3961] = \<const0> ;
  assign LOCKSTEP_Out[3962] = \<const0> ;
  assign LOCKSTEP_Out[3963] = \<const0> ;
  assign LOCKSTEP_Out[3964] = \<const0> ;
  assign LOCKSTEP_Out[3965] = \<const0> ;
  assign LOCKSTEP_Out[3966] = \<const0> ;
  assign LOCKSTEP_Out[3967] = \<const0> ;
  assign LOCKSTEP_Out[3968] = \<const0> ;
  assign LOCKSTEP_Out[3969] = \<const0> ;
  assign LOCKSTEP_Out[3970] = \<const0> ;
  assign LOCKSTEP_Out[3971] = \<const0> ;
  assign LOCKSTEP_Out[3972] = \<const0> ;
  assign LOCKSTEP_Out[3973] = \<const0> ;
  assign LOCKSTEP_Out[3974] = \<const0> ;
  assign LOCKSTEP_Out[3975] = \<const0> ;
  assign LOCKSTEP_Out[3976] = \<const0> ;
  assign LOCKSTEP_Out[3977] = \<const0> ;
  assign LOCKSTEP_Out[3978] = \<const0> ;
  assign LOCKSTEP_Out[3979] = \<const0> ;
  assign LOCKSTEP_Out[3980] = \<const0> ;
  assign LOCKSTEP_Out[3981] = \<const0> ;
  assign LOCKSTEP_Out[3982] = \<const0> ;
  assign LOCKSTEP_Out[3983] = \<const0> ;
  assign LOCKSTEP_Out[3984] = \<const0> ;
  assign LOCKSTEP_Out[3985] = \<const0> ;
  assign LOCKSTEP_Out[3986] = \<const0> ;
  assign LOCKSTEP_Out[3987] = \<const0> ;
  assign LOCKSTEP_Out[3988] = \<const0> ;
  assign LOCKSTEP_Out[3989] = \<const0> ;
  assign LOCKSTEP_Out[3990] = \<const0> ;
  assign LOCKSTEP_Out[3991] = \<const0> ;
  assign LOCKSTEP_Out[3992] = \<const0> ;
  assign LOCKSTEP_Out[3993] = \<const0> ;
  assign LOCKSTEP_Out[3994] = \<const0> ;
  assign LOCKSTEP_Out[3995] = \<const0> ;
  assign LOCKSTEP_Out[3996] = \<const0> ;
  assign LOCKSTEP_Out[3997] = \<const0> ;
  assign LOCKSTEP_Out[3998] = \<const0> ;
  assign LOCKSTEP_Out[3999] = \<const0> ;
  assign LOCKSTEP_Out[4000] = \<const0> ;
  assign LOCKSTEP_Out[4001] = \<const0> ;
  assign LOCKSTEP_Out[4002] = \<const0> ;
  assign LOCKSTEP_Out[4003] = \<const0> ;
  assign LOCKSTEP_Out[4004] = \<const0> ;
  assign LOCKSTEP_Out[4005] = \<const0> ;
  assign LOCKSTEP_Out[4006] = \<const0> ;
  assign LOCKSTEP_Out[4007] = \<const0> ;
  assign LOCKSTEP_Out[4008] = \<const0> ;
  assign LOCKSTEP_Out[4009] = \<const0> ;
  assign LOCKSTEP_Out[4010] = \<const0> ;
  assign LOCKSTEP_Out[4011] = \<const0> ;
  assign LOCKSTEP_Out[4012] = \<const0> ;
  assign LOCKSTEP_Out[4013] = \<const0> ;
  assign LOCKSTEP_Out[4014] = \<const0> ;
  assign LOCKSTEP_Out[4015] = \<const0> ;
  assign LOCKSTEP_Out[4016] = \<const0> ;
  assign LOCKSTEP_Out[4017] = \<const0> ;
  assign LOCKSTEP_Out[4018] = \<const0> ;
  assign LOCKSTEP_Out[4019] = \<const0> ;
  assign LOCKSTEP_Out[4020] = \<const0> ;
  assign LOCKSTEP_Out[4021] = \<const0> ;
  assign LOCKSTEP_Out[4022] = \<const0> ;
  assign LOCKSTEP_Out[4023] = \<const0> ;
  assign LOCKSTEP_Out[4024] = \<const0> ;
  assign LOCKSTEP_Out[4025] = \<const0> ;
  assign LOCKSTEP_Out[4026] = \<const0> ;
  assign LOCKSTEP_Out[4027] = \<const0> ;
  assign LOCKSTEP_Out[4028] = \<const0> ;
  assign LOCKSTEP_Out[4029] = \<const0> ;
  assign LOCKSTEP_Out[4030] = \<const0> ;
  assign LOCKSTEP_Out[4031] = \<const0> ;
  assign LOCKSTEP_Out[4032] = \<const0> ;
  assign LOCKSTEP_Out[4033] = \<const0> ;
  assign LOCKSTEP_Out[4034] = \<const0> ;
  assign LOCKSTEP_Out[4035] = \<const0> ;
  assign LOCKSTEP_Out[4036] = \<const0> ;
  assign LOCKSTEP_Out[4037] = \<const0> ;
  assign LOCKSTEP_Out[4038] = \<const0> ;
  assign LOCKSTEP_Out[4039] = \<const0> ;
  assign LOCKSTEP_Out[4040] = \<const0> ;
  assign LOCKSTEP_Out[4041] = \<const0> ;
  assign LOCKSTEP_Out[4042] = \<const0> ;
  assign LOCKSTEP_Out[4043] = \<const0> ;
  assign LOCKSTEP_Out[4044] = \<const0> ;
  assign LOCKSTEP_Out[4045] = \<const0> ;
  assign LOCKSTEP_Out[4046] = \<const0> ;
  assign LOCKSTEP_Out[4047] = \<const0> ;
  assign LOCKSTEP_Out[4048] = \<const0> ;
  assign LOCKSTEP_Out[4049] = \<const0> ;
  assign LOCKSTEP_Out[4050] = \<const0> ;
  assign LOCKSTEP_Out[4051] = \<const0> ;
  assign LOCKSTEP_Out[4052] = \<const0> ;
  assign LOCKSTEP_Out[4053] = \<const0> ;
  assign LOCKSTEP_Out[4054] = \<const0> ;
  assign LOCKSTEP_Out[4055] = \<const0> ;
  assign LOCKSTEP_Out[4056] = \<const0> ;
  assign LOCKSTEP_Out[4057] = \<const0> ;
  assign LOCKSTEP_Out[4058] = \<const0> ;
  assign LOCKSTEP_Out[4059] = \<const0> ;
  assign LOCKSTEP_Out[4060] = \<const0> ;
  assign LOCKSTEP_Out[4061] = \<const0> ;
  assign LOCKSTEP_Out[4062] = \<const0> ;
  assign LOCKSTEP_Out[4063] = \<const0> ;
  assign LOCKSTEP_Out[4064] = \<const0> ;
  assign LOCKSTEP_Out[4065] = \<const0> ;
  assign LOCKSTEP_Out[4066] = \<const0> ;
  assign LOCKSTEP_Out[4067] = \<const0> ;
  assign LOCKSTEP_Out[4068] = \<const0> ;
  assign LOCKSTEP_Out[4069] = \<const0> ;
  assign LOCKSTEP_Out[4070] = \<const0> ;
  assign LOCKSTEP_Out[4071] = \<const0> ;
  assign LOCKSTEP_Out[4072] = \<const0> ;
  assign LOCKSTEP_Out[4073] = \<const0> ;
  assign LOCKSTEP_Out[4074] = \<const0> ;
  assign LOCKSTEP_Out[4075] = \<const0> ;
  assign LOCKSTEP_Out[4076] = \<const0> ;
  assign LOCKSTEP_Out[4077] = \<const0> ;
  assign LOCKSTEP_Out[4078] = \<const0> ;
  assign LOCKSTEP_Out[4079] = \<const0> ;
  assign LOCKSTEP_Out[4080] = \<const0> ;
  assign LOCKSTEP_Out[4081] = \<const0> ;
  assign LOCKSTEP_Out[4082] = \<const0> ;
  assign LOCKSTEP_Out[4083] = \<const0> ;
  assign LOCKSTEP_Out[4084] = \<const0> ;
  assign LOCKSTEP_Out[4085] = \<const0> ;
  assign LOCKSTEP_Out[4086] = \<const0> ;
  assign LOCKSTEP_Out[4087] = \<const0> ;
  assign LOCKSTEP_Out[4088] = \<const0> ;
  assign LOCKSTEP_Out[4089] = \<const0> ;
  assign LOCKSTEP_Out[4090] = \<const0> ;
  assign LOCKSTEP_Out[4091] = \<const0> ;
  assign LOCKSTEP_Out[4092] = \<const0> ;
  assign LOCKSTEP_Out[4093] = \<const0> ;
  assign LOCKSTEP_Out[4094] = \<const0> ;
  assign LOCKSTEP_Out[4095] = \<const0> ;
  assign M10_AXIS_TDATA[31] = \<const0> ;
  assign M10_AXIS_TDATA[30] = \<const0> ;
  assign M10_AXIS_TDATA[29] = \<const0> ;
  assign M10_AXIS_TDATA[28] = \<const0> ;
  assign M10_AXIS_TDATA[27] = \<const0> ;
  assign M10_AXIS_TDATA[26] = \<const0> ;
  assign M10_AXIS_TDATA[25] = \<const0> ;
  assign M10_AXIS_TDATA[24] = \<const0> ;
  assign M10_AXIS_TDATA[23] = \<const0> ;
  assign M10_AXIS_TDATA[22] = \<const0> ;
  assign M10_AXIS_TDATA[21] = \<const0> ;
  assign M10_AXIS_TDATA[20] = \<const0> ;
  assign M10_AXIS_TDATA[19] = \<const0> ;
  assign M10_AXIS_TDATA[18] = \<const0> ;
  assign M10_AXIS_TDATA[17] = \<const0> ;
  assign M10_AXIS_TDATA[16] = \<const0> ;
  assign M10_AXIS_TDATA[15] = \<const0> ;
  assign M10_AXIS_TDATA[14] = \<const0> ;
  assign M10_AXIS_TDATA[13] = \<const0> ;
  assign M10_AXIS_TDATA[12] = \<const0> ;
  assign M10_AXIS_TDATA[11] = \<const0> ;
  assign M10_AXIS_TDATA[10] = \<const0> ;
  assign M10_AXIS_TDATA[9] = \<const0> ;
  assign M10_AXIS_TDATA[8] = \<const0> ;
  assign M10_AXIS_TDATA[7] = \<const0> ;
  assign M10_AXIS_TDATA[6] = \<const0> ;
  assign M10_AXIS_TDATA[5] = \<const0> ;
  assign M10_AXIS_TDATA[4] = \<const0> ;
  assign M10_AXIS_TDATA[3] = \<const0> ;
  assign M10_AXIS_TDATA[2] = \<const0> ;
  assign M10_AXIS_TDATA[1] = \<const0> ;
  assign M10_AXIS_TDATA[0] = \<const0> ;
  assign M10_AXIS_TLAST = \<const0> ;
  assign M10_AXIS_TVALID = \<const0> ;
  assign M11_AXIS_TDATA[31] = \<const0> ;
  assign M11_AXIS_TDATA[30] = \<const0> ;
  assign M11_AXIS_TDATA[29] = \<const0> ;
  assign M11_AXIS_TDATA[28] = \<const0> ;
  assign M11_AXIS_TDATA[27] = \<const0> ;
  assign M11_AXIS_TDATA[26] = \<const0> ;
  assign M11_AXIS_TDATA[25] = \<const0> ;
  assign M11_AXIS_TDATA[24] = \<const0> ;
  assign M11_AXIS_TDATA[23] = \<const0> ;
  assign M11_AXIS_TDATA[22] = \<const0> ;
  assign M11_AXIS_TDATA[21] = \<const0> ;
  assign M11_AXIS_TDATA[20] = \<const0> ;
  assign M11_AXIS_TDATA[19] = \<const0> ;
  assign M11_AXIS_TDATA[18] = \<const0> ;
  assign M11_AXIS_TDATA[17] = \<const0> ;
  assign M11_AXIS_TDATA[16] = \<const0> ;
  assign M11_AXIS_TDATA[15] = \<const0> ;
  assign M11_AXIS_TDATA[14] = \<const0> ;
  assign M11_AXIS_TDATA[13] = \<const0> ;
  assign M11_AXIS_TDATA[12] = \<const0> ;
  assign M11_AXIS_TDATA[11] = \<const0> ;
  assign M11_AXIS_TDATA[10] = \<const0> ;
  assign M11_AXIS_TDATA[9] = \<const0> ;
  assign M11_AXIS_TDATA[8] = \<const0> ;
  assign M11_AXIS_TDATA[7] = \<const0> ;
  assign M11_AXIS_TDATA[6] = \<const0> ;
  assign M11_AXIS_TDATA[5] = \<const0> ;
  assign M11_AXIS_TDATA[4] = \<const0> ;
  assign M11_AXIS_TDATA[3] = \<const0> ;
  assign M11_AXIS_TDATA[2] = \<const0> ;
  assign M11_AXIS_TDATA[1] = \<const0> ;
  assign M11_AXIS_TDATA[0] = \<const0> ;
  assign M11_AXIS_TLAST = \<const0> ;
  assign M11_AXIS_TVALID = \<const0> ;
  assign M12_AXIS_TDATA[31] = \<const0> ;
  assign M12_AXIS_TDATA[30] = \<const0> ;
  assign M12_AXIS_TDATA[29] = \<const0> ;
  assign M12_AXIS_TDATA[28] = \<const0> ;
  assign M12_AXIS_TDATA[27] = \<const0> ;
  assign M12_AXIS_TDATA[26] = \<const0> ;
  assign M12_AXIS_TDATA[25] = \<const0> ;
  assign M12_AXIS_TDATA[24] = \<const0> ;
  assign M12_AXIS_TDATA[23] = \<const0> ;
  assign M12_AXIS_TDATA[22] = \<const0> ;
  assign M12_AXIS_TDATA[21] = \<const0> ;
  assign M12_AXIS_TDATA[20] = \<const0> ;
  assign M12_AXIS_TDATA[19] = \<const0> ;
  assign M12_AXIS_TDATA[18] = \<const0> ;
  assign M12_AXIS_TDATA[17] = \<const0> ;
  assign M12_AXIS_TDATA[16] = \<const0> ;
  assign M12_AXIS_TDATA[15] = \<const0> ;
  assign M12_AXIS_TDATA[14] = \<const0> ;
  assign M12_AXIS_TDATA[13] = \<const0> ;
  assign M12_AXIS_TDATA[12] = \<const0> ;
  assign M12_AXIS_TDATA[11] = \<const0> ;
  assign M12_AXIS_TDATA[10] = \<const0> ;
  assign M12_AXIS_TDATA[9] = \<const0> ;
  assign M12_AXIS_TDATA[8] = \<const0> ;
  assign M12_AXIS_TDATA[7] = \<const0> ;
  assign M12_AXIS_TDATA[6] = \<const0> ;
  assign M12_AXIS_TDATA[5] = \<const0> ;
  assign M12_AXIS_TDATA[4] = \<const0> ;
  assign M12_AXIS_TDATA[3] = \<const0> ;
  assign M12_AXIS_TDATA[2] = \<const0> ;
  assign M12_AXIS_TDATA[1] = \<const0> ;
  assign M12_AXIS_TDATA[0] = \<const0> ;
  assign M12_AXIS_TLAST = \<const0> ;
  assign M12_AXIS_TVALID = \<const0> ;
  assign M13_AXIS_TDATA[31] = \<const0> ;
  assign M13_AXIS_TDATA[30] = \<const0> ;
  assign M13_AXIS_TDATA[29] = \<const0> ;
  assign M13_AXIS_TDATA[28] = \<const0> ;
  assign M13_AXIS_TDATA[27] = \<const0> ;
  assign M13_AXIS_TDATA[26] = \<const0> ;
  assign M13_AXIS_TDATA[25] = \<const0> ;
  assign M13_AXIS_TDATA[24] = \<const0> ;
  assign M13_AXIS_TDATA[23] = \<const0> ;
  assign M13_AXIS_TDATA[22] = \<const0> ;
  assign M13_AXIS_TDATA[21] = \<const0> ;
  assign M13_AXIS_TDATA[20] = \<const0> ;
  assign M13_AXIS_TDATA[19] = \<const0> ;
  assign M13_AXIS_TDATA[18] = \<const0> ;
  assign M13_AXIS_TDATA[17] = \<const0> ;
  assign M13_AXIS_TDATA[16] = \<const0> ;
  assign M13_AXIS_TDATA[15] = \<const0> ;
  assign M13_AXIS_TDATA[14] = \<const0> ;
  assign M13_AXIS_TDATA[13] = \<const0> ;
  assign M13_AXIS_TDATA[12] = \<const0> ;
  assign M13_AXIS_TDATA[11] = \<const0> ;
  assign M13_AXIS_TDATA[10] = \<const0> ;
  assign M13_AXIS_TDATA[9] = \<const0> ;
  assign M13_AXIS_TDATA[8] = \<const0> ;
  assign M13_AXIS_TDATA[7] = \<const0> ;
  assign M13_AXIS_TDATA[6] = \<const0> ;
  assign M13_AXIS_TDATA[5] = \<const0> ;
  assign M13_AXIS_TDATA[4] = \<const0> ;
  assign M13_AXIS_TDATA[3] = \<const0> ;
  assign M13_AXIS_TDATA[2] = \<const0> ;
  assign M13_AXIS_TDATA[1] = \<const0> ;
  assign M13_AXIS_TDATA[0] = \<const0> ;
  assign M13_AXIS_TLAST = \<const0> ;
  assign M13_AXIS_TVALID = \<const0> ;
  assign M14_AXIS_TDATA[31] = \<const0> ;
  assign M14_AXIS_TDATA[30] = \<const0> ;
  assign M14_AXIS_TDATA[29] = \<const0> ;
  assign M14_AXIS_TDATA[28] = \<const0> ;
  assign M14_AXIS_TDATA[27] = \<const0> ;
  assign M14_AXIS_TDATA[26] = \<const0> ;
  assign M14_AXIS_TDATA[25] = \<const0> ;
  assign M14_AXIS_TDATA[24] = \<const0> ;
  assign M14_AXIS_TDATA[23] = \<const0> ;
  assign M14_AXIS_TDATA[22] = \<const0> ;
  assign M14_AXIS_TDATA[21] = \<const0> ;
  assign M14_AXIS_TDATA[20] = \<const0> ;
  assign M14_AXIS_TDATA[19] = \<const0> ;
  assign M14_AXIS_TDATA[18] = \<const0> ;
  assign M14_AXIS_TDATA[17] = \<const0> ;
  assign M14_AXIS_TDATA[16] = \<const0> ;
  assign M14_AXIS_TDATA[15] = \<const0> ;
  assign M14_AXIS_TDATA[14] = \<const0> ;
  assign M14_AXIS_TDATA[13] = \<const0> ;
  assign M14_AXIS_TDATA[12] = \<const0> ;
  assign M14_AXIS_TDATA[11] = \<const0> ;
  assign M14_AXIS_TDATA[10] = \<const0> ;
  assign M14_AXIS_TDATA[9] = \<const0> ;
  assign M14_AXIS_TDATA[8] = \<const0> ;
  assign M14_AXIS_TDATA[7] = \<const0> ;
  assign M14_AXIS_TDATA[6] = \<const0> ;
  assign M14_AXIS_TDATA[5] = \<const0> ;
  assign M14_AXIS_TDATA[4] = \<const0> ;
  assign M14_AXIS_TDATA[3] = \<const0> ;
  assign M14_AXIS_TDATA[2] = \<const0> ;
  assign M14_AXIS_TDATA[1] = \<const0> ;
  assign M14_AXIS_TDATA[0] = \<const0> ;
  assign M14_AXIS_TLAST = \<const0> ;
  assign M14_AXIS_TVALID = \<const0> ;
  assign M15_AXIS_TDATA[31] = \<const0> ;
  assign M15_AXIS_TDATA[30] = \<const0> ;
  assign M15_AXIS_TDATA[29] = \<const0> ;
  assign M15_AXIS_TDATA[28] = \<const0> ;
  assign M15_AXIS_TDATA[27] = \<const0> ;
  assign M15_AXIS_TDATA[26] = \<const0> ;
  assign M15_AXIS_TDATA[25] = \<const0> ;
  assign M15_AXIS_TDATA[24] = \<const0> ;
  assign M15_AXIS_TDATA[23] = \<const0> ;
  assign M15_AXIS_TDATA[22] = \<const0> ;
  assign M15_AXIS_TDATA[21] = \<const0> ;
  assign M15_AXIS_TDATA[20] = \<const0> ;
  assign M15_AXIS_TDATA[19] = \<const0> ;
  assign M15_AXIS_TDATA[18] = \<const0> ;
  assign M15_AXIS_TDATA[17] = \<const0> ;
  assign M15_AXIS_TDATA[16] = \<const0> ;
  assign M15_AXIS_TDATA[15] = \<const0> ;
  assign M15_AXIS_TDATA[14] = \<const0> ;
  assign M15_AXIS_TDATA[13] = \<const0> ;
  assign M15_AXIS_TDATA[12] = \<const0> ;
  assign M15_AXIS_TDATA[11] = \<const0> ;
  assign M15_AXIS_TDATA[10] = \<const0> ;
  assign M15_AXIS_TDATA[9] = \<const0> ;
  assign M15_AXIS_TDATA[8] = \<const0> ;
  assign M15_AXIS_TDATA[7] = \<const0> ;
  assign M15_AXIS_TDATA[6] = \<const0> ;
  assign M15_AXIS_TDATA[5] = \<const0> ;
  assign M15_AXIS_TDATA[4] = \<const0> ;
  assign M15_AXIS_TDATA[3] = \<const0> ;
  assign M15_AXIS_TDATA[2] = \<const0> ;
  assign M15_AXIS_TDATA[1] = \<const0> ;
  assign M15_AXIS_TDATA[0] = \<const0> ;
  assign M15_AXIS_TLAST = \<const0> ;
  assign M15_AXIS_TVALID = \<const0> ;
  assign M2_AXIS_TDATA[31] = \<const0> ;
  assign M2_AXIS_TDATA[30] = \<const0> ;
  assign M2_AXIS_TDATA[29] = \<const0> ;
  assign M2_AXIS_TDATA[28] = \<const0> ;
  assign M2_AXIS_TDATA[27] = \<const0> ;
  assign M2_AXIS_TDATA[26] = \<const0> ;
  assign M2_AXIS_TDATA[25] = \<const0> ;
  assign M2_AXIS_TDATA[24] = \<const0> ;
  assign M2_AXIS_TDATA[23] = \<const0> ;
  assign M2_AXIS_TDATA[22] = \<const0> ;
  assign M2_AXIS_TDATA[21] = \<const0> ;
  assign M2_AXIS_TDATA[20] = \<const0> ;
  assign M2_AXIS_TDATA[19] = \<const0> ;
  assign M2_AXIS_TDATA[18] = \<const0> ;
  assign M2_AXIS_TDATA[17] = \<const0> ;
  assign M2_AXIS_TDATA[16] = \<const0> ;
  assign M2_AXIS_TDATA[15] = \<const0> ;
  assign M2_AXIS_TDATA[14] = \<const0> ;
  assign M2_AXIS_TDATA[13] = \<const0> ;
  assign M2_AXIS_TDATA[12] = \<const0> ;
  assign M2_AXIS_TDATA[11] = \<const0> ;
  assign M2_AXIS_TDATA[10] = \<const0> ;
  assign M2_AXIS_TDATA[9] = \<const0> ;
  assign M2_AXIS_TDATA[8] = \<const0> ;
  assign M2_AXIS_TDATA[7] = \<const0> ;
  assign M2_AXIS_TDATA[6] = \<const0> ;
  assign M2_AXIS_TDATA[5] = \<const0> ;
  assign M2_AXIS_TDATA[4] = \<const0> ;
  assign M2_AXIS_TDATA[3] = \<const0> ;
  assign M2_AXIS_TDATA[2] = \<const0> ;
  assign M2_AXIS_TDATA[1] = \<const0> ;
  assign M2_AXIS_TDATA[0] = \<const0> ;
  assign M2_AXIS_TLAST = \<const0> ;
  assign M2_AXIS_TVALID = \<const0> ;
  assign M3_AXIS_TDATA[31] = \<const0> ;
  assign M3_AXIS_TDATA[30] = \<const0> ;
  assign M3_AXIS_TDATA[29] = \<const0> ;
  assign M3_AXIS_TDATA[28] = \<const0> ;
  assign M3_AXIS_TDATA[27] = \<const0> ;
  assign M3_AXIS_TDATA[26] = \<const0> ;
  assign M3_AXIS_TDATA[25] = \<const0> ;
  assign M3_AXIS_TDATA[24] = \<const0> ;
  assign M3_AXIS_TDATA[23] = \<const0> ;
  assign M3_AXIS_TDATA[22] = \<const0> ;
  assign M3_AXIS_TDATA[21] = \<const0> ;
  assign M3_AXIS_TDATA[20] = \<const0> ;
  assign M3_AXIS_TDATA[19] = \<const0> ;
  assign M3_AXIS_TDATA[18] = \<const0> ;
  assign M3_AXIS_TDATA[17] = \<const0> ;
  assign M3_AXIS_TDATA[16] = \<const0> ;
  assign M3_AXIS_TDATA[15] = \<const0> ;
  assign M3_AXIS_TDATA[14] = \<const0> ;
  assign M3_AXIS_TDATA[13] = \<const0> ;
  assign M3_AXIS_TDATA[12] = \<const0> ;
  assign M3_AXIS_TDATA[11] = \<const0> ;
  assign M3_AXIS_TDATA[10] = \<const0> ;
  assign M3_AXIS_TDATA[9] = \<const0> ;
  assign M3_AXIS_TDATA[8] = \<const0> ;
  assign M3_AXIS_TDATA[7] = \<const0> ;
  assign M3_AXIS_TDATA[6] = \<const0> ;
  assign M3_AXIS_TDATA[5] = \<const0> ;
  assign M3_AXIS_TDATA[4] = \<const0> ;
  assign M3_AXIS_TDATA[3] = \<const0> ;
  assign M3_AXIS_TDATA[2] = \<const0> ;
  assign M3_AXIS_TDATA[1] = \<const0> ;
  assign M3_AXIS_TDATA[0] = \<const0> ;
  assign M3_AXIS_TLAST = \<const0> ;
  assign M3_AXIS_TVALID = \<const0> ;
  assign M4_AXIS_TDATA[31] = \<const0> ;
  assign M4_AXIS_TDATA[30] = \<const0> ;
  assign M4_AXIS_TDATA[29] = \<const0> ;
  assign M4_AXIS_TDATA[28] = \<const0> ;
  assign M4_AXIS_TDATA[27] = \<const0> ;
  assign M4_AXIS_TDATA[26] = \<const0> ;
  assign M4_AXIS_TDATA[25] = \<const0> ;
  assign M4_AXIS_TDATA[24] = \<const0> ;
  assign M4_AXIS_TDATA[23] = \<const0> ;
  assign M4_AXIS_TDATA[22] = \<const0> ;
  assign M4_AXIS_TDATA[21] = \<const0> ;
  assign M4_AXIS_TDATA[20] = \<const0> ;
  assign M4_AXIS_TDATA[19] = \<const0> ;
  assign M4_AXIS_TDATA[18] = \<const0> ;
  assign M4_AXIS_TDATA[17] = \<const0> ;
  assign M4_AXIS_TDATA[16] = \<const0> ;
  assign M4_AXIS_TDATA[15] = \<const0> ;
  assign M4_AXIS_TDATA[14] = \<const0> ;
  assign M4_AXIS_TDATA[13] = \<const0> ;
  assign M4_AXIS_TDATA[12] = \<const0> ;
  assign M4_AXIS_TDATA[11] = \<const0> ;
  assign M4_AXIS_TDATA[10] = \<const0> ;
  assign M4_AXIS_TDATA[9] = \<const0> ;
  assign M4_AXIS_TDATA[8] = \<const0> ;
  assign M4_AXIS_TDATA[7] = \<const0> ;
  assign M4_AXIS_TDATA[6] = \<const0> ;
  assign M4_AXIS_TDATA[5] = \<const0> ;
  assign M4_AXIS_TDATA[4] = \<const0> ;
  assign M4_AXIS_TDATA[3] = \<const0> ;
  assign M4_AXIS_TDATA[2] = \<const0> ;
  assign M4_AXIS_TDATA[1] = \<const0> ;
  assign M4_AXIS_TDATA[0] = \<const0> ;
  assign M4_AXIS_TLAST = \<const0> ;
  assign M4_AXIS_TVALID = \<const0> ;
  assign M5_AXIS_TDATA[31] = \<const0> ;
  assign M5_AXIS_TDATA[30] = \<const0> ;
  assign M5_AXIS_TDATA[29] = \<const0> ;
  assign M5_AXIS_TDATA[28] = \<const0> ;
  assign M5_AXIS_TDATA[27] = \<const0> ;
  assign M5_AXIS_TDATA[26] = \<const0> ;
  assign M5_AXIS_TDATA[25] = \<const0> ;
  assign M5_AXIS_TDATA[24] = \<const0> ;
  assign M5_AXIS_TDATA[23] = \<const0> ;
  assign M5_AXIS_TDATA[22] = \<const0> ;
  assign M5_AXIS_TDATA[21] = \<const0> ;
  assign M5_AXIS_TDATA[20] = \<const0> ;
  assign M5_AXIS_TDATA[19] = \<const0> ;
  assign M5_AXIS_TDATA[18] = \<const0> ;
  assign M5_AXIS_TDATA[17] = \<const0> ;
  assign M5_AXIS_TDATA[16] = \<const0> ;
  assign M5_AXIS_TDATA[15] = \<const0> ;
  assign M5_AXIS_TDATA[14] = \<const0> ;
  assign M5_AXIS_TDATA[13] = \<const0> ;
  assign M5_AXIS_TDATA[12] = \<const0> ;
  assign M5_AXIS_TDATA[11] = \<const0> ;
  assign M5_AXIS_TDATA[10] = \<const0> ;
  assign M5_AXIS_TDATA[9] = \<const0> ;
  assign M5_AXIS_TDATA[8] = \<const0> ;
  assign M5_AXIS_TDATA[7] = \<const0> ;
  assign M5_AXIS_TDATA[6] = \<const0> ;
  assign M5_AXIS_TDATA[5] = \<const0> ;
  assign M5_AXIS_TDATA[4] = \<const0> ;
  assign M5_AXIS_TDATA[3] = \<const0> ;
  assign M5_AXIS_TDATA[2] = \<const0> ;
  assign M5_AXIS_TDATA[1] = \<const0> ;
  assign M5_AXIS_TDATA[0] = \<const0> ;
  assign M5_AXIS_TLAST = \<const0> ;
  assign M5_AXIS_TVALID = \<const0> ;
  assign M6_AXIS_TDATA[31] = \<const0> ;
  assign M6_AXIS_TDATA[30] = \<const0> ;
  assign M6_AXIS_TDATA[29] = \<const0> ;
  assign M6_AXIS_TDATA[28] = \<const0> ;
  assign M6_AXIS_TDATA[27] = \<const0> ;
  assign M6_AXIS_TDATA[26] = \<const0> ;
  assign M6_AXIS_TDATA[25] = \<const0> ;
  assign M6_AXIS_TDATA[24] = \<const0> ;
  assign M6_AXIS_TDATA[23] = \<const0> ;
  assign M6_AXIS_TDATA[22] = \<const0> ;
  assign M6_AXIS_TDATA[21] = \<const0> ;
  assign M6_AXIS_TDATA[20] = \<const0> ;
  assign M6_AXIS_TDATA[19] = \<const0> ;
  assign M6_AXIS_TDATA[18] = \<const0> ;
  assign M6_AXIS_TDATA[17] = \<const0> ;
  assign M6_AXIS_TDATA[16] = \<const0> ;
  assign M6_AXIS_TDATA[15] = \<const0> ;
  assign M6_AXIS_TDATA[14] = \<const0> ;
  assign M6_AXIS_TDATA[13] = \<const0> ;
  assign M6_AXIS_TDATA[12] = \<const0> ;
  assign M6_AXIS_TDATA[11] = \<const0> ;
  assign M6_AXIS_TDATA[10] = \<const0> ;
  assign M6_AXIS_TDATA[9] = \<const0> ;
  assign M6_AXIS_TDATA[8] = \<const0> ;
  assign M6_AXIS_TDATA[7] = \<const0> ;
  assign M6_AXIS_TDATA[6] = \<const0> ;
  assign M6_AXIS_TDATA[5] = \<const0> ;
  assign M6_AXIS_TDATA[4] = \<const0> ;
  assign M6_AXIS_TDATA[3] = \<const0> ;
  assign M6_AXIS_TDATA[2] = \<const0> ;
  assign M6_AXIS_TDATA[1] = \<const0> ;
  assign M6_AXIS_TDATA[0] = \<const0> ;
  assign M6_AXIS_TLAST = \<const0> ;
  assign M6_AXIS_TVALID = \<const0> ;
  assign M7_AXIS_TDATA[31] = \<const0> ;
  assign M7_AXIS_TDATA[30] = \<const0> ;
  assign M7_AXIS_TDATA[29] = \<const0> ;
  assign M7_AXIS_TDATA[28] = \<const0> ;
  assign M7_AXIS_TDATA[27] = \<const0> ;
  assign M7_AXIS_TDATA[26] = \<const0> ;
  assign M7_AXIS_TDATA[25] = \<const0> ;
  assign M7_AXIS_TDATA[24] = \<const0> ;
  assign M7_AXIS_TDATA[23] = \<const0> ;
  assign M7_AXIS_TDATA[22] = \<const0> ;
  assign M7_AXIS_TDATA[21] = \<const0> ;
  assign M7_AXIS_TDATA[20] = \<const0> ;
  assign M7_AXIS_TDATA[19] = \<const0> ;
  assign M7_AXIS_TDATA[18] = \<const0> ;
  assign M7_AXIS_TDATA[17] = \<const0> ;
  assign M7_AXIS_TDATA[16] = \<const0> ;
  assign M7_AXIS_TDATA[15] = \<const0> ;
  assign M7_AXIS_TDATA[14] = \<const0> ;
  assign M7_AXIS_TDATA[13] = \<const0> ;
  assign M7_AXIS_TDATA[12] = \<const0> ;
  assign M7_AXIS_TDATA[11] = \<const0> ;
  assign M7_AXIS_TDATA[10] = \<const0> ;
  assign M7_AXIS_TDATA[9] = \<const0> ;
  assign M7_AXIS_TDATA[8] = \<const0> ;
  assign M7_AXIS_TDATA[7] = \<const0> ;
  assign M7_AXIS_TDATA[6] = \<const0> ;
  assign M7_AXIS_TDATA[5] = \<const0> ;
  assign M7_AXIS_TDATA[4] = \<const0> ;
  assign M7_AXIS_TDATA[3] = \<const0> ;
  assign M7_AXIS_TDATA[2] = \<const0> ;
  assign M7_AXIS_TDATA[1] = \<const0> ;
  assign M7_AXIS_TDATA[0] = \<const0> ;
  assign M7_AXIS_TLAST = \<const0> ;
  assign M7_AXIS_TVALID = \<const0> ;
  assign M8_AXIS_TDATA[31] = \<const0> ;
  assign M8_AXIS_TDATA[30] = \<const0> ;
  assign M8_AXIS_TDATA[29] = \<const0> ;
  assign M8_AXIS_TDATA[28] = \<const0> ;
  assign M8_AXIS_TDATA[27] = \<const0> ;
  assign M8_AXIS_TDATA[26] = \<const0> ;
  assign M8_AXIS_TDATA[25] = \<const0> ;
  assign M8_AXIS_TDATA[24] = \<const0> ;
  assign M8_AXIS_TDATA[23] = \<const0> ;
  assign M8_AXIS_TDATA[22] = \<const0> ;
  assign M8_AXIS_TDATA[21] = \<const0> ;
  assign M8_AXIS_TDATA[20] = \<const0> ;
  assign M8_AXIS_TDATA[19] = \<const0> ;
  assign M8_AXIS_TDATA[18] = \<const0> ;
  assign M8_AXIS_TDATA[17] = \<const0> ;
  assign M8_AXIS_TDATA[16] = \<const0> ;
  assign M8_AXIS_TDATA[15] = \<const0> ;
  assign M8_AXIS_TDATA[14] = \<const0> ;
  assign M8_AXIS_TDATA[13] = \<const0> ;
  assign M8_AXIS_TDATA[12] = \<const0> ;
  assign M8_AXIS_TDATA[11] = \<const0> ;
  assign M8_AXIS_TDATA[10] = \<const0> ;
  assign M8_AXIS_TDATA[9] = \<const0> ;
  assign M8_AXIS_TDATA[8] = \<const0> ;
  assign M8_AXIS_TDATA[7] = \<const0> ;
  assign M8_AXIS_TDATA[6] = \<const0> ;
  assign M8_AXIS_TDATA[5] = \<const0> ;
  assign M8_AXIS_TDATA[4] = \<const0> ;
  assign M8_AXIS_TDATA[3] = \<const0> ;
  assign M8_AXIS_TDATA[2] = \<const0> ;
  assign M8_AXIS_TDATA[1] = \<const0> ;
  assign M8_AXIS_TDATA[0] = \<const0> ;
  assign M8_AXIS_TLAST = \<const0> ;
  assign M8_AXIS_TVALID = \<const0> ;
  assign M9_AXIS_TDATA[31] = \<const0> ;
  assign M9_AXIS_TDATA[30] = \<const0> ;
  assign M9_AXIS_TDATA[29] = \<const0> ;
  assign M9_AXIS_TDATA[28] = \<const0> ;
  assign M9_AXIS_TDATA[27] = \<const0> ;
  assign M9_AXIS_TDATA[26] = \<const0> ;
  assign M9_AXIS_TDATA[25] = \<const0> ;
  assign M9_AXIS_TDATA[24] = \<const0> ;
  assign M9_AXIS_TDATA[23] = \<const0> ;
  assign M9_AXIS_TDATA[22] = \<const0> ;
  assign M9_AXIS_TDATA[21] = \<const0> ;
  assign M9_AXIS_TDATA[20] = \<const0> ;
  assign M9_AXIS_TDATA[19] = \<const0> ;
  assign M9_AXIS_TDATA[18] = \<const0> ;
  assign M9_AXIS_TDATA[17] = \<const0> ;
  assign M9_AXIS_TDATA[16] = \<const0> ;
  assign M9_AXIS_TDATA[15] = \<const0> ;
  assign M9_AXIS_TDATA[14] = \<const0> ;
  assign M9_AXIS_TDATA[13] = \<const0> ;
  assign M9_AXIS_TDATA[12] = \<const0> ;
  assign M9_AXIS_TDATA[11] = \<const0> ;
  assign M9_AXIS_TDATA[10] = \<const0> ;
  assign M9_AXIS_TDATA[9] = \<const0> ;
  assign M9_AXIS_TDATA[8] = \<const0> ;
  assign M9_AXIS_TDATA[7] = \<const0> ;
  assign M9_AXIS_TDATA[6] = \<const0> ;
  assign M9_AXIS_TDATA[5] = \<const0> ;
  assign M9_AXIS_TDATA[4] = \<const0> ;
  assign M9_AXIS_TDATA[3] = \<const0> ;
  assign M9_AXIS_TDATA[2] = \<const0> ;
  assign M9_AXIS_TDATA[1] = \<const0> ;
  assign M9_AXIS_TDATA[0] = \<const0> ;
  assign M9_AXIS_TLAST = \<const0> ;
  assign M9_AXIS_TVALID = \<const0> ;
  assign MB_Error = \<const0> ;
  assign M_AXI_DC_ACREADY = \<const0> ;
  assign M_AXI_DC_ARADDR[31] = \<const0> ;
  assign M_AXI_DC_ARADDR[30] = \<const0> ;
  assign M_AXI_DC_ARADDR[29] = \<const0> ;
  assign M_AXI_DC_ARADDR[28] = \<const0> ;
  assign M_AXI_DC_ARADDR[27] = \<const0> ;
  assign M_AXI_DC_ARADDR[26] = \<const0> ;
  assign M_AXI_DC_ARADDR[25] = \<const0> ;
  assign M_AXI_DC_ARADDR[24] = \<const0> ;
  assign M_AXI_DC_ARADDR[23] = \<const0> ;
  assign M_AXI_DC_ARADDR[22] = \<const0> ;
  assign M_AXI_DC_ARADDR[21] = \<const0> ;
  assign M_AXI_DC_ARADDR[20] = \<const0> ;
  assign M_AXI_DC_ARADDR[19] = \<const0> ;
  assign M_AXI_DC_ARADDR[18] = \<const0> ;
  assign M_AXI_DC_ARADDR[17] = \<const0> ;
  assign M_AXI_DC_ARADDR[16] = \<const0> ;
  assign M_AXI_DC_ARADDR[15] = \<const0> ;
  assign M_AXI_DC_ARADDR[14] = \<const0> ;
  assign M_AXI_DC_ARADDR[13] = \<const0> ;
  assign M_AXI_DC_ARADDR[12] = \<const0> ;
  assign M_AXI_DC_ARADDR[11] = \<const0> ;
  assign M_AXI_DC_ARADDR[10] = \<const0> ;
  assign M_AXI_DC_ARADDR[9] = \<const0> ;
  assign M_AXI_DC_ARADDR[8] = \<const0> ;
  assign M_AXI_DC_ARADDR[7] = \<const0> ;
  assign M_AXI_DC_ARADDR[6] = \<const0> ;
  assign M_AXI_DC_ARADDR[5] = \<const0> ;
  assign M_AXI_DC_ARADDR[4] = \<const0> ;
  assign M_AXI_DC_ARADDR[3] = \<const0> ;
  assign M_AXI_DC_ARADDR[2] = \<const0> ;
  assign M_AXI_DC_ARADDR[1] = \<const0> ;
  assign M_AXI_DC_ARADDR[0] = \<const0> ;
  assign M_AXI_DC_ARBAR[1] = \<const0> ;
  assign M_AXI_DC_ARBAR[0] = \<const0> ;
  assign M_AXI_DC_ARBURST[1] = \<const0> ;
  assign M_AXI_DC_ARBURST[0] = \<const0> ;
  assign M_AXI_DC_ARCACHE[3] = \<const0> ;
  assign M_AXI_DC_ARCACHE[2] = \<const0> ;
  assign M_AXI_DC_ARCACHE[1] = \<const0> ;
  assign M_AXI_DC_ARCACHE[0] = \<const0> ;
  assign M_AXI_DC_ARDOMAIN[1] = \<const0> ;
  assign M_AXI_DC_ARDOMAIN[0] = \<const0> ;
  assign M_AXI_DC_ARID[0] = \<const0> ;
  assign M_AXI_DC_ARLEN[7] = \<const0> ;
  assign M_AXI_DC_ARLEN[6] = \<const0> ;
  assign M_AXI_DC_ARLEN[5] = \<const0> ;
  assign M_AXI_DC_ARLEN[4] = \<const0> ;
  assign M_AXI_DC_ARLEN[3] = \<const0> ;
  assign M_AXI_DC_ARLEN[2] = \<const0> ;
  assign M_AXI_DC_ARLEN[1] = \<const0> ;
  assign M_AXI_DC_ARLEN[0] = \<const0> ;
  assign M_AXI_DC_ARLOCK = \<const0> ;
  assign M_AXI_DC_ARPROT[2] = \<const0> ;
  assign M_AXI_DC_ARPROT[1] = \<const0> ;
  assign M_AXI_DC_ARPROT[0] = \<const0> ;
  assign M_AXI_DC_ARQOS[3] = \<const0> ;
  assign M_AXI_DC_ARQOS[2] = \<const0> ;
  assign M_AXI_DC_ARQOS[1] = \<const0> ;
  assign M_AXI_DC_ARQOS[0] = \<const0> ;
  assign M_AXI_DC_ARSIZE[2] = \<const0> ;
  assign M_AXI_DC_ARSIZE[1] = \<const0> ;
  assign M_AXI_DC_ARSIZE[0] = \<const0> ;
  assign M_AXI_DC_ARSNOOP[3] = \<const0> ;
  assign M_AXI_DC_ARSNOOP[2] = \<const0> ;
  assign M_AXI_DC_ARSNOOP[1] = \<const0> ;
  assign M_AXI_DC_ARSNOOP[0] = \<const0> ;
  assign M_AXI_DC_ARUSER[4] = \<const0> ;
  assign M_AXI_DC_ARUSER[3] = \<const0> ;
  assign M_AXI_DC_ARUSER[2] = \<const0> ;
  assign M_AXI_DC_ARUSER[1] = \<const0> ;
  assign M_AXI_DC_ARUSER[0] = \<const0> ;
  assign M_AXI_DC_ARVALID = \<const0> ;
  assign M_AXI_DC_AWADDR[31] = \<const0> ;
  assign M_AXI_DC_AWADDR[30] = \<const0> ;
  assign M_AXI_DC_AWADDR[29] = \<const0> ;
  assign M_AXI_DC_AWADDR[28] = \<const0> ;
  assign M_AXI_DC_AWADDR[27] = \<const0> ;
  assign M_AXI_DC_AWADDR[26] = \<const0> ;
  assign M_AXI_DC_AWADDR[25] = \<const0> ;
  assign M_AXI_DC_AWADDR[24] = \<const0> ;
  assign M_AXI_DC_AWADDR[23] = \<const0> ;
  assign M_AXI_DC_AWADDR[22] = \<const0> ;
  assign M_AXI_DC_AWADDR[21] = \<const0> ;
  assign M_AXI_DC_AWADDR[20] = \<const0> ;
  assign M_AXI_DC_AWADDR[19] = \<const0> ;
  assign M_AXI_DC_AWADDR[18] = \<const0> ;
  assign M_AXI_DC_AWADDR[17] = \<const0> ;
  assign M_AXI_DC_AWADDR[16] = \<const0> ;
  assign M_AXI_DC_AWADDR[15] = \<const0> ;
  assign M_AXI_DC_AWADDR[14] = \<const0> ;
  assign M_AXI_DC_AWADDR[13] = \<const0> ;
  assign M_AXI_DC_AWADDR[12] = \<const0> ;
  assign M_AXI_DC_AWADDR[11] = \<const0> ;
  assign M_AXI_DC_AWADDR[10] = \<const0> ;
  assign M_AXI_DC_AWADDR[9] = \<const0> ;
  assign M_AXI_DC_AWADDR[8] = \<const0> ;
  assign M_AXI_DC_AWADDR[7] = \<const0> ;
  assign M_AXI_DC_AWADDR[6] = \<const0> ;
  assign M_AXI_DC_AWADDR[5] = \<const0> ;
  assign M_AXI_DC_AWADDR[4] = \<const0> ;
  assign M_AXI_DC_AWADDR[3] = \<const0> ;
  assign M_AXI_DC_AWADDR[2] = \<const0> ;
  assign M_AXI_DC_AWADDR[1] = \<const0> ;
  assign M_AXI_DC_AWADDR[0] = \<const0> ;
  assign M_AXI_DC_AWBAR[1] = \<const0> ;
  assign M_AXI_DC_AWBAR[0] = \<const0> ;
  assign M_AXI_DC_AWBURST[1] = \<const0> ;
  assign M_AXI_DC_AWBURST[0] = \<const0> ;
  assign M_AXI_DC_AWCACHE[3] = \<const0> ;
  assign M_AXI_DC_AWCACHE[2] = \<const0> ;
  assign M_AXI_DC_AWCACHE[1] = \<const0> ;
  assign M_AXI_DC_AWCACHE[0] = \<const0> ;
  assign M_AXI_DC_AWDOMAIN[1] = \<const0> ;
  assign M_AXI_DC_AWDOMAIN[0] = \<const0> ;
  assign M_AXI_DC_AWID[0] = \<const0> ;
  assign M_AXI_DC_AWLEN[7] = \<const0> ;
  assign M_AXI_DC_AWLEN[6] = \<const0> ;
  assign M_AXI_DC_AWLEN[5] = \<const0> ;
  assign M_AXI_DC_AWLEN[4] = \<const0> ;
  assign M_AXI_DC_AWLEN[3] = \<const0> ;
  assign M_AXI_DC_AWLEN[2] = \<const0> ;
  assign M_AXI_DC_AWLEN[1] = \<const0> ;
  assign M_AXI_DC_AWLEN[0] = \<const0> ;
  assign M_AXI_DC_AWLOCK = \<const0> ;
  assign M_AXI_DC_AWPROT[2] = \<const0> ;
  assign M_AXI_DC_AWPROT[1] = \<const0> ;
  assign M_AXI_DC_AWPROT[0] = \<const0> ;
  assign M_AXI_DC_AWQOS[3] = \<const0> ;
  assign M_AXI_DC_AWQOS[2] = \<const0> ;
  assign M_AXI_DC_AWQOS[1] = \<const0> ;
  assign M_AXI_DC_AWQOS[0] = \<const0> ;
  assign M_AXI_DC_AWSIZE[2] = \<const0> ;
  assign M_AXI_DC_AWSIZE[1] = \<const0> ;
  assign M_AXI_DC_AWSIZE[0] = \<const0> ;
  assign M_AXI_DC_AWSNOOP[2] = \<const0> ;
  assign M_AXI_DC_AWSNOOP[1] = \<const0> ;
  assign M_AXI_DC_AWSNOOP[0] = \<const0> ;
  assign M_AXI_DC_AWUSER[4] = \<const0> ;
  assign M_AXI_DC_AWUSER[3] = \<const0> ;
  assign M_AXI_DC_AWUSER[2] = \<const0> ;
  assign M_AXI_DC_AWUSER[1] = \<const0> ;
  assign M_AXI_DC_AWUSER[0] = \<const0> ;
  assign M_AXI_DC_AWVALID = \<const0> ;
  assign M_AXI_DC_BREADY = \<const0> ;
  assign M_AXI_DC_CDDATA[31] = \<const0> ;
  assign M_AXI_DC_CDDATA[30] = \<const0> ;
  assign M_AXI_DC_CDDATA[29] = \<const0> ;
  assign M_AXI_DC_CDDATA[28] = \<const0> ;
  assign M_AXI_DC_CDDATA[27] = \<const0> ;
  assign M_AXI_DC_CDDATA[26] = \<const0> ;
  assign M_AXI_DC_CDDATA[25] = \<const0> ;
  assign M_AXI_DC_CDDATA[24] = \<const0> ;
  assign M_AXI_DC_CDDATA[23] = \<const0> ;
  assign M_AXI_DC_CDDATA[22] = \<const0> ;
  assign M_AXI_DC_CDDATA[21] = \<const0> ;
  assign M_AXI_DC_CDDATA[20] = \<const0> ;
  assign M_AXI_DC_CDDATA[19] = \<const0> ;
  assign M_AXI_DC_CDDATA[18] = \<const0> ;
  assign M_AXI_DC_CDDATA[17] = \<const0> ;
  assign M_AXI_DC_CDDATA[16] = \<const0> ;
  assign M_AXI_DC_CDDATA[15] = \<const0> ;
  assign M_AXI_DC_CDDATA[14] = \<const0> ;
  assign M_AXI_DC_CDDATA[13] = \<const0> ;
  assign M_AXI_DC_CDDATA[12] = \<const0> ;
  assign M_AXI_DC_CDDATA[11] = \<const0> ;
  assign M_AXI_DC_CDDATA[10] = \<const0> ;
  assign M_AXI_DC_CDDATA[9] = \<const0> ;
  assign M_AXI_DC_CDDATA[8] = \<const0> ;
  assign M_AXI_DC_CDDATA[7] = \<const0> ;
  assign M_AXI_DC_CDDATA[6] = \<const0> ;
  assign M_AXI_DC_CDDATA[5] = \<const0> ;
  assign M_AXI_DC_CDDATA[4] = \<const0> ;
  assign M_AXI_DC_CDDATA[3] = \<const0> ;
  assign M_AXI_DC_CDDATA[2] = \<const0> ;
  assign M_AXI_DC_CDDATA[1] = \<const0> ;
  assign M_AXI_DC_CDDATA[0] = \<const0> ;
  assign M_AXI_DC_CDLAST = \<const0> ;
  assign M_AXI_DC_CDVALID = \<const0> ;
  assign M_AXI_DC_CRRESP[4] = \<const0> ;
  assign M_AXI_DC_CRRESP[3] = \<const0> ;
  assign M_AXI_DC_CRRESP[2] = \<const0> ;
  assign M_AXI_DC_CRRESP[1] = \<const0> ;
  assign M_AXI_DC_CRRESP[0] = \<const0> ;
  assign M_AXI_DC_CRVALID = \<const0> ;
  assign M_AXI_DC_RACK = \<const0> ;
  assign M_AXI_DC_RREADY = \<const0> ;
  assign M_AXI_DC_WACK = \<const0> ;
  assign M_AXI_DC_WDATA[31] = \<const0> ;
  assign M_AXI_DC_WDATA[30] = \<const0> ;
  assign M_AXI_DC_WDATA[29] = \<const0> ;
  assign M_AXI_DC_WDATA[28] = \<const0> ;
  assign M_AXI_DC_WDATA[27] = \<const0> ;
  assign M_AXI_DC_WDATA[26] = \<const0> ;
  assign M_AXI_DC_WDATA[25] = \<const0> ;
  assign M_AXI_DC_WDATA[24] = \<const0> ;
  assign M_AXI_DC_WDATA[23] = \<const0> ;
  assign M_AXI_DC_WDATA[22] = \<const0> ;
  assign M_AXI_DC_WDATA[21] = \<const0> ;
  assign M_AXI_DC_WDATA[20] = \<const0> ;
  assign M_AXI_DC_WDATA[19] = \<const0> ;
  assign M_AXI_DC_WDATA[18] = \<const0> ;
  assign M_AXI_DC_WDATA[17] = \<const0> ;
  assign M_AXI_DC_WDATA[16] = \<const0> ;
  assign M_AXI_DC_WDATA[15] = \<const0> ;
  assign M_AXI_DC_WDATA[14] = \<const0> ;
  assign M_AXI_DC_WDATA[13] = \<const0> ;
  assign M_AXI_DC_WDATA[12] = \<const0> ;
  assign M_AXI_DC_WDATA[11] = \<const0> ;
  assign M_AXI_DC_WDATA[10] = \<const0> ;
  assign M_AXI_DC_WDATA[9] = \<const0> ;
  assign M_AXI_DC_WDATA[8] = \<const0> ;
  assign M_AXI_DC_WDATA[7] = \<const0> ;
  assign M_AXI_DC_WDATA[6] = \<const0> ;
  assign M_AXI_DC_WDATA[5] = \<const0> ;
  assign M_AXI_DC_WDATA[4] = \<const0> ;
  assign M_AXI_DC_WDATA[3] = \<const0> ;
  assign M_AXI_DC_WDATA[2] = \<const0> ;
  assign M_AXI_DC_WDATA[1] = \<const0> ;
  assign M_AXI_DC_WDATA[0] = \<const0> ;
  assign M_AXI_DC_WLAST = \<const0> ;
  assign M_AXI_DC_WSTRB[3] = \<const0> ;
  assign M_AXI_DC_WSTRB[2] = \<const0> ;
  assign M_AXI_DC_WSTRB[1] = \<const0> ;
  assign M_AXI_DC_WSTRB[0] = \<const0> ;
  assign M_AXI_DC_WUSER[0] = \<const0> ;
  assign M_AXI_DC_WVALID = \<const0> ;
  assign M_AXI_DP_ARADDR[31:0] = M_AXI_DP_AWADDR;
  assign M_AXI_DP_ARBURST[1] = \<const0> ;
  assign M_AXI_DP_ARBURST[0] = \<const1> ;
  assign M_AXI_DP_ARCACHE[3] = \<const0> ;
  assign M_AXI_DP_ARCACHE[2] = \<const0> ;
  assign M_AXI_DP_ARCACHE[1] = \<const1> ;
  assign M_AXI_DP_ARCACHE[0] = \<const1> ;
  assign M_AXI_DP_ARID[0] = \<const0> ;
  assign M_AXI_DP_ARLEN[7] = \<const0> ;
  assign M_AXI_DP_ARLEN[6] = \<const0> ;
  assign M_AXI_DP_ARLEN[5] = \<const0> ;
  assign M_AXI_DP_ARLEN[4] = \<const0> ;
  assign M_AXI_DP_ARLEN[3] = \<const0> ;
  assign M_AXI_DP_ARLEN[2] = \<const0> ;
  assign M_AXI_DP_ARLEN[1] = \<const0> ;
  assign M_AXI_DP_ARLEN[0] = \<const0> ;
  assign M_AXI_DP_ARLOCK = \<const0> ;
  assign M_AXI_DP_ARPROT[2] = \<const0> ;
  assign M_AXI_DP_ARPROT[1] = \<const0> ;
  assign M_AXI_DP_ARPROT[0] = \<const0> ;
  assign M_AXI_DP_ARQOS[3] = \<const1> ;
  assign M_AXI_DP_ARQOS[2] = \<const0> ;
  assign M_AXI_DP_ARQOS[1] = \<const0> ;
  assign M_AXI_DP_ARQOS[0] = \<const0> ;
  assign M_AXI_DP_ARSIZE[2] = \<const0> ;
  assign M_AXI_DP_ARSIZE[1] = \<const1> ;
  assign M_AXI_DP_ARSIZE[0] = \<const0> ;
  assign M_AXI_DP_AWBURST[1] = \<const0> ;
  assign M_AXI_DP_AWBURST[0] = \<const1> ;
  assign M_AXI_DP_AWCACHE[3] = \<const0> ;
  assign M_AXI_DP_AWCACHE[2] = \<const0> ;
  assign M_AXI_DP_AWCACHE[1] = \<const1> ;
  assign M_AXI_DP_AWCACHE[0] = \<const1> ;
  assign M_AXI_DP_AWID[0] = \<const0> ;
  assign M_AXI_DP_AWLEN[7] = \<const0> ;
  assign M_AXI_DP_AWLEN[6] = \<const0> ;
  assign M_AXI_DP_AWLEN[5] = \<const0> ;
  assign M_AXI_DP_AWLEN[4] = \<const0> ;
  assign M_AXI_DP_AWLEN[3] = \<const0> ;
  assign M_AXI_DP_AWLEN[2] = \<const0> ;
  assign M_AXI_DP_AWLEN[1] = \<const0> ;
  assign M_AXI_DP_AWLEN[0] = \<const0> ;
  assign M_AXI_DP_AWLOCK = \<const0> ;
  assign M_AXI_DP_AWPROT[2] = \<const0> ;
  assign M_AXI_DP_AWPROT[1] = \<const0> ;
  assign M_AXI_DP_AWPROT[0] = \<const0> ;
  assign M_AXI_DP_AWQOS[3] = \<const1> ;
  assign M_AXI_DP_AWQOS[2] = \<const0> ;
  assign M_AXI_DP_AWQOS[1] = \<const0> ;
  assign M_AXI_DP_AWQOS[0] = \<const0> ;
  assign M_AXI_DP_AWSIZE[2] = \<const0> ;
  assign M_AXI_DP_AWSIZE[1] = \<const1> ;
  assign M_AXI_DP_AWSIZE[0] = \<const0> ;
  assign M_AXI_DP_BREADY = \<const1> ;
  assign M_AXI_DP_RREADY = \<const1> ;
  assign M_AXI_DP_WLAST = \<const1> ;
  assign M_AXI_IC_ACREADY = \<const0> ;
  assign M_AXI_IC_ARADDR[31] = \<const0> ;
  assign M_AXI_IC_ARADDR[30] = \<const0> ;
  assign M_AXI_IC_ARADDR[29] = \<const0> ;
  assign M_AXI_IC_ARADDR[28] = \<const0> ;
  assign M_AXI_IC_ARADDR[27] = \<const0> ;
  assign M_AXI_IC_ARADDR[26] = \<const0> ;
  assign M_AXI_IC_ARADDR[25] = \<const0> ;
  assign M_AXI_IC_ARADDR[24] = \<const0> ;
  assign M_AXI_IC_ARADDR[23] = \<const0> ;
  assign M_AXI_IC_ARADDR[22] = \<const0> ;
  assign M_AXI_IC_ARADDR[21] = \<const0> ;
  assign M_AXI_IC_ARADDR[20] = \<const0> ;
  assign M_AXI_IC_ARADDR[19] = \<const0> ;
  assign M_AXI_IC_ARADDR[18] = \<const0> ;
  assign M_AXI_IC_ARADDR[17] = \<const0> ;
  assign M_AXI_IC_ARADDR[16] = \<const0> ;
  assign M_AXI_IC_ARADDR[15] = \<const0> ;
  assign M_AXI_IC_ARADDR[14] = \<const0> ;
  assign M_AXI_IC_ARADDR[13] = \<const0> ;
  assign M_AXI_IC_ARADDR[12] = \<const0> ;
  assign M_AXI_IC_ARADDR[11] = \<const0> ;
  assign M_AXI_IC_ARADDR[10] = \<const0> ;
  assign M_AXI_IC_ARADDR[9] = \<const0> ;
  assign M_AXI_IC_ARADDR[8] = \<const0> ;
  assign M_AXI_IC_ARADDR[7] = \<const0> ;
  assign M_AXI_IC_ARADDR[6] = \<const0> ;
  assign M_AXI_IC_ARADDR[5] = \<const0> ;
  assign M_AXI_IC_ARADDR[4] = \<const0> ;
  assign M_AXI_IC_ARADDR[3] = \<const0> ;
  assign M_AXI_IC_ARADDR[2] = \<const0> ;
  assign M_AXI_IC_ARADDR[1] = \<const0> ;
  assign M_AXI_IC_ARADDR[0] = \<const0> ;
  assign M_AXI_IC_ARBAR[1] = \<const0> ;
  assign M_AXI_IC_ARBAR[0] = \<const0> ;
  assign M_AXI_IC_ARBURST[1] = \<const0> ;
  assign M_AXI_IC_ARBURST[0] = \<const0> ;
  assign M_AXI_IC_ARCACHE[3] = \<const0> ;
  assign M_AXI_IC_ARCACHE[2] = \<const0> ;
  assign M_AXI_IC_ARCACHE[1] = \<const0> ;
  assign M_AXI_IC_ARCACHE[0] = \<const0> ;
  assign M_AXI_IC_ARDOMAIN[1] = \<const0> ;
  assign M_AXI_IC_ARDOMAIN[0] = \<const0> ;
  assign M_AXI_IC_ARID[0] = \<const0> ;
  assign M_AXI_IC_ARLEN[7] = \<const0> ;
  assign M_AXI_IC_ARLEN[6] = \<const0> ;
  assign M_AXI_IC_ARLEN[5] = \<const0> ;
  assign M_AXI_IC_ARLEN[4] = \<const0> ;
  assign M_AXI_IC_ARLEN[3] = \<const0> ;
  assign M_AXI_IC_ARLEN[2] = \<const0> ;
  assign M_AXI_IC_ARLEN[1] = \<const0> ;
  assign M_AXI_IC_ARLEN[0] = \<const0> ;
  assign M_AXI_IC_ARLOCK = \<const0> ;
  assign M_AXI_IC_ARPROT[2] = \<const0> ;
  assign M_AXI_IC_ARPROT[1] = \<const0> ;
  assign M_AXI_IC_ARPROT[0] = \<const0> ;
  assign M_AXI_IC_ARQOS[3] = \<const0> ;
  assign M_AXI_IC_ARQOS[2] = \<const0> ;
  assign M_AXI_IC_ARQOS[1] = \<const0> ;
  assign M_AXI_IC_ARQOS[0] = \<const0> ;
  assign M_AXI_IC_ARSIZE[2] = \<const0> ;
  assign M_AXI_IC_ARSIZE[1] = \<const0> ;
  assign M_AXI_IC_ARSIZE[0] = \<const0> ;
  assign M_AXI_IC_ARSNOOP[3] = \<const0> ;
  assign M_AXI_IC_ARSNOOP[2] = \<const0> ;
  assign M_AXI_IC_ARSNOOP[1] = \<const0> ;
  assign M_AXI_IC_ARSNOOP[0] = \<const0> ;
  assign M_AXI_IC_ARUSER[4] = \<const0> ;
  assign M_AXI_IC_ARUSER[3] = \<const0> ;
  assign M_AXI_IC_ARUSER[2] = \<const0> ;
  assign M_AXI_IC_ARUSER[1] = \<const0> ;
  assign M_AXI_IC_ARUSER[0] = \<const0> ;
  assign M_AXI_IC_ARVALID = \<const0> ;
  assign M_AXI_IC_AWADDR[31] = \<const0> ;
  assign M_AXI_IC_AWADDR[30] = \<const0> ;
  assign M_AXI_IC_AWADDR[29] = \<const0> ;
  assign M_AXI_IC_AWADDR[28] = \<const0> ;
  assign M_AXI_IC_AWADDR[27] = \<const0> ;
  assign M_AXI_IC_AWADDR[26] = \<const0> ;
  assign M_AXI_IC_AWADDR[25] = \<const0> ;
  assign M_AXI_IC_AWADDR[24] = \<const0> ;
  assign M_AXI_IC_AWADDR[23] = \<const0> ;
  assign M_AXI_IC_AWADDR[22] = \<const0> ;
  assign M_AXI_IC_AWADDR[21] = \<const0> ;
  assign M_AXI_IC_AWADDR[20] = \<const0> ;
  assign M_AXI_IC_AWADDR[19] = \<const0> ;
  assign M_AXI_IC_AWADDR[18] = \<const0> ;
  assign M_AXI_IC_AWADDR[17] = \<const0> ;
  assign M_AXI_IC_AWADDR[16] = \<const0> ;
  assign M_AXI_IC_AWADDR[15] = \<const0> ;
  assign M_AXI_IC_AWADDR[14] = \<const0> ;
  assign M_AXI_IC_AWADDR[13] = \<const0> ;
  assign M_AXI_IC_AWADDR[12] = \<const0> ;
  assign M_AXI_IC_AWADDR[11] = \<const0> ;
  assign M_AXI_IC_AWADDR[10] = \<const0> ;
  assign M_AXI_IC_AWADDR[9] = \<const0> ;
  assign M_AXI_IC_AWADDR[8] = \<const0> ;
  assign M_AXI_IC_AWADDR[7] = \<const0> ;
  assign M_AXI_IC_AWADDR[6] = \<const0> ;
  assign M_AXI_IC_AWADDR[5] = \<const0> ;
  assign M_AXI_IC_AWADDR[4] = \<const0> ;
  assign M_AXI_IC_AWADDR[3] = \<const0> ;
  assign M_AXI_IC_AWADDR[2] = \<const0> ;
  assign M_AXI_IC_AWADDR[1] = \<const0> ;
  assign M_AXI_IC_AWADDR[0] = \<const0> ;
  assign M_AXI_IC_AWBAR[1] = \<const0> ;
  assign M_AXI_IC_AWBAR[0] = \<const0> ;
  assign M_AXI_IC_AWBURST[1] = \<const0> ;
  assign M_AXI_IC_AWBURST[0] = \<const0> ;
  assign M_AXI_IC_AWCACHE[3] = \<const0> ;
  assign M_AXI_IC_AWCACHE[2] = \<const0> ;
  assign M_AXI_IC_AWCACHE[1] = \<const0> ;
  assign M_AXI_IC_AWCACHE[0] = \<const0> ;
  assign M_AXI_IC_AWDOMAIN[1] = \<const0> ;
  assign M_AXI_IC_AWDOMAIN[0] = \<const0> ;
  assign M_AXI_IC_AWID[0] = \<const0> ;
  assign M_AXI_IC_AWLEN[7] = \<const0> ;
  assign M_AXI_IC_AWLEN[6] = \<const0> ;
  assign M_AXI_IC_AWLEN[5] = \<const0> ;
  assign M_AXI_IC_AWLEN[4] = \<const0> ;
  assign M_AXI_IC_AWLEN[3] = \<const0> ;
  assign M_AXI_IC_AWLEN[2] = \<const0> ;
  assign M_AXI_IC_AWLEN[1] = \<const0> ;
  assign M_AXI_IC_AWLEN[0] = \<const0> ;
  assign M_AXI_IC_AWLOCK = \<const0> ;
  assign M_AXI_IC_AWPROT[2] = \<const0> ;
  assign M_AXI_IC_AWPROT[1] = \<const0> ;
  assign M_AXI_IC_AWPROT[0] = \<const0> ;
  assign M_AXI_IC_AWQOS[3] = \<const0> ;
  assign M_AXI_IC_AWQOS[2] = \<const0> ;
  assign M_AXI_IC_AWQOS[1] = \<const0> ;
  assign M_AXI_IC_AWQOS[0] = \<const0> ;
  assign M_AXI_IC_AWSIZE[2] = \<const0> ;
  assign M_AXI_IC_AWSIZE[1] = \<const0> ;
  assign M_AXI_IC_AWSIZE[0] = \<const0> ;
  assign M_AXI_IC_AWSNOOP[2] = \<const0> ;
  assign M_AXI_IC_AWSNOOP[1] = \<const0> ;
  assign M_AXI_IC_AWSNOOP[0] = \<const0> ;
  assign M_AXI_IC_AWUSER[4] = \<const0> ;
  assign M_AXI_IC_AWUSER[3] = \<const0> ;
  assign M_AXI_IC_AWUSER[2] = \<const0> ;
  assign M_AXI_IC_AWUSER[1] = \<const0> ;
  assign M_AXI_IC_AWUSER[0] = \<const0> ;
  assign M_AXI_IC_AWVALID = \<const0> ;
  assign M_AXI_IC_BREADY = \<const0> ;
  assign M_AXI_IC_CDDATA[31] = \<const0> ;
  assign M_AXI_IC_CDDATA[30] = \<const0> ;
  assign M_AXI_IC_CDDATA[29] = \<const0> ;
  assign M_AXI_IC_CDDATA[28] = \<const0> ;
  assign M_AXI_IC_CDDATA[27] = \<const0> ;
  assign M_AXI_IC_CDDATA[26] = \<const0> ;
  assign M_AXI_IC_CDDATA[25] = \<const0> ;
  assign M_AXI_IC_CDDATA[24] = \<const0> ;
  assign M_AXI_IC_CDDATA[23] = \<const0> ;
  assign M_AXI_IC_CDDATA[22] = \<const0> ;
  assign M_AXI_IC_CDDATA[21] = \<const0> ;
  assign M_AXI_IC_CDDATA[20] = \<const0> ;
  assign M_AXI_IC_CDDATA[19] = \<const0> ;
  assign M_AXI_IC_CDDATA[18] = \<const0> ;
  assign M_AXI_IC_CDDATA[17] = \<const0> ;
  assign M_AXI_IC_CDDATA[16] = \<const0> ;
  assign M_AXI_IC_CDDATA[15] = \<const0> ;
  assign M_AXI_IC_CDDATA[14] = \<const0> ;
  assign M_AXI_IC_CDDATA[13] = \<const0> ;
  assign M_AXI_IC_CDDATA[12] = \<const0> ;
  assign M_AXI_IC_CDDATA[11] = \<const0> ;
  assign M_AXI_IC_CDDATA[10] = \<const0> ;
  assign M_AXI_IC_CDDATA[9] = \<const0> ;
  assign M_AXI_IC_CDDATA[8] = \<const0> ;
  assign M_AXI_IC_CDDATA[7] = \<const0> ;
  assign M_AXI_IC_CDDATA[6] = \<const0> ;
  assign M_AXI_IC_CDDATA[5] = \<const0> ;
  assign M_AXI_IC_CDDATA[4] = \<const0> ;
  assign M_AXI_IC_CDDATA[3] = \<const0> ;
  assign M_AXI_IC_CDDATA[2] = \<const0> ;
  assign M_AXI_IC_CDDATA[1] = \<const0> ;
  assign M_AXI_IC_CDDATA[0] = \<const0> ;
  assign M_AXI_IC_CDLAST = \<const0> ;
  assign M_AXI_IC_CDVALID = \<const0> ;
  assign M_AXI_IC_CRRESP[4] = \<const0> ;
  assign M_AXI_IC_CRRESP[3] = \<const0> ;
  assign M_AXI_IC_CRRESP[2] = \<const0> ;
  assign M_AXI_IC_CRRESP[1] = \<const0> ;
  assign M_AXI_IC_CRRESP[0] = \<const0> ;
  assign M_AXI_IC_CRVALID = \<const0> ;
  assign M_AXI_IC_RACK = \<const0> ;
  assign M_AXI_IC_RREADY = \<const0> ;
  assign M_AXI_IC_WACK = \<const0> ;
  assign M_AXI_IC_WDATA[31] = \<const0> ;
  assign M_AXI_IC_WDATA[30] = \<const0> ;
  assign M_AXI_IC_WDATA[29] = \<const0> ;
  assign M_AXI_IC_WDATA[28] = \<const0> ;
  assign M_AXI_IC_WDATA[27] = \<const0> ;
  assign M_AXI_IC_WDATA[26] = \<const0> ;
  assign M_AXI_IC_WDATA[25] = \<const0> ;
  assign M_AXI_IC_WDATA[24] = \<const0> ;
  assign M_AXI_IC_WDATA[23] = \<const0> ;
  assign M_AXI_IC_WDATA[22] = \<const0> ;
  assign M_AXI_IC_WDATA[21] = \<const0> ;
  assign M_AXI_IC_WDATA[20] = \<const0> ;
  assign M_AXI_IC_WDATA[19] = \<const0> ;
  assign M_AXI_IC_WDATA[18] = \<const0> ;
  assign M_AXI_IC_WDATA[17] = \<const0> ;
  assign M_AXI_IC_WDATA[16] = \<const0> ;
  assign M_AXI_IC_WDATA[15] = \<const0> ;
  assign M_AXI_IC_WDATA[14] = \<const0> ;
  assign M_AXI_IC_WDATA[13] = \<const0> ;
  assign M_AXI_IC_WDATA[12] = \<const0> ;
  assign M_AXI_IC_WDATA[11] = \<const0> ;
  assign M_AXI_IC_WDATA[10] = \<const0> ;
  assign M_AXI_IC_WDATA[9] = \<const0> ;
  assign M_AXI_IC_WDATA[8] = \<const0> ;
  assign M_AXI_IC_WDATA[7] = \<const0> ;
  assign M_AXI_IC_WDATA[6] = \<const0> ;
  assign M_AXI_IC_WDATA[5] = \<const0> ;
  assign M_AXI_IC_WDATA[4] = \<const0> ;
  assign M_AXI_IC_WDATA[3] = \<const0> ;
  assign M_AXI_IC_WDATA[2] = \<const0> ;
  assign M_AXI_IC_WDATA[1] = \<const0> ;
  assign M_AXI_IC_WDATA[0] = \<const0> ;
  assign M_AXI_IC_WLAST = \<const0> ;
  assign M_AXI_IC_WSTRB[3] = \<const0> ;
  assign M_AXI_IC_WSTRB[2] = \<const0> ;
  assign M_AXI_IC_WSTRB[1] = \<const0> ;
  assign M_AXI_IC_WSTRB[0] = \<const0> ;
  assign M_AXI_IC_WUSER[0] = \<const0> ;
  assign M_AXI_IC_WVALID = \<const0> ;
  assign M_AXI_IP_ARADDR[31] = \<const0> ;
  assign M_AXI_IP_ARADDR[30] = \<const0> ;
  assign M_AXI_IP_ARADDR[29] = \<const0> ;
  assign M_AXI_IP_ARADDR[28] = \<const0> ;
  assign M_AXI_IP_ARADDR[27] = \<const0> ;
  assign M_AXI_IP_ARADDR[26] = \<const0> ;
  assign M_AXI_IP_ARADDR[25] = \<const0> ;
  assign M_AXI_IP_ARADDR[24] = \<const0> ;
  assign M_AXI_IP_ARADDR[23] = \<const0> ;
  assign M_AXI_IP_ARADDR[22] = \<const0> ;
  assign M_AXI_IP_ARADDR[21] = \<const0> ;
  assign M_AXI_IP_ARADDR[20] = \<const0> ;
  assign M_AXI_IP_ARADDR[19] = \<const0> ;
  assign M_AXI_IP_ARADDR[18] = \<const0> ;
  assign M_AXI_IP_ARADDR[17] = \<const0> ;
  assign M_AXI_IP_ARADDR[16] = \<const0> ;
  assign M_AXI_IP_ARADDR[15] = \<const0> ;
  assign M_AXI_IP_ARADDR[14] = \<const0> ;
  assign M_AXI_IP_ARADDR[13] = \<const0> ;
  assign M_AXI_IP_ARADDR[12] = \<const0> ;
  assign M_AXI_IP_ARADDR[11] = \<const0> ;
  assign M_AXI_IP_ARADDR[10] = \<const0> ;
  assign M_AXI_IP_ARADDR[9] = \<const0> ;
  assign M_AXI_IP_ARADDR[8] = \<const0> ;
  assign M_AXI_IP_ARADDR[7] = \<const0> ;
  assign M_AXI_IP_ARADDR[6] = \<const0> ;
  assign M_AXI_IP_ARADDR[5] = \<const0> ;
  assign M_AXI_IP_ARADDR[4] = \<const0> ;
  assign M_AXI_IP_ARADDR[3] = \<const0> ;
  assign M_AXI_IP_ARADDR[2] = \<const0> ;
  assign M_AXI_IP_ARADDR[1] = \<const0> ;
  assign M_AXI_IP_ARADDR[0] = \<const0> ;
  assign M_AXI_IP_ARBURST[1] = \<const0> ;
  assign M_AXI_IP_ARBURST[0] = \<const0> ;
  assign M_AXI_IP_ARCACHE[3] = \<const0> ;
  assign M_AXI_IP_ARCACHE[2] = \<const0> ;
  assign M_AXI_IP_ARCACHE[1] = \<const0> ;
  assign M_AXI_IP_ARCACHE[0] = \<const0> ;
  assign M_AXI_IP_ARID[0] = \<const0> ;
  assign M_AXI_IP_ARLEN[7] = \<const0> ;
  assign M_AXI_IP_ARLEN[6] = \<const0> ;
  assign M_AXI_IP_ARLEN[5] = \<const0> ;
  assign M_AXI_IP_ARLEN[4] = \<const0> ;
  assign M_AXI_IP_ARLEN[3] = \<const0> ;
  assign M_AXI_IP_ARLEN[2] = \<const0> ;
  assign M_AXI_IP_ARLEN[1] = \<const0> ;
  assign M_AXI_IP_ARLEN[0] = \<const0> ;
  assign M_AXI_IP_ARLOCK = \<const0> ;
  assign M_AXI_IP_ARPROT[2] = \<const0> ;
  assign M_AXI_IP_ARPROT[1] = \<const0> ;
  assign M_AXI_IP_ARPROT[0] = \<const0> ;
  assign M_AXI_IP_ARQOS[3] = \<const0> ;
  assign M_AXI_IP_ARQOS[2] = \<const0> ;
  assign M_AXI_IP_ARQOS[1] = \<const0> ;
  assign M_AXI_IP_ARQOS[0] = \<const0> ;
  assign M_AXI_IP_ARSIZE[2] = \<const0> ;
  assign M_AXI_IP_ARSIZE[1] = \<const0> ;
  assign M_AXI_IP_ARSIZE[0] = \<const0> ;
  assign M_AXI_IP_ARVALID = \<const0> ;
  assign M_AXI_IP_AWADDR[31] = \<const0> ;
  assign M_AXI_IP_AWADDR[30] = \<const0> ;
  assign M_AXI_IP_AWADDR[29] = \<const0> ;
  assign M_AXI_IP_AWADDR[28] = \<const0> ;
  assign M_AXI_IP_AWADDR[27] = \<const0> ;
  assign M_AXI_IP_AWADDR[26] = \<const0> ;
  assign M_AXI_IP_AWADDR[25] = \<const0> ;
  assign M_AXI_IP_AWADDR[24] = \<const0> ;
  assign M_AXI_IP_AWADDR[23] = \<const0> ;
  assign M_AXI_IP_AWADDR[22] = \<const0> ;
  assign M_AXI_IP_AWADDR[21] = \<const0> ;
  assign M_AXI_IP_AWADDR[20] = \<const0> ;
  assign M_AXI_IP_AWADDR[19] = \<const0> ;
  assign M_AXI_IP_AWADDR[18] = \<const0> ;
  assign M_AXI_IP_AWADDR[17] = \<const0> ;
  assign M_AXI_IP_AWADDR[16] = \<const0> ;
  assign M_AXI_IP_AWADDR[15] = \<const0> ;
  assign M_AXI_IP_AWADDR[14] = \<const0> ;
  assign M_AXI_IP_AWADDR[13] = \<const0> ;
  assign M_AXI_IP_AWADDR[12] = \<const0> ;
  assign M_AXI_IP_AWADDR[11] = \<const0> ;
  assign M_AXI_IP_AWADDR[10] = \<const0> ;
  assign M_AXI_IP_AWADDR[9] = \<const0> ;
  assign M_AXI_IP_AWADDR[8] = \<const0> ;
  assign M_AXI_IP_AWADDR[7] = \<const0> ;
  assign M_AXI_IP_AWADDR[6] = \<const0> ;
  assign M_AXI_IP_AWADDR[5] = \<const0> ;
  assign M_AXI_IP_AWADDR[4] = \<const0> ;
  assign M_AXI_IP_AWADDR[3] = \<const0> ;
  assign M_AXI_IP_AWADDR[2] = \<const0> ;
  assign M_AXI_IP_AWADDR[1] = \<const0> ;
  assign M_AXI_IP_AWADDR[0] = \<const0> ;
  assign M_AXI_IP_AWBURST[1] = \<const0> ;
  assign M_AXI_IP_AWBURST[0] = \<const0> ;
  assign M_AXI_IP_AWCACHE[3] = \<const0> ;
  assign M_AXI_IP_AWCACHE[2] = \<const0> ;
  assign M_AXI_IP_AWCACHE[1] = \<const0> ;
  assign M_AXI_IP_AWCACHE[0] = \<const0> ;
  assign M_AXI_IP_AWID[0] = \<const0> ;
  assign M_AXI_IP_AWLEN[7] = \<const0> ;
  assign M_AXI_IP_AWLEN[6] = \<const0> ;
  assign M_AXI_IP_AWLEN[5] = \<const0> ;
  assign M_AXI_IP_AWLEN[4] = \<const0> ;
  assign M_AXI_IP_AWLEN[3] = \<const0> ;
  assign M_AXI_IP_AWLEN[2] = \<const0> ;
  assign M_AXI_IP_AWLEN[1] = \<const0> ;
  assign M_AXI_IP_AWLEN[0] = \<const0> ;
  assign M_AXI_IP_AWLOCK = \<const0> ;
  assign M_AXI_IP_AWPROT[2] = \<const0> ;
  assign M_AXI_IP_AWPROT[1] = \<const0> ;
  assign M_AXI_IP_AWPROT[0] = \<const0> ;
  assign M_AXI_IP_AWQOS[3] = \<const0> ;
  assign M_AXI_IP_AWQOS[2] = \<const0> ;
  assign M_AXI_IP_AWQOS[1] = \<const0> ;
  assign M_AXI_IP_AWQOS[0] = \<const0> ;
  assign M_AXI_IP_AWSIZE[2] = \<const0> ;
  assign M_AXI_IP_AWSIZE[1] = \<const0> ;
  assign M_AXI_IP_AWSIZE[0] = \<const0> ;
  assign M_AXI_IP_AWVALID = \<const0> ;
  assign M_AXI_IP_BREADY = \<const0> ;
  assign M_AXI_IP_RREADY = \<const0> ;
  assign M_AXI_IP_WDATA[31] = \<const0> ;
  assign M_AXI_IP_WDATA[30] = \<const0> ;
  assign M_AXI_IP_WDATA[29] = \<const0> ;
  assign M_AXI_IP_WDATA[28] = \<const0> ;
  assign M_AXI_IP_WDATA[27] = \<const0> ;
  assign M_AXI_IP_WDATA[26] = \<const0> ;
  assign M_AXI_IP_WDATA[25] = \<const0> ;
  assign M_AXI_IP_WDATA[24] = \<const0> ;
  assign M_AXI_IP_WDATA[23] = \<const0> ;
  assign M_AXI_IP_WDATA[22] = \<const0> ;
  assign M_AXI_IP_WDATA[21] = \<const0> ;
  assign M_AXI_IP_WDATA[20] = \<const0> ;
  assign M_AXI_IP_WDATA[19] = \<const0> ;
  assign M_AXI_IP_WDATA[18] = \<const0> ;
  assign M_AXI_IP_WDATA[17] = \<const0> ;
  assign M_AXI_IP_WDATA[16] = \<const0> ;
  assign M_AXI_IP_WDATA[15] = \<const0> ;
  assign M_AXI_IP_WDATA[14] = \<const0> ;
  assign M_AXI_IP_WDATA[13] = \<const0> ;
  assign M_AXI_IP_WDATA[12] = \<const0> ;
  assign M_AXI_IP_WDATA[11] = \<const0> ;
  assign M_AXI_IP_WDATA[10] = \<const0> ;
  assign M_AXI_IP_WDATA[9] = \<const0> ;
  assign M_AXI_IP_WDATA[8] = \<const0> ;
  assign M_AXI_IP_WDATA[7] = \<const0> ;
  assign M_AXI_IP_WDATA[6] = \<const0> ;
  assign M_AXI_IP_WDATA[5] = \<const0> ;
  assign M_AXI_IP_WDATA[4] = \<const0> ;
  assign M_AXI_IP_WDATA[3] = \<const0> ;
  assign M_AXI_IP_WDATA[2] = \<const0> ;
  assign M_AXI_IP_WDATA[1] = \<const0> ;
  assign M_AXI_IP_WDATA[0] = \<const0> ;
  assign M_AXI_IP_WLAST = \<const0> ;
  assign M_AXI_IP_WSTRB[3] = \<const0> ;
  assign M_AXI_IP_WSTRB[2] = \<const0> ;
  assign M_AXI_IP_WSTRB[1] = \<const0> ;
  assign M_AXI_IP_WSTRB[0] = \<const0> ;
  assign M_AXI_IP_WVALID = \<const0> ;
  assign RAM_From[255] = \<const0> ;
  assign RAM_From[254] = \<const0> ;
  assign RAM_From[253] = \<const0> ;
  assign RAM_From[252] = \<const0> ;
  assign RAM_From[251] = \<const0> ;
  assign RAM_From[250] = \<const0> ;
  assign RAM_From[249] = \<const0> ;
  assign RAM_From[248] = \<const0> ;
  assign RAM_From[247] = \<const0> ;
  assign RAM_From[246] = \<const0> ;
  assign RAM_From[245] = \<const0> ;
  assign RAM_From[244] = \<const0> ;
  assign RAM_From[243] = \<const0> ;
  assign RAM_From[242] = \<const0> ;
  assign RAM_From[241] = \<const0> ;
  assign RAM_From[240] = \<const0> ;
  assign RAM_From[239] = \<const0> ;
  assign RAM_From[238] = \<const0> ;
  assign RAM_From[237] = \<const0> ;
  assign RAM_From[236] = \<const0> ;
  assign RAM_From[235] = \<const0> ;
  assign RAM_From[234] = \<const0> ;
  assign RAM_From[233] = \<const0> ;
  assign RAM_From[232] = \<const0> ;
  assign RAM_From[231] = \<const0> ;
  assign RAM_From[230] = \<const0> ;
  assign RAM_From[229] = \<const0> ;
  assign RAM_From[228] = \<const0> ;
  assign RAM_From[227] = \<const0> ;
  assign RAM_From[226] = \<const0> ;
  assign RAM_From[225] = \<const0> ;
  assign RAM_From[224] = \<const0> ;
  assign RAM_From[223] = \<const0> ;
  assign RAM_From[222] = \<const0> ;
  assign RAM_From[221] = \<const0> ;
  assign RAM_From[220] = \<const0> ;
  assign RAM_From[219] = \<const0> ;
  assign RAM_From[218] = \<const0> ;
  assign RAM_From[217] = \<const0> ;
  assign RAM_From[216] = \<const0> ;
  assign RAM_From[215] = \<const0> ;
  assign RAM_From[214] = \<const0> ;
  assign RAM_From[213] = \<const0> ;
  assign RAM_From[212] = \<const0> ;
  assign RAM_From[211] = \<const0> ;
  assign RAM_From[210] = \<const0> ;
  assign RAM_From[209] = \<const0> ;
  assign RAM_From[208] = \<const0> ;
  assign RAM_From[207] = \<const0> ;
  assign RAM_From[206] = \<const0> ;
  assign RAM_From[205] = \<const0> ;
  assign RAM_From[204] = \<const0> ;
  assign RAM_From[203] = \<const0> ;
  assign RAM_From[202] = \<const0> ;
  assign RAM_From[201] = \<const0> ;
  assign RAM_From[200] = \<const0> ;
  assign RAM_From[199] = \<const0> ;
  assign RAM_From[198] = \<const0> ;
  assign RAM_From[197] = \<const0> ;
  assign RAM_From[196] = \<const0> ;
  assign RAM_From[195] = \<const0> ;
  assign RAM_From[194] = \<const0> ;
  assign RAM_From[193] = \<const0> ;
  assign RAM_From[192] = \<const0> ;
  assign RAM_From[191] = \<const0> ;
  assign RAM_From[190] = \<const0> ;
  assign RAM_From[189] = \<const0> ;
  assign RAM_From[188] = \<const0> ;
  assign RAM_From[187] = \<const0> ;
  assign RAM_From[186] = \<const0> ;
  assign RAM_From[185] = \<const0> ;
  assign RAM_From[184] = \<const0> ;
  assign RAM_From[183] = \<const0> ;
  assign RAM_From[182] = \<const0> ;
  assign RAM_From[181] = \<const0> ;
  assign RAM_From[180] = \<const0> ;
  assign RAM_From[179] = \<const0> ;
  assign RAM_From[178] = \<const0> ;
  assign RAM_From[177] = \<const0> ;
  assign RAM_From[176] = \<const0> ;
  assign RAM_From[175] = \<const0> ;
  assign RAM_From[174] = \<const0> ;
  assign RAM_From[173] = \<const0> ;
  assign RAM_From[172] = \<const0> ;
  assign RAM_From[171] = \<const0> ;
  assign RAM_From[170] = \<const0> ;
  assign RAM_From[169] = \<const0> ;
  assign RAM_From[168] = \<const0> ;
  assign RAM_From[167] = \<const0> ;
  assign RAM_From[166] = \<const0> ;
  assign RAM_From[165] = \<const0> ;
  assign RAM_From[164] = \<const0> ;
  assign RAM_From[163] = \<const0> ;
  assign RAM_From[162] = \<const0> ;
  assign RAM_From[161] = \<const0> ;
  assign RAM_From[160] = \<const0> ;
  assign RAM_From[159] = \<const0> ;
  assign RAM_From[158] = \<const0> ;
  assign RAM_From[157] = \<const0> ;
  assign RAM_From[156] = \<const0> ;
  assign RAM_From[155] = \<const0> ;
  assign RAM_From[154] = \<const0> ;
  assign RAM_From[153] = \<const0> ;
  assign RAM_From[152] = \<const0> ;
  assign RAM_From[151] = \<const0> ;
  assign RAM_From[150] = \<const0> ;
  assign RAM_From[149] = \<const0> ;
  assign RAM_From[148] = \<const0> ;
  assign RAM_From[147] = \<const0> ;
  assign RAM_From[146] = \<const0> ;
  assign RAM_From[145] = \<const0> ;
  assign RAM_From[144] = \<const0> ;
  assign RAM_From[143] = \<const0> ;
  assign RAM_From[142] = \<const0> ;
  assign RAM_From[141] = \<const0> ;
  assign RAM_From[140] = \<const0> ;
  assign RAM_From[139] = \<const0> ;
  assign RAM_From[138] = \<const0> ;
  assign RAM_From[137] = \<const0> ;
  assign RAM_From[136] = \<const0> ;
  assign RAM_From[135] = \<const0> ;
  assign RAM_From[134] = \<const0> ;
  assign RAM_From[133] = \<const0> ;
  assign RAM_From[132] = \<const0> ;
  assign RAM_From[131] = \<const0> ;
  assign RAM_From[130] = \<const0> ;
  assign RAM_From[129] = \<const0> ;
  assign RAM_From[128] = \<const0> ;
  assign RAM_From[127] = \<const0> ;
  assign RAM_From[126] = \<const0> ;
  assign RAM_From[125] = \<const0> ;
  assign RAM_From[124] = \<const0> ;
  assign RAM_From[123] = \<const0> ;
  assign RAM_From[122] = \<const0> ;
  assign RAM_From[121] = \<const0> ;
  assign RAM_From[120] = \<const0> ;
  assign RAM_From[119] = \<const0> ;
  assign RAM_From[118] = \<const0> ;
  assign RAM_From[117] = \<const0> ;
  assign RAM_From[116] = \<const0> ;
  assign RAM_From[115] = \<const0> ;
  assign RAM_From[114] = \<const0> ;
  assign RAM_From[113] = \<const0> ;
  assign RAM_From[112] = \<const0> ;
  assign RAM_From[111] = \<const0> ;
  assign RAM_From[110] = \<const0> ;
  assign RAM_From[109] = \<const0> ;
  assign RAM_From[108] = \<const0> ;
  assign RAM_From[107] = \<const0> ;
  assign RAM_From[106] = \<const0> ;
  assign RAM_From[105] = \<const0> ;
  assign RAM_From[104] = \<const0> ;
  assign RAM_From[103] = \<const0> ;
  assign RAM_From[102] = \<const0> ;
  assign RAM_From[101] = \<const0> ;
  assign RAM_From[100] = \<const0> ;
  assign RAM_From[99] = \<const0> ;
  assign RAM_From[98] = \<const0> ;
  assign RAM_From[97] = \<const0> ;
  assign RAM_From[96] = \<const0> ;
  assign RAM_From[95] = \<const0> ;
  assign RAM_From[94] = \<const0> ;
  assign RAM_From[93] = \<const0> ;
  assign RAM_From[92] = \<const0> ;
  assign RAM_From[91] = \<const0> ;
  assign RAM_From[90] = \<const0> ;
  assign RAM_From[89] = \<const0> ;
  assign RAM_From[88] = \<const0> ;
  assign RAM_From[87] = \<const0> ;
  assign RAM_From[86] = \<const0> ;
  assign RAM_From[85] = \<const0> ;
  assign RAM_From[84] = \<const0> ;
  assign RAM_From[83] = \<const0> ;
  assign RAM_From[82] = \<const0> ;
  assign RAM_From[81] = \<const0> ;
  assign RAM_From[80] = \<const0> ;
  assign RAM_From[79] = \<const0> ;
  assign RAM_From[78] = \<const0> ;
  assign RAM_From[77] = \<const0> ;
  assign RAM_From[76] = \<const0> ;
  assign RAM_From[75] = \<const0> ;
  assign RAM_From[74] = \<const0> ;
  assign RAM_From[73] = \<const0> ;
  assign RAM_From[72] = \<const0> ;
  assign RAM_From[71] = \<const0> ;
  assign RAM_From[70] = \<const0> ;
  assign RAM_From[69] = \<const0> ;
  assign RAM_From[68] = \<const0> ;
  assign RAM_From[67] = \<const0> ;
  assign RAM_From[66] = \<const0> ;
  assign RAM_From[65] = \<const0> ;
  assign RAM_From[64] = \<const0> ;
  assign RAM_From[63] = \<const0> ;
  assign RAM_From[62] = \<const0> ;
  assign RAM_From[61] = \<const0> ;
  assign RAM_From[60] = \<const0> ;
  assign RAM_From[59] = \<const0> ;
  assign RAM_From[58] = \<const0> ;
  assign RAM_From[57] = \<const0> ;
  assign RAM_From[56] = \<const0> ;
  assign RAM_From[55] = \<const0> ;
  assign RAM_From[54] = \<const0> ;
  assign RAM_From[53] = \<const0> ;
  assign RAM_From[52] = \<const0> ;
  assign RAM_From[51] = \<const0> ;
  assign RAM_From[50] = \<const0> ;
  assign RAM_From[49] = \<const0> ;
  assign RAM_From[48] = \<const0> ;
  assign RAM_From[47] = \<const0> ;
  assign RAM_From[46] = \<const0> ;
  assign RAM_From[45] = \<const0> ;
  assign RAM_From[44] = \<const0> ;
  assign RAM_From[43] = \<const0> ;
  assign RAM_From[42] = \<const0> ;
  assign RAM_From[41] = \<const0> ;
  assign RAM_From[40] = \<const0> ;
  assign RAM_From[39] = \<const0> ;
  assign RAM_From[38] = \<const0> ;
  assign RAM_From[37] = \<const0> ;
  assign RAM_From[36] = \<const0> ;
  assign RAM_From[35] = \<const0> ;
  assign RAM_From[34] = \<const0> ;
  assign RAM_From[33] = \<const0> ;
  assign RAM_From[32] = \<const0> ;
  assign RAM_From[31] = \<const0> ;
  assign RAM_From[30] = \<const0> ;
  assign RAM_From[29] = \<const0> ;
  assign RAM_From[28] = \<const0> ;
  assign RAM_From[27] = \<const0> ;
  assign RAM_From[26] = \<const0> ;
  assign RAM_From[25] = \<const0> ;
  assign RAM_From[24] = \<const0> ;
  assign RAM_From[23] = \<const0> ;
  assign RAM_From[22] = \<const0> ;
  assign RAM_From[21] = \<const0> ;
  assign RAM_From[20] = \<const0> ;
  assign RAM_From[19] = \<const0> ;
  assign RAM_From[18] = \<const0> ;
  assign RAM_From[17] = \<const0> ;
  assign RAM_From[16] = \<const0> ;
  assign RAM_From[15] = \<const0> ;
  assign RAM_From[14] = \<const0> ;
  assign RAM_From[13] = \<const0> ;
  assign RAM_From[12] = \<const0> ;
  assign RAM_From[11] = \<const0> ;
  assign RAM_From[10] = \<const0> ;
  assign RAM_From[9] = \<const0> ;
  assign RAM_From[8] = \<const0> ;
  assign RAM_From[7] = \<const0> ;
  assign RAM_From[6] = \<const0> ;
  assign RAM_From[5] = \<const0> ;
  assign RAM_From[4] = \<const0> ;
  assign RAM_From[3] = \<const0> ;
  assign RAM_From[2] = \<const0> ;
  assign RAM_From[1] = \<const0> ;
  assign RAM_From[0] = \<const0> ;
  assign S10_AXIS_TREADY = \<const0> ;
  assign S11_AXIS_TREADY = \<const0> ;
  assign S12_AXIS_TREADY = \<const0> ;
  assign S13_AXIS_TREADY = \<const0> ;
  assign S14_AXIS_TREADY = \<const0> ;
  assign S15_AXIS_TREADY = \<const0> ;
  assign S2_AXIS_TREADY = \<const0> ;
  assign S3_AXIS_TREADY = \<const0> ;
  assign S4_AXIS_TREADY = \<const0> ;
  assign S5_AXIS_TREADY = \<const0> ;
  assign S6_AXIS_TREADY = \<const0> ;
  assign S7_AXIS_TREADY = \<const0> ;
  assign S8_AXIS_TREADY = \<const0> ;
  assign S9_AXIS_TREADY = \<const0> ;
  assign Trace_DCache_Hit = \<const0> ;
  assign Trace_DCache_Rdy = \<const0> ;
  assign Trace_DCache_Read = \<const0> ;
  assign Trace_DCache_Req = \<const0> ;
  assign Trace_EX_PipeRun = \<const1> ;
  assign Trace_Exception_Kind[0] = \<const0> ;
  assign Trace_Exception_Kind[1] = Trace_Exception_Taken;
  assign Trace_Exception_Kind[2] = \<const0> ;
  assign Trace_Exception_Kind[3] = Trace_Exception_Taken;
  assign Trace_Exception_Kind[4] = \<const0> ;
  assign Trace_ICache_Hit = \<const0> ;
  assign Trace_ICache_Rdy = \<const0> ;
  assign Trace_ICache_Req = \<const0> ;
  assign Trace_Jump_Hit = \<const0> ;
  assign Trace_MB_Halted = MB_Halted;
  assign Trace_MEM_PipeRun = \<const1> ;
  assign Trace_MSR_Reg[0] = \<const0> ;
  assign Trace_MSR_Reg[1] = \<const0> ;
  assign Trace_MSR_Reg[2] = \<const0> ;
  assign Trace_MSR_Reg[3] = \<const0> ;
  assign Trace_MSR_Reg[4] = \<const0> ;
  assign Trace_MSR_Reg[5] = \<const0> ;
  assign Trace_MSR_Reg[6] = \<const0> ;
  assign Trace_MSR_Reg[7] = \<const0> ;
  assign Trace_MSR_Reg[8] = \<const0> ;
  assign Trace_MSR_Reg[9] = \<const0> ;
  assign Trace_MSR_Reg[10:13] = \^Trace_MSR_Reg [10:13];
  assign Trace_MSR_Reg[14] = \<const0> ;
  assign Trace_PID_Reg[0] = \<const0> ;
  assign Trace_PID_Reg[1] = \<const0> ;
  assign Trace_PID_Reg[2] = \<const0> ;
  assign Trace_PID_Reg[3] = \<const0> ;
  assign Trace_PID_Reg[4] = \<const0> ;
  assign Trace_PID_Reg[5] = \<const0> ;
  assign Trace_PID_Reg[6] = \<const0> ;
  assign Trace_PID_Reg[7] = \<const0> ;
  (* SOFT_HLUTNM = "soft_lutpair154" *) 
  LUT4 #(
    .INIT(16'hFFFD)) 
    Dbg_TDO_INST_0_i_1
       (.I0(Dbg_Reg_En[5]),
        .I1(Dbg_Reg_En[4]),
        .I2(MicroBlaze_Core_I_n_491),
        .I3(Dbg_Reg_En[7]),
        .O(Dbg_TDO_INST_0_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair155" *) 
  LUT3 #(
    .INIT(8'hFE)) 
    Dbg_TDO_INST_0_i_10
       (.I0(Dbg_Reg_En[5]),
        .I1(Dbg_Reg_En[2]),
        .I2(MicroBlaze_Core_I_n_487),
        .O(Dbg_TDO_INST_0_i_10_n_0));
  (* SOFT_HLUTNM = "soft_lutpair154" *) 
  LUT4 #(
    .INIT(16'h0002)) 
    Dbg_TDO_INST_0_i_12
       (.I0(Dbg_Reg_En[7]),
        .I1(Dbg_Reg_En[5]),
        .I2(Dbg_Reg_En[4]),
        .I3(MicroBlaze_Core_I_n_491),
        .O(\Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Status_Reg_En ));
  LUT6 #(
    .INIT(64'hFFFEFFFFFFFFFFFF)) 
    Dbg_TDO_INST_0_i_2
       (.I0(Dbg_Reg_En[3]),
        .I1(Dbg_Reg_En[0]),
        .I2(Dbg_Reg_En[1]),
        .I3(Dbg_Reg_En[2]),
        .I4(Dbg_Reg_En[6]),
        .I5(Dbg_Reg_En[7]),
        .O(Dbg_TDO_INST_0_i_2_n_0));
  LUT5 #(
    .INIT(32'h00020000)) 
    Dbg_TDO_INST_0_i_25
       (.I0(MicroBlaze_Core_I_n_489),
        .I1(Dbg_Reg_En[0]),
        .I2(Dbg_Reg_En[5]),
        .I3(Dbg_Reg_En[3]),
        .I4(Dbg_Reg_En[6]),
        .O(Dbg_TDO_INST_0_i_25_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFEFFFFFFFF)) 
    Dbg_TDO_INST_0_i_35
       (.I0(Dbg_Reg_En[7]),
        .I1(Dbg_Reg_En[3]),
        .I2(Dbg_Reg_En[0]),
        .I3(Dbg_Reg_En[1]),
        .I4(Dbg_Reg_En[2]),
        .I5(Dbg_Reg_En[6]),
        .O(Dbg_TDO_INST_0_i_35_n_0));
  (* SOFT_HLUTNM = "soft_lutpair155" *) 
  LUT3 #(
    .INIT(8'hEF)) 
    Dbg_TDO_INST_0_i_9
       (.I0(MicroBlaze_Core_I_n_488),
        .I1(Dbg_Reg_En[2]),
        .I2(Dbg_Reg_En[5]),
        .O(Dbg_TDO_INST_0_i_9_n_0));
  GND GND
       (.G(\<const0> ));
  FDRE \LOCKSTEP_Out_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(MB_Halted),
        .Q(\^LOCKSTEP_Out [3228]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[10] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[6]),
        .Q(\^LOCKSTEP_Out [10]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[11] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[7]),
        .Q(\^LOCKSTEP_Out [11]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[12] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[8]),
        .Q(\^LOCKSTEP_Out [12]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[132] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[0]),
        .Q(\^LOCKSTEP_Out [132]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[133] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[1]),
        .Q(\^LOCKSTEP_Out [133]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[134] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[2]),
        .Q(\^LOCKSTEP_Out [134]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[135] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[3]),
        .Q(\^LOCKSTEP_Out [135]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[136] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[4]),
        .Q(\^LOCKSTEP_Out [136]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[137] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[5]),
        .Q(\^LOCKSTEP_Out [137]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[138] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[6]),
        .Q(\^LOCKSTEP_Out [138]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[139] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[7]),
        .Q(\^LOCKSTEP_Out [139]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[13] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[9]),
        .Q(\^LOCKSTEP_Out [13]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[140] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[8]),
        .Q(\^LOCKSTEP_Out [140]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[141] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[9]),
        .Q(\^LOCKSTEP_Out [141]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[142] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[10]),
        .Q(\^LOCKSTEP_Out [142]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[143] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[11]),
        .Q(\^LOCKSTEP_Out [143]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[144] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[12]),
        .Q(\^LOCKSTEP_Out [144]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[145] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[13]),
        .Q(\^LOCKSTEP_Out [145]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[146] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[14]),
        .Q(\^LOCKSTEP_Out [146]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[147] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[15]),
        .Q(\^LOCKSTEP_Out [147]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[148] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[16]),
        .Q(\^LOCKSTEP_Out [148]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[149] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[17]),
        .Q(\^LOCKSTEP_Out [149]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[14] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[10]),
        .Q(\^LOCKSTEP_Out [14]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[150] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[18]),
        .Q(\^LOCKSTEP_Out [150]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[151] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[19]),
        .Q(\^LOCKSTEP_Out [151]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[152] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[20]),
        .Q(\^LOCKSTEP_Out [152]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[153] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[21]),
        .Q(\^LOCKSTEP_Out [153]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[154] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[22]),
        .Q(\^LOCKSTEP_Out [154]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[155] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[23]),
        .Q(\^LOCKSTEP_Out [155]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[156] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[24]),
        .Q(\^LOCKSTEP_Out [156]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[157] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[25]),
        .Q(\^LOCKSTEP_Out [157]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[158] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[26]),
        .Q(\^LOCKSTEP_Out [158]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[159] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[27]),
        .Q(\^LOCKSTEP_Out [159]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[15] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[11]),
        .Q(\^LOCKSTEP_Out [15]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[160] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[28]),
        .Q(\^LOCKSTEP_Out [160]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[161] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[29]),
        .Q(\^LOCKSTEP_Out [161]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[162] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[30]),
        .Q(\^LOCKSTEP_Out [162]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[163] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[31]),
        .Q(\^LOCKSTEP_Out [163]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[16] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[12]),
        .Q(\^LOCKSTEP_Out [16]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[17] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[13]),
        .Q(\^LOCKSTEP_Out [17]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[18] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[14]),
        .Q(\^LOCKSTEP_Out [18]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[196] 
       (.C(Clk),
        .CE(1'b1),
        .D(D_AS),
        .Q(\^LOCKSTEP_Out [196]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[197] 
       (.C(Clk),
        .CE(1'b1),
        .D(Read_Strobe),
        .Q(\^LOCKSTEP_Out [197]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[198] 
       (.C(Clk),
        .CE(1'b1),
        .D(Write_Strobe),
        .Q(\^LOCKSTEP_Out [198]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[199] 
       (.C(Clk),
        .CE(1'b1),
        .D(Byte_Enable[0]),
        .Q(\^LOCKSTEP_Out [199]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[19] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[15]),
        .Q(\^LOCKSTEP_Out [19]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[200] 
       (.C(Clk),
        .CE(1'b1),
        .D(Byte_Enable[1]),
        .Q(\^LOCKSTEP_Out [200]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[201] 
       (.C(Clk),
        .CE(1'b1),
        .D(Byte_Enable[2]),
        .Q(\^LOCKSTEP_Out [201]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[202] 
       (.C(Clk),
        .CE(1'b1),
        .D(Byte_Enable[3]),
        .Q(\^LOCKSTEP_Out [202]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[20] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[16]),
        .Q(\^LOCKSTEP_Out [20]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[21] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[17]),
        .Q(\^LOCKSTEP_Out [21]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[22] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[18]),
        .Q(\^LOCKSTEP_Out [22]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[23] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[19]),
        .Q(\^LOCKSTEP_Out [23]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[24] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[20]),
        .Q(\^LOCKSTEP_Out [24]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[25] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[21]),
        .Q(\^LOCKSTEP_Out [25]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[26] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[22]),
        .Q(\^LOCKSTEP_Out [26]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[27] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[23]),
        .Q(\^LOCKSTEP_Out [27]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2881] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[0]),
        .Q(\^LOCKSTEP_Out [2881]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2882] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[1]),
        .Q(\^LOCKSTEP_Out [2882]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2883] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[2]),
        .Q(\^LOCKSTEP_Out [2883]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2884] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[3]),
        .Q(\^LOCKSTEP_Out [2884]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2885] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[4]),
        .Q(\^LOCKSTEP_Out [2885]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2886] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[5]),
        .Q(\^LOCKSTEP_Out [2886]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2887] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[6]),
        .Q(\^LOCKSTEP_Out [2887]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2888] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[7]),
        .Q(\^LOCKSTEP_Out [2888]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2889] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[8]),
        .Q(\^LOCKSTEP_Out [2889]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2890] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[9]),
        .Q(\^LOCKSTEP_Out [2890]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2891] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[10]),
        .Q(\^LOCKSTEP_Out [2891]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2892] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[11]),
        .Q(\^LOCKSTEP_Out [2892]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2893] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[12]),
        .Q(\^LOCKSTEP_Out [2893]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2894] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[13]),
        .Q(\^LOCKSTEP_Out [2894]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2895] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[14]),
        .Q(\^LOCKSTEP_Out [2895]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2896] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[15]),
        .Q(\^LOCKSTEP_Out [2896]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2897] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[16]),
        .Q(\^LOCKSTEP_Out [2897]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2898] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[17]),
        .Q(\^LOCKSTEP_Out [2898]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2899] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[18]),
        .Q(\^LOCKSTEP_Out [2899]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[28] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[24]),
        .Q(\^LOCKSTEP_Out [28]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2900] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[19]),
        .Q(\^LOCKSTEP_Out [2900]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2901] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[20]),
        .Q(\^LOCKSTEP_Out [2901]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2902] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[21]),
        .Q(\^LOCKSTEP_Out [2902]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2903] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[22]),
        .Q(\^LOCKSTEP_Out [2903]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2904] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[23]),
        .Q(\^LOCKSTEP_Out [2904]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2905] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[24]),
        .Q(\^LOCKSTEP_Out [2905]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2906] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[25]),
        .Q(\^LOCKSTEP_Out [2906]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2907] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[26]),
        .Q(\^LOCKSTEP_Out [2907]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2908] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[27]),
        .Q(\^LOCKSTEP_Out [2908]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2909] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[28]),
        .Q(\^LOCKSTEP_Out [2909]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2910] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[29]),
        .Q(\^LOCKSTEP_Out [2910]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2911] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[30]),
        .Q(\^LOCKSTEP_Out [2911]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2912] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[31]),
        .Q(\^LOCKSTEP_Out [2912]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2913] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Valid_Instr),
        .Q(\^LOCKSTEP_Out [2913]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2914] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[0]),
        .Q(\^LOCKSTEP_Out [2914]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2915] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[1]),
        .Q(\^LOCKSTEP_Out [2915]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2916] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[2]),
        .Q(\^LOCKSTEP_Out [2916]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2917] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[3]),
        .Q(\^LOCKSTEP_Out [2917]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2918] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[4]),
        .Q(\^LOCKSTEP_Out [2918]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2919] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[5]),
        .Q(\^LOCKSTEP_Out [2919]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2920] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[6]),
        .Q(\^LOCKSTEP_Out [2920]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2921] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[7]),
        .Q(\^LOCKSTEP_Out [2921]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2922] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[8]),
        .Q(\^LOCKSTEP_Out [2922]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2923] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[9]),
        .Q(\^LOCKSTEP_Out [2923]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2924] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[10]),
        .Q(\^LOCKSTEP_Out [2924]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2925] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[11]),
        .Q(\^LOCKSTEP_Out [2925]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2926] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[12]),
        .Q(\^LOCKSTEP_Out [2926]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2927] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[13]),
        .Q(\^LOCKSTEP_Out [2927]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2928] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[14]),
        .Q(\^LOCKSTEP_Out [2928]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2929] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[15]),
        .Q(\^LOCKSTEP_Out [2929]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2930] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[16]),
        .Q(\^LOCKSTEP_Out [2930]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2931] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[17]),
        .Q(\^LOCKSTEP_Out [2931]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2932] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[18]),
        .Q(\^LOCKSTEP_Out [2932]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2933] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[19]),
        .Q(\^LOCKSTEP_Out [2933]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2934] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[20]),
        .Q(\^LOCKSTEP_Out [2934]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2935] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[21]),
        .Q(\^LOCKSTEP_Out [2935]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2936] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[22]),
        .Q(\^LOCKSTEP_Out [2936]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2937] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[23]),
        .Q(\^LOCKSTEP_Out [2937]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2938] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[24]),
        .Q(\^LOCKSTEP_Out [2938]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2939] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[25]),
        .Q(\^LOCKSTEP_Out [2939]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2940] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[26]),
        .Q(\^LOCKSTEP_Out [2940]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2941] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[27]),
        .Q(\^LOCKSTEP_Out [2941]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2942] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[28]),
        .Q(\^LOCKSTEP_Out [2942]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2943] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[29]),
        .Q(\^LOCKSTEP_Out [2943]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2944] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[30]),
        .Q(\^LOCKSTEP_Out [2944]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2945] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[31]),
        .Q(\^LOCKSTEP_Out [2945]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2978] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Reg_Write),
        .Q(\^LOCKSTEP_Out [2978]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2979] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Reg_Addr[0]),
        .Q(\^LOCKSTEP_Out [2979]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2980] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Reg_Addr[1]),
        .Q(\^LOCKSTEP_Out [2980]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2981] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Reg_Addr[2]),
        .Q(\^LOCKSTEP_Out [2981]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2982] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Reg_Addr[3]),
        .Q(\^LOCKSTEP_Out [2982]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2983] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Reg_Addr[4]),
        .Q(\^LOCKSTEP_Out [2983]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2994] 
       (.C(Clk),
        .CE(1'b1),
        .D(\^Trace_MSR_Reg [10]),
        .Q(\^LOCKSTEP_Out [2994]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2995] 
       (.C(Clk),
        .CE(1'b1),
        .D(\^Trace_MSR_Reg [11]),
        .Q(\^LOCKSTEP_Out [2995]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2996] 
       (.C(Clk),
        .CE(1'b1),
        .D(\^Trace_MSR_Reg [12]),
        .Q(\^LOCKSTEP_Out [2996]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2997] 
       (.C(Clk),
        .CE(1'b1),
        .D(\^Trace_MSR_Reg [13]),
        .Q(\^LOCKSTEP_Out [2997]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[29] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[25]),
        .Q(\^LOCKSTEP_Out [29]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(IFetch),
        .Q(\^LOCKSTEP_Out [2]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3007] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[0]),
        .Q(\^LOCKSTEP_Out [3007]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3008] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[1]),
        .Q(\^LOCKSTEP_Out [3008]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3009] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[2]),
        .Q(\^LOCKSTEP_Out [3009]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3010] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[3]),
        .Q(\^LOCKSTEP_Out [3010]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3011] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[4]),
        .Q(\^LOCKSTEP_Out [3011]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3012] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[5]),
        .Q(\^LOCKSTEP_Out [3012]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3013] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[6]),
        .Q(\^LOCKSTEP_Out [3013]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3014] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[7]),
        .Q(\^LOCKSTEP_Out [3014]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3015] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[8]),
        .Q(\^LOCKSTEP_Out [3015]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3016] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[9]),
        .Q(\^LOCKSTEP_Out [3016]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3017] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[10]),
        .Q(\^LOCKSTEP_Out [3017]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3018] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[11]),
        .Q(\^LOCKSTEP_Out [3018]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3019] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[12]),
        .Q(\^LOCKSTEP_Out [3019]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3020] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[13]),
        .Q(\^LOCKSTEP_Out [3020]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3021] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[14]),
        .Q(\^LOCKSTEP_Out [3021]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3022] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[15]),
        .Q(\^LOCKSTEP_Out [3022]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3023] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[16]),
        .Q(\^LOCKSTEP_Out [3023]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3024] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[17]),
        .Q(\^LOCKSTEP_Out [3024]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3025] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[18]),
        .Q(\^LOCKSTEP_Out [3025]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3026] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[19]),
        .Q(\^LOCKSTEP_Out [3026]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3027] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[20]),
        .Q(\^LOCKSTEP_Out [3027]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3028] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[21]),
        .Q(\^LOCKSTEP_Out [3028]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3029] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[22]),
        .Q(\^LOCKSTEP_Out [3029]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3030] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[23]),
        .Q(\^LOCKSTEP_Out [3030]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3031] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[24]),
        .Q(\^LOCKSTEP_Out [3031]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3032] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[25]),
        .Q(\^LOCKSTEP_Out [3032]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3033] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[26]),
        .Q(\^LOCKSTEP_Out [3033]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3034] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[27]),
        .Q(\^LOCKSTEP_Out [3034]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3035] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[28]),
        .Q(\^LOCKSTEP_Out [3035]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3036] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[29]),
        .Q(\^LOCKSTEP_Out [3036]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3037] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[30]),
        .Q(\^LOCKSTEP_Out [3037]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3038] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[31]),
        .Q(\^LOCKSTEP_Out [3038]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3071] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Exception_Taken),
        .Q(\^LOCKSTEP_Out [3073]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3077] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Jump_Taken),
        .Q(\^LOCKSTEP_Out [3077]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3078] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Delay_Slot),
        .Q(\^LOCKSTEP_Out [3078]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3079] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[0]),
        .Q(\^LOCKSTEP_Out [3079]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3080] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[1]),
        .Q(\^LOCKSTEP_Out [3080]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3081] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[2]),
        .Q(\^LOCKSTEP_Out [3081]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3082] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[3]),
        .Q(\^LOCKSTEP_Out [3082]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3083] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[4]),
        .Q(\^LOCKSTEP_Out [3083]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3084] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[5]),
        .Q(\^LOCKSTEP_Out [3084]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3085] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[6]),
        .Q(\^LOCKSTEP_Out [3085]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3086] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[7]),
        .Q(\^LOCKSTEP_Out [3086]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3087] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[8]),
        .Q(\^LOCKSTEP_Out [3087]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3088] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[9]),
        .Q(\^LOCKSTEP_Out [3088]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3089] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[10]),
        .Q(\^LOCKSTEP_Out [3089]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3090] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[11]),
        .Q(\^LOCKSTEP_Out [3090]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3091] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[12]),
        .Q(\^LOCKSTEP_Out [3091]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3092] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[13]),
        .Q(\^LOCKSTEP_Out [3092]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3093] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[14]),
        .Q(\^LOCKSTEP_Out [3093]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3094] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[15]),
        .Q(\^LOCKSTEP_Out [3094]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3095] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[16]),
        .Q(\^LOCKSTEP_Out [3095]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3096] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[17]),
        .Q(\^LOCKSTEP_Out [3096]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3097] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[18]),
        .Q(\^LOCKSTEP_Out [3097]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3098] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[19]),
        .Q(\^LOCKSTEP_Out [3098]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3099] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[20]),
        .Q(\^LOCKSTEP_Out [3099]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[30] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[26]),
        .Q(\^LOCKSTEP_Out [30]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3100] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[21]),
        .Q(\^LOCKSTEP_Out [3100]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3101] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[22]),
        .Q(\^LOCKSTEP_Out [3101]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3102] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[23]),
        .Q(\^LOCKSTEP_Out [3102]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3103] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[24]),
        .Q(\^LOCKSTEP_Out [3103]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3104] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[25]),
        .Q(\^LOCKSTEP_Out [3104]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3105] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[26]),
        .Q(\^LOCKSTEP_Out [3105]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3106] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[27]),
        .Q(\^LOCKSTEP_Out [3106]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3107] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[28]),
        .Q(\^LOCKSTEP_Out [3107]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3108] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[29]),
        .Q(\^LOCKSTEP_Out [3108]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3109] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[30]),
        .Q(\^LOCKSTEP_Out [3109]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3110] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[31]),
        .Q(\^LOCKSTEP_Out [3110]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3143] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[0]),
        .Q(\^LOCKSTEP_Out [3143]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3144] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[1]),
        .Q(\^LOCKSTEP_Out [3144]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3145] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[2]),
        .Q(\^LOCKSTEP_Out [3145]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3146] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[3]),
        .Q(\^LOCKSTEP_Out [3146]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3147] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[4]),
        .Q(\^LOCKSTEP_Out [3147]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3148] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[5]),
        .Q(\^LOCKSTEP_Out [3148]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3149] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[6]),
        .Q(\^LOCKSTEP_Out [3149]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3150] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[7]),
        .Q(\^LOCKSTEP_Out [3150]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3151] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[8]),
        .Q(\^LOCKSTEP_Out [3151]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3152] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[9]),
        .Q(\^LOCKSTEP_Out [3152]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3153] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[10]),
        .Q(\^LOCKSTEP_Out [3153]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3154] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[11]),
        .Q(\^LOCKSTEP_Out [3154]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3155] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[12]),
        .Q(\^LOCKSTEP_Out [3155]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3156] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[13]),
        .Q(\^LOCKSTEP_Out [3156]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3157] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[14]),
        .Q(\^LOCKSTEP_Out [3157]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3158] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[15]),
        .Q(\^LOCKSTEP_Out [3158]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3159] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[16]),
        .Q(\^LOCKSTEP_Out [3159]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3160] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[17]),
        .Q(\^LOCKSTEP_Out [3160]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3161] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[18]),
        .Q(\^LOCKSTEP_Out [3161]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3162] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[19]),
        .Q(\^LOCKSTEP_Out [3162]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3163] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[20]),
        .Q(\^LOCKSTEP_Out [3163]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3164] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[21]),
        .Q(\^LOCKSTEP_Out [3164]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3165] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[22]),
        .Q(\^LOCKSTEP_Out [3165]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3166] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[23]),
        .Q(\^LOCKSTEP_Out [3166]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3167] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[24]),
        .Q(\^LOCKSTEP_Out [3167]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3168] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[25]),
        .Q(\^LOCKSTEP_Out [3168]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3169] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[26]),
        .Q(\^LOCKSTEP_Out [3169]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3170] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[27]),
        .Q(\^LOCKSTEP_Out [3170]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3171] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[28]),
        .Q(\^LOCKSTEP_Out [3171]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3172] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[29]),
        .Q(\^LOCKSTEP_Out [3172]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3173] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[30]),
        .Q(\^LOCKSTEP_Out [3173]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3174] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[31]),
        .Q(\^LOCKSTEP_Out [3174]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[31] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[27]),
        .Q(\^LOCKSTEP_Out [31]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3207] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Byte_Enable[0]),
        .Q(\^LOCKSTEP_Out [3207]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3208] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Byte_Enable[1]),
        .Q(\^LOCKSTEP_Out [3208]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3209] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Byte_Enable[2]),
        .Q(\^LOCKSTEP_Out [3209]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3210] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Byte_Enable[3]),
        .Q(\^LOCKSTEP_Out [3210]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3215] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Access),
        .Q(\^LOCKSTEP_Out [3215]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3216] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Read),
        .Q(\^LOCKSTEP_Out [3216]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3217] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write),
        .Q(\^LOCKSTEP_Out [3217]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3225] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_OF_PipeRun),
        .Q(\^LOCKSTEP_Out [3225]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[32] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[28]),
        .Q(\^LOCKSTEP_Out [32]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[33] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[29]),
        .Q(\^LOCKSTEP_Out [33]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[34] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[30]),
        .Q(\^LOCKSTEP_Out [34]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[35] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[31]),
        .Q(\^LOCKSTEP_Out [35]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3] 
       (.C(Clk),
        .CE(1'b1),
        .D(I_AS),
        .Q(\^LOCKSTEP_Out [3]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[466] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[31]),
        .Q(\^LOCKSTEP_Out [632]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[467] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[30]),
        .Q(\^LOCKSTEP_Out [633]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[468] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[29]),
        .Q(\^LOCKSTEP_Out [634]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[469] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[28]),
        .Q(\^LOCKSTEP_Out [635]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[470] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[27]),
        .Q(\^LOCKSTEP_Out [636]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[471] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[26]),
        .Q(\^LOCKSTEP_Out [637]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[472] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[25]),
        .Q(\^LOCKSTEP_Out [638]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[473] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[24]),
        .Q(\^LOCKSTEP_Out [639]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[474] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[23]),
        .Q(\^LOCKSTEP_Out [640]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[475] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[22]),
        .Q(\^LOCKSTEP_Out [641]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[476] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[21]),
        .Q(\^LOCKSTEP_Out [642]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[477] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[20]),
        .Q(\^LOCKSTEP_Out [643]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[478] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[19]),
        .Q(\^LOCKSTEP_Out [644]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[479] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[18]),
        .Q(\^LOCKSTEP_Out [645]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[480] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[17]),
        .Q(\^LOCKSTEP_Out [646]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[481] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[16]),
        .Q(\^LOCKSTEP_Out [647]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[482] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[15]),
        .Q(\^LOCKSTEP_Out [648]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[483] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[14]),
        .Q(\^LOCKSTEP_Out [649]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[484] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[13]),
        .Q(\^LOCKSTEP_Out [650]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[485] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[12]),
        .Q(\^LOCKSTEP_Out [651]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[486] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[11]),
        .Q(\^LOCKSTEP_Out [652]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[487] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[10]),
        .Q(\^LOCKSTEP_Out [653]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[488] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[9]),
        .Q(\^LOCKSTEP_Out [654]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[489] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[8]),
        .Q(\^LOCKSTEP_Out [655]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[490] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[7]),
        .Q(\^LOCKSTEP_Out [656]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[491] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[6]),
        .Q(\^LOCKSTEP_Out [657]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[492] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[5]),
        .Q(\^LOCKSTEP_Out [658]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[493] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[4]),
        .Q(\^LOCKSTEP_Out [659]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[494] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[3]),
        .Q(\^LOCKSTEP_Out [660]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[495] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[2]),
        .Q(\^LOCKSTEP_Out [661]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[496] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[1]),
        .Q(\^LOCKSTEP_Out [662]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[497] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[0]),
        .Q(\^LOCKSTEP_Out [663]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[4] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[0]),
        .Q(\^LOCKSTEP_Out [4]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[539] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b1),
        .Q(\^LOCKSTEP_Out [542]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[555] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWVALID),
        .Q(\^LOCKSTEP_Out [555]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[556] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[31]),
        .Q(\^LOCKSTEP_Out [556]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[557] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[30]),
        .Q(\^LOCKSTEP_Out [557]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[558] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[29]),
        .Q(\^LOCKSTEP_Out [558]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[559] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[28]),
        .Q(\^LOCKSTEP_Out [559]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[560] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[27]),
        .Q(\^LOCKSTEP_Out [560]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[561] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[26]),
        .Q(\^LOCKSTEP_Out [561]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[562] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[25]),
        .Q(\^LOCKSTEP_Out [562]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[563] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[24]),
        .Q(\^LOCKSTEP_Out [563]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[564] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[23]),
        .Q(\^LOCKSTEP_Out [564]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[565] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[22]),
        .Q(\^LOCKSTEP_Out [565]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[566] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[21]),
        .Q(\^LOCKSTEP_Out [566]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[567] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[20]),
        .Q(\^LOCKSTEP_Out [567]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[568] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[19]),
        .Q(\^LOCKSTEP_Out [568]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[569] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[18]),
        .Q(\^LOCKSTEP_Out [569]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[570] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[17]),
        .Q(\^LOCKSTEP_Out [570]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[571] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[16]),
        .Q(\^LOCKSTEP_Out [571]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[572] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[15]),
        .Q(\^LOCKSTEP_Out [572]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[573] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[14]),
        .Q(\^LOCKSTEP_Out [573]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[574] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[13]),
        .Q(\^LOCKSTEP_Out [574]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[575] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[12]),
        .Q(\^LOCKSTEP_Out [575]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[576] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[11]),
        .Q(\^LOCKSTEP_Out [576]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[577] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[10]),
        .Q(\^LOCKSTEP_Out [577]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[578] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[9]),
        .Q(\^LOCKSTEP_Out [578]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[579] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[8]),
        .Q(\^LOCKSTEP_Out [579]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[580] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[7]),
        .Q(\^LOCKSTEP_Out [580]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[581] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[6]),
        .Q(\^LOCKSTEP_Out [581]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[582] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[5]),
        .Q(\^LOCKSTEP_Out [582]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[583] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[4]),
        .Q(\^LOCKSTEP_Out [583]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[584] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[3]),
        .Q(\^LOCKSTEP_Out [584]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[585] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[2]),
        .Q(\^LOCKSTEP_Out [585]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[586] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[1]),
        .Q(\^LOCKSTEP_Out [586]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[587] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[0]),
        .Q(\^LOCKSTEP_Out [587]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[5] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[1]),
        .Q(\^LOCKSTEP_Out [5]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[620] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WSTRB[3]),
        .Q(\^LOCKSTEP_Out [620]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[621] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WSTRB[2]),
        .Q(\^LOCKSTEP_Out [621]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[622] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WSTRB[1]),
        .Q(\^LOCKSTEP_Out [622]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[623] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WSTRB[0]),
        .Q(\^LOCKSTEP_Out [623]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[629] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WVALID),
        .Q(\^LOCKSTEP_Out [629]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[68] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[0]),
        .Q(\^LOCKSTEP_Out [68]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[69] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[1]),
        .Q(\^LOCKSTEP_Out [69]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[6] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[2]),
        .Q(\^LOCKSTEP_Out [6]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[70] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[2]),
        .Q(\^LOCKSTEP_Out [70]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[71] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[3]),
        .Q(\^LOCKSTEP_Out [71]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[721] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARVALID),
        .Q(\^LOCKSTEP_Out [721]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[723] 
       (.C(Clk),
        .CE(1'b1),
        .D(M0_AXIS_TLAST),
        .Q(\^LOCKSTEP_Out [723]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[724] 
       (.C(Clk),
        .CE(1'b1),
        .D(M0_AXIS_TDATA[31]),
        .Q(\^LOCKSTEP_Out [724]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[725] 
       (.C(Clk),
        .CE(1'b1),
        .D(M0_AXIS_TDATA[30]),
        .Q(\^LOCKSTEP_Out [725]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[726] 
       (.C(Clk),
        .CE(1'b1),
        .D(M0_AXIS_TDATA[29]),
        .Q(\^LOCKSTEP_Out [726]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[727] 
       (.C(Clk),
        .CE(1'b1),
        .D(M0_AXIS_TDATA[28]),
        .Q(\^LOCKSTEP_Out [727]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[728] 
       (.C(Clk),
        .CE(1'b1),
        .D(M0_AXIS_TDATA[27]),
        .Q(\^LOCKSTEP_Out [728]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[729] 
       (.C(Clk),
        .CE(1'b1),
        .D(M0_AXIS_TDATA[26]),
        .Q(\^LOCKSTEP_Out [729]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[72] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[4]),
        .Q(\^LOCKSTEP_Out [72]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[730] 
       (.C(Clk),
        .CE(1'b1),
        .D(M0_AXIS_TDATA[25]),
        .Q(\^LOCKSTEP_Out [730]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[731] 
       (.C(Clk),
        .CE(1'b1),
        .D(M0_AXIS_TDATA[24]),
        .Q(\^LOCKSTEP_Out [731]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[732] 
       (.C(Clk),
        .CE(1'b1),
        .D(M0_AXIS_TDATA[23]),
        .Q(\^LOCKSTEP_Out [732]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[733] 
       (.C(Clk),
        .CE(1'b1),
        .D(M0_AXIS_TDATA[22]),
        .Q(\^LOCKSTEP_Out [733]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[734] 
       (.C(Clk),
        .CE(1'b1),
        .D(M0_AXIS_TDATA[21]),
        .Q(\^LOCKSTEP_Out [734]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[735] 
       (.C(Clk),
        .CE(1'b1),
        .D(M0_AXIS_TDATA[20]),
        .Q(\^LOCKSTEP_Out [735]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[736] 
       (.C(Clk),
        .CE(1'b1),
        .D(M0_AXIS_TDATA[19]),
        .Q(\^LOCKSTEP_Out [736]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[737] 
       (.C(Clk),
        .CE(1'b1),
        .D(M0_AXIS_TDATA[18]),
        .Q(\^LOCKSTEP_Out [737]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[738] 
       (.C(Clk),
        .CE(1'b1),
        .D(M0_AXIS_TDATA[17]),
        .Q(\^LOCKSTEP_Out [738]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[739] 
       (.C(Clk),
        .CE(1'b1),
        .D(M0_AXIS_TDATA[16]),
        .Q(\^LOCKSTEP_Out [739]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[73] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[5]),
        .Q(\^LOCKSTEP_Out [73]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[740] 
       (.C(Clk),
        .CE(1'b1),
        .D(M0_AXIS_TDATA[15]),
        .Q(\^LOCKSTEP_Out [740]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[741] 
       (.C(Clk),
        .CE(1'b1),
        .D(M0_AXIS_TDATA[14]),
        .Q(\^LOCKSTEP_Out [741]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[742] 
       (.C(Clk),
        .CE(1'b1),
        .D(M0_AXIS_TDATA[13]),
        .Q(\^LOCKSTEP_Out [742]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[743] 
       (.C(Clk),
        .CE(1'b1),
        .D(M0_AXIS_TDATA[12]),
        .Q(\^LOCKSTEP_Out [743]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[744] 
       (.C(Clk),
        .CE(1'b1),
        .D(M0_AXIS_TDATA[11]),
        .Q(\^LOCKSTEP_Out [744]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[745] 
       (.C(Clk),
        .CE(1'b1),
        .D(M0_AXIS_TDATA[10]),
        .Q(\^LOCKSTEP_Out [745]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[746] 
       (.C(Clk),
        .CE(1'b1),
        .D(M0_AXIS_TDATA[9]),
        .Q(\^LOCKSTEP_Out [746]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[747] 
       (.C(Clk),
        .CE(1'b1),
        .D(M0_AXIS_TDATA[8]),
        .Q(\^LOCKSTEP_Out [747]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[748] 
       (.C(Clk),
        .CE(1'b1),
        .D(M0_AXIS_TDATA[7]),
        .Q(\^LOCKSTEP_Out [748]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[749] 
       (.C(Clk),
        .CE(1'b1),
        .D(M0_AXIS_TDATA[6]),
        .Q(\^LOCKSTEP_Out [749]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[74] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[6]),
        .Q(\^LOCKSTEP_Out [74]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[750] 
       (.C(Clk),
        .CE(1'b1),
        .D(M0_AXIS_TDATA[5]),
        .Q(\^LOCKSTEP_Out [750]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[751] 
       (.C(Clk),
        .CE(1'b1),
        .D(M0_AXIS_TDATA[4]),
        .Q(\^LOCKSTEP_Out [751]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[752] 
       (.C(Clk),
        .CE(1'b1),
        .D(M0_AXIS_TDATA[3]),
        .Q(\^LOCKSTEP_Out [752]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[753] 
       (.C(Clk),
        .CE(1'b1),
        .D(M0_AXIS_TDATA[2]),
        .Q(\^LOCKSTEP_Out [753]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[754] 
       (.C(Clk),
        .CE(1'b1),
        .D(M0_AXIS_TDATA[1]),
        .Q(\^LOCKSTEP_Out [754]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[755] 
       (.C(Clk),
        .CE(1'b1),
        .D(M0_AXIS_TDATA[0]),
        .Q(\^LOCKSTEP_Out [755]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[756] 
       (.C(Clk),
        .CE(1'b1),
        .D(M0_AXIS_TVALID),
        .Q(\^LOCKSTEP_Out [756]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[757] 
       (.C(Clk),
        .CE(1'b1),
        .D(S0_AXIS_TREADY),
        .Q(\^LOCKSTEP_Out [757]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[758] 
       (.C(Clk),
        .CE(1'b1),
        .D(M1_AXIS_TLAST),
        .Q(\^LOCKSTEP_Out [758]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[759] 
       (.C(Clk),
        .CE(1'b1),
        .D(M1_AXIS_TDATA[31]),
        .Q(\^LOCKSTEP_Out [759]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[75] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[7]),
        .Q(\^LOCKSTEP_Out [75]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[760] 
       (.C(Clk),
        .CE(1'b1),
        .D(M1_AXIS_TDATA[30]),
        .Q(\^LOCKSTEP_Out [760]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[761] 
       (.C(Clk),
        .CE(1'b1),
        .D(M1_AXIS_TDATA[29]),
        .Q(\^LOCKSTEP_Out [761]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[762] 
       (.C(Clk),
        .CE(1'b1),
        .D(M1_AXIS_TDATA[28]),
        .Q(\^LOCKSTEP_Out [762]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[763] 
       (.C(Clk),
        .CE(1'b1),
        .D(M1_AXIS_TDATA[27]),
        .Q(\^LOCKSTEP_Out [763]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[764] 
       (.C(Clk),
        .CE(1'b1),
        .D(M1_AXIS_TDATA[26]),
        .Q(\^LOCKSTEP_Out [764]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[765] 
       (.C(Clk),
        .CE(1'b1),
        .D(M1_AXIS_TDATA[25]),
        .Q(\^LOCKSTEP_Out [765]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[766] 
       (.C(Clk),
        .CE(1'b1),
        .D(M1_AXIS_TDATA[24]),
        .Q(\^LOCKSTEP_Out [766]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[767] 
       (.C(Clk),
        .CE(1'b1),
        .D(M1_AXIS_TDATA[23]),
        .Q(\^LOCKSTEP_Out [767]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[768] 
       (.C(Clk),
        .CE(1'b1),
        .D(M1_AXIS_TDATA[22]),
        .Q(\^LOCKSTEP_Out [768]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[769] 
       (.C(Clk),
        .CE(1'b1),
        .D(M1_AXIS_TDATA[21]),
        .Q(\^LOCKSTEP_Out [769]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[76] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[8]),
        .Q(\^LOCKSTEP_Out [76]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[770] 
       (.C(Clk),
        .CE(1'b1),
        .D(M1_AXIS_TDATA[20]),
        .Q(\^LOCKSTEP_Out [770]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[771] 
       (.C(Clk),
        .CE(1'b1),
        .D(M1_AXIS_TDATA[19]),
        .Q(\^LOCKSTEP_Out [771]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[772] 
       (.C(Clk),
        .CE(1'b1),
        .D(M1_AXIS_TDATA[18]),
        .Q(\^LOCKSTEP_Out [772]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[773] 
       (.C(Clk),
        .CE(1'b1),
        .D(M1_AXIS_TDATA[17]),
        .Q(\^LOCKSTEP_Out [773]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[774] 
       (.C(Clk),
        .CE(1'b1),
        .D(M1_AXIS_TDATA[16]),
        .Q(\^LOCKSTEP_Out [774]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[775] 
       (.C(Clk),
        .CE(1'b1),
        .D(M1_AXIS_TDATA[15]),
        .Q(\^LOCKSTEP_Out [775]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[776] 
       (.C(Clk),
        .CE(1'b1),
        .D(M1_AXIS_TDATA[14]),
        .Q(\^LOCKSTEP_Out [776]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[777] 
       (.C(Clk),
        .CE(1'b1),
        .D(M1_AXIS_TDATA[13]),
        .Q(\^LOCKSTEP_Out [777]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[778] 
       (.C(Clk),
        .CE(1'b1),
        .D(M1_AXIS_TDATA[12]),
        .Q(\^LOCKSTEP_Out [778]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[779] 
       (.C(Clk),
        .CE(1'b1),
        .D(M1_AXIS_TDATA[11]),
        .Q(\^LOCKSTEP_Out [779]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[77] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[9]),
        .Q(\^LOCKSTEP_Out [77]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[780] 
       (.C(Clk),
        .CE(1'b1),
        .D(M1_AXIS_TDATA[10]),
        .Q(\^LOCKSTEP_Out [780]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[781] 
       (.C(Clk),
        .CE(1'b1),
        .D(M1_AXIS_TDATA[9]),
        .Q(\^LOCKSTEP_Out [781]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[782] 
       (.C(Clk),
        .CE(1'b1),
        .D(M1_AXIS_TDATA[8]),
        .Q(\^LOCKSTEP_Out [782]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[783] 
       (.C(Clk),
        .CE(1'b1),
        .D(M1_AXIS_TDATA[7]),
        .Q(\^LOCKSTEP_Out [783]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[784] 
       (.C(Clk),
        .CE(1'b1),
        .D(M1_AXIS_TDATA[6]),
        .Q(\^LOCKSTEP_Out [784]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[785] 
       (.C(Clk),
        .CE(1'b1),
        .D(M1_AXIS_TDATA[5]),
        .Q(\^LOCKSTEP_Out [785]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[786] 
       (.C(Clk),
        .CE(1'b1),
        .D(M1_AXIS_TDATA[4]),
        .Q(\^LOCKSTEP_Out [786]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[787] 
       (.C(Clk),
        .CE(1'b1),
        .D(M1_AXIS_TDATA[3]),
        .Q(\^LOCKSTEP_Out [787]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[788] 
       (.C(Clk),
        .CE(1'b1),
        .D(M1_AXIS_TDATA[2]),
        .Q(\^LOCKSTEP_Out [788]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[789] 
       (.C(Clk),
        .CE(1'b1),
        .D(M1_AXIS_TDATA[1]),
        .Q(\^LOCKSTEP_Out [789]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[78] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[10]),
        .Q(\^LOCKSTEP_Out [78]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[790] 
       (.C(Clk),
        .CE(1'b1),
        .D(M1_AXIS_TDATA[0]),
        .Q(\^LOCKSTEP_Out [790]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[791] 
       (.C(Clk),
        .CE(1'b1),
        .D(M1_AXIS_TVALID),
        .Q(\^LOCKSTEP_Out [791]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[792] 
       (.C(Clk),
        .CE(1'b1),
        .D(S1_AXIS_TREADY),
        .Q(\^LOCKSTEP_Out [792]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[79] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[11]),
        .Q(\^LOCKSTEP_Out [79]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[7] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[3]),
        .Q(\^LOCKSTEP_Out [7]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[80] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[12]),
        .Q(\^LOCKSTEP_Out [80]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[81] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[13]),
        .Q(\^LOCKSTEP_Out [81]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[82] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[14]),
        .Q(\^LOCKSTEP_Out [82]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[83] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[15]),
        .Q(\^LOCKSTEP_Out [83]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[84] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[16]),
        .Q(\^LOCKSTEP_Out [84]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[85] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[17]),
        .Q(\^LOCKSTEP_Out [85]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[86] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[18]),
        .Q(\^LOCKSTEP_Out [86]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[87] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[19]),
        .Q(\^LOCKSTEP_Out [87]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[88] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[20]),
        .Q(\^LOCKSTEP_Out [88]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[89] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[21]),
        .Q(\^LOCKSTEP_Out [89]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[8] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[4]),
        .Q(\^LOCKSTEP_Out [8]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[90] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[22]),
        .Q(\^LOCKSTEP_Out [90]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[91] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[23]),
        .Q(\^LOCKSTEP_Out [91]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[92] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[24]),
        .Q(\^LOCKSTEP_Out [92]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[93] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[25]),
        .Q(\^LOCKSTEP_Out [93]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[94] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[26]),
        .Q(\^LOCKSTEP_Out [94]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[95] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[27]),
        .Q(\^LOCKSTEP_Out [95]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[96] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[28]),
        .Q(\^LOCKSTEP_Out [96]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[97] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[29]),
        .Q(\^LOCKSTEP_Out [97]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[98] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[30]),
        .Q(\^LOCKSTEP_Out [98]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[99] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[31]),
        .Q(\^LOCKSTEP_Out [99]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[9] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[5]),
        .Q(\^LOCKSTEP_Out [9]),
        .R(Reset));
  block_design_microblaze_0_0_MicroBlaze_Core MicroBlaze_Core_I
       (.Clk(Clk),
        .D({MB_Halted,IFetch,I_AS,Instr_Addr[0],Instr_Addr[1],Instr_Addr[2],Instr_Addr[3],Instr_Addr[4],Instr_Addr[5],Instr_Addr[6],Instr_Addr[7],Instr_Addr[8],Instr_Addr[9],Instr_Addr[10],Instr_Addr[11],Instr_Addr[12],Instr_Addr[13],Instr_Addr[14],Instr_Addr[15],Instr_Addr[16],Instr_Addr[17],Instr_Addr[18],Instr_Addr[19],Instr_Addr[20],Instr_Addr[21],Instr_Addr[22],Instr_Addr[23],Instr_Addr[24],Instr_Addr[25],Instr_Addr[26],Instr_Addr[27],Instr_Addr[28],Instr_Addr[29],Instr_Addr[30],Instr_Addr[31],Data_Addr[0],Data_Addr[1],Data_Addr[2],Data_Addr[3],Data_Addr[4],Data_Addr[5],Data_Addr[6],Data_Addr[7],Data_Addr[8],Data_Addr[9],Data_Addr[10],Data_Addr[11],Data_Addr[12],Data_Addr[13],Data_Addr[14],Data_Addr[15],Data_Addr[16],Data_Addr[17],Data_Addr[18],Data_Addr[19],Data_Addr[20],Data_Addr[21],Data_Addr[22],Data_Addr[23],Data_Addr[24],Data_Addr[25],Data_Addr[26],Data_Addr[27],Data_Addr[28],Data_Addr[29],Data_Addr[30],Data_Addr[31],Data_Write[0],Data_Write[1],Data_Write[2],Data_Write[3],Data_Write[4],Data_Write[5],Data_Write[6],Data_Write[7],Data_Write[8],Data_Write[9],Data_Write[10],Data_Write[11],Data_Write[12],Data_Write[13],Data_Write[14],Data_Write[15],Data_Write[16],Data_Write[17],Data_Write[18],Data_Write[19],Data_Write[20],Data_Write[21],Data_Write[22],Data_Write[23],Data_Write[24],Data_Write[25],Data_Write[26],Data_Write[27],Data_Write[28],Data_Write[29],Data_Write[30],Data_Write[31],D_AS,Read_Strobe,Write_Strobe,Byte_Enable[0],Byte_Enable[1],Byte_Enable[2],Byte_Enable[3],M_AXI_DP_AWADDR,M_AXI_DP_AWVALID,M_AXI_DP_WDATA,M_AXI_DP_WSTRB,M_AXI_DP_WVALID,M_AXI_DP_ARVALID,M0_AXIS_TLAST,M0_AXIS_TDATA,M0_AXIS_TVALID,S0_AXIS_TREADY,M1_AXIS_TLAST,M1_AXIS_TDATA,M1_AXIS_TVALID,S1_AXIS_TREADY,Trace_Instruction[0],Trace_Instruction[1],Trace_Instruction[2],Trace_Instruction[3],Trace_Instruction[4],Trace_Instruction[5],Trace_Instruction[6],Trace_Instruction[7],Trace_Instruction[8],Trace_Instruction[9],Trace_Instruction[10],Trace_Instruction[11],Trace_Instruction[12],Trace_Instruction[13],Trace_Instruction[14],Trace_Instruction[15],Trace_Instruction[16],Trace_Instruction[17],Trace_Instruction[18],Trace_Instruction[19],Trace_Instruction[20],Trace_Instruction[21],Trace_Instruction[22],Trace_Instruction[23],Trace_Instruction[24],Trace_Instruction[25],Trace_Instruction[26],Trace_Instruction[27],Trace_Instruction[28],Trace_Instruction[29],Trace_Instruction[30],Trace_Instruction[31],Trace_Valid_Instr,Trace_PC[0],Trace_PC[1],Trace_PC[2],Trace_PC[3],Trace_PC[4],Trace_PC[5],Trace_PC[6],Trace_PC[7],Trace_PC[8],Trace_PC[9],Trace_PC[10],Trace_PC[11],Trace_PC[12],Trace_PC[13],Trace_PC[14],Trace_PC[15],Trace_PC[16],Trace_PC[17],Trace_PC[18],Trace_PC[19],Trace_PC[20],Trace_PC[21],Trace_PC[22],Trace_PC[23],Trace_PC[24],Trace_PC[25],Trace_PC[26],Trace_PC[27],Trace_PC[28],Trace_PC[29],Trace_PC[30],Trace_PC[31],Trace_Reg_Write,Trace_Reg_Addr[0],Trace_Reg_Addr[1],Trace_Reg_Addr[2],Trace_Reg_Addr[3],Trace_Reg_Addr[4],\^Trace_MSR_Reg [10],\^Trace_MSR_Reg [11],\^Trace_MSR_Reg [12],\^Trace_MSR_Reg [13],Trace_New_Reg_Value[0],Trace_New_Reg_Value[1],Trace_New_Reg_Value[2],Trace_New_Reg_Value[3],Trace_New_Reg_Value[4],Trace_New_Reg_Value[5],Trace_New_Reg_Value[6],Trace_New_Reg_Value[7],Trace_New_Reg_Value[8],Trace_New_Reg_Value[9],Trace_New_Reg_Value[10],Trace_New_Reg_Value[11],Trace_New_Reg_Value[12],Trace_New_Reg_Value[13],Trace_New_Reg_Value[14],Trace_New_Reg_Value[15],Trace_New_Reg_Value[16],Trace_New_Reg_Value[17],Trace_New_Reg_Value[18],Trace_New_Reg_Value[19],Trace_New_Reg_Value[20],Trace_New_Reg_Value[21],Trace_New_Reg_Value[22],Trace_New_Reg_Value[23],Trace_New_Reg_Value[24],Trace_New_Reg_Value[25],Trace_New_Reg_Value[26],Trace_New_Reg_Value[27],Trace_New_Reg_Value[28],Trace_New_Reg_Value[29],Trace_New_Reg_Value[30],Trace_New_Reg_Value[31],Trace_Exception_Taken,Trace_Jump_Taken,Trace_Delay_Slot,Trace_Data_Address[0],Trace_Data_Address[1],Trace_Data_Address[2],Trace_Data_Address[3],Trace_Data_Address[4],Trace_Data_Address[5],Trace_Data_Address[6],Trace_Data_Address[7],Trace_Data_Address[8],Trace_Data_Address[9],Trace_Data_Address[10],Trace_Data_Address[11],Trace_Data_Address[12],Trace_Data_Address[13],Trace_Data_Address[14],Trace_Data_Address[15],Trace_Data_Address[16],Trace_Data_Address[17],Trace_Data_Address[18],Trace_Data_Address[19],Trace_Data_Address[20],Trace_Data_Address[21],Trace_Data_Address[22],Trace_Data_Address[23],Trace_Data_Address[24],Trace_Data_Address[25],Trace_Data_Address[26],Trace_Data_Address[27],Trace_Data_Address[28],Trace_Data_Address[29],Trace_Data_Address[30],Trace_Data_Address[31],Trace_Data_Write_Value[0],Trace_Data_Write_Value[1],Trace_Data_Write_Value[2],Trace_Data_Write_Value[3],Trace_Data_Write_Value[4],Trace_Data_Write_Value[5],Trace_Data_Write_Value[6],Trace_Data_Write_Value[7],Trace_Data_Write_Value[8],Trace_Data_Write_Value[9],Trace_Data_Write_Value[10],Trace_Data_Write_Value[11],Trace_Data_Write_Value[12],Trace_Data_Write_Value[13],Trace_Data_Write_Value[14],Trace_Data_Write_Value[15],Trace_Data_Write_Value[16],Trace_Data_Write_Value[17],Trace_Data_Write_Value[18],Trace_Data_Write_Value[19],Trace_Data_Write_Value[20],Trace_Data_Write_Value[21],Trace_Data_Write_Value[22],Trace_Data_Write_Value[23],Trace_Data_Write_Value[24],Trace_Data_Write_Value[25],Trace_Data_Write_Value[26],Trace_Data_Write_Value[27],Trace_Data_Write_Value[28],Trace_Data_Write_Value[29],Trace_Data_Write_Value[30],Trace_Data_Write_Value[31],Trace_Data_Byte_Enable[0],Trace_Data_Byte_Enable[1],Trace_Data_Byte_Enable[2],Trace_Data_Byte_Enable[3],Trace_Data_Access,Trace_Data_Read,Trace_Data_Write,Trace_OF_PipeRun}),
        .DReady(DReady),
        .DWait(DWait),
        .Data_Read(Data_Read),
        .Dbg_Capture(Dbg_Capture),
        .Dbg_Clk(Dbg_Clk),
        .Dbg_Intr(Dbg_Intr),
        .Dbg_Reg_En(Dbg_Reg_En),
        .\Dbg_Reg_En[3]_0 (MicroBlaze_Core_I_n_488),
        .Dbg_Reg_En_3_sp_1(MicroBlaze_Core_I_n_487),
        .Dbg_Reg_En_6_sp_1(MicroBlaze_Core_I_n_491),
        .Dbg_Reg_En_7_sp_1(MicroBlaze_Core_I_n_489),
        .Dbg_Shift(Dbg_Shift),
        .Dbg_Stop(Dbg_Stop),
        .Dbg_TDI(Dbg_TDI),
        .Dbg_TDO(Dbg_TDO),
        .Dbg_TDO_0(Dbg_TDO_INST_0_i_10_n_0),
        .Dbg_TDO_1(Dbg_TDO_INST_0_i_9_n_0),
        .Dbg_TDO_2(Dbg_TDO_INST_0_i_1_n_0),
        .Dbg_TDO_3(Dbg_TDO_INST_0_i_2_n_0),
        .Dbg_TDO_INST_0_i_3(Dbg_TDO_INST_0_i_25_n_0),
        .Dbg_TDO_INST_0_i_5(Dbg_TDO_INST_0_i_35_n_0),
        .Dbg_Trig_Ack_In({Dbg_Trig_Ack_In[0],Dbg_Trig_Ack_In[1],Dbg_Trig_Ack_In[2],Dbg_Trig_Ack_In[3],Dbg_Trig_Ack_In[4],Dbg_Trig_Ack_In[5]}),
        .Dbg_Trig_Ack_Out({\^Dbg_Trig_Ack_Out [0],\^Dbg_Trig_Ack_Out [1],\^Dbg_Trig_Ack_Out [2],\^Dbg_Trig_Ack_Out [3],\^Dbg_Trig_Ack_Out [4],\^Dbg_Trig_Ack_Out [5]}),
        .Dbg_Trig_In({\^Dbg_Trig_In [0],\^Dbg_Trig_In [1],\^Dbg_Trig_In [2],\^Dbg_Trig_In [3],\^Dbg_Trig_In [4],\^Dbg_Trig_In [5]}),
        .Dbg_Trig_Out({Dbg_Trig_Out[0],Dbg_Trig_Out[1],Dbg_Trig_Out[2],Dbg_Trig_Out[3],Dbg_Trig_Out[4],Dbg_Trig_Out[5]}),
        .Dbg_Update(Dbg_Update),
        .Debug_Rst(Debug_Rst),
        .Hibernate(Hibernate),
        .IReady(IReady),
        .Instr(Instr),
        .Interrupt(Interrupt),
        .Interrupt_Ack(Interrupt_Ack),
        .Interrupt_Address(Interrupt_Address),
        .LOCKSTEP_Master_Out({\^LOCKSTEP_Master_Out [0],\^LOCKSTEP_Master_Out [1],\^LOCKSTEP_Master_Out [3],\^LOCKSTEP_Master_Out [4],\^LOCKSTEP_Master_Out [5],Dbg_Wakeup,\^LOCKSTEP_Master_Out [12],\^LOCKSTEP_Master_Out [15],\^LOCKSTEP_Master_Out [16],\^LOCKSTEP_Master_Out [17],\^LOCKSTEP_Master_Out [18],\^LOCKSTEP_Master_Out [19],\^LOCKSTEP_Master_Out [20],\^LOCKSTEP_Master_Out [21],\^LOCKSTEP_Master_Out [22],\^LOCKSTEP_Master_Out [23],\^LOCKSTEP_Master_Out [24],\^LOCKSTEP_Master_Out [25],\^LOCKSTEP_Master_Out [26],\^LOCKSTEP_Master_Out [27],\^LOCKSTEP_Master_Out [28],\^LOCKSTEP_Master_Out [29],\^LOCKSTEP_Master_Out [30],\^LOCKSTEP_Master_Out [31],\^LOCKSTEP_Master_Out [32],\^LOCKSTEP_Master_Out [33],\^LOCKSTEP_Master_Out [34],\^LOCKSTEP_Master_Out [35],\^LOCKSTEP_Master_Out [36],\^LOCKSTEP_Master_Out [37],\^LOCKSTEP_Master_Out [38],\^LOCKSTEP_Master_Out [39],\^LOCKSTEP_Master_Out [40],\^LOCKSTEP_Master_Out [41],\^LOCKSTEP_Master_Out [42],\^LOCKSTEP_Master_Out [43],\^LOCKSTEP_Master_Out [44],\^LOCKSTEP_Master_Out [45],\^LOCKSTEP_Master_Out [46]}),
        .M0_AXIS_TREADY(M0_AXIS_TREADY),
        .M1_AXIS_TREADY(M1_AXIS_TREADY),
        .M_AXI_DP_ARREADY(M_AXI_DP_ARREADY),
        .M_AXI_DP_AWREADY(M_AXI_DP_AWREADY),
        .M_AXI_DP_RDATA(M_AXI_DP_RDATA),
        .M_AXI_DP_WREADY(M_AXI_DP_WREADY),
        .Mb_Reset(Mb_Reset),
        .Pause(Pause),
        .Pause_Ack(Pause_Ack),
        .Reset(Reset),
        .Reset_Mode(Reset_Mode),
        .S0_AXIS_TDATA(S0_AXIS_TDATA),
        .S0_AXIS_TLAST(S0_AXIS_TLAST),
        .S0_AXIS_TVALID(S0_AXIS_TVALID),
        .S1_AXIS_TDATA(S1_AXIS_TDATA),
        .S1_AXIS_TLAST(S1_AXIS_TLAST),
        .S1_AXIS_TVALID(S1_AXIS_TVALID),
        .Scan_En(Scan_En),
        .Scan_Reset(Scan_Reset),
        .Scan_Reset_Sel(Scan_Reset_Sel),
        .Sleep(Sleep),
        .Status_Reg_En(\Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Status_Reg_En ),
        .Suspend(Suspend),
        .\Using_FPGA.Native (\^LOCKSTEP_Master_Out [9]),
        .\Using_FPGA.Native_0 (\^LOCKSTEP_Master_Out [2]),
        .\WB_DAXI_Read_Data_reg[31] ({M_AXI_DP_RVALID,M_AXI_DP_BVALID}),
        .Wakeup(Wakeup));
  VCC VCC
       (.P(\<const1> ));
endmodule

module block_design_microblaze_0_0_MicroBlaze_Area
   (D,
    \Using_FPGA.Native ,
    Reg1,
    \Using_FPGA.Native_0 ,
    Op2,
    Dbg_Intr,
    Dbg_Trig_Ack_Out,
    Dbg_Trig_In,
    Pause_Ack,
    FSL_Put_Control,
    Sleep,
    LOCKSTEP_Master_Out,
    Hibernate,
    Suspend,
    Dbg_Reg_En_3_sp_1,
    \Dbg_Reg_En[3]_0 ,
    Dbg_Reg_En_7_sp_1,
    Dbg_TDO,
    \Using_FPGA.Native_1 ,
    E,
    SR,
    Dbg_Reg_En_6_sp_1,
    \S1_AXIS_TDATA[31] ,
    M1_AXIS_TREADY_0,
    M0_AXIS_TREADY_0,
    \Using_FPGA.Native_2 ,
    Interrupt_Ack,
    Clk,
    sync_reset,
    Dbg_Clk,
    Dbg_TDI,
    Dbg_Update,
    Interrupt,
    Scan_Reset,
    Scan_Reset_Sel,
    Scan_En,
    Dbg_Capture,
    Pause,
    Dbg_Trig_Ack_In,
    Dbg_Trig_Out,
    Dbg_Stop,
    Dbg_Reg_En,
    Dbg_TDO_0,
    Dbg_TDO_1,
    Dbg_TDO_2,
    Dbg_TDO_3,
    Dbg_TDO_INST_0_i_3,
    DReady,
    M_AXI_DP_AWREADY,
    M_AXI_DP_WREADY,
    M_AXI_DP_ARREADY,
    \WB_DAXI_Read_Data_reg[31] ,
    \Gen_M_Channel_Handling[1].M_AXIS_TLAST_reg[1] ,
    fsl_carry_hold_value,
    S1_AXIS_TVALID,
    S0_AXIS_TVALID,
    IReady,
    DWait,
    Wakeup,
    out,
    Reset_Mode,
    Dbg_Shift,
    Status_Reg_En,
    Dbg_TDO_INST_0_i_5,
    S1_AXIS_TLAST,
    S0_AXIS_TLAST,
    S1_AXIS_TDATA,
    S0_AXIS_TDATA,
    Data_Read,
    M1_AXIS_TREADY,
    \Gen_M_Channel_Handling[0].m_axis_tvalid_i_reg[0] ,
    M0_AXIS_TREADY,
    fsl_carry_hold,
    Instr,
    M_AXI_DP_RDATA,
    Interrupt_Address,
    Q);
  output [358:0]D;
  output \Using_FPGA.Native ;
  output [0:31]Reg1;
  output \Using_FPGA.Native_0 ;
  output [0:0]Op2;
  output Dbg_Intr;
  output [5:0]Dbg_Trig_Ack_Out;
  output [5:0]Dbg_Trig_In;
  output Pause_Ack;
  output FSL_Put_Control;
  output Sleep;
  output [38:0]LOCKSTEP_Master_Out;
  output Hibernate;
  output Suspend;
  output Dbg_Reg_En_3_sp_1;
  output \Dbg_Reg_En[3]_0 ;
  output Dbg_Reg_En_7_sp_1;
  output Dbg_TDO;
  output [1:0]\Using_FPGA.Native_1 ;
  output [0:0]E;
  output [0:0]SR;
  output Dbg_Reg_En_6_sp_1;
  output [31:0]\S1_AXIS_TDATA[31] ;
  output M1_AXIS_TREADY_0;
  output M0_AXIS_TREADY_0;
  output [0:0]\Using_FPGA.Native_2 ;
  output [0:1]Interrupt_Ack;
  input Clk;
  input sync_reset;
  input Dbg_Clk;
  input Dbg_TDI;
  input Dbg_Update;
  input Interrupt;
  input Scan_Reset;
  input Scan_Reset_Sel;
  input Scan_En;
  input Dbg_Capture;
  input Pause;
  input [5:0]Dbg_Trig_Ack_In;
  input [5:0]Dbg_Trig_Out;
  input Dbg_Stop;
  input [0:7]Dbg_Reg_En;
  input Dbg_TDO_0;
  input Dbg_TDO_1;
  input Dbg_TDO_2;
  input Dbg_TDO_3;
  input Dbg_TDO_INST_0_i_3;
  input DReady;
  input M_AXI_DP_AWREADY;
  input M_AXI_DP_WREADY;
  input M_AXI_DP_ARREADY;
  input [1:0]\WB_DAXI_Read_Data_reg[31] ;
  input \Gen_M_Channel_Handling[1].M_AXIS_TLAST_reg[1] ;
  input fsl_carry_hold_value;
  input S1_AXIS_TVALID;
  input S0_AXIS_TVALID;
  input IReady;
  input DWait;
  input [0:0]Wakeup;
  input [0:0]out;
  input [0:1]Reset_Mode;
  input Dbg_Shift;
  input Status_Reg_En;
  input Dbg_TDO_INST_0_i_5;
  input S1_AXIS_TLAST;
  input S0_AXIS_TLAST;
  input [31:0]S1_AXIS_TDATA;
  input [31:0]S0_AXIS_TDATA;
  input [0:31]Data_Read;
  input M1_AXIS_TREADY;
  input [1:0]\Gen_M_Channel_Handling[0].m_axis_tvalid_i_reg[0] ;
  input M0_AXIS_TREADY;
  input fsl_carry_hold;
  input [0:31]Instr;
  input [31:0]M_AXI_DP_RDATA;
  input [0:31]Interrupt_Address;
  input [31:0]Q;

  wire BitField_Extract;
  wire BitField_Insert;
  wire Clk;
  wire [358:0]D;
  wire DReady;
  wire DReady0_out;
  wire DWait;
  wire Data_Flow_I_n_115;
  wire Data_Flow_I_n_116;
  wire Data_Flow_I_n_117;
  wire Data_Flow_I_n_150;
  wire Data_Flow_I_n_151;
  wire Data_Flow_I_n_152;
  wire Data_Flow_I_n_153;
  wire Data_Flow_I_n_20;
  wire Data_Flow_I_n_21;
  wire Data_Flow_I_n_222;
  wire Data_Flow_I_n_223;
  wire Data_Flow_I_n_224;
  wire Data_Flow_I_n_225;
  wire Data_Flow_I_n_226;
  wire Data_Flow_I_n_227;
  wire Data_Flow_I_n_228;
  wire Data_Flow_I_n_229;
  wire Data_Flow_I_n_230;
  wire Data_Flow_I_n_231;
  wire Data_Flow_I_n_232;
  wire Data_Flow_I_n_233;
  wire Data_Flow_I_n_234;
  wire Data_Flow_I_n_235;
  wire Data_Flow_I_n_236;
  wire Data_Flow_I_n_24;
  wire Data_Flow_I_n_25;
  wire Data_Flow_I_n_26;
  wire Data_Flow_I_n_269;
  wire Data_Flow_I_n_270;
  wire Data_Flow_I_n_28;
  wire Data_Flow_I_n_61;
  wire Data_Flow_I_n_77;
  wire [0:31]Data_Read;
  wire [0:15]Data_Read0_out;
  wire Dbg_Capture;
  wire Dbg_Clk;
  wire Dbg_Intr;
  wire [0:7]Dbg_Reg_En;
  wire \Dbg_Reg_En[3]_0 ;
  wire Dbg_Reg_En_3_sn_1;
  wire Dbg_Reg_En_6_sn_1;
  wire Dbg_Reg_En_7_sn_1;
  wire Dbg_Shift;
  wire Dbg_Stop;
  wire Dbg_TDI;
  wire Dbg_TDO;
  wire Dbg_TDO_0;
  wire Dbg_TDO_1;
  wire Dbg_TDO_2;
  wire Dbg_TDO_3;
  wire Dbg_TDO_INST_0_i_3;
  wire Dbg_TDO_INST_0_i_5;
  wire [5:0]Dbg_Trig_Ack_In;
  wire [5:0]Dbg_Trig_Ack_Out;
  wire [5:0]Dbg_Trig_In;
  wire [5:0]Dbg_Trig_Out;
  wire Dbg_Update;
  wire Decode_I_n_100;
  wire Decode_I_n_104;
  wire Decode_I_n_108;
  wire Decode_I_n_109;
  wire Decode_I_n_110;
  wire Decode_I_n_111;
  wire Decode_I_n_112;
  wire Decode_I_n_113;
  wire Decode_I_n_116;
  wire Decode_I_n_117;
  wire Decode_I_n_118;
  wire Decode_I_n_119;
  wire Decode_I_n_120;
  wire Decode_I_n_121;
  wire Decode_I_n_122;
  wire Decode_I_n_123;
  wire Decode_I_n_124;
  wire Decode_I_n_125;
  wire Decode_I_n_126;
  wire Decode_I_n_127;
  wire Decode_I_n_128;
  wire Decode_I_n_129;
  wire Decode_I_n_130;
  wire Decode_I_n_131;
  wire Decode_I_n_132;
  wire Decode_I_n_133;
  wire Decode_I_n_134;
  wire Decode_I_n_136;
  wire Decode_I_n_137;
  wire Decode_I_n_138;
  wire Decode_I_n_139;
  wire Decode_I_n_140;
  wire Decode_I_n_142;
  wire Decode_I_n_143;
  wire Decode_I_n_144;
  wire Decode_I_n_145;
  wire Decode_I_n_146;
  wire Decode_I_n_147;
  wire Decode_I_n_148;
  wire Decode_I_n_149;
  wire Decode_I_n_150;
  wire Decode_I_n_151;
  wire Decode_I_n_152;
  wire Decode_I_n_153;
  wire Decode_I_n_154;
  wire Decode_I_n_155;
  wire Decode_I_n_158;
  wire Decode_I_n_159;
  wire Decode_I_n_160;
  wire Decode_I_n_161;
  wire Decode_I_n_162;
  wire Decode_I_n_163;
  wire Decode_I_n_164;
  wire Decode_I_n_165;
  wire Decode_I_n_166;
  wire Decode_I_n_167;
  wire Decode_I_n_169;
  wire Decode_I_n_206;
  wire Decode_I_n_207;
  wire Decode_I_n_208;
  wire Decode_I_n_214;
  wire Decode_I_n_215;
  wire Decode_I_n_221;
  wire Decode_I_n_222;
  wire Decode_I_n_223;
  wire Decode_I_n_224;
  wire Decode_I_n_225;
  wire Decode_I_n_226;
  wire Decode_I_n_227;
  wire Decode_I_n_229;
  wire Decode_I_n_230;
  wire Decode_I_n_231;
  wire Decode_I_n_232;
  wire Decode_I_n_233;
  wire Decode_I_n_234;
  wire Decode_I_n_235;
  wire Decode_I_n_236;
  wire Decode_I_n_237;
  wire Decode_I_n_238;
  wire Decode_I_n_239;
  wire Decode_I_n_65;
  wire Decode_I_n_66;
  wire Decode_I_n_67;
  wire Decode_I_n_68;
  wire Decode_I_n_69;
  wire Decode_I_n_70;
  wire Decode_I_n_71;
  wire Decode_I_n_72;
  wire Decode_I_n_73;
  wire Decode_I_n_84;
  wire [0:0]E;
  wire Enable_Interrupt;
  wire FSL_Put_Control;
  wire FSL_Stall;
  wire FSL_Will_Break0;
  wire [1:0]\Gen_M_Channel_Handling[0].m_axis_tvalid_i_reg[0] ;
  wire \Gen_M_Channel_Handling[1].M_AXIS_TLAST_reg[1] ;
  wire Hibernate;
  wire IReady;
  wire IReady1_out;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area_n_100 ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area_n_101 ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area_n_102 ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area_n_106 ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area_n_107 ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area_n_108 ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area_n_109 ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area_n_111 ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area_n_112 ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area_n_113 ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area_n_114 ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area_n_115 ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area_n_117 ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area_n_17 ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area_n_59 ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area_n_70 ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area_n_71 ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area_n_72 ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area_n_75 ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area_n_76 ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area_n_78 ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area_n_79 ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area_n_80 ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area_n_81 ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area_n_82 ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area_n_83 ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area_n_84 ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area_n_85 ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area_n_86 ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area_n_87 ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area_n_88 ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area_n_89 ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area_n_90 ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area_n_91 ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area_n_92 ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area_n_93 ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area_n_97 ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area_n_98 ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area_n_99 ;
  wire [0:31]Instr;
  wire [32:32]Instr_Data;
  wire Interrupt;
  wire [0:1]Interrupt_Ack;
  wire [0:31]Interrupt_Address;
  wire [38:0]LOCKSTEP_Master_Out;
  wire M0_AXIS_TREADY;
  wire M0_AXIS_TREADY_0;
  wire M1_AXIS_TREADY;
  wire M1_AXIS_TREADY_0;
  wire MEM_DAXI_Data_Strobe;
  wire \MSR_Reg_I/MSR_Rst ;
  wire MSRclr_Instr;
  wire MTSMSR_Write;
  wire M_AXI_DP_ARREADY;
  wire M_AXI_DP_AWREADY;
  wire [31:0]M_AXI_DP_RDATA;
  wire M_AXI_DP_WREADY;
  wire Not_Barrel_Op;
  wire Not_MB_Get_Op;
  wire O;
  wire [1:1]Op1_Low;
  wire [0:0]Op2;
  wire [1:1]Op2_Low;
  wire \Operand_Select_I/Imm_Reg ;
  wire \Operand_Select_I/OpSelect_Bits[0].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[10].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[11].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[12].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[13].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[14].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[15].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[16].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[17].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[18].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[19].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[1].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[20].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[21].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[22].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[23].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[24].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[24].Operand_Select_Bit_I/I3 ;
  wire \Operand_Select_I/OpSelect_Bits[25].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[25].Operand_Select_Bit_I/I3 ;
  wire \Operand_Select_I/OpSelect_Bits[26].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[26].Operand_Select_Bit_I/I3 ;
  wire \Operand_Select_I/OpSelect_Bits[27].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[28].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[29].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[2].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[30].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[31].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[31].Operand_Select_Bit_I/I3 ;
  wire \Operand_Select_I/OpSelect_Bits[3].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[4].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[5].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[6].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[7].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[8].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[9].Operand_Select_Bit_I/D ;
  wire PCMP_Instr2_out;
  wire [0:31]PC_EX_i;
  wire [0:31]PC_OF;
  wire Pause;
  wire Pause_Ack;
  wire [31:0]Q;
  wire [0:31]Reg1;
  wire [0:1]Reset_Mode;
  wire [31:0]S0_AXIS_TDATA;
  wire S0_AXIS_TLAST;
  wire S0_AXIS_TVALID;
  wire [31:0]S1_AXIS_TDATA;
  wire [31:0]\S1_AXIS_TDATA[31] ;
  wire S1_AXIS_TLAST;
  wire S1_AXIS_TVALID;
  wire [0:0]SR;
  wire Scan_En;
  wire Scan_Reset;
  wire Scan_Reset_Sel;
  wire \Shift_Logic_Module_I/Enable_2 ;
  wire \Shift_Logic_Module_I/I3 ;
  wire \Shift_Logic_Module_I/Shifted ;
  wire Sleep;
  wire Sleep_Decode;
  wire Sleep_Out;
  wire Status_Reg_En;
  wire Suspend;
  wire Unsigned_Op;
  wire \Use_Statistics.Debug_Stat_I/cond_ds_branch ;
  wire \Use_Statistics.Debug_Stat_I/in_delay_slot ;
  wire \Use_Statistics.Debug_Stat_I/p_1_in15_in ;
  wire [2:0]\Use_Statistics.Debug_Stat_I/sel ;
  wire \Use_Statistics.Debug_Stat_I/stat130_out ;
  wire \Use_Statistics.Debug_Stat_I/stat2 ;
  wire \Use_Statistics.Debug_Stat_I/stat212_in ;
  wire \Use_Statistics.Debug_Stat_I/stat2_out ;
  wire \Use_Statistics.Debug_Stat_I/stat5_out ;
  wire [57:57]\Use_Statistics.Debug_Stat_I/stat_stop ;
  wire \Use_Statistics.Debug_Stat_I/uncond_ds_branch ;
  wire \Use_Statistics.Debug_Stat_I/valid_instr ;
  wire \Use_Trace.Debug_Trace_I/is_valid_halted ;
  wire \Use_Trace.Debug_Trace_I/saveload_ctrl ;
  wire \Using_Barrel_Shifter.barrel_shift_I/void_bit ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [1:0]\Using_FPGA.Native_1 ;
  wire [0:0]\Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_i_1__172_n_0 ;
  wire \Using_FPGA.Native_i_2__0__0_n_0 ;
  wire \Using_FPGA.Native_i_2__1__0_n_0 ;
  wire \Using_FPGA.Native_i_2__2__0_n_0 ;
  wire \Using_FPGA.Native_i_2__55_n_0 ;
  wire Valid_Instr_i;
  wire [24:31]WB_DAXI_Read_Data;
  wire [1:0]\WB_DAXI_Read_Data_reg[31] ;
  wire [0:0]Wakeup;
  wire alu_Carry;
  wire [0:1]alu_Op;
  wire branch_with_delay;
  wire [1:3]buffer_Addr;
  wire carry;
  wire carry_In;
  wire clz_instr;
  wire compare_Instr;
  wire dbg_brki_hit;
  wire dbg_brki_hit0;
  wire dbg_clean_stop;
  wire dbg_pause;
  wire delay_slot_instr;
  wire ex_Valid;
  wire ex_mulhu_instr;
  wire ex_not_mul_op;
  wire [30:30]exception_kind;
  wire [16:31]extend_Data_Read;
  wire force_stop_cmd_hold;
  wire force_stop_cmd_i;
  wire fsl_carry_hold;
  wire fsl_carry_hold_value;
  wire has_inhibit_EX;
  wire imm_Instr;
  wire [0:15]imm_Value;
  wire [6:7]instr_ex;
  wire isbyte;
  wire isdoublet;
  wire jump;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire mem_Strobe;
  wire mem_access;
  wire [27:28]msr_I;
  wire \mul_unit_I/ex_sign_C ;
  wire \mul_unit_I/mem_mulh_instr0 ;
  wire [0:31]mux_Instr_Read;
  wire of_PipeRun;
  wire ok_To_Stop;
  wire [0:27]op2_C;
  wire op2_Reg;
  wire op2_Reg__0;
  wire op2_Reg__1;
  wire op2_Reg__10;
  wire op2_Reg__11;
  wire op2_Reg__12;
  wire op2_Reg__13;
  wire op2_Reg__14;
  wire op2_Reg__15;
  wire op2_Reg__16;
  wire op2_Reg__17;
  wire op2_Reg__18;
  wire op2_Reg__19;
  wire op2_Reg__2;
  wire op2_Reg__20;
  wire op2_Reg__21;
  wire op2_Reg__22;
  wire op2_Reg__23;
  wire op2_Reg__24;
  wire op2_Reg__25;
  wire op2_Reg__26;
  wire op2_Reg__27;
  wire op2_Reg__28;
  wire op2_Reg__29;
  wire op2_Reg__3;
  wire op2_Reg__30;
  wire op2_Reg__4;
  wire op2_Reg__5;
  wire op2_Reg__6;
  wire op2_Reg__7;
  wire op2_Reg__8;
  wire op2_Reg__9;
  wire opsel1_PC;
  wire opsel1_SPR;
  wire [0:0]out;
  wire pc_Incr;
  wire pc_Write;
  wire [0:23]raw_Data_Write;
  wire [0:4]reg1_Addr;
  wire reg_Test_Equal;
  wire reg_Test_Equal_N;
  wire reg_Write_I;
  wire reg_Write_dbg;
  wire reg_write_I;
  wire reg_zero;
  wire register_write;
  wire res_Forward1;
  wire res_Forward2;
  wire [0:1]result_Sel;
  wire select_Logic;
  wire set_FSL_Error;
  wire sext16;
  wire sext8;
  wire shift_Carry_Out;
  wire [24:25]shift_Logic_Result;
  wire sign_Extend;
  wire sync_reset;
  wire trace_reg_write_novalid;
  wire use_Imm_Reg;
  wire valid_Fetch;
  wire [0:4]write_Addr;
  wire write_Carry;

  assign Dbg_Reg_En_3_sp_1 = Dbg_Reg_En_3_sn_1;
  assign Dbg_Reg_En_6_sp_1 = Dbg_Reg_En_6_sn_1;
  assign Dbg_Reg_En_7_sp_1 = Dbg_Reg_En_7_sn_1;
  block_design_microblaze_0_0_Byte_Doublet_Handle Byte_Doublet_Handle_I
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] ({raw_Data_Write,D[267],D[266],D[265],D[264],D[263],D[262],D[261],D[260]}),
        .D({D[293:268],D[256:253]}),
        .DReady(DReady),
        .Data_Read({Data_Read[24],Data_Read[25],Data_Read[26],Data_Read[27],Data_Read[28],Data_Read[29],Data_Read[30],Data_Read[31]}),
        .Data_Read0_out({Data_Read0_out[8],Data_Read0_out[9],Data_Read0_out[10],Data_Read0_out[11],Data_Read0_out[12],Data_Read0_out[13],Data_Read0_out[14],Data_Read0_out[15]}),
        .O(O),
        .Op1({Op1_Low,shift_Carry_Out}),
        .Op2({Op2_Low,Op2}),
        .Q({WB_DAXI_Read_Data[24],WB_DAXI_Read_Data[25],WB_DAXI_Read_Data[26],WB_DAXI_Read_Data[27],WB_DAXI_Read_Data[28],WB_DAXI_Read_Data[29],WB_DAXI_Read_Data[30],WB_DAXI_Read_Data[31]}),
        .\Using_FPGA.Native ({extend_Data_Read[16],extend_Data_Read[17],extend_Data_Read[18],extend_Data_Read[19],extend_Data_Read[20],extend_Data_Read[21],extend_Data_Read[22],extend_Data_Read[23]}),
        .extend_Data_Read({extend_Data_Read[24],extend_Data_Read[25],extend_Data_Read[26],extend_Data_Read[27],extend_Data_Read[28],extend_Data_Read[29],extend_Data_Read[30],extend_Data_Read[31]}),
        .isbyte(isbyte),
        .isdoublet(isdoublet));
  block_design_microblaze_0_0_Data_Flow Data_Flow_I
       (.A({Reg1[15],Reg1[16],Reg1[17],Reg1[18],Reg1[19],Reg1[20],Reg1[21],Reg1[22],Reg1[23],Reg1[24],Reg1[25],Reg1[26],Reg1[27],Reg1[28],Reg1[29],Reg1[30],Reg1[31]}),
        .B({op2_C[27],Data_Flow_I_n_20,Data_Flow_I_n_21,Op2_Low,Op2}),
        .BitField_Extract(BitField_Extract),
        .BitField_Insert(BitField_Insert),
        .Buffer_Addr({buffer_Addr[1],buffer_Addr[2],buffer_Addr[3]}),
        .\C_reg[28] (Decode_I_n_104),
        .\C_reg[28]_0 (Decode_I_n_65),
        .Clk(Clk),
        .D({Data_Flow_I_n_150,Data_Flow_I_n_151,Data_Flow_I_n_152,Data_Flow_I_n_153}),
        .DI(pc_Incr),
        .D_0(\Operand_Select_I/OpSelect_Bits[31].Operand_Select_Bit_I/D ),
        .D_1(\Operand_Select_I/OpSelect_Bits[30].Operand_Select_Bit_I/D ),
        .D_10(\Operand_Select_I/OpSelect_Bits[24].Operand_Select_Bit_I/D ),
        .D_11(\Operand_Select_I/OpSelect_Bits[23].Operand_Select_Bit_I/D ),
        .D_12(\Operand_Select_I/OpSelect_Bits[22].Operand_Select_Bit_I/D ),
        .D_13(\Operand_Select_I/OpSelect_Bits[21].Operand_Select_Bit_I/D ),
        .D_14(\Operand_Select_I/OpSelect_Bits[20].Operand_Select_Bit_I/D ),
        .D_15(\Operand_Select_I/OpSelect_Bits[19].Operand_Select_Bit_I/D ),
        .D_16(\Operand_Select_I/OpSelect_Bits[18].Operand_Select_Bit_I/D ),
        .D_17(\Operand_Select_I/OpSelect_Bits[17].Operand_Select_Bit_I/D ),
        .D_18(\Operand_Select_I/OpSelect_Bits[16].Operand_Select_Bit_I/D ),
        .D_19(\Operand_Select_I/OpSelect_Bits[15].Operand_Select_Bit_I/D ),
        .D_2(\Operand_Select_I/OpSelect_Bits[29].Operand_Select_Bit_I/D ),
        .D_20(\Operand_Select_I/OpSelect_Bits[14].Operand_Select_Bit_I/D ),
        .D_21(\Operand_Select_I/OpSelect_Bits[13].Operand_Select_Bit_I/D ),
        .D_22(\Operand_Select_I/OpSelect_Bits[12].Operand_Select_Bit_I/D ),
        .D_23(\Operand_Select_I/OpSelect_Bits[11].Operand_Select_Bit_I/D ),
        .D_24(\Operand_Select_I/OpSelect_Bits[10].Operand_Select_Bit_I/D ),
        .D_25(\Operand_Select_I/OpSelect_Bits[9].Operand_Select_Bit_I/D ),
        .D_26(\Operand_Select_I/OpSelect_Bits[8].Operand_Select_Bit_I/D ),
        .D_27(\Operand_Select_I/OpSelect_Bits[7].Operand_Select_Bit_I/D ),
        .D_28(\Operand_Select_I/OpSelect_Bits[6].Operand_Select_Bit_I/D ),
        .D_29(\Operand_Select_I/OpSelect_Bits[5].Operand_Select_Bit_I/D ),
        .D_3(\Operand_Select_I/OpSelect_Bits[28].Operand_Select_Bit_I/D ),
        .D_30(\Operand_Select_I/OpSelect_Bits[4].Operand_Select_Bit_I/D ),
        .D_31(\Operand_Select_I/OpSelect_Bits[3].Operand_Select_Bit_I/D ),
        .D_32(\Operand_Select_I/OpSelect_Bits[2].Operand_Select_Bit_I/D ),
        .D_33(\Operand_Select_I/OpSelect_Bits[1].Operand_Select_Bit_I/D ),
        .D_34(\Operand_Select_I/OpSelect_Bits[0].Operand_Select_Bit_I/D ),
        .D_4(\Operand_Select_I/OpSelect_Bits[27].Operand_Select_Bit_I/D ),
        .D_6(\Operand_Select_I/OpSelect_Bits[26].Operand_Select_Bit_I/D ),
        .D_8(\Operand_Select_I/OpSelect_Bits[25].Operand_Select_Bit_I/D ),
        .Data_Read0_out({Data_Read0_out[0],Data_Read0_out[1],Data_Read0_out[2],Data_Read0_out[3],Data_Read0_out[4],Data_Read0_out[5],Data_Read0_out[6],Data_Read0_out[7],Data_Read0_out[8],Data_Read0_out[9],Data_Read0_out[10],Data_Read0_out[11],Data_Read0_out[12],Data_Read0_out[13],Data_Read0_out[14],Data_Read0_out[15]}),
        .Data_Read_Mask(Decode_I_n_206),
        .Data_Write({raw_Data_Write,D[267],D[266],D[265],D[264],D[263],D[262],D[261],D[260]}),
        .E(imm_Instr),
        .Enable_2(\Shift_Logic_Module_I/Enable_2 ),
        .Enable_Interrupt(Enable_Interrupt),
        .I3(\Operand_Select_I/OpSelect_Bits[31].Operand_Select_Bit_I/I3 ),
        .I3_35(\Shift_Logic_Module_I/I3 ),
        .I3_5(\Operand_Select_I/OpSelect_Bits[26].Operand_Select_Bit_I/I3 ),
        .I3_7(\Operand_Select_I/OpSelect_Bits[25].Operand_Select_Bit_I/I3 ),
        .I3_9(\Operand_Select_I/OpSelect_Bits[24].Operand_Select_Bit_I/I3 ),
        .IReady(valid_Fetch),
        .Interrupt_Address(Interrupt_Address),
        .LO(alu_Carry),
        .Logic_Oper({Decode_I_n_69,Decode_I_n_70}),
        .MSR_Rst(\MSR_Reg_I/MSR_Rst ),
        .New_Reg_Value(D[76]),
        .OF_PipeRun(Decode_I_n_133),
        .Op1({Op1_Low,shift_Carry_Out}),
        .Op1_Shift(Decode_I_n_225),
        .PCMP_Instr2_out(PCMP_Instr2_out),
        .PC_EX(PC_EX_i),
        .PC_OF(PC_OF),
        .PC_Write(pc_Write),
        .Q({Data_Flow_I_n_222,Data_Flow_I_n_223,Data_Flow_I_n_224,Data_Flow_I_n_225,Data_Flow_I_n_226,Data_Flow_I_n_227,Data_Flow_I_n_228,Data_Flow_I_n_229,Data_Flow_I_n_230,Data_Flow_I_n_231,Data_Flow_I_n_232,Data_Flow_I_n_233,Data_Flow_I_n_234,Data_Flow_I_n_235,Data_Flow_I_n_236,\Operand_Select_I/Imm_Reg }),
        .Reg_Write(reg_write_I),
        .Result_Sel(result_Sel),
        .S0_AXIS_TDATA(S0_AXIS_TDATA),
        .S0_AXIS_TLAST(S0_AXIS_TLAST),
        .S0_AXIS_TVALID(S0_AXIS_TVALID),
        .S1_AXIS_TDATA(S1_AXIS_TDATA),
        .\S1_AXIS_TDATA[31] (\S1_AXIS_TDATA[31] ),
        .S1_AXIS_TLAST(S1_AXIS_TLAST),
        .S1_AXIS_TLAST_0(Data_Flow_I_n_117),
        .S1_AXIS_TVALID(S1_AXIS_TVALID),
        .S1_AXIS_TVALID_0(Data_Flow_I_n_115),
        .SR(\Implement_Debug_Logic.Master_Core.Debug_Area_n_115 ),
        .Select_Logic(select_Logic),
        .Select_Logic_reg(Data_Flow_I_n_270),
        .Sext(\Implement_Debug_Logic.Master_Core.Debug_Area_n_78 ),
        .Shift_Logic_Res(Data_Flow_I_n_269),
        .Shift_Oper(sign_Extend),
        .Shifted(\Shift_Logic_Module_I/Shifted ),
        .Unsigned_Op(Unsigned_Op),
        .\Using_BitField.Gen_Bits[9].mem_Rd_reg[9] ({write_Addr[0],write_Addr[1],write_Addr[2],write_Addr[3],write_Addr[4]}),
        .\Using_FPGA.DSP48E1_I1 (\mul_unit_I/ex_sign_C ),
        .\Using_FPGA.Native (Data_Flow_I_n_24),
        .\Using_FPGA.Native_0 (Data_Flow_I_n_25),
        .\Using_FPGA.Native_1 (Data_Flow_I_n_26),
        .\Using_FPGA.Native_10 (D[79]),
        .\Using_FPGA.Native_11 (D[323:294]),
        .\Using_FPGA.Native_12 (D[75]),
        .\Using_FPGA.Native_13 (D[80]),
        .\Using_FPGA.Native_14 (D[81]),
        .\Using_FPGA.Native_15 (D[82]),
        .\Using_FPGA.Native_16 (D[83]),
        .\Using_FPGA.Native_17 (D[84]),
        .\Using_FPGA.Native_18 (D[85]),
        .\Using_FPGA.Native_19 (D[86]),
        .\Using_FPGA.Native_2 (op2_C[0]),
        .\Using_FPGA.Native_20 (D[87]),
        .\Using_FPGA.Native_21 (D[88]),
        .\Using_FPGA.Native_22 (D[106:89]),
        .\Using_FPGA.Native_23 (D[355:324]),
        .\Using_FPGA.Native_24 (Decode_I_n_233),
        .\Using_FPGA.Native_25 (Decode_I_n_234),
        .\Using_FPGA.Native_26 (Decode_I_n_235),
        .\Using_FPGA.Native_27 (Decode_I_n_236),
        .\Using_FPGA.Native_28 (Decode_I_n_237),
        .\Using_FPGA.Native_29 (Decode_I_n_238),
        .\Using_FPGA.Native_3 (Data_Flow_I_n_28),
        .\Using_FPGA.Native_30 (Decode_I_n_239),
        .\Using_FPGA.Native_31 ({shift_Logic_Result[24],shift_Logic_Result[25]}),
        .\Using_FPGA.Native_32 (\Using_FPGA.Native_i_1__172_n_0 ),
        .\Using_FPGA.Native_33 (\Using_FPGA.Native_i_2__55_n_0 ),
        .\Using_FPGA.Native_34 (Decode_I_n_227),
        .\Using_FPGA.Native_35 (\Using_FPGA.Native_i_2__0__0_n_0 ),
        .\Using_FPGA.Native_36 (Decode_I_n_229),
        .\Using_FPGA.Native_37 (\Using_FPGA.Native_i_2__1__0_n_0 ),
        .\Using_FPGA.Native_38 (Decode_I_n_226),
        .\Using_FPGA.Native_39 (\Using_FPGA.Native_i_2__2__0_n_0 ),
        .\Using_FPGA.Native_4 (Data_Flow_I_n_61),
        .\Using_FPGA.Native_40 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_41 (Decode_I_n_208),
        .\Using_FPGA.Native_42 (Decode_I_n_214),
        .\Using_FPGA.Native_43 (Decode_I_n_224),
        .\Using_FPGA.Native_44 (Decode_I_n_207),
        .\Using_FPGA.Native_45 (Q),
        .\Using_FPGA.Native_5 ({Reg1[0],Reg1[1],Reg1[2],Reg1[3],Reg1[4],Reg1[5],Reg1[6],Reg1[7],Reg1[8],Reg1[9],Reg1[10],Reg1[11],Reg1[12],Reg1[13],Reg1[14]}),
        .\Using_FPGA.Native_6 (Data_Flow_I_n_77),
        .\Using_FPGA.Native_7 (Data_Flow_I_n_116),
        .\Using_FPGA.Native_8 (D[77]),
        .\Using_FPGA.Native_9 (D[78]),
        .\Using_dynamic_instr_Address.old_IE_value_reg (LOCKSTEP_Master_Out[36]),
        .alu_Op(alu_Op),
        .carry(carry),
        .carry_In(carry_In),
        .clz_instr(clz_instr),
        .compare_Instr(compare_Instr),
        .\data_rd_reg_reg[30] (LOCKSTEP_Master_Out[34]),
        .\data_rd_reg_reg[30]_0 (\Implement_Debug_Logic.Master_Core.Debug_Area_n_59 ),
        .ex_mulhu_instr(ex_mulhu_instr),
        .ex_not_mul_op(ex_not_mul_op),
        .exception_kind(exception_kind),
        .extend_Data_Read({extend_Data_Read[16],extend_Data_Read[17],extend_Data_Read[18],extend_Data_Read[19],extend_Data_Read[20],extend_Data_Read[21],extend_Data_Read[22],extend_Data_Read[23],extend_Data_Read[24],extend_Data_Read[25],extend_Data_Read[26],extend_Data_Read[27],extend_Data_Read[28],extend_Data_Read[29],extend_Data_Read[30],extend_Data_Read[31]}),
        .imm_Value(imm_Value),
        .in0(Decode_I_n_215),
        .jump(jump),
        .lopt(lopt),
        .lopt_1(shift_Carry_Out),
        .lopt_2(lopt_1),
        .lopt_3(lopt_2),
        .lopt_4(lopt_3),
        .lopt_5(lopt_4),
        .lopt_6(lopt_5),
        .lopt_7(lopt_6),
        .lopt_8(lopt_7),
        .mem_mulh_instr0(\mul_unit_I/mem_mulh_instr0 ),
        .msr_I({msr_I[27],msr_I[28]}),
        .of_PipeRun(of_PipeRun),
        .op2_Reg(op2_Reg),
        .op2_Reg__0(op2_Reg__0),
        .op2_Reg__1(op2_Reg__1),
        .op2_Reg__10(op2_Reg__10),
        .op2_Reg__11(op2_Reg__11),
        .op2_Reg__12(op2_Reg__12),
        .op2_Reg__13(op2_Reg__13),
        .op2_Reg__14(op2_Reg__14),
        .op2_Reg__15(op2_Reg__15),
        .op2_Reg__16(op2_Reg__16),
        .op2_Reg__17(op2_Reg__17),
        .op2_Reg__18(op2_Reg__18),
        .op2_Reg__19(op2_Reg__19),
        .op2_Reg__2(op2_Reg__2),
        .op2_Reg__20(op2_Reg__20),
        .op2_Reg__21(op2_Reg__21),
        .op2_Reg__22(op2_Reg__22),
        .op2_Reg__23(op2_Reg__23),
        .op2_Reg__24(op2_Reg__24),
        .op2_Reg__25(op2_Reg__25),
        .op2_Reg__26(op2_Reg__26),
        .op2_Reg__27(op2_Reg__27),
        .op2_Reg__28(op2_Reg__28),
        .op2_Reg__29(op2_Reg__29),
        .op2_Reg__3(op2_Reg__3),
        .op2_Reg__30(op2_Reg__30),
        .op2_Reg__4(op2_Reg__4),
        .op2_Reg__5(op2_Reg__5),
        .op2_Reg__6(op2_Reg__6),
        .op2_Reg__7(op2_Reg__7),
        .op2_Reg__8(op2_Reg__8),
        .op2_Reg__9(op2_Reg__9),
        .opsel1_PC(opsel1_PC),
        .opsel1_SPR(opsel1_SPR),
        .reg1_Addr(reg1_Addr),
        .reg_Test_Equal(reg_Test_Equal),
        .reg_Test_Equal_N(reg_Test_Equal_N),
        .reg_zero(reg_zero),
        .register_write(register_write),
        .res_Forward1(res_Forward1),
        .res_Forward2(res_Forward2),
        .sext16(sext16),
        .sext8(sext8),
        .sync_reset(sync_reset),
        .void_bit(\Using_Barrel_Shifter.barrel_shift_I/void_bit ));
  block_design_microblaze_0_0_Decode Decode_I
       (.\Area_Debug_Control.dbg_brki_hit_i_2 (\Implement_Debug_Logic.Master_Core.Debug_Area_n_117 ),
        .\Area_Debug_Control.mb_halted_i_reg (Decode_I_n_159),
        .\Area_Debug_Control.mb_halted_i_reg_0 (\Use_Trace.Debug_Trace_I/is_valid_halted ),
        .B({op2_C[27],Data_Flow_I_n_20,Data_Flow_I_n_21,Op2_Low,Op2}),
        .BitField_Extract(BitField_Extract),
        .BitField_Insert(BitField_Insert),
        .Buffer_Addr({buffer_Addr[1],buffer_Addr[2],buffer_Addr[3]}),
        .Clk(Clk),
        .D({D[357:356],D[259:257],D[149],D[116]}),
        .DI(pc_Incr),
        .DReady(DReady),
        .DReady0_out(DReady0_out),
        .D_0(\Operand_Select_I/OpSelect_Bits[15].Operand_Select_Bit_I/D ),
        .D_1(\Operand_Select_I/OpSelect_Bits[14].Operand_Select_Bit_I/D ),
        .D_10(\Operand_Select_I/OpSelect_Bits[5].Operand_Select_Bit_I/D ),
        .D_11(\Operand_Select_I/OpSelect_Bits[4].Operand_Select_Bit_I/D ),
        .D_12(\Operand_Select_I/OpSelect_Bits[3].Operand_Select_Bit_I/D ),
        .D_13(\Operand_Select_I/OpSelect_Bits[2].Operand_Select_Bit_I/D ),
        .D_14(\Operand_Select_I/OpSelect_Bits[1].Operand_Select_Bit_I/D ),
        .D_15(\Operand_Select_I/OpSelect_Bits[0].Operand_Select_Bit_I/D ),
        .D_16(\Operand_Select_I/OpSelect_Bits[31].Operand_Select_Bit_I/D ),
        .D_17(\Operand_Select_I/OpSelect_Bits[30].Operand_Select_Bit_I/D ),
        .D_18(\Operand_Select_I/OpSelect_Bits[29].Operand_Select_Bit_I/D ),
        .D_19(\Operand_Select_I/OpSelect_Bits[28].Operand_Select_Bit_I/D ),
        .D_2(\Operand_Select_I/OpSelect_Bits[13].Operand_Select_Bit_I/D ),
        .D_20(\Operand_Select_I/OpSelect_Bits[27].Operand_Select_Bit_I/D ),
        .D_21(\Operand_Select_I/OpSelect_Bits[26].Operand_Select_Bit_I/D ),
        .D_22(\Operand_Select_I/OpSelect_Bits[25].Operand_Select_Bit_I/D ),
        .D_23(\Operand_Select_I/OpSelect_Bits[24].Operand_Select_Bit_I/D ),
        .D_24(\Operand_Select_I/OpSelect_Bits[23].Operand_Select_Bit_I/D ),
        .D_25(\Operand_Select_I/OpSelect_Bits[22].Operand_Select_Bit_I/D ),
        .D_26(\Operand_Select_I/OpSelect_Bits[21].Operand_Select_Bit_I/D ),
        .D_27(\Operand_Select_I/OpSelect_Bits[20].Operand_Select_Bit_I/D ),
        .D_28(\Operand_Select_I/OpSelect_Bits[19].Operand_Select_Bit_I/D ),
        .D_29(\Operand_Select_I/OpSelect_Bits[18].Operand_Select_Bit_I/D ),
        .D_3(\Operand_Select_I/OpSelect_Bits[12].Operand_Select_Bit_I/D ),
        .D_30(\Operand_Select_I/OpSelect_Bits[17].Operand_Select_Bit_I/D ),
        .D_31(\Operand_Select_I/OpSelect_Bits[16].Operand_Select_Bit_I/D ),
        .D_4(\Operand_Select_I/OpSelect_Bits[11].Operand_Select_Bit_I/D ),
        .D_5(\Operand_Select_I/OpSelect_Bits[10].Operand_Select_Bit_I/D ),
        .D_6(\Operand_Select_I/OpSelect_Bits[9].Operand_Select_Bit_I/D ),
        .D_7(\Operand_Select_I/OpSelect_Bits[8].Operand_Select_Bit_I/D ),
        .D_8(\Operand_Select_I/OpSelect_Bits[7].Operand_Select_Bit_I/D ),
        .D_9(\Operand_Select_I/OpSelect_Bits[6].Operand_Select_Bit_I/D ),
        .Data_Read_Mask(Decode_I_n_206),
        .E(E),
        .Enable_2(\Shift_Logic_Module_I/Enable_2 ),
        .FSL_Put_Control(FSL_Put_Control),
        .FSL_Will_Break0(FSL_Will_Break0),
        .\Gen_M_Channel_Handling[0].m_axis_tvalid_i_reg[0] (\Gen_M_Channel_Handling[0].m_axis_tvalid_i_reg[0] ),
        .\Gen_M_Channel_Handling[1].M_AXIS_TLAST_reg[1] (\Gen_M_Channel_Handling[1].M_AXIS_TLAST_reg[1] ),
        .Hibernate(Hibernate),
        .I3(\Operand_Select_I/OpSelect_Bits[31].Operand_Select_Bit_I/I3 ),
        .I3_32(\Operand_Select_I/OpSelect_Bits[26].Operand_Select_Bit_I/I3 ),
        .I3_33(\Operand_Select_I/OpSelect_Bits[25].Operand_Select_Bit_I/I3 ),
        .I3_34(\Operand_Select_I/OpSelect_Bits[24].Operand_Select_Bit_I/I3 ),
        .I3_35(\Shift_Logic_Module_I/I3 ),
        .IReady(valid_Fetch),
        .IReady1_out(IReady1_out),
        .Instr_Data(Instr_Data),
        .Interrupt(Interrupt),
        .Interrupt_Ack(Interrupt_Ack),
        .LO(alu_Carry),
        .LOCKSTEP_Master_Out(LOCKSTEP_Master_Out[37]),
        .\LOCKSTEP_Out_reg[3] (\Implement_Debug_Logic.Master_Core.Debug_Area_n_72 ),
        .\LOCKSTEP_Out_reg[3]_0 (\Implement_Debug_Logic.Master_Core.Debug_Area_n_75 ),
        .Logic_Oper({Decode_I_n_69,Decode_I_n_70}),
        .M0_AXIS_TREADY(M0_AXIS_TREADY),
        .M0_AXIS_TREADY_0(M0_AXIS_TREADY_0),
        .M1_AXIS_TREADY(M1_AXIS_TREADY),
        .M1_AXIS_TREADY_0(M1_AXIS_TREADY_0),
        .MEM_DAXI_Data_Strobe(MEM_DAXI_Data_Strobe),
        .MSR_Rst(\MSR_Reg_I/MSR_Rst ),
        .MSRclr_Instr(MSRclr_Instr),
        .MTSMSR_Write(MTSMSR_Write),
        .Not_Barrel_Op(Not_Barrel_Op),
        .Not_MB_Get_Op(Not_MB_Get_Op),
        .OF_PipeRun(Decode_I_n_133),
        .Op1(shift_Carry_Out),
        .Op1_Shift(Decode_I_n_225),
        .PCMP_Instr2_out(PCMP_Instr2_out),
        .PC_OF({PC_OF[24],PC_OF[25],PC_OF[26],PC_OF[31]}),
        .PC_Write(pc_Write),
        .Pause_Ack(Pause_Ack),
        .Q({write_Addr[0],write_Addr[1],write_Addr[2],write_Addr[3],write_Addr[4]}),
        .\Read_AXI_Area.S_AXIS_TREADY_reg[0] (Data_Flow_I_n_115),
        .Reg1(Reg1[0]),
        .Reg_Write(reg_write_I),
        .Result_Sel(result_Sel),
        .Select_Logic(select_Logic),
        .\Serial_Dbg_Intf.control_reg_reg[21] (Decode_I_n_158),
        .\Serial_Dbg_Intf.control_reg_reg[8] (Decode_I_n_100),
        .\Serial_Dbg_Intf.force_stop_cmd_i_reg (Decode_I_n_109),
        .Shift_Carry_In_reg_0(Decode_I_n_224),
        .Shift_Logic_Res(Data_Flow_I_n_269),
        .Shift_Oper(sign_Extend),
        .Shifted(\Shift_Logic_Module_I/Shifted ),
        .Sleep(Sleep),
        .Sleep_Decode(Sleep_Decode),
        .Sleep_Out(Sleep_Out),
        .Suspend(Suspend),
        .Unsigned_Op(Unsigned_Op),
        .\Use_Async_Reset.sync_reset_reg (Decode_I_n_229),
        .\Use_The_PCMP_instr.CLZ_Instr_reg_0 ({shift_Logic_Result[24],shift_Logic_Result[25]}),
        .\Use_The_PCMP_instr.CLZ_Instr_reg_1 (Decode_I_n_214),
        .\Use_The_PCMP_instr.PCMP_Instr_reg_0 (Decode_I_n_208),
        .\Use_The_PCMP_instr.PCMP_Instr_reg_1 (Decode_I_n_233),
        .\Use_The_PCMP_instr.PCMP_Instr_reg_2 (Decode_I_n_235),
        .\Use_The_PCMP_instr.PCMP_Instr_reg_3 (Decode_I_n_237),
        .\Use_The_PCMP_instr.PCMP_Instr_reg_4 (Decode_I_n_239),
        .\Using_Barrel_Shifter.BitField_Extract_reg_0 (Decode_I_n_104),
        .\Using_FPGA.DSP48E1_I1 (op2_C[0]),
        .\Using_FPGA.Native (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_1 (Decode_I_n_207),
        .\Using_FPGA.Native_10 (Decode_I_n_236),
        .\Using_FPGA.Native_11 (Decode_I_n_238),
        .\Using_FPGA.Native_12 (Data_Flow_I_n_117),
        .\Using_FPGA.Native_13 ({Data_Flow_I_n_222,Data_Flow_I_n_223,Data_Flow_I_n_224,Data_Flow_I_n_225,Data_Flow_I_n_226,Data_Flow_I_n_227,Data_Flow_I_n_228,Data_Flow_I_n_229,Data_Flow_I_n_230,Data_Flow_I_n_231,Data_Flow_I_n_232,Data_Flow_I_n_233,Data_Flow_I_n_234,Data_Flow_I_n_235,Data_Flow_I_n_236,\Operand_Select_I/Imm_Reg }),
        .\Using_FPGA.Native_14 (Data_Flow_I_n_28),
        .\Using_FPGA.Native_15 (Data_Flow_I_n_61),
        .\Using_FPGA.Native_16 (Data_Flow_I_n_270),
        .\Using_FPGA.Native_17 (Data_Flow_I_n_24),
        .\Using_FPGA.Native_2 (Decode_I_n_222),
        .\Using_FPGA.Native_3 (Decode_I_n_223),
        .\Using_FPGA.Native_4 (Decode_I_n_226),
        .\Using_FPGA.Native_5 (Decode_I_n_227),
        .\Using_FPGA.Native_6 (Decode_I_n_230),
        .\Using_FPGA.Native_7 (Decode_I_n_231),
        .\Using_FPGA.Native_8 (Decode_I_n_232),
        .\Using_FPGA.Native_9 (Decode_I_n_234),
        .\Using_FSL_Links.Using_Extended_FSL.FSL_Will_Break_No_Dbg_reg_0 (\Implement_Debug_Logic.Master_Core.Debug_Area_n_71 ),
        .\Using_FSL_Links.Using_Extended_FSL.FSL_Will_Break_reg_0 (\Implement_Debug_Logic.Master_Core.Debug_Area_n_70 ),
        .\Using_FSL_Links.fsl_block_instr_reg_0 ({FSL_Stall,mem_Strobe}),
        .\Using_Mul64.ex_mulhu_instr_i_reg_0 (\mul_unit_I/ex_sign_C ),
        .\Using_dynamic_instr_Address.Interrupt_Ack_reg[1]_0 (LOCKSTEP_Master_Out[36]),
        .\Using_dynamic_instr_Address.old_IE_value_reg_0 (Data_Flow_I_n_116),
        .Valid_Instr_i(Valid_Instr_i),
        .Wakeup(Wakeup),
        .Y(mux_Instr_Read),
        .\all_statistics_counters[0].request_i_11_0 (\Implement_Debug_Logic.Master_Core.Debug_Area_n_102 ),
        .\all_statistics_counters[0].request_i_11_1 (D[73]),
        .\all_statistics_counters[0].request_i_12 (\Implement_Debug_Logic.Master_Core.Debug_Area_n_98 ),
        .\all_statistics_counters[0].request_i_15_0 (D[178]),
        .\all_statistics_counters[0].request_i_15_1 (D[181]),
        .\all_statistics_counters[0].request_i_15_2 (D[155]),
        .\all_statistics_counters[0].request_i_15_3 (D[156]),
        .\all_statistics_counters[0].request_i_17_0 (D[7:4]),
        .\all_statistics_counters[0].request_i_17_1 (D[1]),
        .\all_statistics_counters[0].request_i_4 ({\Implement_Debug_Logic.Master_Core.Debug_Area_n_79 ,\Implement_Debug_Logic.Master_Core.Debug_Area_n_80 ,\Implement_Debug_Logic.Master_Core.Debug_Area_n_81 }),
        .\all_statistics_counters[0].request_i_5_0 (D[179]),
        .\all_statistics_counters[0].request_i_5_1 (D[160]),
        .\all_statistics_counters[0].request_i_5_2 (\Implement_Debug_Logic.Master_Core.Debug_Area_n_99 ),
        .\all_statistics_counters[0].request_i_6 (\Implement_Debug_Logic.Master_Core.Debug_Area_n_101 ),
        .\all_statistics_counters[1].request_i_4 (\Use_Statistics.Debug_Stat_I/sel ),
        .\all_statistics_counters[2].request_i_4 ({\Implement_Debug_Logic.Master_Core.Debug_Area_n_91 ,\Implement_Debug_Logic.Master_Core.Debug_Area_n_92 ,\Implement_Debug_Logic.Master_Core.Debug_Area_n_93 }),
        .\all_statistics_counters[3].request_i_4 ({\Implement_Debug_Logic.Master_Core.Debug_Area_n_88 ,\Implement_Debug_Logic.Master_Core.Debug_Area_n_89 ,\Implement_Debug_Logic.Master_Core.Debug_Area_n_90 }),
        .\all_statistics_counters[4].request_i_4 ({\Implement_Debug_Logic.Master_Core.Debug_Area_n_85 ,\Implement_Debug_Logic.Master_Core.Debug_Area_n_86 ,\Implement_Debug_Logic.Master_Core.Debug_Area_n_87 }),
        .\all_statistics_counters[5].request_i_4 ({\Implement_Debug_Logic.Master_Core.Debug_Area_n_82 ,\Implement_Debug_Logic.Master_Core.Debug_Area_n_83 ,\Implement_Debug_Logic.Master_Core.Debug_Area_n_84 }),
        .alu_Op(alu_Op),
        .\branch_count_reg[3] (\Implement_Debug_Logic.Master_Core.Debug_Area_n_111 ),
        .branch_with_delay(branch_with_delay),
        .break_Pipe_i_reg_0({msr_I[28],carry,Enable_Interrupt}),
        .carry_In(carry_In),
        .clz_instr(clz_instr),
        .compare_Instr(compare_Instr),
        .cond_ds_branch(\Use_Statistics.Debug_Stat_I/cond_ds_branch ),
        .dbg_brki_hit(dbg_brki_hit),
        .dbg_brki_hit0(dbg_brki_hit0),
        .dbg_clean_stop(dbg_clean_stop),
        .dbg_pause(dbg_pause),
        .dbg_pause_reg(imm_Instr),
        .delay_slot_instr_reg(LOCKSTEP_Master_Out[34]),
        .ex_Valid(ex_Valid),
        .ex_Valid_reg_0(\Using_FPGA.Native_0 ),
        .ex_mulhu_instr(ex_mulhu_instr),
        .ex_not_mul_op(ex_not_mul_op),
        .exception_kind(exception_kind),
        .force_stop_cmd_hold(force_stop_cmd_hold),
        .force_stop_cmd_i(force_stop_cmd_i),
        .fsl_carry_hold(fsl_carry_hold),
        .fsl_carry_hold_value(fsl_carry_hold_value),
        .has_inhibit_EX(has_inhibit_EX),
        .iFetch_In_Progress_reg_0(\Implement_Debug_Logic.Master_Core.Debug_Area_n_76 ),
        .imm_Value(imm_Value),
        .in0(Decode_I_n_215),
        .in_delay_slot(\Use_Statistics.Debug_Stat_I/in_delay_slot ),
        .in_delay_slot_reg(D[74]),
        .inside_handler_i_2_0(\Implement_Debug_Logic.Master_Core.Debug_Area_n_106 ),
        .inside_handler_reg({D[121:119],D[117]}),
        .inside_handler_reg_0(\Implement_Debug_Logic.Master_Core.Debug_Area_n_107 ),
        .inside_handler_reg_1(\Implement_Debug_Logic.Master_Core.Debug_Area_n_109 ),
        .inside_handler_reg_2(\Implement_Debug_Logic.Master_Core.Debug_Area_n_108 ),
        .\instr_EX_i_reg[0]_0 ({Decode_I_n_110,Decode_I_n_111,Decode_I_n_112,Decode_I_n_113,instr_ex[6],instr_ex[7],Decode_I_n_116,Decode_I_n_117,Decode_I_n_118,Decode_I_n_119,Decode_I_n_120,Decode_I_n_121,Decode_I_n_122,Decode_I_n_123,Decode_I_n_124,Decode_I_n_125,Decode_I_n_126,Decode_I_n_127,Decode_I_n_128,Decode_I_n_129,Decode_I_n_130,Decode_I_n_131,Decode_I_n_132}),
        .\instr_EX_i_reg[21]_0 (Decode_I_n_66),
        .\instr_EX_i_reg[22]_0 (Decode_I_n_65),
        .\instr_EX_i_reg[23]_0 (Decode_I_n_73),
        .\instr_EX_i_reg[24]_0 (Decode_I_n_72),
        .\instr_EX_i_reg[25]_0 (Decode_I_n_67),
        .\instr_EX_i_reg[26]_0 (Decode_I_n_68),
        .\instr_EX_i_reg[27]_0 (Decode_I_n_71),
        .is_swx_I_reg_0(Decode_I_n_108),
        .isbyte(isbyte),
        .isdoublet(isdoublet),
        .jump(jump),
        .jump2_I_1_reg_0(Decode_I_n_169),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .mem_access(mem_access),
        .mem_mulh_instr0(\mul_unit_I/mem_mulh_instr0 ),
        .missed_IFetch_reg_0(LOCKSTEP_Master_Out[35]),
        .missed_IFetch_reg_1(IReady),
        .mtsmsr_write_i_reg_0(Decode_I_n_84),
        .mtsmsr_write_i_reg_1(Decode_I_n_221),
        .of_PipeRun(of_PipeRun),
        .ok_To_Stop(ok_To_Stop),
        .op2_Reg(op2_Reg),
        .op2_Reg__0(op2_Reg__0),
        .op2_Reg__1(op2_Reg__1),
        .op2_Reg__10(op2_Reg__10),
        .op2_Reg__11(op2_Reg__11),
        .op2_Reg__12(op2_Reg__12),
        .op2_Reg__13(op2_Reg__13),
        .op2_Reg__14(op2_Reg__14),
        .op2_Reg__15(op2_Reg__15),
        .op2_Reg__16(op2_Reg__16),
        .op2_Reg__17(op2_Reg__17),
        .op2_Reg__18(op2_Reg__18),
        .op2_Reg__19(op2_Reg__19),
        .op2_Reg__2(op2_Reg__2),
        .op2_Reg__20(op2_Reg__20),
        .op2_Reg__21(op2_Reg__21),
        .op2_Reg__22(op2_Reg__22),
        .op2_Reg__23(op2_Reg__23),
        .op2_Reg__24(op2_Reg__24),
        .op2_Reg__25(op2_Reg__25),
        .op2_Reg__26(op2_Reg__26),
        .op2_Reg__27(op2_Reg__27),
        .op2_Reg__28(op2_Reg__28),
        .op2_Reg__29(op2_Reg__29),
        .op2_Reg__3(op2_Reg__3),
        .op2_Reg__30(op2_Reg__30),
        .op2_Reg__4(op2_Reg__4),
        .op2_Reg__5(op2_Reg__5),
        .op2_Reg__6(op2_Reg__6),
        .op2_Reg__7(op2_Reg__7),
        .op2_Reg__8(op2_Reg__8),
        .op2_Reg__9(op2_Reg__9),
        .opsel1_PC(opsel1_PC),
        .opsel1_SPR(opsel1_SPR),
        .out(out),
        .p_1_in15_in(\Use_Statistics.Debug_Stat_I/p_1_in15_in ),
        .reg1_Addr(reg1_Addr),
        .reg_Test_Equal(reg_Test_Equal),
        .reg_Test_Equal_N(reg_Test_Equal_N),
        .reg_Write_I(reg_Write_I),
        .reg_Write_dbg(reg_Write_dbg),
        .reg_zero(reg_zero),
        .res_Forward1(res_Forward1),
        .res_Forward2(res_Forward2),
        .save_event_next_reg(\Implement_Debug_Logic.Master_Core.Debug_Area_n_100 ),
        .save_pc_next_next_reg(Decode_I_n_165),
        .save_pc_next_next_reg_0(\Implement_Debug_Logic.Master_Core.Debug_Area_n_97 ),
        .save_pc_next_next_reg_1(\Implement_Debug_Logic.Master_Core.Debug_Area_n_112 ),
        .\saved_load_get[0]_i_2_0 (\Use_Trace.Debug_Trace_I/saveload_ctrl ),
        .\saved_load_get_reg[31] (D[177]),
        .\saved_load_get_reg[31]_0 (D[180]),
        .\saved_load_get_reg[31]_1 (D[176]),
        .\saved_load_get_reg[31]_2 (D[2]),
        .\saved_load_get_reg[31]_3 (\Implement_Debug_Logic.Master_Core.Debug_Area_n_114 ),
        .\saved_pc_reg[31] (D[358]),
        .set_FSL_Error(set_FSL_Error),
        .sext16(sext16),
        .sext8(sext8),
        .stat130_out(\Use_Statistics.Debug_Stat_I/stat130_out ),
        .stat2(\Use_Statistics.Debug_Stat_I/stat2 ),
        .stat212_in(\Use_Statistics.Debug_Stat_I/stat212_in ),
        .stat2_out(\Use_Statistics.Debug_Stat_I/stat2_out ),
        .stat5_out(\Use_Statistics.Debug_Stat_I/stat5_out ),
        .\stat_select_reg[0][2] (Decode_I_n_136),
        .\stat_select_reg[0][2]_0 (Decode_I_n_144),
        .\stat_select_reg[0][2]_1 (Decode_I_n_150),
        .\stat_select_reg[1][2] (Decode_I_n_142),
        .\stat_select_reg[1][2]_0 (Decode_I_n_149),
        .\stat_select_reg[1][2]_1 (Decode_I_n_155),
        .\stat_select_reg[2][2] (Decode_I_n_140),
        .\stat_select_reg[2][2]_0 (Decode_I_n_148),
        .\stat_select_reg[2][2]_1 (Decode_I_n_154),
        .\stat_select_reg[3][2] (Decode_I_n_139),
        .\stat_select_reg[3][2]_0 (Decode_I_n_147),
        .\stat_select_reg[3][2]_1 (Decode_I_n_153),
        .\stat_select_reg[4][2] (Decode_I_n_138),
        .\stat_select_reg[4][2]_0 (Decode_I_n_146),
        .\stat_select_reg[4][2]_1 (Decode_I_n_152),
        .\stat_select_reg[5][2] (Decode_I_n_137),
        .\stat_select_reg[5][2]_0 (Decode_I_n_145),
        .\stat_select_reg[5][2]_1 (Decode_I_n_151),
        .stat_stop(\Use_Statistics.Debug_Stat_I/stat_stop ),
        .sync_reset(sync_reset),
        .trace_data_read_i_reg(Decode_I_n_161),
        .trace_data_read_i_reg_0(Decode_I_n_163),
        .trace_exception_taken_i_reg(Decode_I_n_162),
        .trace_exception_taken_i_reg_0(Decode_I_n_164),
        .trace_exception_taken_i_reg_1(Decode_I_n_166),
        .trace_exception_taken_i_reg_2(Decode_I_n_167),
        .\trace_instruction_i_reg[3] (Decode_I_n_134),
        .\trace_instruction_i_reg[5] (Decode_I_n_143),
        .\trace_instruction_i_reg[9] (Decode_I_n_160),
        .trace_reg_write_novalid(trace_reg_write_novalid),
        .uncond_ds_branch(\Use_Statistics.Debug_Stat_I/uncond_ds_branch ),
        .use_Imm_Reg(use_Imm_Reg),
        .using_Imm_reg_0(\Using_FPGA.Native ),
        .valid_instr(\Use_Statistics.Debug_Stat_I/valid_instr ),
        .void_bit(\Using_Barrel_Shifter.barrel_shift_I/void_bit ),
        .\void_bit16_reg[0] (Data_Flow_I_n_77),
        .write_Carry(write_Carry),
        .\writems[0]_i_8 (\Implement_Debug_Logic.Master_Core.Debug_Area_n_17 ),
        .\writems[1]_i_2 (D[172]),
        .\writems[1]_i_2_0 (D[174]),
        .\writems[1]_i_2_1 (\Implement_Debug_Logic.Master_Core.Debug_Area_n_113 ));
  block_design_microblaze_0_0_Debug \Implement_Debug_Logic.Master_Core.Debug_Area 
       (.\Area_Debug_Control.force_stop_cmd_hold_reg_0 (\Implement_Debug_Logic.Master_Core.Debug_Area_n_70 ),
        .\Area_Debug_Control.force_stop_cmd_hold_reg_1 (\Implement_Debug_Logic.Master_Core.Debug_Area_n_71 ),
        .\Area_Debug_Control.force_stop_cmd_hold_reg_2 (Decode_I_n_109),
        .\Area_Debug_Control.mb_halted_i_reg_0 (D[358]),
        .Clk(Clk),
        .D({D[357],D[220],D[182:73],D[71:0]}),
        .Dbg_Capture(Dbg_Capture),
        .Dbg_Clk(Dbg_Clk),
        .Dbg_Intr(Dbg_Intr),
        .Dbg_Reg_En(Dbg_Reg_En),
        .\Dbg_Reg_En[3]_0 (\Dbg_Reg_En[3]_0 ),
        .Dbg_Reg_En_3_sp_1(Dbg_Reg_En_3_sn_1),
        .Dbg_Reg_En_6_sp_1(Dbg_Reg_En_6_sn_1),
        .Dbg_Reg_En_7_sp_1(Dbg_Reg_En_7_sn_1),
        .Dbg_Shift(Dbg_Shift),
        .Dbg_Stop(Dbg_Stop),
        .Dbg_TDI(Dbg_TDI),
        .Dbg_TDO(Dbg_TDO),
        .Dbg_TDO_0(Dbg_TDO_0),
        .Dbg_TDO_1(Dbg_TDO_1),
        .Dbg_TDO_2(Dbg_TDO_2),
        .Dbg_TDO_3(Dbg_TDO_3),
        .Dbg_TDO_INST_0_i_3(Dbg_TDO_INST_0_i_3),
        .Dbg_TDO_INST_0_i_5(Dbg_TDO_INST_0_i_5),
        .Dbg_Trig_Ack_In(Dbg_Trig_Ack_In),
        .Dbg_Trig_Ack_Out(Dbg_Trig_Ack_Out),
        .Dbg_Trig_In(Dbg_Trig_In),
        .Dbg_Trig_Out(Dbg_Trig_Out),
        .Dbg_Update(Dbg_Update),
        .E(\Use_Trace.Debug_Trace_I/is_valid_halted ),
        .FSL_Will_Break0(FSL_Will_Break0),
        .IReady(IReady),
        .IReady1_out(IReady1_out),
        .Interrupt(Interrupt),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[38],LOCKSTEP_Master_Out[36:0]}),
        .Not_Barrel_Op(Not_Barrel_Op),
        .Not_MB_Get_Op(Not_MB_Get_Op),
        .OF_PipeRun(Decode_I_n_133),
        .PC_EX({PC_EX_i[0],PC_EX_i[1],PC_EX_i[2],PC_EX_i[3],PC_EX_i[4],PC_EX_i[5],PC_EX_i[6],PC_EX_i[7],PC_EX_i[8],PC_EX_i[9],PC_EX_i[10],PC_EX_i[11],PC_EX_i[12],PC_EX_i[13],PC_EX_i[14],PC_EX_i[15],PC_EX_i[16],PC_EX_i[17],PC_EX_i[18],PC_EX_i[19],PC_EX_i[20],PC_EX_i[21],PC_EX_i[22],PC_EX_i[23],PC_EX_i[24],PC_EX_i[25],PC_EX_i[26],PC_EX_i[31]}),
        .PC_OF(PC_OF),
        .Pause(Pause),
        .Q({\Implement_Debug_Logic.Master_Core.Debug_Area_n_79 ,\Implement_Debug_Logic.Master_Core.Debug_Area_n_80 ,\Implement_Debug_Logic.Master_Core.Debug_Area_n_81 }),
        .Reset_Mode(Reset_Mode),
        .SR(SR),
        .Scan_En(Scan_En),
        .Scan_Reset(Scan_Reset),
        .Scan_Reset_Sel(Scan_Reset_Sel),
        .\Serial_Dbg_Intf.control_reg_reg[20] (\Use_Trace.Debug_Trace_I/saveload_ctrl ),
        .\Serial_Dbg_Intf.control_reg_reg[21] (\Implement_Debug_Logic.Master_Core.Debug_Area_n_97 ),
        .\Serial_Dbg_Intf.control_reg_reg[21]_0 (\Implement_Debug_Logic.Master_Core.Debug_Area_n_111 ),
        .\Serial_Dbg_Intf.control_reg_reg[8]_0 (\Implement_Debug_Logic.Master_Core.Debug_Area_n_117 ),
        .\Serial_Dbg_Intf.if_debug_ready_i_reg_0 (\Implement_Debug_Logic.Master_Core.Debug_Area_n_75 ),
        .\Serial_Dbg_Intf.status_reg_reg[21]_0 ({FSL_Stall,mem_Strobe}),
        .\Serial_Dbg_Intf.trig_in_1_pulse_reg_0 (\Implement_Debug_Logic.Master_Core.Debug_Area_n_100 ),
        .Sext(\Implement_Debug_Logic.Master_Core.Debug_Area_n_78 ),
        .Sleep(Sleep),
        .Sleep_Decode(Sleep_Decode),
        .Sleep_Out(Sleep_Out),
        .Status_Reg_En(Status_Reg_En),
        .\Use_Async_Reset.sync_reset_reg (\Implement_Debug_Logic.Master_Core.Debug_Area_n_76 ),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Implement_Debug_Logic.Master_Core.Debug_Area_n_72 ),
        .\Using_FPGA.Native_2 (\Implement_Debug_Logic.Master_Core.Debug_Area_n_115 ),
        .\Using_FPGA.Native_3 (Decode_I_n_100),
        .\Using_FPGA.Native_4 (Data_Flow_I_n_28),
        .Valid_Instr_i(Valid_Instr_i),
        .Wakeup(Wakeup),
        .\all_statistics_counters[0].ready_reg (Decode_I_n_150),
        .\all_statistics_counters[0].ready_reg_0 (Decode_I_n_136),
        .\all_statistics_counters[0].ready_reg_1 (Decode_I_n_144),
        .\all_statistics_counters[0].request_i_4 (Decode_I_n_143),
        .\all_statistics_counters[0].request_reg_i_3 (Decode_I_n_134),
        .\all_statistics_counters[1].request_reg (Decode_I_n_155),
        .\all_statistics_counters[1].request_reg_0 (Decode_I_n_142),
        .\all_statistics_counters[1].request_reg_1 (Decode_I_n_149),
        .\all_statistics_counters[2].ready_reg (Decode_I_n_154),
        .\all_statistics_counters[2].ready_reg_0 (Decode_I_n_140),
        .\all_statistics_counters[2].ready_reg_1 (Decode_I_n_148),
        .\all_statistics_counters[3].ready_reg (Decode_I_n_153),
        .\all_statistics_counters[3].ready_reg_0 (Decode_I_n_139),
        .\all_statistics_counters[3].ready_reg_1 (Decode_I_n_147),
        .\all_statistics_counters[4].ready_reg (Decode_I_n_152),
        .\all_statistics_counters[4].ready_reg_0 (Decode_I_n_138),
        .\all_statistics_counters[4].ready_reg_1 (Decode_I_n_146),
        .\all_statistics_counters[5].ready_reg (Decode_I_n_151),
        .\all_statistics_counters[5].ready_reg_0 (Decode_I_n_137),
        .\all_statistics_counters[5].ready_reg_1 (Decode_I_n_145),
        .\branch_count_reg[3] (Decode_I_n_158),
        .branch_with_delay(branch_with_delay),
        .cond_ds_branch(\Use_Statistics.Debug_Stat_I/cond_ds_branch ),
        .\data_rd_reg_reg[27]_0 ({Data_Flow_I_n_150,Data_Flow_I_n_151,Data_Flow_I_n_152,Data_Flow_I_n_153}),
        .dbg_brki_hit(dbg_brki_hit),
        .dbg_brki_hit0(dbg_brki_hit0),
        .dbg_clean_stop(dbg_clean_stop),
        .dbg_pause(dbg_pause),
        .delay_slot_instr_reg_0(delay_slot_instr),
        .\event_data_next_reg[12] (Decode_I_n_159),
        .\event_data_reg[7] (Decode_I_n_169),
        .ex_Valid(ex_Valid),
        .force_stop_cmd_hold(force_stop_cmd_hold),
        .force_stop_cmd_i(force_stop_cmd_i),
        .has_inhibit_EX(has_inhibit_EX),
        .in_delay_slot(\Use_Statistics.Debug_Stat_I/in_delay_slot ),
        .of_PipeRun(of_PipeRun),
        .ok_To_Stop(ok_To_Stop),
        .out(out),
        .p_1_in15_in(\Use_Statistics.Debug_Stat_I/p_1_in15_in ),
        .read_register_MSR_1_reg_0(\Implement_Debug_Logic.Master_Core.Debug_Area_n_59 ),
        .reg_Write_dbg(reg_Write_dbg),
        .register_write(register_write),
        .\sample_1_reg[1] (\WB_DAXI_Read_Data_reg[31] ),
        .save_event_next_reg(Decode_I_n_166),
        .save_event_next_reg_0(Decode_I_n_163),
        .save_pc_next_next_reg(\Implement_Debug_Logic.Master_Core.Debug_Area_n_17 ),
        .save_pc_next_next_reg_0(Decode_I_n_164),
        .\save_sel_reg[0][2] (Decode_I_n_167),
        .\save_sel_reg[0][2]_0 (Decode_I_n_160),
        .\saved_load_get_reg[31] (Decode_I_n_161),
        .sext8(sext8),
        .stat130_out(\Use_Statistics.Debug_Stat_I/stat130_out ),
        .stat2(\Use_Statistics.Debug_Stat_I/stat2 ),
        .stat212_in(\Use_Statistics.Debug_Stat_I/stat212_in ),
        .stat2_out(\Use_Statistics.Debug_Stat_I/stat2_out ),
        .stat5_out(\Use_Statistics.Debug_Stat_I/stat5_out ),
        .\stat_select_reg[1][2] (\Use_Statistics.Debug_Stat_I/sel ),
        .\stat_select_reg[2][2] ({\Implement_Debug_Logic.Master_Core.Debug_Area_n_91 ,\Implement_Debug_Logic.Master_Core.Debug_Area_n_92 ,\Implement_Debug_Logic.Master_Core.Debug_Area_n_93 }),
        .\stat_select_reg[3][2] ({\Implement_Debug_Logic.Master_Core.Debug_Area_n_88 ,\Implement_Debug_Logic.Master_Core.Debug_Area_n_89 ,\Implement_Debug_Logic.Master_Core.Debug_Area_n_90 }),
        .\stat_select_reg[4][2] ({\Implement_Debug_Logic.Master_Core.Debug_Area_n_85 ,\Implement_Debug_Logic.Master_Core.Debug_Area_n_86 ,\Implement_Debug_Logic.Master_Core.Debug_Area_n_87 }),
        .\stat_select_reg[5][2] ({\Implement_Debug_Logic.Master_Core.Debug_Area_n_82 ,\Implement_Debug_Logic.Master_Core.Debug_Area_n_83 ,\Implement_Debug_Logic.Master_Core.Debug_Area_n_84 }),
        .stat_stop(\Use_Statistics.Debug_Stat_I/stat_stop ),
        .sync_reset(sync_reset),
        .\trace_instruction_i_reg[0] (\Implement_Debug_Logic.Master_Core.Debug_Area_n_98 ),
        .\trace_instruction_i_reg[0]_0 (\Implement_Debug_Logic.Master_Core.Debug_Area_n_101 ),
        .\trace_instruction_i_reg[0]_1 (\Implement_Debug_Logic.Master_Core.Debug_Area_n_102 ),
        .\trace_instruction_i_reg[16] (\Implement_Debug_Logic.Master_Core.Debug_Area_n_114 ),
        .\trace_instruction_i_reg[2] (\Implement_Debug_Logic.Master_Core.Debug_Area_n_112 ),
        .\trace_instruction_i_reg[2]_0 (\Implement_Debug_Logic.Master_Core.Debug_Area_n_113 ),
        .\trace_instruction_i_reg[4] (\Implement_Debug_Logic.Master_Core.Debug_Area_n_99 ),
        .\trace_pc_i_reg[17] (\Implement_Debug_Logic.Master_Core.Debug_Area_n_107 ),
        .\trace_pc_i_reg[1] (\Implement_Debug_Logic.Master_Core.Debug_Area_n_109 ),
        .\trace_pc_i_reg[24] (\Implement_Debug_Logic.Master_Core.Debug_Area_n_106 ),
        .\trace_pc_i_reg[9] (\Implement_Debug_Logic.Master_Core.Debug_Area_n_108 ),
        .uncond_ds_branch(\Use_Statistics.Debug_Stat_I/uncond_ds_branch ),
        .use_Imm_Reg(use_Imm_Reg),
        .valid_instr(\Use_Statistics.Debug_Stat_I/valid_instr ),
        .\writems[0]_i_7 (Decode_I_n_165),
        .\writems_reg[1] (Decode_I_n_162));
  block_design_microblaze_0_0_DAXI_interface \Using_Ext_Databus.DAXI_Interface_I1 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 ({D[323:260],D[256:253]}),
        .Clk(Clk),
        .D(D[252:182]),
        .DReady(DReady),
        .DReady0_out(DReady0_out),
        .DWait(DWait),
        .Data_Read({Data_Read[0],Data_Read[1],Data_Read[2],Data_Read[3],Data_Read[4],Data_Read[5],Data_Read[6],Data_Read[7],Data_Read[8],Data_Read[9],Data_Read[10],Data_Read[11],Data_Read[12],Data_Read[13],Data_Read[14],Data_Read[15],Data_Read[16],Data_Read[17],Data_Read[18],Data_Read[19],Data_Read[20],Data_Read[21],Data_Read[22],Data_Read[23]}),
        .Data_Read0_out({Data_Read0_out[0],Data_Read0_out[1],Data_Read0_out[2],Data_Read0_out[3],Data_Read0_out[4],Data_Read0_out[5],Data_Read0_out[6],Data_Read0_out[7],Data_Read0_out[8],Data_Read0_out[9],Data_Read0_out[10],Data_Read0_out[11],Data_Read0_out[12],Data_Read0_out[13],Data_Read0_out[14],Data_Read0_out[15]}),
        .LOCKSTEP_Master_Out(LOCKSTEP_Master_Out[37]),
        .MEM_DAXI_Data_Strobe(MEM_DAXI_Data_Strobe),
        .M_AXI_DP_ARREADY(M_AXI_DP_ARREADY),
        .M_AXI_DP_AWREADY(M_AXI_DP_AWREADY),
        .M_AXI_DP_AWVALID_i_reg_0(D[257]),
        .M_AXI_DP_RDATA(M_AXI_DP_RDATA),
        .M_AXI_DP_WREADY(M_AXI_DP_WREADY),
        .O(O),
        .Q({WB_DAXI_Read_Data[24],WB_DAXI_Read_Data[25],WB_DAXI_Read_Data[26],WB_DAXI_Read_Data[27],WB_DAXI_Read_Data[28],WB_DAXI_Read_Data[29],WB_DAXI_Read_Data[30],WB_DAXI_Read_Data[31]}),
        .\WB_DAXI_Read_Data_reg[31]_0 (\WB_DAXI_Read_Data_reg[31] ),
        .extend_Data_Read({extend_Data_Read[16],extend_Data_Read[17],extend_Data_Read[18],extend_Data_Read[19],extend_Data_Read[20],extend_Data_Read[21],extend_Data_Read[22],extend_Data_Read[23]}),
        .mem_access(mem_access),
        .sync_reset(sync_reset));
  FDRE \Using_Ext_Databus.mem_access_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(Decode_I_n_108),
        .Q(mem_access),
        .R(sync_reset));
  LUT2 #(
    .INIT(4'h1)) 
    \Using_FPGA.Native_i_1__172 
       (.I0(Reg1[30]),
        .I1(Reg1[31]),
        .O(\Using_FPGA.Native_i_1__172_n_0 ));
  LUT6 #(
    .INIT(64'hEFEEEEEEEAEEEEEE)) 
    \Using_FPGA.Native_i_2__0__0 
       (.I0(Decode_I_n_231),
        .I1(msr_I[28]),
        .I2(\Using_FPGA.Native_0 ),
        .I3(ex_Valid),
        .I4(Decode_I_n_84),
        .I5(Data_Flow_I_n_25),
        .O(\Using_FPGA.Native_i_2__0__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFEFFFEAAAEFFAE)) 
    \Using_FPGA.Native_i_2__1__0 
       (.I0(write_Carry),
        .I1(carry),
        .I2(Decode_I_n_221),
        .I3(Decode_I_n_223),
        .I4(MSRclr_Instr),
        .I5(Decode_I_n_222),
        .O(\Using_FPGA.Native_i_2__1__0_n_0 ));
  LUT6 #(
    .INIT(64'hEFEEEEEEEAEEEEEE)) 
    \Using_FPGA.Native_i_2__2__0 
       (.I0(Decode_I_n_230),
        .I1(Enable_Interrupt),
        .I2(\Using_FPGA.Native_0 ),
        .I3(ex_Valid),
        .I4(Decode_I_n_84),
        .I5(Op1_Low),
        .O(\Using_FPGA.Native_i_2__2__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFE2E2E2FFE2)) 
    \Using_FPGA.Native_i_2__55 
       (.I0(set_FSL_Error),
        .I1(Decode_I_n_232),
        .I2(op2_C[27]),
        .I3(msr_I[27]),
        .I4(MTSMSR_Write),
        .I5(Data_Flow_I_n_26),
        .O(\Using_FPGA.Native_i_2__55_n_0 ));
  block_design_microblaze_0_0_instr_mux instr_mux_I1
       (.Instr(Instr),
        .Instr_Data(Instr_Data),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[35],LOCKSTEP_Master_Out[31:0]}),
        .Y(mux_Instr_Read));
  FDRE trace_data_access_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(mem_Strobe),
        .Q(D[3]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[323]),
        .Q(D[71]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[10] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[313]),
        .Q(D[61]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[11] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[312]),
        .Q(D[60]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[12] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[311]),
        .Q(D[59]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[13] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[310]),
        .Q(D[58]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[14] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[309]),
        .Q(D[57]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[15] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[308]),
        .Q(D[56]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[16] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[307]),
        .Q(D[55]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[17] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[306]),
        .Q(D[54]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[18] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[305]),
        .Q(D[53]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[19] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[304]),
        .Q(D[52]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[322]),
        .Q(D[70]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[20] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[303]),
        .Q(D[51]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[21] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[302]),
        .Q(D[50]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[22] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[301]),
        .Q(D[49]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[23] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[300]),
        .Q(D[48]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[24] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[299]),
        .Q(D[47]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[25] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[298]),
        .Q(D[46]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[26] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[297]),
        .Q(D[45]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[27] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[296]),
        .Q(D[44]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[28] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[295]),
        .Q(D[43]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[29] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[294]),
        .Q(D[42]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[321]),
        .Q(D[69]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[30] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[293]),
        .Q(D[41]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[31] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[292]),
        .Q(D[40]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[3] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[320]),
        .Q(D[68]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[4] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[319]),
        .Q(D[67]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[5] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[318]),
        .Q(D[66]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[6] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[317]),
        .Q(D[65]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[7] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[316]),
        .Q(D[64]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[8] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[315]),
        .Q(D[63]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[9] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[314]),
        .Q(D[62]),
        .R(1'b0));
  FDRE \trace_data_byte_enable_i_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[256]),
        .Q(D[7]),
        .R(1'b0));
  FDRE \trace_data_byte_enable_i_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[255]),
        .Q(D[6]),
        .R(1'b0));
  FDRE \trace_data_byte_enable_i_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[254]),
        .Q(D[5]),
        .R(1'b0));
  FDRE \trace_data_byte_enable_i_reg[3] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[253]),
        .Q(D[4]),
        .R(1'b0));
  FDRE trace_data_read_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(D[258]),
        .Q(D[2]),
        .R(1'b0));
  FDRE trace_data_write_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(D[257]),
        .Q(D[1]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[291]),
        .Q(D[39]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[10] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[281]),
        .Q(D[29]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[11] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[280]),
        .Q(D[28]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[12] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[279]),
        .Q(D[27]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[13] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[278]),
        .Q(D[26]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[14] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[277]),
        .Q(D[25]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[15] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[276]),
        .Q(D[24]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[16] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[275]),
        .Q(D[23]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[17] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[274]),
        .Q(D[22]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[18] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[273]),
        .Q(D[21]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[19] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[272]),
        .Q(D[20]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[290]),
        .Q(D[38]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[20] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[271]),
        .Q(D[19]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[21] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[270]),
        .Q(D[18]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[22] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[269]),
        .Q(D[17]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[23] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[268]),
        .Q(D[16]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[24] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[267]),
        .Q(D[15]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[25] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[266]),
        .Q(D[14]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[26] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[265]),
        .Q(D[13]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[27] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[264]),
        .Q(D[12]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[28] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[263]),
        .Q(D[11]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[29] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[262]),
        .Q(D[10]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[289]),
        .Q(D[37]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[30] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[261]),
        .Q(D[9]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[31] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[260]),
        .Q(D[8]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[3] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[288]),
        .Q(D[36]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[4] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[287]),
        .Q(D[35]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[5] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[286]),
        .Q(D[34]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[6] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[285]),
        .Q(D[33]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[7] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[284]),
        .Q(D[32]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[8] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[283]),
        .Q(D[31]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[9] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[282]),
        .Q(D[30]),
        .R(1'b0));
  FDRE trace_delay_slot_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(delay_slot_instr),
        .Q(D[72]),
        .R(1'b0));
  FDRE trace_exception_taken_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(exception_kind),
        .Q(D[74]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(Decode_I_n_110),
        .Q(D[181]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[10] 
       (.C(Clk),
        .CE(1'b1),
        .D(Decode_I_n_118),
        .Q(D[171]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[11] 
       (.C(Clk),
        .CE(1'b1),
        .D(Decode_I_n_119),
        .Q(D[170]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[12] 
       (.C(Clk),
        .CE(1'b1),
        .D(Decode_I_n_120),
        .Q(D[169]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[13] 
       (.C(Clk),
        .CE(1'b1),
        .D(Decode_I_n_121),
        .Q(D[168]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[14] 
       (.C(Clk),
        .CE(1'b1),
        .D(Decode_I_n_122),
        .Q(D[167]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[15] 
       (.C(Clk),
        .CE(1'b1),
        .D(Decode_I_n_123),
        .Q(D[166]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[16] 
       (.C(Clk),
        .CE(1'b1),
        .D(Decode_I_n_124),
        .Q(D[165]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[17] 
       (.C(Clk),
        .CE(1'b1),
        .D(Decode_I_n_125),
        .Q(D[164]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[18] 
       (.C(Clk),
        .CE(1'b1),
        .D(Decode_I_n_126),
        .Q(D[163]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[19] 
       (.C(Clk),
        .CE(1'b1),
        .D(Decode_I_n_127),
        .Q(D[162]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(Decode_I_n_111),
        .Q(D[180]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[20] 
       (.C(Clk),
        .CE(1'b1),
        .D(Decode_I_n_128),
        .Q(D[161]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[21] 
       (.C(Clk),
        .CE(1'b1),
        .D(Decode_I_n_66),
        .Q(D[160]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[22] 
       (.C(Clk),
        .CE(1'b1),
        .D(Decode_I_n_65),
        .Q(D[159]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[23] 
       (.C(Clk),
        .CE(1'b1),
        .D(Decode_I_n_73),
        .Q(D[158]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[24] 
       (.C(Clk),
        .CE(1'b1),
        .D(Decode_I_n_72),
        .Q(D[157]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[25] 
       (.C(Clk),
        .CE(1'b1),
        .D(Decode_I_n_67),
        .Q(D[156]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[26] 
       (.C(Clk),
        .CE(1'b1),
        .D(Decode_I_n_68),
        .Q(D[155]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[27] 
       (.C(Clk),
        .CE(1'b1),
        .D(Decode_I_n_71),
        .Q(D[154]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[28] 
       (.C(Clk),
        .CE(1'b1),
        .D(Decode_I_n_129),
        .Q(D[153]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[29] 
       (.C(Clk),
        .CE(1'b1),
        .D(Decode_I_n_130),
        .Q(D[152]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(Decode_I_n_112),
        .Q(D[179]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[30] 
       (.C(Clk),
        .CE(1'b1),
        .D(Decode_I_n_131),
        .Q(D[151]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[31] 
       (.C(Clk),
        .CE(1'b1),
        .D(Decode_I_n_132),
        .Q(D[150]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[3] 
       (.C(Clk),
        .CE(1'b1),
        .D(Decode_I_n_113),
        .Q(D[178]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[4] 
       (.C(Clk),
        .CE(1'b1),
        .D(Decode_I_n_69),
        .Q(D[177]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[5] 
       (.C(Clk),
        .CE(1'b1),
        .D(Decode_I_n_70),
        .Q(D[176]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[6] 
       (.C(Clk),
        .CE(1'b1),
        .D(instr_ex[6]),
        .Q(D[175]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[7] 
       (.C(Clk),
        .CE(1'b1),
        .D(instr_ex[7]),
        .Q(D[174]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[8] 
       (.C(Clk),
        .CE(1'b1),
        .D(Decode_I_n_116),
        .Q(D[173]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[9] 
       (.C(Clk),
        .CE(1'b1),
        .D(Decode_I_n_117),
        .Q(D[172]),
        .R(1'b0));
  FDRE trace_jump_taken_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(jump),
        .Q(D[73]),
        .R(1'b0));
  FDRE \trace_msr_reg_i_reg[10] 
       (.C(Clk),
        .CE(1'b1),
        .D(msr_I[27]),
        .Q(D[110]),
        .R(1'b0));
  FDRE \trace_msr_reg_i_reg[11] 
       (.C(Clk),
        .CE(1'b1),
        .D(msr_I[28]),
        .Q(D[109]),
        .R(1'b0));
  FDRE \trace_msr_reg_i_reg[12] 
       (.C(Clk),
        .CE(1'b1),
        .D(carry),
        .Q(D[108]),
        .R(1'b0));
  FDRE \trace_msr_reg_i_reg[13] 
       (.C(Clk),
        .CE(1'b1),
        .D(Enable_Interrupt),
        .Q(D[107]),
        .R(1'b0));
  FDRE trace_of_piperun_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(of_PipeRun),
        .Q(D[0]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(PC_EX_i[0]),
        .Q(D[148]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[10] 
       (.C(Clk),
        .CE(1'b1),
        .D(PC_EX_i[10]),
        .Q(D[138]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[11] 
       (.C(Clk),
        .CE(1'b1),
        .D(PC_EX_i[11]),
        .Q(D[137]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[12] 
       (.C(Clk),
        .CE(1'b1),
        .D(PC_EX_i[12]),
        .Q(D[136]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[13] 
       (.C(Clk),
        .CE(1'b1),
        .D(PC_EX_i[13]),
        .Q(D[135]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[14] 
       (.C(Clk),
        .CE(1'b1),
        .D(PC_EX_i[14]),
        .Q(D[134]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[15] 
       (.C(Clk),
        .CE(1'b1),
        .D(PC_EX_i[15]),
        .Q(D[133]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[16] 
       (.C(Clk),
        .CE(1'b1),
        .D(PC_EX_i[16]),
        .Q(D[132]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[17] 
       (.C(Clk),
        .CE(1'b1),
        .D(PC_EX_i[17]),
        .Q(D[131]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[18] 
       (.C(Clk),
        .CE(1'b1),
        .D(PC_EX_i[18]),
        .Q(D[130]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[19] 
       (.C(Clk),
        .CE(1'b1),
        .D(PC_EX_i[19]),
        .Q(D[129]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(PC_EX_i[1]),
        .Q(D[147]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[20] 
       (.C(Clk),
        .CE(1'b1),
        .D(PC_EX_i[20]),
        .Q(D[128]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[21] 
       (.C(Clk),
        .CE(1'b1),
        .D(PC_EX_i[21]),
        .Q(D[127]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[22] 
       (.C(Clk),
        .CE(1'b1),
        .D(PC_EX_i[22]),
        .Q(D[126]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[23] 
       (.C(Clk),
        .CE(1'b1),
        .D(PC_EX_i[23]),
        .Q(D[125]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[24] 
       (.C(Clk),
        .CE(1'b1),
        .D(PC_EX_i[24]),
        .Q(D[124]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[25] 
       (.C(Clk),
        .CE(1'b1),
        .D(PC_EX_i[25]),
        .Q(D[123]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[26] 
       (.C(Clk),
        .CE(1'b1),
        .D(PC_EX_i[26]),
        .Q(D[122]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[27] 
       (.C(Clk),
        .CE(1'b1),
        .D(PC_EX_i[27]),
        .Q(D[121]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[28] 
       (.C(Clk),
        .CE(1'b1),
        .D(PC_EX_i[28]),
        .Q(D[120]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[29] 
       (.C(Clk),
        .CE(1'b1),
        .D(PC_EX_i[29]),
        .Q(D[119]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(PC_EX_i[2]),
        .Q(D[146]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[30] 
       (.C(Clk),
        .CE(1'b1),
        .D(PC_EX_i[30]),
        .Q(D[118]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[31] 
       (.C(Clk),
        .CE(1'b1),
        .D(PC_EX_i[31]),
        .Q(D[117]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[3] 
       (.C(Clk),
        .CE(1'b1),
        .D(PC_EX_i[3]),
        .Q(D[145]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[4] 
       (.C(Clk),
        .CE(1'b1),
        .D(PC_EX_i[4]),
        .Q(D[144]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[5] 
       (.C(Clk),
        .CE(1'b1),
        .D(PC_EX_i[5]),
        .Q(D[143]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[6] 
       (.C(Clk),
        .CE(1'b1),
        .D(PC_EX_i[6]),
        .Q(D[142]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[7] 
       (.C(Clk),
        .CE(1'b1),
        .D(PC_EX_i[7]),
        .Q(D[141]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[8] 
       (.C(Clk),
        .CE(1'b1),
        .D(PC_EX_i[8]),
        .Q(D[140]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[9] 
       (.C(Clk),
        .CE(1'b1),
        .D(PC_EX_i[9]),
        .Q(D[139]),
        .R(1'b0));
  FDRE \trace_reg_addr_i_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(write_Addr[0]),
        .Q(D[115]),
        .R(1'b0));
  FDRE \trace_reg_addr_i_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(write_Addr[1]),
        .Q(D[114]),
        .R(1'b0));
  FDRE \trace_reg_addr_i_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(write_Addr[2]),
        .Q(D[113]),
        .R(1'b0));
  FDRE \trace_reg_addr_i_reg[3] 
       (.C(Clk),
        .CE(1'b1),
        .D(write_Addr[3]),
        .Q(D[112]),
        .R(1'b0));
  FDRE \trace_reg_addr_i_reg[4] 
       (.C(Clk),
        .CE(1'b1),
        .D(write_Addr[4]),
        .Q(D[111]),
        .R(1'b0));
  FDRE trace_reg_write_novalid_reg
       (.C(Clk),
        .CE(1'b1),
        .D(reg_Write_I),
        .Q(trace_reg_write_novalid),
        .R(1'b0));
endmodule

module block_design_microblaze_0_0_MicroBlaze_Core
   (D,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    Dbg_Intr,
    Dbg_Trig_Ack_Out,
    Dbg_Trig_In,
    Pause_Ack,
    Sleep,
    LOCKSTEP_Master_Out,
    Hibernate,
    Suspend,
    Dbg_Reg_En_3_sp_1,
    \Dbg_Reg_En[3]_0 ,
    Dbg_Reg_En_7_sp_1,
    Dbg_TDO,
    Dbg_Reg_En_6_sp_1,
    Interrupt_Ack,
    Clk,
    Dbg_Clk,
    Dbg_TDI,
    Dbg_Update,
    Interrupt,
    Scan_Reset,
    Scan_Reset_Sel,
    Scan_En,
    Dbg_Capture,
    Reset,
    Mb_Reset,
    Debug_Rst,
    Pause,
    Dbg_Trig_Ack_In,
    Dbg_Trig_Out,
    Dbg_Stop,
    Dbg_Reg_En,
    Dbg_TDO_0,
    Dbg_TDO_1,
    Dbg_TDO_2,
    Dbg_TDO_3,
    Dbg_TDO_INST_0_i_3,
    DReady,
    M_AXI_DP_AWREADY,
    M_AXI_DP_WREADY,
    M_AXI_DP_ARREADY,
    \WB_DAXI_Read_Data_reg[31] ,
    M1_AXIS_TREADY,
    M0_AXIS_TREADY,
    S1_AXIS_TVALID,
    S0_AXIS_TVALID,
    IReady,
    DWait,
    Wakeup,
    Reset_Mode,
    Dbg_Shift,
    Status_Reg_En,
    Dbg_TDO_INST_0_i_5,
    S1_AXIS_TLAST,
    S0_AXIS_TLAST,
    S1_AXIS_TDATA,
    S0_AXIS_TDATA,
    Data_Read,
    Instr,
    M_AXI_DP_RDATA,
    Interrupt_Address);
  output [428:0]D;
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output Dbg_Intr;
  output [5:0]Dbg_Trig_Ack_Out;
  output [5:0]Dbg_Trig_In;
  output Pause_Ack;
  output Sleep;
  output [38:0]LOCKSTEP_Master_Out;
  output Hibernate;
  output Suspend;
  output Dbg_Reg_En_3_sp_1;
  output \Dbg_Reg_En[3]_0 ;
  output Dbg_Reg_En_7_sp_1;
  output Dbg_TDO;
  output Dbg_Reg_En_6_sp_1;
  output [0:1]Interrupt_Ack;
  input Clk;
  input Dbg_Clk;
  input Dbg_TDI;
  input Dbg_Update;
  input Interrupt;
  input Scan_Reset;
  input Scan_Reset_Sel;
  input Scan_En;
  input Dbg_Capture;
  input Reset;
  input Mb_Reset;
  input Debug_Rst;
  input Pause;
  input [5:0]Dbg_Trig_Ack_In;
  input [5:0]Dbg_Trig_Out;
  input Dbg_Stop;
  input [0:7]Dbg_Reg_En;
  input Dbg_TDO_0;
  input Dbg_TDO_1;
  input Dbg_TDO_2;
  input Dbg_TDO_3;
  input Dbg_TDO_INST_0_i_3;
  input DReady;
  input M_AXI_DP_AWREADY;
  input M_AXI_DP_WREADY;
  input M_AXI_DP_ARREADY;
  input [1:0]\WB_DAXI_Read_Data_reg[31] ;
  input M1_AXIS_TREADY;
  input M0_AXIS_TREADY;
  input S1_AXIS_TVALID;
  input S0_AXIS_TVALID;
  input IReady;
  input DWait;
  input [0:1]Wakeup;
  input [0:1]Reset_Mode;
  input Dbg_Shift;
  input Status_Reg_En;
  input Dbg_TDO_INST_0_i_5;
  input S1_AXIS_TLAST;
  input S0_AXIS_TLAST;
  input [31:0]S1_AXIS_TDATA;
  input [31:0]S0_AXIS_TDATA;
  input [0:31]Data_Read;
  input [0:31]Instr;
  input [31:0]M_AXI_DP_RDATA;
  input [0:31]Interrupt_Address;

  wire \Area.Core_n_455 ;
  wire \Area.Core_n_457 ;
  wire \Area.Core_n_460 ;
  wire \Area.Core_n_461 ;
  wire \Area.Core_n_462 ;
  wire \Area.Core_n_463 ;
  wire \Area.Core_n_464 ;
  wire \Area.Core_n_465 ;
  wire \Area.Core_n_466 ;
  wire \Area.Core_n_467 ;
  wire \Area.Core_n_468 ;
  wire \Area.Core_n_469 ;
  wire \Area.Core_n_470 ;
  wire \Area.Core_n_471 ;
  wire \Area.Core_n_472 ;
  wire \Area.Core_n_473 ;
  wire \Area.Core_n_474 ;
  wire \Area.Core_n_475 ;
  wire \Area.Core_n_476 ;
  wire \Area.Core_n_477 ;
  wire \Area.Core_n_478 ;
  wire \Area.Core_n_479 ;
  wire \Area.Core_n_480 ;
  wire \Area.Core_n_481 ;
  wire \Area.Core_n_482 ;
  wire \Area.Core_n_483 ;
  wire \Area.Core_n_484 ;
  wire \Area.Core_n_485 ;
  wire \Area.Core_n_486 ;
  wire \Area.Core_n_487 ;
  wire \Area.Core_n_488 ;
  wire \Area.Core_n_489 ;
  wire \Area.Core_n_490 ;
  wire \Area.Core_n_491 ;
  wire \Area.Core_n_492 ;
  wire \Area.Core_n_493 ;
  wire \Area.Core_n_494 ;
  wire Clk;
  wire [428:0]D;
  wire DReady;
  wire DWait;
  wire [0:31]Data_Read;
  wire Dbg_Capture;
  wire Dbg_Clk;
  wire Dbg_Intr;
  wire [0:7]Dbg_Reg_En;
  wire \Dbg_Reg_En[3]_0 ;
  wire Dbg_Reg_En_3_sn_1;
  wire Dbg_Reg_En_6_sn_1;
  wire Dbg_Reg_En_7_sn_1;
  wire Dbg_Shift;
  wire Dbg_Stop;
  wire Dbg_TDI;
  wire Dbg_TDO;
  wire Dbg_TDO_0;
  wire Dbg_TDO_1;
  wire Dbg_TDO_2;
  wire Dbg_TDO_3;
  wire Dbg_TDO_INST_0_i_3;
  wire Dbg_TDO_INST_0_i_5;
  wire [5:0]Dbg_Trig_Ack_In;
  wire [5:0]Dbg_Trig_Ack_Out;
  wire [5:0]Dbg_Trig_In;
  wire [5:0]Dbg_Trig_Out;
  wire Dbg_Update;
  wire Debug_Rst;
  wire [0:31]FSL_Get_Data;
  wire FSL_Get_Data0;
  wire FSL_Put_Control;
  wire [1:31]FSL_Put_Data;
  wire [0:0]FSL_Put_No;
  wire Hibernate;
  wire IReady;
  wire [0:31]Instr;
  wire Interrupt;
  wire [0:1]Interrupt_Ack;
  wire [0:31]Interrupt_Address;
  wire [38:0]LOCKSTEP_Master_Out;
  wire M0_AXIS_TREADY;
  wire M1_AXIS_TREADY;
  wire M_AXI_DP_ARREADY;
  wire M_AXI_DP_AWREADY;
  wire [31:0]M_AXI_DP_RDATA;
  wire M_AXI_DP_WREADY;
  wire Mb_Reset;
  wire Pause;
  wire Pause_Ack;
  wire Reset;
  wire [0:1]Reset_Mode;
  wire [31:0]S0_AXIS_TDATA;
  wire S0_AXIS_TLAST;
  wire S0_AXIS_TVALID;
  wire [31:0]S1_AXIS_TDATA;
  wire S1_AXIS_TLAST;
  wire S1_AXIS_TVALID;
  wire Scan_En;
  wire Scan_Reset;
  wire Scan_Reset_Sel;
  wire Sleep;
  wire Status_Reg_En;
  wire Suspend;
  wire Synced;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_Streaming.Streaming_AXI_I_n_72 ;
  wire [1:0]\WB_DAXI_Read_Data_reg[31] ;
  wire [0:1]Wakeup;
  wire fsl_carry_hold;
  wire fsl_carry_hold_value;
  wire [14:14]mux4_out;
  wire reg_neg;
  wire reset_temp__0;
  wire sync_reset;
  wire [0:0]wakeup_i;

  assign Dbg_Reg_En_3_sp_1 = Dbg_Reg_En_3_sn_1;
  assign Dbg_Reg_En_6_sp_1 = Dbg_Reg_En_6_sn_1;
  assign Dbg_Reg_En_7_sp_1 = Dbg_Reg_En_7_sn_1;
  block_design_microblaze_0_0_MicroBlaze_Area \Area.Core 
       (.Clk(Clk),
        .D({D[428:252],D[181:0]}),
        .DReady(DReady),
        .DWait(DWait),
        .Data_Read(Data_Read),
        .Dbg_Capture(Dbg_Capture),
        .Dbg_Clk(Dbg_Clk),
        .Dbg_Intr(Dbg_Intr),
        .Dbg_Reg_En(Dbg_Reg_En),
        .\Dbg_Reg_En[3]_0 (\Dbg_Reg_En[3]_0 ),
        .Dbg_Reg_En_3_sp_1(Dbg_Reg_En_3_sn_1),
        .Dbg_Reg_En_6_sp_1(Dbg_Reg_En_6_sn_1),
        .Dbg_Reg_En_7_sp_1(Dbg_Reg_En_7_sn_1),
        .Dbg_Shift(Dbg_Shift),
        .Dbg_Stop(Dbg_Stop),
        .Dbg_TDI(Dbg_TDI),
        .Dbg_TDO(Dbg_TDO),
        .Dbg_TDO_0(Dbg_TDO_0),
        .Dbg_TDO_1(Dbg_TDO_1),
        .Dbg_TDO_2(Dbg_TDO_2),
        .Dbg_TDO_3(Dbg_TDO_3),
        .Dbg_TDO_INST_0_i_3(Dbg_TDO_INST_0_i_3),
        .Dbg_TDO_INST_0_i_5(Dbg_TDO_INST_0_i_5),
        .Dbg_Trig_Ack_In(Dbg_Trig_Ack_In),
        .Dbg_Trig_Ack_Out(Dbg_Trig_Ack_Out),
        .Dbg_Trig_In(Dbg_Trig_In),
        .Dbg_Trig_Out(Dbg_Trig_Out),
        .Dbg_Update(Dbg_Update),
        .E(\Area.Core_n_457 ),
        .FSL_Put_Control(FSL_Put_Control),
        .\Gen_M_Channel_Handling[0].m_axis_tvalid_i_reg[0] ({D[218],D[183]}),
        .\Gen_M_Channel_Handling[1].M_AXIS_TLAST_reg[1] (\Using_Streaming.Streaming_AXI_I_n_72 ),
        .Hibernate(Hibernate),
        .IReady(IReady),
        .Instr(Instr),
        .Interrupt(Interrupt),
        .Interrupt_Ack(Interrupt_Ack),
        .Interrupt_Address(Interrupt_Address),
        .LOCKSTEP_Master_Out(LOCKSTEP_Master_Out),
        .M0_AXIS_TREADY(M0_AXIS_TREADY),
        .M0_AXIS_TREADY_0(\Area.Core_n_493 ),
        .M1_AXIS_TREADY(M1_AXIS_TREADY),
        .M1_AXIS_TREADY_0(\Area.Core_n_492 ),
        .M_AXI_DP_ARREADY(M_AXI_DP_ARREADY),
        .M_AXI_DP_AWREADY(M_AXI_DP_AWREADY),
        .M_AXI_DP_RDATA(M_AXI_DP_RDATA),
        .M_AXI_DP_WREADY(M_AXI_DP_WREADY),
        .Op2(FSL_Put_No),
        .Pause(Pause),
        .Pause_Ack(Pause_Ack),
        .Q({FSL_Get_Data[0],FSL_Get_Data[1],FSL_Get_Data[2],FSL_Get_Data[3],FSL_Get_Data[4],FSL_Get_Data[5],FSL_Get_Data[6],FSL_Get_Data[7],FSL_Get_Data[8],FSL_Get_Data[9],FSL_Get_Data[10],FSL_Get_Data[11],FSL_Get_Data[12],FSL_Get_Data[13],FSL_Get_Data[14],FSL_Get_Data[15],FSL_Get_Data[16],FSL_Get_Data[17],FSL_Get_Data[18],FSL_Get_Data[19],FSL_Get_Data[20],FSL_Get_Data[21],FSL_Get_Data[22],FSL_Get_Data[23],FSL_Get_Data[24],FSL_Get_Data[25],FSL_Get_Data[26],FSL_Get_Data[27],FSL_Get_Data[28],FSL_Get_Data[29],FSL_Get_Data[30],FSL_Get_Data[31]}),
        .Reg1({reg_neg,FSL_Put_Data}),
        .Reset_Mode(Reset_Mode),
        .S0_AXIS_TDATA(S0_AXIS_TDATA),
        .S0_AXIS_TLAST(S0_AXIS_TLAST),
        .S0_AXIS_TVALID(S0_AXIS_TVALID),
        .S1_AXIS_TDATA(S1_AXIS_TDATA),
        .\S1_AXIS_TDATA[31] ({\Area.Core_n_460 ,\Area.Core_n_461 ,\Area.Core_n_462 ,\Area.Core_n_463 ,\Area.Core_n_464 ,\Area.Core_n_465 ,\Area.Core_n_466 ,\Area.Core_n_467 ,\Area.Core_n_468 ,\Area.Core_n_469 ,\Area.Core_n_470 ,\Area.Core_n_471 ,\Area.Core_n_472 ,\Area.Core_n_473 ,\Area.Core_n_474 ,\Area.Core_n_475 ,\Area.Core_n_476 ,\Area.Core_n_477 ,\Area.Core_n_478 ,\Area.Core_n_479 ,\Area.Core_n_480 ,\Area.Core_n_481 ,\Area.Core_n_482 ,\Area.Core_n_483 ,\Area.Core_n_484 ,\Area.Core_n_485 ,\Area.Core_n_486 ,\Area.Core_n_487 ,\Area.Core_n_488 ,\Area.Core_n_489 ,\Area.Core_n_490 ,\Area.Core_n_491 }),
        .S1_AXIS_TLAST(S1_AXIS_TLAST),
        .S1_AXIS_TVALID(S1_AXIS_TVALID),
        .SR(FSL_Get_Data0),
        .Scan_En(Scan_En),
        .Scan_Reset(Scan_Reset),
        .Scan_Reset_Sel(Scan_Reset_Sel),
        .Sleep(Sleep),
        .Status_Reg_En(Status_Reg_En),
        .Suspend(Suspend),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 ({\Area.Core_n_455 ,mux4_out}),
        .\Using_FPGA.Native_2 (\Area.Core_n_494 ),
        .\WB_DAXI_Read_Data_reg[31] (\WB_DAXI_Read_Data_reg[31] ),
        .Wakeup(Wakeup[1]),
        .fsl_carry_hold(fsl_carry_hold),
        .fsl_carry_hold_value(fsl_carry_hold_value),
        .out(wakeup_i),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_mb_sync_bit Reset_DFF
       (.Clk(Clk),
        .out(Synced),
        .reset_temp(reset_temp__0));
  FDRE #(
    .INIT(1'b1)) 
    \Use_Async_Reset.sync_reset_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(Synced),
        .Q(sync_reset),
        .R(1'b0));
  block_design_microblaze_0_0_mb_sync_bit_0 \Using_Async_Wakeup_0.Wakeup_DFF 
       (.Clk(Clk),
        .Wakeup(Wakeup[0]),
        .out(wakeup_i),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_Streaming_AXI \Using_Streaming.Streaming_AXI_I 
       (.Clk(Clk),
        .D(D[251:182]),
        .E(\Area.Core_n_457 ),
        .FSL_Put_Control(FSL_Put_Control),
        .\Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[31]_0 (\Area.Core_n_494 ),
        .\Gen_M_Channel_Handling[0].m_axis_tvalid_i_reg[0]_0 (\Area.Core_n_493 ),
        .\Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 ({reg_neg,FSL_Put_Data[1],FSL_Put_Data[2],FSL_Put_Data[3],FSL_Put_Data[4],FSL_Put_Data[5],FSL_Put_Data[6],FSL_Put_Data[7],FSL_Put_Data[8],FSL_Put_Data[9],FSL_Put_Data[10],FSL_Put_Data[11],FSL_Put_Data[12],FSL_Put_Data[13],FSL_Put_Data[14],FSL_Put_Data[15],FSL_Put_Data[16],FSL_Put_Data[17],FSL_Put_Data[18],FSL_Put_Data[19],FSL_Put_Data[20],FSL_Put_Data[21],FSL_Put_Data[22],FSL_Put_Data[23],FSL_Put_Data[24],FSL_Put_Data[25],FSL_Put_Data[26],FSL_Put_Data[27],FSL_Put_Data[28],FSL_Put_Data[29],FSL_Put_Data[30],FSL_Put_Data[31]}),
        .\Gen_M_Channel_Handling[1].m_axis_tvalid_i_reg[1]_0 (\Area.Core_n_492 ),
        .M0_AXIS_TREADY(M0_AXIS_TREADY),
        .M1_AXIS_TREADY(M1_AXIS_TREADY),
        .M1_AXIS_TREADY_0(\Using_Streaming.Streaming_AXI_I_n_72 ),
        .Op2(FSL_Put_No),
        .Q({FSL_Get_Data[0],FSL_Get_Data[1],FSL_Get_Data[2],FSL_Get_Data[3],FSL_Get_Data[4],FSL_Get_Data[5],FSL_Get_Data[6],FSL_Get_Data[7],FSL_Get_Data[8],FSL_Get_Data[9],FSL_Get_Data[10],FSL_Get_Data[11],FSL_Get_Data[12],FSL_Get_Data[13],FSL_Get_Data[14],FSL_Get_Data[15],FSL_Get_Data[16],FSL_Get_Data[17],FSL_Get_Data[18],FSL_Get_Data[19],FSL_Get_Data[20],FSL_Get_Data[21],FSL_Get_Data[22],FSL_Get_Data[23],FSL_Get_Data[24],FSL_Get_Data[25],FSL_Get_Data[26],FSL_Get_Data[27],FSL_Get_Data[28],FSL_Get_Data[29],FSL_Get_Data[30],FSL_Get_Data[31]}),
        .\Read_AXI_Area.FSL_Get_Data_reg[0]_0 ({\Area.Core_n_460 ,\Area.Core_n_461 ,\Area.Core_n_462 ,\Area.Core_n_463 ,\Area.Core_n_464 ,\Area.Core_n_465 ,\Area.Core_n_466 ,\Area.Core_n_467 ,\Area.Core_n_468 ,\Area.Core_n_469 ,\Area.Core_n_470 ,\Area.Core_n_471 ,\Area.Core_n_472 ,\Area.Core_n_473 ,\Area.Core_n_474 ,\Area.Core_n_475 ,\Area.Core_n_476 ,\Area.Core_n_477 ,\Area.Core_n_478 ,\Area.Core_n_479 ,\Area.Core_n_480 ,\Area.Core_n_481 ,\Area.Core_n_482 ,\Area.Core_n_483 ,\Area.Core_n_484 ,\Area.Core_n_485 ,\Area.Core_n_486 ,\Area.Core_n_487 ,\Area.Core_n_488 ,\Area.Core_n_489 ,\Area.Core_n_490 ,\Area.Core_n_491 }),
        .\Read_AXI_Area.S_AXIS_TREADY_reg[0]_0 ({\Area.Core_n_455 ,mux4_out}),
        .SR(FSL_Get_Data0),
        .fsl_carry_hold(fsl_carry_hold),
        .fsl_carry_hold_value(fsl_carry_hold_value),
        .sync_reset(sync_reset));
  LUT3 #(
    .INIT(8'hFE)) 
    reset_temp
       (.I0(Reset),
        .I1(Mb_Reset),
        .I2(Debug_Rst),
        .O(reset_temp__0));
endmodule

module block_design_microblaze_0_0_Operand_Select
   (Op1_Shift,
    A,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    B,
    EX_Op1,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    Shifted,
    \Using_FPGA.Native_6 ,
    \Using_FPGA.Native_7 ,
    \Using_FPGA.Native_8 ,
    \Using_FPGA.Native_9 ,
    \Using_FPGA.Native_10 ,
    \Using_FPGA.Native_11 ,
    \Using_FPGA.Native_12 ,
    \Using_FPGA.Native_13 ,
    \Using_FPGA.Native_14 ,
    \Using_FPGA.Native_15 ,
    \Using_FPGA.Native_16 ,
    \Using_FPGA.Native_17 ,
    \Using_FPGA.Native_18 ,
    \Using_FPGA.Native_19 ,
    \Using_FPGA.Native_20 ,
    \Using_FPGA.Native_21 ,
    \Using_FPGA.Native_22 ,
    \Using_FPGA.Native_23 ,
    \Using_FPGA.Native_24 ,
    \Using_FPGA.Native_25 ,
    \Using_FPGA.Native_26 ,
    \Using_FPGA.Native_27 ,
    \Using_FPGA.Native_28 ,
    \Using_FPGA.Native_29 ,
    \Using_FPGA.Native_30 ,
    S1_AXIS_TVALID_0,
    S1_AXIS_TLAST_0,
    \S1_AXIS_TDATA[31] ,
    D,
    \Using_FPGA.Native_31 ,
    \Using_FPGA.Native_32 ,
    S,
    \Using_FPGA.The_Compare[0].sel_reg ,
    Sext,
    \Using_FPGA.Native_33 ,
    \Using_FPGA.Native_34 ,
    I0,
    \Using_FPGA.The_Compare[2].sel_reg ,
    S_0,
    \Using_FPGA.The_Compare[2].sel_reg_1 ,
    S_2,
    \Using_FPGA.The_Compare[0].sel_reg_3 ,
    \Using_FPGA.The_Compare[2].sel_reg_4 ,
    S_5,
    \Using_FPGA.The_Compare[0].sel_reg_6 ,
    \Using_FPGA.The_Compare[2].sel_reg_7 ,
    S_8,
    \Using_FPGA.The_Compare[0].sel_reg_9 ,
    \Using_FPGA.Native_35 ,
    \instr_EX_i_reg[22] ,
    S_10,
    \Using_FPGA.Native_36 ,
    Q,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    I3,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_0,
    I3_11,
    D_1,
    I3_12,
    D_2,
    I3_13,
    D_3,
    I3_14,
    D_4,
    I3_5,
    D_6,
    I3_7,
    D_8,
    I3_9,
    D_10,
    PC_OF,
    D_11,
    D_12,
    D_13,
    D_14,
    D_15,
    D_16,
    D_17,
    D_18,
    D_19,
    D_20,
    D_21,
    D_22,
    D_23,
    D_24,
    D_25,
    D_26,
    D_27,
    D_28,
    D_29,
    D_30,
    D_31,
    D_32,
    D_33,
    I3_15,
    D_34,
    S1_AXIS_TVALID,
    S0_AXIS_TVALID,
    S1_AXIS_TLAST,
    S0_AXIS_TLAST,
    S1_AXIS_TDATA,
    S0_AXIS_TDATA,
    BitField_Extract,
    BitField_Insert,
    \Using_FPGA.Native_37 ,
    compare_Instr,
    sext16,
    sext8,
    \Using_FPGA.Native_38 ,
    \Using_FPGA.Native_i_1__46 ,
    \Using_FPGA.Native_39 ,
    \Using_FPGA.Native_40 ,
    \Using_FPGA.Native_41 ,
    Shift_Logic_Res,
    PCMP_Instr2_out,
    \Using_FPGA.Native_42 ,
    \Using_FPGA.Native_43 ,
    \Using_FPGA.Native_i_1__46_0 ,
    \Using_FPGA.Native_i_2__31 ,
    \Using_FPGA.Native_i_2__31_0 ,
    \Using_FPGA.Native_i_1__45 ,
    ex_mulhu_instr,
    Is_Equal,
    \C_reg[28] ,
    \C_reg[28]_0 ,
    \C_reg[29] ,
    void_bit,
    \C_reg[30] ,
    \C_reg[30]_0 ,
    \C_reg[27] ,
    \C_reg[23] ,
    \C_reg[28]_1 ,
    E,
    imm_Value);
  output Op1_Shift;
  output [16:0]A;
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output [15:0]B;
  output EX_Op1;
  output \Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  output \Using_FPGA.Native_3 ;
  output \Using_FPGA.Native_4 ;
  output \Using_FPGA.Native_5 ;
  output Shifted;
  output \Using_FPGA.Native_6 ;
  output \Using_FPGA.Native_7 ;
  output \Using_FPGA.Native_8 ;
  output \Using_FPGA.Native_9 ;
  output \Using_FPGA.Native_10 ;
  output \Using_FPGA.Native_11 ;
  output \Using_FPGA.Native_12 ;
  output \Using_FPGA.Native_13 ;
  output \Using_FPGA.Native_14 ;
  output [15:0]\Using_FPGA.Native_15 ;
  output [14:0]\Using_FPGA.Native_16 ;
  output \Using_FPGA.Native_17 ;
  output \Using_FPGA.Native_18 ;
  output \Using_FPGA.Native_19 ;
  output \Using_FPGA.Native_20 ;
  output \Using_FPGA.Native_21 ;
  output \Using_FPGA.Native_22 ;
  output \Using_FPGA.Native_23 ;
  output \Using_FPGA.Native_24 ;
  output \Using_FPGA.Native_25 ;
  output \Using_FPGA.Native_26 ;
  output \Using_FPGA.Native_27 ;
  output \Using_FPGA.Native_28 ;
  output \Using_FPGA.Native_29 ;
  output \Using_FPGA.Native_30 ;
  output S1_AXIS_TVALID_0;
  output S1_AXIS_TLAST_0;
  output [31:0]\S1_AXIS_TDATA[31] ;
  output [30:0]D;
  output \Using_FPGA.Native_31 ;
  output [30:0]\Using_FPGA.Native_32 ;
  output S;
  output \Using_FPGA.The_Compare[0].sel_reg ;
  output Sext;
  output \Using_FPGA.Native_33 ;
  output \Using_FPGA.Native_34 ;
  output I0;
  output \Using_FPGA.The_Compare[2].sel_reg ;
  output S_0;
  output \Using_FPGA.The_Compare[2].sel_reg_1 ;
  output S_2;
  output \Using_FPGA.The_Compare[0].sel_reg_3 ;
  output \Using_FPGA.The_Compare[2].sel_reg_4 ;
  output S_5;
  output \Using_FPGA.The_Compare[0].sel_reg_6 ;
  output \Using_FPGA.The_Compare[2].sel_reg_7 ;
  output S_8;
  output \Using_FPGA.The_Compare[0].sel_reg_9 ;
  output [5:0]\Using_FPGA.Native_35 ;
  output \instr_EX_i_reg[22] ;
  output S_10;
  output \Using_FPGA.Native_36 ;
  output [15:0]Q;
  input [0:31]Reg1_Data;
  input [0:31]ex_Result;
  input res_Forward1;
  input I3;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_0;
  input I3_11;
  input D_1;
  input I3_12;
  input D_2;
  input I3_13;
  input D_3;
  input I3_14;
  input D_4;
  input I3_5;
  input D_6;
  input I3_7;
  input D_8;
  input I3_9;
  input D_10;
  input [22:0]PC_OF;
  input D_11;
  input D_12;
  input D_13;
  input D_14;
  input D_15;
  input D_16;
  input D_17;
  input D_18;
  input D_19;
  input D_20;
  input D_21;
  input D_22;
  input D_23;
  input D_24;
  input D_25;
  input D_26;
  input D_27;
  input D_28;
  input D_29;
  input D_30;
  input D_31;
  input D_32;
  input D_33;
  input I3_15;
  input D_34;
  input S1_AXIS_TVALID;
  input S0_AXIS_TVALID;
  input S1_AXIS_TLAST;
  input S0_AXIS_TLAST;
  input [31:0]S1_AXIS_TDATA;
  input [31:0]S0_AXIS_TDATA;
  input BitField_Extract;
  input BitField_Insert;
  input \Using_FPGA.Native_37 ;
  input compare_Instr;
  input sext16;
  input sext8;
  input \Using_FPGA.Native_38 ;
  input \Using_FPGA.Native_i_1__46 ;
  input \Using_FPGA.Native_39 ;
  input \Using_FPGA.Native_40 ;
  input \Using_FPGA.Native_41 ;
  input Shift_Logic_Res;
  input PCMP_Instr2_out;
  input \Using_FPGA.Native_42 ;
  input \Using_FPGA.Native_43 ;
  input \Using_FPGA.Native_i_1__46_0 ;
  input \Using_FPGA.Native_i_2__31 ;
  input \Using_FPGA.Native_i_2__31_0 ;
  input \Using_FPGA.Native_i_1__45 ;
  input ex_mulhu_instr;
  input Is_Equal;
  input \C_reg[28] ;
  input \C_reg[28]_0 ;
  input \C_reg[29] ;
  input void_bit;
  input \C_reg[30] ;
  input \C_reg[30]_0 ;
  input \C_reg[27] ;
  input \C_reg[23] ;
  input \C_reg[28]_1 ;
  input [0:0]E;
  input [0:15]imm_Value;

  wire [16:0]A;
  wire [15:0]B;
  wire BitField_Extract;
  wire BitField_Insert;
  wire \C_reg[23] ;
  wire \C_reg[27] ;
  wire \C_reg[28] ;
  wire \C_reg[28]_0 ;
  wire \C_reg[28]_1 ;
  wire \C_reg[29] ;
  wire \C_reg[30] ;
  wire \C_reg[30]_0 ;
  wire Clk;
  wire [30:0]D;
  wire D_0;
  wire D_1;
  wire D_10;
  wire D_11;
  wire D_12;
  wire D_13;
  wire D_14;
  wire D_15;
  wire D_16;
  wire D_17;
  wire D_18;
  wire D_19;
  wire D_2;
  wire D_20;
  wire D_21;
  wire D_22;
  wire D_23;
  wire D_24;
  wire D_25;
  wire D_26;
  wire D_27;
  wire D_28;
  wire D_29;
  wire D_3;
  wire D_30;
  wire D_31;
  wire D_32;
  wire D_33;
  wire D_34;
  wire D_4;
  wire D_6;
  wire D_8;
  wire [0:0]E;
  wire EX_Op1;
  wire I0;
  wire I3;
  wire I3_11;
  wire I3_12;
  wire I3_13;
  wire I3_14;
  wire I3_15;
  wire I3_5;
  wire I3_7;
  wire I3_9;
  wire Is_Equal;
  wire Op1_Shift;
  wire \OpSelect_Bits[10].Operand_Select_Bit_I_n_3 ;
  wire \OpSelect_Bits[14].Operand_Select_Bit_I_n_4 ;
  wire \OpSelect_Bits[17].Operand_Select_Bit_I_n_3 ;
  wire \OpSelect_Bits[1].Operand_Select_Bit_I_n_4 ;
  wire \OpSelect_Bits[21].Operand_Select_Bit_I_n_47 ;
  wire \OpSelect_Bits[24].Operand_Select_Bit_I_n_7 ;
  wire \OpSelect_Bits[24].Operand_Select_Bit_I_n_8 ;
  wire \OpSelect_Bits[25].Operand_Select_Bit_I_n_6 ;
  wire \OpSelect_Bits[25].Operand_Select_Bit_I_n_7 ;
  wire \OpSelect_Bits[25].Operand_Select_Bit_I_n_8 ;
  wire \OpSelect_Bits[27].Operand_Select_Bit_I_n_4 ;
  wire \OpSelect_Bits[27].Operand_Select_Bit_I_n_5 ;
  wire \OpSelect_Bits[28].Operand_Select_Bit_I_n_5 ;
  wire \OpSelect_Bits[29].Operand_Select_Bit_I_n_5 ;
  wire \OpSelect_Bits[29].Operand_Select_Bit_I_n_6 ;
  wire \OpSelect_Bits[30].Operand_Select_Bit_I_n_4 ;
  wire \OpSelect_Bits[31].Operand_Select_Bit_I_n_39 ;
  wire \OpSelect_Bits[4].Operand_Select_Bit_I_n_3 ;
  wire \OpSelect_Bits[8].Operand_Select_Bit_I_n_4 ;
  wire \OpSelect_Bits[9].Operand_Select_Bit_I_n_3 ;
  wire PCMP_Instr2_out;
  wire [22:0]PC_OF;
  wire [15:0]Q;
  wire [0:31]Reg1_Data;
  wire S;
  wire [31:0]S0_AXIS_TDATA;
  wire S0_AXIS_TLAST;
  wire S0_AXIS_TVALID;
  wire [31:0]S1_AXIS_TDATA;
  wire [31:0]\S1_AXIS_TDATA[31] ;
  wire S1_AXIS_TLAST;
  wire S1_AXIS_TLAST_0;
  wire S1_AXIS_TVALID;
  wire S1_AXIS_TVALID_0;
  wire S_0;
  wire S_10;
  wire S_2;
  wire S_5;
  wire S_8;
  wire Sext;
  wire Shift_Logic_Res;
  wire Shifted;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_10 ;
  wire \Using_FPGA.Native_11 ;
  wire \Using_FPGA.Native_12 ;
  wire \Using_FPGA.Native_13 ;
  wire \Using_FPGA.Native_14 ;
  wire [15:0]\Using_FPGA.Native_15 ;
  wire [14:0]\Using_FPGA.Native_16 ;
  wire \Using_FPGA.Native_17 ;
  wire \Using_FPGA.Native_18 ;
  wire \Using_FPGA.Native_19 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_20 ;
  wire \Using_FPGA.Native_21 ;
  wire \Using_FPGA.Native_22 ;
  wire \Using_FPGA.Native_23 ;
  wire \Using_FPGA.Native_24 ;
  wire \Using_FPGA.Native_25 ;
  wire \Using_FPGA.Native_26 ;
  wire \Using_FPGA.Native_27 ;
  wire \Using_FPGA.Native_28 ;
  wire \Using_FPGA.Native_29 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_30 ;
  wire \Using_FPGA.Native_31 ;
  wire [30:0]\Using_FPGA.Native_32 ;
  wire \Using_FPGA.Native_33 ;
  wire \Using_FPGA.Native_34 ;
  wire [5:0]\Using_FPGA.Native_35 ;
  wire \Using_FPGA.Native_36 ;
  wire \Using_FPGA.Native_37 ;
  wire \Using_FPGA.Native_38 ;
  wire \Using_FPGA.Native_39 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_40 ;
  wire \Using_FPGA.Native_41 ;
  wire \Using_FPGA.Native_42 ;
  wire \Using_FPGA.Native_43 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire \Using_FPGA.Native_8 ;
  wire \Using_FPGA.Native_9 ;
  wire \Using_FPGA.Native_i_1__45 ;
  wire \Using_FPGA.Native_i_1__46 ;
  wire \Using_FPGA.Native_i_1__46_0 ;
  wire \Using_FPGA.Native_i_2__31 ;
  wire \Using_FPGA.Native_i_2__31_0 ;
  wire \Using_FPGA.The_Compare[0].sel_reg ;
  wire \Using_FPGA.The_Compare[0].sel_reg_3 ;
  wire \Using_FPGA.The_Compare[0].sel_reg_6 ;
  wire \Using_FPGA.The_Compare[0].sel_reg_9 ;
  wire \Using_FPGA.The_Compare[2].sel_reg ;
  wire \Using_FPGA.The_Compare[2].sel_reg_1 ;
  wire \Using_FPGA.The_Compare[2].sel_reg_4 ;
  wire \Using_FPGA.The_Compare[2].sel_reg_7 ;
  wire compare_Instr;
  wire [0:31]ex_Result;
  wire ex_mulhu_instr;
  wire [0:15]imm_Value;
  wire \instr_EX_i_reg[22] ;
  wire of_PipeRun;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sext16;
  wire sext8;
  wire sync_reset;
  wire void_bit;

  block_design_microblaze_0_0_Operand_Select_Bit__parameterized12 \OpSelect_Bits[0].Operand_Select_Bit_I 
       (.\C_reg[23] (B[1]),
        .\C_reg[23]_0 (B[2]),
        .\C_reg[23]_1 (\C_reg[27] ),
        .\C_reg[23]_2 (\C_reg[23] ),
        .\C_reg[23]_3 (\Using_FPGA.Native ),
        .\C_reg[23]_4 (B[0]),
        .\C_reg[29] (\C_reg[29] ),
        .\C_reg[31] (\C_reg[28] ),
        .\C_reg[31]_0 (\C_reg[28]_0 ),
        .\C_reg[31]_1 (\OpSelect_Bits[31].Operand_Select_Bit_I_n_39 ),
        .\C_reg[31]_2 (\C_reg[30] ),
        .\C_reg[31]_3 (\OpSelect_Bits[29].Operand_Select_Bit_I_n_6 ),
        .Clk(Clk),
        .D_34(D_34),
        .I3_15(I3_15),
        .Reg1_Data(Reg1_Data[0]),
        .S(S),
        .\Using_FPGA.Native (\Using_FPGA.Native_30 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_15 [15:14]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_16 [14]),
        .\Using_FPGA.Native_2 ({\Using_FPGA.Native_35 [5],\Using_FPGA.Native_35 [2],\Using_FPGA.Native_35 [0]}),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_36 ),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_37 ),
        .compare_Instr(compare_Instr),
        .ex_Result(ex_Result[0]),
        .ex_mulhu_instr(ex_mulhu_instr),
        .\instr_EX_i_reg[22] (\instr_EX_i_reg[22] ),
        .of_PipeRun(of_PipeRun),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset),
        .void_bit(void_bit));
  block_design_microblaze_0_0_Operand_Select_Bit__parameterized10 \OpSelect_Bits[10].Operand_Select_Bit_I 
       (.Clk(Clk),
        .D_24(D_24),
        .PC_OF(PC_OF[13]),
        .Reg1_Data(Reg1_Data[10]),
        .\Using_FPGA.Native (\Using_FPGA.Native_20 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_15 [4]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_16 [4]),
        .\Using_FPGA.Native_2 (\OpSelect_Bits[10].Operand_Select_Bit_I_n_3 ),
        .\Using_FPGA.Native_i_1__46 (\Using_FPGA.Native_i_1__46 ),
        .\Using_FPGA.Native_i_1__46_0 (\Using_FPGA.Native_19 ),
        .\Using_FPGA.Native_i_1__46_1 (\Using_FPGA.Native_17 ),
        .\Using_FPGA.Native_i_1__46_2 (\Using_FPGA.Native_18 ),
        .\Using_FPGA.Native_i_1__46_3 (\OpSelect_Bits[9].Operand_Select_Bit_I_n_3 ),
        .ex_Result(ex_Result[10]),
        .of_PipeRun(of_PipeRun),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_Operand_Select_Bit__parameterized10_803 \OpSelect_Bits[11].Operand_Select_Bit_I 
       (.Clk(Clk),
        .D_23(D_23),
        .PC_OF(PC_OF[12]),
        .Reg1_Data(Reg1_Data[11]),
        .S_2(S_2),
        .\Using_FPGA.Native (\Using_FPGA.Native_19 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_15 [3]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_16 [3]),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_18 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_16 [2:1]),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_17 ),
        .ex_Result(ex_Result[11]),
        .of_PipeRun(of_PipeRun),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_Operand_Select_Bit__parameterized10_804 \OpSelect_Bits[12].Operand_Select_Bit_I 
       (.Clk(Clk),
        .D_22(D_22),
        .PC_OF(PC_OF[11]),
        .Reg1_Data(Reg1_Data[12]),
        .\Using_FPGA.Native (\Using_FPGA.Native_18 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_15 [2]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_16 [2]),
        .ex_Result(ex_Result[12]),
        .of_PipeRun(of_PipeRun),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_Operand_Select_Bit__parameterized10_805 \OpSelect_Bits[13].Operand_Select_Bit_I 
       (.Clk(Clk),
        .D_21(D_21),
        .PC_OF(PC_OF[10]),
        .Reg1_Data(Reg1_Data[13]),
        .\Using_FPGA.Native (\Using_FPGA.Native_17 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_15 [1]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_16 [1]),
        .ex_Result(ex_Result[13]),
        .of_PipeRun(of_PipeRun),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_Operand_Select_Bit__parameterized10_806 \OpSelect_Bits[14].Operand_Select_Bit_I 
       (.B(B[15]),
        .Clk(Clk),
        .D_20(D_20),
        .PC_OF(PC_OF[9]),
        .Reg1_Data(Reg1_Data[14]),
        .\Using_FPGA.Native (\Using_FPGA.Native_14 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_15 [0]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_16 [0]),
        .\Using_FPGA.Native_2 (\OpSelect_Bits[14].Operand_Select_Bit_I_n_4 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_13 ),
        .\Using_FPGA.Native_i_1__45 (\Using_FPGA.Native_17 ),
        .\Using_FPGA.Native_i_1__45_0 (\Using_FPGA.Native_18 ),
        .\Using_FPGA.Native_i_1__45_1 (\Using_FPGA.Native_19 ),
        .\Using_FPGA.Native_i_1__45_2 (\Using_FPGA.Native_20 ),
        .\Using_FPGA.Native_i_1__45_3 (\Using_FPGA.Native_21 ),
        .\Using_FPGA.The_Compare[2].sel_reg_1 (\Using_FPGA.The_Compare[2].sel_reg_1 ),
        .ex_Result(ex_Result[14]),
        .of_PipeRun(of_PipeRun),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_Operand_Select_Bit__parameterized10_807 \OpSelect_Bits[15].Operand_Select_Bit_I 
       (.A(A[16]),
        .B(B[15]),
        .Clk(Clk),
        .D_19(D_19),
        .PC_OF(PC_OF[8]),
        .Reg1_Data(Reg1_Data[15]),
        .\Using_FPGA.Native (\Using_FPGA.Native_13 ),
        .ex_Result(ex_Result[15]),
        .of_PipeRun(of_PipeRun),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_Operand_Select_Bit__parameterized8 \OpSelect_Bits[16].Operand_Select_Bit_I 
       (.A(A[15]),
        .B(B[14]),
        .Clk(Clk),
        .D_18(D_18),
        .PC_OF(PC_OF[7]),
        .Reg1_Data(Reg1_Data[16]),
        .Sext(Sext),
        .\Using_FPGA.Native (\Using_FPGA.Native_12 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_37 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_5 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_11 ),
        .\Using_FPGA.Native_3 (B[13:12]),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_10 ),
        .\Using_FPGA.The_Compare[0].sel_reg_6 (\Using_FPGA.The_Compare[0].sel_reg_6 ),
        .ex_Result(ex_Result[16]),
        .of_PipeRun(of_PipeRun),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sext16(sext16),
        .sext8(sext8),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_Operand_Select_Bit__parameterized8_808 \OpSelect_Bits[17].Operand_Select_Bit_I 
       (.A(A[14]),
        .B(B[13]),
        .Clk(Clk),
        .D_17(D_17),
        .PC_OF(PC_OF[6]),
        .Reg1_Data(Reg1_Data[17]),
        .\Using_FPGA.Native (\Using_FPGA.Native_11 ),
        .\Using_FPGA.Native_0 (\OpSelect_Bits[17].Operand_Select_Bit_I_n_3 ),
        .\Using_FPGA.Native_i_2__31 (\Using_FPGA.Native_i_2__31_0 ),
        .\Using_FPGA.Native_i_2__31_0 (\Using_FPGA.Native_12 ),
        .ex_Result(ex_Result[17]),
        .of_PipeRun(of_PipeRun),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_Operand_Select_Bit__parameterized8_809 \OpSelect_Bits[18].Operand_Select_Bit_I 
       (.A(A[13]),
        .B(B[12]),
        .Clk(Clk),
        .D_16(D_16),
        .PC_OF(PC_OF[5]),
        .Reg1_Data(Reg1_Data[18]),
        .Shift_Logic_Res(Shift_Logic_Res),
        .\Using_FPGA.Native (\Using_FPGA.Native_10 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_34 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_40 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_41 ),
        .\Using_FPGA.Native_3 (\OpSelect_Bits[10].Operand_Select_Bit_I_n_3 ),
        .\Using_FPGA.Native_4 (\OpSelect_Bits[4].Operand_Select_Bit_I_n_3 ),
        .\Using_FPGA.Native_i_1__46 (\Using_FPGA.Native_9 ),
        .\Using_FPGA.Native_i_1__46_0 (\Using_FPGA.Native_7 ),
        .\Using_FPGA.Native_i_1__46_1 (\Using_FPGA.Native_8 ),
        .\Using_FPGA.Native_i_1__46_2 (\OpSelect_Bits[17].Operand_Select_Bit_I_n_3 ),
        .\Using_FPGA.Native_i_1__46_3 (\OpSelect_Bits[27].Operand_Select_Bit_I_n_5 ),
        .ex_Result(ex_Result[18]),
        .of_PipeRun(of_PipeRun),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_Operand_Select_Bit__parameterized8_810 \OpSelect_Bits[19].Operand_Select_Bit_I 
       (.A(A[12]),
        .B(B[11]),
        .Clk(Clk),
        .D_15(D_15),
        .I0(I0),
        .PCMP_Instr2_out(PCMP_Instr2_out),
        .PC_OF(PC_OF[4]),
        .Reg1_Data(Reg1_Data[19]),
        .\Using_FPGA.Native (\Using_FPGA.Native_9 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_40 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_42 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_43 ),
        .\Using_FPGA.Native_3 (\OpSelect_Bits[1].Operand_Select_Bit_I_n_4 ),
        .\Using_FPGA.Native_i_1__53 (\Using_FPGA.Native_10 ),
        .\Using_FPGA.Native_i_1__53_0 (\Using_FPGA.Native_11 ),
        .\Using_FPGA.Native_i_1__53_1 (\Using_FPGA.Native_i_2__31_0 ),
        .\Using_FPGA.Native_i_1__53_2 (\Using_FPGA.Native_12 ),
        .\Using_FPGA.Native_i_1__53_3 (\OpSelect_Bits[25].Operand_Select_Bit_I_n_7 ),
        .ex_Result(ex_Result[19]),
        .of_PipeRun(of_PipeRun),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_Operand_Select_Bit__parameterized10_811 \OpSelect_Bits[1].Operand_Select_Bit_I 
       (.Clk(Clk),
        .D_33(D_33),
        .Is_Equal(Is_Equal),
        .PC_OF(PC_OF[22]),
        .Reg1_Data(Reg1_Data[1]),
        .\Using_FPGA.Native (\Using_FPGA.Native_29 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_15 [13]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_16 [13]),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_31 ),
        .\Using_FPGA.Native_3 (\OpSelect_Bits[1].Operand_Select_Bit_I_n_4 ),
        .\Using_FPGA.Native_i_1__53 (\Using_FPGA.Native_30 ),
        .\Using_FPGA.Native_i_1__53_0 (\OpSelect_Bits[8].Operand_Select_Bit_I_n_4 ),
        .\Using_FPGA.Native_i_6 (\Using_FPGA.Native_24 ),
        .\Using_FPGA.Native_i_6_0 (\Using_FPGA.Native_25 ),
        .\Using_FPGA.Native_i_6_1 (\Using_FPGA.Native_26 ),
        .\Using_FPGA.Native_i_6_2 (\Using_FPGA.Native_27 ),
        .\Using_FPGA.Native_i_6_3 (\Using_FPGA.Native_28 ),
        .ex_Result(ex_Result[1]),
        .of_PipeRun(of_PipeRun),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_Operand_Select_Bit__parameterized8_812 \OpSelect_Bits[20].Operand_Select_Bit_I 
       (.A(A[11]),
        .B(B[10]),
        .Clk(Clk),
        .D_14(D_14),
        .PC_OF(PC_OF[3]),
        .Reg1_Data(Reg1_Data[20]),
        .\Using_FPGA.Native (\Using_FPGA.Native_8 ),
        .ex_Result(ex_Result[20]),
        .of_PipeRun(of_PipeRun),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_Operand_Select_Bit__parameterized8_813 \OpSelect_Bits[21].Operand_Select_Bit_I 
       (.A(A[10]),
        .B({B[11:10],B[3:1]}),
        .BitField_Extract(BitField_Extract),
        .BitField_Insert(BitField_Insert),
        .Clk(Clk),
        .D({D[30:8],D[6:5],D[2:0]}),
        .D_13(D_13),
        .PC_OF(PC_OF[2]),
        .Reg1_Data(Reg1_Data[21]),
        .S_5(S_5),
        .\Using_BitField.mem_mask0_reg[10] (\OpSelect_Bits[24].Operand_Select_Bit_I_n_8 ),
        .\Using_BitField.mem_mask0_reg[14] (B[0]),
        .\Using_BitField.mem_mask0_reg[14]_0 (\OpSelect_Bits[29].Operand_Select_Bit_I_n_5 ),
        .\Using_BitField.mem_mask0_reg[1] (\OpSelect_Bits[28].Operand_Select_Bit_I_n_5 ),
        .\Using_BitField.mem_mask0_reg[1]_0 (\OpSelect_Bits[25].Operand_Select_Bit_I_n_6 ),
        .\Using_BitField.mem_mask0_reg[29] (\Using_FPGA.Native ),
        .\Using_BitField.mem_mask0_reg[3] (\OpSelect_Bits[25].Operand_Select_Bit_I_n_8 ),
        .\Using_BitField.mem_mask0_reg[7] (\OpSelect_Bits[24].Operand_Select_Bit_I_n_7 ),
        .\Using_BitField.mem_mask1_reg[28] (B[8]),
        .\Using_BitField.mem_mask1_reg[28]_0 (B[6]),
        .\Using_BitField.mem_mask1_reg[28]_1 (B[5]),
        .\Using_BitField.mem_mask1_reg[28]_2 (B[7]),
        .\Using_FPGA.Native (\Using_FPGA.Native_7 ),
        .\Using_FPGA.Native_0 (B[9]),
        .\Using_FPGA.Native_1 ({\Using_FPGA.Native_32 [30],\Using_FPGA.Native_32 [28:26],\Using_FPGA.Native_32 [24:21],\Using_FPGA.Native_32 [18:15],\Using_FPGA.Native_32 [12],\Using_FPGA.Native_32 [4],\Using_FPGA.Native_32 [2]}),
        .\Using_FPGA.Native_2 (\OpSelect_Bits[21].Operand_Select_Bit_I_n_47 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_8 ),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_9 ),
        .ex_Result(ex_Result[21]),
        .of_PipeRun(of_PipeRun),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_Operand_Select_Bit__parameterized8_814 \OpSelect_Bits[22].Operand_Select_Bit_I 
       (.A(A[9]),
        .B(B[3:1]),
        .BitField_Extract(BitField_Extract),
        .BitField_Insert(BitField_Insert),
        .Clk(Clk),
        .D(D[3]),
        .D_12(D_12),
        .PC_OF(PC_OF[1]),
        .Reg1_Data(Reg1_Data[22]),
        .Shifted(Shifted),
        .\Using_BitField.mem_mask0_reg[12] (\OpSelect_Bits[21].Operand_Select_Bit_I_n_47 ),
        .\Using_BitField.mem_mask0_reg[22] (\OpSelect_Bits[24].Operand_Select_Bit_I_n_7 ),
        .\Using_BitField.mem_mask0_reg[2] (\OpSelect_Bits[24].Operand_Select_Bit_I_n_8 ),
        .\Using_BitField.mem_mask1_reg[27] (B[7]),
        .\Using_BitField.mem_mask1_reg[27]_0 (B[9]),
        .\Using_BitField.mem_mask1_reg[27]_1 (B[6]),
        .\Using_BitField.mem_mask1_reg[27]_2 (B[5]),
        .\Using_FPGA.Native (\Using_FPGA.Native_6 ),
        .\Using_FPGA.Native_0 (B[8]),
        .\Using_FPGA.Native_1 ({\Using_FPGA.Native_32 [29],\Using_FPGA.Native_32 [19],\Using_FPGA.Native_32 [11],\Using_FPGA.Native_32 [9],\Using_FPGA.Native_32 [3]}),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_33 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_38 ),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_22 ),
        .\Using_FPGA.Native_5 (\OpSelect_Bits[14].Operand_Select_Bit_I_n_4 ),
        .\Using_FPGA.Native_6 (\Using_FPGA.Native_i_1__46 ),
        .\Using_FPGA.Native_7 (\Using_FPGA.Native_39 ),
        .\Using_FPGA.Native_i_1__45 (\Using_FPGA.Native_12 ),
        .\Using_FPGA.Native_i_1__45_0 (\OpSelect_Bits[30].Operand_Select_Bit_I_n_4 ),
        .\Using_FPGA.Native_i_1__45_1 (\Using_FPGA.Native_5 ),
        .\Using_FPGA.Native_i_1__45_2 (\Using_FPGA.Native_i_2__31_0 ),
        .\Using_FPGA.Native_i_1__45_3 (\Using_FPGA.Native_i_1__45 ),
        .\Using_FPGA.Native_i_3__2 (\Using_FPGA.Native_7 ),
        .\Using_FPGA.Native_i_3__2_0 (\Using_FPGA.Native_8 ),
        .\Using_FPGA.Native_i_3__2_1 (\Using_FPGA.Native_9 ),
        .\Using_FPGA.Native_i_3__2_2 (\Using_FPGA.Native_10 ),
        .\Using_FPGA.Native_i_3__2_3 (\Using_FPGA.Native_11 ),
        .\Using_FPGA.The_Compare[2].sel_reg_4 (\Using_FPGA.The_Compare[2].sel_reg_4 ),
        .ex_Result(ex_Result[22]),
        .of_PipeRun(of_PipeRun),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_Operand_Select_Bit__parameterized8_815 \OpSelect_Bits[23].Operand_Select_Bit_I 
       (.A(A[8]),
        .BitField_Extract(BitField_Extract),
        .Clk(Clk),
        .D(D[4]),
        .D_11(D_11),
        .PC_OF(PC_OF[0]),
        .Reg1_Data(Reg1_Data[23]),
        .Shifted(Shifted),
        .\Using_BitField.mem_mask1_reg[26] (B[6]),
        .\Using_BitField.mem_mask1_reg[26]_0 (B[5]),
        .\Using_BitField.mem_mask1_reg[26]_1 (B[8]),
        .\Using_BitField.mem_mask1_reg[26]_2 (B[9]),
        .\Using_FPGA.Native (B[7]),
        .ex_Result(ex_Result[23]),
        .of_PipeRun(of_PipeRun),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_Operand_Select_Bit \OpSelect_Bits[24].Operand_Select_Bit_I 
       (.A(A[7]),
        .B(B[3:1]),
        .BitField_Extract(BitField_Extract),
        .BitField_Insert(BitField_Insert),
        .Clk(Clk),
        .D(D[7]),
        .D_10(D_10),
        .I3_9(I3_9),
        .Reg1_Data(Reg1_Data[24]),
        .\Using_BitField.mem_mask0_reg[23] (\Using_FPGA.Native ),
        .\Using_BitField.mem_mask0_reg[23]_0 (\OpSelect_Bits[28].Operand_Select_Bit_I_n_5 ),
        .\Using_BitField.mem_mask0_reg[23]_1 (\OpSelect_Bits[21].Operand_Select_Bit_I_n_47 ),
        .\Using_BitField.mem_mask0_reg[26] (B[0]),
        .\Using_BitField.mem_mask0_reg[26]_0 (\OpSelect_Bits[27].Operand_Select_Bit_I_n_4 ),
        .\Using_BitField.mem_mask1_reg[23] (B[7]),
        .\Using_BitField.mem_mask1_reg[23]_0 (B[5]),
        .\Using_BitField.mem_mask1_reg[23]_1 (B[8]),
        .\Using_BitField.mem_mask1_reg[23]_2 (B[9]),
        .\Using_FPGA.Native (\Using_FPGA.Native_5 ),
        .\Using_FPGA.Native_0 (B[6]),
        .\Using_FPGA.Native_1 ({\Using_FPGA.Native_32 [25],\Using_FPGA.Native_32 [13],\Using_FPGA.Native_32 [8],\Using_FPGA.Native_32 [5]}),
        .\Using_FPGA.Native_2 (\OpSelect_Bits[24].Operand_Select_Bit_I_n_7 ),
        .\Using_FPGA.Native_3 (\OpSelect_Bits[24].Operand_Select_Bit_I_n_8 ),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_4 ),
        .\Using_FPGA.Native_5 (B[4]),
        .\Using_FPGA.Native_6 (\Using_FPGA.Native_3 ),
        .\Using_FPGA.The_Compare[0].sel_reg_9 (\Using_FPGA.The_Compare[0].sel_reg_9 ),
        .ex_Result(ex_Result[24]),
        .of_PipeRun(of_PipeRun),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_Operand_Select_Bit_816 \OpSelect_Bits[25].Operand_Select_Bit_I 
       (.A(A[6]),
        .B(B[1]),
        .BitField_Insert(BitField_Insert),
        .Clk(Clk),
        .D_8(D_8),
        .I3_7(I3_7),
        .Reg1_Data(Reg1_Data[25]),
        .\Using_BitField.mem_mask0_reg[11] (\OpSelect_Bits[21].Operand_Select_Bit_I_n_47 ),
        .\Using_BitField.mem_mask0_reg[11]_0 (\OpSelect_Bits[28].Operand_Select_Bit_I_n_5 ),
        .\Using_BitField.mem_mask0_reg[11]_1 (B[6]),
        .\Using_BitField.mem_mask0_reg[21] (B[7]),
        .\Using_BitField.mem_mask0_reg[21]_0 (B[0]),
        .\Using_BitField.mem_mask0_reg[31] (\Using_FPGA.Native ),
        .\Using_BitField.mem_mask0_reg[31]_0 (\OpSelect_Bits[24].Operand_Select_Bit_I_n_7 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_4 ),
        .\Using_FPGA.Native_0 (B[5]),
        .\Using_FPGA.Native_1 ({\Using_FPGA.Native_32 [20],\Using_FPGA.Native_32 [10],\Using_FPGA.Native_32 [0]}),
        .\Using_FPGA.Native_2 (\OpSelect_Bits[25].Operand_Select_Bit_I_n_6 ),
        .\Using_FPGA.Native_3 (\OpSelect_Bits[25].Operand_Select_Bit_I_n_7 ),
        .\Using_FPGA.Native_4 (\OpSelect_Bits[25].Operand_Select_Bit_I_n_8 ),
        .\Using_FPGA.Native_i_2__32 (\Using_FPGA.Native_5 ),
        .\Using_FPGA.Native_i_2__32_0 (\Using_FPGA.Native_i_2__31_0 ),
        .\Using_FPGA.Native_i_2__32_1 (\Using_FPGA.Native_i_1__45 ),
        .\Using_FPGA.Native_i_2__32_2 (\Using_FPGA.Native_3 ),
        .\Using_FPGA.Native_i_2__32_3 (\Using_FPGA.Native_2 ),
        .ex_Result(ex_Result[25]),
        .of_PipeRun(of_PipeRun),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_Operand_Select_Bit__parameterized6 \OpSelect_Bits[26].Operand_Select_Bit_I 
       (.A(A[5]),
        .B(B[4]),
        .Clk(Clk),
        .D_6(D_6),
        .I3_5(I3_5),
        .Reg1_Data(Reg1_Data[26]),
        .\Using_FPGA.Native (\Using_FPGA.Native_3 ),
        .ex_Result(ex_Result[26]),
        .of_PipeRun(of_PipeRun),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_Operand_Select_Bit__parameterized4 \OpSelect_Bits[27].Operand_Select_Bit_I 
       (.A(A[4]),
        .B(B[3]),
        .BitField_Insert(BitField_Insert),
        .Clk(Clk),
        .D_4(D_4),
        .I3_14(I3_14),
        .Reg1_Data(Reg1_Data[27]),
        .S_8(S_8),
        .\Using_BitField.mem_mask0_reg[30] (B[6]),
        .\Using_BitField.mem_mask0_reg[30]_0 (B[0]),
        .\Using_BitField.mem_mask0_reg[30]_1 (B[7]),
        .\Using_BitField.mem_mask0_reg[30]_2 (B[2:1]),
        .\Using_BitField.mem_mask0_reg[30]_3 (B[9]),
        .\Using_BitField.mem_mask0_reg[30]_4 (B[8]),
        .\Using_FPGA.Native (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_32 [1]),
        .\Using_FPGA.Native_1 (\OpSelect_Bits[27].Operand_Select_Bit_I_n_4 ),
        .\Using_FPGA.Native_2 (\OpSelect_Bits[27].Operand_Select_Bit_I_n_5 ),
        .\Using_FPGA.Native_i_2__31 (\Using_FPGA.Native_i_2__31 ),
        .\Using_FPGA.Native_i_2__31_0 (\Using_FPGA.Native_3 ),
        .\Using_FPGA.Native_i_2__31_1 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_i_2__31_2 (EX_Op1),
        .ex_Result(ex_Result[27]),
        .of_PipeRun(of_PipeRun),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_Operand_Select_Bit__parameterized2 \OpSelect_Bits[28].Operand_Select_Bit_I 
       (.A(A[3]),
        .B({B[3],B[1]}),
        .BitField_Insert(BitField_Insert),
        .Clk(Clk),
        .D_3(D_3),
        .I3_13(I3_13),
        .Reg1_Data(Reg1_Data[28]),
        .\Using_BitField.mem_mask0_reg[24] (B[8]),
        .\Using_BitField.mem_mask0_reg[24]_0 (B[9]),
        .\Using_BitField.mem_mask0_reg[25] (\OpSelect_Bits[25].Operand_Select_Bit_I_n_6 ),
        .\Using_BitField.mem_mask0_reg[25]_0 (B[7]),
        .\Using_BitField.mem_mask0_reg[25]_1 (\OpSelect_Bits[21].Operand_Select_Bit_I_n_47 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_0 (B[2]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_32 [7:6]),
        .\Using_FPGA.Native_2 (\OpSelect_Bits[28].Operand_Select_Bit_I_n_5 ),
        .ex_Result(ex_Result[28]),
        .of_PipeRun(of_PipeRun),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_Operand_Select_Bit_817 \OpSelect_Bits[29].Operand_Select_Bit_I 
       (.A(A[2]),
        .B(B[1]),
        .BitField_Insert(BitField_Insert),
        .\C_reg[28] (\C_reg[28]_1 ),
        .\C_reg[28]_0 (B[2]),
        .\C_reg[28]_1 (\C_reg[28] ),
        .\C_reg[28]_2 (\C_reg[28]_0 ),
        .\C_reg[28]_3 (\Using_FPGA.Native_30 ),
        .Clk(Clk),
        .D_2(D_2),
        .EX_Op1(EX_Op1),
        .I3_12(I3_12),
        .Reg1_Data(Reg1_Data[29]),
        .\Using_BitField.mem_mask0_reg[17] (B[7]),
        .\Using_BitField.mem_mask0_reg[17]_0 (\OpSelect_Bits[28].Operand_Select_Bit_I_n_5 ),
        .\Using_BitField.mem_mask0_reg[17]_1 (\OpSelect_Bits[25].Operand_Select_Bit_I_n_6 ),
        .\Using_BitField.mem_mask0_reg[17]_2 (\OpSelect_Bits[21].Operand_Select_Bit_I_n_47 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_32 [14]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_35 [3]),
        .\Using_FPGA.Native_1 (\OpSelect_Bits[29].Operand_Select_Bit_I_n_5 ),
        .\Using_FPGA.Native_2 (\OpSelect_Bits[29].Operand_Select_Bit_I_n_6 ),
        .ex_Result(ex_Result[29]),
        .of_PipeRun(of_PipeRun),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_Operand_Select_Bit__parameterized10_818 \OpSelect_Bits[2].Operand_Select_Bit_I 
       (.Clk(Clk),
        .D_32(D_32),
        .PC_OF(PC_OF[21]),
        .Reg1_Data(Reg1_Data[2]),
        .\Using_FPGA.Native (\Using_FPGA.Native_28 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_15 [12]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_16 [12]),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_29 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_16 [14:13]),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_30 ),
        .\Using_FPGA.The_Compare[0].sel_reg (\Using_FPGA.The_Compare[0].sel_reg ),
        .ex_Result(ex_Result[2]),
        .of_PipeRun(of_PipeRun),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_Operand_Select_Bit_819 \OpSelect_Bits[30].Operand_Select_Bit_I 
       (.A(A[1]),
        .Clk(Clk),
        .D_1(D_1),
        .EX_Op1(EX_Op1),
        .I3_11(I3_11),
        .Op1_Shift(Op1_Shift),
        .Reg1_Data(Reg1_Data[30]),
        .\Using_FPGA.Native (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_0 (B[0]),
        .\Using_FPGA.Native_1 (\OpSelect_Bits[30].Operand_Select_Bit_I_n_4 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_i_3__2 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_i_3__2_0 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_i_3__2_1 (\Using_FPGA.Native_3 ),
        .\Using_FPGA.Native_i_3__2_2 (\Using_FPGA.Native_4 ),
        .\Using_FPGA.The_Compare[2].sel_reg_7 (\Using_FPGA.The_Compare[2].sel_reg_7 ),
        .ex_Result(ex_Result[30]),
        .of_PipeRun(of_PipeRun),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_Operand_Select_Bit_820 \OpSelect_Bits[31].Operand_Select_Bit_I 
       (.A(A[0]),
        .\C_reg[27] (B[2:1]),
        .\C_reg[27]_0 (\C_reg[27] ),
        .\C_reg[30] (\C_reg[30] ),
        .\C_reg[30]_0 (B[0]),
        .\C_reg[30]_1 (\C_reg[30]_0 ),
        .\C_reg[30]_2 (\OpSelect_Bits[29].Operand_Select_Bit_I_n_6 ),
        .Clk(Clk),
        .D_0(D_0),
        .I3(I3),
        .Op1_Shift(Op1_Shift),
        .Reg1_Data(Reg1_Data[31]),
        .S0_AXIS_TDATA(S0_AXIS_TDATA),
        .S0_AXIS_TLAST(S0_AXIS_TLAST),
        .S0_AXIS_TVALID(S0_AXIS_TVALID),
        .S1_AXIS_TDATA(S1_AXIS_TDATA),
        .\S1_AXIS_TDATA[31] (\S1_AXIS_TDATA[31] ),
        .S1_AXIS_TLAST(S1_AXIS_TLAST),
        .S1_AXIS_TLAST_0(S1_AXIS_TLAST_0),
        .S1_AXIS_TVALID(S1_AXIS_TVALID),
        .S1_AXIS_TVALID_0(S1_AXIS_TVALID_0),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .\Using_FPGA.Native_0 ({\Using_FPGA.Native_35 [4],\Using_FPGA.Native_35 [1]}),
        .\Using_FPGA.Native_1 (\OpSelect_Bits[31].Operand_Select_Bit_I_n_39 ),
        .ex_Result(ex_Result[31]),
        .of_PipeRun(of_PipeRun),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset),
        .void_bit(void_bit));
  block_design_microblaze_0_0_Operand_Select_Bit__parameterized10_821 \OpSelect_Bits[3].Operand_Select_Bit_I 
       (.Clk(Clk),
        .D_31(D_31),
        .PC_OF(PC_OF[20]),
        .Reg1_Data(Reg1_Data[3]),
        .\Using_FPGA.Native (\Using_FPGA.Native_27 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_15 [11]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_16 [11]),
        .ex_Result(ex_Result[3]),
        .of_PipeRun(of_PipeRun),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_Operand_Select_Bit__parameterized10_822 \OpSelect_Bits[4].Operand_Select_Bit_I 
       (.Clk(Clk),
        .D_30(D_30),
        .PC_OF(PC_OF[19]),
        .Reg1_Data(Reg1_Data[4]),
        .S_0(S_0),
        .\Using_FPGA.Native (\Using_FPGA.Native_26 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_15 [10]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_16 [10]),
        .\Using_FPGA.Native_2 (\OpSelect_Bits[4].Operand_Select_Bit_I_n_3 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_25 ),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_27 ),
        .\Using_FPGA.Native_5 ({\Using_FPGA.Native_16 [11],\Using_FPGA.Native_16 [9]}),
        .\Using_FPGA.Native_i_1__46 (\Using_FPGA.Native_28 ),
        .\Using_FPGA.Native_i_1__46_0 (\Using_FPGA.Native_i_1__46_0 ),
        .\Using_FPGA.Native_i_1__46_1 (\Using_FPGA.Native_29 ),
        .ex_Result(ex_Result[4]),
        .of_PipeRun(of_PipeRun),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_Operand_Select_Bit__parameterized10_823 \OpSelect_Bits[5].Operand_Select_Bit_I 
       (.Clk(Clk),
        .D_29(D_29),
        .PC_OF(PC_OF[18]),
        .Reg1_Data(Reg1_Data[5]),
        .S_10(S_10),
        .\Using_FPGA.Native (\Using_FPGA.Native_25 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_15 [9]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_16 [9]),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_15 [14:10]),
        .ex_Result(ex_Result[5]),
        .of_PipeRun(of_PipeRun),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_Operand_Select_Bit__parameterized10_824 \OpSelect_Bits[6].Operand_Select_Bit_I 
       (.Clk(Clk),
        .D_28(D_28),
        .PC_OF(PC_OF[17]),
        .Reg1_Data(Reg1_Data[6]),
        .\Using_FPGA.Native (\Using_FPGA.Native_24 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_15 [8]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_16 [8]),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_16 [7]),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_23 ),
        .\Using_FPGA.The_Compare[2].sel_reg (\Using_FPGA.The_Compare[2].sel_reg ),
        .ex_Result(ex_Result[6]),
        .of_PipeRun(of_PipeRun),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_Operand_Select_Bit__parameterized10_825 \OpSelect_Bits[7].Operand_Select_Bit_I 
       (.Clk(Clk),
        .D_27(D_27),
        .PC_OF(PC_OF[16]),
        .Reg1_Data(Reg1_Data[7]),
        .\Using_FPGA.Native (\Using_FPGA.Native_23 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_15 [7]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_16 [7]),
        .ex_Result(ex_Result[7]),
        .of_PipeRun(of_PipeRun),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_Operand_Select_Bit__parameterized10_826 \OpSelect_Bits[8].Operand_Select_Bit_I 
       (.Clk(Clk),
        .D_26(D_26),
        .Is_Equal(Is_Equal),
        .PC_OF(PC_OF[15]),
        .Reg1_Data(Reg1_Data[8]),
        .\Using_FPGA.Native (\Using_FPGA.Native_22 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_15 [6]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_16 [6]),
        .\Using_FPGA.Native_2 (\OpSelect_Bits[8].Operand_Select_Bit_I_n_4 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_16 [5:4]),
        .\Using_FPGA.Native_i_6__0 (\Using_FPGA.Native_21 ),
        .\Using_FPGA.Native_i_6__0_0 (\Using_FPGA.Native_20 ),
        .\Using_FPGA.Native_i_6__0_1 (\Using_FPGA.Native_38 ),
        .\Using_FPGA.Native_i_6__0_2 (\Using_FPGA.Native_19 ),
        .\Using_FPGA.The_Compare[0].sel_reg_3 (\Using_FPGA.The_Compare[0].sel_reg_3 ),
        .ex_Result(ex_Result[8]),
        .of_PipeRun(of_PipeRun),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_Operand_Select_Bit__parameterized10_827 \OpSelect_Bits[9].Operand_Select_Bit_I 
       (.Clk(Clk),
        .D_25(D_25),
        .PC_OF(PC_OF[14]),
        .Reg1_Data(Reg1_Data[9]),
        .\Using_FPGA.Native (\Using_FPGA.Native_21 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_15 [5]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_16 [5]),
        .\Using_FPGA.Native_2 (\OpSelect_Bits[9].Operand_Select_Bit_I_n_3 ),
        .\Using_FPGA.Native_i_4__0 (\Using_FPGA.Native_38 ),
        .\Using_FPGA.Native_i_4__0_0 (\Using_FPGA.Native_22 ),
        .ex_Result(ex_Result[9]),
        .of_PipeRun(of_PipeRun),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  FDRE \Size_17to32.imm_Reg_reg[0] 
       (.C(Clk),
        .CE(E),
        .D(imm_Value[0]),
        .Q(Q[15]),
        .R(sync_reset));
  FDRE \Size_17to32.imm_Reg_reg[10] 
       (.C(Clk),
        .CE(E),
        .D(imm_Value[10]),
        .Q(Q[5]),
        .R(sync_reset));
  FDRE \Size_17to32.imm_Reg_reg[11] 
       (.C(Clk),
        .CE(E),
        .D(imm_Value[11]),
        .Q(Q[4]),
        .R(sync_reset));
  FDRE \Size_17to32.imm_Reg_reg[12] 
       (.C(Clk),
        .CE(E),
        .D(imm_Value[12]),
        .Q(Q[3]),
        .R(sync_reset));
  FDRE \Size_17to32.imm_Reg_reg[13] 
       (.C(Clk),
        .CE(E),
        .D(imm_Value[13]),
        .Q(Q[2]),
        .R(sync_reset));
  FDRE \Size_17to32.imm_Reg_reg[14] 
       (.C(Clk),
        .CE(E),
        .D(imm_Value[14]),
        .Q(Q[1]),
        .R(sync_reset));
  FDRE \Size_17to32.imm_Reg_reg[15] 
       (.C(Clk),
        .CE(E),
        .D(imm_Value[15]),
        .Q(Q[0]),
        .R(sync_reset));
  FDRE \Size_17to32.imm_Reg_reg[1] 
       (.C(Clk),
        .CE(E),
        .D(imm_Value[1]),
        .Q(Q[14]),
        .R(sync_reset));
  FDRE \Size_17to32.imm_Reg_reg[2] 
       (.C(Clk),
        .CE(E),
        .D(imm_Value[2]),
        .Q(Q[13]),
        .R(sync_reset));
  FDRE \Size_17to32.imm_Reg_reg[3] 
       (.C(Clk),
        .CE(E),
        .D(imm_Value[3]),
        .Q(Q[12]),
        .R(sync_reset));
  FDRE \Size_17to32.imm_Reg_reg[4] 
       (.C(Clk),
        .CE(E),
        .D(imm_Value[4]),
        .Q(Q[11]),
        .R(sync_reset));
  FDRE \Size_17to32.imm_Reg_reg[5] 
       (.C(Clk),
        .CE(E),
        .D(imm_Value[5]),
        .Q(Q[10]),
        .R(sync_reset));
  FDRE \Size_17to32.imm_Reg_reg[6] 
       (.C(Clk),
        .CE(E),
        .D(imm_Value[6]),
        .Q(Q[9]),
        .R(sync_reset));
  FDRE \Size_17to32.imm_Reg_reg[7] 
       (.C(Clk),
        .CE(E),
        .D(imm_Value[7]),
        .Q(Q[8]),
        .R(sync_reset));
  FDRE \Size_17to32.imm_Reg_reg[8] 
       (.C(Clk),
        .CE(E),
        .D(imm_Value[8]),
        .Q(Q[7]),
        .R(sync_reset));
  FDRE \Size_17to32.imm_Reg_reg[9] 
       (.C(Clk),
        .CE(E),
        .D(imm_Value[9]),
        .Q(Q[6]),
        .R(sync_reset));
endmodule

module block_design_microblaze_0_0_Operand_Select_Bit
   (\Using_FPGA.Native ,
    A,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    D,
    \Using_FPGA.The_Compare[0].sel_reg_9 ,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    I3_9,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_10,
    \Using_BitField.mem_mask0_reg[26] ,
    \Using_BitField.mem_mask1_reg[23] ,
    BitField_Insert,
    B,
    \Using_BitField.mem_mask0_reg[26]_0 ,
    \Using_BitField.mem_mask0_reg[23] ,
    \Using_BitField.mem_mask1_reg[23]_0 ,
    \Using_BitField.mem_mask0_reg[23]_0 ,
    \Using_BitField.mem_mask0_reg[23]_1 ,
    \Using_BitField.mem_mask1_reg[23]_1 ,
    \Using_BitField.mem_mask1_reg[23]_2 ,
    BitField_Extract,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 );
  output \Using_FPGA.Native ;
  output [0:0]A;
  output \Using_FPGA.Native_0 ;
  output [3:0]\Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  output \Using_FPGA.Native_3 ;
  output [0:0]D;
  output \Using_FPGA.The_Compare[0].sel_reg_9 ;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input I3_9;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_10;
  input \Using_BitField.mem_mask0_reg[26] ;
  input \Using_BitField.mem_mask1_reg[23] ;
  input BitField_Insert;
  input [2:0]B;
  input \Using_BitField.mem_mask0_reg[26]_0 ;
  input \Using_BitField.mem_mask0_reg[23] ;
  input \Using_BitField.mem_mask1_reg[23]_0 ;
  input \Using_BitField.mem_mask0_reg[23]_0 ;
  input \Using_BitField.mem_mask0_reg[23]_1 ;
  input \Using_BitField.mem_mask1_reg[23]_1 ;
  input \Using_BitField.mem_mask1_reg[23]_2 ;
  input BitField_Extract;
  input \Using_FPGA.Native_4 ;
  input [0:0]\Using_FPGA.Native_5 ;
  input \Using_FPGA.Native_6 ;

  wire [0:0]A;
  wire [2:0]B;
  wire BitField_Extract;
  wire BitField_Insert;
  wire Clk;
  wire [0:0]D;
  wire D_10;
  wire I3_9;
  wire [0:0]Reg1_Data;
  wire \Using_BitField.mem_mask0_reg[23] ;
  wire \Using_BitField.mem_mask0_reg[23]_0 ;
  wire \Using_BitField.mem_mask0_reg[23]_1 ;
  wire \Using_BitField.mem_mask0_reg[26] ;
  wire \Using_BitField.mem_mask0_reg[26]_0 ;
  wire \Using_BitField.mem_mask1_reg[23] ;
  wire \Using_BitField.mem_mask1_reg[23]_0 ;
  wire \Using_BitField.mem_mask1_reg[23]_1 ;
  wire \Using_BitField.mem_mask1_reg[23]_2 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [3:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire [0:0]\Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.The_Compare[0].sel_reg_9 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  block_design_microblaze_0_0_MB_LUT6_2_887 \Both_PC_and_MSR.Op1_LUT6 
       (.I3_9(I3_9),
        .Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  block_design_microblaze_0_0_MB_FDRE_888 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_4 ),
        .\Using_FPGA.Native_3 (\Using_BitField.mem_mask1_reg[23]_0 ),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_5 ),
        .\Using_FPGA.Native_5 (\Using_FPGA.Native_6 ),
        .\Using_FPGA.The_Compare[0].sel_reg_9 (\Using_FPGA.The_Compare[0].sel_reg_9 ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_FDRE_889 Op1_Reg_DFF
       (.A(A),
        .Clk(Clk),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_FDE_890 Op2_DFF
       (.B(B),
        .BitField_Extract(BitField_Extract),
        .BitField_Insert(BitField_Insert),
        .Clk(Clk),
        .D(D),
        .D_10(D_10),
        .\Using_BitField.mem_mask0_reg[23] (\Using_BitField.mem_mask0_reg[23] ),
        .\Using_BitField.mem_mask0_reg[23]_0 (\Using_BitField.mem_mask0_reg[23]_0 ),
        .\Using_BitField.mem_mask0_reg[23]_1 (\Using_BitField.mem_mask0_reg[23]_1 ),
        .\Using_BitField.mem_mask0_reg[26] (\Using_BitField.mem_mask0_reg[26] ),
        .\Using_BitField.mem_mask0_reg[26]_0 (\Using_BitField.mem_mask0_reg[26]_0 ),
        .\Using_BitField.mem_mask1_reg[23] (\Using_BitField.mem_mask1_reg[23] ),
        .\Using_BitField.mem_mask1_reg[23]_0 (\Using_BitField.mem_mask1_reg[23]_0 ),
        .\Using_BitField.mem_mask1_reg[23]_1 (\Using_BitField.mem_mask1_reg[23]_1 ),
        .\Using_BitField.mem_mask1_reg[23]_2 (\Using_BitField.mem_mask1_reg[23]_2 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_3 ),
        .of_PipeRun(of_PipeRun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module block_design_microblaze_0_0_Operand_Select_Bit_816
   (\Using_FPGA.Native ,
    A,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    I3_7,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_8,
    BitField_Insert,
    \Using_BitField.mem_mask0_reg[31] ,
    \Using_BitField.mem_mask0_reg[31]_0 ,
    \Using_BitField.mem_mask0_reg[11] ,
    \Using_BitField.mem_mask0_reg[11]_0 ,
    B,
    \Using_BitField.mem_mask0_reg[21] ,
    \Using_FPGA.Native_i_2__32 ,
    \Using_FPGA.Native_i_2__32_0 ,
    \Using_FPGA.Native_i_2__32_1 ,
    \Using_FPGA.Native_i_2__32_2 ,
    \Using_FPGA.Native_i_2__32_3 ,
    \Using_BitField.mem_mask0_reg[11]_1 ,
    \Using_BitField.mem_mask0_reg[21]_0 );
  output \Using_FPGA.Native ;
  output [0:0]A;
  output \Using_FPGA.Native_0 ;
  output [2:0]\Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  output \Using_FPGA.Native_3 ;
  output \Using_FPGA.Native_4 ;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input I3_7;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_8;
  input BitField_Insert;
  input \Using_BitField.mem_mask0_reg[31] ;
  input \Using_BitField.mem_mask0_reg[31]_0 ;
  input \Using_BitField.mem_mask0_reg[11] ;
  input \Using_BitField.mem_mask0_reg[11]_0 ;
  input [0:0]B;
  input \Using_BitField.mem_mask0_reg[21] ;
  input \Using_FPGA.Native_i_2__32 ;
  input \Using_FPGA.Native_i_2__32_0 ;
  input \Using_FPGA.Native_i_2__32_1 ;
  input \Using_FPGA.Native_i_2__32_2 ;
  input \Using_FPGA.Native_i_2__32_3 ;
  input \Using_BitField.mem_mask0_reg[11]_1 ;
  input \Using_BitField.mem_mask0_reg[21]_0 ;

  wire [0:0]A;
  wire [0:0]B;
  wire BitField_Insert;
  wire Clk;
  wire D_8;
  wire I3_7;
  wire [0:0]Reg1_Data;
  wire \Using_BitField.mem_mask0_reg[11] ;
  wire \Using_BitField.mem_mask0_reg[11]_0 ;
  wire \Using_BitField.mem_mask0_reg[11]_1 ;
  wire \Using_BitField.mem_mask0_reg[21] ;
  wire \Using_BitField.mem_mask0_reg[21]_0 ;
  wire \Using_BitField.mem_mask0_reg[31] ;
  wire \Using_BitField.mem_mask0_reg[31]_0 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [2:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_i_2__32 ;
  wire \Using_FPGA.Native_i_2__32_0 ;
  wire \Using_FPGA.Native_i_2__32_1 ;
  wire \Using_FPGA.Native_i_2__32_2 ;
  wire \Using_FPGA.Native_i_2__32_3 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  block_design_microblaze_0_0_MB_LUT6_2_883 \Both_PC_and_MSR.Op1_LUT6 
       (.I3_7(I3_7),
        .Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  block_design_microblaze_0_0_MB_FDRE_884 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_3 ),
        .\Using_FPGA.Native_i_2__32 (\Using_FPGA.Native_i_2__32 ),
        .\Using_FPGA.Native_i_2__32_0 (\Using_FPGA.Native_i_2__32_0 ),
        .\Using_FPGA.Native_i_2__32_1 (\Using_FPGA.Native_i_2__32_1 ),
        .\Using_FPGA.Native_i_2__32_2 (\Using_FPGA.Native_i_2__32_2 ),
        .\Using_FPGA.Native_i_2__32_3 (\Using_FPGA.Native_i_2__32_3 ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_FDRE_885 Op1_Reg_DFF
       (.A(A),
        .Clk(Clk),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_FDE_886 Op2_DFF
       (.B(B),
        .BitField_Insert(BitField_Insert),
        .Clk(Clk),
        .D_8(D_8),
        .\Using_BitField.mem_mask0_reg[11] (\Using_BitField.mem_mask0_reg[11] ),
        .\Using_BitField.mem_mask0_reg[11]_0 (\Using_BitField.mem_mask0_reg[11]_0 ),
        .\Using_BitField.mem_mask0_reg[11]_1 (\Using_BitField.mem_mask0_reg[11]_1 ),
        .\Using_BitField.mem_mask0_reg[21] (\Using_BitField.mem_mask0_reg[21] ),
        .\Using_BitField.mem_mask0_reg[21]_0 (\Using_BitField.mem_mask0_reg[21]_0 ),
        .\Using_BitField.mem_mask0_reg[31] (\Using_BitField.mem_mask0_reg[31] ),
        .\Using_BitField.mem_mask0_reg[31]_0 (\Using_BitField.mem_mask0_reg[31]_0 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_4 ),
        .of_PipeRun(of_PipeRun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module block_design_microblaze_0_0_Operand_Select_Bit_817
   (EX_Op1,
    A,
    B,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    I3_12,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_2,
    BitField_Insert,
    \Using_BitField.mem_mask0_reg[17] ,
    \Using_BitField.mem_mask0_reg[17]_0 ,
    \Using_BitField.mem_mask0_reg[17]_1 ,
    \Using_BitField.mem_mask0_reg[17]_2 ,
    \C_reg[28] ,
    \C_reg[28]_0 ,
    \C_reg[28]_1 ,
    \C_reg[28]_2 ,
    \C_reg[28]_3 );
  output EX_Op1;
  output [0:0]A;
  output [0:0]B;
  output [0:0]\Using_FPGA.Native ;
  output [0:0]\Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input I3_12;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_2;
  input BitField_Insert;
  input \Using_BitField.mem_mask0_reg[17] ;
  input \Using_BitField.mem_mask0_reg[17]_0 ;
  input \Using_BitField.mem_mask0_reg[17]_1 ;
  input \Using_BitField.mem_mask0_reg[17]_2 ;
  input \C_reg[28] ;
  input [0:0]\C_reg[28]_0 ;
  input \C_reg[28]_1 ;
  input \C_reg[28]_2 ;
  input \C_reg[28]_3 ;

  wire [0:0]A;
  wire [0:0]B;
  wire BitField_Insert;
  wire \C_reg[28] ;
  wire [0:0]\C_reg[28]_0 ;
  wire \C_reg[28]_1 ;
  wire \C_reg[28]_2 ;
  wire \C_reg[28]_3 ;
  wire Clk;
  wire D_2;
  wire EX_Op1;
  wire I3_12;
  wire [0:0]Reg1_Data;
  wire \Using_BitField.mem_mask0_reg[17] ;
  wire \Using_BitField.mem_mask0_reg[17]_0 ;
  wire \Using_BitField.mem_mask0_reg[17]_1 ;
  wire \Using_BitField.mem_mask0_reg[17]_2 ;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  block_design_microblaze_0_0_MB_LUT6_2_867 \Both_PC_and_MSR.Op1_LUT6 
       (.I3_12(I3_12),
        .Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  block_design_microblaze_0_0_MB_FDRE_868 Op1_DFF
       (.Clk(Clk),
        .EX_Op1(EX_Op1),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_FDRE_869 Op1_Reg_DFF
       (.A(A),
        .Clk(Clk),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_FDE_870 Op2_DFF
       (.BitField_Insert(BitField_Insert),
        .\C_reg[28] (\C_reg[28] ),
        .\C_reg[28]_0 (\C_reg[28]_0 ),
        .\C_reg[28]_1 (\C_reg[28]_1 ),
        .\C_reg[28]_2 (\C_reg[28]_2 ),
        .\C_reg[28]_3 (\C_reg[28]_3 ),
        .Clk(Clk),
        .D_2(D_2),
        .\Using_BitField.mem_mask0_reg[17] (\Using_BitField.mem_mask0_reg[17] ),
        .\Using_BitField.mem_mask0_reg[17]_0 (\Using_BitField.mem_mask0_reg[17]_0 ),
        .\Using_BitField.mem_mask0_reg[17]_1 (\Using_BitField.mem_mask0_reg[17]_1 ),
        .\Using_BitField.mem_mask0_reg[17]_2 (\Using_BitField.mem_mask0_reg[17]_2 ),
        .\Using_FPGA.Native_0 (B),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_2 ),
        .of_PipeRun(of_PipeRun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module block_design_microblaze_0_0_Operand_Select_Bit_819
   (\Using_FPGA.Native ,
    A,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.The_Compare[2].sel_reg_7 ,
    \Using_FPGA.Native_1 ,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    I3_11,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_1,
    \Using_FPGA.Native_2 ,
    Op1_Shift,
    EX_Op1,
    \Using_FPGA.Native_i_3__2 ,
    \Using_FPGA.Native_i_3__2_0 ,
    \Using_FPGA.Native_i_3__2_1 ,
    \Using_FPGA.Native_i_3__2_2 );
  output \Using_FPGA.Native ;
  output [0:0]A;
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.The_Compare[2].sel_reg_7 ;
  output \Using_FPGA.Native_1 ;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input I3_11;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_1;
  input \Using_FPGA.Native_2 ;
  input Op1_Shift;
  input EX_Op1;
  input \Using_FPGA.Native_i_3__2 ;
  input \Using_FPGA.Native_i_3__2_0 ;
  input \Using_FPGA.Native_i_3__2_1 ;
  input \Using_FPGA.Native_i_3__2_2 ;

  wire [0:0]A;
  wire Clk;
  wire D_1;
  wire EX_Op1;
  wire I3_11;
  wire Op1_Shift;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_i_3__2 ;
  wire \Using_FPGA.Native_i_3__2_0 ;
  wire \Using_FPGA.Native_i_3__2_1 ;
  wire \Using_FPGA.Native_i_3__2_2 ;
  wire \Using_FPGA.The_Compare[2].sel_reg_7 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  block_design_microblaze_0_0_MB_LUT6_2_859 \Both_PC_and_MSR.Op1_LUT6 
       (.I3_11(I3_11),
        .Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  block_design_microblaze_0_0_MB_FDRE_860 Op1_DFF
       (.Clk(Clk),
        .EX_Op1(EX_Op1),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_i_3__2 (\Using_FPGA.Native_i_3__2 ),
        .\Using_FPGA.Native_i_3__2_0 (\Using_FPGA.Native_i_3__2_0 ),
        .\Using_FPGA.Native_i_3__2_1 (\Using_FPGA.Native_i_3__2_1 ),
        .\Using_FPGA.Native_i_3__2_2 (\Using_FPGA.Native_i_3__2_2 ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_FDRE_861 Op1_Reg_DFF
       (.A(A),
        .Clk(Clk),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_FDE_862 Op2_DFF
       (.Clk(Clk),
        .D_1(D_1),
        .Op1_Shift(Op1_Shift),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.The_Compare[2].sel_reg_7 (\Using_FPGA.The_Compare[2].sel_reg_7 ),
        .of_PipeRun(of_PipeRun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module block_design_microblaze_0_0_Operand_Select_Bit_820
   (Op1_Shift,
    A,
    \Using_FPGA.Native ,
    S1_AXIS_TVALID_0,
    S1_AXIS_TLAST_0,
    \S1_AXIS_TDATA[31] ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    I3,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_0,
    S1_AXIS_TVALID,
    S0_AXIS_TVALID,
    S1_AXIS_TLAST,
    S0_AXIS_TLAST,
    S1_AXIS_TDATA,
    S0_AXIS_TDATA,
    void_bit,
    \C_reg[30] ,
    \C_reg[30]_0 ,
    \C_reg[30]_1 ,
    \C_reg[30]_2 ,
    \C_reg[27] ,
    \C_reg[27]_0 );
  output Op1_Shift;
  output [0:0]A;
  output \Using_FPGA.Native ;
  output S1_AXIS_TVALID_0;
  output S1_AXIS_TLAST_0;
  output [31:0]\S1_AXIS_TDATA[31] ;
  output [1:0]\Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input I3;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_0;
  input S1_AXIS_TVALID;
  input S0_AXIS_TVALID;
  input S1_AXIS_TLAST;
  input S0_AXIS_TLAST;
  input [31:0]S1_AXIS_TDATA;
  input [31:0]S0_AXIS_TDATA;
  input void_bit;
  input \C_reg[30] ;
  input \C_reg[30]_0 ;
  input \C_reg[30]_1 ;
  input \C_reg[30]_2 ;
  input [1:0]\C_reg[27] ;
  input \C_reg[27]_0 ;

  wire [0:0]A;
  wire [1:0]\C_reg[27] ;
  wire \C_reg[27]_0 ;
  wire \C_reg[30] ;
  wire \C_reg[30]_0 ;
  wire \C_reg[30]_1 ;
  wire \C_reg[30]_2 ;
  wire Clk;
  wire D_0;
  wire I3;
  wire Op1_Shift;
  wire [0:0]Reg1_Data;
  wire [31:0]S0_AXIS_TDATA;
  wire S0_AXIS_TLAST;
  wire S0_AXIS_TVALID;
  wire [31:0]S1_AXIS_TDATA;
  wire [31:0]\S1_AXIS_TDATA[31] ;
  wire S1_AXIS_TLAST;
  wire S1_AXIS_TLAST_0;
  wire S1_AXIS_TVALID;
  wire S1_AXIS_TVALID_0;
  wire \Using_FPGA.Native ;
  wire [1:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;
  wire void_bit;

  block_design_microblaze_0_0_MB_LUT6_2_855 \Both_PC_and_MSR.Op1_LUT6 
       (.I3(I3),
        .Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  block_design_microblaze_0_0_MB_FDRE_856 Op1_DFF
       (.Clk(Clk),
        .Op1_Shift(Op1_Shift),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_FDRE_857 Op1_Reg_DFF
       (.A(A),
        .Clk(Clk),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_FDE_858 Op2_DFF
       (.\C_reg[27] (\C_reg[27] ),
        .\C_reg[27]_0 (\C_reg[27]_0 ),
        .\C_reg[30] (\C_reg[30] ),
        .\C_reg[30]_0 (\C_reg[30]_0 ),
        .\C_reg[30]_1 (\C_reg[30]_1 ),
        .\C_reg[30]_2 (\C_reg[30]_2 ),
        .Clk(Clk),
        .D_0(D_0),
        .S0_AXIS_TDATA(S0_AXIS_TDATA),
        .S0_AXIS_TLAST(S0_AXIS_TLAST),
        .S0_AXIS_TVALID(S0_AXIS_TVALID),
        .S1_AXIS_TDATA(S1_AXIS_TDATA),
        .\S1_AXIS_TDATA[31] (\S1_AXIS_TDATA[31] ),
        .S1_AXIS_TLAST(S1_AXIS_TLAST),
        .S1_AXIS_TLAST_0(S1_AXIS_TLAST_0),
        .S1_AXIS_TVALID(S1_AXIS_TVALID),
        .S1_AXIS_TVALID_0(S1_AXIS_TVALID_0),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .of_PipeRun(of_PipeRun),
        .void_bit(void_bit));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module block_design_microblaze_0_0_Operand_Select_Bit__parameterized10
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    PC_OF,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_24,
    \Using_FPGA.Native_i_1__46 ,
    \Using_FPGA.Native_i_1__46_0 ,
    \Using_FPGA.Native_i_1__46_1 ,
    \Using_FPGA.Native_i_1__46_2 ,
    \Using_FPGA.Native_i_1__46_3 );
  output \Using_FPGA.Native ;
  output [0:0]\Using_FPGA.Native_0 ;
  output [0:0]\Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]PC_OF;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_24;
  input \Using_FPGA.Native_i_1__46 ;
  input \Using_FPGA.Native_i_1__46_0 ;
  input \Using_FPGA.Native_i_1__46_1 ;
  input \Using_FPGA.Native_i_1__46_2 ;
  input \Using_FPGA.Native_i_1__46_3 ;

  wire Clk;
  wire D_24;
  wire [0:0]PC_OF;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_i_1__46 ;
  wire \Using_FPGA.Native_i_1__46_0 ;
  wire \Using_FPGA.Native_i_1__46_1 ;
  wire \Using_FPGA.Native_i_1__46_2 ;
  wire \Using_FPGA.Native_i_1__46_3 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  block_design_microblaze_0_0_MB_LUT6_2_947 \Only_PC.Op1_LUT6 
       (.PC_OF(PC_OF),
        .Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  block_design_microblaze_0_0_MB_FDRE_948 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_i_1__46 (\Using_FPGA.Native_i_1__46 ),
        .\Using_FPGA.Native_i_1__46_0 (\Using_FPGA.Native_i_1__46_0 ),
        .\Using_FPGA.Native_i_1__46_1 (\Using_FPGA.Native_i_1__46_1 ),
        .\Using_FPGA.Native_i_1__46_2 (\Using_FPGA.Native_i_1__46_2 ),
        .\Using_FPGA.Native_i_1__46_3 (\Using_FPGA.Native_i_1__46_3 ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_FDRE_949 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_FDE_950 Op2_DFF
       (.Clk(Clk),
        .D_24(D_24),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .of_PipeRun(of_PipeRun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module block_design_microblaze_0_0_Operand_Select_Bit__parameterized10_803
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    S_2,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    PC_OF,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_23,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 );
  output \Using_FPGA.Native ;
  output [0:0]\Using_FPGA.Native_0 ;
  output [0:0]\Using_FPGA.Native_1 ;
  output S_2;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]PC_OF;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_23;
  input \Using_FPGA.Native_2 ;
  input [1:0]\Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_4 ;

  wire Clk;
  wire D_23;
  wire [0:0]PC_OF;
  wire [0:0]Reg1_Data;
  wire S_2;
  wire \Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire [1:0]\Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  block_design_microblaze_0_0_MB_LUT6_2_943 \Only_PC.Op1_LUT6 
       (.PC_OF(PC_OF),
        .Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  block_design_microblaze_0_0_MB_FDRE_944 Op1_DFF
       (.Clk(Clk),
        .S_2(S_2),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_3 ),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_4 ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_FDRE_945 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_FDE_946 Op2_DFF
       (.Clk(Clk),
        .D_23(D_23),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .of_PipeRun(of_PipeRun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module block_design_microblaze_0_0_Operand_Select_Bit__parameterized10_804
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    PC_OF,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_22);
  output \Using_FPGA.Native ;
  output [0:0]\Using_FPGA.Native_0 ;
  output [0:0]\Using_FPGA.Native_1 ;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]PC_OF;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_22;

  wire Clk;
  wire D_22;
  wire [0:0]PC_OF;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  block_design_microblaze_0_0_MB_LUT6_2_939 \Only_PC.Op1_LUT6 
       (.PC_OF(PC_OF),
        .Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  block_design_microblaze_0_0_MB_FDRE_940 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_FDRE_941 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_FDE_942 Op2_DFF
       (.Clk(Clk),
        .D_22(D_22),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .of_PipeRun(of_PipeRun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module block_design_microblaze_0_0_Operand_Select_Bit__parameterized10_805
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    PC_OF,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_21);
  output \Using_FPGA.Native ;
  output [0:0]\Using_FPGA.Native_0 ;
  output [0:0]\Using_FPGA.Native_1 ;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]PC_OF;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_21;

  wire Clk;
  wire D_21;
  wire [0:0]PC_OF;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  block_design_microblaze_0_0_MB_LUT6_2_935 \Only_PC.Op1_LUT6 
       (.PC_OF(PC_OF),
        .Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  block_design_microblaze_0_0_MB_FDRE_936 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_FDRE_937 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_FDE_938 Op2_DFF
       (.Clk(Clk),
        .D_21(D_21),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .of_PipeRun(of_PipeRun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module block_design_microblaze_0_0_Operand_Select_Bit__parameterized10_806
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.The_Compare[2].sel_reg_1 ,
    \Using_FPGA.Native_2 ,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    PC_OF,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_20,
    B,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_i_1__45 ,
    \Using_FPGA.Native_i_1__45_0 ,
    \Using_FPGA.Native_i_1__45_1 ,
    \Using_FPGA.Native_i_1__45_2 ,
    \Using_FPGA.Native_i_1__45_3 );
  output \Using_FPGA.Native ;
  output [0:0]\Using_FPGA.Native_0 ;
  output [0:0]\Using_FPGA.Native_1 ;
  output \Using_FPGA.The_Compare[2].sel_reg_1 ;
  output \Using_FPGA.Native_2 ;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]PC_OF;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_20;
  input [0:0]B;
  input \Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_i_1__45 ;
  input \Using_FPGA.Native_i_1__45_0 ;
  input \Using_FPGA.Native_i_1__45_1 ;
  input \Using_FPGA.Native_i_1__45_2 ;
  input \Using_FPGA.Native_i_1__45_3 ;

  wire [0:0]B;
  wire Clk;
  wire D_20;
  wire [0:0]PC_OF;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_i_1__45 ;
  wire \Using_FPGA.Native_i_1__45_0 ;
  wire \Using_FPGA.Native_i_1__45_1 ;
  wire \Using_FPGA.Native_i_1__45_2 ;
  wire \Using_FPGA.Native_i_1__45_3 ;
  wire \Using_FPGA.The_Compare[2].sel_reg_1 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  block_design_microblaze_0_0_MB_LUT6_2_931 \Only_PC.Op1_LUT6 
       (.PC_OF(PC_OF),
        .Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  block_design_microblaze_0_0_MB_FDRE_932 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_i_1__45 (\Using_FPGA.Native_i_1__45 ),
        .\Using_FPGA.Native_i_1__45_0 (\Using_FPGA.Native_i_1__45_0 ),
        .\Using_FPGA.Native_i_1__45_1 (\Using_FPGA.Native_i_1__45_1 ),
        .\Using_FPGA.Native_i_1__45_2 (\Using_FPGA.Native_i_1__45_2 ),
        .\Using_FPGA.Native_i_1__45_3 (\Using_FPGA.Native_i_1__45_3 ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_FDRE_933 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_FDE_934 Op2_DFF
       (.B(B),
        .Clk(Clk),
        .D_20(D_20),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_3 ),
        .\Using_FPGA.The_Compare[2].sel_reg_1 (\Using_FPGA.The_Compare[2].sel_reg_1 ),
        .of_PipeRun(of_PipeRun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module block_design_microblaze_0_0_Operand_Select_Bit__parameterized10_807
   (\Using_FPGA.Native ,
    A,
    B,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    PC_OF,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_19);
  output \Using_FPGA.Native ;
  output [0:0]A;
  output [0:0]B;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]PC_OF;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_19;

  wire [0:0]A;
  wire [0:0]B;
  wire Clk;
  wire D_19;
  wire [0:0]PC_OF;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  block_design_microblaze_0_0_MB_LUT6_2_927 \Only_PC.Op1_LUT6 
       (.PC_OF(PC_OF),
        .Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  block_design_microblaze_0_0_MB_FDRE_928 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_FDRE_929 Op1_Reg_DFF
       (.A(A),
        .Clk(Clk),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_FDE_930 Op2_DFF
       (.B(B),
        .Clk(Clk),
        .D_19(D_19),
        .of_PipeRun(of_PipeRun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module block_design_microblaze_0_0_Operand_Select_Bit__parameterized10_811
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    PC_OF,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_33,
    \Using_FPGA.Native_i_6 ,
    \Using_FPGA.Native_i_6_0 ,
    \Using_FPGA.Native_i_6_1 ,
    \Using_FPGA.Native_i_6_2 ,
    \Using_FPGA.Native_i_6_3 ,
    Is_Equal,
    \Using_FPGA.Native_i_1__53 ,
    \Using_FPGA.Native_i_1__53_0 );
  output \Using_FPGA.Native ;
  output [0:0]\Using_FPGA.Native_0 ;
  output [0:0]\Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  output \Using_FPGA.Native_3 ;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]PC_OF;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_33;
  input \Using_FPGA.Native_i_6 ;
  input \Using_FPGA.Native_i_6_0 ;
  input \Using_FPGA.Native_i_6_1 ;
  input \Using_FPGA.Native_i_6_2 ;
  input \Using_FPGA.Native_i_6_3 ;
  input Is_Equal;
  input \Using_FPGA.Native_i_1__53 ;
  input \Using_FPGA.Native_i_1__53_0 ;

  wire Clk;
  wire D_33;
  wire Is_Equal;
  wire [0:0]PC_OF;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_i_1__53 ;
  wire \Using_FPGA.Native_i_1__53_0 ;
  wire \Using_FPGA.Native_i_6 ;
  wire \Using_FPGA.Native_i_6_0 ;
  wire \Using_FPGA.Native_i_6_1 ;
  wire \Using_FPGA.Native_i_6_2 ;
  wire \Using_FPGA.Native_i_6_3 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  block_design_microblaze_0_0_MB_LUT6_2_907 \Only_PC.Op1_LUT6 
       (.PC_OF(PC_OF),
        .Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  block_design_microblaze_0_0_MB_FDRE_908 Op1_DFF
       (.Clk(Clk),
        .Is_Equal(Is_Equal),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_3 ),
        .\Using_FPGA.Native_i_1__53 (\Using_FPGA.Native_i_1__53 ),
        .\Using_FPGA.Native_i_1__53_0 (\Using_FPGA.Native_i_1__53_0 ),
        .\Using_FPGA.Native_i_6 (\Using_FPGA.Native_i_6 ),
        .\Using_FPGA.Native_i_6_0 (\Using_FPGA.Native_i_6_0 ),
        .\Using_FPGA.Native_i_6_1 (\Using_FPGA.Native_i_6_1 ),
        .\Using_FPGA.Native_i_6_2 (\Using_FPGA.Native_i_6_2 ),
        .\Using_FPGA.Native_i_6_3 (\Using_FPGA.Native_i_6_3 ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_FDRE_909 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_FDE_910 Op2_DFF
       (.Clk(Clk),
        .D_33(D_33),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .of_PipeRun(of_PipeRun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module block_design_microblaze_0_0_Operand_Select_Bit__parameterized10_818
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.The_Compare[0].sel_reg ,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    PC_OF,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_32,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 );
  output \Using_FPGA.Native ;
  output [0:0]\Using_FPGA.Native_0 ;
  output [0:0]\Using_FPGA.Native_1 ;
  output \Using_FPGA.The_Compare[0].sel_reg ;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]PC_OF;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_32;
  input \Using_FPGA.Native_2 ;
  input [1:0]\Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_4 ;

  wire Clk;
  wire D_32;
  wire [0:0]PC_OF;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire [1:0]\Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.The_Compare[0].sel_reg ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  block_design_microblaze_0_0_MB_LUT6_2_863 \Only_PC.Op1_LUT6 
       (.PC_OF(PC_OF),
        .Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  block_design_microblaze_0_0_MB_FDRE_864 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_FDRE_865 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_FDE_866 Op2_DFF
       (.Clk(Clk),
        .D_32(D_32),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_3 ),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_4 ),
        .\Using_FPGA.The_Compare[0].sel_reg (\Using_FPGA.The_Compare[0].sel_reg ),
        .of_PipeRun(of_PipeRun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module block_design_microblaze_0_0_Operand_Select_Bit__parameterized10_821
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    PC_OF,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_31);
  output \Using_FPGA.Native ;
  output [0:0]\Using_FPGA.Native_0 ;
  output [0:0]\Using_FPGA.Native_1 ;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]PC_OF;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_31;

  wire Clk;
  wire D_31;
  wire [0:0]PC_OF;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  block_design_microblaze_0_0_MB_LUT6_2_851 \Only_PC.Op1_LUT6 
       (.PC_OF(PC_OF),
        .Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  block_design_microblaze_0_0_MB_FDRE_852 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_FDRE_853 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_FDE_854 Op2_DFF
       (.Clk(Clk),
        .D_31(D_31),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .of_PipeRun(of_PipeRun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module block_design_microblaze_0_0_Operand_Select_Bit__parameterized10_822
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    S_0,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    PC_OF,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_30,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_i_1__46 ,
    \Using_FPGA.Native_i_1__46_0 ,
    \Using_FPGA.Native_i_1__46_1 ,
    \Using_FPGA.Native_5 );
  output \Using_FPGA.Native ;
  output [0:0]\Using_FPGA.Native_0 ;
  output [0:0]\Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  output S_0;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]PC_OF;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_30;
  input \Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_4 ;
  input \Using_FPGA.Native_i_1__46 ;
  input \Using_FPGA.Native_i_1__46_0 ;
  input \Using_FPGA.Native_i_1__46_1 ;
  input [1:0]\Using_FPGA.Native_5 ;

  wire Clk;
  wire D_30;
  wire [0:0]PC_OF;
  wire [0:0]Reg1_Data;
  wire S_0;
  wire \Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire [1:0]\Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_i_1__46 ;
  wire \Using_FPGA.Native_i_1__46_0 ;
  wire \Using_FPGA.Native_i_1__46_1 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  block_design_microblaze_0_0_MB_LUT6_2_847 \Only_PC.Op1_LUT6 
       (.PC_OF(PC_OF),
        .Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  block_design_microblaze_0_0_MB_FDRE_848 Op1_DFF
       (.Clk(Clk),
        .S_0(S_0),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_3 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_4 ),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_5 (\Using_FPGA.Native_5 ),
        .\Using_FPGA.Native_i_1__46 (\Using_FPGA.Native_i_1__46 ),
        .\Using_FPGA.Native_i_1__46_0 (\Using_FPGA.Native_i_1__46_0 ),
        .\Using_FPGA.Native_i_1__46_1 (\Using_FPGA.Native_i_1__46_1 ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_FDRE_849 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_FDE_850 Op2_DFF
       (.Clk(Clk),
        .D_30(D_30),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .of_PipeRun(of_PipeRun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module block_design_microblaze_0_0_Operand_Select_Bit__parameterized10_823
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    S_10,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    PC_OF,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_29,
    \Using_FPGA.Native_2 );
  output \Using_FPGA.Native ;
  output [0:0]\Using_FPGA.Native_0 ;
  output [0:0]\Using_FPGA.Native_1 ;
  output S_10;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]PC_OF;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_29;
  input [4:0]\Using_FPGA.Native_2 ;

  wire Clk;
  wire D_29;
  wire [0:0]PC_OF;
  wire [0:0]Reg1_Data;
  wire S_10;
  wire \Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire [4:0]\Using_FPGA.Native_2 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  block_design_microblaze_0_0_MB_LUT6_2_843 \Only_PC.Op1_LUT6 
       (.PC_OF(PC_OF),
        .Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  block_design_microblaze_0_0_MB_FDRE_844 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_FDRE_845 Op1_Reg_DFF
       (.Clk(Clk),
        .S_10(S_10),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_FDE_846 Op2_DFF
       (.Clk(Clk),
        .D_29(D_29),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .of_PipeRun(of_PipeRun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module block_design_microblaze_0_0_Operand_Select_Bit__parameterized10_824
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.The_Compare[2].sel_reg ,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    PC_OF,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_28,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 );
  output \Using_FPGA.Native ;
  output [0:0]\Using_FPGA.Native_0 ;
  output [0:0]\Using_FPGA.Native_1 ;
  output \Using_FPGA.The_Compare[2].sel_reg ;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]PC_OF;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_28;
  input [0:0]\Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;

  wire Clk;
  wire D_28;
  wire [0:0]PC_OF;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire [0:0]\Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.The_Compare[2].sel_reg ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  block_design_microblaze_0_0_MB_LUT6_2_839 \Only_PC.Op1_LUT6 
       (.PC_OF(PC_OF),
        .Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  block_design_microblaze_0_0_MB_FDRE_840 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_FDRE_841 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_FDE_842 Op2_DFF
       (.Clk(Clk),
        .D_28(D_28),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_3 ),
        .\Using_FPGA.The_Compare[2].sel_reg (\Using_FPGA.The_Compare[2].sel_reg ),
        .of_PipeRun(of_PipeRun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module block_design_microblaze_0_0_Operand_Select_Bit__parameterized10_825
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    PC_OF,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_27);
  output \Using_FPGA.Native ;
  output [0:0]\Using_FPGA.Native_0 ;
  output [0:0]\Using_FPGA.Native_1 ;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]PC_OF;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_27;

  wire Clk;
  wire D_27;
  wire [0:0]PC_OF;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  block_design_microblaze_0_0_MB_LUT6_2_835 \Only_PC.Op1_LUT6 
       (.PC_OF(PC_OF),
        .Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  block_design_microblaze_0_0_MB_FDRE_836 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_FDRE_837 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_FDE_838 Op2_DFF
       (.Clk(Clk),
        .D_27(D_27),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .of_PipeRun(of_PipeRun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module block_design_microblaze_0_0_Operand_Select_Bit__parameterized10_826
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.The_Compare[0].sel_reg_3 ,
    \Using_FPGA.Native_2 ,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    PC_OF,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_26,
    \Using_FPGA.Native_i_6__0 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_i_6__0_0 ,
    \Using_FPGA.Native_i_6__0_1 ,
    \Using_FPGA.Native_i_6__0_2 ,
    Is_Equal);
  output \Using_FPGA.Native ;
  output [0:0]\Using_FPGA.Native_0 ;
  output [0:0]\Using_FPGA.Native_1 ;
  output \Using_FPGA.The_Compare[0].sel_reg_3 ;
  output \Using_FPGA.Native_2 ;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]PC_OF;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_26;
  input \Using_FPGA.Native_i_6__0 ;
  input [1:0]\Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_i_6__0_0 ;
  input \Using_FPGA.Native_i_6__0_1 ;
  input \Using_FPGA.Native_i_6__0_2 ;
  input Is_Equal;

  wire Clk;
  wire D_26;
  wire Is_Equal;
  wire [0:0]PC_OF;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire [1:0]\Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_i_6__0 ;
  wire \Using_FPGA.Native_i_6__0_0 ;
  wire \Using_FPGA.Native_i_6__0_1 ;
  wire \Using_FPGA.Native_i_6__0_2 ;
  wire \Using_FPGA.The_Compare[0].sel_reg_3 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  block_design_microblaze_0_0_MB_LUT6_2_831 \Only_PC.Op1_LUT6 
       (.PC_OF(PC_OF),
        .Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  block_design_microblaze_0_0_MB_FDRE_832 Op1_DFF
       (.Clk(Clk),
        .Is_Equal(Is_Equal),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_3 ),
        .\Using_FPGA.Native_i_6__0 (\Using_FPGA.Native_i_6__0 ),
        .\Using_FPGA.Native_i_6__0_0 (\Using_FPGA.Native_i_6__0_0 ),
        .\Using_FPGA.Native_i_6__0_1 (\Using_FPGA.Native_i_6__0_1 ),
        .\Using_FPGA.Native_i_6__0_2 (\Using_FPGA.Native_i_6__0_2 ),
        .\Using_FPGA.The_Compare[0].sel_reg_3 (\Using_FPGA.The_Compare[0].sel_reg_3 ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_FDRE_833 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_FDE_834 Op2_DFF
       (.Clk(Clk),
        .D_26(D_26),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .of_PipeRun(of_PipeRun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module block_design_microblaze_0_0_Operand_Select_Bit__parameterized10_827
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    PC_OF,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_25,
    \Using_FPGA.Native_i_4__0 ,
    \Using_FPGA.Native_i_4__0_0 );
  output \Using_FPGA.Native ;
  output [0:0]\Using_FPGA.Native_0 ;
  output [0:0]\Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]PC_OF;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_25;
  input \Using_FPGA.Native_i_4__0 ;
  input \Using_FPGA.Native_i_4__0_0 ;

  wire Clk;
  wire D_25;
  wire [0:0]PC_OF;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_i_4__0 ;
  wire \Using_FPGA.Native_i_4__0_0 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  block_design_microblaze_0_0_MB_LUT6_2 \Only_PC.Op1_LUT6 
       (.PC_OF(PC_OF),
        .Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  block_design_microblaze_0_0_MB_FDRE_828 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_i_4__0 (\Using_FPGA.Native_i_4__0 ),
        .\Using_FPGA.Native_i_4__0_0 (\Using_FPGA.Native_i_4__0_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_FDRE_829 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_FDE_830 Op2_DFF
       (.Clk(Clk),
        .D_25(D_25),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .of_PipeRun(of_PipeRun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module block_design_microblaze_0_0_Operand_Select_Bit__parameterized12
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    S,
    \Using_FPGA.Native_2 ,
    \instr_EX_i_reg[22] ,
    \Using_FPGA.Native_3 ,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    I3_15,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_34,
    \Using_FPGA.Native_4 ,
    compare_Instr,
    ex_mulhu_instr,
    \C_reg[31] ,
    \C_reg[31]_0 ,
    \C_reg[29] ,
    \C_reg[23] ,
    \C_reg[23]_0 ,
    \C_reg[31]_1 ,
    \C_reg[31]_2 ,
    \C_reg[31]_3 ,
    void_bit,
    \C_reg[23]_1 ,
    \C_reg[23]_2 ,
    \C_reg[23]_3 ,
    \C_reg[23]_4 );
  output \Using_FPGA.Native ;
  output [1:0]\Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  output S;
  output [2:0]\Using_FPGA.Native_2 ;
  output \instr_EX_i_reg[22] ;
  output \Using_FPGA.Native_3 ;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input I3_15;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_34;
  input \Using_FPGA.Native_4 ;
  input compare_Instr;
  input ex_mulhu_instr;
  input \C_reg[31] ;
  input \C_reg[31]_0 ;
  input \C_reg[29] ;
  input \C_reg[23] ;
  input \C_reg[23]_0 ;
  input \C_reg[31]_1 ;
  input \C_reg[31]_2 ;
  input \C_reg[31]_3 ;
  input void_bit;
  input \C_reg[23]_1 ;
  input \C_reg[23]_2 ;
  input \C_reg[23]_3 ;
  input \C_reg[23]_4 ;

  wire \C_reg[23] ;
  wire \C_reg[23]_0 ;
  wire \C_reg[23]_1 ;
  wire \C_reg[23]_2 ;
  wire \C_reg[23]_3 ;
  wire \C_reg[23]_4 ;
  wire \C_reg[29] ;
  wire \C_reg[31] ;
  wire \C_reg[31]_0 ;
  wire \C_reg[31]_1 ;
  wire \C_reg[31]_2 ;
  wire \C_reg[31]_3 ;
  wire Clk;
  wire D_34;
  wire I3_15;
  wire [0:0]Reg1_Data;
  wire S;
  wire \Using_FPGA.Native ;
  wire [1:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [2:0]\Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire compare_Instr;
  wire [0:0]ex_Result;
  wire ex_mulhu_instr;
  wire \instr_EX_i_reg[22] ;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;
  wire void_bit;

  block_design_microblaze_0_0_MB_LUT6_2_951 \Both_PC_and_MSR.Op1_LUT6 
       (.I3_15(I3_15),
        .Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  block_design_microblaze_0_0_MB_FDRE_952 Op1_DFF
       (.\C_reg[23] (\C_reg[23] ),
        .\C_reg[23]_0 (\C_reg[23]_0 ),
        .\C_reg[23]_1 (\C_reg[23]_1 ),
        .\C_reg[23]_2 (\C_reg[23]_2 ),
        .\C_reg[23]_3 (\C_reg[23]_3 ),
        .\C_reg[23]_4 (\C_reg[23]_4 ),
        .\C_reg[29] (\C_reg[29] ),
        .\C_reg[31] (\C_reg[31] ),
        .\C_reg[31]_0 (\C_reg[31]_0 ),
        .\C_reg[31]_1 (\C_reg[31]_1 ),
        .\C_reg[31]_2 (\C_reg[31]_2 ),
        .\C_reg[31]_3 (\C_reg[31]_3 ),
        .Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .\instr_EX_i_reg[22] (\instr_EX_i_reg[22] ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset),
        .void_bit(void_bit));
  block_design_microblaze_0_0_MB_FDRE_953 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .ex_mulhu_instr(ex_mulhu_instr),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_FDE_954 Op2_DFF
       (.Clk(Clk),
        .D_34(D_34),
        .S(S),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_3 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_4 ),
        .compare_Instr(compare_Instr),
        .of_PipeRun(of_PipeRun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module block_design_microblaze_0_0_Operand_Select_Bit__parameterized2
   (\Using_FPGA.Native ,
    A,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    I3_13,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_3,
    \Using_BitField.mem_mask0_reg[25] ,
    B,
    BitField_Insert,
    \Using_BitField.mem_mask0_reg[25]_0 ,
    \Using_BitField.mem_mask0_reg[25]_1 ,
    \Using_BitField.mem_mask0_reg[24] ,
    \Using_BitField.mem_mask0_reg[24]_0 );
  output \Using_FPGA.Native ;
  output [0:0]A;
  output [0:0]\Using_FPGA.Native_0 ;
  output [1:0]\Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input I3_13;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_3;
  input \Using_BitField.mem_mask0_reg[25] ;
  input [1:0]B;
  input BitField_Insert;
  input \Using_BitField.mem_mask0_reg[25]_0 ;
  input \Using_BitField.mem_mask0_reg[25]_1 ;
  input \Using_BitField.mem_mask0_reg[24] ;
  input \Using_BitField.mem_mask0_reg[24]_0 ;

  wire [0:0]A;
  wire [1:0]B;
  wire BitField_Insert;
  wire Clk;
  wire D_3;
  wire I3_13;
  wire [0:0]Reg1_Data;
  wire \Using_BitField.mem_mask0_reg[24] ;
  wire \Using_BitField.mem_mask0_reg[24]_0 ;
  wire \Using_BitField.mem_mask0_reg[25] ;
  wire \Using_BitField.mem_mask0_reg[25]_0 ;
  wire \Using_BitField.mem_mask0_reg[25]_1 ;
  wire \Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [1:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  block_design_microblaze_0_0_MB_LUT6_2_871 \Both_PC_and_MSR.Op1_LUT6 
       (.I3_13(I3_13),
        .Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  block_design_microblaze_0_0_MB_FDRE_872 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_FDRE_873 Op1_Reg_DFF
       (.A(A),
        .Clk(Clk),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_FDE_874 Op2_DFF
       (.B(B),
        .BitField_Insert(BitField_Insert),
        .Clk(Clk),
        .D_3(D_3),
        .\Using_BitField.mem_mask0_reg[24] (\Using_BitField.mem_mask0_reg[24] ),
        .\Using_BitField.mem_mask0_reg[24]_0 (\Using_BitField.mem_mask0_reg[24]_0 ),
        .\Using_BitField.mem_mask0_reg[25] (\Using_BitField.mem_mask0_reg[25] ),
        .\Using_BitField.mem_mask0_reg[25]_0 (\Using_BitField.mem_mask0_reg[25]_0 ),
        .\Using_BitField.mem_mask0_reg[25]_1 (\Using_BitField.mem_mask0_reg[25]_1 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_2 ),
        .of_PipeRun(of_PipeRun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module block_design_microblaze_0_0_Operand_Select_Bit__parameterized4
   (\Using_FPGA.Native ,
    A,
    B,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    S_8,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    I3_14,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_4,
    \Using_BitField.mem_mask0_reg[30] ,
    \Using_BitField.mem_mask0_reg[30]_0 ,
    \Using_BitField.mem_mask0_reg[30]_1 ,
    BitField_Insert,
    \Using_BitField.mem_mask0_reg[30]_2 ,
    \Using_FPGA.Native_i_2__31 ,
    \Using_FPGA.Native_i_2__31_0 ,
    \Using_FPGA.Native_i_2__31_1 ,
    \Using_FPGA.Native_i_2__31_2 ,
    \Using_BitField.mem_mask0_reg[30]_3 ,
    \Using_BitField.mem_mask0_reg[30]_4 );
  output \Using_FPGA.Native ;
  output [0:0]A;
  output [0:0]B;
  output [0:0]\Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  output S_8;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input I3_14;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_4;
  input \Using_BitField.mem_mask0_reg[30] ;
  input \Using_BitField.mem_mask0_reg[30]_0 ;
  input \Using_BitField.mem_mask0_reg[30]_1 ;
  input BitField_Insert;
  input [1:0]\Using_BitField.mem_mask0_reg[30]_2 ;
  input \Using_FPGA.Native_i_2__31 ;
  input \Using_FPGA.Native_i_2__31_0 ;
  input \Using_FPGA.Native_i_2__31_1 ;
  input \Using_FPGA.Native_i_2__31_2 ;
  input \Using_BitField.mem_mask0_reg[30]_3 ;
  input \Using_BitField.mem_mask0_reg[30]_4 ;

  wire [0:0]A;
  wire [0:0]B;
  wire BitField_Insert;
  wire Clk;
  wire D_4;
  wire I3_14;
  wire [0:0]Reg1_Data;
  wire S_8;
  wire \Using_BitField.mem_mask0_reg[30] ;
  wire \Using_BitField.mem_mask0_reg[30]_0 ;
  wire \Using_BitField.mem_mask0_reg[30]_1 ;
  wire [1:0]\Using_BitField.mem_mask0_reg[30]_2 ;
  wire \Using_BitField.mem_mask0_reg[30]_3 ;
  wire \Using_BitField.mem_mask0_reg[30]_4 ;
  wire \Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_i_2__31 ;
  wire \Using_FPGA.Native_i_2__31_0 ;
  wire \Using_FPGA.Native_i_2__31_1 ;
  wire \Using_FPGA.Native_i_2__31_2 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  block_design_microblaze_0_0_MB_LUT6_2_875 \Both_PC_and_MSR.Op1_LUT6 
       (.I3_14(I3_14),
        .Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  block_design_microblaze_0_0_MB_FDRE_876 Op1_DFF
       (.B(B),
        .Clk(Clk),
        .S_8(S_8),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_2 (\Using_BitField.mem_mask0_reg[30]_2 ),
        .\Using_FPGA.Native_i_2__31 (\Using_FPGA.Native_i_2__31 ),
        .\Using_FPGA.Native_i_2__31_0 (\Using_FPGA.Native_i_2__31_0 ),
        .\Using_FPGA.Native_i_2__31_1 (\Using_FPGA.Native_i_2__31_1 ),
        .\Using_FPGA.Native_i_2__31_2 (\Using_FPGA.Native_i_2__31_2 ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_FDRE_877 Op1_Reg_DFF
       (.A(A),
        .Clk(Clk),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_FDE_878 Op2_DFF
       (.B(B),
        .BitField_Insert(BitField_Insert),
        .Clk(Clk),
        .D_4(D_4),
        .\Using_BitField.mem_mask0_reg[30] (\Using_BitField.mem_mask0_reg[30] ),
        .\Using_BitField.mem_mask0_reg[30]_0 (\Using_BitField.mem_mask0_reg[30]_0 ),
        .\Using_BitField.mem_mask0_reg[30]_1 (\Using_BitField.mem_mask0_reg[30]_1 ),
        .\Using_BitField.mem_mask0_reg[30]_2 (\Using_BitField.mem_mask0_reg[30]_2 ),
        .\Using_BitField.mem_mask0_reg[30]_3 (\Using_BitField.mem_mask0_reg[30]_3 ),
        .\Using_BitField.mem_mask0_reg[30]_4 (\Using_BitField.mem_mask0_reg[30]_4 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .of_PipeRun(of_PipeRun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module block_design_microblaze_0_0_Operand_Select_Bit__parameterized6
   (\Using_FPGA.Native ,
    A,
    B,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    I3_5,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_6);
  output \Using_FPGA.Native ;
  output [0:0]A;
  output [0:0]B;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input I3_5;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_6;

  wire [0:0]A;
  wire [0:0]B;
  wire Clk;
  wire D_6;
  wire I3_5;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  block_design_microblaze_0_0_MB_LUT6_2_879 \Both_PC_and_MSR.Op1_LUT6 
       (.I3_5(I3_5),
        .Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  block_design_microblaze_0_0_MB_FDRE_880 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_FDRE_881 Op1_Reg_DFF
       (.A(A),
        .Clk(Clk),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_FDE_882 Op2_DFF
       (.B(B),
        .Clk(Clk),
        .D_6(D_6),
        .of_PipeRun(of_PipeRun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module block_design_microblaze_0_0_Operand_Select_Bit__parameterized8
   (\Using_FPGA.Native ,
    A,
    B,
    Sext,
    \Using_FPGA.The_Compare[0].sel_reg_6 ,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    PC_OF,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_18,
    sext16,
    \Using_FPGA.Native_0 ,
    sext8,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 );
  output \Using_FPGA.Native ;
  output [0:0]A;
  output [0:0]B;
  output Sext;
  output \Using_FPGA.The_Compare[0].sel_reg_6 ;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]PC_OF;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_18;
  input sext16;
  input \Using_FPGA.Native_0 ;
  input sext8;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input [1:0]\Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_4 ;

  wire [0:0]A;
  wire [0:0]B;
  wire Clk;
  wire D_18;
  wire [0:0]PC_OF;
  wire [0:0]Reg1_Data;
  wire Sext;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire [1:0]\Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.The_Compare[0].sel_reg_6 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sext16;
  wire sext8;
  wire sync_reset;

  block_design_microblaze_0_0_MB_LUT6_2_923 \Only_PC.Op1_LUT6 
       (.PC_OF(PC_OF),
        .Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  block_design_microblaze_0_0_MB_FDRE_924 Op1_DFF
       (.B(B),
        .Clk(Clk),
        .Sext(Sext),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_3 ),
        .\Using_FPGA.Native_5 (\Using_FPGA.Native_4 ),
        .\Using_FPGA.The_Compare[0].sel_reg_6 (\Using_FPGA.The_Compare[0].sel_reg_6 ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sext16(sext16),
        .sext8(sext8),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_FDRE_925 Op1_Reg_DFF
       (.A(A),
        .Clk(Clk),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_FDE_926 Op2_DFF
       (.B(B),
        .Clk(Clk),
        .D_18(D_18),
        .of_PipeRun(of_PipeRun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module block_design_microblaze_0_0_Operand_Select_Bit__parameterized8_808
   (\Using_FPGA.Native ,
    A,
    B,
    \Using_FPGA.Native_0 ,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    PC_OF,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_17,
    \Using_FPGA.Native_i_2__31 ,
    \Using_FPGA.Native_i_2__31_0 );
  output \Using_FPGA.Native ;
  output [0:0]A;
  output [0:0]B;
  output \Using_FPGA.Native_0 ;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]PC_OF;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_17;
  input \Using_FPGA.Native_i_2__31 ;
  input \Using_FPGA.Native_i_2__31_0 ;

  wire [0:0]A;
  wire [0:0]B;
  wire Clk;
  wire D_17;
  wire [0:0]PC_OF;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_i_2__31 ;
  wire \Using_FPGA.Native_i_2__31_0 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  block_design_microblaze_0_0_MB_LUT6_2_919 \Only_PC.Op1_LUT6 
       (.PC_OF(PC_OF),
        .Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  block_design_microblaze_0_0_MB_FDRE_920 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_i_2__31 (\Using_FPGA.Native_i_2__31 ),
        .\Using_FPGA.Native_i_2__31_0 (\Using_FPGA.Native_i_2__31_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_FDRE_921 Op1_Reg_DFF
       (.A(A),
        .Clk(Clk),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_FDE_922 Op2_DFF
       (.B(B),
        .Clk(Clk),
        .D_17(D_17),
        .of_PipeRun(of_PipeRun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module block_design_microblaze_0_0_Operand_Select_Bit__parameterized8_809
   (\Using_FPGA.Native ,
    A,
    B,
    \Using_FPGA.Native_0 ,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    PC_OF,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_16,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Logic_Res,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_i_1__46 ,
    \Using_FPGA.Native_i_1__46_0 ,
    \Using_FPGA.Native_i_1__46_1 ,
    \Using_FPGA.Native_i_1__46_2 ,
    \Using_FPGA.Native_i_1__46_3 );
  output \Using_FPGA.Native ;
  output [0:0]A;
  output [0:0]B;
  output \Using_FPGA.Native_0 ;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]PC_OF;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_16;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Logic_Res;
  input \Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_4 ;
  input \Using_FPGA.Native_i_1__46 ;
  input \Using_FPGA.Native_i_1__46_0 ;
  input \Using_FPGA.Native_i_1__46_1 ;
  input \Using_FPGA.Native_i_1__46_2 ;
  input \Using_FPGA.Native_i_1__46_3 ;

  wire [0:0]A;
  wire [0:0]B;
  wire Clk;
  wire D_16;
  wire [0:0]PC_OF;
  wire [0:0]Reg1_Data;
  wire Shift_Logic_Res;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_i_1__46 ;
  wire \Using_FPGA.Native_i_1__46_0 ;
  wire \Using_FPGA.Native_i_1__46_1 ;
  wire \Using_FPGA.Native_i_1__46_2 ;
  wire \Using_FPGA.Native_i_1__46_3 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  block_design_microblaze_0_0_MB_LUT6_2_915 \Only_PC.Op1_LUT6 
       (.PC_OF(PC_OF),
        .Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  block_design_microblaze_0_0_MB_FDRE_916 Op1_DFF
       (.Clk(Clk),
        .Shift_Logic_Res(Shift_Logic_Res),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_3 ),
        .\Using_FPGA.Native_5 (\Using_FPGA.Native_4 ),
        .\Using_FPGA.Native_i_1__46_0 (\Using_FPGA.Native_i_1__46 ),
        .\Using_FPGA.Native_i_1__46_1 (\Using_FPGA.Native_i_1__46_0 ),
        .\Using_FPGA.Native_i_1__46_2 (\Using_FPGA.Native_i_1__46_1 ),
        .\Using_FPGA.Native_i_1__46_3 (\Using_FPGA.Native_i_1__46_2 ),
        .\Using_FPGA.Native_i_1__46_4 (\Using_FPGA.Native_i_1__46_3 ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_FDRE_917 Op1_Reg_DFF
       (.A(A),
        .Clk(Clk),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_FDE_918 Op2_DFF
       (.B(B),
        .Clk(Clk),
        .D_16(D_16),
        .of_PipeRun(of_PipeRun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module block_design_microblaze_0_0_Operand_Select_Bit__parameterized8_810
   (\Using_FPGA.Native ,
    A,
    B,
    I0,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    PC_OF,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_15,
    \Using_FPGA.Native_0 ,
    PCMP_Instr2_out,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_i_1__53 ,
    \Using_FPGA.Native_i_1__53_0 ,
    \Using_FPGA.Native_i_1__53_1 ,
    \Using_FPGA.Native_i_1__53_2 ,
    \Using_FPGA.Native_i_1__53_3 );
  output \Using_FPGA.Native ;
  output [0:0]A;
  output [0:0]B;
  output I0;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]PC_OF;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_15;
  input \Using_FPGA.Native_0 ;
  input PCMP_Instr2_out;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_i_1__53 ;
  input \Using_FPGA.Native_i_1__53_0 ;
  input \Using_FPGA.Native_i_1__53_1 ;
  input \Using_FPGA.Native_i_1__53_2 ;
  input \Using_FPGA.Native_i_1__53_3 ;

  wire [0:0]A;
  wire [0:0]B;
  wire Clk;
  wire D_15;
  wire I0;
  wire PCMP_Instr2_out;
  wire [0:0]PC_OF;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_i_1__53 ;
  wire \Using_FPGA.Native_i_1__53_0 ;
  wire \Using_FPGA.Native_i_1__53_1 ;
  wire \Using_FPGA.Native_i_1__53_2 ;
  wire \Using_FPGA.Native_i_1__53_3 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  block_design_microblaze_0_0_MB_LUT6_2_911 \Only_PC.Op1_LUT6 
       (.PC_OF(PC_OF),
        .Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  block_design_microblaze_0_0_MB_FDRE_912 Op1_DFF
       (.Clk(Clk),
        .I0(I0),
        .PCMP_Instr2_out(PCMP_Instr2_out),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_3 ),
        .\Using_FPGA.Native_i_1__53_0 (\Using_FPGA.Native_i_1__53 ),
        .\Using_FPGA.Native_i_1__53_1 (\Using_FPGA.Native_i_1__53_0 ),
        .\Using_FPGA.Native_i_1__53_2 (\Using_FPGA.Native_i_1__53_1 ),
        .\Using_FPGA.Native_i_1__53_3 (\Using_FPGA.Native_i_1__53_2 ),
        .\Using_FPGA.Native_i_1__53_4 (\Using_FPGA.Native_i_1__53_3 ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_FDRE_913 Op1_Reg_DFF
       (.A(A),
        .Clk(Clk),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_FDE_914 Op2_DFF
       (.B(B),
        .Clk(Clk),
        .D_15(D_15),
        .of_PipeRun(of_PipeRun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module block_design_microblaze_0_0_Operand_Select_Bit__parameterized8_812
   (\Using_FPGA.Native ,
    A,
    B,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    PC_OF,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_14);
  output \Using_FPGA.Native ;
  output [0:0]A;
  output [0:0]B;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]PC_OF;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_14;

  wire [0:0]A;
  wire [0:0]B;
  wire Clk;
  wire D_14;
  wire [0:0]PC_OF;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  block_design_microblaze_0_0_MB_LUT6_2_903 \Only_PC.Op1_LUT6 
       (.PC_OF(PC_OF),
        .Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  block_design_microblaze_0_0_MB_FDRE_904 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_FDRE_905 Op1_Reg_DFF
       (.A(A),
        .Clk(Clk),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_FDE_906 Op2_DFF
       (.B(B),
        .Clk(Clk),
        .D_14(D_14),
        .of_PipeRun(of_PipeRun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module block_design_microblaze_0_0_Operand_Select_Bit__parameterized8_813
   (\Using_FPGA.Native ,
    A,
    \Using_FPGA.Native_0 ,
    D,
    \Using_FPGA.Native_1 ,
    S_5,
    \Using_FPGA.Native_2 ,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    PC_OF,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_13,
    \Using_BitField.mem_mask1_reg[28] ,
    \Using_BitField.mem_mask1_reg[28]_0 ,
    BitField_Extract,
    \Using_BitField.mem_mask1_reg[28]_1 ,
    \Using_BitField.mem_mask1_reg[28]_2 ,
    \Using_BitField.mem_mask0_reg[29] ,
    BitField_Insert,
    \Using_BitField.mem_mask0_reg[14] ,
    \Using_FPGA.Native_3 ,
    B,
    \Using_FPGA.Native_4 ,
    \Using_BitField.mem_mask0_reg[1] ,
    \Using_BitField.mem_mask0_reg[3] ,
    \Using_BitField.mem_mask0_reg[7] ,
    \Using_BitField.mem_mask0_reg[14]_0 ,
    \Using_BitField.mem_mask0_reg[1]_0 ,
    \Using_BitField.mem_mask0_reg[10] );
  output \Using_FPGA.Native ;
  output [0:0]A;
  output \Using_FPGA.Native_0 ;
  output [27:0]D;
  output [14:0]\Using_FPGA.Native_1 ;
  output S_5;
  output \Using_FPGA.Native_2 ;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]PC_OF;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_13;
  input \Using_BitField.mem_mask1_reg[28] ;
  input \Using_BitField.mem_mask1_reg[28]_0 ;
  input BitField_Extract;
  input \Using_BitField.mem_mask1_reg[28]_1 ;
  input \Using_BitField.mem_mask1_reg[28]_2 ;
  input \Using_BitField.mem_mask0_reg[29] ;
  input BitField_Insert;
  input \Using_BitField.mem_mask0_reg[14] ;
  input \Using_FPGA.Native_3 ;
  input [4:0]B;
  input \Using_FPGA.Native_4 ;
  input \Using_BitField.mem_mask0_reg[1] ;
  input \Using_BitField.mem_mask0_reg[3] ;
  input \Using_BitField.mem_mask0_reg[7] ;
  input \Using_BitField.mem_mask0_reg[14]_0 ;
  input \Using_BitField.mem_mask0_reg[1]_0 ;
  input \Using_BitField.mem_mask0_reg[10] ;

  wire [0:0]A;
  wire [4:0]B;
  wire BitField_Extract;
  wire BitField_Insert;
  wire Clk;
  wire [27:0]D;
  wire D_13;
  wire [0:0]PC_OF;
  wire [0:0]Reg1_Data;
  wire S_5;
  wire \Using_BitField.mem_mask0_reg[10] ;
  wire \Using_BitField.mem_mask0_reg[14] ;
  wire \Using_BitField.mem_mask0_reg[14]_0 ;
  wire \Using_BitField.mem_mask0_reg[1] ;
  wire \Using_BitField.mem_mask0_reg[1]_0 ;
  wire \Using_BitField.mem_mask0_reg[29] ;
  wire \Using_BitField.mem_mask0_reg[3] ;
  wire \Using_BitField.mem_mask0_reg[7] ;
  wire \Using_BitField.mem_mask1_reg[28] ;
  wire \Using_BitField.mem_mask1_reg[28]_0 ;
  wire \Using_BitField.mem_mask1_reg[28]_1 ;
  wire \Using_BitField.mem_mask1_reg[28]_2 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [14:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  block_design_microblaze_0_0_MB_LUT6_2_899 \Only_PC.Op1_LUT6 
       (.PC_OF(PC_OF),
        .Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  block_design_microblaze_0_0_MB_FDRE_900 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_FDRE_901 Op1_Reg_DFF
       (.A(A),
        .Clk(Clk),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_FDE_902 Op2_DFF
       (.B(B),
        .BitField_Extract(BitField_Extract),
        .BitField_Insert(BitField_Insert),
        .Clk(Clk),
        .D(D),
        .D_13(D_13),
        .S_5(S_5),
        .\Using_BitField.mem_mask0_reg[10] (\Using_BitField.mem_mask0_reg[10] ),
        .\Using_BitField.mem_mask0_reg[14] (\Using_BitField.mem_mask0_reg[14] ),
        .\Using_BitField.mem_mask0_reg[14]_0 (\Using_BitField.mem_mask0_reg[14]_0 ),
        .\Using_BitField.mem_mask0_reg[1] (\Using_BitField.mem_mask0_reg[1] ),
        .\Using_BitField.mem_mask0_reg[1]_0 (\Using_BitField.mem_mask0_reg[1]_0 ),
        .\Using_BitField.mem_mask0_reg[29] (\Using_BitField.mem_mask0_reg[29] ),
        .\Using_BitField.mem_mask0_reg[3] (\Using_BitField.mem_mask0_reg[3] ),
        .\Using_BitField.mem_mask0_reg[7] (\Using_BitField.mem_mask0_reg[7] ),
        .\Using_BitField.mem_mask1_reg[28] (\Using_BitField.mem_mask1_reg[28] ),
        .\Using_BitField.mem_mask1_reg[28]_0 (\Using_BitField.mem_mask1_reg[28]_0 ),
        .\Using_BitField.mem_mask1_reg[28]_1 (\Using_BitField.mem_mask1_reg[28]_1 ),
        .\Using_BitField.mem_mask1_reg[28]_2 (\Using_BitField.mem_mask1_reg[28]_2 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_3 ),
        .\Using_FPGA.Native_5 (\Using_FPGA.Native_4 ),
        .of_PipeRun(of_PipeRun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module block_design_microblaze_0_0_Operand_Select_Bit__parameterized8_814
   (\Using_FPGA.Native ,
    A,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    D,
    \Using_FPGA.The_Compare[2].sel_reg_4 ,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    PC_OF,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_12,
    B,
    \Using_BitField.mem_mask1_reg[27] ,
    BitField_Insert,
    \Using_BitField.mem_mask0_reg[12] ,
    \Using_BitField.mem_mask0_reg[22] ,
    \Using_BitField.mem_mask1_reg[27]_0 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    \Using_FPGA.Native_7 ,
    \Using_FPGA.Native_i_1__45 ,
    \Using_FPGA.Native_i_1__45_0 ,
    \Using_FPGA.Native_i_1__45_1 ,
    \Using_FPGA.Native_i_1__45_2 ,
    \Using_FPGA.Native_i_1__45_3 ,
    \Using_BitField.mem_mask1_reg[27]_1 ,
    BitField_Extract,
    \Using_BitField.mem_mask1_reg[27]_2 ,
    Shifted,
    \Using_FPGA.Native_i_3__2 ,
    \Using_FPGA.Native_i_3__2_0 ,
    \Using_FPGA.Native_i_3__2_1 ,
    \Using_FPGA.Native_i_3__2_2 ,
    \Using_FPGA.Native_i_3__2_3 ,
    \Using_BitField.mem_mask0_reg[2] );
  output \Using_FPGA.Native ;
  output [0:0]A;
  output \Using_FPGA.Native_0 ;
  output [4:0]\Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  output [0:0]D;
  output \Using_FPGA.The_Compare[2].sel_reg_4 ;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]PC_OF;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_12;
  input [2:0]B;
  input \Using_BitField.mem_mask1_reg[27] ;
  input BitField_Insert;
  input \Using_BitField.mem_mask0_reg[12] ;
  input \Using_BitField.mem_mask0_reg[22] ;
  input \Using_BitField.mem_mask1_reg[27]_0 ;
  input \Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_4 ;
  input \Using_FPGA.Native_5 ;
  input \Using_FPGA.Native_6 ;
  input \Using_FPGA.Native_7 ;
  input \Using_FPGA.Native_i_1__45 ;
  input \Using_FPGA.Native_i_1__45_0 ;
  input \Using_FPGA.Native_i_1__45_1 ;
  input \Using_FPGA.Native_i_1__45_2 ;
  input \Using_FPGA.Native_i_1__45_3 ;
  input \Using_BitField.mem_mask1_reg[27]_1 ;
  input BitField_Extract;
  input \Using_BitField.mem_mask1_reg[27]_2 ;
  input Shifted;
  input \Using_FPGA.Native_i_3__2 ;
  input \Using_FPGA.Native_i_3__2_0 ;
  input \Using_FPGA.Native_i_3__2_1 ;
  input \Using_FPGA.Native_i_3__2_2 ;
  input \Using_FPGA.Native_i_3__2_3 ;
  input \Using_BitField.mem_mask0_reg[2] ;

  wire [0:0]A;
  wire [2:0]B;
  wire BitField_Extract;
  wire BitField_Insert;
  wire Clk;
  wire [0:0]D;
  wire D_12;
  wire [0:0]PC_OF;
  wire [0:0]Reg1_Data;
  wire Shifted;
  wire \Using_BitField.mem_mask0_reg[12] ;
  wire \Using_BitField.mem_mask0_reg[22] ;
  wire \Using_BitField.mem_mask0_reg[2] ;
  wire \Using_BitField.mem_mask1_reg[27] ;
  wire \Using_BitField.mem_mask1_reg[27]_0 ;
  wire \Using_BitField.mem_mask1_reg[27]_1 ;
  wire \Using_BitField.mem_mask1_reg[27]_2 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [4:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire \Using_FPGA.Native_i_1__45 ;
  wire \Using_FPGA.Native_i_1__45_0 ;
  wire \Using_FPGA.Native_i_1__45_1 ;
  wire \Using_FPGA.Native_i_1__45_2 ;
  wire \Using_FPGA.Native_i_1__45_3 ;
  wire \Using_FPGA.Native_i_3__2 ;
  wire \Using_FPGA.Native_i_3__2_0 ;
  wire \Using_FPGA.Native_i_3__2_1 ;
  wire \Using_FPGA.Native_i_3__2_2 ;
  wire \Using_FPGA.Native_i_3__2_3 ;
  wire \Using_FPGA.The_Compare[2].sel_reg_4 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  block_design_microblaze_0_0_MB_LUT6_2_895 \Only_PC.Op1_LUT6 
       (.PC_OF(PC_OF),
        .Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  block_design_microblaze_0_0_MB_FDRE_896 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_3 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_4 ),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_5 ),
        .\Using_FPGA.Native_5 (\Using_FPGA.Native_6 ),
        .\Using_FPGA.Native_6 (\Using_FPGA.Native_7 ),
        .\Using_FPGA.Native_i_1__45_0 (\Using_FPGA.Native_i_1__45 ),
        .\Using_FPGA.Native_i_1__45_1 (\Using_FPGA.Native_i_1__45_0 ),
        .\Using_FPGA.Native_i_1__45_2 (\Using_FPGA.Native_i_1__45_1 ),
        .\Using_FPGA.Native_i_1__45_3 (\Using_FPGA.Native_i_1__45_2 ),
        .\Using_FPGA.Native_i_1__45_4 (\Using_FPGA.Native_i_1__45_3 ),
        .\Using_FPGA.Native_i_3__2_0 (\Using_FPGA.Native_i_3__2 ),
        .\Using_FPGA.Native_i_3__2_1 (\Using_FPGA.Native_i_3__2_0 ),
        .\Using_FPGA.Native_i_3__2_2 (\Using_FPGA.Native_i_3__2_1 ),
        .\Using_FPGA.Native_i_3__2_3 (\Using_FPGA.Native_i_3__2_2 ),
        .\Using_FPGA.Native_i_3__2_4 (\Using_FPGA.Native_i_3__2_3 ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_FDRE_897 Op1_Reg_DFF
       (.A(A),
        .Clk(Clk),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_FDE_898 Op2_DFF
       (.B(B),
        .BitField_Extract(BitField_Extract),
        .BitField_Insert(BitField_Insert),
        .Clk(Clk),
        .D(D),
        .D_12(D_12),
        .Shifted(Shifted),
        .\Using_BitField.mem_mask0_reg[12] (\Using_BitField.mem_mask0_reg[12] ),
        .\Using_BitField.mem_mask0_reg[22] (\Using_BitField.mem_mask0_reg[22] ),
        .\Using_BitField.mem_mask0_reg[2] (\Using_BitField.mem_mask0_reg[2] ),
        .\Using_BitField.mem_mask1_reg[27] (\Using_BitField.mem_mask1_reg[27] ),
        .\Using_BitField.mem_mask1_reg[27]_0 (\Using_BitField.mem_mask1_reg[27]_0 ),
        .\Using_BitField.mem_mask1_reg[27]_1 (\Using_BitField.mem_mask1_reg[27]_1 ),
        .\Using_BitField.mem_mask1_reg[27]_2 (\Using_BitField.mem_mask1_reg[27]_2 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native ),
        .\Using_FPGA.The_Compare[2].sel_reg_4 (\Using_FPGA.The_Compare[2].sel_reg_4 ),
        .of_PipeRun(of_PipeRun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module block_design_microblaze_0_0_Operand_Select_Bit__parameterized8_815
   (Shifted,
    A,
    \Using_FPGA.Native ,
    D,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    PC_OF,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_11,
    \Using_BitField.mem_mask1_reg[26] ,
    \Using_BitField.mem_mask1_reg[26]_0 ,
    BitField_Extract,
    \Using_BitField.mem_mask1_reg[26]_1 ,
    \Using_BitField.mem_mask1_reg[26]_2 );
  output Shifted;
  output [0:0]A;
  output \Using_FPGA.Native ;
  output [0:0]D;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]PC_OF;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_11;
  input \Using_BitField.mem_mask1_reg[26] ;
  input \Using_BitField.mem_mask1_reg[26]_0 ;
  input BitField_Extract;
  input \Using_BitField.mem_mask1_reg[26]_1 ;
  input \Using_BitField.mem_mask1_reg[26]_2 ;

  wire [0:0]A;
  wire BitField_Extract;
  wire Clk;
  wire [0:0]D;
  wire D_11;
  wire [0:0]PC_OF;
  wire [0:0]Reg1_Data;
  wire Shifted;
  wire \Using_BitField.mem_mask1_reg[26] ;
  wire \Using_BitField.mem_mask1_reg[26]_0 ;
  wire \Using_BitField.mem_mask1_reg[26]_1 ;
  wire \Using_BitField.mem_mask1_reg[26]_2 ;
  wire \Using_FPGA.Native ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  block_design_microblaze_0_0_MB_LUT6_2_891 \Only_PC.Op1_LUT6 
       (.PC_OF(PC_OF),
        .Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  block_design_microblaze_0_0_MB_FDRE_892 Op1_DFF
       (.Clk(Clk),
        .Shifted(Shifted),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_FDRE_893 Op1_Reg_DFF
       (.A(A),
        .Clk(Clk),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_FDE_894 Op2_DFF
       (.BitField_Extract(BitField_Extract),
        .Clk(Clk),
        .D(D),
        .D_11(D_11),
        .\Using_BitField.mem_mask1_reg[26] (\Using_BitField.mem_mask1_reg[26] ),
        .\Using_BitField.mem_mask1_reg[26]_0 (\Using_BitField.mem_mask1_reg[26]_0 ),
        .\Using_BitField.mem_mask1_reg[26]_1 (\Using_BitField.mem_mask1_reg[26]_1 ),
        .\Using_BitField.mem_mask1_reg[26]_2 (\Using_BitField.mem_mask1_reg[26]_2 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun));
endmodule

module block_design_microblaze_0_0_PC_Bit
   (I3,
    PC_OF,
    LO,
    \Using_FPGA.Native ,
    PC_EX,
    opsel1_PC,
    Enable_Interrupt,
    Carry_Out,
    ALU_Result,
    jump,
    sync_reset,
    PC_Write,
    Clk,
    IReady,
    Buffer_Addr,
    OF_PipeRun,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output I3;
  output [0:0]PC_OF;
  output LO;
  output [0:0]\Using_FPGA.Native ;
  output [0:0]PC_EX;
  input opsel1_PC;
  input Enable_Interrupt;
  input Carry_Out;
  input [0:0]ALU_Result;
  input jump;
  input sync_reset;
  input PC_Write;
  input Clk;
  input IReady;
  input [2:0]Buffer_Addr;
  input OF_PipeRun;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ALU_Result;
  wire [2:0]Buffer_Addr;
  wire Carry_Out;
  wire Clk;
  wire Enable_Interrupt;
  wire I3;
  wire IReady;
  wire LO;
  wire OF_PipeRun;
  wire [0:0]PC_EX;
  wire [0:0]PC_OF;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native ;
  wire jump;
  wire lopt;
  wire lopt_1;
  wire \^lopt_2 ;
  wire opsel1_PC;
  wire pc_I;
  wire pc_Sum;
  wire sync_reset;
  wire xor_Sum;

  assign \^lopt_2  = lopt_3;
  assign lopt_2 = xor_Sum;
  block_design_microblaze_0_0_MB_MUXCY_XORCY_659 MUXCY_XOR_I
       (.Carry_Out(Carry_Out),
        .LO(LO),
        .O(pc_Sum),
        .S(xor_Sum),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(\^lopt_2 ));
  block_design_microblaze_0_0_MB_LUT4__parameterized33_660 NewPC_Mux
       (.ALU_Result(ALU_Result),
        .O(pc_Sum),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .jump(jump));
  block_design_microblaze_0_0_MB_FDE_661 PC_EX_DFF
       (.Clk(Clk),
        .OF_PipeRun(OF_PipeRun),
        .PC_EX(PC_EX),
        .PC_OF(PC_OF));
  block_design_microblaze_0_0_MB_SRL16E_662 PC_OF_Buffer
       (.Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .Enable_Interrupt(Enable_Interrupt),
        .I3(I3),
        .IReady(IReady),
        .PC_OF(PC_OF),
        .opsel1_PC(opsel1_PC),
        .pc_I(pc_I));
  block_design_microblaze_0_0_MB_FDRE_663 \Reset_DFF.PC_IF_DFF 
       (.Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .pc_I(pc_I),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_LUT4__parameterized31_664 SUM_I
       (.S(xor_Sum),
        .pc_I(pc_I));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module block_design_microblaze_0_0_PC_Bit_606
   (LO,
    \Using_FPGA.Native ,
    PC_OF,
    PC_EX,
    ALU_Result,
    jump,
    sync_reset,
    PC_Write,
    Clk,
    IReady,
    Buffer_Addr,
    OF_PipeRun,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output LO;
  output [0:0]\Using_FPGA.Native ;
  output [0:0]PC_OF;
  output [0:0]PC_EX;
  input [0:0]ALU_Result;
  input jump;
  input sync_reset;
  input PC_Write;
  input Clk;
  input IReady;
  input [2:0]Buffer_Addr;
  input OF_PipeRun;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire [0:0]ALU_Result;
  wire [2:0]Buffer_Addr;
  wire Clk;
  wire IReady;
  wire LO;
  wire OF_PipeRun;
  wire [0:0]PC_EX;
  wire [0:0]PC_OF;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native ;
  wire jump;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire pc_I;
  wire pc_Sum;
  wire sync_reset;
  wire xor_Sum;

  block_design_microblaze_0_0_MB_MUXCY_XORCY_653 MUXCY_XOR_I
       (.LO(LO),
        .O(pc_Sum),
        .S(xor_Sum),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_10(lopt_10),
        .lopt_11(lopt_11),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .lopt_9(lopt_9));
  block_design_microblaze_0_0_MB_LUT4__parameterized33_654 NewPC_Mux
       (.ALU_Result(ALU_Result),
        .O(pc_Sum),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .jump(jump));
  block_design_microblaze_0_0_MB_FDE_655 PC_EX_DFF
       (.Clk(Clk),
        .OF_PipeRun(OF_PipeRun),
        .PC_EX(PC_EX),
        .PC_OF(PC_OF));
  block_design_microblaze_0_0_MB_SRL16E_656 PC_OF_Buffer
       (.Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .IReady(IReady),
        .PC_OF(PC_OF),
        .pc_I(pc_I));
  block_design_microblaze_0_0_MB_FDRE_657 \Reset_DFF.PC_IF_DFF 
       (.Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .pc_I(pc_I),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_LUT4__parameterized31_658 SUM_I
       (.S(xor_Sum),
        .pc_I(pc_I));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module block_design_microblaze_0_0_PC_Bit__parameterized2
   (I3_3,
    PC_OF,
    \Using_FPGA.Native ,
    PC_EX,
    opsel1_PC,
    \Using_FPGA.Native_0 ,
    LO,
    ALU_Result,
    jump,
    sync_reset,
    PC_Write,
    Clk,
    IReady,
    Buffer_Addr,
    OF_PipeRun,
    lopt,
    lopt_1);
  output I3_3;
  output [0:0]PC_OF;
  output [0:0]\Using_FPGA.Native ;
  output [0:0]PC_EX;
  input opsel1_PC;
  input \Using_FPGA.Native_0 ;
  input LO;
  input [0:0]ALU_Result;
  input jump;
  input sync_reset;
  input PC_Write;
  input Clk;
  input IReady;
  input [2:0]Buffer_Addr;
  input OF_PipeRun;
  input lopt;
  output lopt_1;

  wire [0:0]ALU_Result;
  wire [2:0]Buffer_Addr;
  wire Clk;
  wire I3_3;
  wire IReady;
  wire LO;
  wire OF_PipeRun;
  wire [0:0]PC_EX;
  wire [0:0]PC_OF;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire jump;
  wire lopt;
  wire opsel1_PC;
  wire pc_I;
  wire pc_Sum;
  wire sync_reset;
  wire xor_Sum;

  assign lopt_1 = xor_Sum;
  block_design_microblaze_0_0_MB_MUXCY_XORCY_797 MUXCY_XOR_I
       (.LO(LO),
        .lopt(lopt),
        .pc_Sum(pc_Sum),
        .xor_Sum(xor_Sum));
  block_design_microblaze_0_0_MB_LUT4__parameterized33_798 NewPC_Mux
       (.ALU_Result(ALU_Result),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .jump(jump),
        .pc_Sum(pc_Sum));
  block_design_microblaze_0_0_MB_FDE_799 PC_EX_DFF
       (.Clk(Clk),
        .OF_PipeRun(OF_PipeRun),
        .PC_EX(PC_EX),
        .PC_OF(PC_OF));
  block_design_microblaze_0_0_MB_SRL16E_800 PC_OF_Buffer
       (.Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .I3_3(I3_3),
        .IReady(IReady),
        .PC_OF(PC_OF),
        .\Using_FPGA.Native (\Using_FPGA.Native_0 ),
        .opsel1_PC(opsel1_PC),
        .pc_I(pc_I));
  block_design_microblaze_0_0_MB_LUT4__parameterized31_801 SUM_I
       (.pc_I(pc_I),
        .xor_Sum(xor_Sum));
  block_design_microblaze_0_0_MB_FDSE_802 \Set_DFF.PC_IF_DFF 
       (.Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .pc_I(pc_I),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module block_design_microblaze_0_0_PC_Bit__parameterized2_584
   (Carry_Out,
    \Using_FPGA.Native ,
    PC_OF,
    PC_EX,
    LO,
    ALU_Result,
    jump,
    sync_reset,
    PC_Write,
    Clk,
    IReady,
    Buffer_Addr,
    OF_PipeRun,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output Carry_Out;
  output [0:0]\Using_FPGA.Native ;
  output [0:0]PC_OF;
  output [0:0]PC_EX;
  input LO;
  input [0:0]ALU_Result;
  input jump;
  input sync_reset;
  input PC_Write;
  input Clk;
  input IReady;
  input [2:0]Buffer_Addr;
  input OF_PipeRun;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ALU_Result;
  wire [2:0]Buffer_Addr;
  wire Carry_Out;
  wire Clk;
  wire IReady;
  wire LO;
  wire OF_PipeRun;
  wire [0:0]PC_EX;
  wire [0:0]PC_OF;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native ;
  wire jump;
  wire lopt;
  wire lopt_1;
  wire \^lopt_2 ;
  wire pc_I;
  wire pc_Sum;
  wire sync_reset;
  wire xor_Sum;

  assign \^lopt_2  = lopt_3;
  assign lopt_2 = xor_Sum;
  block_design_microblaze_0_0_MB_MUXCY_XORCY_791 MUXCY_XOR_I
       (.Carry_Out(Carry_Out),
        .LO(LO),
        .O(pc_Sum),
        .S(xor_Sum),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(\^lopt_2 ));
  block_design_microblaze_0_0_MB_LUT4__parameterized33_792 NewPC_Mux
       (.ALU_Result(ALU_Result),
        .O(pc_Sum),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .jump(jump));
  block_design_microblaze_0_0_MB_FDE_793 PC_EX_DFF
       (.Clk(Clk),
        .OF_PipeRun(OF_PipeRun),
        .PC_EX(PC_EX),
        .PC_OF(PC_OF));
  block_design_microblaze_0_0_MB_SRL16E_794 PC_OF_Buffer
       (.Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .IReady(IReady),
        .PC_OF(PC_OF),
        .pc_I(pc_I));
  block_design_microblaze_0_0_MB_LUT4__parameterized31_795 SUM_I
       (.S(xor_Sum),
        .pc_I(pc_I));
  block_design_microblaze_0_0_MB_FDSE_796 \Set_DFF.PC_IF_DFF 
       (.Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .pc_I(pc_I),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module block_design_microblaze_0_0_PC_Bit__parameterized2_585
   (Carry_Out,
    \Using_FPGA.Native ,
    PC_OF,
    PC_EX,
    LO,
    ALU_Result,
    jump,
    sync_reset,
    PC_Write,
    Clk,
    IReady,
    Buffer_Addr,
    OF_PipeRun,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output Carry_Out;
  output [0:0]\Using_FPGA.Native ;
  output [0:0]PC_OF;
  output [0:0]PC_EX;
  input LO;
  input [0:0]ALU_Result;
  input jump;
  input sync_reset;
  input PC_Write;
  input Clk;
  input IReady;
  input [2:0]Buffer_Addr;
  input OF_PipeRun;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire [0:0]ALU_Result;
  wire [2:0]Buffer_Addr;
  wire Carry_Out;
  wire Clk;
  wire IReady;
  wire LO;
  wire OF_PipeRun;
  wire [0:0]PC_EX;
  wire [0:0]PC_OF;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native ;
  wire jump;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire pc_I;
  wire pc_Sum;
  wire sync_reset;
  wire xor_Sum;

  block_design_microblaze_0_0_MB_MUXCY_XORCY_785 MUXCY_XOR_I
       (.Carry_Out(Carry_Out),
        .LO(LO),
        .O(pc_Sum),
        .S(xor_Sum),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_10(lopt_10),
        .lopt_11(lopt_11),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .lopt_9(lopt_9));
  block_design_microblaze_0_0_MB_LUT4__parameterized33_786 NewPC_Mux
       (.ALU_Result(ALU_Result),
        .O(pc_Sum),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .jump(jump));
  block_design_microblaze_0_0_MB_FDE_787 PC_EX_DFF
       (.Clk(Clk),
        .OF_PipeRun(OF_PipeRun),
        .PC_EX(PC_EX),
        .PC_OF(PC_OF));
  block_design_microblaze_0_0_MB_SRL16E_788 PC_OF_Buffer
       (.Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .IReady(IReady),
        .PC_OF(PC_OF),
        .pc_I(pc_I));
  block_design_microblaze_0_0_MB_LUT4__parameterized31_789 SUM_I
       (.S(xor_Sum),
        .pc_I(pc_I));
  block_design_microblaze_0_0_MB_FDSE_790 \Set_DFF.PC_IF_DFF 
       (.Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .pc_I(pc_I),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module block_design_microblaze_0_0_PC_Bit__parameterized2_586
   (Carry_Out,
    \Using_FPGA.Native ,
    PC_OF,
    PC_EX,
    LO,
    ALU_Result,
    jump,
    sync_reset,
    PC_Write,
    Clk,
    IReady,
    Buffer_Addr,
    OF_PipeRun,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output Carry_Out;
  output [0:0]\Using_FPGA.Native ;
  output [0:0]PC_OF;
  output [0:0]PC_EX;
  input LO;
  input [0:0]ALU_Result;
  input jump;
  input sync_reset;
  input PC_Write;
  input Clk;
  input IReady;
  input [2:0]Buffer_Addr;
  input OF_PipeRun;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ALU_Result;
  wire [2:0]Buffer_Addr;
  wire Carry_Out;
  wire Clk;
  wire IReady;
  wire LO;
  wire OF_PipeRun;
  wire [0:0]PC_EX;
  wire [0:0]PC_OF;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native ;
  wire jump;
  wire lopt;
  wire lopt_1;
  wire \^lopt_2 ;
  wire pc_I;
  wire pc_Sum;
  wire sync_reset;
  wire xor_Sum;

  assign \^lopt_2  = lopt_3;
  assign lopt_2 = xor_Sum;
  block_design_microblaze_0_0_MB_MUXCY_XORCY_779 MUXCY_XOR_I
       (.Carry_Out(Carry_Out),
        .LO(LO),
        .O(pc_Sum),
        .S(xor_Sum),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(\^lopt_2 ));
  block_design_microblaze_0_0_MB_LUT4__parameterized33_780 NewPC_Mux
       (.ALU_Result(ALU_Result),
        .O(pc_Sum),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .jump(jump));
  block_design_microblaze_0_0_MB_FDE_781 PC_EX_DFF
       (.Clk(Clk),
        .OF_PipeRun(OF_PipeRun),
        .PC_EX(PC_EX),
        .PC_OF(PC_OF));
  block_design_microblaze_0_0_MB_SRL16E_782 PC_OF_Buffer
       (.Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .IReady(IReady),
        .PC_OF(PC_OF),
        .pc_I(pc_I));
  block_design_microblaze_0_0_MB_LUT4__parameterized31_783 SUM_I
       (.S(xor_Sum),
        .pc_I(pc_I));
  block_design_microblaze_0_0_MB_FDSE_784 \Set_DFF.PC_IF_DFF 
       (.Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .pc_I(pc_I),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module block_design_microblaze_0_0_PC_Bit__parameterized2_587
   (Carry_Out,
    \Using_FPGA.Native ,
    PC_OF,
    PC_EX,
    LO,
    ALU_Result,
    jump,
    sync_reset,
    PC_Write,
    Clk,
    IReady,
    Buffer_Addr,
    OF_PipeRun,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output Carry_Out;
  output [0:0]\Using_FPGA.Native ;
  output [0:0]PC_OF;
  output [0:0]PC_EX;
  input LO;
  input [0:0]ALU_Result;
  input jump;
  input sync_reset;
  input PC_Write;
  input Clk;
  input IReady;
  input [2:0]Buffer_Addr;
  input OF_PipeRun;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ALU_Result;
  wire [2:0]Buffer_Addr;
  wire Carry_Out;
  wire Clk;
  wire IReady;
  wire LO;
  wire OF_PipeRun;
  wire [0:0]PC_EX;
  wire [0:0]PC_OF;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native ;
  wire jump;
  wire lopt;
  wire lopt_1;
  wire \^lopt_2 ;
  wire pc_I;
  wire pc_Sum;
  wire sync_reset;
  wire xor_Sum;

  assign \^lopt_2  = lopt_3;
  assign lopt_2 = xor_Sum;
  block_design_microblaze_0_0_MB_MUXCY_XORCY_773 MUXCY_XOR_I
       (.Carry_Out(Carry_Out),
        .LO(LO),
        .O(pc_Sum),
        .S(xor_Sum),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(\^lopt_2 ));
  block_design_microblaze_0_0_MB_LUT4__parameterized33_774 NewPC_Mux
       (.ALU_Result(ALU_Result),
        .O(pc_Sum),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .jump(jump));
  block_design_microblaze_0_0_MB_FDE_775 PC_EX_DFF
       (.Clk(Clk),
        .OF_PipeRun(OF_PipeRun),
        .PC_EX(PC_EX),
        .PC_OF(PC_OF));
  block_design_microblaze_0_0_MB_SRL16E_776 PC_OF_Buffer
       (.Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .IReady(IReady),
        .PC_OF(PC_OF),
        .pc_I(pc_I));
  block_design_microblaze_0_0_MB_LUT4__parameterized31_777 SUM_I
       (.S(xor_Sum),
        .pc_I(pc_I));
  block_design_microblaze_0_0_MB_FDSE_778 \Set_DFF.PC_IF_DFF 
       (.Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .pc_I(pc_I),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module block_design_microblaze_0_0_PC_Bit__parameterized2_588
   (Carry_Out,
    \Using_FPGA.Native ,
    PC_OF,
    PC_EX,
    LO,
    ALU_Result,
    jump,
    sync_reset,
    PC_Write,
    Clk,
    IReady,
    Buffer_Addr,
    OF_PipeRun,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output Carry_Out;
  output [0:0]\Using_FPGA.Native ;
  output [0:0]PC_OF;
  output [0:0]PC_EX;
  input LO;
  input [0:0]ALU_Result;
  input jump;
  input sync_reset;
  input PC_Write;
  input Clk;
  input IReady;
  input [2:0]Buffer_Addr;
  input OF_PipeRun;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ALU_Result;
  wire [2:0]Buffer_Addr;
  wire Carry_Out;
  wire Clk;
  wire IReady;
  wire LO;
  wire OF_PipeRun;
  wire [0:0]PC_EX;
  wire [0:0]PC_OF;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native ;
  wire jump;
  wire lopt;
  wire lopt_1;
  wire \^lopt_2 ;
  wire pc_I;
  wire pc_Sum;
  wire sync_reset;
  wire xor_Sum;

  assign \^lopt_2  = lopt_3;
  assign lopt_2 = xor_Sum;
  block_design_microblaze_0_0_MB_MUXCY_XORCY_767 MUXCY_XOR_I
       (.Carry_Out(Carry_Out),
        .LO(LO),
        .O(pc_Sum),
        .S(xor_Sum),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(\^lopt_2 ));
  block_design_microblaze_0_0_MB_LUT4__parameterized33_768 NewPC_Mux
       (.ALU_Result(ALU_Result),
        .O(pc_Sum),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .jump(jump));
  block_design_microblaze_0_0_MB_FDE_769 PC_EX_DFF
       (.Clk(Clk),
        .OF_PipeRun(OF_PipeRun),
        .PC_EX(PC_EX),
        .PC_OF(PC_OF));
  block_design_microblaze_0_0_MB_SRL16E_770 PC_OF_Buffer
       (.Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .IReady(IReady),
        .PC_OF(PC_OF),
        .pc_I(pc_I));
  block_design_microblaze_0_0_MB_LUT4__parameterized31_771 SUM_I
       (.S(xor_Sum),
        .pc_I(pc_I));
  block_design_microblaze_0_0_MB_FDSE_772 \Set_DFF.PC_IF_DFF 
       (.Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .pc_I(pc_I),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module block_design_microblaze_0_0_PC_Bit__parameterized2_589
   (Carry_Out,
    \Using_FPGA.Native ,
    PC_OF,
    PC_EX,
    LO,
    ALU_Result,
    jump,
    sync_reset,
    PC_Write,
    Clk,
    IReady,
    Buffer_Addr,
    OF_PipeRun,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output Carry_Out;
  output [0:0]\Using_FPGA.Native ;
  output [0:0]PC_OF;
  output [0:0]PC_EX;
  input LO;
  input [0:0]ALU_Result;
  input jump;
  input sync_reset;
  input PC_Write;
  input Clk;
  input IReady;
  input [2:0]Buffer_Addr;
  input OF_PipeRun;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire [0:0]ALU_Result;
  wire [2:0]Buffer_Addr;
  wire Carry_Out;
  wire Clk;
  wire IReady;
  wire LO;
  wire OF_PipeRun;
  wire [0:0]PC_EX;
  wire [0:0]PC_OF;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native ;
  wire jump;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire pc_I;
  wire pc_Sum;
  wire sync_reset;
  wire xor_Sum;

  block_design_microblaze_0_0_MB_MUXCY_XORCY_761 MUXCY_XOR_I
       (.Carry_Out(Carry_Out),
        .LO(LO),
        .O(pc_Sum),
        .S(xor_Sum),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_10(lopt_10),
        .lopt_11(lopt_11),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .lopt_9(lopt_9));
  block_design_microblaze_0_0_MB_LUT4__parameterized33_762 NewPC_Mux
       (.ALU_Result(ALU_Result),
        .O(pc_Sum),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .jump(jump));
  block_design_microblaze_0_0_MB_FDE_763 PC_EX_DFF
       (.Clk(Clk),
        .OF_PipeRun(OF_PipeRun),
        .PC_EX(PC_EX),
        .PC_OF(PC_OF));
  block_design_microblaze_0_0_MB_SRL16E_764 PC_OF_Buffer
       (.Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .IReady(IReady),
        .PC_OF(PC_OF),
        .pc_I(pc_I));
  block_design_microblaze_0_0_MB_LUT4__parameterized31_765 SUM_I
       (.S(xor_Sum),
        .pc_I(pc_I));
  block_design_microblaze_0_0_MB_FDSE_766 \Set_DFF.PC_IF_DFF 
       (.Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .pc_I(pc_I),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module block_design_microblaze_0_0_PC_Bit__parameterized2_590
   (Carry_Out,
    \Using_FPGA.Native ,
    PC_OF,
    PC_EX,
    LO,
    ALU_Result,
    jump,
    sync_reset,
    PC_Write,
    Clk,
    IReady,
    Buffer_Addr,
    OF_PipeRun,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output Carry_Out;
  output [0:0]\Using_FPGA.Native ;
  output [0:0]PC_OF;
  output [0:0]PC_EX;
  input LO;
  input [0:0]ALU_Result;
  input jump;
  input sync_reset;
  input PC_Write;
  input Clk;
  input IReady;
  input [2:0]Buffer_Addr;
  input OF_PipeRun;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ALU_Result;
  wire [2:0]Buffer_Addr;
  wire Carry_Out;
  wire Clk;
  wire IReady;
  wire LO;
  wire OF_PipeRun;
  wire [0:0]PC_EX;
  wire [0:0]PC_OF;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native ;
  wire jump;
  wire lopt;
  wire lopt_1;
  wire \^lopt_2 ;
  wire pc_I;
  wire pc_Sum;
  wire sync_reset;
  wire xor_Sum;

  assign \^lopt_2  = lopt_3;
  assign lopt_2 = xor_Sum;
  block_design_microblaze_0_0_MB_MUXCY_XORCY_755 MUXCY_XOR_I
       (.Carry_Out(Carry_Out),
        .LO(LO),
        .O(pc_Sum),
        .S(xor_Sum),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(\^lopt_2 ));
  block_design_microblaze_0_0_MB_LUT4__parameterized33_756 NewPC_Mux
       (.ALU_Result(ALU_Result),
        .O(pc_Sum),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .jump(jump));
  block_design_microblaze_0_0_MB_FDE_757 PC_EX_DFF
       (.Clk(Clk),
        .OF_PipeRun(OF_PipeRun),
        .PC_EX(PC_EX),
        .PC_OF(PC_OF));
  block_design_microblaze_0_0_MB_SRL16E_758 PC_OF_Buffer
       (.Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .IReady(IReady),
        .PC_OF(PC_OF),
        .pc_I(pc_I));
  block_design_microblaze_0_0_MB_LUT4__parameterized31_759 SUM_I
       (.S(xor_Sum),
        .pc_I(pc_I));
  block_design_microblaze_0_0_MB_FDSE_760 \Set_DFF.PC_IF_DFF 
       (.Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .pc_I(pc_I),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module block_design_microblaze_0_0_PC_Bit__parameterized2_591
   (Carry_Out,
    \Using_FPGA.Native ,
    PC_OF,
    PC_EX,
    LO,
    ALU_Result,
    jump,
    sync_reset,
    PC_Write,
    Clk,
    IReady,
    Buffer_Addr,
    OF_PipeRun,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output Carry_Out;
  output [0:0]\Using_FPGA.Native ;
  output [0:0]PC_OF;
  output [0:0]PC_EX;
  input LO;
  input [0:0]ALU_Result;
  input jump;
  input sync_reset;
  input PC_Write;
  input Clk;
  input IReady;
  input [2:0]Buffer_Addr;
  input OF_PipeRun;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ALU_Result;
  wire [2:0]Buffer_Addr;
  wire Carry_Out;
  wire Clk;
  wire IReady;
  wire LO;
  wire OF_PipeRun;
  wire [0:0]PC_EX;
  wire [0:0]PC_OF;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native ;
  wire jump;
  wire lopt;
  wire lopt_1;
  wire \^lopt_2 ;
  wire pc_I;
  wire pc_Sum;
  wire sync_reset;
  wire xor_Sum;

  assign \^lopt_2  = lopt_3;
  assign lopt_2 = xor_Sum;
  block_design_microblaze_0_0_MB_MUXCY_XORCY_749 MUXCY_XOR_I
       (.Carry_Out(Carry_Out),
        .LO(LO),
        .O(pc_Sum),
        .S(xor_Sum),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(\^lopt_2 ));
  block_design_microblaze_0_0_MB_LUT4__parameterized33_750 NewPC_Mux
       (.ALU_Result(ALU_Result),
        .O(pc_Sum),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .jump(jump));
  block_design_microblaze_0_0_MB_FDE_751 PC_EX_DFF
       (.Clk(Clk),
        .OF_PipeRun(OF_PipeRun),
        .PC_EX(PC_EX),
        .PC_OF(PC_OF));
  block_design_microblaze_0_0_MB_SRL16E_752 PC_OF_Buffer
       (.Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .IReady(IReady),
        .PC_OF(PC_OF),
        .pc_I(pc_I));
  block_design_microblaze_0_0_MB_LUT4__parameterized31_753 SUM_I
       (.S(xor_Sum),
        .pc_I(pc_I));
  block_design_microblaze_0_0_MB_FDSE_754 \Set_DFF.PC_IF_DFF 
       (.Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .pc_I(pc_I),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module block_design_microblaze_0_0_PC_Bit__parameterized2_592
   (Carry_Out,
    \Using_FPGA.Native ,
    PC_OF,
    PC_EX,
    LO,
    ALU_Result,
    jump,
    sync_reset,
    PC_Write,
    Clk,
    IReady,
    Buffer_Addr,
    OF_PipeRun,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output Carry_Out;
  output [0:0]\Using_FPGA.Native ;
  output [0:0]PC_OF;
  output [0:0]PC_EX;
  input LO;
  input [0:0]ALU_Result;
  input jump;
  input sync_reset;
  input PC_Write;
  input Clk;
  input IReady;
  input [2:0]Buffer_Addr;
  input OF_PipeRun;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ALU_Result;
  wire [2:0]Buffer_Addr;
  wire Carry_Out;
  wire Clk;
  wire IReady;
  wire LO;
  wire OF_PipeRun;
  wire [0:0]PC_EX;
  wire [0:0]PC_OF;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native ;
  wire jump;
  wire lopt;
  wire lopt_1;
  wire \^lopt_2 ;
  wire pc_I;
  wire pc_Sum;
  wire sync_reset;
  wire xor_Sum;

  assign \^lopt_2  = lopt_3;
  assign lopt_2 = xor_Sum;
  block_design_microblaze_0_0_MB_MUXCY_XORCY_743 MUXCY_XOR_I
       (.Carry_Out(Carry_Out),
        .LO(LO),
        .O(pc_Sum),
        .S(xor_Sum),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(\^lopt_2 ));
  block_design_microblaze_0_0_MB_LUT4__parameterized33_744 NewPC_Mux
       (.ALU_Result(ALU_Result),
        .O(pc_Sum),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .jump(jump));
  block_design_microblaze_0_0_MB_FDE_745 PC_EX_DFF
       (.Clk(Clk),
        .OF_PipeRun(OF_PipeRun),
        .PC_EX(PC_EX),
        .PC_OF(PC_OF));
  block_design_microblaze_0_0_MB_SRL16E_746 PC_OF_Buffer
       (.Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .IReady(IReady),
        .PC_OF(PC_OF),
        .pc_I(pc_I));
  block_design_microblaze_0_0_MB_LUT4__parameterized31_747 SUM_I
       (.S(xor_Sum),
        .pc_I(pc_I));
  block_design_microblaze_0_0_MB_FDSE_748 \Set_DFF.PC_IF_DFF 
       (.Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .pc_I(pc_I),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module block_design_microblaze_0_0_PC_Bit__parameterized2_593
   (Carry_Out,
    \Using_FPGA.Native ,
    PC_OF,
    PC_EX,
    LO,
    ALU_Result,
    jump,
    sync_reset,
    PC_Write,
    Clk,
    IReady,
    Buffer_Addr,
    OF_PipeRun,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output Carry_Out;
  output [0:0]\Using_FPGA.Native ;
  output [0:0]PC_OF;
  output [0:0]PC_EX;
  input LO;
  input [0:0]ALU_Result;
  input jump;
  input sync_reset;
  input PC_Write;
  input Clk;
  input IReady;
  input [2:0]Buffer_Addr;
  input OF_PipeRun;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire [0:0]ALU_Result;
  wire [2:0]Buffer_Addr;
  wire Carry_Out;
  wire Clk;
  wire IReady;
  wire LO;
  wire OF_PipeRun;
  wire [0:0]PC_EX;
  wire [0:0]PC_OF;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native ;
  wire jump;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire pc_I;
  wire pc_Sum;
  wire sync_reset;
  wire xor_Sum;

  block_design_microblaze_0_0_MB_MUXCY_XORCY_737 MUXCY_XOR_I
       (.Carry_Out(Carry_Out),
        .LO(LO),
        .O(pc_Sum),
        .S(xor_Sum),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_10(lopt_10),
        .lopt_11(lopt_11),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .lopt_9(lopt_9));
  block_design_microblaze_0_0_MB_LUT4__parameterized33_738 NewPC_Mux
       (.ALU_Result(ALU_Result),
        .O(pc_Sum),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .jump(jump));
  block_design_microblaze_0_0_MB_FDE_739 PC_EX_DFF
       (.Clk(Clk),
        .OF_PipeRun(OF_PipeRun),
        .PC_EX(PC_EX),
        .PC_OF(PC_OF));
  block_design_microblaze_0_0_MB_SRL16E_740 PC_OF_Buffer
       (.Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .IReady(IReady),
        .PC_OF(PC_OF),
        .pc_I(pc_I));
  block_design_microblaze_0_0_MB_LUT4__parameterized31_741 SUM_I
       (.S(xor_Sum),
        .pc_I(pc_I));
  block_design_microblaze_0_0_MB_FDSE_742 \Set_DFF.PC_IF_DFF 
       (.Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .pc_I(pc_I),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module block_design_microblaze_0_0_PC_Bit__parameterized2_594
   (Carry_Out,
    \Using_FPGA.Native ,
    PC_OF,
    PC_EX,
    LO,
    ALU_Result,
    jump,
    sync_reset,
    PC_Write,
    Clk,
    IReady,
    Buffer_Addr,
    OF_PipeRun,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output Carry_Out;
  output [0:0]\Using_FPGA.Native ;
  output [0:0]PC_OF;
  output [0:0]PC_EX;
  input LO;
  input [0:0]ALU_Result;
  input jump;
  input sync_reset;
  input PC_Write;
  input Clk;
  input IReady;
  input [2:0]Buffer_Addr;
  input OF_PipeRun;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ALU_Result;
  wire [2:0]Buffer_Addr;
  wire Carry_Out;
  wire Clk;
  wire IReady;
  wire LO;
  wire OF_PipeRun;
  wire [0:0]PC_EX;
  wire [0:0]PC_OF;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native ;
  wire jump;
  wire lopt;
  wire lopt_1;
  wire \^lopt_2 ;
  wire pc_I;
  wire pc_Sum;
  wire sync_reset;
  wire xor_Sum;

  assign \^lopt_2  = lopt_3;
  assign lopt_2 = xor_Sum;
  block_design_microblaze_0_0_MB_MUXCY_XORCY_731 MUXCY_XOR_I
       (.Carry_Out(Carry_Out),
        .LO(LO),
        .O(pc_Sum),
        .S(xor_Sum),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(\^lopt_2 ));
  block_design_microblaze_0_0_MB_LUT4__parameterized33_732 NewPC_Mux
       (.ALU_Result(ALU_Result),
        .O(pc_Sum),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .jump(jump));
  block_design_microblaze_0_0_MB_FDE_733 PC_EX_DFF
       (.Clk(Clk),
        .OF_PipeRun(OF_PipeRun),
        .PC_EX(PC_EX),
        .PC_OF(PC_OF));
  block_design_microblaze_0_0_MB_SRL16E_734 PC_OF_Buffer
       (.Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .IReady(IReady),
        .PC_OF(PC_OF),
        .pc_I(pc_I));
  block_design_microblaze_0_0_MB_LUT4__parameterized31_735 SUM_I
       (.S(xor_Sum),
        .pc_I(pc_I));
  block_design_microblaze_0_0_MB_FDSE_736 \Set_DFF.PC_IF_DFF 
       (.Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .pc_I(pc_I),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module block_design_microblaze_0_0_PC_Bit__parameterized2_595
   (Carry_Out,
    \Using_FPGA.Native ,
    PC_OF,
    PC_EX,
    LO,
    ALU_Result,
    jump,
    sync_reset,
    PC_Write,
    Clk,
    IReady,
    Buffer_Addr,
    OF_PipeRun,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output Carry_Out;
  output [0:0]\Using_FPGA.Native ;
  output [0:0]PC_OF;
  output [0:0]PC_EX;
  input LO;
  input [0:0]ALU_Result;
  input jump;
  input sync_reset;
  input PC_Write;
  input Clk;
  input IReady;
  input [2:0]Buffer_Addr;
  input OF_PipeRun;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ALU_Result;
  wire [2:0]Buffer_Addr;
  wire Carry_Out;
  wire Clk;
  wire IReady;
  wire LO;
  wire OF_PipeRun;
  wire [0:0]PC_EX;
  wire [0:0]PC_OF;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native ;
  wire jump;
  wire lopt;
  wire lopt_1;
  wire \^lopt_2 ;
  wire pc_I;
  wire pc_Sum;
  wire sync_reset;
  wire xor_Sum;

  assign \^lopt_2  = lopt_3;
  assign lopt_2 = xor_Sum;
  block_design_microblaze_0_0_MB_MUXCY_XORCY_725 MUXCY_XOR_I
       (.Carry_Out(Carry_Out),
        .LO(LO),
        .O(pc_Sum),
        .S(xor_Sum),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(\^lopt_2 ));
  block_design_microblaze_0_0_MB_LUT4__parameterized33_726 NewPC_Mux
       (.ALU_Result(ALU_Result),
        .O(pc_Sum),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .jump(jump));
  block_design_microblaze_0_0_MB_FDE_727 PC_EX_DFF
       (.Clk(Clk),
        .OF_PipeRun(OF_PipeRun),
        .PC_EX(PC_EX),
        .PC_OF(PC_OF));
  block_design_microblaze_0_0_MB_SRL16E_728 PC_OF_Buffer
       (.Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .IReady(IReady),
        .PC_OF(PC_OF),
        .pc_I(pc_I));
  block_design_microblaze_0_0_MB_LUT4__parameterized31_729 SUM_I
       (.S(xor_Sum),
        .pc_I(pc_I));
  block_design_microblaze_0_0_MB_FDSE_730 \Set_DFF.PC_IF_DFF 
       (.Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .pc_I(pc_I),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module block_design_microblaze_0_0_PC_Bit__parameterized2_596
   (Carry_Out,
    \Using_FPGA.Native ,
    PC_OF,
    PC_EX,
    LO,
    ALU_Result,
    jump,
    sync_reset,
    PC_Write,
    Clk,
    IReady,
    Buffer_Addr,
    OF_PipeRun,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output Carry_Out;
  output [0:0]\Using_FPGA.Native ;
  output [0:0]PC_OF;
  output [0:0]PC_EX;
  input LO;
  input [0:0]ALU_Result;
  input jump;
  input sync_reset;
  input PC_Write;
  input Clk;
  input IReady;
  input [2:0]Buffer_Addr;
  input OF_PipeRun;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ALU_Result;
  wire [2:0]Buffer_Addr;
  wire Carry_Out;
  wire Clk;
  wire IReady;
  wire LO;
  wire OF_PipeRun;
  wire [0:0]PC_EX;
  wire [0:0]PC_OF;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native ;
  wire jump;
  wire lopt;
  wire lopt_1;
  wire \^lopt_2 ;
  wire pc_I;
  wire pc_Sum;
  wire sync_reset;
  wire xor_Sum;

  assign \^lopt_2  = lopt_3;
  assign lopt_2 = xor_Sum;
  block_design_microblaze_0_0_MB_MUXCY_XORCY_719 MUXCY_XOR_I
       (.Carry_Out(Carry_Out),
        .LO(LO),
        .O(pc_Sum),
        .S(xor_Sum),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(\^lopt_2 ));
  block_design_microblaze_0_0_MB_LUT4__parameterized33_720 NewPC_Mux
       (.ALU_Result(ALU_Result),
        .O(pc_Sum),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .jump(jump));
  block_design_microblaze_0_0_MB_FDE_721 PC_EX_DFF
       (.Clk(Clk),
        .OF_PipeRun(OF_PipeRun),
        .PC_EX(PC_EX),
        .PC_OF(PC_OF));
  block_design_microblaze_0_0_MB_SRL16E_722 PC_OF_Buffer
       (.Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .IReady(IReady),
        .PC_OF(PC_OF),
        .pc_I(pc_I));
  block_design_microblaze_0_0_MB_LUT4__parameterized31_723 SUM_I
       (.S(xor_Sum),
        .pc_I(pc_I));
  block_design_microblaze_0_0_MB_FDSE_724 \Set_DFF.PC_IF_DFF 
       (.Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .pc_I(pc_I),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module block_design_microblaze_0_0_PC_Bit__parameterized2_597
   (Carry_Out,
    \Using_FPGA.Native ,
    PC_OF,
    PC_EX,
    LO,
    ALU_Result,
    jump,
    sync_reset,
    PC_Write,
    Clk,
    IReady,
    Buffer_Addr,
    OF_PipeRun,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output Carry_Out;
  output [0:0]\Using_FPGA.Native ;
  output [0:0]PC_OF;
  output [0:0]PC_EX;
  input LO;
  input [0:0]ALU_Result;
  input jump;
  input sync_reset;
  input PC_Write;
  input Clk;
  input IReady;
  input [2:0]Buffer_Addr;
  input OF_PipeRun;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ALU_Result;
  wire [2:0]Buffer_Addr;
  wire Carry_Out;
  wire Clk;
  wire IReady;
  wire LO;
  wire OF_PipeRun;
  wire [0:0]PC_EX;
  wire [0:0]PC_OF;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native ;
  wire jump;
  wire lopt;
  wire lopt_1;
  wire \^lopt_2 ;
  wire pc_I;
  wire pc_Sum;
  wire sync_reset;
  wire xor_Sum;

  assign \^lopt_2  = lopt_3;
  assign lopt_2 = xor_Sum;
  block_design_microblaze_0_0_MB_MUXCY_XORCY_713 MUXCY_XOR_I
       (.Carry_Out(Carry_Out),
        .LO(LO),
        .O(pc_Sum),
        .S(xor_Sum),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(\^lopt_2 ));
  block_design_microblaze_0_0_MB_LUT4__parameterized33_714 NewPC_Mux
       (.ALU_Result(ALU_Result),
        .O(pc_Sum),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .jump(jump));
  block_design_microblaze_0_0_MB_FDE_715 PC_EX_DFF
       (.Clk(Clk),
        .OF_PipeRun(OF_PipeRun),
        .PC_EX(PC_EX),
        .PC_OF(PC_OF));
  block_design_microblaze_0_0_MB_SRL16E_716 PC_OF_Buffer
       (.Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .IReady(IReady),
        .PC_OF(PC_OF),
        .pc_I(pc_I));
  block_design_microblaze_0_0_MB_LUT4__parameterized31_717 SUM_I
       (.S(xor_Sum),
        .pc_I(pc_I));
  block_design_microblaze_0_0_MB_FDSE_718 \Set_DFF.PC_IF_DFF 
       (.Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .pc_I(pc_I),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module block_design_microblaze_0_0_PC_Bit__parameterized2_598
   (Carry_Out,
    \Using_FPGA.Native ,
    PC_OF,
    PC_EX,
    LO,
    ALU_Result,
    jump,
    sync_reset,
    PC_Write,
    Clk,
    IReady,
    Buffer_Addr,
    OF_PipeRun,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output Carry_Out;
  output [0:0]\Using_FPGA.Native ;
  output [0:0]PC_OF;
  output [0:0]PC_EX;
  input LO;
  input [0:0]ALU_Result;
  input jump;
  input sync_reset;
  input PC_Write;
  input Clk;
  input IReady;
  input [2:0]Buffer_Addr;
  input OF_PipeRun;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire [0:0]ALU_Result;
  wire [2:0]Buffer_Addr;
  wire Carry_Out;
  wire Clk;
  wire IReady;
  wire LO;
  wire OF_PipeRun;
  wire [0:0]PC_EX;
  wire [0:0]PC_OF;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native ;
  wire jump;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire pc_I;
  wire pc_Sum;
  wire sync_reset;
  wire xor_Sum;

  block_design_microblaze_0_0_MB_MUXCY_XORCY_707 MUXCY_XOR_I
       (.Carry_Out(Carry_Out),
        .LO(LO),
        .O(pc_Sum),
        .S(xor_Sum),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_10(lopt_10),
        .lopt_11(lopt_11),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .lopt_9(lopt_9));
  block_design_microblaze_0_0_MB_LUT4__parameterized33_708 NewPC_Mux
       (.ALU_Result(ALU_Result),
        .O(pc_Sum),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .jump(jump));
  block_design_microblaze_0_0_MB_FDE_709 PC_EX_DFF
       (.Clk(Clk),
        .OF_PipeRun(OF_PipeRun),
        .PC_EX(PC_EX),
        .PC_OF(PC_OF));
  block_design_microblaze_0_0_MB_SRL16E_710 PC_OF_Buffer
       (.Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .IReady(IReady),
        .PC_OF(PC_OF),
        .pc_I(pc_I));
  block_design_microblaze_0_0_MB_LUT4__parameterized31_711 SUM_I
       (.S(xor_Sum),
        .pc_I(pc_I));
  block_design_microblaze_0_0_MB_FDSE_712 \Set_DFF.PC_IF_DFF 
       (.Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .pc_I(pc_I),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module block_design_microblaze_0_0_PC_Bit__parameterized2_599
   (Carry_Out,
    \Using_FPGA.Native ,
    PC_OF,
    PC_EX,
    LO,
    ALU_Result,
    jump,
    sync_reset,
    PC_Write,
    Clk,
    IReady,
    Buffer_Addr,
    OF_PipeRun,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output Carry_Out;
  output [0:0]\Using_FPGA.Native ;
  output [0:0]PC_OF;
  output [0:0]PC_EX;
  input LO;
  input [0:0]ALU_Result;
  input jump;
  input sync_reset;
  input PC_Write;
  input Clk;
  input IReady;
  input [2:0]Buffer_Addr;
  input OF_PipeRun;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ALU_Result;
  wire [2:0]Buffer_Addr;
  wire Carry_Out;
  wire Clk;
  wire IReady;
  wire LO;
  wire OF_PipeRun;
  wire [0:0]PC_EX;
  wire [0:0]PC_OF;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native ;
  wire jump;
  wire lopt;
  wire lopt_1;
  wire \^lopt_2 ;
  wire pc_I;
  wire pc_Sum;
  wire sync_reset;
  wire xor_Sum;

  assign \^lopt_2  = lopt_3;
  assign lopt_2 = xor_Sum;
  block_design_microblaze_0_0_MB_MUXCY_XORCY_701 MUXCY_XOR_I
       (.Carry_Out(Carry_Out),
        .LO(LO),
        .O(pc_Sum),
        .S(xor_Sum),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(\^lopt_2 ));
  block_design_microblaze_0_0_MB_LUT4__parameterized33_702 NewPC_Mux
       (.ALU_Result(ALU_Result),
        .O(pc_Sum),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .jump(jump));
  block_design_microblaze_0_0_MB_FDE_703 PC_EX_DFF
       (.Clk(Clk),
        .OF_PipeRun(OF_PipeRun),
        .PC_EX(PC_EX),
        .PC_OF(PC_OF));
  block_design_microblaze_0_0_MB_SRL16E_704 PC_OF_Buffer
       (.Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .IReady(IReady),
        .PC_OF(PC_OF),
        .pc_I(pc_I));
  block_design_microblaze_0_0_MB_LUT4__parameterized31_705 SUM_I
       (.S(xor_Sum),
        .pc_I(pc_I));
  block_design_microblaze_0_0_MB_FDSE_706 \Set_DFF.PC_IF_DFF 
       (.Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .pc_I(pc_I),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module block_design_microblaze_0_0_PC_Bit__parameterized2_600
   (Carry_Out,
    \Using_FPGA.Native ,
    PC_OF,
    PC_EX,
    LO,
    ALU_Result,
    jump,
    sync_reset,
    PC_Write,
    Clk,
    IReady,
    Buffer_Addr,
    OF_PipeRun,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output Carry_Out;
  output [0:0]\Using_FPGA.Native ;
  output [0:0]PC_OF;
  output [0:0]PC_EX;
  input LO;
  input [0:0]ALU_Result;
  input jump;
  input sync_reset;
  input PC_Write;
  input Clk;
  input IReady;
  input [2:0]Buffer_Addr;
  input OF_PipeRun;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ALU_Result;
  wire [2:0]Buffer_Addr;
  wire Carry_Out;
  wire Clk;
  wire IReady;
  wire LO;
  wire OF_PipeRun;
  wire [0:0]PC_EX;
  wire [0:0]PC_OF;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native ;
  wire jump;
  wire lopt;
  wire lopt_1;
  wire \^lopt_2 ;
  wire pc_I;
  wire pc_Sum;
  wire sync_reset;
  wire xor_Sum;

  assign \^lopt_2  = lopt_3;
  assign lopt_2 = xor_Sum;
  block_design_microblaze_0_0_MB_MUXCY_XORCY_695 MUXCY_XOR_I
       (.Carry_Out(Carry_Out),
        .LO(LO),
        .O(pc_Sum),
        .S(xor_Sum),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(\^lopt_2 ));
  block_design_microblaze_0_0_MB_LUT4__parameterized33_696 NewPC_Mux
       (.ALU_Result(ALU_Result),
        .O(pc_Sum),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .jump(jump));
  block_design_microblaze_0_0_MB_FDE_697 PC_EX_DFF
       (.Clk(Clk),
        .OF_PipeRun(OF_PipeRun),
        .PC_EX(PC_EX),
        .PC_OF(PC_OF));
  block_design_microblaze_0_0_MB_SRL16E_698 PC_OF_Buffer
       (.Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .IReady(IReady),
        .PC_OF(PC_OF),
        .pc_I(pc_I));
  block_design_microblaze_0_0_MB_LUT4__parameterized31_699 SUM_I
       (.S(xor_Sum),
        .pc_I(pc_I));
  block_design_microblaze_0_0_MB_FDSE_700 \Set_DFF.PC_IF_DFF 
       (.Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .pc_I(pc_I),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module block_design_microblaze_0_0_PC_Bit__parameterized2_601
   (Carry_Out,
    \Using_FPGA.Native ,
    PC_OF,
    PC_EX,
    LO,
    ALU_Result,
    jump,
    sync_reset,
    PC_Write,
    Clk,
    IReady,
    Buffer_Addr,
    OF_PipeRun,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output Carry_Out;
  output [0:0]\Using_FPGA.Native ;
  output [0:0]PC_OF;
  output [0:0]PC_EX;
  input LO;
  input [0:0]ALU_Result;
  input jump;
  input sync_reset;
  input PC_Write;
  input Clk;
  input IReady;
  input [2:0]Buffer_Addr;
  input OF_PipeRun;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ALU_Result;
  wire [2:0]Buffer_Addr;
  wire Carry_Out;
  wire Clk;
  wire IReady;
  wire LO;
  wire OF_PipeRun;
  wire [0:0]PC_EX;
  wire [0:0]PC_OF;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native ;
  wire jump;
  wire lopt;
  wire lopt_1;
  wire \^lopt_2 ;
  wire pc_I;
  wire pc_Sum;
  wire sync_reset;
  wire xor_Sum;

  assign \^lopt_2  = lopt_3;
  assign lopt_2 = xor_Sum;
  block_design_microblaze_0_0_MB_MUXCY_XORCY_689 MUXCY_XOR_I
       (.Carry_Out(Carry_Out),
        .LO(LO),
        .O(pc_Sum),
        .S(xor_Sum),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(\^lopt_2 ));
  block_design_microblaze_0_0_MB_LUT4__parameterized33_690 NewPC_Mux
       (.ALU_Result(ALU_Result),
        .O(pc_Sum),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .jump(jump));
  block_design_microblaze_0_0_MB_FDE_691 PC_EX_DFF
       (.Clk(Clk),
        .OF_PipeRun(OF_PipeRun),
        .PC_EX(PC_EX),
        .PC_OF(PC_OF));
  block_design_microblaze_0_0_MB_SRL16E_692 PC_OF_Buffer
       (.Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .IReady(IReady),
        .PC_OF(PC_OF),
        .pc_I(pc_I));
  block_design_microblaze_0_0_MB_LUT4__parameterized31_693 SUM_I
       (.S(xor_Sum),
        .pc_I(pc_I));
  block_design_microblaze_0_0_MB_FDSE_694 \Set_DFF.PC_IF_DFF 
       (.Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .pc_I(pc_I),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module block_design_microblaze_0_0_PC_Bit__parameterized2_602
   (I3_2,
    PC_OF,
    Carry_Out,
    \Using_FPGA.Native ,
    PC_EX,
    opsel1_PC,
    msr_I,
    LO,
    ALU_Result,
    jump,
    sync_reset,
    PC_Write,
    Clk,
    IReady,
    Buffer_Addr,
    OF_PipeRun,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output I3_2;
  output [0:0]PC_OF;
  output Carry_Out;
  output [0:0]\Using_FPGA.Native ;
  output [0:0]PC_EX;
  input opsel1_PC;
  input [0:0]msr_I;
  input LO;
  input [0:0]ALU_Result;
  input jump;
  input sync_reset;
  input PC_Write;
  input Clk;
  input IReady;
  input [2:0]Buffer_Addr;
  input OF_PipeRun;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire [0:0]ALU_Result;
  wire [2:0]Buffer_Addr;
  wire Carry_Out;
  wire Clk;
  wire I3_2;
  wire IReady;
  wire LO;
  wire OF_PipeRun;
  wire [0:0]PC_EX;
  wire [0:0]PC_OF;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native ;
  wire jump;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire [0:0]msr_I;
  wire opsel1_PC;
  wire pc_I;
  wire pc_Sum;
  wire sync_reset;
  wire xor_Sum;

  block_design_microblaze_0_0_MB_MUXCY_XORCY_683 MUXCY_XOR_I
       (.Carry_Out(Carry_Out),
        .LO(LO),
        .O(pc_Sum),
        .S(xor_Sum),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_10(lopt_10),
        .lopt_11(lopt_11),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .lopt_9(lopt_9));
  block_design_microblaze_0_0_MB_LUT4__parameterized33_684 NewPC_Mux
       (.ALU_Result(ALU_Result),
        .O(pc_Sum),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .jump(jump));
  block_design_microblaze_0_0_MB_FDE_685 PC_EX_DFF
       (.Clk(Clk),
        .OF_PipeRun(OF_PipeRun),
        .PC_EX(PC_EX),
        .PC_OF(PC_OF));
  block_design_microblaze_0_0_MB_SRL16E_686 PC_OF_Buffer
       (.Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .I3_2(I3_2),
        .IReady(IReady),
        .PC_OF(PC_OF),
        .msr_I(msr_I),
        .opsel1_PC(opsel1_PC),
        .pc_I(pc_I));
  block_design_microblaze_0_0_MB_LUT4__parameterized31_687 SUM_I
       (.S(xor_Sum),
        .pc_I(pc_I));
  block_design_microblaze_0_0_MB_FDSE_688 \Set_DFF.PC_IF_DFF 
       (.Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .pc_I(pc_I),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module block_design_microblaze_0_0_PC_Bit__parameterized2_603
   (I3_1,
    PC_OF,
    Carry_Out,
    \Using_FPGA.Native ,
    PC_EX,
    opsel1_PC,
    msr_I,
    LO,
    ALU_Result,
    jump,
    sync_reset,
    PC_Write,
    Clk,
    IReady,
    Buffer_Addr,
    OF_PipeRun,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output I3_1;
  output [0:0]PC_OF;
  output Carry_Out;
  output [0:0]\Using_FPGA.Native ;
  output [0:0]PC_EX;
  input opsel1_PC;
  input [0:0]msr_I;
  input LO;
  input [0:0]ALU_Result;
  input jump;
  input sync_reset;
  input PC_Write;
  input Clk;
  input IReady;
  input [2:0]Buffer_Addr;
  input OF_PipeRun;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ALU_Result;
  wire [2:0]Buffer_Addr;
  wire Carry_Out;
  wire Clk;
  wire I3_1;
  wire IReady;
  wire LO;
  wire OF_PipeRun;
  wire [0:0]PC_EX;
  wire [0:0]PC_OF;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native ;
  wire jump;
  wire lopt;
  wire lopt_1;
  wire \^lopt_2 ;
  wire [0:0]msr_I;
  wire opsel1_PC;
  wire pc_I;
  wire pc_Sum;
  wire sync_reset;
  wire xor_Sum;

  assign \^lopt_2  = lopt_3;
  assign lopt_2 = xor_Sum;
  block_design_microblaze_0_0_MB_MUXCY_XORCY_677 MUXCY_XOR_I
       (.Carry_Out(Carry_Out),
        .LO(LO),
        .O(pc_Sum),
        .S(xor_Sum),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(\^lopt_2 ));
  block_design_microblaze_0_0_MB_LUT4__parameterized33_678 NewPC_Mux
       (.ALU_Result(ALU_Result),
        .O(pc_Sum),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .jump(jump));
  block_design_microblaze_0_0_MB_FDE_679 PC_EX_DFF
       (.Clk(Clk),
        .OF_PipeRun(OF_PipeRun),
        .PC_EX(PC_EX),
        .PC_OF(PC_OF));
  block_design_microblaze_0_0_MB_SRL16E_680 PC_OF_Buffer
       (.Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .I3_1(I3_1),
        .IReady(IReady),
        .PC_OF(PC_OF),
        .msr_I(msr_I),
        .opsel1_PC(opsel1_PC),
        .pc_I(pc_I));
  block_design_microblaze_0_0_MB_LUT4__parameterized31_681 SUM_I
       (.S(xor_Sum),
        .pc_I(pc_I));
  block_design_microblaze_0_0_MB_FDSE_682 \Set_DFF.PC_IF_DFF 
       (.Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .pc_I(pc_I),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module block_design_microblaze_0_0_PC_Bit__parameterized2_604
   (I3_0,
    PC_OF,
    Carry_Out,
    \Using_FPGA.Native ,
    PC_EX,
    opsel1_PC,
    \Using_FPGA.Native_0 ,
    DI,
    \Using_FPGA.Native_1 ,
    ALU_Result,
    jump,
    sync_reset,
    PC_Write,
    Clk,
    IReady,
    Buffer_Addr,
    OF_PipeRun,
    lopt,
    lopt_1,
    lopt_2);
  output I3_0;
  output [0:0]PC_OF;
  output Carry_Out;
  output [0:0]\Using_FPGA.Native ;
  output [0:0]PC_EX;
  input opsel1_PC;
  input \Using_FPGA.Native_0 ;
  input DI;
  input \Using_FPGA.Native_1 ;
  input [0:0]ALU_Result;
  input jump;
  input sync_reset;
  input PC_Write;
  input Clk;
  input IReady;
  input [2:0]Buffer_Addr;
  input OF_PipeRun;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire [0:0]ALU_Result;
  wire [2:0]Buffer_Addr;
  wire Carry_Out;
  wire Clk;
  wire DI;
  wire I3_0;
  wire IReady;
  wire OF_PipeRun;
  wire [0:0]PC_EX;
  wire [0:0]PC_OF;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire jump;
  wire lopt;
  wire \^lopt_1 ;
  wire opsel1_PC;
  wire pc_I;
  wire pc_Sum;
  wire sync_reset;
  wire xor_Sum;

  assign \^lopt_1  = lopt_2;
  assign lopt_1 = xor_Sum;
  block_design_microblaze_0_0_MB_MUXCY_XORCY_671 MUXCY_XOR_I
       (.Carry_Out(Carry_Out),
        .DI(DI),
        .O(pc_Sum),
        .S(xor_Sum),
        .\Using_FPGA.Native (\Using_FPGA.Native_1 ),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
  block_design_microblaze_0_0_MB_LUT4__parameterized33_672 NewPC_Mux
       (.ALU_Result(ALU_Result),
        .O(pc_Sum),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .jump(jump));
  block_design_microblaze_0_0_MB_FDE_673 PC_EX_DFF
       (.Clk(Clk),
        .OF_PipeRun(OF_PipeRun),
        .PC_EX(PC_EX),
        .PC_OF(PC_OF));
  block_design_microblaze_0_0_MB_SRL16E_674 PC_OF_Buffer
       (.Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .I3_0(I3_0),
        .IReady(IReady),
        .PC_OF(PC_OF),
        .\Using_FPGA.Native (\Using_FPGA.Native_0 ),
        .opsel1_PC(opsel1_PC),
        .pc_I(pc_I));
  block_design_microblaze_0_0_MB_LUT4__parameterized31_675 SUM_I
       (.DI(DI),
        .S(xor_Sum),
        .pc_I(pc_I));
  block_design_microblaze_0_0_MB_FDSE_676 \Set_DFF.PC_IF_DFF 
       (.Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .pc_I(pc_I),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module block_design_microblaze_0_0_PC_Bit__parameterized2_605
   (Carry_Out,
    \Using_FPGA.Native ,
    PC_OF,
    PC_EX,
    LO,
    ALU_Result,
    jump,
    sync_reset,
    PC_Write,
    Clk,
    IReady,
    Buffer_Addr,
    OF_PipeRun,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output Carry_Out;
  output [0:0]\Using_FPGA.Native ;
  output [0:0]PC_OF;
  output [0:0]PC_EX;
  input LO;
  input [0:0]ALU_Result;
  input jump;
  input sync_reset;
  input PC_Write;
  input Clk;
  input IReady;
  input [2:0]Buffer_Addr;
  input OF_PipeRun;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ALU_Result;
  wire [2:0]Buffer_Addr;
  wire Carry_Out;
  wire Clk;
  wire IReady;
  wire LO;
  wire OF_PipeRun;
  wire [0:0]PC_EX;
  wire [0:0]PC_OF;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native ;
  wire jump;
  wire lopt;
  wire lopt_1;
  wire \^lopt_2 ;
  wire pc_I;
  wire pc_Sum;
  wire sync_reset;
  wire xor_Sum;

  assign \^lopt_2  = lopt_3;
  assign lopt_2 = xor_Sum;
  block_design_microblaze_0_0_MB_MUXCY_XORCY_665 MUXCY_XOR_I
       (.Carry_Out(Carry_Out),
        .LO(LO),
        .O(pc_Sum),
        .S(xor_Sum),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(\^lopt_2 ));
  block_design_microblaze_0_0_MB_LUT4__parameterized33_666 NewPC_Mux
       (.ALU_Result(ALU_Result),
        .O(pc_Sum),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .jump(jump));
  block_design_microblaze_0_0_MB_FDE_667 PC_EX_DFF
       (.Clk(Clk),
        .OF_PipeRun(OF_PipeRun),
        .PC_EX(PC_EX),
        .PC_OF(PC_OF));
  block_design_microblaze_0_0_MB_SRL16E_668 PC_OF_Buffer
       (.Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .IReady(IReady),
        .PC_OF(PC_OF),
        .pc_I(pc_I));
  block_design_microblaze_0_0_MB_LUT4__parameterized31_669 SUM_I
       (.S(xor_Sum),
        .pc_I(pc_I));
  block_design_microblaze_0_0_MB_FDSE_670 \Set_DFF.PC_IF_DFF 
       (.Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .pc_I(pc_I),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module block_design_microblaze_0_0_PC_Bit__parameterized2_607
   (Carry_Out,
    \Using_FPGA.Native ,
    PC_OF,
    PC_EX,
    LO,
    ALU_Result,
    jump,
    sync_reset,
    PC_Write,
    Clk,
    IReady,
    Buffer_Addr,
    OF_PipeRun,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9);
  output Carry_Out;
  output [0:0]\Using_FPGA.Native ;
  output [0:0]PC_OF;
  output [0:0]PC_EX;
  input LO;
  input [0:0]ALU_Result;
  input jump;
  input sync_reset;
  input PC_Write;
  input Clk;
  input IReady;
  input [2:0]Buffer_Addr;
  input OF_PipeRun;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  output lopt_7;
  output lopt_8;
  input lopt_9;

  wire [0:0]ALU_Result;
  wire [2:0]Buffer_Addr;
  wire Carry_Out;
  wire Clk;
  wire IReady;
  wire LO;
  wire OF_PipeRun;
  wire [0:0]PC_EX;
  wire [0:0]PC_OF;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native ;
  wire jump;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire pc_I;
  wire pc_Sum;
  wire sync_reset;
  wire xor_Sum;

  block_design_microblaze_0_0_MB_MUXCY_XORCY_647 MUXCY_XOR_I
       (.Carry_Out(Carry_Out),
        .LO(LO),
        .O(pc_Sum),
        .S(xor_Sum),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .lopt_9(lopt_9));
  block_design_microblaze_0_0_MB_LUT4__parameterized33_648 NewPC_Mux
       (.ALU_Result(ALU_Result),
        .O(pc_Sum),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .jump(jump));
  block_design_microblaze_0_0_MB_FDE_649 PC_EX_DFF
       (.Clk(Clk),
        .OF_PipeRun(OF_PipeRun),
        .PC_EX(PC_EX),
        .PC_OF(PC_OF));
  block_design_microblaze_0_0_MB_SRL16E_650 PC_OF_Buffer
       (.Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .IReady(IReady),
        .PC_OF(PC_OF),
        .pc_I(pc_I));
  block_design_microblaze_0_0_MB_LUT4__parameterized31_651 SUM_I
       (.S(xor_Sum),
        .pc_I(pc_I));
  block_design_microblaze_0_0_MB_FDSE_652 \Set_DFF.PC_IF_DFF 
       (.Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .pc_I(pc_I),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module block_design_microblaze_0_0_PC_Bit__parameterized2_608
   (Carry_Out,
    \Using_FPGA.Native ,
    PC_OF,
    PC_EX,
    LO,
    ALU_Result,
    jump,
    sync_reset,
    PC_Write,
    Clk,
    IReady,
    Buffer_Addr,
    OF_PipeRun,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output Carry_Out;
  output [0:0]\Using_FPGA.Native ;
  output [0:0]PC_OF;
  output [0:0]PC_EX;
  input LO;
  input [0:0]ALU_Result;
  input jump;
  input sync_reset;
  input PC_Write;
  input Clk;
  input IReady;
  input [2:0]Buffer_Addr;
  input OF_PipeRun;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ALU_Result;
  wire [2:0]Buffer_Addr;
  wire Carry_Out;
  wire Clk;
  wire IReady;
  wire LO;
  wire OF_PipeRun;
  wire [0:0]PC_EX;
  wire [0:0]PC_OF;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native ;
  wire jump;
  wire lopt;
  wire lopt_1;
  wire \^lopt_2 ;
  wire pc_I;
  wire pc_Sum;
  wire sync_reset;
  wire xor_Sum;

  assign \^lopt_2  = lopt_3;
  assign lopt_2 = xor_Sum;
  block_design_microblaze_0_0_MB_MUXCY_XORCY_641 MUXCY_XOR_I
       (.Carry_Out(Carry_Out),
        .LO(LO),
        .O(pc_Sum),
        .S(xor_Sum),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(\^lopt_2 ));
  block_design_microblaze_0_0_MB_LUT4__parameterized33_642 NewPC_Mux
       (.ALU_Result(ALU_Result),
        .O(pc_Sum),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .jump(jump));
  block_design_microblaze_0_0_MB_FDE_643 PC_EX_DFF
       (.Clk(Clk),
        .OF_PipeRun(OF_PipeRun),
        .PC_EX(PC_EX),
        .PC_OF(PC_OF));
  block_design_microblaze_0_0_MB_SRL16E_644 PC_OF_Buffer
       (.Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .IReady(IReady),
        .PC_OF(PC_OF),
        .pc_I(pc_I));
  block_design_microblaze_0_0_MB_LUT4__parameterized31_645 SUM_I
       (.S(xor_Sum),
        .pc_I(pc_I));
  block_design_microblaze_0_0_MB_FDSE_646 \Set_DFF.PC_IF_DFF 
       (.Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .pc_I(pc_I),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module block_design_microblaze_0_0_PC_Bit__parameterized2_609
   (Carry_Out,
    \Using_FPGA.Native ,
    PC_OF,
    PC_EX,
    LO,
    ALU_Result,
    jump,
    sync_reset,
    PC_Write,
    Clk,
    IReady,
    Buffer_Addr,
    OF_PipeRun,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output Carry_Out;
  output [0:0]\Using_FPGA.Native ;
  output [0:0]PC_OF;
  output [0:0]PC_EX;
  input LO;
  input [0:0]ALU_Result;
  input jump;
  input sync_reset;
  input PC_Write;
  input Clk;
  input IReady;
  input [2:0]Buffer_Addr;
  input OF_PipeRun;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ALU_Result;
  wire [2:0]Buffer_Addr;
  wire Carry_Out;
  wire Clk;
  wire IReady;
  wire LO;
  wire OF_PipeRun;
  wire [0:0]PC_EX;
  wire [0:0]PC_OF;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native ;
  wire jump;
  wire lopt;
  wire lopt_1;
  wire \^lopt_2 ;
  wire pc_I;
  wire pc_Sum;
  wire sync_reset;
  wire xor_Sum;

  assign \^lopt_2  = lopt_3;
  assign lopt_2 = xor_Sum;
  block_design_microblaze_0_0_MB_MUXCY_XORCY_635 MUXCY_XOR_I
       (.Carry_Out(Carry_Out),
        .LO(LO),
        .O(pc_Sum),
        .S(xor_Sum),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(\^lopt_2 ));
  block_design_microblaze_0_0_MB_LUT4__parameterized33_636 NewPC_Mux
       (.ALU_Result(ALU_Result),
        .O(pc_Sum),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .jump(jump));
  block_design_microblaze_0_0_MB_FDE_637 PC_EX_DFF
       (.Clk(Clk),
        .OF_PipeRun(OF_PipeRun),
        .PC_EX(PC_EX),
        .PC_OF(PC_OF));
  block_design_microblaze_0_0_MB_SRL16E_638 PC_OF_Buffer
       (.Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .IReady(IReady),
        .PC_OF(PC_OF),
        .pc_I(pc_I));
  block_design_microblaze_0_0_MB_LUT4__parameterized31_639 SUM_I
       (.S(xor_Sum),
        .pc_I(pc_I));
  block_design_microblaze_0_0_MB_FDSE_640 \Set_DFF.PC_IF_DFF 
       (.Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .pc_I(pc_I),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module block_design_microblaze_0_0_PC_Bit__parameterized2_610
   (Carry_Out,
    \Using_FPGA.Native ,
    PC_OF,
    PC_EX,
    LO,
    ALU_Result,
    jump,
    sync_reset,
    PC_Write,
    Clk,
    IReady,
    Buffer_Addr,
    OF_PipeRun,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output Carry_Out;
  output [0:0]\Using_FPGA.Native ;
  output [0:0]PC_OF;
  output [0:0]PC_EX;
  input LO;
  input [0:0]ALU_Result;
  input jump;
  input sync_reset;
  input PC_Write;
  input Clk;
  input IReady;
  input [2:0]Buffer_Addr;
  input OF_PipeRun;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ALU_Result;
  wire [2:0]Buffer_Addr;
  wire Carry_Out;
  wire Clk;
  wire IReady;
  wire LO;
  wire OF_PipeRun;
  wire [0:0]PC_EX;
  wire [0:0]PC_OF;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native ;
  wire jump;
  wire lopt;
  wire lopt_1;
  wire \^lopt_2 ;
  wire pc_I;
  wire pc_Sum;
  wire sync_reset;
  wire xor_Sum;

  assign \^lopt_2  = lopt_3;
  assign lopt_2 = xor_Sum;
  block_design_microblaze_0_0_MB_MUXCY_XORCY_629 MUXCY_XOR_I
       (.Carry_Out(Carry_Out),
        .LO(LO),
        .O(pc_Sum),
        .S(xor_Sum),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(\^lopt_2 ));
  block_design_microblaze_0_0_MB_LUT4__parameterized33_630 NewPC_Mux
       (.ALU_Result(ALU_Result),
        .O(pc_Sum),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .jump(jump));
  block_design_microblaze_0_0_MB_FDE_631 PC_EX_DFF
       (.Clk(Clk),
        .OF_PipeRun(OF_PipeRun),
        .PC_EX(PC_EX),
        .PC_OF(PC_OF));
  block_design_microblaze_0_0_MB_SRL16E_632 PC_OF_Buffer
       (.Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .IReady(IReady),
        .PC_OF(PC_OF),
        .pc_I(pc_I));
  block_design_microblaze_0_0_MB_LUT4__parameterized31_633 SUM_I
       (.S(xor_Sum),
        .pc_I(pc_I));
  block_design_microblaze_0_0_MB_FDSE_634 \Set_DFF.PC_IF_DFF 
       (.Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .pc_I(pc_I),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module block_design_microblaze_0_0_PC_Bit__parameterized2_611
   (Carry_Out,
    \Using_FPGA.Native ,
    PC_OF,
    PC_EX,
    LO,
    ALU_Result,
    jump,
    sync_reset,
    PC_Write,
    Clk,
    IReady,
    Buffer_Addr,
    OF_PipeRun,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output Carry_Out;
  output [0:0]\Using_FPGA.Native ;
  output [0:0]PC_OF;
  output [0:0]PC_EX;
  input LO;
  input [0:0]ALU_Result;
  input jump;
  input sync_reset;
  input PC_Write;
  input Clk;
  input IReady;
  input [2:0]Buffer_Addr;
  input OF_PipeRun;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire [0:0]ALU_Result;
  wire [2:0]Buffer_Addr;
  wire Carry_Out;
  wire Clk;
  wire IReady;
  wire LO;
  wire OF_PipeRun;
  wire [0:0]PC_EX;
  wire [0:0]PC_OF;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native ;
  wire jump;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire pc_I;
  wire pc_Sum;
  wire sync_reset;
  wire xor_Sum;

  block_design_microblaze_0_0_MB_MUXCY_XORCY_623 MUXCY_XOR_I
       (.Carry_Out(Carry_Out),
        .LO(LO),
        .O(pc_Sum),
        .S(xor_Sum),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_10(lopt_10),
        .lopt_11(lopt_11),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .lopt_9(lopt_9));
  block_design_microblaze_0_0_MB_LUT4__parameterized33_624 NewPC_Mux
       (.ALU_Result(ALU_Result),
        .O(pc_Sum),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .jump(jump));
  block_design_microblaze_0_0_MB_FDE_625 PC_EX_DFF
       (.Clk(Clk),
        .OF_PipeRun(OF_PipeRun),
        .PC_EX(PC_EX),
        .PC_OF(PC_OF));
  block_design_microblaze_0_0_MB_SRL16E_626 PC_OF_Buffer
       (.Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .IReady(IReady),
        .PC_OF(PC_OF),
        .pc_I(pc_I));
  block_design_microblaze_0_0_MB_LUT4__parameterized31_627 SUM_I
       (.S(xor_Sum),
        .pc_I(pc_I));
  block_design_microblaze_0_0_MB_FDSE_628 \Set_DFF.PC_IF_DFF 
       (.Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .pc_I(pc_I),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module block_design_microblaze_0_0_PC_Bit__parameterized2_612
   (Carry_Out,
    \Using_FPGA.Native ,
    PC_OF,
    PC_EX,
    LO,
    ALU_Result,
    jump,
    sync_reset,
    PC_Write,
    Clk,
    IReady,
    Buffer_Addr,
    OF_PipeRun,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output Carry_Out;
  output [0:0]\Using_FPGA.Native ;
  output [0:0]PC_OF;
  output [0:0]PC_EX;
  input LO;
  input [0:0]ALU_Result;
  input jump;
  input sync_reset;
  input PC_Write;
  input Clk;
  input IReady;
  input [2:0]Buffer_Addr;
  input OF_PipeRun;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ALU_Result;
  wire [2:0]Buffer_Addr;
  wire Carry_Out;
  wire Clk;
  wire IReady;
  wire LO;
  wire OF_PipeRun;
  wire [0:0]PC_EX;
  wire [0:0]PC_OF;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native ;
  wire jump;
  wire lopt;
  wire lopt_1;
  wire \^lopt_2 ;
  wire pc_I;
  wire pc_Sum;
  wire sync_reset;
  wire xor_Sum;

  assign \^lopt_2  = lopt_3;
  assign lopt_2 = xor_Sum;
  block_design_microblaze_0_0_MB_MUXCY_XORCY_617 MUXCY_XOR_I
       (.Carry_Out(Carry_Out),
        .LO(LO),
        .O(pc_Sum),
        .S(xor_Sum),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(\^lopt_2 ));
  block_design_microblaze_0_0_MB_LUT4__parameterized33_618 NewPC_Mux
       (.ALU_Result(ALU_Result),
        .O(pc_Sum),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .jump(jump));
  block_design_microblaze_0_0_MB_FDE_619 PC_EX_DFF
       (.Clk(Clk),
        .OF_PipeRun(OF_PipeRun),
        .PC_EX(PC_EX),
        .PC_OF(PC_OF));
  block_design_microblaze_0_0_MB_SRL16E_620 PC_OF_Buffer
       (.Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .IReady(IReady),
        .PC_OF(PC_OF),
        .pc_I(pc_I));
  block_design_microblaze_0_0_MB_LUT4__parameterized31_621 SUM_I
       (.S(xor_Sum),
        .pc_I(pc_I));
  block_design_microblaze_0_0_MB_FDSE_622 \Set_DFF.PC_IF_DFF 
       (.Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .pc_I(pc_I),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module block_design_microblaze_0_0_PC_Bit__parameterized2_613
   (Carry_Out,
    \Using_FPGA.Native ,
    PC_OF,
    PC_EX,
    Carry_In,
    ALU_Result,
    jump,
    sync_reset,
    PC_Write,
    Clk,
    IReady,
    Buffer_Addr,
    OF_PipeRun,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output Carry_Out;
  output [0:0]\Using_FPGA.Native ;
  output [0:0]PC_OF;
  output [0:0]PC_EX;
  input Carry_In;
  input [0:0]ALU_Result;
  input jump;
  input sync_reset;
  input PC_Write;
  input Clk;
  input IReady;
  input [2:0]Buffer_Addr;
  input OF_PipeRun;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]ALU_Result;
  wire [2:0]Buffer_Addr;
  wire Carry_In;
  wire Carry_Out;
  wire Clk;
  wire IReady;
  wire OF_PipeRun;
  wire [0:0]PC_EX;
  wire [0:0]PC_OF;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native ;
  wire jump;
  wire lopt;
  wire lopt_1;
  wire \^lopt_2 ;
  wire pc_I;
  wire pc_Sum;
  wire sync_reset;
  wire xor_Sum;

  assign \^lopt_2  = lopt_3;
  assign lopt_2 = xor_Sum;
  block_design_microblaze_0_0_MB_MUXCY_XORCY_614 MUXCY_XOR_I
       (.Carry_In(Carry_In),
        .Carry_Out(Carry_Out),
        .O(pc_Sum),
        .S(xor_Sum),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(\^lopt_2 ));
  block_design_microblaze_0_0_MB_LUT4__parameterized33 NewPC_Mux
       (.ALU_Result(ALU_Result),
        .O(pc_Sum),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .jump(jump));
  block_design_microblaze_0_0_MB_FDE PC_EX_DFF
       (.Clk(Clk),
        .OF_PipeRun(OF_PipeRun),
        .PC_EX(PC_EX),
        .PC_OF(PC_OF));
  block_design_microblaze_0_0_MB_SRL16E_615 PC_OF_Buffer
       (.Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .IReady(IReady),
        .PC_OF(PC_OF),
        .pc_I(pc_I));
  block_design_microblaze_0_0_MB_LUT4__parameterized31 SUM_I
       (.S(xor_Sum),
        .pc_I(pc_I));
  block_design_microblaze_0_0_MB_FDSE_616 \Set_DFF.PC_IF_DFF 
       (.Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .pc_I(pc_I),
        .sync_reset(sync_reset));
endmodule

module block_design_microblaze_0_0_PC_Module
   (I3,
    PC_OF,
    I3_0,
    I3_1,
    I3_2,
    I3_3,
    \Using_FPGA.Native ,
    PC_EX,
    opsel1_PC,
    Enable_Interrupt,
    \Using_FPGA.Native_0 ,
    msr_I,
    ALU_Result,
    jump,
    sync_reset,
    PC_Write,
    Clk,
    IReady,
    Buffer_Addr,
    OF_PipeRun,
    DI);
  output I3;
  output [0:31]PC_OF;
  output I3_0;
  output I3_1;
  output I3_2;
  output I3_3;
  output [31:0]\Using_FPGA.Native ;
  output [0:31]PC_EX;
  input opsel1_PC;
  input Enable_Interrupt;
  input \Using_FPGA.Native_0 ;
  input [1:0]msr_I;
  input [0:31]ALU_Result;
  input jump;
  input sync_reset;
  input PC_Write;
  input Clk;
  input IReady;
  input [2:0]Buffer_Addr;
  input OF_PipeRun;
  input DI;

  wire [0:31]ALU_Result;
  wire [2:0]Buffer_Addr;
  wire Carry_1;
  wire Carry_10;
  wire Carry_11;
  wire Carry_12;
  wire Carry_13;
  wire Carry_14;
  wire Carry_15;
  wire Carry_16;
  wire Carry_17;
  wire Carry_18;
  wire Carry_19;
  wire Carry_2;
  wire Carry_20;
  wire Carry_21;
  wire Carry_22;
  wire Carry_23;
  wire Carry_24;
  wire Carry_25;
  wire Carry_26;
  wire Carry_27;
  wire Carry_28;
  wire Carry_29;
  wire Carry_3;
  wire Carry_30;
  wire Carry_31;
  wire Carry_4;
  wire Carry_5;
  wire Carry_6;
  wire Carry_7;
  wire Carry_8;
  wire Carry_9;
  wire Clk;
  wire DI;
  wire Enable_Interrupt;
  wire I3;
  wire I3_0;
  wire I3_1;
  wire I3_2;
  wire I3_3;
  wire IReady;
  wire OF_PipeRun;
  wire [0:31]PC_EX;
  wire [0:31]PC_OF;
  wire PC_Write;
  wire [31:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire jump;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_12;
  wire lopt_13;
  wire lopt_14;
  wire lopt_15;
  wire lopt_16;
  wire lopt_17;
  wire lopt_18;
  wire lopt_19;
  wire lopt_2;
  wire lopt_20;
  wire lopt_21;
  wire lopt_22;
  wire lopt_23;
  wire lopt_24;
  wire lopt_25;
  wire lopt_26;
  wire lopt_27;
  wire lopt_28;
  wire lopt_29;
  wire lopt_3;
  wire lopt_30;
  wire lopt_31;
  wire lopt_32;
  wire lopt_33;
  wire lopt_34;
  wire lopt_35;
  wire lopt_36;
  wire lopt_37;
  wire lopt_38;
  wire lopt_39;
  wire lopt_4;
  wire lopt_40;
  wire lopt_41;
  wire lopt_42;
  wire lopt_43;
  wire lopt_44;
  wire lopt_45;
  wire lopt_46;
  wire lopt_47;
  wire lopt_48;
  wire lopt_49;
  wire lopt_5;
  wire lopt_50;
  wire lopt_51;
  wire lopt_52;
  wire lopt_53;
  wire lopt_54;
  wire lopt_55;
  wire lopt_56;
  wire lopt_57;
  wire lopt_58;
  wire lopt_59;
  wire lopt_6;
  wire lopt_60;
  wire lopt_61;
  wire lopt_62;
  wire lopt_63;
  wire lopt_64;
  wire lopt_65;
  wire lopt_66;
  wire lopt_67;
  wire lopt_68;
  wire lopt_69;
  wire lopt_7;
  wire lopt_70;
  wire lopt_71;
  wire lopt_72;
  wire lopt_73;
  wire lopt_74;
  wire lopt_75;
  wire lopt_76;
  wire lopt_77;
  wire lopt_78;
  wire lopt_79;
  wire lopt_8;
  wire lopt_80;
  wire lopt_81;
  wire lopt_82;
  wire lopt_83;
  wire lopt_84;
  wire lopt_85;
  wire lopt_86;
  wire lopt_87;
  wire lopt_88;
  wire lopt_89;
  wire lopt_9;
  wire lopt_90;
  wire lopt_91;
  wire lopt_92;
  wire [1:0]msr_I;
  wire opsel1_PC;
  wire sync_reset;

  block_design_microblaze_0_0_PC_Bit__parameterized2 \All_Bits.Using_FPGA.PC_GEN[0].PC_Bit_I 
       (.ALU_Result(ALU_Result[0]),
        .Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .I3_3(I3_3),
        .IReady(IReady),
        .LO(Carry_31),
        .OF_PipeRun(OF_PipeRun),
        .PC_EX(PC_EX[0]),
        .PC_OF(PC_OF[0]),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native [31]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .jump(jump),
        .lopt(lopt_91),
        .lopt_1(lopt_92),
        .opsel1_PC(opsel1_PC),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_PC_Bit__parameterized2_584 \All_Bits.Using_FPGA.PC_GEN[10].PC_Bit_I 
       (.ALU_Result(ALU_Result[10]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(Carry_22),
        .Clk(Clk),
        .IReady(IReady),
        .LO(Carry_21),
        .OF_PipeRun(OF_PipeRun),
        .PC_EX(PC_EX[10]),
        .PC_OF(PC_OF[10]),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native [21]),
        .jump(jump),
        .lopt(lopt_59),
        .lopt_1(lopt_60),
        .lopt_2(lopt_61),
        .lopt_3(lopt_68),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_PC_Bit__parameterized2_585 \All_Bits.Using_FPGA.PC_GEN[11].PC_Bit_I 
       (.ALU_Result(ALU_Result[11]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(Carry_21),
        .Clk(Clk),
        .IReady(IReady),
        .LO(Carry_20),
        .OF_PipeRun(OF_PipeRun),
        .PC_EX(PC_EX[11]),
        .PC_OF(PC_OF[11]),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native [20]),
        .jump(jump),
        .lopt(lopt_59),
        .lopt_1(lopt_60),
        .lopt_10(lopt_69),
        .lopt_11(lopt_70),
        .lopt_2(lopt_61),
        .lopt_3(lopt_62),
        .lopt_4(lopt_63),
        .lopt_5(lopt_64),
        .lopt_6(lopt_65),
        .lopt_7(lopt_66),
        .lopt_8(lopt_67),
        .lopt_9(lopt_68),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_PC_Bit__parameterized2_586 \All_Bits.Using_FPGA.PC_GEN[12].PC_Bit_I 
       (.ALU_Result(ALU_Result[12]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(Carry_20),
        .Clk(Clk),
        .IReady(IReady),
        .LO(Carry_19),
        .OF_PipeRun(OF_PipeRun),
        .PC_EX(PC_EX[12]),
        .PC_OF(PC_OF[12]),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native [19]),
        .jump(jump),
        .lopt(lopt_53),
        .lopt_1(lopt_54),
        .lopt_2(lopt_55),
        .lopt_3(lopt_58),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_PC_Bit__parameterized2_587 \All_Bits.Using_FPGA.PC_GEN[13].PC_Bit_I 
       (.ALU_Result(ALU_Result[13]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(Carry_19),
        .Clk(Clk),
        .IReady(IReady),
        .LO(Carry_18),
        .OF_PipeRun(OF_PipeRun),
        .PC_EX(PC_EX[13]),
        .PC_OF(PC_OF[13]),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native [18]),
        .jump(jump),
        .lopt(lopt_50),
        .lopt_1(lopt_51),
        .lopt_2(lopt_52),
        .lopt_3(lopt_57),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_PC_Bit__parameterized2_588 \All_Bits.Using_FPGA.PC_GEN[14].PC_Bit_I 
       (.ALU_Result(ALU_Result[14]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(Carry_18),
        .Clk(Clk),
        .IReady(IReady),
        .LO(Carry_17),
        .OF_PipeRun(OF_PipeRun),
        .PC_EX(PC_EX[14]),
        .PC_OF(PC_OF[14]),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native [17]),
        .jump(jump),
        .lopt(lopt_47),
        .lopt_1(lopt_48),
        .lopt_2(lopt_49),
        .lopt_3(lopt_56),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_PC_Bit__parameterized2_589 \All_Bits.Using_FPGA.PC_GEN[15].PC_Bit_I 
       (.ALU_Result(ALU_Result[15]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(Carry_17),
        .Clk(Clk),
        .IReady(IReady),
        .LO(Carry_16),
        .OF_PipeRun(OF_PipeRun),
        .PC_EX(PC_EX[15]),
        .PC_OF(PC_OF[15]),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native [16]),
        .jump(jump),
        .lopt(lopt_47),
        .lopt_1(lopt_48),
        .lopt_10(lopt_57),
        .lopt_11(lopt_58),
        .lopt_2(lopt_49),
        .lopt_3(lopt_50),
        .lopt_4(lopt_51),
        .lopt_5(lopt_52),
        .lopt_6(lopt_53),
        .lopt_7(lopt_54),
        .lopt_8(lopt_55),
        .lopt_9(lopt_56),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_PC_Bit__parameterized2_590 \All_Bits.Using_FPGA.PC_GEN[16].PC_Bit_I 
       (.ALU_Result(ALU_Result[16]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(Carry_16),
        .Clk(Clk),
        .IReady(IReady),
        .LO(Carry_15),
        .OF_PipeRun(OF_PipeRun),
        .PC_EX(PC_EX[16]),
        .PC_OF(PC_OF[16]),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native [15]),
        .jump(jump),
        .lopt(lopt_41),
        .lopt_1(lopt_42),
        .lopt_2(lopt_43),
        .lopt_3(lopt_46),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_PC_Bit__parameterized2_591 \All_Bits.Using_FPGA.PC_GEN[17].PC_Bit_I 
       (.ALU_Result(ALU_Result[17]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(Carry_15),
        .Clk(Clk),
        .IReady(IReady),
        .LO(Carry_14),
        .OF_PipeRun(OF_PipeRun),
        .PC_EX(PC_EX[17]),
        .PC_OF(PC_OF[17]),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native [14]),
        .jump(jump),
        .lopt(lopt_38),
        .lopt_1(lopt_39),
        .lopt_2(lopt_40),
        .lopt_3(lopt_45),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_PC_Bit__parameterized2_592 \All_Bits.Using_FPGA.PC_GEN[18].PC_Bit_I 
       (.ALU_Result(ALU_Result[18]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(Carry_14),
        .Clk(Clk),
        .IReady(IReady),
        .LO(Carry_13),
        .OF_PipeRun(OF_PipeRun),
        .PC_EX(PC_EX[18]),
        .PC_OF(PC_OF[18]),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native [13]),
        .jump(jump),
        .lopt(lopt_35),
        .lopt_1(lopt_36),
        .lopt_2(lopt_37),
        .lopt_3(lopt_44),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_PC_Bit__parameterized2_593 \All_Bits.Using_FPGA.PC_GEN[19].PC_Bit_I 
       (.ALU_Result(ALU_Result[19]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(Carry_13),
        .Clk(Clk),
        .IReady(IReady),
        .LO(Carry_12),
        .OF_PipeRun(OF_PipeRun),
        .PC_EX(PC_EX[19]),
        .PC_OF(PC_OF[19]),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native [12]),
        .jump(jump),
        .lopt(lopt_35),
        .lopt_1(lopt_36),
        .lopt_10(lopt_45),
        .lopt_11(lopt_46),
        .lopt_2(lopt_37),
        .lopt_3(lopt_38),
        .lopt_4(lopt_39),
        .lopt_5(lopt_40),
        .lopt_6(lopt_41),
        .lopt_7(lopt_42),
        .lopt_8(lopt_43),
        .lopt_9(lopt_44),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_PC_Bit__parameterized2_594 \All_Bits.Using_FPGA.PC_GEN[1].PC_Bit_I 
       (.ALU_Result(ALU_Result[1]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(Carry_31),
        .Clk(Clk),
        .IReady(IReady),
        .LO(Carry_30),
        .OF_PipeRun(OF_PipeRun),
        .PC_EX(PC_EX[1]),
        .PC_OF(PC_OF[1]),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native [30]),
        .jump(jump),
        .lopt(lopt_86),
        .lopt_1(lopt_87),
        .lopt_2(lopt_88),
        .lopt_3(lopt_90),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_PC_Bit__parameterized2_595 \All_Bits.Using_FPGA.PC_GEN[20].PC_Bit_I 
       (.ALU_Result(ALU_Result[20]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(Carry_12),
        .Clk(Clk),
        .IReady(IReady),
        .LO(Carry_11),
        .OF_PipeRun(OF_PipeRun),
        .PC_EX(PC_EX[20]),
        .PC_OF(PC_OF[20]),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native [11]),
        .jump(jump),
        .lopt(lopt_29),
        .lopt_1(lopt_30),
        .lopt_2(lopt_31),
        .lopt_3(lopt_34),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_PC_Bit__parameterized2_596 \All_Bits.Using_FPGA.PC_GEN[21].PC_Bit_I 
       (.ALU_Result(ALU_Result[21]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(Carry_11),
        .Clk(Clk),
        .IReady(IReady),
        .LO(Carry_10),
        .OF_PipeRun(OF_PipeRun),
        .PC_EX(PC_EX[21]),
        .PC_OF(PC_OF[21]),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native [10]),
        .jump(jump),
        .lopt(lopt_26),
        .lopt_1(lopt_27),
        .lopt_2(lopt_28),
        .lopt_3(lopt_33),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_PC_Bit__parameterized2_597 \All_Bits.Using_FPGA.PC_GEN[22].PC_Bit_I 
       (.ALU_Result(ALU_Result[22]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(Carry_10),
        .Clk(Clk),
        .IReady(IReady),
        .LO(Carry_9),
        .OF_PipeRun(OF_PipeRun),
        .PC_EX(PC_EX[22]),
        .PC_OF(PC_OF[22]),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native [9]),
        .jump(jump),
        .lopt(lopt_23),
        .lopt_1(lopt_24),
        .lopt_2(lopt_25),
        .lopt_3(lopt_32),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_PC_Bit__parameterized2_598 \All_Bits.Using_FPGA.PC_GEN[23].PC_Bit_I 
       (.ALU_Result(ALU_Result[23]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(Carry_9),
        .Clk(Clk),
        .IReady(IReady),
        .LO(Carry_8),
        .OF_PipeRun(OF_PipeRun),
        .PC_EX(PC_EX[23]),
        .PC_OF(PC_OF[23]),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native [8]),
        .jump(jump),
        .lopt(lopt_23),
        .lopt_1(lopt_24),
        .lopt_10(lopt_33),
        .lopt_11(lopt_34),
        .lopt_2(lopt_25),
        .lopt_3(lopt_26),
        .lopt_4(lopt_27),
        .lopt_5(lopt_28),
        .lopt_6(lopt_29),
        .lopt_7(lopt_30),
        .lopt_8(lopt_31),
        .lopt_9(lopt_32),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_PC_Bit__parameterized2_599 \All_Bits.Using_FPGA.PC_GEN[24].PC_Bit_I 
       (.ALU_Result(ALU_Result[24]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(Carry_8),
        .Clk(Clk),
        .IReady(IReady),
        .LO(Carry_7),
        .OF_PipeRun(OF_PipeRun),
        .PC_EX(PC_EX[24]),
        .PC_OF(PC_OF[24]),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native [7]),
        .jump(jump),
        .lopt(lopt_17),
        .lopt_1(lopt_18),
        .lopt_2(lopt_19),
        .lopt_3(lopt_22),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_PC_Bit__parameterized2_600 \All_Bits.Using_FPGA.PC_GEN[25].PC_Bit_I 
       (.ALU_Result(ALU_Result[25]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(Carry_7),
        .Clk(Clk),
        .IReady(IReady),
        .LO(Carry_6),
        .OF_PipeRun(OF_PipeRun),
        .PC_EX(PC_EX[25]),
        .PC_OF(PC_OF[25]),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native [6]),
        .jump(jump),
        .lopt(lopt_14),
        .lopt_1(lopt_15),
        .lopt_2(lopt_16),
        .lopt_3(lopt_21),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_PC_Bit__parameterized2_601 \All_Bits.Using_FPGA.PC_GEN[26].PC_Bit_I 
       (.ALU_Result(ALU_Result[26]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(Carry_6),
        .Clk(Clk),
        .IReady(IReady),
        .LO(Carry_5),
        .OF_PipeRun(OF_PipeRun),
        .PC_EX(PC_EX[26]),
        .PC_OF(PC_OF[26]),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native [5]),
        .jump(jump),
        .lopt(lopt_11),
        .lopt_1(lopt_12),
        .lopt_2(lopt_13),
        .lopt_3(lopt_20),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_PC_Bit__parameterized2_602 \All_Bits.Using_FPGA.PC_GEN[27].PC_Bit_I 
       (.ALU_Result(ALU_Result[27]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(Carry_5),
        .Clk(Clk),
        .I3_2(I3_2),
        .IReady(IReady),
        .LO(Carry_4),
        .OF_PipeRun(OF_PipeRun),
        .PC_EX(PC_EX[27]),
        .PC_OF(PC_OF[27]),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native [4]),
        .jump(jump),
        .lopt(lopt_11),
        .lopt_1(lopt_12),
        .lopt_10(lopt_21),
        .lopt_11(lopt_22),
        .lopt_2(lopt_13),
        .lopt_3(lopt_14),
        .lopt_4(lopt_15),
        .lopt_5(lopt_16),
        .lopt_6(lopt_17),
        .lopt_7(lopt_18),
        .lopt_8(lopt_19),
        .lopt_9(lopt_20),
        .msr_I(msr_I[1]),
        .opsel1_PC(opsel1_PC),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_PC_Bit__parameterized2_603 \All_Bits.Using_FPGA.PC_GEN[28].PC_Bit_I 
       (.ALU_Result(ALU_Result[28]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(Carry_4),
        .Clk(Clk),
        .I3_1(I3_1),
        .IReady(IReady),
        .LO(Carry_3),
        .OF_PipeRun(OF_PipeRun),
        .PC_EX(PC_EX[28]),
        .PC_OF(PC_OF[28]),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native [3]),
        .jump(jump),
        .lopt(lopt_5),
        .lopt_1(lopt_6),
        .lopt_2(lopt_7),
        .lopt_3(lopt_10),
        .msr_I(msr_I[0]),
        .opsel1_PC(opsel1_PC),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_PC_Bit__parameterized2_604 \All_Bits.Using_FPGA.PC_GEN[29].PC_Bit_I 
       (.ALU_Result(ALU_Result[29]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(Carry_3),
        .Clk(Clk),
        .DI(DI),
        .I3_0(I3_0),
        .IReady(IReady),
        .OF_PipeRun(OF_PipeRun),
        .PC_EX(PC_EX[29]),
        .PC_OF(PC_OF[29]),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native [2]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (Carry_2),
        .jump(jump),
        .lopt(lopt_3),
        .lopt_1(lopt_4),
        .lopt_2(lopt_9),
        .opsel1_PC(opsel1_PC),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_PC_Bit__parameterized2_605 \All_Bits.Using_FPGA.PC_GEN[2].PC_Bit_I 
       (.ALU_Result(ALU_Result[2]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(Carry_30),
        .Clk(Clk),
        .IReady(IReady),
        .LO(Carry_29),
        .OF_PipeRun(OF_PipeRun),
        .PC_EX(PC_EX[2]),
        .PC_OF(PC_OF[2]),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native [29]),
        .jump(jump),
        .lopt(lopt_83),
        .lopt_1(lopt_84),
        .lopt_2(lopt_85),
        .lopt_3(lopt_89),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_PC_Bit \All_Bits.Using_FPGA.PC_GEN[30].PC_Bit_I 
       (.ALU_Result(ALU_Result[30]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(Carry_1),
        .Clk(Clk),
        .Enable_Interrupt(Enable_Interrupt),
        .I3(I3),
        .IReady(IReady),
        .LO(Carry_2),
        .OF_PipeRun(OF_PipeRun),
        .PC_EX(PC_EX[30]),
        .PC_OF(PC_OF[30]),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native [1]),
        .jump(jump),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_8),
        .opsel1_PC(opsel1_PC),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_PC_Bit_606 \All_Bits.Using_FPGA.PC_GEN[31].PC_Bit_I 
       (.ALU_Result(ALU_Result[31]),
        .Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .IReady(IReady),
        .LO(Carry_1),
        .OF_PipeRun(OF_PipeRun),
        .PC_EX(PC_EX[31]),
        .PC_OF(PC_OF[31]),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native [0]),
        .jump(jump),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_10(lopt_9),
        .lopt_11(lopt_10),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(DI),
        .lopt_5(lopt_4),
        .lopt_6(lopt_5),
        .lopt_7(lopt_6),
        .lopt_8(lopt_7),
        .lopt_9(lopt_8),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_PC_Bit__parameterized2_607 \All_Bits.Using_FPGA.PC_GEN[3].PC_Bit_I 
       (.ALU_Result(ALU_Result[3]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(Carry_29),
        .Clk(Clk),
        .IReady(IReady),
        .LO(Carry_28),
        .OF_PipeRun(OF_PipeRun),
        .PC_EX(PC_EX[3]),
        .PC_OF(PC_OF[3]),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native [28]),
        .jump(jump),
        .lopt(lopt_83),
        .lopt_1(lopt_84),
        .lopt_2(lopt_85),
        .lopt_3(lopt_86),
        .lopt_4(lopt_87),
        .lopt_5(lopt_88),
        .lopt_6(lopt_89),
        .lopt_7(lopt_90),
        .lopt_8(lopt_91),
        .lopt_9(lopt_92),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_PC_Bit__parameterized2_608 \All_Bits.Using_FPGA.PC_GEN[4].PC_Bit_I 
       (.ALU_Result(ALU_Result[4]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(Carry_28),
        .Clk(Clk),
        .IReady(IReady),
        .LO(Carry_27),
        .OF_PipeRun(OF_PipeRun),
        .PC_EX(PC_EX[4]),
        .PC_OF(PC_OF[4]),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native [27]),
        .jump(jump),
        .lopt(lopt_77),
        .lopt_1(lopt_78),
        .lopt_2(lopt_79),
        .lopt_3(lopt_82),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_PC_Bit__parameterized2_609 \All_Bits.Using_FPGA.PC_GEN[5].PC_Bit_I 
       (.ALU_Result(ALU_Result[5]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(Carry_27),
        .Clk(Clk),
        .IReady(IReady),
        .LO(Carry_26),
        .OF_PipeRun(OF_PipeRun),
        .PC_EX(PC_EX[5]),
        .PC_OF(PC_OF[5]),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native [26]),
        .jump(jump),
        .lopt(lopt_74),
        .lopt_1(lopt_75),
        .lopt_2(lopt_76),
        .lopt_3(lopt_81),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_PC_Bit__parameterized2_610 \All_Bits.Using_FPGA.PC_GEN[6].PC_Bit_I 
       (.ALU_Result(ALU_Result[6]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(Carry_26),
        .Clk(Clk),
        .IReady(IReady),
        .LO(Carry_25),
        .OF_PipeRun(OF_PipeRun),
        .PC_EX(PC_EX[6]),
        .PC_OF(PC_OF[6]),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native [25]),
        .jump(jump),
        .lopt(lopt_71),
        .lopt_1(lopt_72),
        .lopt_2(lopt_73),
        .lopt_3(lopt_80),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_PC_Bit__parameterized2_611 \All_Bits.Using_FPGA.PC_GEN[7].PC_Bit_I 
       (.ALU_Result(ALU_Result[7]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(Carry_25),
        .Clk(Clk),
        .IReady(IReady),
        .LO(Carry_24),
        .OF_PipeRun(OF_PipeRun),
        .PC_EX(PC_EX[7]),
        .PC_OF(PC_OF[7]),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native [24]),
        .jump(jump),
        .lopt(lopt_71),
        .lopt_1(lopt_72),
        .lopt_10(lopt_81),
        .lopt_11(lopt_82),
        .lopt_2(lopt_73),
        .lopt_3(lopt_74),
        .lopt_4(lopt_75),
        .lopt_5(lopt_76),
        .lopt_6(lopt_77),
        .lopt_7(lopt_78),
        .lopt_8(lopt_79),
        .lopt_9(lopt_80),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_PC_Bit__parameterized2_612 \All_Bits.Using_FPGA.PC_GEN[8].PC_Bit_I 
       (.ALU_Result(ALU_Result[8]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(Carry_24),
        .Clk(Clk),
        .IReady(IReady),
        .LO(Carry_23),
        .OF_PipeRun(OF_PipeRun),
        .PC_EX(PC_EX[8]),
        .PC_OF(PC_OF[8]),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native [23]),
        .jump(jump),
        .lopt(lopt_65),
        .lopt_1(lopt_66),
        .lopt_2(lopt_67),
        .lopt_3(lopt_70),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_PC_Bit__parameterized2_613 \All_Bits.Using_FPGA.PC_GEN[9].PC_Bit_I 
       (.ALU_Result(ALU_Result[9]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_In(Carry_22),
        .Carry_Out(Carry_23),
        .Clk(Clk),
        .IReady(IReady),
        .OF_PipeRun(OF_PipeRun),
        .PC_EX(PC_EX[9]),
        .PC_OF(PC_OF[9]),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native [22]),
        .jump(jump),
        .lopt(lopt_62),
        .lopt_1(lopt_63),
        .lopt_2(lopt_64),
        .lopt_3(lopt_69),
        .sync_reset(sync_reset));
endmodule

module block_design_microblaze_0_0_PreFetch_Buffer
   (instr_OF_raw,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    D,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    \Using_FPGA.Native_7 ,
    \Using_FPGA.Native_8 ,
    of_Valid_Raw,
    \Using_FPGA.set_BIP_I_reg ,
    \Using_MSR_Instr.write_MSR_I_reg ,
    \Using_FPGA.Native_9 ,
    mtsmsr_write_i_reg,
    \Using_FPGA.Native_10 ,
    \Using_MSR_Instr.msrxxx_carry_reg ,
    DI,
    mul_Executing0,
    mbar_first,
    buffer_Full,
    mul_first51_out,
    d_AS_I30_out,
    inHibit_EX_reg,
    \Using_FPGA.Native_11 ,
    msrxxx_write_carry,
    \Using_FPGA.Native_12 ,
    is_swx_I0,
    \Using_FPGA.Native_13 ,
    \Using_FPGA.Native_14 ,
    mbar_is_sleep0,
    of_mbar_decode,
    \Using_FPGA.Native_15 ,
    \Using_FPGA.Native_16 ,
    dbg_brki_hit0,
    \Serial_Dbg_Intf.control_reg_reg[8] ,
    dbg_pause_reg,
    reset_BIP_I15_out,
    enable_Interrupts_I,
    Reg_Test_Equal_i,
    Reg_Test_Equal_N_i13_out,
    force1_i43_out,
    use_Reg_Neg_S_i42_out,
    force_Val1_i41_out,
    use_Reg_Neg_DI_i40_out,
    \Using_FPGA.Native_17 ,
    D_32,
    \Using_FPGA.Native_18 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    alu_Op_II,
    \Using_FPGA.take_Intr_2nd_Phase_reg_0 ,
    CLZ_Instr0,
    \Using_FPGA.Native_19 ,
    MSRclr_Instr_i0_in,
    ex_mulhsu_instr_i0,
    \Using_FPGA.Native_20 ,
    ex_mulhu_instr_i0,
    ex_mulh_instr_i0,
    BitField_Insert0,
    of_fsl_blocking,
    BitField_Extract0,
    \Use_Async_Reset.sync_reset_reg ,
    p_20_in,
    mb_Put_i5_out,
    Not_MB_Get_Op0,
    of_fsl_test,
    of_fsl_control,
    dbg_pause_reg_0,
    \Using_FPGA.Native_21 ,
    use_ALU_Carry21_out,
    \Using_FPGA.Native_22 ,
    S,
    \Using_FPGA.Native_23 ,
    \Using_FPGA.Native_24 ,
    is_lwx_I_reg,
    \Using_FPGA.Native_25 ,
    doublet_i_reg,
    byte_i_reg,
    \Using_FPGA.Native_26 ,
    \Using_FPGA.Native_27 ,
    \Using_FPGA.Native_28 ,
    Sext16_reg,
    Sext8_reg,
    D_0,
    D_1,
    D_2,
    D_3,
    D_4,
    D_5,
    D_6,
    D_7,
    D_8,
    D_9,
    D_10,
    D_11,
    D_12,
    D_13,
    D_14,
    D_15,
    D_16,
    D_17,
    D_18,
    D_19,
    D_20,
    D_21,
    D_22,
    D_23,
    D_24,
    D_25,
    D_26,
    D_27,
    D_28,
    D_29,
    D_30,
    D_31,
    I3,
    I3_32,
    I3_33,
    I3_34,
    CI,
    Y,
    Clk,
    Instr_Data,
    S_0,
    take_Intr_Now_III,
    \write_Addr_I_reg[3] ,
    \Using_FPGA.set_BIP_I_reg_0 ,
    sync_reset,
    \Using_MSR_Instr.write_MSR_I_reg_0 ,
    mtsmsr_write_i_reg_0,
    \Using_FSL_Links.mb_Get_i_reg ,
    \Using_FSL_Links.mb_Get_i_reg_0 ,
    mb_Get_i,
    msrxxx_carry,
    \Using_FPGA.Native_I1 ,
    mul_Executing_reg,
    \Using_FPGA.Native_29 ,
    missed_IFetch,
    mul_Executing_reg_0,
    mul_first,
    FSL_Put_Inhibit,
    mbar_first_reg,
    mbar_first_reg_0,
    \Using_MSR_Instr.msrxxx_write_carry_reg ,
    inHibit_EX,
    dbg_brki_hit,
    dbg_pause,
    \Using_FPGA.Native_30 ,
    take_Intr_Now_II,
    trace_jump_taken_i_reg,
    \Area_Debug_Control.dbg_brki_hit_i_2 ,
    break_Pipe_i_reg__0,
    nonvalid_IFetch_n_reg,
    nonvalid_IFetch_n_reg_0,
    nonvalid_IFetch_n_reg_1,
    S115_out,
    force_Val2_N,
    is_lwx_I,
    is_swx_I,
    isdoublet,
    isbyte,
    sext16,
    Sext8_reg_0,
    \Using_FPGA.Native_31 ,
    \Using_FPGA.Native_32 ,
    op2_Reg__15,
    op2_Reg__16,
    op2_Reg__17,
    op2_Reg__18,
    op2_Reg__19,
    op2_Reg__20,
    op2_Reg__21,
    op2_Reg__22,
    op2_Reg__23,
    op2_Reg__24,
    op2_Reg__25,
    op2_Reg__26,
    op2_Reg__27,
    op2_Reg__28,
    op2_Reg__29,
    op2_Reg__30,
    op2_Reg,
    op2_Reg__0,
    op2_Reg__1,
    op2_Reg__2,
    op2_Reg__3,
    op2_Reg__4,
    op2_Reg__5,
    op2_Reg__6,
    op2_Reg__7,
    op2_Reg__8,
    op2_Reg__9,
    op2_Reg__10,
    op2_Reg__11,
    op2_Reg__12,
    op2_Reg__13,
    op2_Reg__14,
    PC_OF,
    \Using_FPGA.Native_33 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6);
  output [11:0]instr_OF_raw;
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  output [13:0]D;
  output \Using_FPGA.Native_2 ;
  output \Using_FPGA.Native_3 ;
  output \Using_FPGA.Native_4 ;
  output \Using_FPGA.Native_5 ;
  output \Using_FPGA.Native_6 ;
  output \Using_FPGA.Native_7 ;
  output \Using_FPGA.Native_8 ;
  output of_Valid_Raw;
  output \Using_FPGA.set_BIP_I_reg ;
  output \Using_MSR_Instr.write_MSR_I_reg ;
  output \Using_FPGA.Native_9 ;
  output mtsmsr_write_i_reg;
  output \Using_FPGA.Native_10 ;
  output \Using_MSR_Instr.msrxxx_carry_reg ;
  output DI;
  output mul_Executing0;
  output mbar_first;
  output buffer_Full;
  output mul_first51_out;
  output d_AS_I30_out;
  output inHibit_EX_reg;
  output \Using_FPGA.Native_11 ;
  output msrxxx_write_carry;
  output \Using_FPGA.Native_12 ;
  output is_swx_I0;
  output \Using_FPGA.Native_13 ;
  output [4:0]\Using_FPGA.Native_14 ;
  output mbar_is_sleep0;
  output of_mbar_decode;
  output \Using_FPGA.Native_15 ;
  output \Using_FPGA.Native_16 ;
  output dbg_brki_hit0;
  output \Serial_Dbg_Intf.control_reg_reg[8] ;
  output [0:0]dbg_pause_reg;
  output reset_BIP_I15_out;
  output enable_Interrupts_I;
  output Reg_Test_Equal_i;
  output Reg_Test_Equal_N_i13_out;
  output force1_i43_out;
  output use_Reg_Neg_S_i42_out;
  output force_Val1_i41_out;
  output use_Reg_Neg_DI_i40_out;
  output \Using_FPGA.Native_17 ;
  output D_32;
  output \Using_FPGA.Native_18 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output [0:0]alu_Op_II;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_0 ;
  output CLZ_Instr0;
  output \Using_FPGA.Native_19 ;
  output MSRclr_Instr_i0_in;
  output ex_mulhsu_instr_i0;
  output \Using_FPGA.Native_20 ;
  output ex_mulhu_instr_i0;
  output ex_mulh_instr_i0;
  output BitField_Insert0;
  output of_fsl_blocking;
  output BitField_Extract0;
  output \Use_Async_Reset.sync_reset_reg ;
  output p_20_in;
  output mb_Put_i5_out;
  output Not_MB_Get_Op0;
  output of_fsl_test;
  output of_fsl_control;
  output dbg_pause_reg_0;
  output \Using_FPGA.Native_21 ;
  output use_ALU_Carry21_out;
  output \Using_FPGA.Native_22 ;
  output S;
  output \Using_FPGA.Native_23 ;
  output \Using_FPGA.Native_24 ;
  output is_lwx_I_reg;
  output \Using_FPGA.Native_25 ;
  output doublet_i_reg;
  output byte_i_reg;
  output \Using_FPGA.Native_26 ;
  output \Using_FPGA.Native_27 ;
  output \Using_FPGA.Native_28 ;
  output Sext16_reg;
  output Sext8_reg;
  output D_0;
  output D_1;
  output D_2;
  output D_3;
  output D_4;
  output D_5;
  output D_6;
  output D_7;
  output D_8;
  output D_9;
  output D_10;
  output D_11;
  output D_12;
  output D_13;
  output D_14;
  output D_15;
  output D_16;
  output D_17;
  output D_18;
  output D_19;
  output D_20;
  output D_21;
  output D_22;
  output D_23;
  output D_24;
  output D_25;
  output D_26;
  output D_27;
  output D_28;
  output D_29;
  output D_30;
  output D_31;
  output I3;
  output I3_32;
  output I3_33;
  output I3_34;
  input CI;
  input [0:31]Y;
  input Clk;
  input [0:0]Instr_Data;
  input S_0;
  input take_Intr_Now_III;
  input \write_Addr_I_reg[3] ;
  input \Using_FPGA.set_BIP_I_reg_0 ;
  input sync_reset;
  input \Using_MSR_Instr.write_MSR_I_reg_0 ;
  input mtsmsr_write_i_reg_0;
  input \Using_FSL_Links.mb_Get_i_reg ;
  input \Using_FSL_Links.mb_Get_i_reg_0 ;
  input mb_Get_i;
  input msrxxx_carry;
  input \Using_FPGA.Native_I1 ;
  input mul_Executing_reg;
  input \Using_FPGA.Native_29 ;
  input missed_IFetch;
  input [0:0]mul_Executing_reg_0;
  input mul_first;
  input FSL_Put_Inhibit;
  input mbar_first_reg;
  input mbar_first_reg_0;
  input \Using_MSR_Instr.msrxxx_write_carry_reg ;
  input inHibit_EX;
  input dbg_brki_hit;
  input dbg_pause;
  input \Using_FPGA.Native_30 ;
  input take_Intr_Now_II;
  input trace_jump_taken_i_reg;
  input [0:0]\Area_Debug_Control.dbg_brki_hit_i_2 ;
  input break_Pipe_i_reg__0;
  input nonvalid_IFetch_n_reg;
  input nonvalid_IFetch_n_reg_0;
  input nonvalid_IFetch_n_reg_1;
  input S115_out;
  input force_Val2_N;
  input is_lwx_I;
  input is_swx_I;
  input isdoublet;
  input isbyte;
  input sext16;
  input Sext8_reg_0;
  input [15:0]\Using_FPGA.Native_31 ;
  input \Using_FPGA.Native_32 ;
  input op2_Reg__15;
  input op2_Reg__16;
  input op2_Reg__17;
  input op2_Reg__18;
  input op2_Reg__19;
  input op2_Reg__20;
  input op2_Reg__21;
  input op2_Reg__22;
  input op2_Reg__23;
  input op2_Reg__24;
  input op2_Reg__25;
  input op2_Reg__26;
  input op2_Reg__27;
  input op2_Reg__28;
  input op2_Reg__29;
  input op2_Reg__30;
  input op2_Reg;
  input op2_Reg__0;
  input op2_Reg__1;
  input op2_Reg__2;
  input op2_Reg__3;
  input op2_Reg__4;
  input op2_Reg__5;
  input op2_Reg__6;
  input op2_Reg__7;
  input op2_Reg__8;
  input op2_Reg__9;
  input op2_Reg__10;
  input op2_Reg__11;
  input op2_Reg__12;
  input op2_Reg__13;
  input op2_Reg__14;
  input [3:0]PC_OF;
  input \Using_FPGA.Native_33 ;
  input lopt;
  input lopt_1;
  output lopt_2;
  input lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;

  wire [0:0]\Area_Debug_Control.dbg_brki_hit_i_2 ;
  wire BitField_Extract0;
  wire BitField_Insert0;
  wire \Buffer_DFFs[1].FDS_I_n_1 ;
  wire CI;
  wire CLZ_Instr0;
  wire Clk;
  wire [13:0]D;
  wire DI;
  wire D_0;
  wire D_1;
  wire D_10;
  wire D_11;
  wire D_12;
  wire D_13;
  wire D_14;
  wire D_15;
  wire D_16;
  wire D_17;
  wire D_18;
  wire D_19;
  wire D_2;
  wire D_20;
  wire D_21;
  wire D_22;
  wire D_23;
  wire D_24;
  wire D_25;
  wire D_26;
  wire D_27;
  wire D_28;
  wire D_29;
  wire D_3;
  wire D_30;
  wire D_31;
  wire D_32;
  wire D_33;
  wire D_4;
  wire D_5;
  wire D_6;
  wire D_7;
  wire D_8;
  wire D_9;
  wire FSL_Put_Inhibit;
  wire I3;
  wire I3_32;
  wire I3_33;
  wire I3_34;
  wire [0:0]Instr_Data;
  wire MSRclr_Instr_i0_in;
  wire Not_MB_Get_Op0;
  wire [3:0]PC_OF;
  wire \PreFetch_Buffers[0].SRL16E_I_n_3 ;
  wire \PreFetch_Buffers[0].SRL16E_I_n_4 ;
  wire \PreFetch_Buffers[13].SRL16E_I_n_1 ;
  wire \PreFetch_Buffers[1].SRL16E_I_n_6 ;
  wire \PreFetch_Buffers[1].SRL16E_I_n_7 ;
  wire \PreFetch_Buffers[21].SRL16E_I_n_1 ;
  wire \PreFetch_Buffers[21].SRL16E_I_n_2 ;
  wire \PreFetch_Buffers[26].SRL16E_I_n_1 ;
  wire \PreFetch_Buffers[2].SRL16E_I_n_3 ;
  wire \PreFetch_Buffers[2].SRL16E_I_n_6 ;
  wire \PreFetch_Buffers[3].SRL16E_I_n_1 ;
  wire \PreFetch_Buffers[3].SRL16E_I_n_2 ;
  wire \PreFetch_Buffers[3].SRL16E_I_n_4 ;
  wire \PreFetch_Buffers[5].SRL16E_I_n_12 ;
  wire \PreFetch_Buffers[5].SRL16E_I_n_14 ;
  wire \PreFetch_Buffers[5].SRL16E_I_n_3 ;
  wire \PreFetch_Buffers[5].SRL16E_I_n_8 ;
  wire Reg_Test_Equal_N_i13_out;
  wire Reg_Test_Equal_i;
  wire S;
  wire S0_out;
  wire S115_out;
  wire S_0;
  wire \Serial_Dbg_Intf.control_reg_reg[8] ;
  wire Sext16_reg;
  wire Sext8_reg;
  wire Sext8_reg_0;
  wire \Use_Async_Reset.sync_reset_reg ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_10 ;
  wire \Using_FPGA.Native_11 ;
  wire \Using_FPGA.Native_12 ;
  wire \Using_FPGA.Native_13 ;
  wire [4:0]\Using_FPGA.Native_14 ;
  wire \Using_FPGA.Native_15 ;
  wire \Using_FPGA.Native_16 ;
  wire \Using_FPGA.Native_17 ;
  wire \Using_FPGA.Native_18 ;
  wire \Using_FPGA.Native_19 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_20 ;
  wire \Using_FPGA.Native_21 ;
  wire \Using_FPGA.Native_22 ;
  wire \Using_FPGA.Native_23 ;
  wire \Using_FPGA.Native_24 ;
  wire \Using_FPGA.Native_25 ;
  wire \Using_FPGA.Native_26 ;
  wire \Using_FPGA.Native_27 ;
  wire \Using_FPGA.Native_28 ;
  wire \Using_FPGA.Native_29 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_30 ;
  wire [15:0]\Using_FPGA.Native_31 ;
  wire \Using_FPGA.Native_32 ;
  wire \Using_FPGA.Native_33 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire \Using_FPGA.Native_8 ;
  wire \Using_FPGA.Native_9 ;
  wire \Using_FPGA.Native_I1 ;
  wire \Using_FPGA.set_BIP_I_reg ;
  wire \Using_FPGA.set_BIP_I_reg_0 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_0 ;
  wire \Using_FSL_Links.mb_Get_i_reg ;
  wire \Using_FSL_Links.mb_Get_i_reg_0 ;
  wire \Using_MSR_Instr.msrxxx_carry_reg ;
  wire \Using_MSR_Instr.msrxxx_write_carry_reg ;
  wire \Using_MSR_Instr.write_MSR_I_reg ;
  wire \Using_MSR_Instr.write_MSR_I_reg_0 ;
  wire [0:31]Y;
  wire [0:0]alu_Op_II;
  wire break_Pipe_i_reg__0;
  wire buffer_Addr_Carry_1;
  wire buffer_Addr_Carry_2;
  wire buffer_Addr_S_I_0;
  wire buffer_Addr_S_I_1;
  wire buffer_Addr_S_I_2;
  wire buffer_Full;
  wire byte_i27_out;
  wire byte_i_reg;
  wire check_srx8_in;
  wire d_AS_I30_out;
  wire dbg_brki_hit;
  wire dbg_brki_hit0;
  wire dbg_pause;
  wire [0:0]dbg_pause_reg;
  wire dbg_pause_reg_0;
  wire doublet_i_reg;
  wire enable_Interrupts_I;
  wire ex_mulh_instr_i0;
  wire ex_mulhsu_instr_i0;
  wire ex_mulhu_instr_i0;
  wire force1_i43_out;
  wire force_Val1_i41_out;
  wire force_Val2_N;
  wire inHibit_EX;
  wire inHibit_EX_reg;
  wire [11:0]instr_OF_raw;
  wire is_lwx_I;
  wire is_lwx_I_reg;
  wire is_swx_I;
  wire is_swx_I0;
  wire isbyte;
  wire isdoublet;
  wire lopt;
  wire lopt_1;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire mb_Get_i;
  wire mb_Put_i5_out;
  wire mbar_first;
  wire mbar_first_reg;
  wire mbar_first_reg_0;
  wire mbar_is_sleep0;
  wire missed_IFetch;
  wire msrxxx_carry;
  wire msrxxx_write_carry;
  wire mtsmsr_write_i_reg;
  wire mtsmsr_write_i_reg_0;
  wire mul_Executing0;
  wire mul_Executing_reg;
  wire [0:0]mul_Executing_reg_0;
  wire mul_first;
  wire mul_first51_out;
  wire nonvalid_IFetch_n_reg;
  wire nonvalid_IFetch_n_reg_0;
  wire nonvalid_IFetch_n_reg_1;
  wire of_Valid_Raw;
  wire of_fsl_blocking;
  wire of_fsl_control;
  wire of_fsl_test;
  wire of_mbar_decode;
  wire op2_Reg;
  wire op2_Reg__0;
  wire op2_Reg__1;
  wire op2_Reg__10;
  wire op2_Reg__11;
  wire op2_Reg__12;
  wire op2_Reg__13;
  wire op2_Reg__14;
  wire op2_Reg__15;
  wire op2_Reg__16;
  wire op2_Reg__17;
  wire op2_Reg__18;
  wire op2_Reg__19;
  wire op2_Reg__2;
  wire op2_Reg__20;
  wire op2_Reg__21;
  wire op2_Reg__22;
  wire op2_Reg__23;
  wire op2_Reg__24;
  wire op2_Reg__25;
  wire op2_Reg__26;
  wire op2_Reg__27;
  wire op2_Reg__28;
  wire op2_Reg__29;
  wire op2_Reg__3;
  wire op2_Reg__30;
  wire op2_Reg__4;
  wire op2_Reg__5;
  wire op2_Reg__6;
  wire op2_Reg__7;
  wire op2_Reg__8;
  wire op2_Reg__9;
  wire opsel2_Imm;
  wire p_20_in;
  wire reset_BIP_I15_out;
  wire set_BIP_I0;
  wire sext16;
  wire sync_reset;
  wire take_Intr_Now_II;
  wire take_Intr_Now_III;
  wire trace_jump_taken_i_reg;
  wire use_ALU_Carry21_out;
  wire use_Reg_Neg_DI_i40_out;
  wire use_Reg_Neg_S_i42_out;
  wire \write_Addr_I_reg[3] ;

  assign \^lopt_2  = lopt_3;
  assign \^lopt_3  = lopt_4;
  assign \^lopt_4  = lopt_5;
  assign lopt_2 = S0_out;
  assign lopt_6 = \Buffer_DFFs[1].FDS_I_n_1 ;
  block_design_microblaze_0_0_MB_FDS \Buffer_DFFs[1].FDS_I 
       (.Clk(Clk),
        .S_0(S_0),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_1 (\Buffer_DFFs[1].FDS_I_n_1 ),
        .\Using_FPGA.Native_2 (\write_Addr_I_reg[3] ),
        .buffer_Addr_S_I_2(buffer_Addr_S_I_2));
  block_design_microblaze_0_0_MB_MUXCY_XORCY \Buffer_DFFs[1].MUXCY_XOR_I 
       (.LO(buffer_Addr_Carry_2),
        .\Using_FPGA.Native (\Buffer_DFFs[1].FDS_I_n_1 ),
        .buffer_Addr_S_I_2(buffer_Addr_S_I_2),
        .lopt(\^lopt_4 ));
  block_design_microblaze_0_0_MB_FDS_120 \Buffer_DFFs[2].FDS_I 
       (.Clk(Clk),
        .O(buffer_Addr_S_I_1),
        .S(S0_out),
        .S_0(S_0),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\write_Addr_I_reg[3] ));
  block_design_microblaze_0_0_MB_MUXCY_XORCY_121 \Buffer_DFFs[2].MUXCY_XOR_I 
       (.LO(buffer_Addr_Carry_2),
        .O(buffer_Addr_S_I_1),
        .S(S0_out),
        .\Using_FPGA.Native (\write_Addr_I_reg[3] ),
        .\Using_FPGA.Native_0 (buffer_Addr_Carry_1),
        .lopt(lopt_1),
        .lopt_1(\^lopt_3 ));
  block_design_microblaze_0_0_MB_FDS_122 \Buffer_DFFs[3].FDS_I 
       (.Clk(Clk),
        .O(buffer_Addr_S_I_0),
        .S_0(S_0),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ));
  block_design_microblaze_0_0_MB_MUXCY_XORCY_123 \Buffer_DFFs[3].MUXCY_XOR_I 
       (.CI(CI),
        .LO(buffer_Addr_Carry_1),
        .O(buffer_Addr_S_I_0),
        .\Using_FPGA.Native (\Using_FPGA.Native_33 ),
        .\Using_FPGA.Native_0 (\write_Addr_I_reg[3] ),
        .lopt(lopt),
        .lopt_1(\^lopt_2 ));
  block_design_microblaze_0_0_MB_SRL16E \PreFetch_Buffers[0].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .Compare_Instr_reg(instr_OF_raw[10]),
        .Compare_Instr_reg_0(D[0]),
        .Compare_Instr_reg_1(instr_OF_raw[9]),
        .\Using_FPGA.Native (instr_OF_raw[11]),
        .\Using_FPGA.Native_0 (\PreFetch_Buffers[0].SRL16E_I_n_3 ),
        .\Using_FPGA.Native_1 (\PreFetch_Buffers[0].SRL16E_I_n_4 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_21 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_22 ),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_27 ),
        .\Using_FPGA.Native_5 (instr_OF_raw[7]),
        .\Using_FPGA.Native_6 (instr_OF_raw[6]),
        .\Using_FPGA.Native_7 (instr_OF_raw[8]),
        .Y(Y[0]),
        .d_AS_I30_out(d_AS_I30_out),
        .d_AS_I_reg(\Using_MSR_Instr.msrxxx_write_carry_reg ),
        .d_AS_I_reg_0(\write_Addr_I_reg[3] ),
        .inHibit_EX(inHibit_EX),
        .\instr_EX_i_reg[0] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[0]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[0]_1 (\Using_FPGA.Native_1 ),
        .mul_first51_out(mul_first51_out),
        .mul_first_reg(mbar_first_reg),
        .take_Intr_Now_III(take_Intr_Now_III));
  block_design_microblaze_0_0_MB_SRL16E_124 \PreFetch_Buffers[10].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .Reg_Test_Equal_i(Reg_Test_Equal_i),
        .\Using_FPGA.Native (instr_OF_raw[1]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_14 [0]),
        .\Using_FPGA.Native_1 (instr_OF_raw[3]),
        .\Using_FPGA.Native_2 (instr_OF_raw[2]),
        .\Using_FPGA.Native_3 (\PreFetch_Buffers[3].SRL16E_I_n_4 ),
        .\Using_FPGA.enable_Interrupts_I_reg (\PreFetch_Buffers[1].SRL16E_I_n_6 ),
        .\Using_FPGA.enable_Interrupts_I_reg_0 (instr_OF_raw[6]),
        .\Using_FPGA.enable_Interrupts_I_reg_1 (instr_OF_raw[7]),
        .Y(Y[10]),
        .enable_Interrupts_I(enable_Interrupts_I),
        .\instr_EX_i_reg[10] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[10]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[10]_1 (\Using_FPGA.Native_1 ),
        .take_Intr_Now_III(take_Intr_Now_III),
        .\write_Addr_I_reg[4] (\write_Addr_I_reg[3] ));
  block_design_microblaze_0_0_MB_SRL16E_125 \PreFetch_Buffers[11].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .\Using_FPGA.Native (D[13]),
        .\Using_FPGA.set_BIP_I_reg (D[12]),
        .\Using_FPGA.set_BIP_I_reg_0 (D[11]),
        .Y(Y[11]),
        .\instr_EX_i_reg[11] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[11]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[11]_1 (\Using_FPGA.Native_1 ),
        .set_BIP_I0(set_BIP_I0));
  block_design_microblaze_0_0_MB_SRL16E_126 \PreFetch_Buffers[12].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .\Using_FPGA.Native (D[12]),
        .\Using_FPGA.Native_0 (instr_OF_raw[7]),
        .\Using_FPGA.Native_1 (instr_OF_raw[6]),
        .\Using_FPGA.Native_2 (instr_OF_raw[8]),
        .\Using_FPGA.Native_3 (instr_OF_raw[11]),
        .\Using_FPGA.Native_4 (instr_OF_raw[10]),
        .Y(Y[12]),
        .alu_Op_II(alu_Op_II),
        .\instr_EX_i_reg[12] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[12]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[12]_1 (\Using_FPGA.Native_1 ));
  block_design_microblaze_0_0_MB_SRL16E_127 \PreFetch_Buffers[13].SRL16E_I 
       (.\Area_Debug_Control.dbg_brki_hit_i_3 (D[12]),
        .\Area_Debug_Control.dbg_brki_hit_i_3_0 (D[13]),
        .\Area_Debug_Control.dbg_brki_hit_i_3_1 (D[7]),
        .\Area_Debug_Control.dbg_brki_hit_i_3_2 (\Using_FPGA.Native_6 ),
        .\Area_Debug_Control.dbg_brki_hit_i_3_3 (D[0]),
        .CI(CI),
        .Clk(Clk),
        .\Using_FPGA.Native (D[11]),
        .\Using_FPGA.Native_0 (\PreFetch_Buffers[13].SRL16E_I_n_1 ),
        .Y(Y[13]),
        .\instr_EX_i_reg[13] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[13]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[13]_1 (\Using_FPGA.Native_1 ));
  block_design_microblaze_0_0_MB_SRL16E_128 \PreFetch_Buffers[14].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .\Using_FPGA.Native (D[10]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_16 ),
        .Y(Y[14]),
        .\instr_EX_i_reg[14] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[14]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[14]_1 (\Using_FPGA.Native_1 ),
        .mbar_first(mbar_first),
        .mbar_first_reg(\PreFetch_Buffers[1].SRL16E_I_n_6 ),
        .mbar_first_reg_0(instr_OF_raw[6]),
        .mbar_first_reg_1(instr_OF_raw[7]),
        .mbar_first_reg_2(mbar_first_reg),
        .mbar_first_reg_3(mbar_first_reg_0),
        .mbar_hold_I_reg(\PreFetch_Buffers[0].SRL16E_I_n_3 ),
        .mbar_hold_I_reg_0(instr_OF_raw[9]),
        .mbar_hold_I_reg_1(instr_OF_raw[8]));
  block_design_microblaze_0_0_MB_SRL16E_129 \PreFetch_Buffers[15].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .D(D[9]),
        .MSRclr_Instr_i0_in(MSRclr_Instr_i0_in),
        .\Using_MSR_Instr.MSRclr_Instr_i_reg (\PreFetch_Buffers[5].SRL16E_I_n_3 ),
        .\Using_MSR_Instr.MSRclr_Instr_i_reg_0 (D[8]),
        .Y(Y[15]),
        .\instr_EX_i_reg[15] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[15]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[15]_1 (\Using_FPGA.Native_1 ));
  block_design_microblaze_0_0_MB_SRL16E_130 \PreFetch_Buffers[16].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .D({D[9],D[2]}),
        .D_0(D_0),
        .D_1(D_1),
        .D_10(D_10),
        .D_11(D_11),
        .D_12(D_12),
        .D_13(D_13),
        .D_14(D_14),
        .D_15(D_15),
        .D_2(D_2),
        .D_3(D_3),
        .D_31(D_31),
        .D_4(D_4),
        .D_5(D_5),
        .D_6(D_6),
        .D_7(D_7),
        .D_8(D_8),
        .D_9(D_9),
        .\Using_FPGA.Native (D[8]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_9 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_31 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_32 ),
        .\Using_MSR_Instr.MSRxxx_Instr_i_reg (instr_OF_raw[8]),
        .\Using_MSR_Instr.MSRxxx_Instr_i_reg_0 (instr_OF_raw[9]),
        .\Using_MSR_Instr.MSRxxx_Instr_i_reg_1 (\PreFetch_Buffers[0].SRL16E_I_n_3 ),
        .\Using_MSR_Instr.MSRxxx_Instr_i_reg_2 (instr_OF_raw[7]),
        .\Using_MSR_Instr.MSRxxx_Instr_i_reg_3 (instr_OF_raw[6]),
        .\Using_MSR_Instr.msrxxx_carry_reg (\Using_MSR_Instr.msrxxx_carry_reg ),
        .\Using_MSR_Instr.write_MSR_I_reg (\Using_MSR_Instr.write_MSR_I_reg ),
        .\Using_MSR_Instr.write_MSR_I_reg_0 (\PreFetch_Buffers[5].SRL16E_I_n_14 ),
        .\Using_MSR_Instr.write_MSR_I_reg_1 (\write_Addr_I_reg[3] ),
        .\Using_MSR_Instr.write_MSR_I_reg_2 (\Using_MSR_Instr.write_MSR_I_reg_0 ),
        .Y(Y[16]),
        .\instr_EX_i_reg[16] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[16]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[16]_1 (\Using_FPGA.Native_1 ),
        .msrxxx_carry(msrxxx_carry),
        .op2_Reg__14(op2_Reg__14),
        .op2_Reg__15(op2_Reg__15),
        .op2_Reg__16(op2_Reg__16),
        .op2_Reg__17(op2_Reg__17),
        .op2_Reg__18(op2_Reg__18),
        .op2_Reg__19(op2_Reg__19),
        .op2_Reg__20(op2_Reg__20),
        .op2_Reg__21(op2_Reg__21),
        .op2_Reg__22(op2_Reg__22),
        .op2_Reg__23(op2_Reg__23),
        .op2_Reg__24(op2_Reg__24),
        .op2_Reg__25(op2_Reg__25),
        .op2_Reg__26(op2_Reg__26),
        .op2_Reg__27(op2_Reg__27),
        .op2_Reg__28(op2_Reg__28),
        .op2_Reg__29(op2_Reg__29),
        .op2_Reg__30(op2_Reg__30),
        .opsel2_Imm(opsel2_Imm),
        .sync_reset(sync_reset),
        .take_Intr_Now_III(take_Intr_Now_III));
  block_design_microblaze_0_0_MB_SRL16E_131 \PreFetch_Buffers[17].SRL16E_I 
       (.BitField_Extract0(BitField_Extract0),
        .CI(CI),
        .Clk(Clk),
        .D_30(D_30),
        .\Using_Barrel_Shifter.BitField_Extract_reg (instr_OF_raw[9]),
        .\Using_FPGA.Native (D[7]),
        .Y(Y[17]),
        .\instr_EX_i_reg[17] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[17]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[17]_1 (\Using_FPGA.Native_1 ),
        .mtsmsr_write_i_reg(mtsmsr_write_i_reg),
        .mtsmsr_write_i_reg_0(D[0]),
        .mtsmsr_write_i_reg_1(\write_Addr_I_reg[3] ),
        .mtsmsr_write_i_reg_2(mtsmsr_write_i_reg_0),
        .mtsmsr_write_i_reg_3(instr_OF_raw[8]),
        .mtsmsr_write_i_reg_4(\PreFetch_Buffers[0].SRL16E_I_n_3 ),
        .mtsmsr_write_i_reg_5(instr_OF_raw[7]),
        .mtsmsr_write_i_reg_6(instr_OF_raw[6]),
        .op2_Reg__13(op2_Reg__13),
        .opsel2_Imm(opsel2_Imm),
        .sync_reset(sync_reset),
        .take_Intr_Now_III(take_Intr_Now_III));
  block_design_microblaze_0_0_MB_SRL16E_132 \PreFetch_Buffers[18].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .D_29(D_29),
        .\Using_FPGA.Native (D[6]),
        .\Using_FSL_Links.FSL_Control_Bit_i_reg (instr_OF_raw[9]),
        .\Using_FSL_Links.FSL_Control_Bit_i_reg_0 (\Using_FPGA.Native_4 ),
        .Y(Y[18]),
        .\instr_EX_i_reg[18] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[18]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[18]_1 (\Using_FPGA.Native_1 ),
        .of_fsl_control(of_fsl_control),
        .op2_Reg__12(op2_Reg__12),
        .opsel2_Imm(opsel2_Imm));
  block_design_microblaze_0_0_MB_SRL16E_133 \PreFetch_Buffers[19].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .D_28(D_28),
        .\Using_FPGA.Native (D[5]),
        .\Using_FSL_Links.fsl_test_instr_reg (instr_OF_raw[9]),
        .\Using_FSL_Links.fsl_test_instr_reg_0 (\Using_FPGA.Native_5 ),
        .Y(Y[19]),
        .\instr_EX_i_reg[19] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[19]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[19]_1 (\Using_FPGA.Native_1 ),
        .of_fsl_test(of_fsl_test),
        .op2_Reg__11(op2_Reg__11),
        .opsel2_Imm(opsel2_Imm));
  block_design_microblaze_0_0_MB_SRL16E_134 \PreFetch_Buffers[1].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .D(D[2]),
        .D_32(D_32),
        .\Size_17to32.imm_Reg_reg[15] (instr_OF_raw[9]),
        .\Using_FPGA.Native (instr_OF_raw[10]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_12 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_13 ),
        .\Using_FPGA.Native_2 (\PreFetch_Buffers[1].SRL16E_I_n_6 ),
        .\Using_FPGA.Native_3 (\PreFetch_Buffers[1].SRL16E_I_n_7 ),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_18 ),
        .\Using_FPGA.Native_5 (\Using_FPGA.Native_25 ),
        .\Using_FPGA.Native_6 (instr_OF_raw[6]),
        .\Using_FPGA.Native_7 (instr_OF_raw[7]),
        .\Using_FPGA.Native_8 ({D[12:11],D[7]}),
        .\Using_FPGA.Native_9 (\Using_FPGA.Native_30 ),
        .\Using_FPGA.set_BIP_I_reg (\Using_FPGA.set_BIP_I_reg ),
        .\Using_FPGA.set_BIP_I_reg_0 (\write_Addr_I_reg[3] ),
        .\Using_FPGA.set_BIP_I_reg_1 (\Using_FPGA.set_BIP_I_reg_0 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .Y(Y[1]),
        .byte_i27_out(byte_i27_out),
        .inHibit_EX(inHibit_EX),
        .inHibit_EX_i_2_0(\Using_MSR_Instr.msrxxx_write_carry_reg ),
        .inHibit_EX_reg(inHibit_EX_reg),
        .inHibit_EX_reg_0(instr_OF_raw[5]),
        .inHibit_EX_reg_1(D[13]),
        .\instr_EX_i_reg[1] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[1]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[1]_1 (\Using_FPGA.Native_1 ),
        .set_BIP_I0(set_BIP_I0),
        .sync_reset(sync_reset),
        .take_Intr_Now_III(take_Intr_Now_III),
        .write_Reg_i_2_0(\PreFetch_Buffers[5].SRL16E_I_n_3 ),
        .write_Reg_i_2_1(\PreFetch_Buffers[2].SRL16E_I_n_3 ),
        .write_Reg_i_2_2(\PreFetch_Buffers[3].SRL16E_I_n_2 ),
        .write_Reg_reg(\PreFetch_Buffers[5].SRL16E_I_n_8 ),
        .write_Reg_reg_0(D[3]),
        .writing_reg(instr_OF_raw[8]),
        .writing_reg_0(instr_OF_raw[11]));
  block_design_microblaze_0_0_MB_SRL16E_135 \PreFetch_Buffers[20].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .D(D[4]),
        .D_27(D_27),
        .Y(Y[20]),
        .\instr_EX_i_reg[20] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[20]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[20]_1 (\Using_FPGA.Native_1 ),
        .op2_Reg__10(op2_Reg__10),
        .opsel2_Imm(opsel2_Imm));
  block_design_microblaze_0_0_MB_SRL16E_136 \PreFetch_Buffers[21].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .D_26(D_26),
        .\Use_Async_Reset.sync_reset_reg (\PreFetch_Buffers[21].SRL16E_I_n_1 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_0 (\PreFetch_Buffers[21].SRL16E_I_n_2 ),
        .\Using_FSL_Links.mb_Get_i_reg (\write_Addr_I_reg[3] ),
        .\Using_FSL_Links.mb_Get_i_reg_0 (\PreFetch_Buffers[2].SRL16E_I_n_6 ),
        .\Using_FSL_Links.mb_Get_i_reg_1 (D[8]),
        .Y(Y[21]),
        .\instr_EX_i_reg[21] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[21]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[21]_1 (\Using_FPGA.Native_1 ),
        .is_lwx_I_reg(instr_OF_raw[9]),
        .is_lwx_I_reg_0(instr_OF_raw[8]),
        .mb_Get_i(mb_Get_i),
        .op2_Reg__9(op2_Reg__9),
        .opsel2_Imm(opsel2_Imm),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_SRL16E_137 \PreFetch_Buffers[22].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .D_25(D_25),
        .\Using_FPGA.Native (\Using_FPGA.Native_3 ),
        .\Using_FSL_Links.fsl_block_instr_reg (instr_OF_raw[9]),
        .\Using_FSL_Links.fsl_block_instr_reg_0 (D[7]),
        .Y(Y[22]),
        .\instr_EX_i_reg[22] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[22]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[22]_1 (\Using_FPGA.Native_1 ),
        .of_fsl_blocking(of_fsl_blocking),
        .op2_Reg__8(op2_Reg__8),
        .opsel2_Imm(opsel2_Imm));
  block_design_microblaze_0_0_MB_SRL16E_138 \PreFetch_Buffers[23].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .D_24(D_24),
        .\Using_FPGA.Native (\Using_FPGA.Native_4 ),
        .Y(Y[23]),
        .\instr_EX_i_reg[23] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[23]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[23]_1 (\Using_FPGA.Native_1 ),
        .op2_Reg__7(op2_Reg__7),
        .opsel2_Imm(opsel2_Imm));
  block_design_microblaze_0_0_MB_SRL16E_139 \PreFetch_Buffers[24].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .D_23(D_23),
        .\Using_FPGA.Native (\Using_FPGA.Native_5 ),
        .Y(Y[24]),
        .\instr_EX_i_reg[24] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[24]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[24]_1 (\Using_FPGA.Native_1 ),
        .op2_Reg__6(op2_Reg__6),
        .opsel2_Imm(opsel2_Imm));
  block_design_microblaze_0_0_MB_SRL16E_140 \PreFetch_Buffers[25].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .D_22(D_22),
        .Sext16_reg(\Using_FPGA.Native_7 ),
        .Sext16_reg_0(\Using_FPGA.Native_5 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_6 ),
        .Y(Y[25]),
        .check_srx8_in(check_srx8_in),
        .\instr_EX_i_reg[25] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[25]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[25]_1 (\Using_FPGA.Native_1 ),
        .op2_Reg__5(op2_Reg__5),
        .opsel2_Imm(opsel2_Imm));
  block_design_microblaze_0_0_MB_SRL16E_141 \PreFetch_Buffers[26].SRL16E_I 
       (.\Area_Debug_Control.dbg_brki_hit_i_2 (\Area_Debug_Control.dbg_brki_hit_i_2 ),
        .\Area_Debug_Control.dbg_brki_hit_i_2_0 (\Using_FPGA.Native_2 ),
        .\Area_Debug_Control.dbg_brki_hit_i_2_1 (D[1]),
        .\Area_Debug_Control.dbg_brki_hit_i_2_2 (D[8]),
        .\Area_Debug_Control.dbg_brki_hit_i_2_3 (\Using_FPGA.Native_4 ),
        .CI(CI),
        .Clk(Clk),
        .D_21(D_21),
        .\Serial_Dbg_Intf.control_reg_reg[8] (\PreFetch_Buffers[26].SRL16E_I_n_1 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_7 ),
        .Y(Y[26]),
        .\instr_EX_i_reg[26] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[26]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[26]_1 (\Using_FPGA.Native_1 ),
        .op2_Reg__4(op2_Reg__4),
        .opsel2_Imm(opsel2_Imm));
  block_design_microblaze_0_0_MB_SRL16E_142 \PreFetch_Buffers[27].SRL16E_I 
       (.\Area_Debug_Control.dbg_brki_hit_i_2_0 (\Using_FPGA.Native_3 ),
        .\Area_Debug_Control.dbg_brki_hit_i_2_1 (\PreFetch_Buffers[13].SRL16E_I_n_1 ),
        .\Area_Debug_Control.dbg_brki_hit_i_3_0 (\Using_FPGA.Native_5 ),
        .\Area_Debug_Control.dbg_brki_hit_reg (\write_Addr_I_reg[3] ),
        .\Area_Debug_Control.dbg_brki_hit_reg_0 (\PreFetch_Buffers[26].SRL16E_I_n_1 ),
        .\Area_Debug_Control.dbg_brki_hit_reg_1 (\Using_FPGA.Native_15 ),
        .\Area_Debug_Control.dbg_brki_hit_reg_2 (instr_OF_raw[8]),
        .\Area_Debug_Control.dbg_brki_hit_reg_3 (instr_OF_raw[9]),
        .\Area_Debug_Control.dbg_brki_hit_reg_4 (\PreFetch_Buffers[0].SRL16E_I_n_3 ),
        .CI(CI),
        .Clk(Clk),
        .D(D[6:2]),
        .D_20(D_20),
        .\Serial_Dbg_Intf.control_reg_reg[8] (\Serial_Dbg_Intf.control_reg_reg[8] ),
        .\Using_FPGA.Native (\Using_FPGA.Native_8 ),
        .Y(Y[27]),
        .dbg_brki_hit(dbg_brki_hit),
        .dbg_brki_hit0(dbg_brki_hit0),
        .\instr_EX_i_reg[27] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[27]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[27]_1 (\Using_FPGA.Native_1 ),
        .op2_Reg__3(op2_Reg__3),
        .opsel2_Imm(opsel2_Imm));
  block_design_microblaze_0_0_MB_SRL16E_143 \PreFetch_Buffers[28].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .D(D[3]),
        .D_19(D_19),
        .Y(Y[28]),
        .\instr_EX_i_reg[28] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[28]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[28]_1 (\Using_FPGA.Native_1 ),
        .op2_Reg__2(op2_Reg__2),
        .opsel2_Imm(opsel2_Imm));
  block_design_microblaze_0_0_MB_SRL16E_144 \PreFetch_Buffers[29].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .D(D[2]),
        .D_18(D_18),
        .Y(Y[29]),
        .\instr_EX_i_reg[29] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[29]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[29]_1 (\Using_FPGA.Native_1 ),
        .op2_Reg__1(op2_Reg__1),
        .opsel2_Imm(opsel2_Imm));
  block_design_microblaze_0_0_MB_SRL16E_145 \PreFetch_Buffers[2].SRL16E_I 
       (.BitField_Insert0(BitField_Insert0),
        .CI(CI),
        .Clk(Clk),
        .S115_out(S115_out),
        .\Using_Barrel_Shifter.BitField_Insert_reg (D[8]),
        .\Using_FPGA.Native (instr_OF_raw[9]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_10 ),
        .\Using_FPGA.Native_1 (\PreFetch_Buffers[2].SRL16E_I_n_3 ),
        .\Using_FPGA.Native_10 (\PreFetch_Buffers[3].SRL16E_I_n_4 ),
        .\Using_FPGA.Native_2 (\PreFetch_Buffers[2].SRL16E_I_n_6 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_24 ),
        .\Using_FPGA.Native_4 (instr_OF_raw[6]),
        .\Using_FPGA.Native_5 (instr_OF_raw[7]),
        .\Using_FPGA.Native_6 (instr_OF_raw[11]),
        .\Using_FPGA.Native_7 (instr_OF_raw[10]),
        .\Using_FPGA.Native_8 (\PreFetch_Buffers[0].SRL16E_I_n_3 ),
        .\Using_FPGA.Native_9 (\write_Addr_I_reg[3] ),
        .\Using_FSL_Links.mb_Get_i_reg (instr_OF_raw[8]),
        .\Using_FSL_Links.mb_Get_i_reg_0 (\Using_FSL_Links.mb_Get_i_reg ),
        .\Using_FSL_Links.mb_Get_i_reg_1 (\PreFetch_Buffers[5].SRL16E_I_n_12 ),
        .\Using_FSL_Links.mb_Get_i_reg_2 (\Using_FSL_Links.mb_Get_i_reg_0 ),
        .\Using_FSL_Links.mb_Get_i_reg_3 (\PreFetch_Buffers[21].SRL16E_I_n_1 ),
        .Y(Y[2]),
        .force_Val2_N(force_Val2_N),
        .\instr_EX_i_reg[2] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[2]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[2]_1 (\Using_FPGA.Native_1 ),
        .is_swx_I0(is_swx_I0),
        .is_swx_I_reg(\Using_FPGA.Native_2 ),
        .is_swx_I_reg_0(\Using_FPGA.Native_13 ),
        .opsel2_Imm(opsel2_Imm),
        .take_Intr_Now_II(take_Intr_Now_II),
        .take_Intr_Now_III(take_Intr_Now_III));
  block_design_microblaze_0_0_MB_SRL16E_146 \PreFetch_Buffers[30].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .D_17(D_17),
        .\Using_FPGA.Native (D[1]),
        .\Using_Mul64.ex_mulh_instr_i_reg (instr_OF_raw[9]),
        .\Using_Mul64.ex_mulh_instr_i_reg_0 (instr_OF_raw[8]),
        .\Using_Mul64.ex_mulh_instr_i_reg_1 (\Using_FPGA.Native_20 ),
        .\Using_Mul64.ex_mulhu_instr_i_reg (\PreFetch_Buffers[0].SRL16E_I_n_4 ),
        .\Using_Mul64.ex_mulhu_instr_i_reg_0 (D[0]),
        .Y(Y[30]),
        .ex_mulh_instr_i0(ex_mulh_instr_i0),
        .ex_mulhu_instr_i0(ex_mulhu_instr_i0),
        .\instr_EX_i_reg[30] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[30]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[30]_1 (\Using_FPGA.Native_1 ),
        .op2_Reg__0(op2_Reg__0),
        .opsel2_Imm(opsel2_Imm));
  block_design_microblaze_0_0_MB_SRL16E_147 \PreFetch_Buffers[31].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .D_16(D_16),
        .Sext16_reg(Sext16_reg),
        .Sext16_reg_0(\write_Addr_I_reg[3] ),
        .Sext8_reg(Sext8_reg),
        .Sext8_reg_0(\Using_FPGA.take_Intr_2nd_Phase_reg_0 ),
        .Sext8_reg_1(Sext8_reg_0),
        .\Using_FPGA.Native (D[0]),
        .Y(Y[31]),
        .check_srx8_in(check_srx8_in),
        .\instr_EX_i_reg[31] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[31]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[31]_1 (\Using_FPGA.Native_1 ),
        .op2_Reg(op2_Reg),
        .opsel2_Imm(opsel2_Imm),
        .sext16(sext16),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_MB_SRL16E_148 \PreFetch_Buffers[32].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .Instr_Data(Instr_Data),
        .S(S),
        .\Using_FPGA.Native (\Using_FPGA.Native_30 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_29 ),
        .\Using_FPGA.Native_1 (\Using_MSR_Instr.write_MSR_I_reg_0 ),
        .\Using_FSL_Links.FSL_Atomic_reg (\Using_FPGA.Native ),
        .\Using_FSL_Links.FSL_Atomic_reg_0 (\Using_FPGA.Native_0 ),
        .\Using_FSL_Links.FSL_Atomic_reg_1 (\Using_FPGA.Native_1 ),
        .break_Pipe_i_reg__0(break_Pipe_i_reg__0),
        .instr_OF_raw(instr_OF_raw[0]));
  block_design_microblaze_0_0_MB_SRL16E_149 \PreFetch_Buffers[3].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .Reg_Test_Equal_N_i13_out(Reg_Test_Equal_N_i13_out),
        .\Use_The_PCMP_instr.PCMP_Instr_reg (instr_OF_raw[9]),
        .\Use_The_PCMP_instr.PCMP_Instr_reg_0 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native (instr_OF_raw[8]),
        .\Using_FPGA.Native_0 (\PreFetch_Buffers[3].SRL16E_I_n_2 ),
        .\Using_FPGA.Native_1 (\PreFetch_Buffers[3].SRL16E_I_n_4 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_19 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_28 ),
        .\Using_FPGA.Native_4 (instr_OF_raw[6]),
        .\Using_FPGA.Native_5 (instr_OF_raw[7]),
        .\Using_FPGA.Native_6 (instr_OF_raw[2]),
        .\Using_FPGA.Native_7 (instr_OF_raw[3]),
        .\Using_FPGA.Native_8 (instr_OF_raw[1]),
        .Y(Y[3]),
        .force_Val1_i41_out(force_Val1_i41_out),
        .inHibit_EX(inHibit_EX),
        .inHibit_EX_reg(\PreFetch_Buffers[3].SRL16E_I_n_1 ),
        .\instr_EX_i_reg[3] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[3]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[3]_1 (\Using_FPGA.Native_1 ),
        .jump2_I_reg(\Using_MSR_Instr.msrxxx_write_carry_reg ),
        .take_Intr_Now_III(take_Intr_Now_III),
        .use_Reg_Neg_DI_i40_out(use_Reg_Neg_DI_i40_out),
        .use_Reg_Neg_S_i42_out(use_Reg_Neg_S_i42_out),
        .write_Carry_I_reg(instr_OF_raw[11]),
        .write_Carry_I_reg_0(instr_OF_raw[10]),
        .write_Carry_I_reg_1(\Using_FPGA.Native_7 ),
        .write_Carry_I_reg_2(\Using_FPGA.Native_6 ),
        .write_Carry_I_reg_3(\PreFetch_Buffers[5].SRL16E_I_n_8 ));
  block_design_microblaze_0_0_MB_SRL16E_150 \PreFetch_Buffers[4].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .D(D[1:0]),
        .Not_MB_Get_Op0(Not_MB_Get_Op0),
        .\Use_Async_Reset.sync_reset_reg (\Use_Async_Reset.sync_reset_reg ),
        .\Using_Barrel_Shifter.Not_Barrel_Op_reg (instr_OF_raw[8]),
        .\Using_FPGA.Native (instr_OF_raw[7]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_20 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_26 ),
        .\Using_FSL_Links.Not_MB_Get_Op_reg (instr_OF_raw[6]),
        .\Using_Mul64.ex_mulhsu_instr_i_reg (\PreFetch_Buffers[0].SRL16E_I_n_4 ),
        .\Using_Mul64.ex_mulhsu_instr_i_reg_0 (instr_OF_raw[9]),
        .Y(Y[4]),
        .byte_i27_out(byte_i27_out),
        .byte_i_reg(byte_i_reg),
        .doublet_i_reg(doublet_i_reg),
        .doublet_i_reg_0(\write_Addr_I_reg[3] ),
        .ex_mulhsu_instr_i0(ex_mulhsu_instr_i0),
        .\instr_EX_i_reg[4] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[4]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[4]_1 (\Using_FPGA.Native_1 ),
        .isbyte(isbyte),
        .isdoublet(isdoublet),
        .sync_reset(sync_reset),
        .take_Intr_Now_III(take_Intr_Now_III),
        .use_ALU_Carry21_out(use_ALU_Carry21_out),
        .using_Imm_reg(instr_OF_raw[11]),
        .using_Imm_reg_0(instr_OF_raw[10]));
  block_design_microblaze_0_0_MB_SRL16E_151 \PreFetch_Buffers[5].SRL16E_I 
       (.CI(CI),
        .CLZ_Instr0(CLZ_Instr0),
        .Clk(Clk),
        .D(D[2]),
        .FSL_Put_Inhibit(FSL_Put_Inhibit),
        .I3(I3),
        .I3_32(I3_32),
        .I3_33(I3_33),
        .I3_34(I3_34),
        .PC_OF(PC_OF),
        .Sext8_reg(\Using_FPGA.Native_30 ),
        .\Use_The_PCMP_instr.CLZ_Instr_reg (\Using_FPGA.Native_7 ),
        .\Use_The_PCMP_instr.CLZ_Instr_reg_0 (\Using_FPGA.Native_6 ),
        .\Use_The_PCMP_instr.CLZ_Instr_reg_1 (\Using_FPGA.Native_5 ),
        .\Using_FPGA.Native (instr_OF_raw[6]),
        .\Using_FPGA.Native_0 (\PreFetch_Buffers[5].SRL16E_I_n_3 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_15 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_17 ),
        .\Using_FPGA.Native_3 (\PreFetch_Buffers[5].SRL16E_I_n_8 ),
        .\Using_FPGA.Native_4 (\PreFetch_Buffers[5].SRL16E_I_n_12 ),
        .\Using_FPGA.Native_5 (\PreFetch_Buffers[5].SRL16E_I_n_14 ),
        .\Using_FPGA.Native_i_1__39 (\PreFetch_Buffers[1].SRL16E_I_n_7 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_0 ),
        .\Using_FSL_Links.mb_Get_i_reg (instr_OF_raw[7]),
        .\Using_FSL_Links.mb_Get_i_reg_0 (instr_OF_raw[11]),
        .\Using_FSL_Links.mb_Get_i_reg_1 (instr_OF_raw[10]),
        .\Using_FSL_Links.mb_Put_i_reg (\Using_FPGA.Native_2 ),
        .\Using_MSR_Instr.msrxxx_write_carry_reg (D[8]),
        .\Using_MSR_Instr.msrxxx_write_carry_reg_0 (\Using_MSR_Instr.msrxxx_write_carry_reg ),
        .Y(Y[5]),
        .inHibit_EX(inHibit_EX),
        .\instr_EX_i_reg[5] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[5]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[5]_1 (\Using_FPGA.Native_1 ),
        .is_lwx_I(is_lwx_I),
        .is_lwx_I_reg(is_lwx_I_reg),
        .is_lwx_I_reg_0(\write_Addr_I_reg[3] ),
        .is_lwx_I_reg_1(\Using_FPGA.Native_13 ),
        .is_lwx_I_reg_2(\PreFetch_Buffers[21].SRL16E_I_n_2 ),
        .is_swx_I(is_swx_I),
        .mb_Put_i5_out(mb_Put_i5_out),
        .mbar_decode_I_reg(instr_OF_raw[8]),
        .mbar_decode_I_reg_0(instr_OF_raw[9]),
        .mbar_decode_I_reg_1(\PreFetch_Buffers[0].SRL16E_I_n_3 ),
        .mbar_decode_I_reg_2({D[10],D[7],D[0]}),
        .mbar_first(mbar_first),
        .msrxxx_write_carry(msrxxx_write_carry),
        .mul_Executing0(mul_Executing0),
        .mul_Executing_reg(mul_Executing_reg_0),
        .mul_Executing_reg_0(mul_Executing_reg),
        .mul_Executing_reg_1(mbar_first_reg),
        .mul_first(mul_first),
        .of_mbar_decode(of_mbar_decode),
        .p_20_in(p_20_in),
        .take_Intr_Now_III(take_Intr_Now_III));
  block_design_microblaze_0_0_MB_SRL16E_152 \PreFetch_Buffers[6].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .\Using_FPGA.Native (instr_OF_raw[5]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_11 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_14 [4]),
        .Y(Y[6]),
        .\instr_EX_i_reg[6] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[6]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[6]_1 (\Using_FPGA.Native_1 ),
        .instr_OF_raw(instr_OF_raw[4]),
        .jump2_I_reg(instr_OF_raw[6]),
        .jump2_I_reg_0(instr_OF_raw[9]),
        .jump2_I_reg_1(instr_OF_raw[7]),
        .jump2_I_reg_2(D[13]),
        .jump2_I_reg_3(\PreFetch_Buffers[3].SRL16E_I_n_1 ),
        .mbar_is_sleep0(mbar_is_sleep0),
        .take_Intr_Now_III(take_Intr_Now_III),
        .\write_Addr_I_reg[0] (\write_Addr_I_reg[3] ));
  block_design_microblaze_0_0_MB_SRL16E_153 \PreFetch_Buffers[7].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .\Using_FPGA.Native (\Using_FPGA.Native_14 [3]),
        .Y(Y[7]),
        .\instr_EX_i_reg[7] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[7]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[7]_1 (\Using_FPGA.Native_1 ),
        .instr_OF_raw(instr_OF_raw[4]),
        .take_Intr_Now_III(take_Intr_Now_III),
        .\write_Addr_I_reg[1] (\write_Addr_I_reg[3] ));
  block_design_microblaze_0_0_MB_SRL16E_154 \PreFetch_Buffers[8].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .\Using_FPGA.Native (instr_OF_raw[3]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_14 [2]),
        .\Using_FPGA.Native_1 (instr_OF_raw[2]),
        .\Using_FPGA.Native_2 (\PreFetch_Buffers[3].SRL16E_I_n_4 ),
        .Y(Y[8]),
        .force1_i43_out(force1_i43_out),
        .\instr_EX_i_reg[8] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[8]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[8]_1 (\Using_FPGA.Native_1 ),
        .take_Intr_Now_III(take_Intr_Now_III),
        .\write_Addr_I_reg[2] (\write_Addr_I_reg[3] ));
  block_design_microblaze_0_0_MB_SRL16E_155 \PreFetch_Buffers[9].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .\Using_FPGA.Native (instr_OF_raw[2]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_14 [1]),
        .\Using_FPGA.reset_BIP_I_reg (\PreFetch_Buffers[1].SRL16E_I_n_6 ),
        .\Using_FPGA.reset_BIP_I_reg_0 (instr_OF_raw[6]),
        .\Using_FPGA.reset_BIP_I_reg_1 (instr_OF_raw[7]),
        .Y(Y[9]),
        .\instr_EX_i_reg[9] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[9]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[9]_1 (\Using_FPGA.Native_1 ),
        .reset_BIP_I15_out(reset_BIP_I15_out),
        .take_Intr_Now_III(take_Intr_Now_III),
        .\write_Addr_I_reg[3] (\write_Addr_I_reg[3] ));
  LUT3 #(
    .INIT(8'h7F)) 
    of_Valid_early
       (.I0(buffer_Addr_S_I_2),
        .I1(buffer_Addr_S_I_1),
        .I2(buffer_Addr_S_I_0),
        .O(D_33));
  block_design_microblaze_0_0_MB_FDR of_valid_FDR_I
       (.Clk(Clk),
        .DI(DI),
        .D_33(D_33),
        .S_0(S_0),
        .\Size_17to32.imm_Reg_reg[15] (\PreFetch_Buffers[1].SRL16E_I_n_6 ),
        .\Size_17to32.imm_Reg_reg[15]_0 (instr_OF_raw[6]),
        .\Size_17to32.imm_Reg_reg[15]_1 (instr_OF_raw[7]),
        .\Using_FPGA.Native_0 (of_Valid_Raw),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_23 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_I1 (\Using_FPGA.Native_I1 ),
        .\Using_FPGA.Native_I1_0 (mul_Executing_reg),
        .\Using_FPGA.Native_I1_1 (\Using_FPGA.Native_29 ),
        .buffer_Full(buffer_Full),
        .dbg_pause(dbg_pause),
        .dbg_pause_reg(dbg_pause_reg),
        .dbg_pause_reg_0(dbg_pause_reg_0),
        .inHibit_EX(inHibit_EX),
        .missed_IFetch(missed_IFetch),
        .nonvalid_IFetch_n_reg(nonvalid_IFetch_n_reg),
        .nonvalid_IFetch_n_reg_0(nonvalid_IFetch_n_reg_0),
        .nonvalid_IFetch_n_reg_1(nonvalid_IFetch_n_reg_1),
        .take_Intr_Now_III(take_Intr_Now_III),
        .trace_jump_taken_i_reg(trace_jump_taken_i_reg));
endmodule

module block_design_microblaze_0_0_RAM_Module
   (D,
    \Embedded_Trace.rdaddr_reg ,
    Clk,
    Q,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 );
  output [17:0]D;
  input [2:0]\Embedded_Trace.rdaddr_reg ;
  input Clk;
  input [8:0]Q;
  input [143:0]\Using_FPGA.Native ;
  input [7:0]\Using_FPGA.Native_0 ;

  wire Clk;
  wire [17:0]D;
  wire [0:67]DATA_OUTA;
  wire [0:67]DATA_OUTB;
  wire [2:0]\Embedded_Trace.rdaddr_reg ;
  wire [8:0]Q;
  wire [143:0]\Using_FPGA.Native ;
  wire [7:0]\Using_FPGA.Native_0 ;

  block_design_microblaze_0_0_MB_RAMB36 \Not_Using_XPM.Using_B36_S36.The_BRAMs[0].RAMB36_I1 
       (.Clk(Clk),
        .DATA_OUTA({DATA_OUTA[0],DATA_OUTA[1],DATA_OUTA[2],DATA_OUTA[3],DATA_OUTA[4],DATA_OUTA[5],DATA_OUTA[6],DATA_OUTA[7],DATA_OUTA[8],DATA_OUTA[9],DATA_OUTA[10],DATA_OUTA[11],DATA_OUTA[12],DATA_OUTA[13],DATA_OUTA[14],DATA_OUTA[15],DATA_OUTA[16],DATA_OUTA[17],DATA_OUTA[18],DATA_OUTA[19],DATA_OUTA[20],DATA_OUTA[21],DATA_OUTA[22],DATA_OUTA[23],DATA_OUTA[24],DATA_OUTA[25],DATA_OUTA[26],DATA_OUTA[27],DATA_OUTA[28],DATA_OUTA[29],DATA_OUTA[30],DATA_OUTA[31],DATA_OUTA[64],DATA_OUTA[65],DATA_OUTA[66],DATA_OUTA[67]}),
        .DATA_OUTB({DATA_OUTB[0],DATA_OUTB[1],DATA_OUTB[2],DATA_OUTB[3],DATA_OUTB[4],DATA_OUTB[5],DATA_OUTB[6],DATA_OUTB[7],DATA_OUTB[8],DATA_OUTB[9],DATA_OUTB[10],DATA_OUTB[11],DATA_OUTB[12],DATA_OUTB[13],DATA_OUTB[14],DATA_OUTB[15],DATA_OUTB[16],DATA_OUTB[17],DATA_OUTB[18],DATA_OUTB[19],DATA_OUTB[20],DATA_OUTB[21],DATA_OUTB[22],DATA_OUTB[23],DATA_OUTB[24],DATA_OUTB[25],DATA_OUTB[26],DATA_OUTB[27],DATA_OUTB[28],DATA_OUTB[29],DATA_OUTB[30],DATA_OUTB[31],DATA_OUTB[64],DATA_OUTB[65],DATA_OUTB[66],DATA_OUTB[67]}),
        .Q(Q),
        .\Using_FPGA.Native_0 ({\Using_FPGA.Native [143:108],\Using_FPGA.Native [71:36]}),
        .\Using_FPGA.Native_1 ({\Using_FPGA.Native_0 [7:6],\Using_FPGA.Native_0 [3:2]}));
  block_design_microblaze_0_0_MB_RAMB36_60 \Not_Using_XPM.Using_B36_S36.The_BRAMs[1].RAMB36_I1 
       (.Clk(Clk),
        .D(D),
        .\Embedded_Trace.rdaddr_reg (\Embedded_Trace.rdaddr_reg ),
        .\Embedded_Trace.rddata_reg[0] ({DATA_OUTA[0],DATA_OUTA[1],DATA_OUTA[2],DATA_OUTA[3],DATA_OUTA[4],DATA_OUTA[5],DATA_OUTA[6],DATA_OUTA[7],DATA_OUTA[8],DATA_OUTA[9],DATA_OUTA[10],DATA_OUTA[11],DATA_OUTA[12],DATA_OUTA[13],DATA_OUTA[14],DATA_OUTA[15],DATA_OUTA[16],DATA_OUTA[17],DATA_OUTA[18],DATA_OUTA[19],DATA_OUTA[20],DATA_OUTA[21],DATA_OUTA[22],DATA_OUTA[23],DATA_OUTA[24],DATA_OUTA[25],DATA_OUTA[26],DATA_OUTA[27],DATA_OUTA[28],DATA_OUTA[29],DATA_OUTA[30],DATA_OUTA[31],DATA_OUTA[64],DATA_OUTA[65],DATA_OUTA[66],DATA_OUTA[67]}),
        .\Embedded_Trace.rddata_reg[0]_0 ({DATA_OUTB[0],DATA_OUTB[1],DATA_OUTB[2],DATA_OUTB[3],DATA_OUTB[4],DATA_OUTB[5],DATA_OUTB[6],DATA_OUTB[7],DATA_OUTB[8],DATA_OUTB[9],DATA_OUTB[10],DATA_OUTB[11],DATA_OUTB[12],DATA_OUTB[13],DATA_OUTB[14],DATA_OUTB[15],DATA_OUTB[16],DATA_OUTB[17],DATA_OUTB[18],DATA_OUTB[19],DATA_OUTB[20],DATA_OUTB[21],DATA_OUTB[22],DATA_OUTB[23],DATA_OUTB[24],DATA_OUTB[25],DATA_OUTB[26],DATA_OUTB[27],DATA_OUTB[28],DATA_OUTB[29],DATA_OUTB[30],DATA_OUTB[31],DATA_OUTB[64],DATA_OUTB[65],DATA_OUTB[66],DATA_OUTB[67]}),
        .Q(Q),
        .\Using_FPGA.Native_0 ({\Using_FPGA.Native [107:72],\Using_FPGA.Native [35:0]}),
        .\Using_FPGA.Native_1 ({\Using_FPGA.Native_0 [5:4],\Using_FPGA.Native_0 [1:0]}));
endmodule

module block_design_microblaze_0_0_Register_File
   (op2_Reg,
    op2_Reg__0,
    op2_Reg__1,
    op2_Reg__2,
    op2_Reg__3,
    op2_Reg__4,
    op2_Reg__5,
    op2_Reg__6,
    op2_Reg__7,
    op2_Reg__8,
    op2_Reg__9,
    op2_Reg__10,
    op2_Reg__11,
    op2_Reg__12,
    op2_Reg__13,
    op2_Reg__14,
    op2_Reg__15,
    op2_Reg__16,
    op2_Reg__17,
    op2_Reg__18,
    op2_Reg__19,
    op2_Reg__20,
    op2_Reg__21,
    op2_Reg__22,
    op2_Reg__23,
    op2_Reg__24,
    op2_Reg__25,
    op2_Reg__26,
    op2_Reg__27,
    op2_Reg__28,
    op2_Reg__29,
    op2_Reg__30,
    Reg1_Data,
    Data_Write,
    exception_kind,
    res_Forward2,
    ex_Result,
    Interrupt_Address,
    Clk,
    Reg_Write,
    \Using_BitField.Gen_Bits[9].mem_Rd_reg[9] ,
    reg1_Addr,
    imm_Value);
  output op2_Reg;
  output op2_Reg__0;
  output op2_Reg__1;
  output op2_Reg__2;
  output op2_Reg__3;
  output op2_Reg__4;
  output op2_Reg__5;
  output op2_Reg__6;
  output op2_Reg__7;
  output op2_Reg__8;
  output op2_Reg__9;
  output op2_Reg__10;
  output op2_Reg__11;
  output op2_Reg__12;
  output op2_Reg__13;
  output op2_Reg__14;
  output op2_Reg__15;
  output op2_Reg__16;
  output op2_Reg__17;
  output op2_Reg__18;
  output op2_Reg__19;
  output op2_Reg__20;
  output op2_Reg__21;
  output op2_Reg__22;
  output op2_Reg__23;
  output op2_Reg__24;
  output op2_Reg__25;
  output op2_Reg__26;
  output op2_Reg__27;
  output op2_Reg__28;
  output op2_Reg__29;
  output op2_Reg__30;
  output [0:31]Reg1_Data;
  output [0:31]Data_Write;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:31]ex_Result;
  input [0:31]Interrupt_Address;
  input Clk;
  input Reg_Write;
  input [4:0]\Using_BitField.Gen_Bits[9].mem_Rd_reg[9] ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:31]Data_Write;
  wire [0:31]Interrupt_Address;
  wire [0:31]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_BitField.Gen_Bits[9].mem_Rd_reg[9] ;
  wire [0:31]ex_Result;
  wire [0:0]exception_kind;
  wire [4:0]imm_Value;
  wire op2_Reg;
  wire op2_Reg__0;
  wire op2_Reg__1;
  wire op2_Reg__10;
  wire op2_Reg__11;
  wire op2_Reg__12;
  wire op2_Reg__13;
  wire op2_Reg__14;
  wire op2_Reg__15;
  wire op2_Reg__16;
  wire op2_Reg__17;
  wire op2_Reg__18;
  wire op2_Reg__19;
  wire op2_Reg__2;
  wire op2_Reg__20;
  wire op2_Reg__21;
  wire op2_Reg__22;
  wire op2_Reg__23;
  wire op2_Reg__24;
  wire op2_Reg__25;
  wire op2_Reg__26;
  wire op2_Reg__27;
  wire op2_Reg__28;
  wire op2_Reg__29;
  wire op2_Reg__3;
  wire op2_Reg__30;
  wire op2_Reg__4;
  wire op2_Reg__5;
  wire op2_Reg__6;
  wire op2_Reg__7;
  wire op2_Reg__8;
  wire op2_Reg__9;
  wire [0:4]reg1_Addr;
  wire res_Forward2;

  block_design_microblaze_0_0_Register_File_Bit \Using_FPGA.Gen_RegFile[0].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[0]),
        .Interrupt_Address(Interrupt_Address[0]),
        .Reg1_Data(Reg1_Data[0]),
        .Reg_Write(Reg_Write),
        .\Using_BitField.Gen_Bits[0].mem_Rd_reg[0] (\Using_BitField.Gen_Bits[9].mem_Rd_reg[9] ),
        .ex_Result(ex_Result[0]),
        .exception_kind(exception_kind),
        .imm_Value(imm_Value),
        .op2_Reg__30(op2_Reg__30),
        .reg1_Addr(reg1_Addr),
        .res_Forward2(res_Forward2));
  block_design_microblaze_0_0_Register_File_Bit_490 \Using_FPGA.Gen_RegFile[10].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[10]),
        .Interrupt_Address(Interrupt_Address[10]),
        .Reg1_Data(Reg1_Data[10]),
        .Reg_Write(Reg_Write),
        .\Using_BitField.Gen_Bits[10].mem_Rd_reg[10] (\Using_BitField.Gen_Bits[9].mem_Rd_reg[9] ),
        .ex_Result(ex_Result[10]),
        .exception_kind(exception_kind),
        .imm_Value(imm_Value),
        .op2_Reg__20(op2_Reg__20),
        .reg1_Addr(reg1_Addr),
        .res_Forward2(res_Forward2));
  block_design_microblaze_0_0_Register_File_Bit_491 \Using_FPGA.Gen_RegFile[11].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[11]),
        .Interrupt_Address(Interrupt_Address[11]),
        .Reg1_Data(Reg1_Data[11]),
        .Reg_Write(Reg_Write),
        .\Using_BitField.Gen_Bits[11].mem_Rd_reg[11] (\Using_BitField.Gen_Bits[9].mem_Rd_reg[9] ),
        .ex_Result(ex_Result[11]),
        .exception_kind(exception_kind),
        .imm_Value(imm_Value),
        .op2_Reg__19(op2_Reg__19),
        .reg1_Addr(reg1_Addr),
        .res_Forward2(res_Forward2));
  block_design_microblaze_0_0_Register_File_Bit_492 \Using_FPGA.Gen_RegFile[12].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[12]),
        .Interrupt_Address(Interrupt_Address[12]),
        .Reg1_Data(Reg1_Data[12]),
        .Reg_Write(Reg_Write),
        .\Using_BitField.Gen_Bits[12].mem_Rd_reg[12] (\Using_BitField.Gen_Bits[9].mem_Rd_reg[9] ),
        .ex_Result(ex_Result[12]),
        .exception_kind(exception_kind),
        .imm_Value(imm_Value),
        .op2_Reg__18(op2_Reg__18),
        .reg1_Addr(reg1_Addr),
        .res_Forward2(res_Forward2));
  block_design_microblaze_0_0_Register_File_Bit_493 \Using_FPGA.Gen_RegFile[13].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[13]),
        .Interrupt_Address(Interrupt_Address[13]),
        .Reg1_Data(Reg1_Data[13]),
        .Reg_Write(Reg_Write),
        .\Using_BitField.Gen_Bits[13].mem_Rd_reg[13] (\Using_BitField.Gen_Bits[9].mem_Rd_reg[9] ),
        .ex_Result(ex_Result[13]),
        .exception_kind(exception_kind),
        .imm_Value(imm_Value),
        .op2_Reg__17(op2_Reg__17),
        .reg1_Addr(reg1_Addr),
        .res_Forward2(res_Forward2));
  block_design_microblaze_0_0_Register_File_Bit_494 \Using_FPGA.Gen_RegFile[14].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[14]),
        .Interrupt_Address(Interrupt_Address[14]),
        .Reg1_Data(Reg1_Data[14]),
        .Reg_Write(Reg_Write),
        .\Using_BitField.Gen_Bits[14].mem_Rd_reg[14] (\Using_BitField.Gen_Bits[9].mem_Rd_reg[9] ),
        .ex_Result(ex_Result[14]),
        .exception_kind(exception_kind),
        .imm_Value(imm_Value),
        .op2_Reg__16(op2_Reg__16),
        .reg1_Addr(reg1_Addr),
        .res_Forward2(res_Forward2));
  block_design_microblaze_0_0_Register_File_Bit_495 \Using_FPGA.Gen_RegFile[15].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[15]),
        .Interrupt_Address(Interrupt_Address[15]),
        .Reg1_Data(Reg1_Data[15]),
        .Reg_Write(Reg_Write),
        .\Using_BitField.Gen_Bits[15].mem_Rd_reg[15] (\Using_BitField.Gen_Bits[9].mem_Rd_reg[9] ),
        .ex_Result(ex_Result[15]),
        .exception_kind(exception_kind),
        .imm_Value(imm_Value),
        .op2_Reg__15(op2_Reg__15),
        .reg1_Addr(reg1_Addr),
        .res_Forward2(res_Forward2));
  block_design_microblaze_0_0_Register_File_Bit_496 \Using_FPGA.Gen_RegFile[16].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[16]),
        .Interrupt_Address(Interrupt_Address[16]),
        .Reg1_Data(Reg1_Data[16]),
        .Reg_Write(Reg_Write),
        .\Using_BitField.Gen_Bits[16].mem_Rd_reg[16] (\Using_BitField.Gen_Bits[9].mem_Rd_reg[9] ),
        .ex_Result(ex_Result[16]),
        .exception_kind(exception_kind),
        .imm_Value(imm_Value),
        .op2_Reg__14(op2_Reg__14),
        .reg1_Addr(reg1_Addr),
        .res_Forward2(res_Forward2));
  block_design_microblaze_0_0_Register_File_Bit_497 \Using_FPGA.Gen_RegFile[17].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[17]),
        .Interrupt_Address(Interrupt_Address[17]),
        .Reg1_Data(Reg1_Data[17]),
        .Reg_Write(Reg_Write),
        .\Using_BitField.Gen_Bits[17].mem_Rd_reg[17] (\Using_BitField.Gen_Bits[9].mem_Rd_reg[9] ),
        .ex_Result(ex_Result[17]),
        .exception_kind(exception_kind),
        .imm_Value(imm_Value),
        .op2_Reg__13(op2_Reg__13),
        .reg1_Addr(reg1_Addr),
        .res_Forward2(res_Forward2));
  block_design_microblaze_0_0_Register_File_Bit_498 \Using_FPGA.Gen_RegFile[18].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[18]),
        .Interrupt_Address(Interrupt_Address[18]),
        .Reg1_Data(Reg1_Data[18]),
        .Reg_Write(Reg_Write),
        .\Using_BitField.Gen_Bits[18].mem_Rd_reg[18] (\Using_BitField.Gen_Bits[9].mem_Rd_reg[9] ),
        .ex_Result(ex_Result[18]),
        .exception_kind(exception_kind),
        .imm_Value(imm_Value),
        .op2_Reg__12(op2_Reg__12),
        .reg1_Addr(reg1_Addr),
        .res_Forward2(res_Forward2));
  block_design_microblaze_0_0_Register_File_Bit_499 \Using_FPGA.Gen_RegFile[19].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[19]),
        .Interrupt_Address(Interrupt_Address[19]),
        .Reg1_Data(Reg1_Data[19]),
        .Reg_Write(Reg_Write),
        .\Using_BitField.Gen_Bits[19].mem_Rd_reg[19] (\Using_BitField.Gen_Bits[9].mem_Rd_reg[9] ),
        .ex_Result(ex_Result[19]),
        .exception_kind(exception_kind),
        .imm_Value(imm_Value),
        .op2_Reg__11(op2_Reg__11),
        .reg1_Addr(reg1_Addr),
        .res_Forward2(res_Forward2));
  block_design_microblaze_0_0_Register_File_Bit_500 \Using_FPGA.Gen_RegFile[1].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[1]),
        .Interrupt_Address(Interrupt_Address[1]),
        .Reg1_Data(Reg1_Data[1]),
        .Reg_Write(Reg_Write),
        .\Using_BitField.Gen_Bits[1].mem_Rd_reg[1] (\Using_BitField.Gen_Bits[9].mem_Rd_reg[9] ),
        .ex_Result(ex_Result[1]),
        .exception_kind(exception_kind),
        .imm_Value(imm_Value),
        .op2_Reg__29(op2_Reg__29),
        .reg1_Addr(reg1_Addr),
        .res_Forward2(res_Forward2));
  block_design_microblaze_0_0_Register_File_Bit_501 \Using_FPGA.Gen_RegFile[20].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[20]),
        .Interrupt_Address(Interrupt_Address[20]),
        .Reg1_Data(Reg1_Data[20]),
        .Reg_Write(Reg_Write),
        .\Using_BitField.Gen_Bits[20].mem_Rd_reg[20] (\Using_BitField.Gen_Bits[9].mem_Rd_reg[9] ),
        .ex_Result(ex_Result[20]),
        .exception_kind(exception_kind),
        .imm_Value(imm_Value),
        .op2_Reg__10(op2_Reg__10),
        .reg1_Addr(reg1_Addr),
        .res_Forward2(res_Forward2));
  block_design_microblaze_0_0_Register_File_Bit_502 \Using_FPGA.Gen_RegFile[21].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[21]),
        .Interrupt_Address(Interrupt_Address[21]),
        .Reg1_Data(Reg1_Data[21]),
        .Reg_Write(Reg_Write),
        .\Using_BitField.Gen_Bits[21].mem_Rd_reg[21] (\Using_BitField.Gen_Bits[9].mem_Rd_reg[9] ),
        .ex_Result(ex_Result[21]),
        .exception_kind(exception_kind),
        .imm_Value(imm_Value),
        .op2_Reg__9(op2_Reg__9),
        .reg1_Addr(reg1_Addr),
        .res_Forward2(res_Forward2));
  block_design_microblaze_0_0_Register_File_Bit_503 \Using_FPGA.Gen_RegFile[22].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[22]),
        .Interrupt_Address(Interrupt_Address[22]),
        .Reg1_Data(Reg1_Data[22]),
        .Reg_Write(Reg_Write),
        .\Using_BitField.Gen_Bits[22].mem_Rd_reg[22] (\Using_BitField.Gen_Bits[9].mem_Rd_reg[9] ),
        .ex_Result(ex_Result[22]),
        .exception_kind(exception_kind),
        .imm_Value(imm_Value),
        .op2_Reg__8(op2_Reg__8),
        .reg1_Addr(reg1_Addr),
        .res_Forward2(res_Forward2));
  block_design_microblaze_0_0_Register_File_Bit_504 \Using_FPGA.Gen_RegFile[23].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[23]),
        .Interrupt_Address(Interrupt_Address[23]),
        .Reg1_Data(Reg1_Data[23]),
        .Reg_Write(Reg_Write),
        .\Using_BitField.Gen_Bits[23].mem_Rd_reg[23] (\Using_BitField.Gen_Bits[9].mem_Rd_reg[9] ),
        .ex_Result(ex_Result[23]),
        .exception_kind(exception_kind),
        .imm_Value(imm_Value),
        .op2_Reg__7(op2_Reg__7),
        .reg1_Addr(reg1_Addr),
        .res_Forward2(res_Forward2));
  block_design_microblaze_0_0_Register_File_Bit_505 \Using_FPGA.Gen_RegFile[24].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[24]),
        .Interrupt_Address(Interrupt_Address[24]),
        .Reg1_Data(Reg1_Data[24]),
        .Reg_Write(Reg_Write),
        .\Using_BitField.Gen_Bits[24].mem_Rd_reg[24] (\Using_BitField.Gen_Bits[9].mem_Rd_reg[9] ),
        .ex_Result(ex_Result[24]),
        .exception_kind(exception_kind),
        .imm_Value(imm_Value),
        .op2_Reg__6(op2_Reg__6),
        .reg1_Addr(reg1_Addr),
        .res_Forward2(res_Forward2));
  block_design_microblaze_0_0_Register_File_Bit_506 \Using_FPGA.Gen_RegFile[25].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[25]),
        .Interrupt_Address(Interrupt_Address[25]),
        .Reg1_Data(Reg1_Data[25]),
        .Reg_Write(Reg_Write),
        .\Using_BitField.Gen_Bits[25].mem_Rd_reg[25] (\Using_BitField.Gen_Bits[9].mem_Rd_reg[9] ),
        .ex_Result(ex_Result[25]),
        .exception_kind(exception_kind),
        .imm_Value(imm_Value),
        .op2_Reg__5(op2_Reg__5),
        .reg1_Addr(reg1_Addr),
        .res_Forward2(res_Forward2));
  block_design_microblaze_0_0_Register_File_Bit_507 \Using_FPGA.Gen_RegFile[26].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[26]),
        .Interrupt_Address(Interrupt_Address[26]),
        .Reg1_Data(Reg1_Data[26]),
        .Reg_Write(Reg_Write),
        .\Using_BitField.Gen_Bits[26].mem_Rd_reg[26] (\Using_BitField.Gen_Bits[9].mem_Rd_reg[9] ),
        .ex_Result(ex_Result[26]),
        .exception_kind(exception_kind),
        .imm_Value(imm_Value),
        .op2_Reg__4(op2_Reg__4),
        .reg1_Addr(reg1_Addr),
        .res_Forward2(res_Forward2));
  block_design_microblaze_0_0_Register_File_Bit_508 \Using_FPGA.Gen_RegFile[27].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[27]),
        .Interrupt_Address(Interrupt_Address[27]),
        .Reg1_Data(Reg1_Data[27]),
        .Reg_Write(Reg_Write),
        .\Using_BitField.Gen_Bits[27].mem_Rd_reg[27] (\Using_BitField.Gen_Bits[9].mem_Rd_reg[9] ),
        .ex_Result(ex_Result[27]),
        .exception_kind(exception_kind),
        .imm_Value(imm_Value),
        .op2_Reg__3(op2_Reg__3),
        .reg1_Addr(reg1_Addr),
        .res_Forward2(res_Forward2));
  block_design_microblaze_0_0_Register_File_Bit_509 \Using_FPGA.Gen_RegFile[28].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[28]),
        .Interrupt_Address(Interrupt_Address[28]),
        .Reg1_Data(Reg1_Data[28]),
        .Reg_Write(Reg_Write),
        .\Using_BitField.Gen_Bits[28].mem_Rd_reg[28] (\Using_BitField.Gen_Bits[9].mem_Rd_reg[9] ),
        .ex_Result(ex_Result[28]),
        .exception_kind(exception_kind),
        .imm_Value(imm_Value),
        .op2_Reg__2(op2_Reg__2),
        .reg1_Addr(reg1_Addr),
        .res_Forward2(res_Forward2));
  block_design_microblaze_0_0_Register_File_Bit_510 \Using_FPGA.Gen_RegFile[29].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[29]),
        .Interrupt_Address(Interrupt_Address[29]),
        .Reg1_Data(Reg1_Data[29]),
        .Reg_Write(Reg_Write),
        .\Using_BitField.Gen_Bits[29].mem_Rd_reg[29] (\Using_BitField.Gen_Bits[9].mem_Rd_reg[9] ),
        .ex_Result(ex_Result[29]),
        .exception_kind(exception_kind),
        .imm_Value(imm_Value),
        .op2_Reg__1(op2_Reg__1),
        .reg1_Addr(reg1_Addr),
        .res_Forward2(res_Forward2));
  block_design_microblaze_0_0_Register_File_Bit_511 \Using_FPGA.Gen_RegFile[2].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[2]),
        .Interrupt_Address(Interrupt_Address[2]),
        .Reg1_Data(Reg1_Data[2]),
        .Reg_Write(Reg_Write),
        .\Using_BitField.Gen_Bits[2].mem_Rd_reg[2] (\Using_BitField.Gen_Bits[9].mem_Rd_reg[9] ),
        .ex_Result(ex_Result[2]),
        .exception_kind(exception_kind),
        .imm_Value(imm_Value),
        .op2_Reg__28(op2_Reg__28),
        .reg1_Addr(reg1_Addr),
        .res_Forward2(res_Forward2));
  block_design_microblaze_0_0_Register_File_Bit_512 \Using_FPGA.Gen_RegFile[30].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[30]),
        .Interrupt_Address(Interrupt_Address[30]),
        .Reg1_Data(Reg1_Data[30]),
        .Reg_Write(Reg_Write),
        .\Using_BitField.Gen_Bits[30].mem_Rd_reg[30] (\Using_BitField.Gen_Bits[9].mem_Rd_reg[9] ),
        .ex_Result(ex_Result[30]),
        .exception_kind(exception_kind),
        .imm_Value(imm_Value),
        .op2_Reg__0(op2_Reg__0),
        .reg1_Addr(reg1_Addr),
        .res_Forward2(res_Forward2));
  block_design_microblaze_0_0_Register_File_Bit_513 \Using_FPGA.Gen_RegFile[31].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[31]),
        .Interrupt_Address(Interrupt_Address[31]),
        .Reg1_Data(Reg1_Data[31]),
        .Reg_Write(Reg_Write),
        .\Using_BitField.Gen_Bits[31].mem_Rd_reg[31] (\Using_BitField.Gen_Bits[9].mem_Rd_reg[9] ),
        .ex_Result(ex_Result[31]),
        .exception_kind(exception_kind),
        .imm_Value(imm_Value),
        .op2_Reg(op2_Reg),
        .reg1_Addr(reg1_Addr),
        .res_Forward2(res_Forward2));
  block_design_microblaze_0_0_Register_File_Bit_514 \Using_FPGA.Gen_RegFile[3].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[3]),
        .Interrupt_Address(Interrupt_Address[3]),
        .Reg1_Data(Reg1_Data[3]),
        .Reg_Write(Reg_Write),
        .\Using_BitField.Gen_Bits[3].mem_Rd_reg[3] (\Using_BitField.Gen_Bits[9].mem_Rd_reg[9] ),
        .ex_Result(ex_Result[3]),
        .exception_kind(exception_kind),
        .imm_Value(imm_Value),
        .op2_Reg__27(op2_Reg__27),
        .reg1_Addr(reg1_Addr),
        .res_Forward2(res_Forward2));
  block_design_microblaze_0_0_Register_File_Bit_515 \Using_FPGA.Gen_RegFile[4].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[4]),
        .Interrupt_Address(Interrupt_Address[4]),
        .Reg1_Data(Reg1_Data[4]),
        .Reg_Write(Reg_Write),
        .\Using_BitField.Gen_Bits[4].mem_Rd_reg[4] (\Using_BitField.Gen_Bits[9].mem_Rd_reg[9] ),
        .ex_Result(ex_Result[4]),
        .exception_kind(exception_kind),
        .imm_Value(imm_Value),
        .op2_Reg__26(op2_Reg__26),
        .reg1_Addr(reg1_Addr),
        .res_Forward2(res_Forward2));
  block_design_microblaze_0_0_Register_File_Bit_516 \Using_FPGA.Gen_RegFile[5].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[5]),
        .Interrupt_Address(Interrupt_Address[5]),
        .Reg1_Data(Reg1_Data[5]),
        .Reg_Write(Reg_Write),
        .\Using_BitField.Gen_Bits[5].mem_Rd_reg[5] (\Using_BitField.Gen_Bits[9].mem_Rd_reg[9] ),
        .ex_Result(ex_Result[5]),
        .exception_kind(exception_kind),
        .imm_Value(imm_Value),
        .op2_Reg__25(op2_Reg__25),
        .reg1_Addr(reg1_Addr),
        .res_Forward2(res_Forward2));
  block_design_microblaze_0_0_Register_File_Bit_517 \Using_FPGA.Gen_RegFile[6].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[6]),
        .Interrupt_Address(Interrupt_Address[6]),
        .Reg1_Data(Reg1_Data[6]),
        .Reg_Write(Reg_Write),
        .\Using_BitField.Gen_Bits[6].mem_Rd_reg[6] (\Using_BitField.Gen_Bits[9].mem_Rd_reg[9] ),
        .ex_Result(ex_Result[6]),
        .exception_kind(exception_kind),
        .imm_Value(imm_Value),
        .op2_Reg__24(op2_Reg__24),
        .reg1_Addr(reg1_Addr),
        .res_Forward2(res_Forward2));
  block_design_microblaze_0_0_Register_File_Bit_518 \Using_FPGA.Gen_RegFile[7].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[7]),
        .Interrupt_Address(Interrupt_Address[7]),
        .Reg1_Data(Reg1_Data[7]),
        .Reg_Write(Reg_Write),
        .\Using_BitField.Gen_Bits[7].mem_Rd_reg[7] (\Using_BitField.Gen_Bits[9].mem_Rd_reg[9] ),
        .ex_Result(ex_Result[7]),
        .exception_kind(exception_kind),
        .imm_Value(imm_Value),
        .op2_Reg__23(op2_Reg__23),
        .reg1_Addr(reg1_Addr),
        .res_Forward2(res_Forward2));
  block_design_microblaze_0_0_Register_File_Bit_519 \Using_FPGA.Gen_RegFile[8].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[8]),
        .Interrupt_Address(Interrupt_Address[8]),
        .Reg1_Data(Reg1_Data[8]),
        .Reg_Write(Reg_Write),
        .\Using_BitField.Gen_Bits[8].mem_Rd_reg[8] (\Using_BitField.Gen_Bits[9].mem_Rd_reg[9] ),
        .ex_Result(ex_Result[8]),
        .exception_kind(exception_kind),
        .imm_Value(imm_Value),
        .op2_Reg__22(op2_Reg__22),
        .reg1_Addr(reg1_Addr),
        .res_Forward2(res_Forward2));
  block_design_microblaze_0_0_Register_File_Bit_520 \Using_FPGA.Gen_RegFile[9].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[9]),
        .Interrupt_Address(Interrupt_Address[9]),
        .Reg1_Data(Reg1_Data[9]),
        .Reg_Write(Reg_Write),
        .\Using_BitField.Gen_Bits[9].mem_Rd_reg[9] (\Using_BitField.Gen_Bits[9].mem_Rd_reg[9] ),
        .ex_Result(ex_Result[9]),
        .exception_kind(exception_kind),
        .imm_Value(imm_Value),
        .op2_Reg__21(op2_Reg__21),
        .reg1_Addr(reg1_Addr),
        .res_Forward2(res_Forward2));
endmodule

module block_design_microblaze_0_0_Register_File_Bit
   (op2_Reg__30,
    Reg1_Data,
    Data_Write,
    exception_kind,
    res_Forward2,
    ex_Result,
    Interrupt_Address,
    Clk,
    Reg_Write,
    \Using_BitField.Gen_Bits[0].mem_Rd_reg[0] ,
    reg1_Addr,
    imm_Value);
  output op2_Reg__30;
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]ex_Result;
  input [0:0]Interrupt_Address;
  input Clk;
  input Reg_Write;
  input [4:0]\Using_BitField.Gen_Bits[0].mem_Rd_reg[0] ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Interrupt_Address;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_BitField.Gen_Bits[0].mem_Rd_reg[0] ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [4:0]imm_Value;
  wire op2_Reg__30;
  wire [0:4]reg1_Addr;
  wire res_Forward2;

  block_design_microblaze_0_0_MB_RAM32X1D_582 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_BitField.Gen_Bits[0].mem_Rd_reg[0] (\Using_BitField.Gen_Bits[0].mem_Rd_reg[0] ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  block_design_microblaze_0_0_MB_RAM32X1D_583 RegFile_X2
       (.Clk(Clk),
        .Interrupt_Address(Interrupt_Address),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__29_0 (\Using_BitField.Gen_Bits[0].mem_Rd_reg[0] ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .imm_Value(imm_Value),
        .op2_Reg__30(op2_Reg__30),
        .res_Forward2(res_Forward2));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module block_design_microblaze_0_0_Register_File_Bit_490
   (op2_Reg__20,
    Reg1_Data,
    Data_Write,
    exception_kind,
    res_Forward2,
    ex_Result,
    Interrupt_Address,
    Clk,
    Reg_Write,
    \Using_BitField.Gen_Bits[10].mem_Rd_reg[10] ,
    reg1_Addr,
    imm_Value);
  output op2_Reg__20;
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]ex_Result;
  input [0:0]Interrupt_Address;
  input Clk;
  input Reg_Write;
  input [4:0]\Using_BitField.Gen_Bits[10].mem_Rd_reg[10] ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Interrupt_Address;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_BitField.Gen_Bits[10].mem_Rd_reg[10] ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [4:0]imm_Value;
  wire op2_Reg__20;
  wire [0:4]reg1_Addr;
  wire res_Forward2;

  block_design_microblaze_0_0_MB_RAM32X1D_580 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_BitField.Gen_Bits[10].mem_Rd_reg[10] (\Using_BitField.Gen_Bits[10].mem_Rd_reg[10] ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  block_design_microblaze_0_0_MB_RAM32X1D_581 RegFile_X2
       (.Clk(Clk),
        .Interrupt_Address(Interrupt_Address),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__19_0 (\Using_BitField.Gen_Bits[10].mem_Rd_reg[10] ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .imm_Value(imm_Value),
        .op2_Reg__20(op2_Reg__20),
        .res_Forward2(res_Forward2));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module block_design_microblaze_0_0_Register_File_Bit_491
   (op2_Reg__19,
    Reg1_Data,
    Data_Write,
    exception_kind,
    res_Forward2,
    ex_Result,
    Interrupt_Address,
    Clk,
    Reg_Write,
    \Using_BitField.Gen_Bits[11].mem_Rd_reg[11] ,
    reg1_Addr,
    imm_Value);
  output op2_Reg__19;
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]ex_Result;
  input [0:0]Interrupt_Address;
  input Clk;
  input Reg_Write;
  input [4:0]\Using_BitField.Gen_Bits[11].mem_Rd_reg[11] ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Interrupt_Address;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_BitField.Gen_Bits[11].mem_Rd_reg[11] ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [4:0]imm_Value;
  wire op2_Reg__19;
  wire [0:4]reg1_Addr;
  wire res_Forward2;

  block_design_microblaze_0_0_MB_RAM32X1D_578 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_BitField.Gen_Bits[11].mem_Rd_reg[11] (\Using_BitField.Gen_Bits[11].mem_Rd_reg[11] ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  block_design_microblaze_0_0_MB_RAM32X1D_579 RegFile_X2
       (.Clk(Clk),
        .Interrupt_Address(Interrupt_Address),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__18_0 (\Using_BitField.Gen_Bits[11].mem_Rd_reg[11] ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .imm_Value(imm_Value),
        .op2_Reg__19(op2_Reg__19),
        .res_Forward2(res_Forward2));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module block_design_microblaze_0_0_Register_File_Bit_492
   (op2_Reg__18,
    Reg1_Data,
    Data_Write,
    exception_kind,
    res_Forward2,
    ex_Result,
    Interrupt_Address,
    Clk,
    Reg_Write,
    \Using_BitField.Gen_Bits[12].mem_Rd_reg[12] ,
    reg1_Addr,
    imm_Value);
  output op2_Reg__18;
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]ex_Result;
  input [0:0]Interrupt_Address;
  input Clk;
  input Reg_Write;
  input [4:0]\Using_BitField.Gen_Bits[12].mem_Rd_reg[12] ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Interrupt_Address;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_BitField.Gen_Bits[12].mem_Rd_reg[12] ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [4:0]imm_Value;
  wire op2_Reg__18;
  wire [0:4]reg1_Addr;
  wire res_Forward2;

  block_design_microblaze_0_0_MB_RAM32X1D_576 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_BitField.Gen_Bits[12].mem_Rd_reg[12] (\Using_BitField.Gen_Bits[12].mem_Rd_reg[12] ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  block_design_microblaze_0_0_MB_RAM32X1D_577 RegFile_X2
       (.Clk(Clk),
        .Interrupt_Address(Interrupt_Address),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__17_0 (\Using_BitField.Gen_Bits[12].mem_Rd_reg[12] ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .imm_Value(imm_Value),
        .op2_Reg__18(op2_Reg__18),
        .res_Forward2(res_Forward2));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module block_design_microblaze_0_0_Register_File_Bit_493
   (op2_Reg__17,
    Reg1_Data,
    Data_Write,
    exception_kind,
    res_Forward2,
    ex_Result,
    Interrupt_Address,
    Clk,
    Reg_Write,
    \Using_BitField.Gen_Bits[13].mem_Rd_reg[13] ,
    reg1_Addr,
    imm_Value);
  output op2_Reg__17;
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]ex_Result;
  input [0:0]Interrupt_Address;
  input Clk;
  input Reg_Write;
  input [4:0]\Using_BitField.Gen_Bits[13].mem_Rd_reg[13] ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Interrupt_Address;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_BitField.Gen_Bits[13].mem_Rd_reg[13] ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [4:0]imm_Value;
  wire op2_Reg__17;
  wire [0:4]reg1_Addr;
  wire res_Forward2;

  block_design_microblaze_0_0_MB_RAM32X1D_574 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_BitField.Gen_Bits[13].mem_Rd_reg[13] (\Using_BitField.Gen_Bits[13].mem_Rd_reg[13] ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  block_design_microblaze_0_0_MB_RAM32X1D_575 RegFile_X2
       (.Clk(Clk),
        .Interrupt_Address(Interrupt_Address),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__16_0 (\Using_BitField.Gen_Bits[13].mem_Rd_reg[13] ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .imm_Value(imm_Value),
        .op2_Reg__17(op2_Reg__17),
        .res_Forward2(res_Forward2));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module block_design_microblaze_0_0_Register_File_Bit_494
   (op2_Reg__16,
    Reg1_Data,
    Data_Write,
    exception_kind,
    res_Forward2,
    ex_Result,
    Interrupt_Address,
    Clk,
    Reg_Write,
    \Using_BitField.Gen_Bits[14].mem_Rd_reg[14] ,
    reg1_Addr,
    imm_Value);
  output op2_Reg__16;
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]ex_Result;
  input [0:0]Interrupt_Address;
  input Clk;
  input Reg_Write;
  input [4:0]\Using_BitField.Gen_Bits[14].mem_Rd_reg[14] ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Interrupt_Address;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_BitField.Gen_Bits[14].mem_Rd_reg[14] ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [4:0]imm_Value;
  wire op2_Reg__16;
  wire [0:4]reg1_Addr;
  wire res_Forward2;

  block_design_microblaze_0_0_MB_RAM32X1D_572 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_BitField.Gen_Bits[14].mem_Rd_reg[14] (\Using_BitField.Gen_Bits[14].mem_Rd_reg[14] ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  block_design_microblaze_0_0_MB_RAM32X1D_573 RegFile_X2
       (.Clk(Clk),
        .Interrupt_Address(Interrupt_Address),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__15_0 (\Using_BitField.Gen_Bits[14].mem_Rd_reg[14] ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .imm_Value(imm_Value),
        .op2_Reg__16(op2_Reg__16),
        .res_Forward2(res_Forward2));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module block_design_microblaze_0_0_Register_File_Bit_495
   (op2_Reg__15,
    Reg1_Data,
    Data_Write,
    exception_kind,
    res_Forward2,
    ex_Result,
    Interrupt_Address,
    Clk,
    Reg_Write,
    \Using_BitField.Gen_Bits[15].mem_Rd_reg[15] ,
    reg1_Addr,
    imm_Value);
  output op2_Reg__15;
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]ex_Result;
  input [0:0]Interrupt_Address;
  input Clk;
  input Reg_Write;
  input [4:0]\Using_BitField.Gen_Bits[15].mem_Rd_reg[15] ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Interrupt_Address;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_BitField.Gen_Bits[15].mem_Rd_reg[15] ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [4:0]imm_Value;
  wire op2_Reg__15;
  wire [0:4]reg1_Addr;
  wire res_Forward2;

  block_design_microblaze_0_0_MB_RAM32X1D_570 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_BitField.Gen_Bits[15].mem_Rd_reg[15] (\Using_BitField.Gen_Bits[15].mem_Rd_reg[15] ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  block_design_microblaze_0_0_MB_RAM32X1D_571 RegFile_X2
       (.Clk(Clk),
        .Interrupt_Address(Interrupt_Address),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__14_0 (\Using_BitField.Gen_Bits[15].mem_Rd_reg[15] ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .imm_Value(imm_Value),
        .op2_Reg__15(op2_Reg__15),
        .res_Forward2(res_Forward2));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module block_design_microblaze_0_0_Register_File_Bit_496
   (op2_Reg__14,
    Reg1_Data,
    Data_Write,
    exception_kind,
    res_Forward2,
    ex_Result,
    Interrupt_Address,
    Clk,
    Reg_Write,
    \Using_BitField.Gen_Bits[16].mem_Rd_reg[16] ,
    reg1_Addr,
    imm_Value);
  output op2_Reg__14;
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]ex_Result;
  input [0:0]Interrupt_Address;
  input Clk;
  input Reg_Write;
  input [4:0]\Using_BitField.Gen_Bits[16].mem_Rd_reg[16] ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Interrupt_Address;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_BitField.Gen_Bits[16].mem_Rd_reg[16] ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [4:0]imm_Value;
  wire op2_Reg__14;
  wire [0:4]reg1_Addr;
  wire res_Forward2;

  block_design_microblaze_0_0_MB_RAM32X1D_568 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_BitField.Gen_Bits[16].mem_Rd_reg[16] (\Using_BitField.Gen_Bits[16].mem_Rd_reg[16] ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  block_design_microblaze_0_0_MB_RAM32X1D_569 RegFile_X2
       (.Clk(Clk),
        .Interrupt_Address(Interrupt_Address),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__13_0 (\Using_BitField.Gen_Bits[16].mem_Rd_reg[16] ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .imm_Value(imm_Value),
        .op2_Reg__14(op2_Reg__14),
        .res_Forward2(res_Forward2));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module block_design_microblaze_0_0_Register_File_Bit_497
   (op2_Reg__13,
    Reg1_Data,
    Data_Write,
    exception_kind,
    res_Forward2,
    ex_Result,
    Interrupt_Address,
    Clk,
    Reg_Write,
    \Using_BitField.Gen_Bits[17].mem_Rd_reg[17] ,
    reg1_Addr,
    imm_Value);
  output op2_Reg__13;
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]ex_Result;
  input [0:0]Interrupt_Address;
  input Clk;
  input Reg_Write;
  input [4:0]\Using_BitField.Gen_Bits[17].mem_Rd_reg[17] ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Interrupt_Address;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_BitField.Gen_Bits[17].mem_Rd_reg[17] ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [4:0]imm_Value;
  wire op2_Reg__13;
  wire [0:4]reg1_Addr;
  wire res_Forward2;

  block_design_microblaze_0_0_MB_RAM32X1D_566 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_BitField.Gen_Bits[17].mem_Rd_reg[17] (\Using_BitField.Gen_Bits[17].mem_Rd_reg[17] ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  block_design_microblaze_0_0_MB_RAM32X1D_567 RegFile_X2
       (.Clk(Clk),
        .Interrupt_Address(Interrupt_Address),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__12_0 (\Using_BitField.Gen_Bits[17].mem_Rd_reg[17] ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .imm_Value(imm_Value),
        .op2_Reg__13(op2_Reg__13),
        .res_Forward2(res_Forward2));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module block_design_microblaze_0_0_Register_File_Bit_498
   (op2_Reg__12,
    Reg1_Data,
    Data_Write,
    exception_kind,
    res_Forward2,
    ex_Result,
    Interrupt_Address,
    Clk,
    Reg_Write,
    \Using_BitField.Gen_Bits[18].mem_Rd_reg[18] ,
    reg1_Addr,
    imm_Value);
  output op2_Reg__12;
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]ex_Result;
  input [0:0]Interrupt_Address;
  input Clk;
  input Reg_Write;
  input [4:0]\Using_BitField.Gen_Bits[18].mem_Rd_reg[18] ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Interrupt_Address;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_BitField.Gen_Bits[18].mem_Rd_reg[18] ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [4:0]imm_Value;
  wire op2_Reg__12;
  wire [0:4]reg1_Addr;
  wire res_Forward2;

  block_design_microblaze_0_0_MB_RAM32X1D_564 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_BitField.Gen_Bits[18].mem_Rd_reg[18] (\Using_BitField.Gen_Bits[18].mem_Rd_reg[18] ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  block_design_microblaze_0_0_MB_RAM32X1D_565 RegFile_X2
       (.Clk(Clk),
        .Interrupt_Address(Interrupt_Address),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__11_0 (\Using_BitField.Gen_Bits[18].mem_Rd_reg[18] ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .imm_Value(imm_Value),
        .op2_Reg__12(op2_Reg__12),
        .res_Forward2(res_Forward2));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module block_design_microblaze_0_0_Register_File_Bit_499
   (op2_Reg__11,
    Reg1_Data,
    Data_Write,
    exception_kind,
    res_Forward2,
    ex_Result,
    Interrupt_Address,
    Clk,
    Reg_Write,
    \Using_BitField.Gen_Bits[19].mem_Rd_reg[19] ,
    reg1_Addr,
    imm_Value);
  output op2_Reg__11;
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]ex_Result;
  input [0:0]Interrupt_Address;
  input Clk;
  input Reg_Write;
  input [4:0]\Using_BitField.Gen_Bits[19].mem_Rd_reg[19] ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Interrupt_Address;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_BitField.Gen_Bits[19].mem_Rd_reg[19] ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [4:0]imm_Value;
  wire op2_Reg__11;
  wire [0:4]reg1_Addr;
  wire res_Forward2;

  block_design_microblaze_0_0_MB_RAM32X1D_562 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_BitField.Gen_Bits[19].mem_Rd_reg[19] (\Using_BitField.Gen_Bits[19].mem_Rd_reg[19] ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  block_design_microblaze_0_0_MB_RAM32X1D_563 RegFile_X2
       (.Clk(Clk),
        .Interrupt_Address(Interrupt_Address),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__10_0 (\Using_BitField.Gen_Bits[19].mem_Rd_reg[19] ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .imm_Value(imm_Value),
        .op2_Reg__11(op2_Reg__11),
        .res_Forward2(res_Forward2));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module block_design_microblaze_0_0_Register_File_Bit_500
   (op2_Reg__29,
    Reg1_Data,
    Data_Write,
    exception_kind,
    res_Forward2,
    ex_Result,
    Interrupt_Address,
    Clk,
    Reg_Write,
    \Using_BitField.Gen_Bits[1].mem_Rd_reg[1] ,
    reg1_Addr,
    imm_Value);
  output op2_Reg__29;
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]ex_Result;
  input [0:0]Interrupt_Address;
  input Clk;
  input Reg_Write;
  input [4:0]\Using_BitField.Gen_Bits[1].mem_Rd_reg[1] ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Interrupt_Address;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_BitField.Gen_Bits[1].mem_Rd_reg[1] ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [4:0]imm_Value;
  wire op2_Reg__29;
  wire [0:4]reg1_Addr;
  wire res_Forward2;

  block_design_microblaze_0_0_MB_RAM32X1D_560 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_BitField.Gen_Bits[1].mem_Rd_reg[1] (\Using_BitField.Gen_Bits[1].mem_Rd_reg[1] ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  block_design_microblaze_0_0_MB_RAM32X1D_561 RegFile_X2
       (.Clk(Clk),
        .Interrupt_Address(Interrupt_Address),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__28_0 (\Using_BitField.Gen_Bits[1].mem_Rd_reg[1] ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .imm_Value(imm_Value),
        .op2_Reg__29(op2_Reg__29),
        .res_Forward2(res_Forward2));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module block_design_microblaze_0_0_Register_File_Bit_501
   (op2_Reg__10,
    Reg1_Data,
    Data_Write,
    exception_kind,
    res_Forward2,
    ex_Result,
    Interrupt_Address,
    Clk,
    Reg_Write,
    \Using_BitField.Gen_Bits[20].mem_Rd_reg[20] ,
    reg1_Addr,
    imm_Value);
  output op2_Reg__10;
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]ex_Result;
  input [0:0]Interrupt_Address;
  input Clk;
  input Reg_Write;
  input [4:0]\Using_BitField.Gen_Bits[20].mem_Rd_reg[20] ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Interrupt_Address;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_BitField.Gen_Bits[20].mem_Rd_reg[20] ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [4:0]imm_Value;
  wire op2_Reg__10;
  wire [0:4]reg1_Addr;
  wire res_Forward2;

  block_design_microblaze_0_0_MB_RAM32X1D_558 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_BitField.Gen_Bits[20].mem_Rd_reg[20] (\Using_BitField.Gen_Bits[20].mem_Rd_reg[20] ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  block_design_microblaze_0_0_MB_RAM32X1D_559 RegFile_X2
       (.Clk(Clk),
        .Interrupt_Address(Interrupt_Address),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__9_0 (\Using_BitField.Gen_Bits[20].mem_Rd_reg[20] ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .imm_Value(imm_Value),
        .op2_Reg__10(op2_Reg__10),
        .res_Forward2(res_Forward2));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module block_design_microblaze_0_0_Register_File_Bit_502
   (op2_Reg__9,
    Reg1_Data,
    Data_Write,
    exception_kind,
    res_Forward2,
    ex_Result,
    Interrupt_Address,
    Clk,
    Reg_Write,
    \Using_BitField.Gen_Bits[21].mem_Rd_reg[21] ,
    reg1_Addr,
    imm_Value);
  output op2_Reg__9;
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]ex_Result;
  input [0:0]Interrupt_Address;
  input Clk;
  input Reg_Write;
  input [4:0]\Using_BitField.Gen_Bits[21].mem_Rd_reg[21] ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Interrupt_Address;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_BitField.Gen_Bits[21].mem_Rd_reg[21] ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [4:0]imm_Value;
  wire op2_Reg__9;
  wire [0:4]reg1_Addr;
  wire res_Forward2;

  block_design_microblaze_0_0_MB_RAM32X1D_556 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_BitField.Gen_Bits[21].mem_Rd_reg[21] (\Using_BitField.Gen_Bits[21].mem_Rd_reg[21] ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  block_design_microblaze_0_0_MB_RAM32X1D_557 RegFile_X2
       (.Clk(Clk),
        .Interrupt_Address(Interrupt_Address),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__8_0 (\Using_BitField.Gen_Bits[21].mem_Rd_reg[21] ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .imm_Value(imm_Value),
        .op2_Reg__9(op2_Reg__9),
        .res_Forward2(res_Forward2));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module block_design_microblaze_0_0_Register_File_Bit_503
   (op2_Reg__8,
    Reg1_Data,
    Data_Write,
    exception_kind,
    res_Forward2,
    ex_Result,
    Interrupt_Address,
    Clk,
    Reg_Write,
    \Using_BitField.Gen_Bits[22].mem_Rd_reg[22] ,
    reg1_Addr,
    imm_Value);
  output op2_Reg__8;
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]ex_Result;
  input [0:0]Interrupt_Address;
  input Clk;
  input Reg_Write;
  input [4:0]\Using_BitField.Gen_Bits[22].mem_Rd_reg[22] ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Interrupt_Address;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_BitField.Gen_Bits[22].mem_Rd_reg[22] ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [4:0]imm_Value;
  wire op2_Reg__8;
  wire [0:4]reg1_Addr;
  wire res_Forward2;

  block_design_microblaze_0_0_MB_RAM32X1D_554 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_BitField.Gen_Bits[22].mem_Rd_reg[22] (\Using_BitField.Gen_Bits[22].mem_Rd_reg[22] ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  block_design_microblaze_0_0_MB_RAM32X1D_555 RegFile_X2
       (.Clk(Clk),
        .Interrupt_Address(Interrupt_Address),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__7_0 (\Using_BitField.Gen_Bits[22].mem_Rd_reg[22] ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .imm_Value(imm_Value),
        .op2_Reg__8(op2_Reg__8),
        .res_Forward2(res_Forward2));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module block_design_microblaze_0_0_Register_File_Bit_504
   (op2_Reg__7,
    Reg1_Data,
    Data_Write,
    exception_kind,
    res_Forward2,
    ex_Result,
    Interrupt_Address,
    Clk,
    Reg_Write,
    \Using_BitField.Gen_Bits[23].mem_Rd_reg[23] ,
    reg1_Addr,
    imm_Value);
  output op2_Reg__7;
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]ex_Result;
  input [0:0]Interrupt_Address;
  input Clk;
  input Reg_Write;
  input [4:0]\Using_BitField.Gen_Bits[23].mem_Rd_reg[23] ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Interrupt_Address;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_BitField.Gen_Bits[23].mem_Rd_reg[23] ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [4:0]imm_Value;
  wire op2_Reg__7;
  wire [0:4]reg1_Addr;
  wire res_Forward2;

  block_design_microblaze_0_0_MB_RAM32X1D_552 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_BitField.Gen_Bits[23].mem_Rd_reg[23] (\Using_BitField.Gen_Bits[23].mem_Rd_reg[23] ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  block_design_microblaze_0_0_MB_RAM32X1D_553 RegFile_X2
       (.Clk(Clk),
        .Interrupt_Address(Interrupt_Address),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__6_0 (\Using_BitField.Gen_Bits[23].mem_Rd_reg[23] ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .imm_Value(imm_Value),
        .op2_Reg__7(op2_Reg__7),
        .res_Forward2(res_Forward2));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module block_design_microblaze_0_0_Register_File_Bit_505
   (op2_Reg__6,
    Reg1_Data,
    Data_Write,
    exception_kind,
    res_Forward2,
    ex_Result,
    Interrupt_Address,
    Clk,
    Reg_Write,
    \Using_BitField.Gen_Bits[24].mem_Rd_reg[24] ,
    reg1_Addr,
    imm_Value);
  output op2_Reg__6;
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]ex_Result;
  input [0:0]Interrupt_Address;
  input Clk;
  input Reg_Write;
  input [4:0]\Using_BitField.Gen_Bits[24].mem_Rd_reg[24] ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Interrupt_Address;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_BitField.Gen_Bits[24].mem_Rd_reg[24] ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [4:0]imm_Value;
  wire op2_Reg__6;
  wire [0:4]reg1_Addr;
  wire res_Forward2;

  block_design_microblaze_0_0_MB_RAM32X1D_550 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_BitField.Gen_Bits[24].mem_Rd_reg[24] (\Using_BitField.Gen_Bits[24].mem_Rd_reg[24] ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  block_design_microblaze_0_0_MB_RAM32X1D_551 RegFile_X2
       (.Clk(Clk),
        .Interrupt_Address(Interrupt_Address),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__5_0 (\Using_BitField.Gen_Bits[24].mem_Rd_reg[24] ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .imm_Value(imm_Value),
        .op2_Reg__6(op2_Reg__6),
        .res_Forward2(res_Forward2));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module block_design_microblaze_0_0_Register_File_Bit_506
   (op2_Reg__5,
    Reg1_Data,
    Data_Write,
    exception_kind,
    res_Forward2,
    ex_Result,
    Interrupt_Address,
    Clk,
    Reg_Write,
    \Using_BitField.Gen_Bits[25].mem_Rd_reg[25] ,
    reg1_Addr,
    imm_Value);
  output op2_Reg__5;
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]ex_Result;
  input [0:0]Interrupt_Address;
  input Clk;
  input Reg_Write;
  input [4:0]\Using_BitField.Gen_Bits[25].mem_Rd_reg[25] ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Interrupt_Address;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_BitField.Gen_Bits[25].mem_Rd_reg[25] ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [4:0]imm_Value;
  wire op2_Reg__5;
  wire [0:4]reg1_Addr;
  wire res_Forward2;

  block_design_microblaze_0_0_MB_RAM32X1D_548 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_BitField.Gen_Bits[25].mem_Rd_reg[25] (\Using_BitField.Gen_Bits[25].mem_Rd_reg[25] ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  block_design_microblaze_0_0_MB_RAM32X1D_549 RegFile_X2
       (.Clk(Clk),
        .Interrupt_Address(Interrupt_Address),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__4_0 (\Using_BitField.Gen_Bits[25].mem_Rd_reg[25] ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .imm_Value(imm_Value),
        .op2_Reg__5(op2_Reg__5),
        .res_Forward2(res_Forward2));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module block_design_microblaze_0_0_Register_File_Bit_507
   (op2_Reg__4,
    Reg1_Data,
    Data_Write,
    exception_kind,
    res_Forward2,
    ex_Result,
    Interrupt_Address,
    Clk,
    Reg_Write,
    \Using_BitField.Gen_Bits[26].mem_Rd_reg[26] ,
    reg1_Addr,
    imm_Value);
  output op2_Reg__4;
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]ex_Result;
  input [0:0]Interrupt_Address;
  input Clk;
  input Reg_Write;
  input [4:0]\Using_BitField.Gen_Bits[26].mem_Rd_reg[26] ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Interrupt_Address;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_BitField.Gen_Bits[26].mem_Rd_reg[26] ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [4:0]imm_Value;
  wire op2_Reg__4;
  wire [0:4]reg1_Addr;
  wire res_Forward2;

  block_design_microblaze_0_0_MB_RAM32X1D_546 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_BitField.Gen_Bits[26].mem_Rd_reg[26] (\Using_BitField.Gen_Bits[26].mem_Rd_reg[26] ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  block_design_microblaze_0_0_MB_RAM32X1D_547 RegFile_X2
       (.Clk(Clk),
        .Interrupt_Address(Interrupt_Address),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__3_0 (\Using_BitField.Gen_Bits[26].mem_Rd_reg[26] ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .imm_Value(imm_Value),
        .op2_Reg__4(op2_Reg__4),
        .res_Forward2(res_Forward2));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module block_design_microblaze_0_0_Register_File_Bit_508
   (op2_Reg__3,
    Reg1_Data,
    Data_Write,
    exception_kind,
    res_Forward2,
    ex_Result,
    Interrupt_Address,
    Clk,
    Reg_Write,
    \Using_BitField.Gen_Bits[27].mem_Rd_reg[27] ,
    reg1_Addr,
    imm_Value);
  output op2_Reg__3;
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]ex_Result;
  input [0:0]Interrupt_Address;
  input Clk;
  input Reg_Write;
  input [4:0]\Using_BitField.Gen_Bits[27].mem_Rd_reg[27] ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Interrupt_Address;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_BitField.Gen_Bits[27].mem_Rd_reg[27] ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [4:0]imm_Value;
  wire op2_Reg__3;
  wire [0:4]reg1_Addr;
  wire res_Forward2;

  block_design_microblaze_0_0_MB_RAM32X1D_544 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_BitField.Gen_Bits[27].mem_Rd_reg[27] (\Using_BitField.Gen_Bits[27].mem_Rd_reg[27] ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  block_design_microblaze_0_0_MB_RAM32X1D_545 RegFile_X2
       (.Clk(Clk),
        .Interrupt_Address(Interrupt_Address),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__2_0 (\Using_BitField.Gen_Bits[27].mem_Rd_reg[27] ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .imm_Value(imm_Value),
        .op2_Reg__3(op2_Reg__3),
        .res_Forward2(res_Forward2));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module block_design_microblaze_0_0_Register_File_Bit_509
   (op2_Reg__2,
    Reg1_Data,
    Data_Write,
    exception_kind,
    res_Forward2,
    ex_Result,
    Interrupt_Address,
    Clk,
    Reg_Write,
    \Using_BitField.Gen_Bits[28].mem_Rd_reg[28] ,
    reg1_Addr,
    imm_Value);
  output op2_Reg__2;
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]ex_Result;
  input [0:0]Interrupt_Address;
  input Clk;
  input Reg_Write;
  input [4:0]\Using_BitField.Gen_Bits[28].mem_Rd_reg[28] ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Interrupt_Address;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_BitField.Gen_Bits[28].mem_Rd_reg[28] ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [4:0]imm_Value;
  wire op2_Reg__2;
  wire [0:4]reg1_Addr;
  wire res_Forward2;

  block_design_microblaze_0_0_MB_RAM32X1D_542 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_BitField.Gen_Bits[28].mem_Rd_reg[28] (\Using_BitField.Gen_Bits[28].mem_Rd_reg[28] ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  block_design_microblaze_0_0_MB_RAM32X1D_543 RegFile_X2
       (.Clk(Clk),
        .Interrupt_Address(Interrupt_Address),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__1_0 (\Using_BitField.Gen_Bits[28].mem_Rd_reg[28] ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .imm_Value(imm_Value),
        .op2_Reg__2(op2_Reg__2),
        .res_Forward2(res_Forward2));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module block_design_microblaze_0_0_Register_File_Bit_510
   (op2_Reg__1,
    Reg1_Data,
    Data_Write,
    exception_kind,
    res_Forward2,
    ex_Result,
    Interrupt_Address,
    Clk,
    Reg_Write,
    \Using_BitField.Gen_Bits[29].mem_Rd_reg[29] ,
    reg1_Addr,
    imm_Value);
  output op2_Reg__1;
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]ex_Result;
  input [0:0]Interrupt_Address;
  input Clk;
  input Reg_Write;
  input [4:0]\Using_BitField.Gen_Bits[29].mem_Rd_reg[29] ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Interrupt_Address;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_BitField.Gen_Bits[29].mem_Rd_reg[29] ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [4:0]imm_Value;
  wire op2_Reg__1;
  wire [0:4]reg1_Addr;
  wire res_Forward2;

  block_design_microblaze_0_0_MB_RAM32X1D_540 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_BitField.Gen_Bits[29].mem_Rd_reg[29] (\Using_BitField.Gen_Bits[29].mem_Rd_reg[29] ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  block_design_microblaze_0_0_MB_RAM32X1D_541 RegFile_X2
       (.Clk(Clk),
        .Interrupt_Address(Interrupt_Address),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__0_0 (\Using_BitField.Gen_Bits[29].mem_Rd_reg[29] ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .imm_Value(imm_Value),
        .op2_Reg__1(op2_Reg__1),
        .res_Forward2(res_Forward2));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module block_design_microblaze_0_0_Register_File_Bit_511
   (op2_Reg__28,
    Reg1_Data,
    Data_Write,
    exception_kind,
    res_Forward2,
    ex_Result,
    Interrupt_Address,
    Clk,
    Reg_Write,
    \Using_BitField.Gen_Bits[2].mem_Rd_reg[2] ,
    reg1_Addr,
    imm_Value);
  output op2_Reg__28;
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]ex_Result;
  input [0:0]Interrupt_Address;
  input Clk;
  input Reg_Write;
  input [4:0]\Using_BitField.Gen_Bits[2].mem_Rd_reg[2] ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Interrupt_Address;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_BitField.Gen_Bits[2].mem_Rd_reg[2] ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [4:0]imm_Value;
  wire op2_Reg__28;
  wire [0:4]reg1_Addr;
  wire res_Forward2;

  block_design_microblaze_0_0_MB_RAM32X1D_538 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_BitField.Gen_Bits[2].mem_Rd_reg[2] (\Using_BitField.Gen_Bits[2].mem_Rd_reg[2] ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  block_design_microblaze_0_0_MB_RAM32X1D_539 RegFile_X2
       (.Clk(Clk),
        .Interrupt_Address(Interrupt_Address),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__27_0 (\Using_BitField.Gen_Bits[2].mem_Rd_reg[2] ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .imm_Value(imm_Value),
        .op2_Reg__28(op2_Reg__28),
        .res_Forward2(res_Forward2));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module block_design_microblaze_0_0_Register_File_Bit_512
   (op2_Reg__0,
    Reg1_Data,
    Data_Write,
    exception_kind,
    res_Forward2,
    ex_Result,
    Interrupt_Address,
    Clk,
    Reg_Write,
    \Using_BitField.Gen_Bits[30].mem_Rd_reg[30] ,
    reg1_Addr,
    imm_Value);
  output op2_Reg__0;
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]ex_Result;
  input [0:0]Interrupt_Address;
  input Clk;
  input Reg_Write;
  input [4:0]\Using_BitField.Gen_Bits[30].mem_Rd_reg[30] ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Interrupt_Address;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_BitField.Gen_Bits[30].mem_Rd_reg[30] ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [4:0]imm_Value;
  wire op2_Reg__0;
  wire [0:4]reg1_Addr;
  wire res_Forward2;

  block_design_microblaze_0_0_MB_RAM32X1D_536 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_BitField.Gen_Bits[30].mem_Rd_reg[30] (\Using_BitField.Gen_Bits[30].mem_Rd_reg[30] ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  block_design_microblaze_0_0_MB_RAM32X1D_537 RegFile_X2
       (.Clk(Clk),
        .Interrupt_Address(Interrupt_Address),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2_0 (\Using_BitField.Gen_Bits[30].mem_Rd_reg[30] ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .imm_Value(imm_Value),
        .op2_Reg__0(op2_Reg__0),
        .res_Forward2(res_Forward2));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module block_design_microblaze_0_0_Register_File_Bit_513
   (op2_Reg,
    Reg1_Data,
    Data_Write,
    exception_kind,
    res_Forward2,
    ex_Result,
    Interrupt_Address,
    Clk,
    Reg_Write,
    \Using_BitField.Gen_Bits[31].mem_Rd_reg[31] ,
    reg1_Addr,
    imm_Value);
  output op2_Reg;
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]ex_Result;
  input [0:0]Interrupt_Address;
  input Clk;
  input Reg_Write;
  input [4:0]\Using_BitField.Gen_Bits[31].mem_Rd_reg[31] ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Interrupt_Address;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_BitField.Gen_Bits[31].mem_Rd_reg[31] ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [4:0]imm_Value;
  wire op2_Reg;
  wire [0:4]reg1_Addr;
  wire res_Forward2;

  block_design_microblaze_0_0_MB_RAM32X1D_534 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_BitField.Gen_Bits[31].mem_Rd_reg[31] (\Using_BitField.Gen_Bits[31].mem_Rd_reg[31] ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  block_design_microblaze_0_0_MB_RAM32X1D_535 RegFile_X2
       (.Clk(Clk),
        .Interrupt_Address(Interrupt_Address),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_3_0 (\Using_BitField.Gen_Bits[31].mem_Rd_reg[31] ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .imm_Value(imm_Value),
        .op2_Reg(op2_Reg),
        .res_Forward2(res_Forward2));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module block_design_microblaze_0_0_Register_File_Bit_514
   (op2_Reg__27,
    Reg1_Data,
    Data_Write,
    exception_kind,
    res_Forward2,
    ex_Result,
    Interrupt_Address,
    Clk,
    Reg_Write,
    \Using_BitField.Gen_Bits[3].mem_Rd_reg[3] ,
    reg1_Addr,
    imm_Value);
  output op2_Reg__27;
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]ex_Result;
  input [0:0]Interrupt_Address;
  input Clk;
  input Reg_Write;
  input [4:0]\Using_BitField.Gen_Bits[3].mem_Rd_reg[3] ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Interrupt_Address;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_BitField.Gen_Bits[3].mem_Rd_reg[3] ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [4:0]imm_Value;
  wire op2_Reg__27;
  wire [0:4]reg1_Addr;
  wire res_Forward2;

  block_design_microblaze_0_0_MB_RAM32X1D_532 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_BitField.Gen_Bits[3].mem_Rd_reg[3] (\Using_BitField.Gen_Bits[3].mem_Rd_reg[3] ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  block_design_microblaze_0_0_MB_RAM32X1D_533 RegFile_X2
       (.Clk(Clk),
        .Interrupt_Address(Interrupt_Address),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__26_0 (\Using_BitField.Gen_Bits[3].mem_Rd_reg[3] ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .imm_Value(imm_Value),
        .op2_Reg__27(op2_Reg__27),
        .res_Forward2(res_Forward2));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module block_design_microblaze_0_0_Register_File_Bit_515
   (op2_Reg__26,
    Reg1_Data,
    Data_Write,
    exception_kind,
    res_Forward2,
    ex_Result,
    Interrupt_Address,
    Clk,
    Reg_Write,
    \Using_BitField.Gen_Bits[4].mem_Rd_reg[4] ,
    reg1_Addr,
    imm_Value);
  output op2_Reg__26;
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]ex_Result;
  input [0:0]Interrupt_Address;
  input Clk;
  input Reg_Write;
  input [4:0]\Using_BitField.Gen_Bits[4].mem_Rd_reg[4] ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Interrupt_Address;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_BitField.Gen_Bits[4].mem_Rd_reg[4] ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [4:0]imm_Value;
  wire op2_Reg__26;
  wire [0:4]reg1_Addr;
  wire res_Forward2;

  block_design_microblaze_0_0_MB_RAM32X1D_530 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_BitField.Gen_Bits[4].mem_Rd_reg[4] (\Using_BitField.Gen_Bits[4].mem_Rd_reg[4] ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  block_design_microblaze_0_0_MB_RAM32X1D_531 RegFile_X2
       (.Clk(Clk),
        .Interrupt_Address(Interrupt_Address),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__25_0 (\Using_BitField.Gen_Bits[4].mem_Rd_reg[4] ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .imm_Value(imm_Value),
        .op2_Reg__26(op2_Reg__26),
        .res_Forward2(res_Forward2));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module block_design_microblaze_0_0_Register_File_Bit_516
   (op2_Reg__25,
    Reg1_Data,
    Data_Write,
    exception_kind,
    res_Forward2,
    ex_Result,
    Interrupt_Address,
    Clk,
    Reg_Write,
    \Using_BitField.Gen_Bits[5].mem_Rd_reg[5] ,
    reg1_Addr,
    imm_Value);
  output op2_Reg__25;
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]ex_Result;
  input [0:0]Interrupt_Address;
  input Clk;
  input Reg_Write;
  input [4:0]\Using_BitField.Gen_Bits[5].mem_Rd_reg[5] ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Interrupt_Address;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_BitField.Gen_Bits[5].mem_Rd_reg[5] ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [4:0]imm_Value;
  wire op2_Reg__25;
  wire [0:4]reg1_Addr;
  wire res_Forward2;

  block_design_microblaze_0_0_MB_RAM32X1D_528 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_BitField.Gen_Bits[5].mem_Rd_reg[5] (\Using_BitField.Gen_Bits[5].mem_Rd_reg[5] ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  block_design_microblaze_0_0_MB_RAM32X1D_529 RegFile_X2
       (.Clk(Clk),
        .Interrupt_Address(Interrupt_Address),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__24_0 (\Using_BitField.Gen_Bits[5].mem_Rd_reg[5] ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .imm_Value(imm_Value),
        .op2_Reg__25(op2_Reg__25),
        .res_Forward2(res_Forward2));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module block_design_microblaze_0_0_Register_File_Bit_517
   (op2_Reg__24,
    Reg1_Data,
    Data_Write,
    exception_kind,
    res_Forward2,
    ex_Result,
    Interrupt_Address,
    Clk,
    Reg_Write,
    \Using_BitField.Gen_Bits[6].mem_Rd_reg[6] ,
    reg1_Addr,
    imm_Value);
  output op2_Reg__24;
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]ex_Result;
  input [0:0]Interrupt_Address;
  input Clk;
  input Reg_Write;
  input [4:0]\Using_BitField.Gen_Bits[6].mem_Rd_reg[6] ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Interrupt_Address;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_BitField.Gen_Bits[6].mem_Rd_reg[6] ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [4:0]imm_Value;
  wire op2_Reg__24;
  wire [0:4]reg1_Addr;
  wire res_Forward2;

  block_design_microblaze_0_0_MB_RAM32X1D_526 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_BitField.Gen_Bits[6].mem_Rd_reg[6] (\Using_BitField.Gen_Bits[6].mem_Rd_reg[6] ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  block_design_microblaze_0_0_MB_RAM32X1D_527 RegFile_X2
       (.Clk(Clk),
        .Interrupt_Address(Interrupt_Address),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__23_0 (\Using_BitField.Gen_Bits[6].mem_Rd_reg[6] ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .imm_Value(imm_Value),
        .op2_Reg__24(op2_Reg__24),
        .res_Forward2(res_Forward2));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module block_design_microblaze_0_0_Register_File_Bit_518
   (op2_Reg__23,
    Reg1_Data,
    Data_Write,
    exception_kind,
    res_Forward2,
    ex_Result,
    Interrupt_Address,
    Clk,
    Reg_Write,
    \Using_BitField.Gen_Bits[7].mem_Rd_reg[7] ,
    reg1_Addr,
    imm_Value);
  output op2_Reg__23;
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]ex_Result;
  input [0:0]Interrupt_Address;
  input Clk;
  input Reg_Write;
  input [4:0]\Using_BitField.Gen_Bits[7].mem_Rd_reg[7] ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Interrupt_Address;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_BitField.Gen_Bits[7].mem_Rd_reg[7] ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [4:0]imm_Value;
  wire op2_Reg__23;
  wire [0:4]reg1_Addr;
  wire res_Forward2;

  block_design_microblaze_0_0_MB_RAM32X1D_524 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_BitField.Gen_Bits[7].mem_Rd_reg[7] (\Using_BitField.Gen_Bits[7].mem_Rd_reg[7] ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  block_design_microblaze_0_0_MB_RAM32X1D_525 RegFile_X2
       (.Clk(Clk),
        .Interrupt_Address(Interrupt_Address),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__22_0 (\Using_BitField.Gen_Bits[7].mem_Rd_reg[7] ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .imm_Value(imm_Value),
        .op2_Reg__23(op2_Reg__23),
        .res_Forward2(res_Forward2));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module block_design_microblaze_0_0_Register_File_Bit_519
   (op2_Reg__22,
    Reg1_Data,
    Data_Write,
    exception_kind,
    res_Forward2,
    ex_Result,
    Interrupt_Address,
    Clk,
    Reg_Write,
    \Using_BitField.Gen_Bits[8].mem_Rd_reg[8] ,
    reg1_Addr,
    imm_Value);
  output op2_Reg__22;
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]ex_Result;
  input [0:0]Interrupt_Address;
  input Clk;
  input Reg_Write;
  input [4:0]\Using_BitField.Gen_Bits[8].mem_Rd_reg[8] ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Interrupt_Address;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_BitField.Gen_Bits[8].mem_Rd_reg[8] ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [4:0]imm_Value;
  wire op2_Reg__22;
  wire [0:4]reg1_Addr;
  wire res_Forward2;

  block_design_microblaze_0_0_MB_RAM32X1D_522 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_BitField.Gen_Bits[8].mem_Rd_reg[8] (\Using_BitField.Gen_Bits[8].mem_Rd_reg[8] ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  block_design_microblaze_0_0_MB_RAM32X1D_523 RegFile_X2
       (.Clk(Clk),
        .Interrupt_Address(Interrupt_Address),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__21_0 (\Using_BitField.Gen_Bits[8].mem_Rd_reg[8] ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .imm_Value(imm_Value),
        .op2_Reg__22(op2_Reg__22),
        .res_Forward2(res_Forward2));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module block_design_microblaze_0_0_Register_File_Bit_520
   (op2_Reg__21,
    Reg1_Data,
    Data_Write,
    exception_kind,
    res_Forward2,
    ex_Result,
    Interrupt_Address,
    Clk,
    Reg_Write,
    \Using_BitField.Gen_Bits[9].mem_Rd_reg[9] ,
    reg1_Addr,
    imm_Value);
  output op2_Reg__21;
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]ex_Result;
  input [0:0]Interrupt_Address;
  input Clk;
  input Reg_Write;
  input [4:0]\Using_BitField.Gen_Bits[9].mem_Rd_reg[9] ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Interrupt_Address;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_BitField.Gen_Bits[9].mem_Rd_reg[9] ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [4:0]imm_Value;
  wire op2_Reg__21;
  wire [0:4]reg1_Addr;
  wire res_Forward2;

  block_design_microblaze_0_0_MB_RAM32X1D RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_BitField.Gen_Bits[9].mem_Rd_reg[9] (\Using_BitField.Gen_Bits[9].mem_Rd_reg[9] ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  block_design_microblaze_0_0_MB_RAM32X1D_521 RegFile_X2
       (.Clk(Clk),
        .Interrupt_Address(Interrupt_Address),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__20_0 (\Using_BitField.Gen_Bits[9].mem_Rd_reg[9] ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .imm_Value(imm_Value),
        .op2_Reg__21(op2_Reg__21),
        .res_Forward2(res_Forward2));
endmodule

module block_design_microblaze_0_0_Result_Mux
   (D,
    New_Reg_Value,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    ex_Result,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    \Using_FPGA.Native_7 ,
    \Using_FPGA.Native_8 ,
    \Using_FPGA.Native_9 ,
    \Using_FPGA.Native_10 ,
    \Using_FPGA.Native_11 ,
    \Using_FPGA.Native_12 ,
    \data_rd_reg_reg[30] ,
    register_write,
    Enable_Interrupt,
    \data_rd_reg_reg[30]_0 ,
    PC_EX,
    carry,
    msr_I,
    Other_Result,
    mul_Result,
    Result_Sel,
    ALU_Result,
    shift_Logic_Result,
    extend_Data_Read,
    Clk,
    \Using_FPGA.Native_13 ,
    Shift_Logic_Res,
    Data_Read_Mask,
    \Using_FPGA.Native_14 ,
    \Using_FPGA.Native_15 ,
    \Using_FPGA.Native_16 ,
    \Using_FPGA.Native_17 ,
    \Using_FPGA.Native_18 ,
    \Using_FPGA.Native_19 ,
    \Using_FPGA.Native_20 ,
    \Using_FPGA.Native_21 ,
    \Using_FPGA.Native_22 ,
    Data_Read0_out,
    \Using_FPGA.Native_23 ,
    \Using_FPGA.Native_24 ,
    \Using_FPGA.Native_25 ,
    \Using_FPGA.Native_26 ,
    \Using_FPGA.Native_27 ,
    \Using_FPGA.Native_28 ,
    \Using_FPGA.Native_29 ,
    \Using_FPGA.Native_30 ,
    \Using_FPGA.Native_31 ,
    \Using_FPGA.Native_32 ,
    \Using_FPGA.Native_33 ,
    \Using_FPGA.Native_34 ,
    \Using_FPGA.Native_35 ,
    \Using_FPGA.Native_36 ,
    \Using_FPGA.Native_37 );
  output [3:0]D;
  output New_Reg_Value;
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  output [0:31]ex_Result;
  output \Using_FPGA.Native_2 ;
  output \Using_FPGA.Native_3 ;
  output \Using_FPGA.Native_4 ;
  output \Using_FPGA.Native_5 ;
  output \Using_FPGA.Native_6 ;
  output \Using_FPGA.Native_7 ;
  output \Using_FPGA.Native_8 ;
  output \Using_FPGA.Native_9 ;
  output \Using_FPGA.Native_10 ;
  output \Using_FPGA.Native_11 ;
  output [17:0]\Using_FPGA.Native_12 ;
  input \data_rd_reg_reg[30] ;
  input register_write;
  input Enable_Interrupt;
  input \data_rd_reg_reg[30]_0 ;
  input [3:0]PC_EX;
  input carry;
  input [1:0]msr_I;
  input [0:31]Other_Result;
  input [0:31]mul_Result;
  input [0:1]Result_Sel;
  input [0:31]ALU_Result;
  input [5:0]shift_Logic_Result;
  input [15:0]extend_Data_Read;
  input Clk;
  input [1:0]\Using_FPGA.Native_13 ;
  input Shift_Logic_Res;
  input Data_Read_Mask;
  input \Using_FPGA.Native_14 ;
  input \Using_FPGA.Native_15 ;
  input \Using_FPGA.Native_16 ;
  input \Using_FPGA.Native_17 ;
  input \Using_FPGA.Native_18 ;
  input \Using_FPGA.Native_19 ;
  input \Using_FPGA.Native_20 ;
  input \Using_FPGA.Native_21 ;
  input \Using_FPGA.Native_22 ;
  input [15:0]Data_Read0_out;
  input \Using_FPGA.Native_23 ;
  input \Using_FPGA.Native_24 ;
  input \Using_FPGA.Native_25 ;
  input \Using_FPGA.Native_26 ;
  input \Using_FPGA.Native_27 ;
  input \Using_FPGA.Native_28 ;
  input \Using_FPGA.Native_29 ;
  input \Using_FPGA.Native_30 ;
  input \Using_FPGA.Native_31 ;
  input \Using_FPGA.Native_32 ;
  input \Using_FPGA.Native_33 ;
  input \Using_FPGA.Native_34 ;
  input \Using_FPGA.Native_35 ;
  input \Using_FPGA.Native_36 ;
  input \Using_FPGA.Native_37 ;

  wire [0:31]ALU_Result;
  wire Clk;
  wire [3:0]D;
  wire [15:0]Data_Read0_out;
  wire Data_Read_Mask;
  wire Enable_Interrupt;
  wire New_Reg_Value;
  wire [0:31]Other_Result;
  wire [3:0]PC_EX;
  wire [0:1]Result_Sel;
  wire Shift_Logic_Res;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_10 ;
  wire \Using_FPGA.Native_11 ;
  wire [17:0]\Using_FPGA.Native_12 ;
  wire [1:0]\Using_FPGA.Native_13 ;
  wire \Using_FPGA.Native_14 ;
  wire \Using_FPGA.Native_15 ;
  wire \Using_FPGA.Native_16 ;
  wire \Using_FPGA.Native_17 ;
  wire \Using_FPGA.Native_18 ;
  wire \Using_FPGA.Native_19 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_20 ;
  wire \Using_FPGA.Native_21 ;
  wire \Using_FPGA.Native_22 ;
  wire \Using_FPGA.Native_23 ;
  wire \Using_FPGA.Native_24 ;
  wire \Using_FPGA.Native_25 ;
  wire \Using_FPGA.Native_26 ;
  wire \Using_FPGA.Native_27 ;
  wire \Using_FPGA.Native_28 ;
  wire \Using_FPGA.Native_29 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_30 ;
  wire \Using_FPGA.Native_31 ;
  wire \Using_FPGA.Native_32 ;
  wire \Using_FPGA.Native_33 ;
  wire \Using_FPGA.Native_34 ;
  wire \Using_FPGA.Native_35 ;
  wire \Using_FPGA.Native_36 ;
  wire \Using_FPGA.Native_37 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire \Using_FPGA.Native_8 ;
  wire \Using_FPGA.Native_9 ;
  wire carry;
  wire \data_rd_reg_reg[30] ;
  wire \data_rd_reg_reg[30]_0 ;
  wire [0:31]ex_Result;
  wire [15:0]extend_Data_Read;
  wire [1:0]msr_I;
  wire [0:31]mul_Result;
  wire register_write;
  wire [5:0]shift_Logic_Result;

  block_design_microblaze_0_0_Result_Mux_Bit \Result_Mux_Bits[0].Result_Mux_Bit_I 
       (.ALU_Result(ALU_Result[0]),
        .Clk(Clk),
        .Data_Read0_out(Data_Read0_out[15]),
        .Other_Result(Other_Result[0]),
        .Result_Sel(Result_Sel),
        .\Using_FPGA.Native (\Using_FPGA.Native_12 [17]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_37 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_22 ),
        .ex_Result(ex_Result[0]),
        .mul_Result(mul_Result[0]));
  block_design_microblaze_0_0_Result_Mux_Bit_366 \Result_Mux_Bits[10].Result_Mux_Bit_I 
       (.ALU_Result(ALU_Result[10]),
        .Clk(Clk),
        .Data_Read0_out(Data_Read0_out[5]),
        .Other_Result(Other_Result[10]),
        .Result_Sel(Result_Sel),
        .\Using_FPGA.Native (\Using_FPGA.Native_12 [7]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_27 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_22 ),
        .ex_Result(ex_Result[10]),
        .mul_Result(mul_Result[10]));
  block_design_microblaze_0_0_Result_Mux_Bit_367 \Result_Mux_Bits[11].Result_Mux_Bit_I 
       (.ALU_Result(ALU_Result[11]),
        .Clk(Clk),
        .Data_Read0_out(Data_Read0_out[4]),
        .Other_Result(Other_Result[11]),
        .Result_Sel(Result_Sel),
        .\Using_FPGA.Native (\Using_FPGA.Native_12 [6]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_26 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_22 ),
        .ex_Result(ex_Result[11]),
        .mul_Result(mul_Result[11]));
  block_design_microblaze_0_0_Result_Mux_Bit_368 \Result_Mux_Bits[12].Result_Mux_Bit_I 
       (.ALU_Result(ALU_Result[12]),
        .Clk(Clk),
        .Data_Read0_out(Data_Read0_out[3]),
        .Other_Result(Other_Result[12]),
        .Result_Sel(Result_Sel),
        .\Using_FPGA.Native (\Using_FPGA.Native_12 [5]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_25 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_22 ),
        .ex_Result(ex_Result[12]),
        .mul_Result(mul_Result[12]));
  block_design_microblaze_0_0_Result_Mux_Bit_369 \Result_Mux_Bits[13].Result_Mux_Bit_I 
       (.ALU_Result(ALU_Result[13]),
        .Clk(Clk),
        .Data_Read0_out(Data_Read0_out[2]),
        .Other_Result(Other_Result[13]),
        .Result_Sel(Result_Sel),
        .\Using_FPGA.Native (\Using_FPGA.Native_12 [4]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_24 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_22 ),
        .ex_Result(ex_Result[13]),
        .mul_Result(mul_Result[13]));
  block_design_microblaze_0_0_Result_Mux_Bit_370 \Result_Mux_Bits[14].Result_Mux_Bit_I 
       (.ALU_Result(ALU_Result[14]),
        .Clk(Clk),
        .Data_Read0_out(Data_Read0_out[1]),
        .Other_Result(Other_Result[14]),
        .Result_Sel(Result_Sel),
        .\Using_FPGA.Native (\Using_FPGA.Native_12 [3]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_23 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_22 ),
        .ex_Result(ex_Result[14]),
        .mul_Result(mul_Result[14]));
  block_design_microblaze_0_0_Result_Mux_Bit_371 \Result_Mux_Bits[15].Result_Mux_Bit_I 
       (.ALU_Result(ALU_Result[15]),
        .Clk(Clk),
        .Data_Read0_out(Data_Read0_out[0]),
        .Other_Result(Other_Result[15]),
        .Result_Sel(Result_Sel),
        .\Using_FPGA.Native (\Using_FPGA.Native_12 [2]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_21 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_22 ),
        .ex_Result(ex_Result[15]),
        .mul_Result(mul_Result[15]));
  block_design_microblaze_0_0_Result_Mux_Bit_372 \Result_Mux_Bits[16].Result_Mux_Bit_I 
       (.ALU_Result(ALU_Result[16]),
        .Clk(Clk),
        .Data_Read_Mask(Data_Read_Mask),
        .Other_Result(Other_Result[16]),
        .Result_Sel(Result_Sel),
        .\Using_FPGA.Native (\Using_FPGA.Native_12 [1]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_20 ),
        .ex_Result(ex_Result[16]),
        .extend_Data_Read(extend_Data_Read[15]),
        .mul_Result(mul_Result[16]));
  block_design_microblaze_0_0_Result_Mux_Bit_373 \Result_Mux_Bits[17].Result_Mux_Bit_I 
       (.ALU_Result(ALU_Result[17]),
        .Clk(Clk),
        .Data_Read_Mask(Data_Read_Mask),
        .Other_Result(Other_Result[17]),
        .Result_Sel(Result_Sel),
        .\Using_FPGA.Native (\Using_FPGA.Native_12 [0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_19 ),
        .ex_Result(ex_Result[17]),
        .extend_Data_Read(extend_Data_Read[14]),
        .mul_Result(mul_Result[17]));
  block_design_microblaze_0_0_Result_Mux_Bit_374 \Result_Mux_Bits[18].Result_Mux_Bit_I 
       (.ALU_Result(ALU_Result[18]),
        .Clk(Clk),
        .Data_Read_Mask(Data_Read_Mask),
        .Other_Result(Other_Result[18]),
        .Result_Sel(Result_Sel),
        .\Using_FPGA.Native (\Using_FPGA.Native_11 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_18 ),
        .ex_Result(ex_Result[18]),
        .extend_Data_Read(extend_Data_Read[13]),
        .mul_Result(mul_Result[18]));
  block_design_microblaze_0_0_Result_Mux_Bit_375 \Result_Mux_Bits[19].Result_Mux_Bit_I 
       (.ALU_Result(ALU_Result[19]),
        .Clk(Clk),
        .Data_Read_Mask(Data_Read_Mask),
        .Other_Result(Other_Result[19]),
        .Result_Sel(Result_Sel),
        .\Using_FPGA.Native (\Using_FPGA.Native_10 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_17 ),
        .ex_Result(ex_Result[19]),
        .extend_Data_Read(extend_Data_Read[12]),
        .mul_Result(mul_Result[19]));
  block_design_microblaze_0_0_Result_Mux_Bit_376 \Result_Mux_Bits[1].Result_Mux_Bit_I 
       (.ALU_Result(ALU_Result[1]),
        .Clk(Clk),
        .Data_Read0_out(Data_Read0_out[14]),
        .Other_Result(Other_Result[1]),
        .Result_Sel(Result_Sel),
        .\Using_FPGA.Native (\Using_FPGA.Native_12 [16]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_36 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_22 ),
        .ex_Result(ex_Result[1]),
        .mul_Result(mul_Result[1]));
  block_design_microblaze_0_0_Result_Mux_Bit_377 \Result_Mux_Bits[20].Result_Mux_Bit_I 
       (.ALU_Result(ALU_Result[20]),
        .Clk(Clk),
        .Data_Read_Mask(Data_Read_Mask),
        .Other_Result(Other_Result[20]),
        .Result_Sel(Result_Sel),
        .\Using_FPGA.Native (\Using_FPGA.Native_9 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_16 ),
        .ex_Result(ex_Result[20]),
        .extend_Data_Read(extend_Data_Read[11]),
        .mul_Result(mul_Result[20]));
  block_design_microblaze_0_0_Result_Mux_Bit_378 \Result_Mux_Bits[21].Result_Mux_Bit_I 
       (.ALU_Result(ALU_Result[21]),
        .Clk(Clk),
        .Data_Read_Mask(Data_Read_Mask),
        .Other_Result(Other_Result[21]),
        .Result_Sel(Result_Sel),
        .\Using_FPGA.Native (\Using_FPGA.Native_8 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_15 ),
        .ex_Result(ex_Result[21]),
        .extend_Data_Read(extend_Data_Read[10]),
        .mul_Result(mul_Result[21]));
  block_design_microblaze_0_0_Result_Mux_Bit_379 \Result_Mux_Bits[22].Result_Mux_Bit_I 
       (.ALU_Result(ALU_Result[22]),
        .Clk(Clk),
        .Data_Read_Mask(Data_Read_Mask),
        .Other_Result(Other_Result[22]),
        .Result_Sel(Result_Sel),
        .\Using_FPGA.Native (\Using_FPGA.Native_7 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_14 ),
        .ex_Result(ex_Result[22]),
        .extend_Data_Read(extend_Data_Read[9]),
        .mul_Result(mul_Result[22]));
  block_design_microblaze_0_0_Result_Mux_Bit_380 \Result_Mux_Bits[23].Result_Mux_Bit_I 
       (.ALU_Result(ALU_Result[23]),
        .Clk(Clk),
        .Data_Read_Mask(Data_Read_Mask),
        .Other_Result(Other_Result[23]),
        .Result_Sel(Result_Sel),
        .Shift_Logic_Res(Shift_Logic_Res),
        .\Using_FPGA.Native (\Using_FPGA.Native_6 ),
        .ex_Result(ex_Result[23]),
        .extend_Data_Read(extend_Data_Read[8]),
        .mul_Result(mul_Result[23]));
  block_design_microblaze_0_0_Result_Mux_Bit_381 \Result_Mux_Bits[24].Result_Mux_Bit_I 
       (.ALU_Result(ALU_Result[24]),
        .Clk(Clk),
        .Other_Result(Other_Result[24]),
        .Result_Sel(Result_Sel),
        .\Using_FPGA.Native (\Using_FPGA.Native_5 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_13 [1]),
        .ex_Result(ex_Result[24]),
        .extend_Data_Read(extend_Data_Read[7]),
        .mul_Result(mul_Result[24]));
  block_design_microblaze_0_0_Result_Mux_Bit_382 \Result_Mux_Bits[25].Result_Mux_Bit_I 
       (.ALU_Result(ALU_Result[25]),
        .Clk(Clk),
        .Other_Result(Other_Result[25]),
        .Result_Sel(Result_Sel),
        .\Using_FPGA.Native (\Using_FPGA.Native_4 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_13 [0]),
        .ex_Result(ex_Result[25]),
        .extend_Data_Read(extend_Data_Read[6]),
        .mul_Result(mul_Result[25]));
  block_design_microblaze_0_0_Result_Mux_Bit_383 \Result_Mux_Bits[26].Result_Mux_Bit_I 
       (.ALU_Result(ALU_Result[26]),
        .Clk(Clk),
        .Other_Result(Other_Result[26]),
        .Result_Sel(Result_Sel),
        .\Using_FPGA.Native (\Using_FPGA.Native_3 ),
        .ex_Result(ex_Result[26]),
        .extend_Data_Read(extend_Data_Read[5]),
        .mul_Result(mul_Result[26]),
        .shift_Logic_Result(shift_Logic_Result[5]));
  block_design_microblaze_0_0_Result_Mux_Bit_384 \Result_Mux_Bits[27].Result_Mux_Bit_I 
       (.ALU_Result(ALU_Result[27]),
        .Clk(Clk),
        .D(D[3]),
        .Other_Result(Other_Result[27]),
        .PC_EX(PC_EX[3]),
        .Result_Sel(Result_Sel),
        .\Using_FPGA.Native (\Using_FPGA.Native_1 ),
        .\data_rd_reg_reg[27] (\data_rd_reg_reg[30] ),
        .\data_rd_reg_reg[27]_0 (\data_rd_reg_reg[30]_0 ),
        .ex_Result(ex_Result[27]),
        .extend_Data_Read(extend_Data_Read[4]),
        .msr_I(msr_I[1]),
        .mul_Result(mul_Result[27]),
        .register_write(register_write),
        .shift_Logic_Result(shift_Logic_Result[4]));
  block_design_microblaze_0_0_Result_Mux_Bit_385 \Result_Mux_Bits[28].Result_Mux_Bit_I 
       (.ALU_Result(ALU_Result[28]),
        .Clk(Clk),
        .D(D[2]),
        .Other_Result(Other_Result[28]),
        .PC_EX(PC_EX[2]),
        .Result_Sel(Result_Sel),
        .\Using_FPGA.Native (\Using_FPGA.Native_0 ),
        .\data_rd_reg_reg[28] (\data_rd_reg_reg[30] ),
        .\data_rd_reg_reg[28]_0 (\data_rd_reg_reg[30]_0 ),
        .ex_Result(ex_Result[28]),
        .extend_Data_Read(extend_Data_Read[3]),
        .msr_I(msr_I[0]),
        .mul_Result(mul_Result[28]),
        .register_write(register_write),
        .shift_Logic_Result(shift_Logic_Result[3]));
  block_design_microblaze_0_0_Result_Mux_Bit_386 \Result_Mux_Bits[29].Result_Mux_Bit_I 
       (.ALU_Result(ALU_Result[29]),
        .Clk(Clk),
        .D(D[1]),
        .Other_Result(Other_Result[29]),
        .PC_EX(PC_EX[1]),
        .Result_Sel(Result_Sel),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .carry(carry),
        .\data_rd_reg_reg[29] (\data_rd_reg_reg[30] ),
        .\data_rd_reg_reg[29]_0 (\data_rd_reg_reg[30]_0 ),
        .ex_Result(ex_Result[29]),
        .extend_Data_Read(extend_Data_Read[2]),
        .mul_Result(mul_Result[29]),
        .register_write(register_write),
        .shift_Logic_Result(shift_Logic_Result[2]));
  block_design_microblaze_0_0_Result_Mux_Bit_387 \Result_Mux_Bits[2].Result_Mux_Bit_I 
       (.ALU_Result(ALU_Result[2]),
        .Clk(Clk),
        .Data_Read0_out(Data_Read0_out[13]),
        .Other_Result(Other_Result[2]),
        .Result_Sel(Result_Sel),
        .\Using_FPGA.Native (\Using_FPGA.Native_12 [15]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_35 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_22 ),
        .ex_Result(ex_Result[2]),
        .mul_Result(mul_Result[2]));
  block_design_microblaze_0_0_Result_Mux_Bit_388 \Result_Mux_Bits[30].Result_Mux_Bit_I 
       (.ALU_Result(ALU_Result[30]),
        .Clk(Clk),
        .D(D[0]),
        .Enable_Interrupt(Enable_Interrupt),
        .New_Reg_Value(New_Reg_Value),
        .Other_Result(Other_Result[30]),
        .PC_EX(PC_EX[0]),
        .Result_Sel(Result_Sel),
        .\data_rd_reg_reg[30] (\data_rd_reg_reg[30] ),
        .\data_rd_reg_reg[30]_0 (\data_rd_reg_reg[30]_0 ),
        .ex_Result(ex_Result[30]),
        .extend_Data_Read(extend_Data_Read[1]),
        .mul_Result(mul_Result[30]),
        .register_write(register_write),
        .shift_Logic_Result(shift_Logic_Result[1]));
  block_design_microblaze_0_0_Result_Mux_Bit_389 \Result_Mux_Bits[31].Result_Mux_Bit_I 
       (.ALU_Result(ALU_Result[31]),
        .Clk(Clk),
        .Other_Result(Other_Result[31]),
        .Result_Sel(Result_Sel),
        .\Using_FPGA.Native (\Using_FPGA.Native_2 ),
        .ex_Result(ex_Result[31]),
        .extend_Data_Read(extend_Data_Read[0]),
        .mul_Result(mul_Result[31]),
        .shift_Logic_Result(shift_Logic_Result[0]));
  block_design_microblaze_0_0_Result_Mux_Bit_390 \Result_Mux_Bits[3].Result_Mux_Bit_I 
       (.ALU_Result(ALU_Result[3]),
        .Clk(Clk),
        .Data_Read0_out(Data_Read0_out[12]),
        .Other_Result(Other_Result[3]),
        .Result_Sel(Result_Sel),
        .\Using_FPGA.Native (\Using_FPGA.Native_12 [14]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_34 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_22 ),
        .ex_Result(ex_Result[3]),
        .mul_Result(mul_Result[3]));
  block_design_microblaze_0_0_Result_Mux_Bit_391 \Result_Mux_Bits[4].Result_Mux_Bit_I 
       (.ALU_Result(ALU_Result[4]),
        .Clk(Clk),
        .Data_Read0_out(Data_Read0_out[11]),
        .Other_Result(Other_Result[4]),
        .Result_Sel(Result_Sel),
        .\Using_FPGA.Native (\Using_FPGA.Native_12 [13]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_33 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_22 ),
        .ex_Result(ex_Result[4]),
        .mul_Result(mul_Result[4]));
  block_design_microblaze_0_0_Result_Mux_Bit_392 \Result_Mux_Bits[5].Result_Mux_Bit_I 
       (.ALU_Result(ALU_Result[5]),
        .Clk(Clk),
        .Data_Read0_out(Data_Read0_out[10]),
        .Other_Result(Other_Result[5]),
        .Result_Sel(Result_Sel),
        .\Using_FPGA.Native (\Using_FPGA.Native_12 [12]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_32 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_22 ),
        .ex_Result(ex_Result[5]),
        .mul_Result(mul_Result[5]));
  block_design_microblaze_0_0_Result_Mux_Bit_393 \Result_Mux_Bits[6].Result_Mux_Bit_I 
       (.ALU_Result(ALU_Result[6]),
        .Clk(Clk),
        .Data_Read0_out(Data_Read0_out[9]),
        .Other_Result(Other_Result[6]),
        .Result_Sel(Result_Sel),
        .\Using_FPGA.Native (\Using_FPGA.Native_12 [11]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_31 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_22 ),
        .ex_Result(ex_Result[6]),
        .mul_Result(mul_Result[6]));
  block_design_microblaze_0_0_Result_Mux_Bit_394 \Result_Mux_Bits[7].Result_Mux_Bit_I 
       (.ALU_Result(ALU_Result[7]),
        .Clk(Clk),
        .Data_Read0_out(Data_Read0_out[8]),
        .Other_Result(Other_Result[7]),
        .Result_Sel(Result_Sel),
        .\Using_FPGA.Native (\Using_FPGA.Native_12 [10]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_30 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_22 ),
        .ex_Result(ex_Result[7]),
        .mul_Result(mul_Result[7]));
  block_design_microblaze_0_0_Result_Mux_Bit_395 \Result_Mux_Bits[8].Result_Mux_Bit_I 
       (.ALU_Result(ALU_Result[8]),
        .Clk(Clk),
        .Data_Read0_out(Data_Read0_out[7]),
        .Other_Result(Other_Result[8]),
        .Result_Sel(Result_Sel),
        .\Using_FPGA.Native (\Using_FPGA.Native_12 [9]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_29 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_22 ),
        .ex_Result(ex_Result[8]),
        .mul_Result(mul_Result[8]));
  block_design_microblaze_0_0_Result_Mux_Bit_396 \Result_Mux_Bits[9].Result_Mux_Bit_I 
       (.ALU_Result(ALU_Result[9]),
        .Clk(Clk),
        .Data_Read0_out(Data_Read0_out[6]),
        .Other_Result(Other_Result[9]),
        .Result_Sel(Result_Sel),
        .\Using_FPGA.Native (\Using_FPGA.Native_12 [8]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_28 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_22 ),
        .ex_Result(ex_Result[9]),
        .mul_Result(mul_Result[9]));
endmodule

module block_design_microblaze_0_0_Result_Mux_Bit
   (ex_Result,
    \Using_FPGA.Native ,
    Other_Result,
    mul_Result,
    Result_Sel,
    ALU_Result,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Data_Read0_out,
    Clk);
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Other_Result;
  input [0:0]mul_Result;
  input [0:1]Result_Sel;
  input [0:0]ALU_Result;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]Data_Read0_out;
  input Clk;

  wire [0:0]ALU_Result;
  wire Clk;
  wire [0:0]Data_Read0_out;
  wire [0:0]Other_Result;
  wire [0:1]Result_Sel;
  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [0:0]ex_Result;
  wire mul_ALU_Res;
  wire [0:0]mul_Result;

  block_design_microblaze_0_0_MB_LUT6__parameterized1_487 Data_Shift_Mux
       (.Data_Read0_out(Data_Read0_out),
        .Result_Sel(Result_Sel),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .ex_Result(ex_Result),
        .mul_ALU_Res(mul_ALU_Res));
  block_design_microblaze_0_0_MB_FD_488 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  block_design_microblaze_0_0_MB_LUT4__parameterized29_489 Mul_ALU_Mux
       (.ALU_Result(ALU_Result),
        .Other_Result(Other_Result),
        .Result_Sel(Result_Sel[1]),
        .mul_ALU_Res(mul_ALU_Res),
        .mul_Result(mul_Result));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module block_design_microblaze_0_0_Result_Mux_Bit_366
   (ex_Result,
    \Using_FPGA.Native ,
    Other_Result,
    mul_Result,
    Result_Sel,
    ALU_Result,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Data_Read0_out,
    Clk);
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Other_Result;
  input [0:0]mul_Result;
  input [0:1]Result_Sel;
  input [0:0]ALU_Result;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]Data_Read0_out;
  input Clk;

  wire [0:0]ALU_Result;
  wire Clk;
  wire [0:0]Data_Read0_out;
  wire [0:0]Other_Result;
  wire [0:1]Result_Sel;
  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [0:0]ex_Result;
  wire mul_ALU_Res;
  wire [0:0]mul_Result;

  block_design_microblaze_0_0_MB_LUT6__parameterized1_484 Data_Shift_Mux
       (.Data_Read0_out(Data_Read0_out),
        .Result_Sel(Result_Sel),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .ex_Result(ex_Result),
        .mul_ALU_Res(mul_ALU_Res));
  block_design_microblaze_0_0_MB_FD_485 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  block_design_microblaze_0_0_MB_LUT4__parameterized29_486 Mul_ALU_Mux
       (.ALU_Result(ALU_Result),
        .Other_Result(Other_Result),
        .Result_Sel(Result_Sel[1]),
        .mul_ALU_Res(mul_ALU_Res),
        .mul_Result(mul_Result));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module block_design_microblaze_0_0_Result_Mux_Bit_367
   (ex_Result,
    \Using_FPGA.Native ,
    Other_Result,
    mul_Result,
    Result_Sel,
    ALU_Result,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Data_Read0_out,
    Clk);
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Other_Result;
  input [0:0]mul_Result;
  input [0:1]Result_Sel;
  input [0:0]ALU_Result;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]Data_Read0_out;
  input Clk;

  wire [0:0]ALU_Result;
  wire Clk;
  wire [0:0]Data_Read0_out;
  wire [0:0]Other_Result;
  wire [0:1]Result_Sel;
  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [0:0]ex_Result;
  wire mul_ALU_Res;
  wire [0:0]mul_Result;

  block_design_microblaze_0_0_MB_LUT6__parameterized1_481 Data_Shift_Mux
       (.Data_Read0_out(Data_Read0_out),
        .Result_Sel(Result_Sel),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .ex_Result(ex_Result),
        .mul_ALU_Res(mul_ALU_Res));
  block_design_microblaze_0_0_MB_FD_482 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  block_design_microblaze_0_0_MB_LUT4__parameterized29_483 Mul_ALU_Mux
       (.ALU_Result(ALU_Result),
        .Other_Result(Other_Result),
        .Result_Sel(Result_Sel[1]),
        .mul_ALU_Res(mul_ALU_Res),
        .mul_Result(mul_Result));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module block_design_microblaze_0_0_Result_Mux_Bit_368
   (ex_Result,
    \Using_FPGA.Native ,
    Other_Result,
    mul_Result,
    Result_Sel,
    ALU_Result,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Data_Read0_out,
    Clk);
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Other_Result;
  input [0:0]mul_Result;
  input [0:1]Result_Sel;
  input [0:0]ALU_Result;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]Data_Read0_out;
  input Clk;

  wire [0:0]ALU_Result;
  wire Clk;
  wire [0:0]Data_Read0_out;
  wire [0:0]Other_Result;
  wire [0:1]Result_Sel;
  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [0:0]ex_Result;
  wire mul_ALU_Res;
  wire [0:0]mul_Result;

  block_design_microblaze_0_0_MB_LUT6__parameterized1_478 Data_Shift_Mux
       (.Data_Read0_out(Data_Read0_out),
        .Result_Sel(Result_Sel),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .ex_Result(ex_Result),
        .mul_ALU_Res(mul_ALU_Res));
  block_design_microblaze_0_0_MB_FD_479 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  block_design_microblaze_0_0_MB_LUT4__parameterized29_480 Mul_ALU_Mux
       (.ALU_Result(ALU_Result),
        .Other_Result(Other_Result),
        .Result_Sel(Result_Sel[1]),
        .mul_ALU_Res(mul_ALU_Res),
        .mul_Result(mul_Result));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module block_design_microblaze_0_0_Result_Mux_Bit_369
   (ex_Result,
    \Using_FPGA.Native ,
    Other_Result,
    mul_Result,
    Result_Sel,
    ALU_Result,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Data_Read0_out,
    Clk);
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Other_Result;
  input [0:0]mul_Result;
  input [0:1]Result_Sel;
  input [0:0]ALU_Result;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]Data_Read0_out;
  input Clk;

  wire [0:0]ALU_Result;
  wire Clk;
  wire [0:0]Data_Read0_out;
  wire [0:0]Other_Result;
  wire [0:1]Result_Sel;
  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [0:0]ex_Result;
  wire mul_ALU_Res;
  wire [0:0]mul_Result;

  block_design_microblaze_0_0_MB_LUT6__parameterized1_475 Data_Shift_Mux
       (.Data_Read0_out(Data_Read0_out),
        .Result_Sel(Result_Sel),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .ex_Result(ex_Result),
        .mul_ALU_Res(mul_ALU_Res));
  block_design_microblaze_0_0_MB_FD_476 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  block_design_microblaze_0_0_MB_LUT4__parameterized29_477 Mul_ALU_Mux
       (.ALU_Result(ALU_Result),
        .Other_Result(Other_Result),
        .Result_Sel(Result_Sel[1]),
        .mul_ALU_Res(mul_ALU_Res),
        .mul_Result(mul_Result));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module block_design_microblaze_0_0_Result_Mux_Bit_370
   (ex_Result,
    \Using_FPGA.Native ,
    Other_Result,
    mul_Result,
    Result_Sel,
    ALU_Result,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Data_Read0_out,
    Clk);
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Other_Result;
  input [0:0]mul_Result;
  input [0:1]Result_Sel;
  input [0:0]ALU_Result;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]Data_Read0_out;
  input Clk;

  wire [0:0]ALU_Result;
  wire Clk;
  wire [0:0]Data_Read0_out;
  wire [0:0]Other_Result;
  wire [0:1]Result_Sel;
  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [0:0]ex_Result;
  wire mul_ALU_Res;
  wire [0:0]mul_Result;

  block_design_microblaze_0_0_MB_LUT6__parameterized1_472 Data_Shift_Mux
       (.Data_Read0_out(Data_Read0_out),
        .Result_Sel(Result_Sel),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .ex_Result(ex_Result),
        .mul_ALU_Res(mul_ALU_Res));
  block_design_microblaze_0_0_MB_FD_473 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  block_design_microblaze_0_0_MB_LUT4__parameterized29_474 Mul_ALU_Mux
       (.ALU_Result(ALU_Result),
        .Other_Result(Other_Result),
        .Result_Sel(Result_Sel[1]),
        .mul_ALU_Res(mul_ALU_Res),
        .mul_Result(mul_Result));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module block_design_microblaze_0_0_Result_Mux_Bit_371
   (ex_Result,
    \Using_FPGA.Native ,
    Other_Result,
    mul_Result,
    Result_Sel,
    ALU_Result,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Data_Read0_out,
    Clk);
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Other_Result;
  input [0:0]mul_Result;
  input [0:1]Result_Sel;
  input [0:0]ALU_Result;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]Data_Read0_out;
  input Clk;

  wire [0:0]ALU_Result;
  wire Clk;
  wire [0:0]Data_Read0_out;
  wire [0:0]Other_Result;
  wire [0:1]Result_Sel;
  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [0:0]ex_Result;
  wire mul_ALU_Res;
  wire [0:0]mul_Result;

  block_design_microblaze_0_0_MB_LUT6__parameterized1_469 Data_Shift_Mux
       (.Data_Read0_out(Data_Read0_out),
        .Result_Sel(Result_Sel),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .ex_Result(ex_Result),
        .mul_ALU_Res(mul_ALU_Res));
  block_design_microblaze_0_0_MB_FD_470 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  block_design_microblaze_0_0_MB_LUT4__parameterized29_471 Mul_ALU_Mux
       (.ALU_Result(ALU_Result),
        .Other_Result(Other_Result),
        .Result_Sel(Result_Sel[1]),
        .mul_ALU_Res(mul_ALU_Res),
        .mul_Result(mul_Result));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module block_design_microblaze_0_0_Result_Mux_Bit_372
   (ex_Result,
    \Using_FPGA.Native ,
    Other_Result,
    mul_Result,
    Result_Sel,
    ALU_Result,
    \Using_FPGA.Native_0 ,
    Data_Read_Mask,
    extend_Data_Read,
    Clk);
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Other_Result;
  input [0:0]mul_Result;
  input [0:1]Result_Sel;
  input [0:0]ALU_Result;
  input \Using_FPGA.Native_0 ;
  input Data_Read_Mask;
  input [0:0]extend_Data_Read;
  input Clk;

  wire [0:0]ALU_Result;
  wire Clk;
  wire Data_Read_Mask;
  wire [0:0]Other_Result;
  wire [0:1]Result_Sel;
  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]mul_Result;

  block_design_microblaze_0_0_MB_LUT6__parameterized1_466 Data_Shift_Mux
       (.Data_Read_Mask(Data_Read_Mask),
        .Result_Sel(Result_Sel),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .ex_Result(ex_Result),
        .extend_Data_Read(extend_Data_Read),
        .mul_ALU_Res(mul_ALU_Res));
  block_design_microblaze_0_0_MB_FD_467 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  block_design_microblaze_0_0_MB_LUT4__parameterized29_468 Mul_ALU_Mux
       (.ALU_Result(ALU_Result),
        .Other_Result(Other_Result),
        .Result_Sel(Result_Sel[1]),
        .mul_ALU_Res(mul_ALU_Res),
        .mul_Result(mul_Result));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module block_design_microblaze_0_0_Result_Mux_Bit_373
   (ex_Result,
    \Using_FPGA.Native ,
    Other_Result,
    mul_Result,
    Result_Sel,
    ALU_Result,
    \Using_FPGA.Native_0 ,
    Data_Read_Mask,
    extend_Data_Read,
    Clk);
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Other_Result;
  input [0:0]mul_Result;
  input [0:1]Result_Sel;
  input [0:0]ALU_Result;
  input \Using_FPGA.Native_0 ;
  input Data_Read_Mask;
  input [0:0]extend_Data_Read;
  input Clk;

  wire [0:0]ALU_Result;
  wire Clk;
  wire Data_Read_Mask;
  wire [0:0]Other_Result;
  wire [0:1]Result_Sel;
  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]mul_Result;

  block_design_microblaze_0_0_MB_LUT6__parameterized1_463 Data_Shift_Mux
       (.Data_Read_Mask(Data_Read_Mask),
        .Result_Sel(Result_Sel),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .ex_Result(ex_Result),
        .extend_Data_Read(extend_Data_Read),
        .mul_ALU_Res(mul_ALU_Res));
  block_design_microblaze_0_0_MB_FD_464 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  block_design_microblaze_0_0_MB_LUT4__parameterized29_465 Mul_ALU_Mux
       (.ALU_Result(ALU_Result),
        .Other_Result(Other_Result),
        .Result_Sel(Result_Sel[1]),
        .mul_ALU_Res(mul_ALU_Res),
        .mul_Result(mul_Result));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module block_design_microblaze_0_0_Result_Mux_Bit_374
   (ex_Result,
    \Using_FPGA.Native ,
    Other_Result,
    mul_Result,
    Result_Sel,
    ALU_Result,
    \Using_FPGA.Native_0 ,
    Data_Read_Mask,
    extend_Data_Read,
    Clk);
  output [0:0]ex_Result;
  output \Using_FPGA.Native ;
  input [0:0]Other_Result;
  input [0:0]mul_Result;
  input [0:1]Result_Sel;
  input [0:0]ALU_Result;
  input \Using_FPGA.Native_0 ;
  input Data_Read_Mask;
  input [0:0]extend_Data_Read;
  input Clk;

  wire [0:0]ALU_Result;
  wire Clk;
  wire Data_Read_Mask;
  wire [0:0]Other_Result;
  wire [0:1]Result_Sel;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]mul_Result;

  block_design_microblaze_0_0_MB_LUT6__parameterized1_460 Data_Shift_Mux
       (.Data_Read_Mask(Data_Read_Mask),
        .Result_Sel(Result_Sel),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .ex_Result(ex_Result),
        .extend_Data_Read(extend_Data_Read),
        .mul_ALU_Res(mul_ALU_Res));
  block_design_microblaze_0_0_MB_FD_461 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  block_design_microblaze_0_0_MB_LUT4__parameterized29_462 Mul_ALU_Mux
       (.ALU_Result(ALU_Result),
        .Other_Result(Other_Result),
        .Result_Sel(Result_Sel[1]),
        .mul_ALU_Res(mul_ALU_Res),
        .mul_Result(mul_Result));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module block_design_microblaze_0_0_Result_Mux_Bit_375
   (ex_Result,
    \Using_FPGA.Native ,
    Other_Result,
    mul_Result,
    Result_Sel,
    ALU_Result,
    \Using_FPGA.Native_0 ,
    Data_Read_Mask,
    extend_Data_Read,
    Clk);
  output [0:0]ex_Result;
  output \Using_FPGA.Native ;
  input [0:0]Other_Result;
  input [0:0]mul_Result;
  input [0:1]Result_Sel;
  input [0:0]ALU_Result;
  input \Using_FPGA.Native_0 ;
  input Data_Read_Mask;
  input [0:0]extend_Data_Read;
  input Clk;

  wire [0:0]ALU_Result;
  wire Clk;
  wire Data_Read_Mask;
  wire [0:0]Other_Result;
  wire [0:1]Result_Sel;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]mul_Result;

  block_design_microblaze_0_0_MB_LUT6__parameterized1_457 Data_Shift_Mux
       (.Data_Read_Mask(Data_Read_Mask),
        .Result_Sel(Result_Sel),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .ex_Result(ex_Result),
        .extend_Data_Read(extend_Data_Read),
        .mul_ALU_Res(mul_ALU_Res));
  block_design_microblaze_0_0_MB_FD_458 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  block_design_microblaze_0_0_MB_LUT4__parameterized29_459 Mul_ALU_Mux
       (.ALU_Result(ALU_Result),
        .Other_Result(Other_Result),
        .Result_Sel(Result_Sel[1]),
        .mul_ALU_Res(mul_ALU_Res),
        .mul_Result(mul_Result));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module block_design_microblaze_0_0_Result_Mux_Bit_376
   (ex_Result,
    \Using_FPGA.Native ,
    Other_Result,
    mul_Result,
    Result_Sel,
    ALU_Result,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Data_Read0_out,
    Clk);
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Other_Result;
  input [0:0]mul_Result;
  input [0:1]Result_Sel;
  input [0:0]ALU_Result;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]Data_Read0_out;
  input Clk;

  wire [0:0]ALU_Result;
  wire Clk;
  wire [0:0]Data_Read0_out;
  wire [0:0]Other_Result;
  wire [0:1]Result_Sel;
  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [0:0]ex_Result;
  wire mul_ALU_Res;
  wire [0:0]mul_Result;

  block_design_microblaze_0_0_MB_LUT6__parameterized1_454 Data_Shift_Mux
       (.Data_Read0_out(Data_Read0_out),
        .Result_Sel(Result_Sel),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .ex_Result(ex_Result),
        .mul_ALU_Res(mul_ALU_Res));
  block_design_microblaze_0_0_MB_FD_455 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  block_design_microblaze_0_0_MB_LUT4__parameterized29_456 Mul_ALU_Mux
       (.ALU_Result(ALU_Result),
        .Other_Result(Other_Result),
        .Result_Sel(Result_Sel[1]),
        .mul_ALU_Res(mul_ALU_Res),
        .mul_Result(mul_Result));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module block_design_microblaze_0_0_Result_Mux_Bit_377
   (ex_Result,
    \Using_FPGA.Native ,
    Other_Result,
    mul_Result,
    Result_Sel,
    ALU_Result,
    \Using_FPGA.Native_0 ,
    Data_Read_Mask,
    extend_Data_Read,
    Clk);
  output [0:0]ex_Result;
  output \Using_FPGA.Native ;
  input [0:0]Other_Result;
  input [0:0]mul_Result;
  input [0:1]Result_Sel;
  input [0:0]ALU_Result;
  input \Using_FPGA.Native_0 ;
  input Data_Read_Mask;
  input [0:0]extend_Data_Read;
  input Clk;

  wire [0:0]ALU_Result;
  wire Clk;
  wire Data_Read_Mask;
  wire [0:0]Other_Result;
  wire [0:1]Result_Sel;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]mul_Result;

  block_design_microblaze_0_0_MB_LUT6__parameterized1_451 Data_Shift_Mux
       (.Data_Read_Mask(Data_Read_Mask),
        .Result_Sel(Result_Sel),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .ex_Result(ex_Result),
        .extend_Data_Read(extend_Data_Read),
        .mul_ALU_Res(mul_ALU_Res));
  block_design_microblaze_0_0_MB_FD_452 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  block_design_microblaze_0_0_MB_LUT4__parameterized29_453 Mul_ALU_Mux
       (.ALU_Result(ALU_Result),
        .Other_Result(Other_Result),
        .Result_Sel(Result_Sel[1]),
        .mul_ALU_Res(mul_ALU_Res),
        .mul_Result(mul_Result));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module block_design_microblaze_0_0_Result_Mux_Bit_378
   (ex_Result,
    \Using_FPGA.Native ,
    Other_Result,
    mul_Result,
    Result_Sel,
    ALU_Result,
    \Using_FPGA.Native_0 ,
    Data_Read_Mask,
    extend_Data_Read,
    Clk);
  output [0:0]ex_Result;
  output \Using_FPGA.Native ;
  input [0:0]Other_Result;
  input [0:0]mul_Result;
  input [0:1]Result_Sel;
  input [0:0]ALU_Result;
  input \Using_FPGA.Native_0 ;
  input Data_Read_Mask;
  input [0:0]extend_Data_Read;
  input Clk;

  wire [0:0]ALU_Result;
  wire Clk;
  wire Data_Read_Mask;
  wire [0:0]Other_Result;
  wire [0:1]Result_Sel;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]mul_Result;

  block_design_microblaze_0_0_MB_LUT6__parameterized1_448 Data_Shift_Mux
       (.Data_Read_Mask(Data_Read_Mask),
        .Result_Sel(Result_Sel),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .ex_Result(ex_Result),
        .extend_Data_Read(extend_Data_Read),
        .mul_ALU_Res(mul_ALU_Res));
  block_design_microblaze_0_0_MB_FD_449 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  block_design_microblaze_0_0_MB_LUT4__parameterized29_450 Mul_ALU_Mux
       (.ALU_Result(ALU_Result),
        .Other_Result(Other_Result),
        .Result_Sel(Result_Sel[1]),
        .mul_ALU_Res(mul_ALU_Res),
        .mul_Result(mul_Result));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module block_design_microblaze_0_0_Result_Mux_Bit_379
   (ex_Result,
    \Using_FPGA.Native ,
    Other_Result,
    mul_Result,
    Result_Sel,
    ALU_Result,
    \Using_FPGA.Native_0 ,
    Data_Read_Mask,
    extend_Data_Read,
    Clk);
  output [0:0]ex_Result;
  output \Using_FPGA.Native ;
  input [0:0]Other_Result;
  input [0:0]mul_Result;
  input [0:1]Result_Sel;
  input [0:0]ALU_Result;
  input \Using_FPGA.Native_0 ;
  input Data_Read_Mask;
  input [0:0]extend_Data_Read;
  input Clk;

  wire [0:0]ALU_Result;
  wire Clk;
  wire Data_Read_Mask;
  wire [0:0]Other_Result;
  wire [0:1]Result_Sel;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]mul_Result;

  block_design_microblaze_0_0_MB_LUT6__parameterized1_445 Data_Shift_Mux
       (.Data_Read_Mask(Data_Read_Mask),
        .Result_Sel(Result_Sel),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .ex_Result(ex_Result),
        .extend_Data_Read(extend_Data_Read),
        .mul_ALU_Res(mul_ALU_Res));
  block_design_microblaze_0_0_MB_FD_446 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  block_design_microblaze_0_0_MB_LUT4__parameterized29_447 Mul_ALU_Mux
       (.ALU_Result(ALU_Result),
        .Other_Result(Other_Result),
        .Result_Sel(Result_Sel[1]),
        .mul_ALU_Res(mul_ALU_Res),
        .mul_Result(mul_Result));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module block_design_microblaze_0_0_Result_Mux_Bit_380
   (ex_Result,
    \Using_FPGA.Native ,
    Other_Result,
    mul_Result,
    Result_Sel,
    ALU_Result,
    Shift_Logic_Res,
    Data_Read_Mask,
    extend_Data_Read,
    Clk);
  output [0:0]ex_Result;
  output \Using_FPGA.Native ;
  input [0:0]Other_Result;
  input [0:0]mul_Result;
  input [0:1]Result_Sel;
  input [0:0]ALU_Result;
  input Shift_Logic_Res;
  input Data_Read_Mask;
  input [0:0]extend_Data_Read;
  input Clk;

  wire [0:0]ALU_Result;
  wire Clk;
  wire Data_Read_Mask;
  wire [0:0]Other_Result;
  wire [0:1]Result_Sel;
  wire Shift_Logic_Res;
  wire \Using_FPGA.Native ;
  wire [0:0]ex_Result;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]mul_Result;

  block_design_microblaze_0_0_MB_LUT6__parameterized1_442 Data_Shift_Mux
       (.Data_Read_Mask(Data_Read_Mask),
        .Result_Sel(Result_Sel),
        .Shift_Logic_Res(Shift_Logic_Res),
        .ex_Result(ex_Result),
        .extend_Data_Read(extend_Data_Read),
        .mul_ALU_Res(mul_ALU_Res));
  block_design_microblaze_0_0_MB_FD_443 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  block_design_microblaze_0_0_MB_LUT4__parameterized29_444 Mul_ALU_Mux
       (.ALU_Result(ALU_Result),
        .Other_Result(Other_Result),
        .Result_Sel(Result_Sel[1]),
        .mul_ALU_Res(mul_ALU_Res),
        .mul_Result(mul_Result));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module block_design_microblaze_0_0_Result_Mux_Bit_381
   (ex_Result,
    \Using_FPGA.Native ,
    Other_Result,
    mul_Result,
    Result_Sel,
    ALU_Result,
    \Using_FPGA.Native_0 ,
    extend_Data_Read,
    Clk);
  output [0:0]ex_Result;
  output \Using_FPGA.Native ;
  input [0:0]Other_Result;
  input [0:0]mul_Result;
  input [0:1]Result_Sel;
  input [0:0]ALU_Result;
  input [0:0]\Using_FPGA.Native_0 ;
  input [0:0]extend_Data_Read;
  input Clk;

  wire [0:0]ALU_Result;
  wire Clk;
  wire [0:0]Other_Result;
  wire [0:1]Result_Sel;
  wire \Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]mul_Result;

  block_design_microblaze_0_0_MB_LUT6__parameterized1_439 Data_Shift_Mux
       (.Result_Sel(Result_Sel),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .ex_Result(ex_Result),
        .extend_Data_Read(extend_Data_Read),
        .mul_ALU_Res(mul_ALU_Res));
  block_design_microblaze_0_0_MB_FD_440 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  block_design_microblaze_0_0_MB_LUT4__parameterized29_441 Mul_ALU_Mux
       (.ALU_Result(ALU_Result),
        .Other_Result(Other_Result),
        .Result_Sel(Result_Sel[1]),
        .mul_ALU_Res(mul_ALU_Res),
        .mul_Result(mul_Result));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module block_design_microblaze_0_0_Result_Mux_Bit_382
   (ex_Result,
    \Using_FPGA.Native ,
    Other_Result,
    mul_Result,
    Result_Sel,
    ALU_Result,
    \Using_FPGA.Native_0 ,
    extend_Data_Read,
    Clk);
  output [0:0]ex_Result;
  output \Using_FPGA.Native ;
  input [0:0]Other_Result;
  input [0:0]mul_Result;
  input [0:1]Result_Sel;
  input [0:0]ALU_Result;
  input [0:0]\Using_FPGA.Native_0 ;
  input [0:0]extend_Data_Read;
  input Clk;

  wire [0:0]ALU_Result;
  wire Clk;
  wire [0:0]Other_Result;
  wire [0:1]Result_Sel;
  wire \Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]mul_Result;

  block_design_microblaze_0_0_MB_LUT6__parameterized1_436 Data_Shift_Mux
       (.Result_Sel(Result_Sel),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .ex_Result(ex_Result),
        .extend_Data_Read(extend_Data_Read),
        .mul_ALU_Res(mul_ALU_Res));
  block_design_microblaze_0_0_MB_FD_437 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  block_design_microblaze_0_0_MB_LUT4__parameterized29_438 Mul_ALU_Mux
       (.ALU_Result(ALU_Result),
        .Other_Result(Other_Result),
        .Result_Sel(Result_Sel[1]),
        .mul_ALU_Res(mul_ALU_Res),
        .mul_Result(mul_Result));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module block_design_microblaze_0_0_Result_Mux_Bit_383
   (ex_Result,
    \Using_FPGA.Native ,
    Other_Result,
    mul_Result,
    Result_Sel,
    ALU_Result,
    shift_Logic_Result,
    extend_Data_Read,
    Clk);
  output [0:0]ex_Result;
  output \Using_FPGA.Native ;
  input [0:0]Other_Result;
  input [0:0]mul_Result;
  input [0:1]Result_Sel;
  input [0:0]ALU_Result;
  input [0:0]shift_Logic_Result;
  input [0:0]extend_Data_Read;
  input Clk;

  wire [0:0]ALU_Result;
  wire Clk;
  wire [0:0]Other_Result;
  wire [0:1]Result_Sel;
  wire \Using_FPGA.Native ;
  wire [0:0]ex_Result;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]mul_Result;
  wire [0:0]shift_Logic_Result;

  block_design_microblaze_0_0_MB_LUT6__parameterized1_433 Data_Shift_Mux
       (.Result_Sel(Result_Sel),
        .ex_Result(ex_Result),
        .extend_Data_Read(extend_Data_Read),
        .mul_ALU_Res(mul_ALU_Res),
        .shift_Logic_Result(shift_Logic_Result));
  block_design_microblaze_0_0_MB_FD_434 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  block_design_microblaze_0_0_MB_LUT4__parameterized29_435 Mul_ALU_Mux
       (.ALU_Result(ALU_Result),
        .Other_Result(Other_Result),
        .Result_Sel(Result_Sel[1]),
        .mul_ALU_Res(mul_ALU_Res),
        .mul_Result(mul_Result));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module block_design_microblaze_0_0_Result_Mux_Bit_384
   (D,
    \Using_FPGA.Native ,
    ex_Result,
    \data_rd_reg_reg[27] ,
    register_write,
    msr_I,
    \data_rd_reg_reg[27]_0 ,
    PC_EX,
    Other_Result,
    mul_Result,
    Result_Sel,
    ALU_Result,
    shift_Logic_Result,
    extend_Data_Read,
    Clk);
  output [0:0]D;
  output \Using_FPGA.Native ;
  output [0:0]ex_Result;
  input \data_rd_reg_reg[27] ;
  input register_write;
  input [0:0]msr_I;
  input \data_rd_reg_reg[27]_0 ;
  input [0:0]PC_EX;
  input [0:0]Other_Result;
  input [0:0]mul_Result;
  input [0:1]Result_Sel;
  input [0:0]ALU_Result;
  input [0:0]shift_Logic_Result;
  input [0:0]extend_Data_Read;
  input Clk;

  wire [0:0]ALU_Result;
  wire Clk;
  wire [0:0]D;
  wire [0:0]Other_Result;
  wire [0:0]PC_EX;
  wire [0:1]Result_Sel;
  wire \Using_FPGA.Native ;
  wire \data_rd_reg_reg[27] ;
  wire \data_rd_reg_reg[27]_0 ;
  wire [0:0]ex_Result;
  wire [0:0]extend_Data_Read;
  wire [0:0]msr_I;
  wire mul_ALU_Res;
  wire [0:0]mul_Result;
  wire register_write;
  wire [0:0]shift_Logic_Result;

  block_design_microblaze_0_0_MB_LUT6__parameterized1_430 Data_Shift_Mux
       (.Result_Sel(Result_Sel),
        .ex_Result(ex_Result),
        .extend_Data_Read(extend_Data_Read),
        .mul_ALU_Res(mul_ALU_Res),
        .shift_Logic_Result(shift_Logic_Result));
  block_design_microblaze_0_0_MB_FD_431 EX_Result_DFF
       (.Clk(Clk),
        .D(D),
        .PC_EX(PC_EX),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\data_rd_reg_reg[27] (\data_rd_reg_reg[27] ),
        .\data_rd_reg_reg[27]_0 (\data_rd_reg_reg[27]_0 ),
        .ex_Result(ex_Result),
        .msr_I(msr_I),
        .register_write(register_write));
  block_design_microblaze_0_0_MB_LUT4__parameterized29_432 Mul_ALU_Mux
       (.ALU_Result(ALU_Result),
        .Other_Result(Other_Result),
        .Result_Sel(Result_Sel[1]),
        .mul_ALU_Res(mul_ALU_Res),
        .mul_Result(mul_Result));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module block_design_microblaze_0_0_Result_Mux_Bit_385
   (D,
    \Using_FPGA.Native ,
    ex_Result,
    \data_rd_reg_reg[28] ,
    register_write,
    msr_I,
    \data_rd_reg_reg[28]_0 ,
    PC_EX,
    Other_Result,
    mul_Result,
    Result_Sel,
    ALU_Result,
    shift_Logic_Result,
    extend_Data_Read,
    Clk);
  output [0:0]D;
  output \Using_FPGA.Native ;
  output [0:0]ex_Result;
  input \data_rd_reg_reg[28] ;
  input register_write;
  input [0:0]msr_I;
  input \data_rd_reg_reg[28]_0 ;
  input [0:0]PC_EX;
  input [0:0]Other_Result;
  input [0:0]mul_Result;
  input [0:1]Result_Sel;
  input [0:0]ALU_Result;
  input [0:0]shift_Logic_Result;
  input [0:0]extend_Data_Read;
  input Clk;

  wire [0:0]ALU_Result;
  wire Clk;
  wire [0:0]D;
  wire [0:0]Other_Result;
  wire [0:0]PC_EX;
  wire [0:1]Result_Sel;
  wire \Using_FPGA.Native ;
  wire \data_rd_reg_reg[28] ;
  wire \data_rd_reg_reg[28]_0 ;
  wire [0:0]ex_Result;
  wire [0:0]extend_Data_Read;
  wire [0:0]msr_I;
  wire mul_ALU_Res;
  wire [0:0]mul_Result;
  wire register_write;
  wire [0:0]shift_Logic_Result;

  block_design_microblaze_0_0_MB_LUT6__parameterized1_427 Data_Shift_Mux
       (.Result_Sel(Result_Sel),
        .ex_Result(ex_Result),
        .extend_Data_Read(extend_Data_Read),
        .mul_ALU_Res(mul_ALU_Res),
        .shift_Logic_Result(shift_Logic_Result));
  block_design_microblaze_0_0_MB_FD_428 EX_Result_DFF
       (.Clk(Clk),
        .D(D),
        .PC_EX(PC_EX),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\data_rd_reg_reg[28] (\data_rd_reg_reg[28] ),
        .\data_rd_reg_reg[28]_0 (\data_rd_reg_reg[28]_0 ),
        .ex_Result(ex_Result),
        .msr_I(msr_I),
        .register_write(register_write));
  block_design_microblaze_0_0_MB_LUT4__parameterized29_429 Mul_ALU_Mux
       (.ALU_Result(ALU_Result),
        .Other_Result(Other_Result),
        .Result_Sel(Result_Sel[1]),
        .mul_ALU_Res(mul_ALU_Res),
        .mul_Result(mul_Result));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module block_design_microblaze_0_0_Result_Mux_Bit_386
   (D,
    \Using_FPGA.Native ,
    ex_Result,
    \data_rd_reg_reg[29] ,
    register_write,
    carry,
    \data_rd_reg_reg[29]_0 ,
    PC_EX,
    Other_Result,
    mul_Result,
    Result_Sel,
    ALU_Result,
    shift_Logic_Result,
    extend_Data_Read,
    Clk);
  output [0:0]D;
  output \Using_FPGA.Native ;
  output [0:0]ex_Result;
  input \data_rd_reg_reg[29] ;
  input register_write;
  input carry;
  input \data_rd_reg_reg[29]_0 ;
  input [0:0]PC_EX;
  input [0:0]Other_Result;
  input [0:0]mul_Result;
  input [0:1]Result_Sel;
  input [0:0]ALU_Result;
  input [0:0]shift_Logic_Result;
  input [0:0]extend_Data_Read;
  input Clk;

  wire [0:0]ALU_Result;
  wire Clk;
  wire [0:0]D;
  wire [0:0]Other_Result;
  wire [0:0]PC_EX;
  wire [0:1]Result_Sel;
  wire \Using_FPGA.Native ;
  wire carry;
  wire \data_rd_reg_reg[29] ;
  wire \data_rd_reg_reg[29]_0 ;
  wire [0:0]ex_Result;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]mul_Result;
  wire register_write;
  wire [0:0]shift_Logic_Result;

  block_design_microblaze_0_0_MB_LUT6__parameterized1_424 Data_Shift_Mux
       (.Result_Sel(Result_Sel),
        .ex_Result(ex_Result),
        .extend_Data_Read(extend_Data_Read),
        .mul_ALU_Res(mul_ALU_Res),
        .shift_Logic_Result(shift_Logic_Result));
  block_design_microblaze_0_0_MB_FD_425 EX_Result_DFF
       (.Clk(Clk),
        .D(D),
        .PC_EX(PC_EX),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .carry(carry),
        .\data_rd_reg_reg[29] (\data_rd_reg_reg[29] ),
        .\data_rd_reg_reg[29]_0 (\data_rd_reg_reg[29]_0 ),
        .ex_Result(ex_Result),
        .register_write(register_write));
  block_design_microblaze_0_0_MB_LUT4__parameterized29_426 Mul_ALU_Mux
       (.ALU_Result(ALU_Result),
        .Other_Result(Other_Result),
        .Result_Sel(Result_Sel[1]),
        .mul_ALU_Res(mul_ALU_Res),
        .mul_Result(mul_Result));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module block_design_microblaze_0_0_Result_Mux_Bit_387
   (ex_Result,
    \Using_FPGA.Native ,
    Other_Result,
    mul_Result,
    Result_Sel,
    ALU_Result,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Data_Read0_out,
    Clk);
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Other_Result;
  input [0:0]mul_Result;
  input [0:1]Result_Sel;
  input [0:0]ALU_Result;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]Data_Read0_out;
  input Clk;

  wire [0:0]ALU_Result;
  wire Clk;
  wire [0:0]Data_Read0_out;
  wire [0:0]Other_Result;
  wire [0:1]Result_Sel;
  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [0:0]ex_Result;
  wire mul_ALU_Res;
  wire [0:0]mul_Result;

  block_design_microblaze_0_0_MB_LUT6__parameterized1_421 Data_Shift_Mux
       (.Data_Read0_out(Data_Read0_out),
        .Result_Sel(Result_Sel),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .ex_Result(ex_Result),
        .mul_ALU_Res(mul_ALU_Res));
  block_design_microblaze_0_0_MB_FD_422 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  block_design_microblaze_0_0_MB_LUT4__parameterized29_423 Mul_ALU_Mux
       (.ALU_Result(ALU_Result),
        .Other_Result(Other_Result),
        .Result_Sel(Result_Sel[1]),
        .mul_ALU_Res(mul_ALU_Res),
        .mul_Result(mul_Result));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module block_design_microblaze_0_0_Result_Mux_Bit_388
   (D,
    New_Reg_Value,
    ex_Result,
    \data_rd_reg_reg[30] ,
    register_write,
    Enable_Interrupt,
    \data_rd_reg_reg[30]_0 ,
    PC_EX,
    Other_Result,
    mul_Result,
    Result_Sel,
    ALU_Result,
    shift_Logic_Result,
    extend_Data_Read,
    Clk);
  output [0:0]D;
  output New_Reg_Value;
  output [0:0]ex_Result;
  input \data_rd_reg_reg[30] ;
  input register_write;
  input Enable_Interrupt;
  input \data_rd_reg_reg[30]_0 ;
  input [0:0]PC_EX;
  input [0:0]Other_Result;
  input [0:0]mul_Result;
  input [0:1]Result_Sel;
  input [0:0]ALU_Result;
  input [0:0]shift_Logic_Result;
  input [0:0]extend_Data_Read;
  input Clk;

  wire [0:0]ALU_Result;
  wire Clk;
  wire [0:0]D;
  wire Enable_Interrupt;
  wire New_Reg_Value;
  wire [0:0]Other_Result;
  wire [0:0]PC_EX;
  wire [0:1]Result_Sel;
  wire \data_rd_reg_reg[30] ;
  wire \data_rd_reg_reg[30]_0 ;
  wire [0:0]ex_Result;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]mul_Result;
  wire register_write;
  wire [0:0]shift_Logic_Result;

  block_design_microblaze_0_0_MB_LUT6__parameterized1_418 Data_Shift_Mux
       (.Result_Sel(Result_Sel),
        .ex_Result(ex_Result),
        .extend_Data_Read(extend_Data_Read),
        .mul_ALU_Res(mul_ALU_Res),
        .shift_Logic_Result(shift_Logic_Result));
  block_design_microblaze_0_0_MB_FD_419 EX_Result_DFF
       (.Clk(Clk),
        .D(D),
        .Enable_Interrupt(Enable_Interrupt),
        .New_Reg_Value(New_Reg_Value),
        .PC_EX(PC_EX),
        .\data_rd_reg_reg[30] (\data_rd_reg_reg[30] ),
        .\data_rd_reg_reg[30]_0 (\data_rd_reg_reg[30]_0 ),
        .ex_Result(ex_Result),
        .register_write(register_write));
  block_design_microblaze_0_0_MB_LUT4__parameterized29_420 Mul_ALU_Mux
       (.ALU_Result(ALU_Result),
        .Other_Result(Other_Result),
        .Result_Sel(Result_Sel[1]),
        .mul_ALU_Res(mul_ALU_Res),
        .mul_Result(mul_Result));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module block_design_microblaze_0_0_Result_Mux_Bit_389
   (ex_Result,
    \Using_FPGA.Native ,
    Other_Result,
    mul_Result,
    Result_Sel,
    ALU_Result,
    shift_Logic_Result,
    extend_Data_Read,
    Clk);
  output [0:0]ex_Result;
  output \Using_FPGA.Native ;
  input [0:0]Other_Result;
  input [0:0]mul_Result;
  input [0:1]Result_Sel;
  input [0:0]ALU_Result;
  input [0:0]shift_Logic_Result;
  input [0:0]extend_Data_Read;
  input Clk;

  wire [0:0]ALU_Result;
  wire Clk;
  wire [0:0]Other_Result;
  wire [0:1]Result_Sel;
  wire \Using_FPGA.Native ;
  wire [0:0]ex_Result;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]mul_Result;
  wire [0:0]shift_Logic_Result;

  block_design_microblaze_0_0_MB_LUT6__parameterized1_415 Data_Shift_Mux
       (.Result_Sel(Result_Sel),
        .ex_Result(ex_Result),
        .extend_Data_Read(extend_Data_Read),
        .mul_ALU_Res(mul_ALU_Res),
        .shift_Logic_Result(shift_Logic_Result));
  block_design_microblaze_0_0_MB_FD_416 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  block_design_microblaze_0_0_MB_LUT4__parameterized29_417 Mul_ALU_Mux
       (.ALU_Result(ALU_Result),
        .Other_Result(Other_Result),
        .Result_Sel(Result_Sel[1]),
        .mul_ALU_Res(mul_ALU_Res),
        .mul_Result(mul_Result));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module block_design_microblaze_0_0_Result_Mux_Bit_390
   (ex_Result,
    \Using_FPGA.Native ,
    Other_Result,
    mul_Result,
    Result_Sel,
    ALU_Result,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Data_Read0_out,
    Clk);
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Other_Result;
  input [0:0]mul_Result;
  input [0:1]Result_Sel;
  input [0:0]ALU_Result;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]Data_Read0_out;
  input Clk;

  wire [0:0]ALU_Result;
  wire Clk;
  wire [0:0]Data_Read0_out;
  wire [0:0]Other_Result;
  wire [0:1]Result_Sel;
  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [0:0]ex_Result;
  wire mul_ALU_Res;
  wire [0:0]mul_Result;

  block_design_microblaze_0_0_MB_LUT6__parameterized1_412 Data_Shift_Mux
       (.Data_Read0_out(Data_Read0_out),
        .Result_Sel(Result_Sel),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .ex_Result(ex_Result),
        .mul_ALU_Res(mul_ALU_Res));
  block_design_microblaze_0_0_MB_FD_413 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  block_design_microblaze_0_0_MB_LUT4__parameterized29_414 Mul_ALU_Mux
       (.ALU_Result(ALU_Result),
        .Other_Result(Other_Result),
        .Result_Sel(Result_Sel[1]),
        .mul_ALU_Res(mul_ALU_Res),
        .mul_Result(mul_Result));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module block_design_microblaze_0_0_Result_Mux_Bit_391
   (ex_Result,
    \Using_FPGA.Native ,
    Other_Result,
    mul_Result,
    Result_Sel,
    ALU_Result,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Data_Read0_out,
    Clk);
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Other_Result;
  input [0:0]mul_Result;
  input [0:1]Result_Sel;
  input [0:0]ALU_Result;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]Data_Read0_out;
  input Clk;

  wire [0:0]ALU_Result;
  wire Clk;
  wire [0:0]Data_Read0_out;
  wire [0:0]Other_Result;
  wire [0:1]Result_Sel;
  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [0:0]ex_Result;
  wire mul_ALU_Res;
  wire [0:0]mul_Result;

  block_design_microblaze_0_0_MB_LUT6__parameterized1_409 Data_Shift_Mux
       (.Data_Read0_out(Data_Read0_out),
        .Result_Sel(Result_Sel),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .ex_Result(ex_Result),
        .mul_ALU_Res(mul_ALU_Res));
  block_design_microblaze_0_0_MB_FD_410 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  block_design_microblaze_0_0_MB_LUT4__parameterized29_411 Mul_ALU_Mux
       (.ALU_Result(ALU_Result),
        .Other_Result(Other_Result),
        .Result_Sel(Result_Sel[1]),
        .mul_ALU_Res(mul_ALU_Res),
        .mul_Result(mul_Result));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module block_design_microblaze_0_0_Result_Mux_Bit_392
   (ex_Result,
    \Using_FPGA.Native ,
    Other_Result,
    mul_Result,
    Result_Sel,
    ALU_Result,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Data_Read0_out,
    Clk);
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Other_Result;
  input [0:0]mul_Result;
  input [0:1]Result_Sel;
  input [0:0]ALU_Result;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]Data_Read0_out;
  input Clk;

  wire [0:0]ALU_Result;
  wire Clk;
  wire [0:0]Data_Read0_out;
  wire [0:0]Other_Result;
  wire [0:1]Result_Sel;
  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [0:0]ex_Result;
  wire mul_ALU_Res;
  wire [0:0]mul_Result;

  block_design_microblaze_0_0_MB_LUT6__parameterized1_406 Data_Shift_Mux
       (.Data_Read0_out(Data_Read0_out),
        .Result_Sel(Result_Sel),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .ex_Result(ex_Result),
        .mul_ALU_Res(mul_ALU_Res));
  block_design_microblaze_0_0_MB_FD_407 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  block_design_microblaze_0_0_MB_LUT4__parameterized29_408 Mul_ALU_Mux
       (.ALU_Result(ALU_Result),
        .Other_Result(Other_Result),
        .Result_Sel(Result_Sel[1]),
        .mul_ALU_Res(mul_ALU_Res),
        .mul_Result(mul_Result));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module block_design_microblaze_0_0_Result_Mux_Bit_393
   (ex_Result,
    \Using_FPGA.Native ,
    Other_Result,
    mul_Result,
    Result_Sel,
    ALU_Result,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Data_Read0_out,
    Clk);
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Other_Result;
  input [0:0]mul_Result;
  input [0:1]Result_Sel;
  input [0:0]ALU_Result;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]Data_Read0_out;
  input Clk;

  wire [0:0]ALU_Result;
  wire Clk;
  wire [0:0]Data_Read0_out;
  wire [0:0]Other_Result;
  wire [0:1]Result_Sel;
  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [0:0]ex_Result;
  wire mul_ALU_Res;
  wire [0:0]mul_Result;

  block_design_microblaze_0_0_MB_LUT6__parameterized1_403 Data_Shift_Mux
       (.Data_Read0_out(Data_Read0_out),
        .Result_Sel(Result_Sel),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .ex_Result(ex_Result),
        .mul_ALU_Res(mul_ALU_Res));
  block_design_microblaze_0_0_MB_FD_404 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  block_design_microblaze_0_0_MB_LUT4__parameterized29_405 Mul_ALU_Mux
       (.ALU_Result(ALU_Result),
        .Other_Result(Other_Result),
        .Result_Sel(Result_Sel[1]),
        .mul_ALU_Res(mul_ALU_Res),
        .mul_Result(mul_Result));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module block_design_microblaze_0_0_Result_Mux_Bit_394
   (ex_Result,
    \Using_FPGA.Native ,
    Other_Result,
    mul_Result,
    Result_Sel,
    ALU_Result,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Data_Read0_out,
    Clk);
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Other_Result;
  input [0:0]mul_Result;
  input [0:1]Result_Sel;
  input [0:0]ALU_Result;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]Data_Read0_out;
  input Clk;

  wire [0:0]ALU_Result;
  wire Clk;
  wire [0:0]Data_Read0_out;
  wire [0:0]Other_Result;
  wire [0:1]Result_Sel;
  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [0:0]ex_Result;
  wire mul_ALU_Res;
  wire [0:0]mul_Result;

  block_design_microblaze_0_0_MB_LUT6__parameterized1_400 Data_Shift_Mux
       (.Data_Read0_out(Data_Read0_out),
        .Result_Sel(Result_Sel),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .ex_Result(ex_Result),
        .mul_ALU_Res(mul_ALU_Res));
  block_design_microblaze_0_0_MB_FD_401 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  block_design_microblaze_0_0_MB_LUT4__parameterized29_402 Mul_ALU_Mux
       (.ALU_Result(ALU_Result),
        .Other_Result(Other_Result),
        .Result_Sel(Result_Sel[1]),
        .mul_ALU_Res(mul_ALU_Res),
        .mul_Result(mul_Result));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module block_design_microblaze_0_0_Result_Mux_Bit_395
   (ex_Result,
    \Using_FPGA.Native ,
    Other_Result,
    mul_Result,
    Result_Sel,
    ALU_Result,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Data_Read0_out,
    Clk);
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Other_Result;
  input [0:0]mul_Result;
  input [0:1]Result_Sel;
  input [0:0]ALU_Result;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]Data_Read0_out;
  input Clk;

  wire [0:0]ALU_Result;
  wire Clk;
  wire [0:0]Data_Read0_out;
  wire [0:0]Other_Result;
  wire [0:1]Result_Sel;
  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [0:0]ex_Result;
  wire mul_ALU_Res;
  wire [0:0]mul_Result;

  block_design_microblaze_0_0_MB_LUT6__parameterized1_397 Data_Shift_Mux
       (.Data_Read0_out(Data_Read0_out),
        .Result_Sel(Result_Sel),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .ex_Result(ex_Result),
        .mul_ALU_Res(mul_ALU_Res));
  block_design_microblaze_0_0_MB_FD_398 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  block_design_microblaze_0_0_MB_LUT4__parameterized29_399 Mul_ALU_Mux
       (.ALU_Result(ALU_Result),
        .Other_Result(Other_Result),
        .Result_Sel(Result_Sel[1]),
        .mul_ALU_Res(mul_ALU_Res),
        .mul_Result(mul_Result));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module block_design_microblaze_0_0_Result_Mux_Bit_396
   (ex_Result,
    \Using_FPGA.Native ,
    Other_Result,
    mul_Result,
    Result_Sel,
    ALU_Result,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Data_Read0_out,
    Clk);
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Other_Result;
  input [0:0]mul_Result;
  input [0:1]Result_Sel;
  input [0:0]ALU_Result;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]Data_Read0_out;
  input Clk;

  wire [0:0]ALU_Result;
  wire Clk;
  wire [0:0]Data_Read0_out;
  wire [0:0]Other_Result;
  wire [0:1]Result_Sel;
  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [0:0]ex_Result;
  wire mul_ALU_Res;
  wire [0:0]mul_Result;

  block_design_microblaze_0_0_MB_LUT6__parameterized1 Data_Shift_Mux
       (.Data_Read0_out(Data_Read0_out),
        .Result_Sel(Result_Sel),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .ex_Result(ex_Result),
        .mul_ALU_Res(mul_ALU_Res));
  block_design_microblaze_0_0_MB_FD EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  block_design_microblaze_0_0_MB_LUT4__parameterized29 Mul_ALU_Mux
       (.ALU_Result(ALU_Result),
        .Other_Result(Other_Result),
        .Result_Sel(Result_Sel[1]),
        .mul_ALU_Res(mul_ALU_Res),
        .mul_Result(mul_Result));
endmodule

module block_design_microblaze_0_0_Shift_Logic_Bit
   (Select_Logic_reg,
    \Using_FPGA.Native ,
    Shifted,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]\Using_FPGA.Native ;
  input Shifted;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Shift_Oper;
  wire Shifted;
  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire logic_Res_i;
  wire shift_Res;

  block_design_microblaze_0_0_MB_LUT4__parameterized15_363 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .Shifted(Shifted),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i));
  block_design_microblaze_0_0_MB_LUT4__parameterized17_364 Shift_LUT
       (.Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_2 ),
        .shift_Res(shift_Res));
  block_design_microblaze_0_0_MB_MUXF7_365 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module block_design_microblaze_0_0_Shift_Logic_Bit_216
   (Select_Logic_reg,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    Logic_Oper,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]\Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Shift_Oper;
  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire logic_Res_i;
  wire shift_Res;

  block_design_microblaze_0_0_MB_LUT4__parameterized15_360 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .logic_Res_i(logic_Res_i));
  block_design_microblaze_0_0_MB_LUT4__parameterized17_361 Shift_LUT
       (.Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_2 ),
        .shift_Res(shift_Res));
  block_design_microblaze_0_0_MB_MUXF7_362 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module block_design_microblaze_0_0_Shift_Logic_Bit_217
   (Select_Logic_reg,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    Logic_Oper,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]\Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Shift_Oper;
  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire logic_Res_i;
  wire shift_Res;

  block_design_microblaze_0_0_MB_LUT4__parameterized15_357 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .logic_Res_i(logic_Res_i));
  block_design_microblaze_0_0_MB_LUT4__parameterized17_358 Shift_LUT
       (.Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_2 ),
        .shift_Res(shift_Res));
  block_design_microblaze_0_0_MB_MUXF7_359 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module block_design_microblaze_0_0_Shift_Logic_Bit_218
   (Select_Logic_reg,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    Logic_Oper,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]\Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Shift_Oper;
  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire logic_Res_i;
  wire shift_Res;

  block_design_microblaze_0_0_MB_LUT4__parameterized15_354 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .logic_Res_i(logic_Res_i));
  block_design_microblaze_0_0_MB_LUT4__parameterized17_355 Shift_LUT
       (.Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_2 ),
        .shift_Res(shift_Res));
  block_design_microblaze_0_0_MB_MUXF7_356 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module block_design_microblaze_0_0_Shift_Logic_Bit_219
   (Select_Logic_reg,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    Logic_Oper,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]\Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Shift_Oper;
  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire logic_Res_i;
  wire shift_Res;

  block_design_microblaze_0_0_MB_LUT4__parameterized15_351 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .logic_Res_i(logic_Res_i));
  block_design_microblaze_0_0_MB_LUT4__parameterized17_352 Shift_LUT
       (.Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_2 ),
        .shift_Res(shift_Res));
  block_design_microblaze_0_0_MB_MUXF7_353 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module block_design_microblaze_0_0_Shift_Logic_Bit_220
   (Select_Logic_reg,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    Logic_Oper,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]\Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Shift_Oper;
  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire logic_Res_i;
  wire shift_Res;

  block_design_microblaze_0_0_MB_LUT4__parameterized15_348 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .logic_Res_i(logic_Res_i));
  block_design_microblaze_0_0_MB_LUT4__parameterized17_349 Shift_LUT
       (.Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_2 ),
        .shift_Res(shift_Res));
  block_design_microblaze_0_0_MB_MUXF7_350 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module block_design_microblaze_0_0_Shift_Logic_Bit_221
   (Select_Logic_reg,
    B,
    \Using_FPGA.Native ,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]B;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Shift_Oper;
  input Select_Logic;

  wire [0:0]B;
  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire logic_Res_i;
  wire shift_Res;

  block_design_microblaze_0_0_MB_LUT4__parameterized15_345 Logic_LUT
       (.B(B),
        .Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i));
  block_design_microblaze_0_0_MB_LUT4__parameterized17_346 Shift_LUT
       (.Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .shift_Res(shift_Res));
  block_design_microblaze_0_0_MB_MUXF7_347 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module block_design_microblaze_0_0_Shift_Logic_Bit_222
   (Select_Logic_reg,
    B,
    \Using_FPGA.Native ,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    Sext,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]B;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input Sext;
  input Shift_Oper;
  input Select_Logic;

  wire [0:0]B;
  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Sext;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire shift_Res;

  block_design_microblaze_0_0_MB_LUT4__parameterized15_342 Logic_LUT
       (.B(B),
        .Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i));
  block_design_microblaze_0_0_MB_LUT4__parameterized17_343 Shift_LUT
       (.Sext(Sext),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .shift_Res(shift_Res));
  block_design_microblaze_0_0_MB_MUXF7_344 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module block_design_microblaze_0_0_Shift_Logic_Bit_223
   (Select_Logic_reg,
    B,
    \Using_FPGA.Native ,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    Sext,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]B;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input Sext;
  input Shift_Oper;
  input Select_Logic;

  wire [0:0]B;
  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Sext;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire shift_Res;

  block_design_microblaze_0_0_MB_LUT4__parameterized15_339 Logic_LUT
       (.B(B),
        .Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i));
  block_design_microblaze_0_0_MB_LUT4__parameterized17_340 Shift_LUT
       (.Sext(Sext),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .shift_Res(shift_Res));
  block_design_microblaze_0_0_MB_MUXF7_341 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module block_design_microblaze_0_0_Shift_Logic_Bit_224
   (Select_Logic_reg,
    B,
    \Using_FPGA.Native ,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    Sext,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]B;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input Sext;
  input Shift_Oper;
  input Select_Logic;

  wire [0:0]B;
  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Sext;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire shift_Res;

  block_design_microblaze_0_0_MB_LUT4__parameterized15_336 Logic_LUT
       (.B(B),
        .Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i));
  block_design_microblaze_0_0_MB_LUT4__parameterized17_337 Shift_LUT
       (.Sext(Sext),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .shift_Res(shift_Res));
  block_design_microblaze_0_0_MB_MUXF7_338 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module block_design_microblaze_0_0_Shift_Logic_Bit_225
   (Select_Logic_reg,
    B,
    \Using_FPGA.Native ,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    Sext,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]B;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input Sext;
  input Shift_Oper;
  input Select_Logic;

  wire [0:0]B;
  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Sext;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire shift_Res;

  block_design_microblaze_0_0_MB_LUT4__parameterized15_333 Logic_LUT
       (.B(B),
        .Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i));
  block_design_microblaze_0_0_MB_LUT4__parameterized17_334 Shift_LUT
       (.Sext(Sext),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .shift_Res(shift_Res));
  block_design_microblaze_0_0_MB_MUXF7_335 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module block_design_microblaze_0_0_Shift_Logic_Bit_226
   (Select_Logic_reg,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    Logic_Oper,
    Shifted,
    \Using_FPGA.Native_1 ,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]\Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;
  input Shifted;
  input \Using_FPGA.Native_1 ;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Shift_Oper;
  wire Shifted;
  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire logic_Res_i;
  wire shift_Res;

  block_design_microblaze_0_0_MB_LUT4__parameterized15_330 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .logic_Res_i(logic_Res_i));
  block_design_microblaze_0_0_MB_LUT4__parameterized17_331 Shift_LUT
       (.Shift_Oper(Shift_Oper),
        .Shifted(Shifted),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .shift_Res(shift_Res));
  block_design_microblaze_0_0_MB_MUXF7_332 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module block_design_microblaze_0_0_Shift_Logic_Bit_227
   (Select_Logic_reg,
    B,
    \Using_FPGA.Native ,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    Sext,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]B;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input Sext;
  input Shift_Oper;
  input Select_Logic;

  wire [0:0]B;
  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Sext;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire shift_Res;

  block_design_microblaze_0_0_MB_LUT4__parameterized15_327 Logic_LUT
       (.B(B),
        .Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i));
  block_design_microblaze_0_0_MB_LUT4__parameterized17_328 Shift_LUT
       (.Sext(Sext),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .shift_Res(shift_Res));
  block_design_microblaze_0_0_MB_MUXF7_329 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module block_design_microblaze_0_0_Shift_Logic_Bit_228
   (Select_Logic_reg,
    B,
    \Using_FPGA.Native ,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    Sext,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]B;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input Sext;
  input Shift_Oper;
  input Select_Logic;

  wire [0:0]B;
  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Sext;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire shift_Res;

  block_design_microblaze_0_0_MB_LUT4__parameterized15_324 Logic_LUT
       (.B(B),
        .Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i));
  block_design_microblaze_0_0_MB_LUT4__parameterized17_325 Shift_LUT
       (.Sext(Sext),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .shift_Res(shift_Res));
  block_design_microblaze_0_0_MB_MUXF7_326 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module block_design_microblaze_0_0_Shift_Logic_Bit_229
   (Select_Logic_reg,
    B,
    \Using_FPGA.Native ,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    Sext,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]B;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input Sext;
  input Shift_Oper;
  input Select_Logic;

  wire [0:0]B;
  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Sext;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire shift_Res;

  block_design_microblaze_0_0_MB_LUT4__parameterized15_321 Logic_LUT
       (.B(B),
        .Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i));
  block_design_microblaze_0_0_MB_LUT4__parameterized17_322 Shift_LUT
       (.Sext(Sext),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .shift_Res(shift_Res));
  block_design_microblaze_0_0_MB_MUXF7_323 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module block_design_microblaze_0_0_Shift_Logic_Bit_230
   (Select_Logic_reg,
    B,
    \Using_FPGA.Native ,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    Sext,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]B;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input Sext;
  input Shift_Oper;
  input Select_Logic;

  wire [0:0]B;
  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Sext;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire shift_Res;

  block_design_microblaze_0_0_MB_LUT4__parameterized15_318 Logic_LUT
       (.B(B),
        .Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i));
  block_design_microblaze_0_0_MB_LUT4__parameterized17_319 Shift_LUT
       (.Sext(Sext),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .shift_Res(shift_Res));
  block_design_microblaze_0_0_MB_MUXF7_320 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module block_design_microblaze_0_0_Shift_Logic_Bit_231
   (Select_Logic_reg,
    B,
    Op1_Shift,
    Logic_Oper,
    \Using_FPGA.Native ,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]B;
  input Op1_Shift;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native ;
  input Shift_Oper;
  input Select_Logic;

  wire [0:0]B;
  wire [0:1]Logic_Oper;
  wire Op1_Shift;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire logic_Res_i;
  wire shift_Res;

  block_design_microblaze_0_0_MB_LUT4__parameterized15_315 Logic_LUT
       (.B(B),
        .Logic_Oper(Logic_Oper),
        .Op1_Shift(Op1_Shift),
        .logic_Res_i(logic_Res_i));
  block_design_microblaze_0_0_MB_LUT4__parameterized17_316 Shift_LUT
       (.Op1_Shift(Op1_Shift),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .shift_Res(shift_Res));
  block_design_microblaze_0_0_MB_MUXF7_317 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module block_design_microblaze_0_0_Shift_Logic_Bit_232
   (Select_Logic_reg,
    B,
    \Using_FPGA.Native ,
    Logic_Oper,
    Op1_Shift,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]B;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input Op1_Shift;
  input Shift_Oper;
  input Select_Logic;

  wire [0:0]B;
  wire [0:1]Logic_Oper;
  wire Op1_Shift;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire logic_Res_i;
  wire shift_Res;

  block_design_microblaze_0_0_MB_LUT4__parameterized15_312 Logic_LUT
       (.B(B),
        .Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i));
  block_design_microblaze_0_0_MB_LUT4__parameterized17_313 Shift_LUT
       (.Op1_Shift(Op1_Shift),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .shift_Res(shift_Res));
  block_design_microblaze_0_0_MB_MUXF7_314 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module block_design_microblaze_0_0_Shift_Logic_Bit_233
   (shift_Logic_Result,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    B,
    \Using_FPGA.Native_3 ,
    Logic_Oper,
    \Using_FPGA.Native_4 ,
    Shift_Oper,
    Select_Logic);
  output [0:0]shift_Logic_Result;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input [0:0]B;
  input \Using_FPGA.Native_3 ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_4 ;
  input Shift_Oper;
  input Select_Logic;

  wire [0:0]B;
  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire logic_Res_i;
  wire [0:0]shift_Logic_Result;
  wire shift_Res;

  block_design_microblaze_0_0_MB_LUT4__parameterized15_309 Logic_LUT
       (.B(B),
        .Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_3 ),
        .logic_Res_i(logic_Res_i));
  block_design_microblaze_0_0_MB_LUT4__parameterized17_310 Shift_LUT
       (.Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_4 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_3 ),
        .shift_Res(shift_Res));
  block_design_microblaze_0_0_MB_MUXF7_311 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_2 ),
        .logic_Res_i(logic_Res_i),
        .shift_Logic_Result(shift_Logic_Result),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module block_design_microblaze_0_0_Shift_Logic_Bit_234
   (shift_Logic_Result,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    B,
    \Using_FPGA.Native_3 ,
    Logic_Oper,
    \Using_FPGA.Native_4 ,
    Shift_Oper,
    Select_Logic);
  output [0:0]shift_Logic_Result;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input [0:0]B;
  input \Using_FPGA.Native_3 ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_4 ;
  input Shift_Oper;
  input Select_Logic;

  wire [0:0]B;
  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire logic_Res_i;
  wire [0:0]shift_Logic_Result;
  wire shift_Res;

  block_design_microblaze_0_0_MB_LUT4__parameterized15_306 Logic_LUT
       (.B(B),
        .Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_3 ),
        .logic_Res_i(logic_Res_i));
  block_design_microblaze_0_0_MB_LUT4__parameterized17_307 Shift_LUT
       (.Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_4 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_3 ),
        .shift_Res(shift_Res));
  block_design_microblaze_0_0_MB_MUXF7_308 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_2 ),
        .logic_Res_i(logic_Res_i),
        .shift_Logic_Result(shift_Logic_Result),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module block_design_microblaze_0_0_Shift_Logic_Bit_235
   (shift_Logic_Result,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    B,
    \Using_FPGA.Native_4 ,
    Logic_Oper,
    \Using_FPGA.Native_5 ,
    Shift_Oper,
    Select_Logic);
  output [0:0]shift_Logic_Result;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input [0:0]B;
  input \Using_FPGA.Native_4 ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_5 ;
  input Shift_Oper;
  input Select_Logic;

  wire [0:0]B;
  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire logic_Res_i;
  wire [0:0]shift_Logic_Result;
  wire shift_Res;

  block_design_microblaze_0_0_MB_LUT4__parameterized15_303 Logic_LUT
       (.B(B),
        .Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_4 ),
        .logic_Res_i(logic_Res_i));
  block_design_microblaze_0_0_MB_LUT4__parameterized17_304 Shift_LUT
       (.Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_5 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_4 ),
        .shift_Res(shift_Res));
  block_design_microblaze_0_0_MB_MUXF7_305 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_3 ),
        .logic_Res_i(logic_Res_i),
        .shift_Logic_Result(shift_Logic_Result),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module block_design_microblaze_0_0_Shift_Logic_Bit_236
   (Select_Logic_reg,
    B,
    EX_Op1,
    Logic_Oper,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]B;
  input EX_Op1;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input Shift_Oper;
  input Select_Logic;

  wire [0:0]B;
  wire EX_Op1;
  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire shift_Res;

  block_design_microblaze_0_0_MB_LUT4__parameterized15_300 Logic_LUT
       (.B(B),
        .EX_Op1(EX_Op1),
        .Logic_Oper(Logic_Oper),
        .logic_Res_i(logic_Res_i));
  block_design_microblaze_0_0_MB_LUT4__parameterized17_301 Shift_LUT
       (.Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .shift_Res(shift_Res));
  block_design_microblaze_0_0_MB_MUXF7_302 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module block_design_microblaze_0_0_Shift_Logic_Bit_237
   (Select_Logic_reg,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    Logic_Oper,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]\Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Shift_Oper;
  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire logic_Res_i;
  wire shift_Res;

  block_design_microblaze_0_0_MB_LUT4__parameterized15_297 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .logic_Res_i(logic_Res_i));
  block_design_microblaze_0_0_MB_LUT4__parameterized17_298 Shift_LUT
       (.Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_2 ),
        .shift_Res(shift_Res));
  block_design_microblaze_0_0_MB_MUXF7_299 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module block_design_microblaze_0_0_Shift_Logic_Bit_238
   (Shift_Logic_Res,
    B,
    \Using_FPGA.Native ,
    Logic_Oper,
    EX_Op1,
    Shift_Oper,
    Select_Logic);
  output Shift_Logic_Res;
  input [0:0]B;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input EX_Op1;
  input Shift_Oper;
  input Select_Logic;

  wire [0:0]B;
  wire EX_Op1;
  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Shift_Logic_Res;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire logic_Res_i;
  wire shift_Res;

  block_design_microblaze_0_0_MB_LUT4__parameterized15_294 Logic_LUT
       (.B(B),
        .Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i));
  block_design_microblaze_0_0_MB_LUT4__parameterized17_295 Shift_LUT
       (.EX_Op1(EX_Op1),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .shift_Res(shift_Res));
  block_design_microblaze_0_0_MB_MUXF7_296 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Shift_Logic_Res(Shift_Logic_Res),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module block_design_microblaze_0_0_Shift_Logic_Bit_239
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_i_1__45 ,
    \Using_FPGA.Native_i_1__45_0 ,
    \Using_FPGA.Native_i_1__45_1 ,
    \Using_FPGA.Native_i_1__45_2 ,
    Shifted,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Logic_Oper,
    \Using_FPGA.Native_2 ,
    Shift_Oper,
    Select_Logic);
  output \Using_FPGA.Native ;
  input \Using_FPGA.Native_i_1__45 ;
  input \Using_FPGA.Native_i_1__45_0 ;
  input \Using_FPGA.Native_i_1__45_1 ;
  input \Using_FPGA.Native_i_1__45_2 ;
  input Shifted;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Shift_Oper;
  wire Shifted;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_i_1__45 ;
  wire \Using_FPGA.Native_i_1__45_0 ;
  wire \Using_FPGA.Native_i_1__45_1 ;
  wire \Using_FPGA.Native_i_1__45_2 ;
  wire logic_Res_i;
  wire shift_Res;

  block_design_microblaze_0_0_MB_LUT4__parameterized15_291 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .logic_Res_i(logic_Res_i));
  block_design_microblaze_0_0_MB_LUT4__parameterized17_292 Shift_LUT
       (.Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .shift_Res(shift_Res));
  block_design_microblaze_0_0_MB_MUXF7_293 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Shifted(Shifted),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_i_1__45 (\Using_FPGA.Native_i_1__45 ),
        .\Using_FPGA.Native_i_1__45_0 (\Using_FPGA.Native_i_1__45_0 ),
        .\Using_FPGA.Native_i_1__45_1 (\Using_FPGA.Native_i_1__45_1 ),
        .\Using_FPGA.Native_i_1__45_2 (\Using_FPGA.Native_i_1__45_2 ),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module block_design_microblaze_0_0_Shift_Logic_Bit_240
   (Select_Logic_reg,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    Logic_Oper,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]\Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Shift_Oper;
  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire logic_Res_i;
  wire shift_Res;

  block_design_microblaze_0_0_MB_LUT4__parameterized15_288 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .logic_Res_i(logic_Res_i));
  block_design_microblaze_0_0_MB_LUT4__parameterized17_289 Shift_LUT
       (.Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_2 ),
        .shift_Res(shift_Res));
  block_design_microblaze_0_0_MB_MUXF7_290 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module block_design_microblaze_0_0_Shift_Logic_Bit_241
   (Select_Logic_reg,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    Logic_Oper,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]\Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Shift_Oper;
  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire logic_Res_i;
  wire shift_Res;

  block_design_microblaze_0_0_MB_LUT4__parameterized15_285 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .logic_Res_i(logic_Res_i));
  block_design_microblaze_0_0_MB_LUT4__parameterized17_286 Shift_LUT
       (.Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_2 ),
        .shift_Res(shift_Res));
  block_design_microblaze_0_0_MB_MUXF7_287 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module block_design_microblaze_0_0_Shift_Logic_Bit_242
   (Select_Logic_reg,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    Logic_Oper,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]\Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Shift_Oper;
  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire logic_Res_i;
  wire shift_Res;

  block_design_microblaze_0_0_MB_LUT4__parameterized15_282 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .logic_Res_i(logic_Res_i));
  block_design_microblaze_0_0_MB_LUT4__parameterized17_283 Shift_LUT
       (.Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_2 ),
        .shift_Res(shift_Res));
  block_design_microblaze_0_0_MB_MUXF7_284 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module block_design_microblaze_0_0_Shift_Logic_Bit_243
   (Select_Logic_reg,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    Logic_Oper,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]\Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Shift_Oper;
  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire logic_Res_i;
  wire shift_Res;

  block_design_microblaze_0_0_MB_LUT4__parameterized15_279 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .logic_Res_i(logic_Res_i));
  block_design_microblaze_0_0_MB_LUT4__parameterized17_280 Shift_LUT
       (.Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_2 ),
        .shift_Res(shift_Res));
  block_design_microblaze_0_0_MB_MUXF7_281 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module block_design_microblaze_0_0_Shift_Logic_Bit_244
   (Select_Logic_reg,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    Logic_Oper,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]\Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Shift_Oper;
  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire logic_Res_i;
  wire shift_Res;

  block_design_microblaze_0_0_MB_LUT4__parameterized15_276 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .logic_Res_i(logic_Res_i));
  block_design_microblaze_0_0_MB_LUT4__parameterized17_277 Shift_LUT
       (.Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_2 ),
        .shift_Res(shift_Res));
  block_design_microblaze_0_0_MB_MUXF7_278 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module block_design_microblaze_0_0_Shift_Logic_Bit_245
   (Select_Logic_reg,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    Logic_Oper,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]\Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Shift_Oper;
  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire logic_Res_i;
  wire shift_Res;

  block_design_microblaze_0_0_MB_LUT4__parameterized15_273 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .logic_Res_i(logic_Res_i));
  block_design_microblaze_0_0_MB_LUT4__parameterized17_274 Shift_LUT
       (.Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_2 ),
        .shift_Res(shift_Res));
  block_design_microblaze_0_0_MB_MUXF7_275 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module block_design_microblaze_0_0_Shift_Logic_Bit_246
   (Select_Logic_reg,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    Logic_Oper,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]\Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Shift_Oper;
  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire logic_Res_i;
  wire shift_Res;

  block_design_microblaze_0_0_MB_LUT4__parameterized15 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .logic_Res_i(logic_Res_i));
  block_design_microblaze_0_0_MB_LUT4__parameterized17 Shift_LUT
       (.Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_2 ),
        .shift_Res(shift_Res));
  block_design_microblaze_0_0_MB_MUXF7_272 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

module block_design_microblaze_0_0_Shift_Logic_Module
   (Is_Equal,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    shift_Logic_Result,
    \Use_The_PCMP_instr.CLZ_Instr_reg ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    Shift_Logic_Res,
    Select_Logic_reg,
    Select_Logic_reg_0,
    Select_Logic_reg_1,
    Select_Logic_reg_2,
    Select_Logic_reg_3,
    Select_Logic_reg_4,
    Select_Logic_reg_5,
    Select_Logic_reg_6,
    Select_Logic_reg_7,
    Select_Logic_reg_8,
    Select_Logic_reg_9,
    Select_Logic_reg_10,
    Select_Logic_reg_11,
    Select_Logic_reg_12,
    Select_Logic_reg_13,
    Select_Logic_reg_14,
    Select_Logic_reg_15,
    Select_Logic_reg_16,
    Select_Logic_reg_17,
    Select_Logic_reg_18,
    Select_Logic_reg_19,
    Select_Logic_reg_20,
    Select_Logic_reg_21,
    Select_Logic_reg_22,
    Select_Logic_reg_23,
    Select_Logic_reg_24,
    Select_Logic_reg_25,
    \Using_FPGA.The_Compare[2].sel_reg ,
    S,
    \Using_FPGA.The_Compare[0].sel_reg ,
    \Using_FPGA.Native_6 ,
    \Using_FPGA.Native_7 ,
    \Using_FPGA.The_Compare[2].sel_reg_0 ,
    S_1,
    \Using_FPGA.The_Compare[0].sel_reg_2 ,
    \Using_FPGA.Native_8 ,
    \Using_FPGA.Native_9 ,
    \Using_FPGA.The_Compare[2].sel_reg_3 ,
    S_4,
    \Using_FPGA.The_Compare[0].sel_reg_5 ,
    \Using_FPGA.Native_10 ,
    \Using_FPGA.Native_11 ,
    \Using_FPGA.The_Compare[2].sel_reg_6 ,
    S_7,
    \Using_FPGA.The_Compare[0].sel_reg_8 ,
    \Using_FPGA.Native_12 ,
    Enable_2,
    Logic_Oper,
    \Using_FPGA.Native_13 ,
    I3_35,
    I0,
    \Using_FPGA.Native_14 ,
    clz_instr,
    \Using_FPGA.Native_i_5 ,
    \Using_FPGA.Native_15 ,
    \Using_FPGA.Native_i_1__45 ,
    \Using_FPGA.Native_i_1__45_0 ,
    Shifted,
    Op1_Shift,
    \Using_FPGA.Native_16 ,
    \Using_FPGA.Native_17 ,
    \Using_FPGA.Native_18 ,
    \Using_FPGA.Native_19 ,
    Shift_Oper,
    Select_Logic,
    B,
    EX_Op1,
    \Using_FPGA.Native_20 ,
    \Using_FPGA.Native_21 ,
    \Using_FPGA.Native_22 ,
    \Using_FPGA.Native_23 ,
    \Using_FPGA.Native_24 ,
    \Using_FPGA.Native_25 ,
    Sext,
    \Using_FPGA.Native_26 ,
    \Using_FPGA.Native_27 ,
    \Using_FPGA.Native_28 ,
    \Using_FPGA.Native_29 ,
    \Using_FPGA.Native_30 ,
    \Using_FPGA.Native_31 ,
    \Using_FPGA.Native_32 ,
    \Using_FPGA.Native_33 ,
    \Using_FPGA.Native_34 ,
    \Using_FPGA.Native_35 ,
    \Using_FPGA.Native_36 ,
    \Using_FPGA.Native_37 ,
    \Using_FPGA.Native_38 ,
    \Using_FPGA.Native_39 ,
    \Using_FPGA.Native_40 ,
    \Using_FPGA.Native_41 ,
    \Using_FPGA.Native_42 ,
    \Using_FPGA.Native_43 ,
    \Using_FPGA.Native_44 ,
    \Using_FPGA.Native_45 ,
    \Using_FPGA.Native_46 ,
    \Using_FPGA.Native_47 ,
    \Using_FPGA.Native_48 ,
    \Using_FPGA.Native_49 ,
    \Using_FPGA.Native_50 );
  output Is_Equal;
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  output [5:0]shift_Logic_Result;
  output \Use_The_PCMP_instr.CLZ_Instr_reg ;
  output \Using_FPGA.Native_2 ;
  output \Using_FPGA.Native_3 ;
  output \Using_FPGA.Native_4 ;
  output \Using_FPGA.Native_5 ;
  output Shift_Logic_Res;
  output Select_Logic_reg;
  output Select_Logic_reg_0;
  output Select_Logic_reg_1;
  output Select_Logic_reg_2;
  output Select_Logic_reg_3;
  output Select_Logic_reg_4;
  output Select_Logic_reg_5;
  output Select_Logic_reg_6;
  output Select_Logic_reg_7;
  output Select_Logic_reg_8;
  output Select_Logic_reg_9;
  output Select_Logic_reg_10;
  output Select_Logic_reg_11;
  output Select_Logic_reg_12;
  output Select_Logic_reg_13;
  output Select_Logic_reg_14;
  output Select_Logic_reg_15;
  output Select_Logic_reg_16;
  output Select_Logic_reg_17;
  output Select_Logic_reg_18;
  output Select_Logic_reg_19;
  output Select_Logic_reg_20;
  output Select_Logic_reg_21;
  output Select_Logic_reg_22;
  output Select_Logic_reg_23;
  output Select_Logic_reg_24;
  output Select_Logic_reg_25;
  input \Using_FPGA.The_Compare[2].sel_reg ;
  input S;
  input \Using_FPGA.The_Compare[0].sel_reg ;
  input \Using_FPGA.Native_6 ;
  input \Using_FPGA.Native_7 ;
  input \Using_FPGA.The_Compare[2].sel_reg_0 ;
  input S_1;
  input \Using_FPGA.The_Compare[0].sel_reg_2 ;
  input \Using_FPGA.Native_8 ;
  input \Using_FPGA.Native_9 ;
  input \Using_FPGA.The_Compare[2].sel_reg_3 ;
  input S_4;
  input \Using_FPGA.The_Compare[0].sel_reg_5 ;
  input \Using_FPGA.Native_10 ;
  input \Using_FPGA.Native_11 ;
  input \Using_FPGA.The_Compare[2].sel_reg_6 ;
  input S_7;
  input \Using_FPGA.The_Compare[0].sel_reg_8 ;
  input \Using_FPGA.Native_12 ;
  input Enable_2;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_13 ;
  input I3_35;
  input I0;
  input \Using_FPGA.Native_14 ;
  input clz_instr;
  input \Using_FPGA.Native_i_5 ;
  input \Using_FPGA.Native_15 ;
  input \Using_FPGA.Native_i_1__45 ;
  input \Using_FPGA.Native_i_1__45_0 ;
  input Shifted;
  input Op1_Shift;
  input \Using_FPGA.Native_16 ;
  input \Using_FPGA.Native_17 ;
  input \Using_FPGA.Native_18 ;
  input \Using_FPGA.Native_19 ;
  input Shift_Oper;
  input Select_Logic;
  input [15:0]B;
  input EX_Op1;
  input \Using_FPGA.Native_20 ;
  input \Using_FPGA.Native_21 ;
  input \Using_FPGA.Native_22 ;
  input \Using_FPGA.Native_23 ;
  input \Using_FPGA.Native_24 ;
  input \Using_FPGA.Native_25 ;
  input Sext;
  input \Using_FPGA.Native_26 ;
  input \Using_FPGA.Native_27 ;
  input \Using_FPGA.Native_28 ;
  input \Using_FPGA.Native_29 ;
  input \Using_FPGA.Native_30 ;
  input \Using_FPGA.Native_31 ;
  input \Using_FPGA.Native_32 ;
  input \Using_FPGA.Native_33 ;
  input \Using_FPGA.Native_34 ;
  input [14:0]\Using_FPGA.Native_35 ;
  input \Using_FPGA.Native_36 ;
  input \Using_FPGA.Native_37 ;
  input \Using_FPGA.Native_38 ;
  input \Using_FPGA.Native_39 ;
  input \Using_FPGA.Native_40 ;
  input \Using_FPGA.Native_41 ;
  input \Using_FPGA.Native_42 ;
  input \Using_FPGA.Native_43 ;
  input \Using_FPGA.Native_44 ;
  input \Using_FPGA.Native_45 ;
  input \Using_FPGA.Native_46 ;
  input \Using_FPGA.Native_47 ;
  input \Using_FPGA.Native_48 ;
  input \Using_FPGA.Native_49 ;
  input \Using_FPGA.Native_50 ;

  wire [15:0]B;
  wire EX_Op1;
  wire Enable_2;
  wire I0;
  wire I3_35;
  wire Is_Equal;
  wire [0:1]Logic_Oper;
  wire Op1_Shift;
  wire S;
  wire S_1;
  wire S_4;
  wire S_7;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Select_Logic_reg_0;
  wire Select_Logic_reg_1;
  wire Select_Logic_reg_10;
  wire Select_Logic_reg_11;
  wire Select_Logic_reg_12;
  wire Select_Logic_reg_13;
  wire Select_Logic_reg_14;
  wire Select_Logic_reg_15;
  wire Select_Logic_reg_16;
  wire Select_Logic_reg_17;
  wire Select_Logic_reg_18;
  wire Select_Logic_reg_19;
  wire Select_Logic_reg_2;
  wire Select_Logic_reg_20;
  wire Select_Logic_reg_21;
  wire Select_Logic_reg_22;
  wire Select_Logic_reg_23;
  wire Select_Logic_reg_24;
  wire Select_Logic_reg_25;
  wire Select_Logic_reg_3;
  wire Select_Logic_reg_4;
  wire Select_Logic_reg_5;
  wire Select_Logic_reg_6;
  wire Select_Logic_reg_7;
  wire Select_Logic_reg_8;
  wire Select_Logic_reg_9;
  wire Sext;
  wire Shift_Logic_Res;
  wire Shift_Oper;
  wire Shifted;
  wire \Use_The_PCMP_instr.CLZ_Instr_reg ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_10 ;
  wire \Using_FPGA.Native_11 ;
  wire \Using_FPGA.Native_12 ;
  wire \Using_FPGA.Native_13 ;
  wire \Using_FPGA.Native_14 ;
  wire \Using_FPGA.Native_15 ;
  wire \Using_FPGA.Native_16 ;
  wire \Using_FPGA.Native_17 ;
  wire \Using_FPGA.Native_18 ;
  wire \Using_FPGA.Native_19 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_20 ;
  wire \Using_FPGA.Native_21 ;
  wire \Using_FPGA.Native_22 ;
  wire \Using_FPGA.Native_23 ;
  wire \Using_FPGA.Native_24 ;
  wire \Using_FPGA.Native_25 ;
  wire \Using_FPGA.Native_26 ;
  wire \Using_FPGA.Native_27 ;
  wire \Using_FPGA.Native_28 ;
  wire \Using_FPGA.Native_29 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_30 ;
  wire \Using_FPGA.Native_31 ;
  wire \Using_FPGA.Native_32 ;
  wire \Using_FPGA.Native_33 ;
  wire \Using_FPGA.Native_34 ;
  wire [14:0]\Using_FPGA.Native_35 ;
  wire \Using_FPGA.Native_36 ;
  wire \Using_FPGA.Native_37 ;
  wire \Using_FPGA.Native_38 ;
  wire \Using_FPGA.Native_39 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_40 ;
  wire \Using_FPGA.Native_41 ;
  wire \Using_FPGA.Native_42 ;
  wire \Using_FPGA.Native_43 ;
  wire \Using_FPGA.Native_44 ;
  wire \Using_FPGA.Native_45 ;
  wire \Using_FPGA.Native_46 ;
  wire \Using_FPGA.Native_47 ;
  wire \Using_FPGA.Native_48 ;
  wire \Using_FPGA.Native_49 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_50 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire \Using_FPGA.Native_8 ;
  wire \Using_FPGA.Native_9 ;
  wire \Using_FPGA.Native_i_1__45 ;
  wire \Using_FPGA.Native_i_1__45_0 ;
  wire \Using_FPGA.Native_i_5 ;
  wire \Using_FPGA.The_Compare[0].sel_reg ;
  wire \Using_FPGA.The_Compare[0].sel_reg_2 ;
  wire \Using_FPGA.The_Compare[0].sel_reg_5 ;
  wire \Using_FPGA.The_Compare[0].sel_reg_8 ;
  wire \Using_FPGA.The_Compare[2].sel_reg ;
  wire \Using_FPGA.The_Compare[2].sel_reg_0 ;
  wire \Using_FPGA.The_Compare[2].sel_reg_3 ;
  wire \Using_FPGA.The_Compare[2].sel_reg_6 ;
  wire byte_0;
  wire byte_0x_0;
  wire byte_0x_1;
  wire byte_0x_2;
  wire byte_0x_3;
  wire byte_1;
  wire byte_2;
  wire byte_3;
  wire clz_instr;
  wire res_00_0;
  wire res_00_1;
  wire res_00_2;
  wire res_10;
  wire res_11;
  wire res_1x;
  wire [5:0]shift_Logic_Result;

  block_design_microblaze_0_0_Shift_Logic_Bit \Shift_Logic_Bits[0].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_25),
        .Shift_Oper(Shift_Oper),
        .Shifted(Shifted),
        .\Using_FPGA.Native (\Using_FPGA.Native_35 [14]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_49 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_50 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_34 ));
  block_design_microblaze_0_0_Shift_Logic_Bit_216 \Shift_Logic_Bits[10].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_15),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_35 [4]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_39 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_40 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_34 ));
  block_design_microblaze_0_0_Shift_Logic_Bit_217 \Shift_Logic_Bits[11].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_14),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_35 [3]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_38 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_39 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_34 ));
  block_design_microblaze_0_0_Shift_Logic_Bit_218 \Shift_Logic_Bits[12].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_13),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_35 [2]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_37 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_38 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_34 ));
  block_design_microblaze_0_0_Shift_Logic_Bit_219 \Shift_Logic_Bits[13].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_12),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_35 [1]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_36 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_37 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_34 ));
  block_design_microblaze_0_0_Shift_Logic_Bit_220 \Shift_Logic_Bits[14].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_11),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_35 [0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_33 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_36 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_34 ));
  block_design_microblaze_0_0_Shift_Logic_Bit_221 \Shift_Logic_Bits[15].Shift_Logic_Bit_I 
       (.B(B[15]),
        .Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_10),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_32 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_33 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_34 ));
  block_design_microblaze_0_0_Shift_Logic_Bit_222 \Shift_Logic_Bits[16].Shift_Logic_Bit_I 
       (.B(B[14]),
        .Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_9),
        .Sext(Sext),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_31 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_32 ));
  block_design_microblaze_0_0_Shift_Logic_Bit_223 \Shift_Logic_Bits[17].Shift_Logic_Bit_I 
       (.B(B[13]),
        .Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_8),
        .Sext(Sext),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_30 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_31 ));
  block_design_microblaze_0_0_Shift_Logic_Bit_224 \Shift_Logic_Bits[18].Shift_Logic_Bit_I 
       (.B(B[12]),
        .Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_7),
        .Sext(Sext),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_29 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_30 ));
  block_design_microblaze_0_0_Shift_Logic_Bit_225 \Shift_Logic_Bits[19].Shift_Logic_Bit_I 
       (.B(B[11]),
        .Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_6),
        .Sext(Sext),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_28 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_29 ));
  block_design_microblaze_0_0_Shift_Logic_Bit_226 \Shift_Logic_Bits[1].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_24),
        .Shift_Oper(Shift_Oper),
        .Shifted(Shifted),
        .\Using_FPGA.Native (\Using_FPGA.Native_35 [13]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_48 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_34 ));
  block_design_microblaze_0_0_Shift_Logic_Bit_227 \Shift_Logic_Bits[20].Shift_Logic_Bit_I 
       (.B(B[10]),
        .Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_5),
        .Sext(Sext),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_27 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_28 ));
  block_design_microblaze_0_0_Shift_Logic_Bit_228 \Shift_Logic_Bits[21].Shift_Logic_Bit_I 
       (.B(B[9]),
        .Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_4),
        .Sext(Sext),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_26 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_27 ));
  block_design_microblaze_0_0_Shift_Logic_Bit_229 \Shift_Logic_Bits[22].Shift_Logic_Bit_I 
       (.B(B[8]),
        .Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_3),
        .Sext(Sext),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_25 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_26 ));
  block_design_microblaze_0_0_Shift_Logic_Bit_230 \Shift_Logic_Bits[23].Shift_Logic_Bit_I 
       (.B(B[7]),
        .Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_2),
        .Sext(Sext),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_24 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_25 ));
  block_design_microblaze_0_0_Shift_Logic_Bit_231 \Shift_Logic_Bits[24].Shift_Logic_Bit_I 
       (.B(B[6]),
        .Logic_Oper(Logic_Oper),
        .Op1_Shift(Op1_Shift),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_1),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_24 ));
  block_design_microblaze_0_0_Shift_Logic_Bit_232 \Shift_Logic_Bits[25].Shift_Logic_Bit_I 
       (.B(B[5]),
        .Logic_Oper(Logic_Oper),
        .Op1_Shift(Op1_Shift),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_0),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_16 ));
  block_design_microblaze_0_0_Shift_Logic_Bit_233 \Shift_Logic_Bits[26].Shift_Logic_Bit_I 
       (.B(B[4]),
        .Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_15 ),
        .\Using_FPGA.Native_0 (\Use_The_PCMP_instr.CLZ_Instr_reg ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_23 ),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_16 ),
        .shift_Logic_Result(shift_Logic_Result[5]));
  block_design_microblaze_0_0_Shift_Logic_Bit_234 \Shift_Logic_Bits[27].Shift_Logic_Bit_I 
       (.B(B[3]),
        .Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_15 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_2 (\Use_The_PCMP_instr.CLZ_Instr_reg ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_22 ),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_23 ),
        .shift_Logic_Result(shift_Logic_Result[4]));
  block_design_microblaze_0_0_Shift_Logic_Bit_235 \Shift_Logic_Bits[28].Shift_Logic_Bit_I 
       (.B(B[2]),
        .Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_15 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_3 ),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_20 ),
        .\Using_FPGA.Native_5 (\Using_FPGA.Native_22 ),
        .shift_Logic_Result(shift_Logic_Result[3]));
  block_design_microblaze_0_0_Shift_Logic_Bit_236 \Shift_Logic_Bits[29].Shift_Logic_Bit_I 
       (.B(B[1]),
        .EX_Op1(EX_Op1),
        .Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_20 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_21 ));
  block_design_microblaze_0_0_Shift_Logic_Bit_237 \Shift_Logic_Bits[2].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_23),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_35 [12]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_47 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_48 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_34 ));
  block_design_microblaze_0_0_Shift_Logic_Bit_238 \Shift_Logic_Bits[30].Shift_Logic_Bit_I 
       (.B(B[0]),
        .EX_Op1(EX_Op1),
        .Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Shift_Logic_Res(Shift_Logic_Res),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_19 ));
  block_design_microblaze_0_0_Shift_Logic_Bit_239 \Shift_Logic_Bits[31].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Shift_Oper(Shift_Oper),
        .Shifted(Shifted),
        .\Using_FPGA.Native (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_17 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_18 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_19 ),
        .\Using_FPGA.Native_i_1__45 (\Using_FPGA.Native_15 ),
        .\Using_FPGA.Native_i_1__45_0 (\Using_FPGA.Native_i_1__45 ),
        .\Using_FPGA.Native_i_1__45_1 (\Using_FPGA.Native_i_1__45_0 ),
        .\Using_FPGA.Native_i_1__45_2 (Is_Equal));
  block_design_microblaze_0_0_Shift_Logic_Bit_240 \Shift_Logic_Bits[3].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_22),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_35 [11]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_46 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_47 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_34 ));
  block_design_microblaze_0_0_Shift_Logic_Bit_241 \Shift_Logic_Bits[4].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_21),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_35 [10]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_45 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_46 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_34 ));
  block_design_microblaze_0_0_Shift_Logic_Bit_242 \Shift_Logic_Bits[5].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_20),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_35 [9]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_44 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_45 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_34 ));
  block_design_microblaze_0_0_Shift_Logic_Bit_243 \Shift_Logic_Bits[6].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_19),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_35 [8]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_43 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_44 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_34 ));
  block_design_microblaze_0_0_Shift_Logic_Bit_244 \Shift_Logic_Bits[7].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_18),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_35 [7]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_42 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_43 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_34 ));
  block_design_microblaze_0_0_Shift_Logic_Bit_245 \Shift_Logic_Bits[8].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_17),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_35 [6]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_41 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_42 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_34 ));
  block_design_microblaze_0_0_Shift_Logic_Bit_246 \Shift_Logic_Bits[9].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_16),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_35 [5]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_40 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_41 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_34 ));
  block_design_microblaze_0_0_MB_MUXF7 \Use_PCMP_instr.No_PCMP_Long.MUXF5_pcmp1x 
       (.Logic_Oper(Logic_Oper[1]),
        .res_10(res_10),
        .res_11(res_11),
        .res_1x(res_1x));
  block_design_microblaze_0_0_MB_LUT4__parameterized19 \Use_PCMP_instr.No_PCMP_Long.pcmp_00_lut_0 
       (.byte_0x_0(byte_0x_0),
        .byte_0x_1(byte_0x_1),
        .byte_0x_2(byte_0x_2),
        .byte_0x_3(byte_0x_3),
        .res_00_2(res_00_2));
  block_design_microblaze_0_0_MB_LUT4__parameterized21 \Use_PCMP_instr.No_PCMP_Long.pcmp_00_lut_1 
       (.byte_0x_0(byte_0x_0),
        .byte_0x_1(byte_0x_1),
        .byte_0x_2(byte_0x_2),
        .byte_0x_3(byte_0x_3),
        .res_00_1(res_00_1));
  block_design_microblaze_0_0_MB_LUT4__parameterized23 \Use_PCMP_instr.No_PCMP_Long.pcmp_00_lut_2 
       (.byte_0x_0(byte_0x_0),
        .byte_0x_1(byte_0x_1),
        .byte_0x_2(byte_0x_2),
        .byte_0x_3(byte_0x_3),
        .res_00_0(res_00_0));
  block_design_microblaze_0_0_MB_LUT4__parameterized7_247 \Use_PCMP_instr.No_PCMP_Long.pcmp_10_lut 
       (.byte_0(byte_0),
        .byte_1(byte_1),
        .byte_2(byte_2),
        .byte_3(byte_3),
        .res_10(res_10));
  block_design_microblaze_0_0_MB_LUT4__parameterized25 \Use_PCMP_instr.No_PCMP_Long.pcmp_11_lut 
       (.byte_0(byte_0),
        .byte_1(byte_1),
        .byte_2(byte_2),
        .byte_3(byte_3),
        .res_11(res_11));
  block_design_microblaze_0_0_MB_LUT4__parameterized27 \Use_PCMP_instr.No_PCMP_Long.shift_logic_result_i_lut_2 
       (.I3_35(I3_35),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_13 ),
        .res_00_0(res_00_0),
        .res_1x(res_1x),
        .shift_Logic_Result(shift_Logic_Result[0]));
  block_design_microblaze_0_0_carry_equal \Use_PCMP_instr.carry_equal_byte_gen[0].carry_equal_byte 
       (.S(S),
        .Shifted(Shifted),
        .\Use_The_PCMP_instr.CLZ_Instr_reg (\Use_The_PCMP_instr.CLZ_Instr_reg ),
        .\Using_FPGA.Native (Is_Equal),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_4 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_3 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_6 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_7 ),
        .\Using_FPGA.Native_i_1__46 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_i_5 (\Using_FPGA.Native_i_5 ),
        .\Using_FPGA.The_Compare[0].sel_reg (\Using_FPGA.The_Compare[0].sel_reg ),
        .\Using_FPGA.The_Compare[2].sel_reg (\Using_FPGA.The_Compare[2].sel_reg ),
        .byte_0x_3(byte_0x_3),
        .byte_3(byte_3),
        .clz_instr(clz_instr));
  block_design_microblaze_0_0_carry_equal_248 \Use_PCMP_instr.carry_equal_byte_gen[1].carry_equal_byte 
       (.S_1(S_1),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_8 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_9 ),
        .\Using_FPGA.The_Compare[0].sel_reg_2 (\Using_FPGA.The_Compare[0].sel_reg_2 ),
        .\Using_FPGA.The_Compare[2].sel_reg_0 (\Using_FPGA.The_Compare[2].sel_reg_0 ),
        .byte_0x_2(byte_0x_2),
        .byte_2(byte_2));
  block_design_microblaze_0_0_carry_equal_249 \Use_PCMP_instr.carry_equal_byte_gen[2].carry_equal_byte 
       (.S_4(S_4),
        .\Using_FPGA.Native (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_10 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_11 ),
        .\Using_FPGA.The_Compare[0].sel_reg_5 (\Using_FPGA.The_Compare[0].sel_reg_5 ),
        .\Using_FPGA.The_Compare[2].sel_reg_3 (\Using_FPGA.The_Compare[2].sel_reg_3 ),
        .byte_0x_1(byte_0x_1),
        .byte_1(byte_1));
  block_design_microblaze_0_0_carry_equal_250 \Use_PCMP_instr.carry_equal_byte_gen[3].carry_equal_byte 
       (.Enable_2(Enable_2),
        .Op1_Shift(Op1_Shift),
        .S_7(S_7),
        .\Using_FPGA.Native (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_5 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_12 ),
        .\Using_FPGA.Native_i_7 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_i_7_0 (\Using_FPGA.Native_16 ),
        .\Using_FPGA.The_Compare[0].sel_reg_8 (\Using_FPGA.The_Compare[0].sel_reg_8 ),
        .\Using_FPGA.The_Compare[2].sel_reg_6 (\Using_FPGA.The_Compare[2].sel_reg_6 ),
        .byte_0(byte_0),
        .byte_0x_0(byte_0x_0));
  block_design_microblaze_0_0_MB_LUT2 \Use_PCMP_instr.shift_logic_result_i_lut_0 
       (.I0(I0),
        .res_00_2(res_00_2),
        .shift_Logic_Result(shift_Logic_Result[2]));
  block_design_microblaze_0_0_MB_LUT2_251 \Use_PCMP_instr.shift_logic_result_i_lut_1 
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native_14 ),
        .res_00_1(res_00_1),
        .shift_Logic_Result(shift_Logic_Result[1]));
endmodule

module block_design_microblaze_0_0_Streaming_AXI
   (D,
    fsl_carry_hold,
    fsl_carry_hold_value,
    M1_AXIS_TREADY_0,
    Q,
    sync_reset,
    E,
    FSL_Put_Control,
    Clk,
    \Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[31]_0 ,
    \Gen_M_Channel_Handling[1].m_axis_tvalid_i_reg[1]_0 ,
    \Gen_M_Channel_Handling[0].m_axis_tvalid_i_reg[0]_0 ,
    M1_AXIS_TREADY,
    M0_AXIS_TREADY,
    Op2,
    \Read_AXI_Area.S_AXIS_TREADY_reg[0]_0 ,
    \Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 ,
    SR,
    \Read_AXI_Area.FSL_Get_Data_reg[0]_0 );
  output [69:0]D;
  output fsl_carry_hold;
  output fsl_carry_hold_value;
  output M1_AXIS_TREADY_0;
  output [31:0]Q;
  input sync_reset;
  input [0:0]E;
  input FSL_Put_Control;
  input Clk;
  input [0:0]\Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[31]_0 ;
  input \Gen_M_Channel_Handling[1].m_axis_tvalid_i_reg[1]_0 ;
  input \Gen_M_Channel_Handling[0].m_axis_tvalid_i_reg[0]_0 ;
  input M1_AXIS_TREADY;
  input M0_AXIS_TREADY;
  input [0:0]Op2;
  input [1:0]\Read_AXI_Area.S_AXIS_TREADY_reg[0]_0 ;
  input [31:0]\Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 ;
  input [0:0]SR;
  input [31:0]\Read_AXI_Area.FSL_Get_Data_reg[0]_0 ;

  wire Clk;
  wire [69:0]D;
  wire [0:0]E;
  wire FSL_Put_Control;
  wire [0:0]\Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[31]_0 ;
  wire \Gen_M_Channel_Handling[0].m_axis_tvalid_i_reg[0]_0 ;
  wire [31:0]\Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 ;
  wire \Gen_M_Channel_Handling[1].m_axis_tvalid_i_reg[1]_0 ;
  wire M0_AXIS_TREADY;
  wire M1_AXIS_TREADY;
  wire M1_AXIS_TREADY_0;
  wire [0:0]Op2;
  wire [31:0]Q;
  wire [31:0]\Read_AXI_Area.FSL_Get_Data_reg[0]_0 ;
  wire [1:0]\Read_AXI_Area.S_AXIS_TREADY_reg[0]_0 ;
  wire [0:0]SR;
  wire fsl_carry_hold;
  (* RTL_KEEP = "true" *) wire fsl_carry_hold_cmb;
  wire fsl_carry_hold_value;
  (* RTL_KEEP = "true" *) wire fsl_carry_hold_value_cmb;
  wire sync_reset;

  FDRE \Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[0] 
       (.C(Clk),
        .CE(\Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[31]_0 ),
        .D(\Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 [31]),
        .Q(D[68]),
        .R(sync_reset));
  FDRE \Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[10] 
       (.C(Clk),
        .CE(\Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[31]_0 ),
        .D(\Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 [21]),
        .Q(D[58]),
        .R(sync_reset));
  FDRE \Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[11] 
       (.C(Clk),
        .CE(\Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[31]_0 ),
        .D(\Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 [20]),
        .Q(D[57]),
        .R(sync_reset));
  FDRE \Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[12] 
       (.C(Clk),
        .CE(\Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[31]_0 ),
        .D(\Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 [19]),
        .Q(D[56]),
        .R(sync_reset));
  FDRE \Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[13] 
       (.C(Clk),
        .CE(\Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[31]_0 ),
        .D(\Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 [18]),
        .Q(D[55]),
        .R(sync_reset));
  FDRE \Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[14] 
       (.C(Clk),
        .CE(\Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[31]_0 ),
        .D(\Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 [17]),
        .Q(D[54]),
        .R(sync_reset));
  FDRE \Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[15] 
       (.C(Clk),
        .CE(\Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[31]_0 ),
        .D(\Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 [16]),
        .Q(D[53]),
        .R(sync_reset));
  FDRE \Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[16] 
       (.C(Clk),
        .CE(\Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[31]_0 ),
        .D(\Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 [15]),
        .Q(D[52]),
        .R(sync_reset));
  FDRE \Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[17] 
       (.C(Clk),
        .CE(\Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[31]_0 ),
        .D(\Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 [14]),
        .Q(D[51]),
        .R(sync_reset));
  FDRE \Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[18] 
       (.C(Clk),
        .CE(\Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[31]_0 ),
        .D(\Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 [13]),
        .Q(D[50]),
        .R(sync_reset));
  FDRE \Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[19] 
       (.C(Clk),
        .CE(\Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[31]_0 ),
        .D(\Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 [12]),
        .Q(D[49]),
        .R(sync_reset));
  FDRE \Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[1] 
       (.C(Clk),
        .CE(\Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[31]_0 ),
        .D(\Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 [30]),
        .Q(D[67]),
        .R(sync_reset));
  FDRE \Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[20] 
       (.C(Clk),
        .CE(\Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[31]_0 ),
        .D(\Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 [11]),
        .Q(D[48]),
        .R(sync_reset));
  FDRE \Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[21] 
       (.C(Clk),
        .CE(\Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[31]_0 ),
        .D(\Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 [10]),
        .Q(D[47]),
        .R(sync_reset));
  FDRE \Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[22] 
       (.C(Clk),
        .CE(\Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[31]_0 ),
        .D(\Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 [9]),
        .Q(D[46]),
        .R(sync_reset));
  FDRE \Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[23] 
       (.C(Clk),
        .CE(\Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[31]_0 ),
        .D(\Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 [8]),
        .Q(D[45]),
        .R(sync_reset));
  FDRE \Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[24] 
       (.C(Clk),
        .CE(\Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[31]_0 ),
        .D(\Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 [7]),
        .Q(D[44]),
        .R(sync_reset));
  FDRE \Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[25] 
       (.C(Clk),
        .CE(\Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[31]_0 ),
        .D(\Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 [6]),
        .Q(D[43]),
        .R(sync_reset));
  FDRE \Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[26] 
       (.C(Clk),
        .CE(\Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[31]_0 ),
        .D(\Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 [5]),
        .Q(D[42]),
        .R(sync_reset));
  FDRE \Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[27] 
       (.C(Clk),
        .CE(\Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[31]_0 ),
        .D(\Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 [4]),
        .Q(D[41]),
        .R(sync_reset));
  FDRE \Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[28] 
       (.C(Clk),
        .CE(\Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[31]_0 ),
        .D(\Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 [3]),
        .Q(D[40]),
        .R(sync_reset));
  FDRE \Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[29] 
       (.C(Clk),
        .CE(\Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[31]_0 ),
        .D(\Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 [2]),
        .Q(D[39]),
        .R(sync_reset));
  FDRE \Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[2] 
       (.C(Clk),
        .CE(\Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[31]_0 ),
        .D(\Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 [29]),
        .Q(D[66]),
        .R(sync_reset));
  FDRE \Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[30] 
       (.C(Clk),
        .CE(\Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[31]_0 ),
        .D(\Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 [1]),
        .Q(D[38]),
        .R(sync_reset));
  FDRE \Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[31] 
       (.C(Clk),
        .CE(\Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[31]_0 ),
        .D(\Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 [0]),
        .Q(D[37]),
        .R(sync_reset));
  FDRE \Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[3] 
       (.C(Clk),
        .CE(\Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[31]_0 ),
        .D(\Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 [28]),
        .Q(D[65]),
        .R(sync_reset));
  FDRE \Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[4] 
       (.C(Clk),
        .CE(\Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[31]_0 ),
        .D(\Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 [27]),
        .Q(D[64]),
        .R(sync_reset));
  FDRE \Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[5] 
       (.C(Clk),
        .CE(\Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[31]_0 ),
        .D(\Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 [26]),
        .Q(D[63]),
        .R(sync_reset));
  FDRE \Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[6] 
       (.C(Clk),
        .CE(\Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[31]_0 ),
        .D(\Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 [25]),
        .Q(D[62]),
        .R(sync_reset));
  FDRE \Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[7] 
       (.C(Clk),
        .CE(\Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[31]_0 ),
        .D(\Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 [24]),
        .Q(D[61]),
        .R(sync_reset));
  FDRE \Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[8] 
       (.C(Clk),
        .CE(\Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[31]_0 ),
        .D(\Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 [23]),
        .Q(D[60]),
        .R(sync_reset));
  FDRE \Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[9] 
       (.C(Clk),
        .CE(\Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[31]_0 ),
        .D(\Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 [22]),
        .Q(D[59]),
        .R(sync_reset));
  LUT5 #(
    .INIT(32'hBBBBF0FF)) 
    \Gen_M_Channel_Handling[0].M_AXIS_TLAST[0]_i_3 
       (.I0(M1_AXIS_TREADY),
        .I1(D[1]),
        .I2(M0_AXIS_TREADY),
        .I3(D[36]),
        .I4(Op2),
        .O(M1_AXIS_TREADY_0));
  FDRE \Gen_M_Channel_Handling[0].M_AXIS_TLAST_reg[0] 
       (.C(Clk),
        .CE(\Gen_M_Channel_Handling[0].M_AXIS_TDATA_reg[31]_0 ),
        .D(FSL_Put_Control),
        .Q(D[69]),
        .R(sync_reset));
  FDRE \Gen_M_Channel_Handling[0].m_axis_tvalid_i_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Gen_M_Channel_Handling[0].m_axis_tvalid_i_reg[0]_0 ),
        .Q(D[36]),
        .R(sync_reset));
  FDRE \Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32] 
       (.C(Clk),
        .CE(E),
        .D(\Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 [31]),
        .Q(D[33]),
        .R(sync_reset));
  FDRE \Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[33] 
       (.C(Clk),
        .CE(E),
        .D(\Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 [30]),
        .Q(D[32]),
        .R(sync_reset));
  FDRE \Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[34] 
       (.C(Clk),
        .CE(E),
        .D(\Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 [29]),
        .Q(D[31]),
        .R(sync_reset));
  FDRE \Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[35] 
       (.C(Clk),
        .CE(E),
        .D(\Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 [28]),
        .Q(D[30]),
        .R(sync_reset));
  FDRE \Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[36] 
       (.C(Clk),
        .CE(E),
        .D(\Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 [27]),
        .Q(D[29]),
        .R(sync_reset));
  FDRE \Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[37] 
       (.C(Clk),
        .CE(E),
        .D(\Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 [26]),
        .Q(D[28]),
        .R(sync_reset));
  FDRE \Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[38] 
       (.C(Clk),
        .CE(E),
        .D(\Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 [25]),
        .Q(D[27]),
        .R(sync_reset));
  FDRE \Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[39] 
       (.C(Clk),
        .CE(E),
        .D(\Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 [24]),
        .Q(D[26]),
        .R(sync_reset));
  FDRE \Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[40] 
       (.C(Clk),
        .CE(E),
        .D(\Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 [23]),
        .Q(D[25]),
        .R(sync_reset));
  FDRE \Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[41] 
       (.C(Clk),
        .CE(E),
        .D(\Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 [22]),
        .Q(D[24]),
        .R(sync_reset));
  FDRE \Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[42] 
       (.C(Clk),
        .CE(E),
        .D(\Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 [21]),
        .Q(D[23]),
        .R(sync_reset));
  FDRE \Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[43] 
       (.C(Clk),
        .CE(E),
        .D(\Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 [20]),
        .Q(D[22]),
        .R(sync_reset));
  FDRE \Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[44] 
       (.C(Clk),
        .CE(E),
        .D(\Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 [19]),
        .Q(D[21]),
        .R(sync_reset));
  FDRE \Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[45] 
       (.C(Clk),
        .CE(E),
        .D(\Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 [18]),
        .Q(D[20]),
        .R(sync_reset));
  FDRE \Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[46] 
       (.C(Clk),
        .CE(E),
        .D(\Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 [17]),
        .Q(D[19]),
        .R(sync_reset));
  FDRE \Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[47] 
       (.C(Clk),
        .CE(E),
        .D(\Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 [16]),
        .Q(D[18]),
        .R(sync_reset));
  FDRE \Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[48] 
       (.C(Clk),
        .CE(E),
        .D(\Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 [15]),
        .Q(D[17]),
        .R(sync_reset));
  FDRE \Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[49] 
       (.C(Clk),
        .CE(E),
        .D(\Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 [14]),
        .Q(D[16]),
        .R(sync_reset));
  FDRE \Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[50] 
       (.C(Clk),
        .CE(E),
        .D(\Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 [13]),
        .Q(D[15]),
        .R(sync_reset));
  FDRE \Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[51] 
       (.C(Clk),
        .CE(E),
        .D(\Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 [12]),
        .Q(D[14]),
        .R(sync_reset));
  FDRE \Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[52] 
       (.C(Clk),
        .CE(E),
        .D(\Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 [11]),
        .Q(D[13]),
        .R(sync_reset));
  FDRE \Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[53] 
       (.C(Clk),
        .CE(E),
        .D(\Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 [10]),
        .Q(D[12]),
        .R(sync_reset));
  FDRE \Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[54] 
       (.C(Clk),
        .CE(E),
        .D(\Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 [9]),
        .Q(D[11]),
        .R(sync_reset));
  FDRE \Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[55] 
       (.C(Clk),
        .CE(E),
        .D(\Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 [8]),
        .Q(D[10]),
        .R(sync_reset));
  FDRE \Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[56] 
       (.C(Clk),
        .CE(E),
        .D(\Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 [7]),
        .Q(D[9]),
        .R(sync_reset));
  FDRE \Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[57] 
       (.C(Clk),
        .CE(E),
        .D(\Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 [6]),
        .Q(D[8]),
        .R(sync_reset));
  FDRE \Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[58] 
       (.C(Clk),
        .CE(E),
        .D(\Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 [5]),
        .Q(D[7]),
        .R(sync_reset));
  FDRE \Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[59] 
       (.C(Clk),
        .CE(E),
        .D(\Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 [4]),
        .Q(D[6]),
        .R(sync_reset));
  FDRE \Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[60] 
       (.C(Clk),
        .CE(E),
        .D(\Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 [3]),
        .Q(D[5]),
        .R(sync_reset));
  FDRE \Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[61] 
       (.C(Clk),
        .CE(E),
        .D(\Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 [2]),
        .Q(D[4]),
        .R(sync_reset));
  FDRE \Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[62] 
       (.C(Clk),
        .CE(E),
        .D(\Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 [1]),
        .Q(D[3]),
        .R(sync_reset));
  FDRE \Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[63] 
       (.C(Clk),
        .CE(E),
        .D(\Gen_M_Channel_Handling[1].M_AXIS_TDATA_reg[32]_0 [0]),
        .Q(D[2]),
        .R(sync_reset));
  FDRE \Gen_M_Channel_Handling[1].M_AXIS_TLAST_reg[1] 
       (.C(Clk),
        .CE(E),
        .D(FSL_Put_Control),
        .Q(D[34]),
        .R(sync_reset));
  FDRE \Gen_M_Channel_Handling[1].m_axis_tvalid_i_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Gen_M_Channel_Handling[1].m_axis_tvalid_i_reg[1]_0 ),
        .Q(D[1]),
        .R(sync_reset));
  FDRE \Read_AXI_Area.FSL_Get_Data_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Read_AXI_Area.FSL_Get_Data_reg[0]_0 [31]),
        .Q(Q[31]),
        .R(SR));
  FDRE \Read_AXI_Area.FSL_Get_Data_reg[10] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Read_AXI_Area.FSL_Get_Data_reg[0]_0 [21]),
        .Q(Q[21]),
        .R(SR));
  FDRE \Read_AXI_Area.FSL_Get_Data_reg[11] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Read_AXI_Area.FSL_Get_Data_reg[0]_0 [20]),
        .Q(Q[20]),
        .R(SR));
  FDRE \Read_AXI_Area.FSL_Get_Data_reg[12] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Read_AXI_Area.FSL_Get_Data_reg[0]_0 [19]),
        .Q(Q[19]),
        .R(SR));
  FDRE \Read_AXI_Area.FSL_Get_Data_reg[13] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Read_AXI_Area.FSL_Get_Data_reg[0]_0 [18]),
        .Q(Q[18]),
        .R(SR));
  FDRE \Read_AXI_Area.FSL_Get_Data_reg[14] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Read_AXI_Area.FSL_Get_Data_reg[0]_0 [17]),
        .Q(Q[17]),
        .R(SR));
  FDRE \Read_AXI_Area.FSL_Get_Data_reg[15] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Read_AXI_Area.FSL_Get_Data_reg[0]_0 [16]),
        .Q(Q[16]),
        .R(SR));
  FDRE \Read_AXI_Area.FSL_Get_Data_reg[16] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Read_AXI_Area.FSL_Get_Data_reg[0]_0 [15]),
        .Q(Q[15]),
        .R(SR));
  FDRE \Read_AXI_Area.FSL_Get_Data_reg[17] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Read_AXI_Area.FSL_Get_Data_reg[0]_0 [14]),
        .Q(Q[14]),
        .R(SR));
  FDRE \Read_AXI_Area.FSL_Get_Data_reg[18] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Read_AXI_Area.FSL_Get_Data_reg[0]_0 [13]),
        .Q(Q[13]),
        .R(SR));
  FDRE \Read_AXI_Area.FSL_Get_Data_reg[19] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Read_AXI_Area.FSL_Get_Data_reg[0]_0 [12]),
        .Q(Q[12]),
        .R(SR));
  FDRE \Read_AXI_Area.FSL_Get_Data_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Read_AXI_Area.FSL_Get_Data_reg[0]_0 [30]),
        .Q(Q[30]),
        .R(SR));
  FDRE \Read_AXI_Area.FSL_Get_Data_reg[20] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Read_AXI_Area.FSL_Get_Data_reg[0]_0 [11]),
        .Q(Q[11]),
        .R(SR));
  FDRE \Read_AXI_Area.FSL_Get_Data_reg[21] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Read_AXI_Area.FSL_Get_Data_reg[0]_0 [10]),
        .Q(Q[10]),
        .R(SR));
  FDRE \Read_AXI_Area.FSL_Get_Data_reg[22] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Read_AXI_Area.FSL_Get_Data_reg[0]_0 [9]),
        .Q(Q[9]),
        .R(SR));
  FDRE \Read_AXI_Area.FSL_Get_Data_reg[23] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Read_AXI_Area.FSL_Get_Data_reg[0]_0 [8]),
        .Q(Q[8]),
        .R(SR));
  FDRE \Read_AXI_Area.FSL_Get_Data_reg[24] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Read_AXI_Area.FSL_Get_Data_reg[0]_0 [7]),
        .Q(Q[7]),
        .R(SR));
  FDRE \Read_AXI_Area.FSL_Get_Data_reg[25] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Read_AXI_Area.FSL_Get_Data_reg[0]_0 [6]),
        .Q(Q[6]),
        .R(SR));
  FDRE \Read_AXI_Area.FSL_Get_Data_reg[26] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Read_AXI_Area.FSL_Get_Data_reg[0]_0 [5]),
        .Q(Q[5]),
        .R(SR));
  FDRE \Read_AXI_Area.FSL_Get_Data_reg[27] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Read_AXI_Area.FSL_Get_Data_reg[0]_0 [4]),
        .Q(Q[4]),
        .R(SR));
  FDRE \Read_AXI_Area.FSL_Get_Data_reg[28] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Read_AXI_Area.FSL_Get_Data_reg[0]_0 [3]),
        .Q(Q[3]),
        .R(SR));
  FDRE \Read_AXI_Area.FSL_Get_Data_reg[29] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Read_AXI_Area.FSL_Get_Data_reg[0]_0 [2]),
        .Q(Q[2]),
        .R(SR));
  FDRE \Read_AXI_Area.FSL_Get_Data_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Read_AXI_Area.FSL_Get_Data_reg[0]_0 [29]),
        .Q(Q[29]),
        .R(SR));
  FDRE \Read_AXI_Area.FSL_Get_Data_reg[30] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Read_AXI_Area.FSL_Get_Data_reg[0]_0 [1]),
        .Q(Q[1]),
        .R(SR));
  FDRE \Read_AXI_Area.FSL_Get_Data_reg[31] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Read_AXI_Area.FSL_Get_Data_reg[0]_0 [0]),
        .Q(Q[0]),
        .R(SR));
  FDRE \Read_AXI_Area.FSL_Get_Data_reg[3] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Read_AXI_Area.FSL_Get_Data_reg[0]_0 [28]),
        .Q(Q[28]),
        .R(SR));
  FDRE \Read_AXI_Area.FSL_Get_Data_reg[4] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Read_AXI_Area.FSL_Get_Data_reg[0]_0 [27]),
        .Q(Q[27]),
        .R(SR));
  FDRE \Read_AXI_Area.FSL_Get_Data_reg[5] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Read_AXI_Area.FSL_Get_Data_reg[0]_0 [26]),
        .Q(Q[26]),
        .R(SR));
  FDRE \Read_AXI_Area.FSL_Get_Data_reg[6] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Read_AXI_Area.FSL_Get_Data_reg[0]_0 [25]),
        .Q(Q[25]),
        .R(SR));
  FDRE \Read_AXI_Area.FSL_Get_Data_reg[7] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Read_AXI_Area.FSL_Get_Data_reg[0]_0 [24]),
        .Q(Q[24]),
        .R(SR));
  FDRE \Read_AXI_Area.FSL_Get_Data_reg[8] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Read_AXI_Area.FSL_Get_Data_reg[0]_0 [23]),
        .Q(Q[23]),
        .R(SR));
  FDRE \Read_AXI_Area.FSL_Get_Data_reg[9] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Read_AXI_Area.FSL_Get_Data_reg[0]_0 [22]),
        .Q(Q[22]),
        .R(SR));
  FDRE \Read_AXI_Area.S_AXIS_TREADY_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Read_AXI_Area.S_AXIS_TREADY_reg[0]_0 [1]),
        .Q(D[35]),
        .R(sync_reset));
  FDRE \Read_AXI_Area.S_AXIS_TREADY_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Read_AXI_Area.S_AXIS_TREADY_reg[0]_0 [0]),
        .Q(D[0]),
        .R(sync_reset));
  FDRE fsl_carry_hold_reg
       (.C(Clk),
        .CE(1'b1),
        .D(fsl_carry_hold_cmb),
        .Q(fsl_carry_hold),
        .R(sync_reset));
  FDRE fsl_carry_hold_value_reg
       (.C(Clk),
        .CE(1'b1),
        .D(fsl_carry_hold_value_cmb),
        .Q(fsl_carry_hold_value),
        .R(sync_reset));
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(1'b0),
        .O(fsl_carry_hold_cmb));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(1'b0),
        .O(fsl_carry_hold_value_cmb));
endmodule

module block_design_microblaze_0_0_Zero_Detect
   (reg_zero,
    reg_Test_Equal,
    S,
    reg_Test_Equal_N,
    \Using_FPGA.Native ,
    A,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1,
    lopt_2);
  output reg_zero;
  input reg_Test_Equal;
  input S;
  input reg_Test_Equal_N;
  input \Using_FPGA.Native ;
  input [14:0]A;
  input [8:0]\Using_FPGA.Native_0 ;
  output lopt;
  input lopt_1;
  input lopt_2;

  wire [14:0]A;
  wire S;
  wire \S0_inferred__0/i__n_0 ;
  wire \S0_inferred__1/i__n_0 ;
  wire \S0_inferred__2/i__n_0 ;
  wire \S0_inferred__3/i__n_0 ;
  wire \Using_FPGA.Native ;
  wire [8:0]\Using_FPGA.Native_0 ;
  wire \^lopt ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire reg_Test_Equal;
  wire reg_Test_Equal_N;
  wire reg_zero;
  wire zero_CI_1;
  wire zero_CI_2;
  wire zero_CI_3;
  wire zero_CI_4;
  wire zero_CI_5;
  wire zero_CI_6;

  assign lopt = lopt_5;
  assign lopt_6 = lopt_1;
  assign lopt_7 = lopt_2;
  block_design_microblaze_0_0_MB_MUXCY_161 Part_Of_Zero_Carry_Start
       (.lopt(\^lopt ),
        .lopt_1(reg_Test_Equal_N),
        .lopt_2(S),
        .lopt_3(\^lopt_1 ),
        .lopt_4(\S0_inferred__3/i__n_0 ),
        .lopt_5(\^lopt_2 ),
        .lopt_6(\S0_inferred__2/i__n_0 ),
        .reg_Test_Equal(reg_Test_Equal),
        .zero_CI_6(zero_CI_6));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \S0_inferred__0/i_ 
       (.I0(A[0]),
        .I1(A[5]),
        .I2(A[3]),
        .I3(A[4]),
        .I4(A[1]),
        .I5(A[2]),
        .O(\S0_inferred__0/i__n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \S0_inferred__1/i_ 
       (.I0(A[6]),
        .I1(A[11]),
        .I2(A[9]),
        .I3(A[10]),
        .I4(A[7]),
        .I5(A[8]),
        .O(\S0_inferred__1/i__n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \S0_inferred__2/i_ 
       (.I0(A[12]),
        .I1(\Using_FPGA.Native_0 [2]),
        .I2(\Using_FPGA.Native_0 [0]),
        .I3(\Using_FPGA.Native_0 [1]),
        .I4(A[13]),
        .I5(A[14]),
        .O(\S0_inferred__2/i__n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \S0_inferred__3/i_ 
       (.I0(\Using_FPGA.Native_0 [3]),
        .I1(\Using_FPGA.Native_0 [8]),
        .I2(\Using_FPGA.Native_0 [6]),
        .I3(\Using_FPGA.Native_0 [7]),
        .I4(\Using_FPGA.Native_0 [4]),
        .I5(\Using_FPGA.Native_0 [5]),
        .O(\S0_inferred__3/i__n_0 ));
  block_design_microblaze_0_0_MB_MUXCY_162 \Zero_Detecting[1].I_Part_Of_Zero_Detect 
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .lopt(lopt_4),
        .reg_Test_Equal_N(reg_Test_Equal_N),
        .reg_zero(reg_zero),
        .zero_CI_1(zero_CI_1));
  block_design_microblaze_0_0_MB_MUXCY_163 \Zero_Detecting[2].I_Part_Of_Zero_Detect 
       (.\Using_FPGA.Native_0 (\S0_inferred__0/i__n_0 ),
        .lopt(lopt_3),
        .reg_Test_Equal_N(reg_Test_Equal_N),
        .zero_CI_1(zero_CI_1),
        .zero_CI_2(zero_CI_2));
  block_design_microblaze_0_0_MB_MUXCY_164 \Zero_Detecting[3].I_Part_Of_Zero_Detect 
       (.\Using_FPGA.Native_0 (\S0_inferred__1/i__n_0 ),
        .lopt(lopt_3),
        .lopt_1(\S0_inferred__0/i__n_0 ),
        .lopt_2(lopt_4),
        .lopt_3(\Using_FPGA.Native ),
        .lopt_4(lopt_5),
        .lopt_5(lopt_6),
        .lopt_6(lopt_7),
        .reg_Test_Equal_N(reg_Test_Equal_N),
        .zero_CI_2(zero_CI_2),
        .zero_CI_3(zero_CI_3));
  block_design_microblaze_0_0_MB_MUXCY_165 \Zero_Detecting[4].I_Part_Of_Zero_Detect 
       (.\Using_FPGA.Native_0 (\S0_inferred__2/i__n_0 ),
        .lopt(\^lopt_2 ),
        .reg_Test_Equal_N(reg_Test_Equal_N),
        .zero_CI_3(zero_CI_3),
        .zero_CI_4(zero_CI_4));
  block_design_microblaze_0_0_MB_MUXCY_166 \Zero_Detecting[5].I_Part_Of_Zero_Detect 
       (.\Using_FPGA.Native_0 (\S0_inferred__3/i__n_0 ),
        .lopt(\^lopt_1 ),
        .reg_Test_Equal_N(reg_Test_Equal_N),
        .zero_CI_4(zero_CI_4),
        .zero_CI_5(zero_CI_5));
  block_design_microblaze_0_0_MB_MUXCY_167 \Zero_Detecting[6].I_Part_Of_Zero_Detect 
       (.S(S),
        .lopt(\^lopt ),
        .reg_Test_Equal_N(reg_Test_Equal_N),
        .zero_CI_5(zero_CI_5),
        .zero_CI_6(zero_CI_6));
endmodule

module block_design_microblaze_0_0_address_hit
   (\Serial_Dbg_Intf.control_reg_reg[0] ,
    \Serial_Dbg_Intf.control_reg_reg[0]_0 ,
    Dbg_TDI,
    PC_OF,
    Dbg_Clk,
    Q,
    \Area_Debug_Control.dbg_hit_i_1_reg[0] ,
    S,
    single_Step_N,
    Dbg_Reg_En);
  output \Serial_Dbg_Intf.control_reg_reg[0] ;
  output [0:0]\Serial_Dbg_Intf.control_reg_reg[0]_0 ;
  input Dbg_TDI;
  input [0:31]PC_OF;
  input Dbg_Clk;
  input [0:0]Q;
  input \Area_Debug_Control.dbg_hit_i_1_reg[0] ;
  input S;
  input single_Step_N;
  input [0:7]Dbg_Reg_En;

  wire \Area_Debug_Control.dbg_hit_i_1_reg[0] ;
  wire Dbg_Clk;
  wire [0:7]Dbg_Reg_En;
  wire Dbg_TDI;
  wire [0:31]PC_OF;
  wire [0:0]Q;
  wire S;
  wire SRL16_MC15_1;
  wire SRL16_MC15_2;
  wire SRL16_MC15_3;
  wire SRL16_MC15_4;
  wire SRL16_MC15_5;
  wire SRL16_MC15_6;
  wire SRL16_MC15_7;
  wire SRL16_Sel_0;
  wire SRL16_Sel_1;
  wire SRL16_Sel_2;
  wire SRL16_Sel_3;
  wire SRL16_Sel_4;
  wire SRL16_Sel_5;
  wire SRL16_Sel_6;
  wire SRL16_Sel_7;
  wire \Serial_Dbg_Intf.control_reg_reg[0] ;
  wire [0:0]\Serial_Dbg_Intf.control_reg_reg[0]_0 ;
  wire carry_0;
  wire carry_1;
  wire carry_2;
  wire carry_3;
  wire carry_4;
  wire carry_5;
  wire carry_6;
  wire carry_7;
  wire hit_carry;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_12;
  wire lopt_13;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire single_Step_N;
  wire which_pc__0;

  block_design_microblaze_0_0_MB_MUXCY \Compare[0].MUXCY_I 
       (.Q(Q),
        .SRL16_Sel_7(SRL16_Sel_7),
        .carry_7(carry_7),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(SRL16_Sel_6),
        .lopt_3(lopt_2),
        .lopt_4(lopt_3),
        .lopt_5(SRL16_Sel_5),
        .lopt_6(lopt_4),
        .lopt_7(lopt_5),
        .lopt_8(SRL16_Sel_4));
  block_design_microblaze_0_0_MB_SRLC16E \Compare[0].SRLC16E_I 
       (.Dbg_Clk(Dbg_Clk),
        .Dbg_Reg_En(Dbg_Reg_En),
        .PC_OF({PC_OF[28],PC_OF[29],PC_OF[30],PC_OF[31]}),
        .SRL16_MC15_7(SRL16_MC15_7),
        .SRL16_Sel_7(SRL16_Sel_7),
        .which_pc__0(which_pc__0));
  block_design_microblaze_0_0_MB_MUXCY_32 \Compare[1].MUXCY_I 
       (.SRL16_Sel_6(SRL16_Sel_6),
        .carry_6(carry_6),
        .carry_7(carry_7),
        .lopt(lopt),
        .lopt_1(lopt_1));
  block_design_microblaze_0_0_MB_SRLC16E_33 \Compare[1].SRLC16E_I 
       (.Dbg_Clk(Dbg_Clk),
        .PC_OF({PC_OF[24],PC_OF[25],PC_OF[26],PC_OF[27]}),
        .SRL16_MC15_6(SRL16_MC15_6),
        .SRL16_MC15_7(SRL16_MC15_7),
        .SRL16_Sel_6(SRL16_Sel_6),
        .which_pc__0(which_pc__0));
  block_design_microblaze_0_0_MB_MUXCY_34 \Compare[2].MUXCY_I 
       (.SRL16_Sel_5(SRL16_Sel_5),
        .carry_5(carry_5),
        .carry_6(carry_6),
        .lopt(lopt_2),
        .lopt_1(lopt_3));
  block_design_microblaze_0_0_MB_SRLC16E_35 \Compare[2].SRLC16E_I 
       (.Dbg_Clk(Dbg_Clk),
        .PC_OF({PC_OF[20],PC_OF[21],PC_OF[22],PC_OF[23]}),
        .SRL16_MC15_5(SRL16_MC15_5),
        .SRL16_MC15_6(SRL16_MC15_6),
        .SRL16_Sel_5(SRL16_Sel_5),
        .which_pc__0(which_pc__0));
  block_design_microblaze_0_0_MB_MUXCY_36 \Compare[3].MUXCY_I 
       (.SRL16_Sel_4(SRL16_Sel_4),
        .carry_4(carry_4),
        .carry_5(carry_5),
        .lopt(lopt_4),
        .lopt_1(lopt_5));
  block_design_microblaze_0_0_MB_SRLC16E_37 \Compare[3].SRLC16E_I 
       (.Dbg_Clk(Dbg_Clk),
        .PC_OF({PC_OF[16],PC_OF[17],PC_OF[18],PC_OF[19]}),
        .SRL16_MC15_4(SRL16_MC15_4),
        .SRL16_MC15_5(SRL16_MC15_5),
        .SRL16_Sel_4(SRL16_Sel_4),
        .which_pc__0(which_pc__0));
  block_design_microblaze_0_0_MB_MUXCY_38 \Compare[4].MUXCY_I 
       (.SRL16_Sel_3(SRL16_Sel_3),
        .carry_3(carry_3),
        .carry_4(carry_4),
        .lopt(lopt_6),
        .lopt_1(lopt_7),
        .lopt_2(SRL16_Sel_2),
        .lopt_3(lopt_8),
        .lopt_4(lopt_9),
        .lopt_5(SRL16_Sel_1),
        .lopt_6(lopt_10),
        .lopt_7(lopt_11),
        .lopt_8(SRL16_Sel_0));
  block_design_microblaze_0_0_MB_SRLC16E_39 \Compare[4].SRLC16E_I 
       (.Dbg_Clk(Dbg_Clk),
        .PC_OF({PC_OF[12],PC_OF[13],PC_OF[14],PC_OF[15]}),
        .SRL16_MC15_3(SRL16_MC15_3),
        .SRL16_MC15_4(SRL16_MC15_4),
        .SRL16_Sel_3(SRL16_Sel_3),
        .which_pc__0(which_pc__0));
  block_design_microblaze_0_0_MB_MUXCY_40 \Compare[5].MUXCY_I 
       (.SRL16_Sel_2(SRL16_Sel_2),
        .carry_2(carry_2),
        .carry_3(carry_3),
        .lopt(lopt_6),
        .lopt_1(lopt_7));
  block_design_microblaze_0_0_MB_SRLC16E_41 \Compare[5].SRLC16E_I 
       (.Dbg_Clk(Dbg_Clk),
        .PC_OF({PC_OF[8],PC_OF[9],PC_OF[10],PC_OF[11]}),
        .SRL16_MC15_2(SRL16_MC15_2),
        .SRL16_MC15_3(SRL16_MC15_3),
        .SRL16_Sel_2(SRL16_Sel_2),
        .which_pc__0(which_pc__0));
  block_design_microblaze_0_0_MB_MUXCY_42 \Compare[6].MUXCY_I 
       (.SRL16_Sel_1(SRL16_Sel_1),
        .carry_1(carry_1),
        .carry_2(carry_2),
        .lopt(lopt_8),
        .lopt_1(lopt_9));
  block_design_microblaze_0_0_MB_SRLC16E_43 \Compare[6].SRLC16E_I 
       (.Dbg_Clk(Dbg_Clk),
        .PC_OF({PC_OF[4],PC_OF[5],PC_OF[6],PC_OF[7]}),
        .SRL16_MC15_1(SRL16_MC15_1),
        .SRL16_MC15_2(SRL16_MC15_2),
        .SRL16_Sel_1(SRL16_Sel_1),
        .which_pc__0(which_pc__0));
  block_design_microblaze_0_0_MB_MUXCY_44 \Compare[7].MUXCY_I 
       (.SRL16_Sel_0(SRL16_Sel_0),
        .carry_0(carry_0),
        .carry_1(carry_1),
        .lopt(lopt_10),
        .lopt_1(lopt_11));
  block_design_microblaze_0_0_MB_SRLC16E_45 \Compare[7].SRLC16E_I 
       (.Dbg_Clk(Dbg_Clk),
        .Dbg_TDI(Dbg_TDI),
        .PC_OF({PC_OF[0],PC_OF[1],PC_OF[2],PC_OF[3]}),
        .SRL16_MC15_1(SRL16_MC15_1),
        .SRL16_Sel_0(SRL16_Sel_0),
        .which_pc__0(which_pc__0));
  block_design_microblaze_0_0_MB_AND2B1L \Has_Trace.AND2B1L_Trace 
       (.S(S),
        .\Serial_Dbg_Intf.control_reg_reg[0] (\Serial_Dbg_Intf.control_reg_reg[0]_0 ),
        .carry_0(carry_0));
  block_design_microblaze_0_0_MB_MUXCY_46 \Has_Trace.MUXCY_Trace 
       (.\Area_Debug_Control.dbg_hit_i_1_reg[0] (\Area_Debug_Control.dbg_hit_i_1_reg[0] ),
        .\Serial_Dbg_Intf.control_reg_reg[0] (\Serial_Dbg_Intf.control_reg_reg[0] ),
        .hit_carry(hit_carry),
        .lopt(lopt_12),
        .lopt_1(lopt_13));
  block_design_microblaze_0_0_MB_MUXCY_47 \The_First_BreakPoints.MUXCY_Post 
       (.carry_0(carry_0),
        .hit_carry(hit_carry),
        .lopt(lopt_12),
        .lopt_1(lopt_13),
        .lopt_2(\Area_Debug_Control.dbg_hit_i_1_reg[0] ),
        .single_Step_N(single_Step_N));
endmodule

module block_design_microblaze_0_0_barrel_shift
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    Other_Result,
    Op1_Shift,
    \C_reg[30]_0 ,
    \C_reg[30]_1 ,
    \C_reg[30]_2 ,
    \C_reg[30]_3 ,
    B,
    \C_reg[30]_4 ,
    \C_reg[30]_5 ,
    \C_reg[30]_6 ,
    \C_reg[30]_7 ,
    EX_Op1,
    \C[14]_i_2 ,
    \C[14]_i_2_0 ,
    \C[14]_i_2_1 ,
    \C[13]_i_2 ,
    \C[13]_i_2_0 ,
    \C[13]_i_2_1 ,
    \C[13]_i_2_2 ,
    \C[12]_i_2 ,
    \C[12]_i_2_0 ,
    \C[12]_i_2_1 ,
    \C[12]_i_2_2 ,
    \C[13]_i_2_3 ,
    \C[13]_i_2_4 ,
    \C[13]_i_2_5 ,
    \C[13]_i_2_6 ,
    \C[7]_i_2 ,
    \C[7]_i_2_0 ,
    \C[7]_i_2_1 ,
    \C[7]_i_2_2 ,
    \C[8]_i_2 ,
    \C[8]_i_2_0 ,
    \C[8]_i_2_1 ,
    Shifted,
    in0,
    SR,
    void_bit,
    Clk,
    Data_Write,
    \C_reg[5]_0 ,
    \C_reg[19]_0 ,
    D,
    \Using_BitField.mem_mask0_reg[0]_0 ,
    \C_reg[23]_0 ,
    \Using_FPGA.Native_5 );
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  output \Using_FPGA.Native_3 ;
  output \Using_FPGA.Native_4 ;
  output [0:31]Other_Result;
  input Op1_Shift;
  input \C_reg[30]_0 ;
  input \C_reg[30]_1 ;
  input \C_reg[30]_2 ;
  input \C_reg[30]_3 ;
  input [3:0]B;
  input \C_reg[30]_4 ;
  input \C_reg[30]_5 ;
  input \C_reg[30]_6 ;
  input \C_reg[30]_7 ;
  input EX_Op1;
  input \C[14]_i_2 ;
  input \C[14]_i_2_0 ;
  input \C[14]_i_2_1 ;
  input \C[13]_i_2 ;
  input \C[13]_i_2_0 ;
  input \C[13]_i_2_1 ;
  input \C[13]_i_2_2 ;
  input \C[12]_i_2 ;
  input \C[12]_i_2_0 ;
  input \C[12]_i_2_1 ;
  input \C[12]_i_2_2 ;
  input \C[13]_i_2_3 ;
  input \C[13]_i_2_4 ;
  input \C[13]_i_2_5 ;
  input \C[13]_i_2_6 ;
  input \C[7]_i_2 ;
  input \C[7]_i_2_0 ;
  input \C[7]_i_2_1 ;
  input \C[7]_i_2_2 ;
  input \C[8]_i_2 ;
  input \C[8]_i_2_0 ;
  input \C[8]_i_2_1 ;
  input Shifted;
  input in0;
  input [0:0]SR;
  input void_bit;
  input Clk;
  input [0:31]Data_Write;
  input \C_reg[5]_0 ;
  input \C_reg[19]_0 ;
  input [30:0]D;
  input [31:0]\Using_BitField.mem_mask0_reg[0]_0 ;
  input [5:0]\C_reg[23]_0 ;
  input [31:0]\Using_FPGA.Native_5 ;

  wire [3:0]B;
  wire \BS_Rev_Loop[0].I_BS_REV_A_LUT6_n_1 ;
  wire \BS_Rev_Loop[0].I_BS_REV_A_LUT6_n_2 ;
  wire \BS_Rev_Loop[0].I_BS_REV_A_LUT6_n_3 ;
  wire \BS_Rev_Loop[10].I_BS_REV_A_LUT6_n_0 ;
  wire \BS_Rev_Loop[10].I_BS_REV_A_LUT6_n_1 ;
  wire \BS_Rev_Loop[10].I_BS_REV_A_LUT6_n_2 ;
  wire \BS_Rev_Loop[10].I_BS_REV_A_LUT6_n_3 ;
  wire \BS_Rev_Loop[10].I_BS_REV_A_LUT6_n_4 ;
  wire \BS_Rev_Loop[11].I_BS_REV_A_LUT6_n_0 ;
  wire \BS_Rev_Loop[11].I_BS_REV_A_LUT6_n_1 ;
  wire \BS_Rev_Loop[11].I_BS_REV_A_LUT6_n_2 ;
  wire \BS_Rev_Loop[12].I_BS_REV_A_LUT6_n_0 ;
  wire \BS_Rev_Loop[12].I_BS_REV_A_LUT6_n_1 ;
  wire \BS_Rev_Loop[12].I_BS_REV_A_LUT6_n_2 ;
  wire \BS_Rev_Loop[12].I_BS_REV_A_LUT6_n_3 ;
  wire \BS_Rev_Loop[12].I_BS_REV_A_LUT6_n_4 ;
  wire \BS_Rev_Loop[12].I_BS_REV_A_LUT6_n_5 ;
  wire \BS_Rev_Loop[12].I_BS_REV_A_LUT6_n_6 ;
  wire \BS_Rev_Loop[12].I_BS_REV_A_LUT6_n_7 ;
  wire \BS_Rev_Loop[12].I_BS_REV_A_LUT6_n_9 ;
  wire \BS_Rev_Loop[13].I_BS_REV_A_LUT6_n_0 ;
  wire \BS_Rev_Loop[13].I_BS_REV_A_LUT6_n_1 ;
  wire \BS_Rev_Loop[13].I_BS_REV_A_LUT6_n_3 ;
  wire \BS_Rev_Loop[13].I_BS_REV_A_LUT6_n_4 ;
  wire \BS_Rev_Loop[14].I_BS_REV_A_LUT6_n_0 ;
  wire \BS_Rev_Loop[14].I_BS_REV_A_LUT6_n_2 ;
  wire \BS_Rev_Loop[14].I_BS_REV_A_LUT6_n_3 ;
  wire \BS_Rev_Loop[15].I_BS_REV_A_LUT6_n_0 ;
  wire \BS_Rev_Loop[15].I_BS_REV_A_LUT6_n_2 ;
  wire \BS_Rev_Loop[15].I_BS_REV_A_LUT6_n_3 ;
  wire \BS_Rev_Loop[15].I_BS_REV_A_LUT6_n_4 ;
  wire \BS_Rev_Loop[15].I_BS_REV_A_LUT6_n_5 ;
  wire \BS_Rev_Loop[15].I_BS_REV_A_LUT6_n_6 ;
  wire \BS_Rev_Loop[15].I_BS_REV_A_LUT6_n_8 ;
  wire \BS_Rev_Loop[15].I_BS_REV_A_LUT6_n_9 ;
  wire \BS_Rev_Loop[1].I_BS_REV_A_LUT6_n_0 ;
  wire \BS_Rev_Loop[1].I_BS_REV_A_LUT6_n_1 ;
  wire \BS_Rev_Loop[1].I_BS_REV_A_LUT6_n_2 ;
  wire \BS_Rev_Loop[1].I_BS_REV_A_LUT6_n_3 ;
  wire \BS_Rev_Loop[1].I_BS_REV_A_LUT6_n_4 ;
  wire \BS_Rev_Loop[1].I_BS_REV_A_LUT6_n_5 ;
  wire \BS_Rev_Loop[1].I_BS_REV_A_LUT6_n_6 ;
  wire \BS_Rev_Loop[2].I_BS_REV_A_LUT6_n_0 ;
  wire \BS_Rev_Loop[2].I_BS_REV_A_LUT6_n_1 ;
  wire \BS_Rev_Loop[2].I_BS_REV_A_LUT6_n_2 ;
  wire \BS_Rev_Loop[2].I_BS_REV_A_LUT6_n_3 ;
  wire \BS_Rev_Loop[3].I_BS_REV_A_LUT6_n_0 ;
  wire \BS_Rev_Loop[3].I_BS_REV_A_LUT6_n_1 ;
  wire \BS_Rev_Loop[3].I_BS_REV_A_LUT6_n_2 ;
  wire \BS_Rev_Loop[3].I_BS_REV_A_LUT6_n_3 ;
  wire \BS_Rev_Loop[4].I_BS_REV_A_LUT6_n_0 ;
  wire \BS_Rev_Loop[4].I_BS_REV_A_LUT6_n_1 ;
  wire \BS_Rev_Loop[4].I_BS_REV_A_LUT6_n_2 ;
  wire \BS_Rev_Loop[4].I_BS_REV_A_LUT6_n_3 ;
  wire \BS_Rev_Loop[4].I_BS_REV_A_LUT6_n_4 ;
  wire \BS_Rev_Loop[4].I_BS_REV_A_LUT6_n_5 ;
  wire \BS_Rev_Loop[5].I_BS_REV_A_LUT6_n_0 ;
  wire \BS_Rev_Loop[5].I_BS_REV_A_LUT6_n_1 ;
  wire \BS_Rev_Loop[5].I_BS_REV_A_LUT6_n_2 ;
  wire \BS_Rev_Loop[6].I_BS_REV_A_LUT6_n_0 ;
  wire \BS_Rev_Loop[6].I_BS_REV_A_LUT6_n_1 ;
  wire \BS_Rev_Loop[6].I_BS_REV_A_LUT6_n_2 ;
  wire \BS_Rev_Loop[6].I_BS_REV_A_LUT6_n_3 ;
  wire \BS_Rev_Loop[6].I_BS_REV_A_LUT6_n_4 ;
  wire \BS_Rev_Loop[7].I_BS_REV_A_LUT6_n_0 ;
  wire \BS_Rev_Loop[7].I_BS_REV_A_LUT6_n_1 ;
  wire \BS_Rev_Loop[7].I_BS_REV_A_LUT6_n_2 ;
  wire \BS_Rev_Loop[7].I_BS_REV_A_LUT6_n_3 ;
  wire \BS_Rev_Loop[7].I_BS_REV_A_LUT6_n_4 ;
  wire \BS_Rev_Loop[8].I_BS_REV_A_LUT6_n_0 ;
  wire \BS_Rev_Loop[8].I_BS_REV_A_LUT6_n_1 ;
  wire \BS_Rev_Loop[8].I_BS_REV_A_LUT6_n_2 ;
  wire \BS_Rev_Loop[8].I_BS_REV_A_LUT6_n_3 ;
  wire \BS_Rev_Loop[8].I_BS_REV_A_LUT6_n_4 ;
  wire \BS_Rev_Loop[9].I_BS_REV_A_LUT6_n_0 ;
  wire \BS_Rev_Loop[9].I_BS_REV_A_LUT6_n_1 ;
  wire \BS_Rev_Loop[9].I_BS_REV_A_LUT6_n_2 ;
  wire \BS_Rev_Loop[9].I_BS_REV_A_LUT6_n_3 ;
  wire \BS_Rev_Loop[9].I_BS_REV_A_LUT6_n_5 ;
  wire \C[12]_i_2 ;
  wire \C[12]_i_2_0 ;
  wire \C[12]_i_2_1 ;
  wire \C[12]_i_2_2 ;
  wire \C[13]_i_2 ;
  wire \C[13]_i_2_0 ;
  wire \C[13]_i_2_1 ;
  wire \C[13]_i_2_2 ;
  wire \C[13]_i_2_3 ;
  wire \C[13]_i_2_4 ;
  wire \C[13]_i_2_5 ;
  wire \C[13]_i_2_6 ;
  wire \C[14]_i_2 ;
  wire \C[14]_i_2_0 ;
  wire \C[14]_i_2_1 ;
  wire \C[7]_i_2 ;
  wire \C[7]_i_2_0 ;
  wire \C[7]_i_2_1 ;
  wire \C[7]_i_2_2 ;
  wire \C[8]_i_2 ;
  wire \C[8]_i_2_0 ;
  wire \C[8]_i_2_1 ;
  wire \C_reg[19]_0 ;
  wire [5:0]\C_reg[23]_0 ;
  wire \C_reg[30]_0 ;
  wire \C_reg[30]_1 ;
  wire \C_reg[30]_2 ;
  wire \C_reg[30]_3 ;
  wire \C_reg[30]_4 ;
  wire \C_reg[30]_5 ;
  wire \C_reg[30]_6 ;
  wire \C_reg[30]_7 ;
  wire \C_reg[5]_0 ;
  wire \C_reg_n_0_[10] ;
  wire \C_reg_n_0_[11] ;
  wire \C_reg_n_0_[12] ;
  wire \C_reg_n_0_[13] ;
  wire \C_reg_n_0_[14] ;
  wire \C_reg_n_0_[15] ;
  wire \C_reg_n_0_[17] ;
  wire \C_reg_n_0_[18] ;
  wire \C_reg_n_0_[19] ;
  wire \C_reg_n_0_[1] ;
  wire \C_reg_n_0_[20] ;
  wire \C_reg_n_0_[21] ;
  wire \C_reg_n_0_[22] ;
  wire \C_reg_n_0_[23] ;
  wire \C_reg_n_0_[24] ;
  wire \C_reg_n_0_[25] ;
  wire \C_reg_n_0_[26] ;
  wire \C_reg_n_0_[27] ;
  wire \C_reg_n_0_[28] ;
  wire \C_reg_n_0_[29] ;
  wire \C_reg_n_0_[2] ;
  wire \C_reg_n_0_[30] ;
  wire \C_reg_n_0_[31] ;
  wire \C_reg_n_0_[3] ;
  wire \C_reg_n_0_[4] ;
  wire \C_reg_n_0_[5] ;
  wire \C_reg_n_0_[6] ;
  wire \C_reg_n_0_[7] ;
  wire \C_reg_n_0_[8] ;
  wire \C_reg_n_0_[9] ;
  wire Clk;
  wire [30:0]D;
  wire [0:31]Data_Write;
  wire EX_Op1;
  wire I0;
  wire I1;
  wire I3;
  wire Last_Mux_1_0;
  wire Last_Mux_1_1;
  wire Last_Mux_1_10;
  wire Last_Mux_1_11;
  wire Last_Mux_1_12;
  wire Last_Mux_1_13;
  wire Last_Mux_1_14;
  wire Last_Mux_1_15;
  wire Last_Mux_1_16;
  wire Last_Mux_1_17;
  wire Last_Mux_1_18;
  wire Last_Mux_1_19;
  wire Last_Mux_1_2;
  wire Last_Mux_1_20;
  wire Last_Mux_1_21;
  wire Last_Mux_1_22;
  wire Last_Mux_1_23;
  wire Last_Mux_1_24;
  wire Last_Mux_1_25;
  wire Last_Mux_1_26;
  wire Last_Mux_1_27;
  wire Last_Mux_1_28;
  wire Last_Mux_1_29;
  wire Last_Mux_1_3;
  wire Last_Mux_1_30;
  wire Last_Mux_1_31;
  wire Last_Mux_1_4;
  wire Last_Mux_1_5;
  wire Last_Mux_1_6;
  wire Last_Mux_1_7;
  wire Last_Mux_1_8;
  wire Last_Mux_1_9;
  wire O6;
  wire Op1_Shift;
  wire [0:31]Other_Result;
  wire [0:0]SR;
  wire Shifted;
  wire \Using_BitField.Gen_Bits[0].mem_Rd_reg_n_0_[0] ;
  wire \Using_BitField.Gen_Bits[31].mem_Rd_reg_n_0_[31] ;
  wire [31:0]\Using_BitField.mem_mask0_reg[0]_0 ;
  wire \Using_BitField.mem_mask0_reg_n_0_[31] ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire [31:0]\Using_FPGA.Native_5 ;
  (* DIRECT_RESET *) wire mask_reset;
  wire p_0_in;
  wire p_0_in10_in;
  wire p_0_in13_in;
  wire p_0_in16_in;
  wire p_0_in19_in;
  wire p_0_in1_in;
  wire p_0_in22_in;
  wire p_0_in25_in;
  wire p_0_in28_in;
  wire p_0_in31_in;
  wire p_0_in34_in;
  wire p_0_in37_in;
  wire p_0_in40_in;
  wire p_0_in43_in;
  wire p_0_in46_in;
  wire p_0_in49_in;
  wire p_0_in4_in;
  wire p_0_in52_in;
  wire p_0_in55_in;
  wire p_0_in58_in;
  wire p_0_in61_in;
  wire p_0_in64_in;
  wire p_0_in67_in;
  wire p_0_in7_in;
  wire p_10_in;
  wire p_11_in;
  wire p_12_in;
  wire p_14_in;
  wire p_15_in;
  wire p_16_in;
  wire p_18_in;
  wire p_19_in;
  wire p_1_in;
  wire p_1_in11_in;
  wire p_1_in14_in;
  wire p_1_in17_in;
  wire p_1_in20_in;
  wire p_1_in23_in;
  wire p_1_in26_in;
  wire p_1_in29_in;
  wire p_1_in2_in;
  wire p_1_in32_in;
  wire p_1_in35_in;
  wire p_1_in38_in;
  wire p_1_in41_in;
  wire p_1_in44_in;
  wire p_1_in47_in;
  wire p_1_in50_in;
  wire p_1_in53_in;
  wire p_1_in56_in;
  wire p_1_in59_in;
  wire p_1_in5_in;
  wire p_1_in62_in;
  wire p_1_in65_in;
  wire p_1_in68_in;
  wire p_1_in8_in;
  wire p_20_in;
  wire p_22_in;
  wire p_23_in;
  wire p_24_in;
  wire p_26_in;
  wire p_27_in;
  wire p_28_in;
  wire p_2_in102_in;
  wire p_2_in109_in;
  wire p_2_in116_in;
  wire p_2_in11_in;
  wire p_2_in123_in;
  wire p_2_in130_in;
  wire p_2_in137_in;
  wire p_2_in144_in;
  wire p_2_in152_in;
  wire p_2_in17_in;
  wire p_2_in23_in;
  wire p_2_in29_in;
  wire p_2_in35_in;
  wire p_2_in41_in;
  wire p_2_in47_in;
  wire p_2_in53_in;
  wire p_2_in59_in;
  wire p_2_in5_in;
  wire p_2_in65_in;
  wire p_2_in71_in;
  wire p_2_in77_in;
  wire p_2_in83_in;
  wire p_2_in89_in;
  wire p_2_in95_in;
  wire p_3_in;
  wire p_4_in;
  wire p_6_in;
  wire p_7_in;
  wire p_8_in;
  wire void_bit;

  assign mask_reset = in0;
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_168 \BS_Rev_Loop[0].I_BS_REV_A_LUT6 
       (.B(B[2:0]),
        .\C[2]_i_5 (\C_reg[30]_0 ),
        .\C[2]_i_5_0 (\C_reg[30]_1 ),
        .\C[2]_i_5_1 (\C_reg[30]_2 ),
        .\C[2]_i_5_2 (\C_reg[30]_3 ),
        .\C_reg[0] (\C_reg[5]_0 ),
        .\C_reg[0]_0 (\BS_Rev_Loop[4].I_BS_REV_A_LUT6_n_5 ),
        .\C_reg[0]_1 (\BS_Rev_Loop[8].I_BS_REV_A_LUT6_n_4 ),
        .\C_reg[0]_2 (\BS_Rev_Loop[1].I_BS_REV_A_LUT6_n_0 ),
        .\C_reg[0]_3 (\BS_Rev_Loop[2].I_BS_REV_A_LUT6_n_0 ),
        .\C_reg[0]_4 (\BS_Rev_Loop[3].I_BS_REV_A_LUT6_n_0 ),
        .\C_reg[12] (\BS_Rev_Loop[4].I_BS_REV_A_LUT6_n_4 ),
        .\C_reg[12]_0 (\BS_Rev_Loop[13].I_BS_REV_A_LUT6_n_4 ),
        .\C_reg[12]_1 (\BS_Rev_Loop[10].I_BS_REV_A_LUT6_n_2 ),
        .\C_reg[12]_2 (\BS_Rev_Loop[1].I_BS_REV_A_LUT6_n_1 ),
        .\C_reg[12]_3 (\BS_Rev_Loop[2].I_BS_REV_A_LUT6_n_1 ),
        .\C_reg[12]_4 (\BS_Rev_Loop[3].I_BS_REV_A_LUT6_n_1 ),
        .D({\BS_Rev_Loop[0].I_BS_REV_A_LUT6_n_1 ,\BS_Rev_Loop[0].I_BS_REV_A_LUT6_n_2 }),
        .O6(O6),
        .Op1_Shift(Op1_Shift),
        .\Using_FPGA.Native_0 (\BS_Rev_Loop[0].I_BS_REV_A_LUT6_n_3 ));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_169 \BS_Rev_Loop[0].I_BS_REV_LUT6 
       (.Last_Mux_1_0(Last_Mux_1_0),
        .Last_Mux_1_15(Last_Mux_1_15),
        .Last_Mux_1_16(Last_Mux_1_16),
        .Last_Mux_1_31(Last_Mux_1_31),
        .Other_Result({Other_Result[0],Other_Result[16]}),
        .Q({p_27_in,p_0_in40_in}),
        .\Using_FPGA.Native_0 ({p_28_in,p_1_in41_in}),
        .\Using_FPGA.Native_1 ({\Using_FPGA.Native_5 [31],\Using_FPGA.Native_5 [15]}),
        .\Using_FPGA.Native_2 (\Using_BitField.Gen_Bits[0].mem_Rd_reg_n_0_[0] ),
        .\Using_FPGA.Native_i_1__96_0 (\C_reg[30]_3 ),
        .p_2_in89_in(p_2_in89_in));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_170 \BS_Rev_Loop[0].I_BS_SHIFT16_LUT6 
       (.B(B[3]),
        .I3(I3),
        .Last_Mux_1_15(Last_Mux_1_15),
        .Last_Mux_1_31(Last_Mux_1_31),
        .Q({I0,I1}));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_171 \BS_Rev_Loop[10].I_BS_REV_A_LUT6 
       (.B(B[2:0]),
        .\C[13]_i_2 (\C[13]_i_2_6 ),
        .\C[13]_i_2_0 (\C[13]_i_2_5 ),
        .\C[13]_i_2_1 (\C[13]_i_2_4 ),
        .\C[13]_i_2_2 (\C[13]_i_2_3 ),
        .\C[13]_i_2_3 (\C_reg[30]_3 ),
        .\C_reg[20] (\BS_Rev_Loop[11].I_BS_REV_A_LUT6_n_1 ),
        .\C_reg[20]_0 (\BS_Rev_Loop[8].I_BS_REV_A_LUT6_n_1 ),
        .\C_reg[20]_1 (\BS_Rev_Loop[9].I_BS_REV_A_LUT6_n_1 ),
        .\C_reg[6] (\C_reg[5]_0 ),
        .\C_reg[6]_0 (\BS_Rev_Loop[14].I_BS_REV_A_LUT6_n_3 ),
        .\C_reg[6]_1 (\BS_Rev_Loop[6].I_BS_REV_A_LUT6_n_3 ),
        .\C_reg[6]_2 (\BS_Rev_Loop[2].I_BS_REV_A_LUT6_n_3 ),
        .\C_reg[6]_3 (\BS_Rev_Loop[11].I_BS_REV_A_LUT6_n_0 ),
        .\C_reg[6]_4 (\BS_Rev_Loop[12].I_BS_REV_A_LUT6_n_0 ),
        .\C_reg[6]_5 (\BS_Rev_Loop[13].I_BS_REV_A_LUT6_n_0 ),
        .D(\BS_Rev_Loop[10].I_BS_REV_A_LUT6_n_3 ),
        .\Using_FPGA.Native_0 (\BS_Rev_Loop[10].I_BS_REV_A_LUT6_n_0 ),
        .\Using_FPGA.Native_1 (\BS_Rev_Loop[10].I_BS_REV_A_LUT6_n_1 ),
        .\Using_FPGA.Native_2 (\BS_Rev_Loop[10].I_BS_REV_A_LUT6_n_2 ),
        .\Using_FPGA.Native_3 (\BS_Rev_Loop[10].I_BS_REV_A_LUT6_n_4 ));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_172 \BS_Rev_Loop[10].I_BS_REV_LUT6 
       (.Last_Mux_1_10(Last_Mux_1_10),
        .Last_Mux_1_21(Last_Mux_1_21),
        .Last_Mux_1_26(Last_Mux_1_26),
        .Last_Mux_1_5(Last_Mux_1_5),
        .Other_Result({Other_Result[10],Other_Result[26]}),
        .Q({p_0_in58_in,p_0_in10_in}),
        .\Using_FPGA.Native_0 ({p_1_in59_in,p_1_in11_in}),
        .\Using_FPGA.Native_1 ({\Using_FPGA.Native_5 [21],\Using_FPGA.Native_5 [5]}),
        .\Using_FPGA.Native_i_1__86_0 (\C_reg[30]_3 ),
        .p_2_in130_in(p_2_in130_in),
        .p_2_in29_in(p_2_in29_in));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_173 \BS_Rev_Loop[10].I_BS_SHIFT16_LUT6 
       (.B(B[3]),
        .I3(I3),
        .Last_Mux_1_21(Last_Mux_1_21),
        .Last_Mux_1_5(Last_Mux_1_5),
        .Q({\C_reg_n_0_[10] ,\C_reg_n_0_[26] }));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_174 \BS_Rev_Loop[11].I_BS_REV_A_LUT6 
       (.B(B[0]),
        .\C[12]_i_2 (\C[12]_i_2_2 ),
        .\C[12]_i_2_0 (\C[12]_i_2_1 ),
        .\C[12]_i_2_1 (\C[12]_i_2_0 ),
        .\C[12]_i_2_2 (\C[12]_i_2 ),
        .\C[12]_i_2_3 (\C_reg[30]_3 ),
        .\C_reg[25] (\BS_Rev_Loop[12].I_BS_REV_A_LUT6_n_1 ),
        .\C_reg[25]_0 (\BS_Rev_Loop[9].I_BS_REV_A_LUT6_n_1 ),
        .\C_reg[25]_1 (\C_reg[5]_0 ),
        .\C_reg[25]_2 (\BS_Rev_Loop[10].I_BS_REV_A_LUT6_n_1 ),
        .\Using_FPGA.Native_0 (\BS_Rev_Loop[11].I_BS_REV_A_LUT6_n_0 ),
        .\Using_FPGA.Native_1 (\BS_Rev_Loop[11].I_BS_REV_A_LUT6_n_1 ),
        .\Using_FPGA.Native_2 (\BS_Rev_Loop[11].I_BS_REV_A_LUT6_n_2 ));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_175 \BS_Rev_Loop[11].I_BS_REV_LUT6 
       (.Last_Mux_1_11(Last_Mux_1_11),
        .Last_Mux_1_20(Last_Mux_1_20),
        .Last_Mux_1_27(Last_Mux_1_27),
        .Last_Mux_1_4(Last_Mux_1_4),
        .Other_Result({Other_Result[11],Other_Result[27]}),
        .Q({p_0_in55_in,p_0_in7_in}),
        .\Using_FPGA.Native_0 ({p_1_in56_in,p_1_in8_in}),
        .\Using_FPGA.Native_1 ({\Using_FPGA.Native_5 [20],\Using_FPGA.Native_5 [4]}),
        .\Using_FPGA.Native_i_1__85_0 (\C_reg[30]_3 ),
        .p_2_in123_in(p_2_in123_in),
        .p_2_in23_in(p_2_in23_in));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_176 \BS_Rev_Loop[11].I_BS_SHIFT16_LUT6 
       (.B(B[3]),
        .I3(I3),
        .Last_Mux_1_20(Last_Mux_1_20),
        .Last_Mux_1_4(Last_Mux_1_4),
        .Q({\C_reg_n_0_[11] ,\C_reg_n_0_[27] }));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_177 \BS_Rev_Loop[12].I_BS_REV_A_LUT6 
       (.B(B[2:0]),
        .\C[13]_i_2 (\C[13]_i_2_2 ),
        .\C[13]_i_2_0 (\C[13]_i_2_1 ),
        .\C[13]_i_2_1 (\C[13]_i_2_0 ),
        .\C[13]_i_2_2 (\C[13]_i_2 ),
        .\C[13]_i_2_3 (\C_reg[30]_3 ),
        .\C_reg[18] (\BS_Rev_Loop[2].I_BS_REV_A_LUT6_n_3 ),
        .\C_reg[22] (\BS_Rev_Loop[8].I_BS_REV_A_LUT6_n_2 ),
        .\C_reg[24] (\BS_Rev_Loop[10].I_BS_REV_A_LUT6_n_2 ),
        .\C_reg[24]_0 (\BS_Rev_Loop[13].I_BS_REV_A_LUT6_n_1 ),
        .\C_reg[24]_1 (\Using_FPGA.Native ),
        .\C_reg[24]_2 (\Using_FPGA.Native_0 ),
        .\C_reg[26] (\BS_Rev_Loop[15].I_BS_REV_A_LUT6_n_8 ),
        .\C_reg[26]_0 (\BS_Rev_Loop[10].I_BS_REV_A_LUT6_n_1 ),
        .\C_reg[26]_1 (\BS_Rev_Loop[11].I_BS_REV_A_LUT6_n_1 ),
        .\C_reg[7] (\C_reg[5]_0 ),
        .\C_reg[7]_0 (\BS_Rev_Loop[7].I_BS_REV_A_LUT6_n_4 ),
        .\C_reg[7]_1 (\BS_Rev_Loop[1].I_BS_REV_A_LUT6_n_5 ),
        .\C_reg[7]_2 (\BS_Rev_Loop[3].I_BS_REV_A_LUT6_n_2 ),
        .\C_reg[7]_3 (\BS_Rev_Loop[11].I_BS_REV_A_LUT6_n_0 ),
        .\C_reg[7]_4 (\BS_Rev_Loop[13].I_BS_REV_A_LUT6_n_0 ),
        .\C_reg[7]_5 (\BS_Rev_Loop[14].I_BS_REV_A_LUT6_n_0 ),
        .D({\BS_Rev_Loop[12].I_BS_REV_A_LUT6_n_2 ,\BS_Rev_Loop[12].I_BS_REV_A_LUT6_n_3 ,\BS_Rev_Loop[12].I_BS_REV_A_LUT6_n_4 ,\BS_Rev_Loop[12].I_BS_REV_A_LUT6_n_5 ,\BS_Rev_Loop[12].I_BS_REV_A_LUT6_n_6 }),
        .\Using_FPGA.Native_0 (\BS_Rev_Loop[12].I_BS_REV_A_LUT6_n_0 ),
        .\Using_FPGA.Native_1 (\BS_Rev_Loop[12].I_BS_REV_A_LUT6_n_1 ),
        .\Using_FPGA.Native_2 (\BS_Rev_Loop[12].I_BS_REV_A_LUT6_n_7 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_4 ),
        .\Using_FPGA.Native_4 (\BS_Rev_Loop[12].I_BS_REV_A_LUT6_n_9 ),
        .void_bit(void_bit));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_178 \BS_Rev_Loop[12].I_BS_REV_LUT6 
       (.Last_Mux_1_12(Last_Mux_1_12),
        .Last_Mux_1_19(Last_Mux_1_19),
        .Last_Mux_1_28(Last_Mux_1_28),
        .Last_Mux_1_3(Last_Mux_1_3),
        .Other_Result({Other_Result[12],Other_Result[28]}),
        .Q({p_0_in52_in,p_0_in4_in}),
        .\Using_FPGA.Native_0 ({p_1_in53_in,p_1_in5_in}),
        .\Using_FPGA.Native_1 ({\Using_FPGA.Native_5 [19],\Using_FPGA.Native_5 [3]}),
        .\Using_FPGA.Native_i_1__84_0 (\C_reg[30]_3 ),
        .p_2_in116_in(p_2_in116_in),
        .p_2_in17_in(p_2_in17_in));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_179 \BS_Rev_Loop[12].I_BS_SHIFT16_LUT6 
       (.B(B[3]),
        .I3(I3),
        .Last_Mux_1_19(Last_Mux_1_19),
        .Last_Mux_1_3(Last_Mux_1_3),
        .Q({\C_reg_n_0_[12] ,\C_reg_n_0_[28] }));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_180 \BS_Rev_Loop[13].I_BS_REV_A_LUT6 
       (.B(B[2:0]),
        .\C[14]_i_2 (\C[14]_i_2_1 ),
        .\C[14]_i_2_0 (\C[14]_i_2_0 ),
        .\C[14]_i_2_1 (\C[14]_i_2 ),
        .\C[14]_i_2_2 (\C_reg[30]_3 ),
        .\C_reg[19] (\Using_FPGA.Native ),
        .\C_reg[19]_0 (\BS_Rev_Loop[11].I_BS_REV_A_LUT6_n_1 ),
        .\C_reg[19]_1 (\BS_Rev_Loop[12].I_BS_REV_A_LUT6_n_1 ),
        .\C_reg[8] (\C_reg[5]_0 ),
        .\C_reg[8]_0 (\BS_Rev_Loop[4].I_BS_REV_A_LUT6_n_4 ),
        .\C_reg[8]_1 (\BS_Rev_Loop[8].I_BS_REV_A_LUT6_n_4 ),
        .\C_reg[8]_2 (\BS_Rev_Loop[0].I_BS_REV_A_LUT6_n_3 ),
        .\C_reg[8]_3 (\BS_Rev_Loop[12].I_BS_REV_A_LUT6_n_0 ),
        .\C_reg[8]_4 (\BS_Rev_Loop[14].I_BS_REV_A_LUT6_n_0 ),
        .\C_reg[8]_5 (\BS_Rev_Loop[15].I_BS_REV_A_LUT6_n_0 ),
        .D(\BS_Rev_Loop[13].I_BS_REV_A_LUT6_n_3 ),
        .EX_Op1(EX_Op1),
        .\Using_FPGA.Native_0 (\BS_Rev_Loop[13].I_BS_REV_A_LUT6_n_0 ),
        .\Using_FPGA.Native_1 (\BS_Rev_Loop[13].I_BS_REV_A_LUT6_n_1 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_3 ),
        .\Using_FPGA.Native_3 (\BS_Rev_Loop[13].I_BS_REV_A_LUT6_n_4 ));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_181 \BS_Rev_Loop[13].I_BS_REV_LUT6 
       (.Last_Mux_1_13(Last_Mux_1_13),
        .Last_Mux_1_18(Last_Mux_1_18),
        .Last_Mux_1_2(Last_Mux_1_2),
        .Last_Mux_1_29(Last_Mux_1_29),
        .Other_Result({Other_Result[13],Other_Result[29]}),
        .Q({p_0_in49_in,p_0_in1_in}),
        .\Using_FPGA.Native_0 ({p_1_in50_in,p_1_in2_in}),
        .\Using_FPGA.Native_1 ({\Using_FPGA.Native_5 [18],\Using_FPGA.Native_5 [2]}),
        .\Using_FPGA.Native_i_1__83_0 (\C_reg[30]_3 ),
        .p_2_in109_in(p_2_in109_in),
        .p_2_in11_in(p_2_in11_in));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_182 \BS_Rev_Loop[13].I_BS_SHIFT16_LUT6 
       (.B(B[3]),
        .I3(I3),
        .Last_Mux_1_18(Last_Mux_1_18),
        .Last_Mux_1_2(Last_Mux_1_2),
        .Q({\C_reg_n_0_[13] ,\C_reg_n_0_[29] }));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_183 \BS_Rev_Loop[14].I_BS_REV_A_LUT6 
       (.B(B[2:0]),
        .\C_reg[10] (\BS_Rev_Loop[2].I_BS_REV_A_LUT6_n_3 ),
        .\C_reg[10]_0 (\BS_Rev_Loop[10].I_BS_REV_A_LUT6_n_4 ),
        .\C_reg[10]_1 (\BS_Rev_Loop[8].I_BS_REV_A_LUT6_n_2 ),
        .\C_reg[10]_2 (\BS_Rev_Loop[15].I_BS_REV_A_LUT6_n_0 ),
        .\C_reg[10]_3 (\C_reg[5]_0 ),
        .\C_reg[10]_4 (\BS_Rev_Loop[1].I_BS_REV_A_LUT6_n_1 ),
        .\C_reg[30] (\C_reg[30]_7 ),
        .\C_reg[30]_0 (\C_reg[30]_6 ),
        .\C_reg[30]_1 (\C_reg[30]_5 ),
        .\C_reg[30]_2 (\C_reg[30]_4 ),
        .\C_reg[30]_3 (\C_reg[30]_3 ),
        .D(\BS_Rev_Loop[14].I_BS_REV_A_LUT6_n_2 ),
        .O6(O6),
        .\Using_FPGA.Native_0 (\BS_Rev_Loop[14].I_BS_REV_A_LUT6_n_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_2 (\BS_Rev_Loop[14].I_BS_REV_A_LUT6_n_3 ));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_184 \BS_Rev_Loop[14].I_BS_REV_LUT6 
       (.Last_Mux_1_1(Last_Mux_1_1),
        .Last_Mux_1_14(Last_Mux_1_14),
        .Last_Mux_1_17(Last_Mux_1_17),
        .Last_Mux_1_30(Last_Mux_1_30),
        .Other_Result({Other_Result[14],Other_Result[30]}),
        .Q({p_0_in46_in,p_0_in}),
        .\Using_FPGA.Native_0 ({p_1_in47_in,p_1_in}),
        .\Using_FPGA.Native_1 ({\Using_FPGA.Native_5 [17],\Using_FPGA.Native_5 [1]}),
        .\Using_FPGA.Native_i_1__82_0 (\C_reg[30]_3 ),
        .p_2_in102_in(p_2_in102_in),
        .p_2_in5_in(p_2_in5_in));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_185 \BS_Rev_Loop[14].I_BS_SHIFT16_LUT6 
       (.B(B[3]),
        .I3(I3),
        .Last_Mux_1_1(Last_Mux_1_1),
        .Last_Mux_1_17(Last_Mux_1_17),
        .Q({\C_reg_n_0_[14] ,\C_reg_n_0_[30] }));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_186 \BS_Rev_Loop[15].I_BS_REV_A_LUT6 
       (.B(B[2:0]),
        .\C_reg[13] (\C_reg[5]_0 ),
        .\C_reg[13]_0 (\BS_Rev_Loop[14].I_BS_REV_A_LUT6_n_0 ),
        .\C_reg[13]_1 (\BS_Rev_Loop[13].I_BS_REV_A_LUT6_n_0 ),
        .\C_reg[17] (\BS_Rev_Loop[1].I_BS_REV_A_LUT6_n_6 ),
        .\C_reg[17]_0 (\BS_Rev_Loop[13].I_BS_REV_A_LUT6_n_1 ),
        .\C_reg[21] (\BS_Rev_Loop[7].I_BS_REV_A_LUT6_n_2 ),
        .\C_reg[25] (\BS_Rev_Loop[11].I_BS_REV_A_LUT6_n_2 ),
        .\C_reg[26] (\Using_FPGA.Native ),
        .\C_reg[30] (\C_reg[30]_2 ),
        .\C_reg[30]_0 (\C_reg[30]_1 ),
        .\C_reg[30]_1 (\C_reg[30]_0 ),
        .\C_reg[30]_2 (\C_reg[30]_3 ),
        .\C_reg[9] (\BS_Rev_Loop[9].I_BS_REV_A_LUT6_n_5 ),
        .D({\BS_Rev_Loop[15].I_BS_REV_A_LUT6_n_2 ,\BS_Rev_Loop[15].I_BS_REV_A_LUT6_n_3 ,\BS_Rev_Loop[15].I_BS_REV_A_LUT6_n_4 ,\BS_Rev_Loop[15].I_BS_REV_A_LUT6_n_5 ,\BS_Rev_Loop[15].I_BS_REV_A_LUT6_n_6 }),
        .O6(O6),
        .Op1_Shift(Op1_Shift),
        .\Using_FPGA.Native_0 (\BS_Rev_Loop[15].I_BS_REV_A_LUT6_n_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_3 (\BS_Rev_Loop[15].I_BS_REV_A_LUT6_n_8 ),
        .\Using_FPGA.Native_4 (\BS_Rev_Loop[15].I_BS_REV_A_LUT6_n_9 ),
        .void_bit(void_bit));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_187 \BS_Rev_Loop[15].I_BS_REV_LUT6 
       (.Last_Mux_1_0(Last_Mux_1_0),
        .Last_Mux_1_15(Last_Mux_1_15),
        .Last_Mux_1_16(Last_Mux_1_16),
        .Last_Mux_1_31(Last_Mux_1_31),
        .Other_Result({Other_Result[15],Other_Result[31]}),
        .Q({p_1_in44_in,\Using_BitField.mem_mask0_reg_n_0_[31] }),
        .\Using_FPGA.Native_0 (\Using_BitField.Gen_Bits[31].mem_Rd_reg_n_0_[31] ),
        .\Using_FPGA.Native_1 ({\Using_FPGA.Native_5 [16],\Using_FPGA.Native_5 [0]}),
        .\Using_FPGA.Native_2 (p_0_in43_in),
        .\Using_FPGA.Native_i_1__81_0 (\C_reg[30]_3 ),
        .p_2_in95_in(p_2_in95_in));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_188 \BS_Rev_Loop[15].I_BS_SHIFT16_LUT6 
       (.B(B[3]),
        .I3(I3),
        .Last_Mux_1_0(Last_Mux_1_0),
        .Last_Mux_1_16(Last_Mux_1_16),
        .Q({\C_reg_n_0_[15] ,\C_reg_n_0_[31] }));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_189 \BS_Rev_Loop[1].I_BS_REV_A_LUT6 
       (.B(B[2:0]),
        .\C[4]_i_2 (\C_reg[30]_4 ),
        .\C[4]_i_2_0 (\C_reg[30]_5 ),
        .\C[4]_i_2_1 (\C_reg[30]_6 ),
        .\C[4]_i_2_2 (\C_reg[30]_7 ),
        .\C[4]_i_2_3 (\C_reg[30]_3 ),
        .\C_reg[11] (\Using_FPGA.Native_2 ),
        .\C_reg[11]_0 (\BS_Rev_Loop[12].I_BS_REV_A_LUT6_n_9 ),
        .\C_reg[15] (\BS_Rev_Loop[3].I_BS_REV_A_LUT6_n_2 ),
        .\C_reg[15]_0 (\Using_FPGA.Native_3 ),
        .\C_reg[15]_1 (\BS_Rev_Loop[15].I_BS_REV_A_LUT6_n_0 ),
        .\C_reg[1] (\C_reg[5]_0 ),
        .\C_reg[1]_0 (\BS_Rev_Loop[9].I_BS_REV_A_LUT6_n_5 ),
        .\C_reg[1]_1 (\BS_Rev_Loop[6].I_BS_REV_A_LUT6_n_4 ),
        .\C_reg[1]_2 (\BS_Rev_Loop[15].I_BS_REV_A_LUT6_n_9 ),
        .\C_reg[1]_3 (\BS_Rev_Loop[2].I_BS_REV_A_LUT6_n_0 ),
        .\C_reg[1]_4 (\BS_Rev_Loop[3].I_BS_REV_A_LUT6_n_0 ),
        .\C_reg[1]_5 (\BS_Rev_Loop[4].I_BS_REV_A_LUT6_n_0 ),
        .\C_reg[5] (\BS_Rev_Loop[2].I_BS_REV_A_LUT6_n_1 ),
        .\C_reg[5]_0 (\BS_Rev_Loop[3].I_BS_REV_A_LUT6_n_1 ),
        .\C_reg[5]_1 (\BS_Rev_Loop[4].I_BS_REV_A_LUT6_n_1 ),
        .D({\BS_Rev_Loop[1].I_BS_REV_A_LUT6_n_2 ,\BS_Rev_Loop[1].I_BS_REV_A_LUT6_n_3 ,\BS_Rev_Loop[1].I_BS_REV_A_LUT6_n_4 }),
        .O6(O6),
        .\Using_FPGA.Native_0 (\BS_Rev_Loop[1].I_BS_REV_A_LUT6_n_0 ),
        .\Using_FPGA.Native_1 (\BS_Rev_Loop[1].I_BS_REV_A_LUT6_n_1 ),
        .\Using_FPGA.Native_2 (\BS_Rev_Loop[1].I_BS_REV_A_LUT6_n_5 ),
        .\Using_FPGA.Native_3 (\BS_Rev_Loop[1].I_BS_REV_A_LUT6_n_6 ));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_190 \BS_Rev_Loop[1].I_BS_REV_LUT6 
       (.Last_Mux_1_1(Last_Mux_1_1),
        .Last_Mux_1_14(Last_Mux_1_14),
        .Last_Mux_1_17(Last_Mux_1_17),
        .Last_Mux_1_30(Last_Mux_1_30),
        .Other_Result({Other_Result[1],Other_Result[17]}),
        .Q({p_23_in,p_0_in37_in}),
        .\Using_FPGA.Native_0 ({p_24_in,p_1_in38_in}),
        .\Using_FPGA.Native_1 ({\Using_FPGA.Native_5 [30],\Using_FPGA.Native_5 [14]}),
        .\Using_FPGA.Native_i_1__95_0 (\C_reg[30]_3 ),
        .p_26_in(p_26_in),
        .p_2_in83_in(p_2_in83_in));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_191 \BS_Rev_Loop[1].I_BS_SHIFT16_LUT6 
       (.B(B[3]),
        .I3(I3),
        .Last_Mux_1_14(Last_Mux_1_14),
        .Last_Mux_1_30(Last_Mux_1_30),
        .Q({\C_reg_n_0_[1] ,\C_reg_n_0_[17] }));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_192 \BS_Rev_Loop[2].I_BS_REV_A_LUT6 
       (.B(B[2:0]),
        .\C[4]_i_2 (\C[14]_i_2 ),
        .\C[4]_i_2_0 (\C[14]_i_2_0 ),
        .\C[4]_i_2_1 (\C[14]_i_2_1 ),
        .\C[4]_i_2_2 (\C_reg[30]_3 ),
        .\C_reg[14] (\BS_Rev_Loop[12].I_BS_REV_A_LUT6_n_7 ),
        .\C_reg[14]_0 (\BS_Rev_Loop[14].I_BS_REV_A_LUT6_n_3 ),
        .\C_reg[14]_1 (\BS_Rev_Loop[8].I_BS_REV_A_LUT6_n_2 ),
        .\C_reg[14]_2 (\BS_Rev_Loop[3].I_BS_REV_A_LUT6_n_1 ),
        .\C_reg[14]_3 (\BS_Rev_Loop[4].I_BS_REV_A_LUT6_n_1 ),
        .\C_reg[14]_4 (\C_reg[5]_0 ),
        .\C_reg[14]_5 (\BS_Rev_Loop[5].I_BS_REV_A_LUT6_n_1 ),
        .D(\BS_Rev_Loop[2].I_BS_REV_A_LUT6_n_2 ),
        .EX_Op1(EX_Op1),
        .\Using_FPGA.Native_0 (\BS_Rev_Loop[2].I_BS_REV_A_LUT6_n_0 ),
        .\Using_FPGA.Native_1 (\BS_Rev_Loop[2].I_BS_REV_A_LUT6_n_1 ),
        .\Using_FPGA.Native_2 (\BS_Rev_Loop[2].I_BS_REV_A_LUT6_n_3 ));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_193 \BS_Rev_Loop[2].I_BS_REV_LUT6 
       (.Last_Mux_1_13(Last_Mux_1_13),
        .Last_Mux_1_18(Last_Mux_1_18),
        .Last_Mux_1_2(Last_Mux_1_2),
        .Last_Mux_1_29(Last_Mux_1_29),
        .Other_Result({Other_Result[2],Other_Result[18]}),
        .Q({p_19_in,p_0_in34_in}),
        .\Using_FPGA.Native_0 ({p_20_in,p_1_in35_in}),
        .\Using_FPGA.Native_1 ({\Using_FPGA.Native_5 [29],\Using_FPGA.Native_5 [13]}),
        .\Using_FPGA.Native_i_1__94_0 (\C_reg[30]_3 ),
        .p_22_in(p_22_in),
        .p_2_in77_in(p_2_in77_in));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_194 \BS_Rev_Loop[2].I_BS_SHIFT16_LUT6 
       (.B(B[3]),
        .I3(I3),
        .Last_Mux_1_13(Last_Mux_1_13),
        .Last_Mux_1_29(Last_Mux_1_29),
        .Q({\C_reg_n_0_[2] ,\C_reg_n_0_[18] }));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_195 \BS_Rev_Loop[3].I_BS_REV_A_LUT6 
       (.B(B[0]),
        .\C[4]_i_2 (\C[13]_i_2 ),
        .\C[4]_i_2_0 (\C[13]_i_2_0 ),
        .\C[4]_i_2_1 (\C[13]_i_2_1 ),
        .\C[4]_i_2_2 (\C[13]_i_2_2 ),
        .\C[4]_i_2_3 (\C_reg[30]_3 ),
        .\C_reg[19] (\BS_Rev_Loop[4].I_BS_REV_A_LUT6_n_1 ),
        .\C_reg[19]_0 (\BS_Rev_Loop[5].I_BS_REV_A_LUT6_n_1 ),
        .\C_reg[19]_1 (\BS_Rev_Loop[6].I_BS_REV_A_LUT6_n_1 ),
        .\C_reg[2] (\C_reg[5]_0 ),
        .\C_reg[2]_0 (\BS_Rev_Loop[2].I_BS_REV_A_LUT6_n_0 ),
        .\C_reg[2]_1 (\BS_Rev_Loop[4].I_BS_REV_A_LUT6_n_0 ),
        .\C_reg[2]_2 (\BS_Rev_Loop[5].I_BS_REV_A_LUT6_n_0 ),
        .\Using_FPGA.Native_0 (\BS_Rev_Loop[3].I_BS_REV_A_LUT6_n_0 ),
        .\Using_FPGA.Native_1 (\BS_Rev_Loop[3].I_BS_REV_A_LUT6_n_1 ),
        .\Using_FPGA.Native_2 (\BS_Rev_Loop[3].I_BS_REV_A_LUT6_n_2 ),
        .\Using_FPGA.Native_3 (\BS_Rev_Loop[3].I_BS_REV_A_LUT6_n_3 ));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_196 \BS_Rev_Loop[3].I_BS_REV_LUT6 
       (.Last_Mux_1_12(Last_Mux_1_12),
        .Last_Mux_1_19(Last_Mux_1_19),
        .Last_Mux_1_28(Last_Mux_1_28),
        .Last_Mux_1_3(Last_Mux_1_3),
        .Other_Result({Other_Result[3],Other_Result[19]}),
        .Q({p_15_in,p_0_in31_in}),
        .\Using_FPGA.Native_0 ({p_16_in,p_1_in32_in}),
        .\Using_FPGA.Native_1 ({\Using_FPGA.Native_5 [28],\Using_FPGA.Native_5 [12]}),
        .\Using_FPGA.Native_i_1__93_0 (\C_reg[30]_3 ),
        .p_18_in(p_18_in),
        .p_2_in71_in(p_2_in71_in));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_197 \BS_Rev_Loop[3].I_BS_SHIFT16_LUT6 
       (.B(B[3]),
        .I3(I3),
        .Last_Mux_1_12(Last_Mux_1_12),
        .Last_Mux_1_28(Last_Mux_1_28),
        .Q({\C_reg_n_0_[3] ,\C_reg_n_0_[19] }));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_198 \BS_Rev_Loop[4].I_BS_REV_A_LUT6 
       (.B(B[2:0]),
        .\C[5]_i_2 (\C[12]_i_2 ),
        .\C[5]_i_2_0 (\C[12]_i_2_0 ),
        .\C[5]_i_2_1 (\C[12]_i_2_1 ),
        .\C[5]_i_2_2 (\C[12]_i_2_2 ),
        .\C[5]_i_2_3 (\C_reg[30]_3 ),
        .\C_reg[16] (\Using_FPGA.Native_4 ),
        .\C_reg[16]_0 (\BS_Rev_Loop[0].I_BS_REV_A_LUT6_n_3 ),
        .\C_reg[20] (\BS_Rev_Loop[10].I_BS_REV_A_LUT6_n_2 ),
        .\C_reg[20]_0 (\BS_Rev_Loop[5].I_BS_REV_A_LUT6_n_1 ),
        .\C_reg[20]_1 (\BS_Rev_Loop[6].I_BS_REV_A_LUT6_n_1 ),
        .\C_reg[20]_2 (\BS_Rev_Loop[7].I_BS_REV_A_LUT6_n_1 ),
        .\C_reg[4] (\C_reg[5]_0 ),
        .\C_reg[4]_0 (\BS_Rev_Loop[5].I_BS_REV_A_LUT6_n_0 ),
        .\C_reg[4]_1 (\BS_Rev_Loop[6].I_BS_REV_A_LUT6_n_0 ),
        .\C_reg[4]_2 (\BS_Rev_Loop[7].I_BS_REV_A_LUT6_n_0 ),
        .D({\BS_Rev_Loop[4].I_BS_REV_A_LUT6_n_2 ,\BS_Rev_Loop[4].I_BS_REV_A_LUT6_n_3 }),
        .\Using_FPGA.Native_0 (\BS_Rev_Loop[4].I_BS_REV_A_LUT6_n_0 ),
        .\Using_FPGA.Native_1 (\BS_Rev_Loop[4].I_BS_REV_A_LUT6_n_1 ),
        .\Using_FPGA.Native_2 (\BS_Rev_Loop[4].I_BS_REV_A_LUT6_n_4 ),
        .\Using_FPGA.Native_3 (\BS_Rev_Loop[4].I_BS_REV_A_LUT6_n_5 ),
        .void_bit(void_bit));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_199 \BS_Rev_Loop[4].I_BS_REV_LUT6 
       (.Last_Mux_1_11(Last_Mux_1_11),
        .Last_Mux_1_20(Last_Mux_1_20),
        .Last_Mux_1_27(Last_Mux_1_27),
        .Last_Mux_1_4(Last_Mux_1_4),
        .Other_Result({Other_Result[4],Other_Result[20]}),
        .Q({p_11_in,p_0_in28_in}),
        .\Using_FPGA.Native_0 ({p_12_in,p_1_in29_in}),
        .\Using_FPGA.Native_1 ({\Using_FPGA.Native_5 [27],\Using_FPGA.Native_5 [11]}),
        .\Using_FPGA.Native_i_1__92_0 (\C_reg[30]_3 ),
        .p_14_in(p_14_in),
        .p_2_in65_in(p_2_in65_in));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_200 \BS_Rev_Loop[4].I_BS_SHIFT16_LUT6 
       (.B(B[3]),
        .I3(I3),
        .Last_Mux_1_11(Last_Mux_1_11),
        .Last_Mux_1_27(Last_Mux_1_27),
        .Q({\C_reg_n_0_[4] ,\C_reg_n_0_[20] }));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_201 \BS_Rev_Loop[5].I_BS_REV_A_LUT6 
       (.B(B[0]),
        .\C[6]_i_2 (\C[13]_i_2_3 ),
        .\C[6]_i_2_0 (\C[13]_i_2_4 ),
        .\C[6]_i_2_1 (\C[13]_i_2_5 ),
        .\C[6]_i_2_2 (\C[13]_i_2_6 ),
        .\C[6]_i_2_3 (\C_reg[30]_3 ),
        .\C_reg[3] (\BS_Rev_Loop[6].I_BS_REV_A_LUT6_n_0 ),
        .\C_reg[3]_0 (\BS_Rev_Loop[4].I_BS_REV_A_LUT6_n_0 ),
        .\C_reg[3]_1 (\C_reg[5]_0 ),
        .\C_reg[3]_2 (\BS_Rev_Loop[3].I_BS_REV_A_LUT6_n_0 ),
        .\Using_FPGA.Native_0 (\BS_Rev_Loop[5].I_BS_REV_A_LUT6_n_0 ),
        .\Using_FPGA.Native_1 (\BS_Rev_Loop[5].I_BS_REV_A_LUT6_n_1 ),
        .\Using_FPGA.Native_2 (\BS_Rev_Loop[5].I_BS_REV_A_LUT6_n_2 ));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_202 \BS_Rev_Loop[5].I_BS_REV_LUT6 
       (.Last_Mux_1_10(Last_Mux_1_10),
        .Last_Mux_1_21(Last_Mux_1_21),
        .Last_Mux_1_26(Last_Mux_1_26),
        .Last_Mux_1_5(Last_Mux_1_5),
        .Other_Result({Other_Result[5],Other_Result[21]}),
        .Q({p_7_in,p_0_in25_in}),
        .\Using_FPGA.Native_0 ({p_8_in,p_1_in26_in}),
        .\Using_FPGA.Native_1 ({\Using_FPGA.Native_5 [26],\Using_FPGA.Native_5 [10]}),
        .\Using_FPGA.Native_i_1__91_0 (\C_reg[30]_3 ),
        .p_10_in(p_10_in),
        .p_2_in59_in(p_2_in59_in));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_203 \BS_Rev_Loop[5].I_BS_SHIFT16_LUT6 
       (.B(B[3]),
        .I3(I3),
        .Last_Mux_1_10(Last_Mux_1_10),
        .Last_Mux_1_26(Last_Mux_1_26),
        .Q({\C_reg_n_0_[5] ,\C_reg_n_0_[21] }));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_204 \BS_Rev_Loop[6].I_BS_REV_A_LUT6 
       (.B(B[2:0]),
        .\C[7]_i_2 (\C[7]_i_2 ),
        .\C[7]_i_2_0 (\C[7]_i_2_0 ),
        .\C[7]_i_2_1 (\C[7]_i_2_1 ),
        .\C[7]_i_2_2 (\C[7]_i_2_2 ),
        .\C[7]_i_2_3 (\C_reg[30]_3 ),
        .\C_reg[2] (\BS_Rev_Loop[10].I_BS_REV_A_LUT6_n_4 ),
        .\C_reg[2]_0 (\BS_Rev_Loop[3].I_BS_REV_A_LUT6_n_3 ),
        .\C_reg[2]_1 (\BS_Rev_Loop[14].I_BS_REV_A_LUT6_n_3 ),
        .\C_reg[2]_2 (\BS_Rev_Loop[7].I_BS_REV_A_LUT6_n_0 ),
        .\C_reg[2]_3 (\BS_Rev_Loop[8].I_BS_REV_A_LUT6_n_0 ),
        .\C_reg[2]_4 (\BS_Rev_Loop[9].I_BS_REV_A_LUT6_n_0 ),
        .\C_reg[5] (\C_reg[5]_0 ),
        .\C_reg[5]_0 (\BS_Rev_Loop[5].I_BS_REV_A_LUT6_n_0 ),
        .D(\BS_Rev_Loop[6].I_BS_REV_A_LUT6_n_2 ),
        .\Using_FPGA.Native_0 (\BS_Rev_Loop[6].I_BS_REV_A_LUT6_n_0 ),
        .\Using_FPGA.Native_1 (\BS_Rev_Loop[6].I_BS_REV_A_LUT6_n_1 ),
        .\Using_FPGA.Native_2 (\BS_Rev_Loop[6].I_BS_REV_A_LUT6_n_3 ),
        .\Using_FPGA.Native_3 (\BS_Rev_Loop[6].I_BS_REV_A_LUT6_n_4 ));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_205 \BS_Rev_Loop[6].I_BS_REV_LUT6 
       (.Last_Mux_1_22(Last_Mux_1_22),
        .Last_Mux_1_25(Last_Mux_1_25),
        .Last_Mux_1_6(Last_Mux_1_6),
        .Last_Mux_1_9(Last_Mux_1_9),
        .Other_Result({Other_Result[6],Other_Result[22]}),
        .Q({p_3_in,p_0_in22_in}),
        .\Using_FPGA.Native_0 ({p_4_in,p_1_in23_in}),
        .\Using_FPGA.Native_1 ({\Using_FPGA.Native_5 [25],\Using_FPGA.Native_5 [9]}),
        .\Using_FPGA.Native_i_1__90_0 (\C_reg[30]_3 ),
        .p_2_in53_in(p_2_in53_in),
        .p_6_in(p_6_in));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_206 \BS_Rev_Loop[6].I_BS_SHIFT16_LUT6 
       (.B(B[3]),
        .I3(I3),
        .Last_Mux_1_25(Last_Mux_1_25),
        .Last_Mux_1_9(Last_Mux_1_9),
        .Q({\C_reg_n_0_[6] ,\C_reg_n_0_[22] }));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_207 \BS_Rev_Loop[7].I_BS_REV_A_LUT6 
       (.B(B[2:0]),
        .\C[8]_i_2 (\C[8]_i_2 ),
        .\C[8]_i_2_0 (\C[8]_i_2_0 ),
        .\C[8]_i_2_1 (\C[8]_i_2_1 ),
        .\C[8]_i_2_2 (\C_reg[30]_3 ),
        .\C_reg[21] (\BS_Rev_Loop[8].I_BS_REV_A_LUT6_n_1 ),
        .\C_reg[21]_0 (\BS_Rev_Loop[6].I_BS_REV_A_LUT6_n_1 ),
        .\C_reg[21]_1 (\BS_Rev_Loop[5].I_BS_REV_A_LUT6_n_1 ),
        .\C_reg[3] (\C_reg[5]_0 ),
        .\C_reg[3]_0 (\BS_Rev_Loop[5].I_BS_REV_A_LUT6_n_2 ),
        .\C_reg[3]_1 (\BS_Rev_Loop[12].I_BS_REV_A_LUT6_n_9 ),
        .\C_reg[3]_2 (\BS_Rev_Loop[1].I_BS_REV_A_LUT6_n_5 ),
        .\C_reg[3]_3 (\BS_Rev_Loop[8].I_BS_REV_A_LUT6_n_0 ),
        .\C_reg[3]_4 (\BS_Rev_Loop[9].I_BS_REV_A_LUT6_n_0 ),
        .\C_reg[3]_5 (\BS_Rev_Loop[10].I_BS_REV_A_LUT6_n_0 ),
        .D(\BS_Rev_Loop[7].I_BS_REV_A_LUT6_n_3 ),
        .Shifted(Shifted),
        .\Using_FPGA.Native_0 (\BS_Rev_Loop[7].I_BS_REV_A_LUT6_n_0 ),
        .\Using_FPGA.Native_1 (\BS_Rev_Loop[7].I_BS_REV_A_LUT6_n_1 ),
        .\Using_FPGA.Native_2 (\BS_Rev_Loop[7].I_BS_REV_A_LUT6_n_2 ),
        .\Using_FPGA.Native_3 (\BS_Rev_Loop[7].I_BS_REV_A_LUT6_n_4 ));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_208 \BS_Rev_Loop[7].I_BS_REV_LUT6 
       (.Last_Mux_1_23(Last_Mux_1_23),
        .Last_Mux_1_24(Last_Mux_1_24),
        .Last_Mux_1_7(Last_Mux_1_7),
        .Last_Mux_1_8(Last_Mux_1_8),
        .Other_Result({Other_Result[7],Other_Result[23]}),
        .Q({p_0_in67_in,p_0_in19_in}),
        .\Using_FPGA.Native_0 ({p_1_in68_in,p_1_in20_in}),
        .\Using_FPGA.Native_1 ({\Using_FPGA.Native_5 [24],\Using_FPGA.Native_5 [8]}),
        .\Using_FPGA.Native_i_1__89_0 (\C_reg[30]_3 ),
        .p_2_in152_in(p_2_in152_in),
        .p_2_in47_in(p_2_in47_in));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_209 \BS_Rev_Loop[7].I_BS_SHIFT16_LUT6 
       (.B(B[3]),
        .I3(I3),
        .Last_Mux_1_24(Last_Mux_1_24),
        .Last_Mux_1_8(Last_Mux_1_8),
        .Q({\C_reg_n_0_[7] ,\C_reg_n_0_[23] }));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_210 \BS_Rev_Loop[8].I_BS_REV_A_LUT6 
       (.B(B[2:0]),
        .\C[12]_i_2 (\C[8]_i_2_1 ),
        .\C[12]_i_2_0 (\C[8]_i_2_0 ),
        .\C[12]_i_2_1 (\C[8]_i_2 ),
        .\C[12]_i_2_2 (\C_reg[30]_3 ),
        .\C_reg[14] (\BS_Rev_Loop[9].I_BS_REV_A_LUT6_n_1 ),
        .\C_reg[14]_0 (\BS_Rev_Loop[6].I_BS_REV_A_LUT6_n_1 ),
        .\C_reg[14]_1 (\BS_Rev_Loop[7].I_BS_REV_A_LUT6_n_1 ),
        .\C_reg[4] (\C_reg[5]_0 ),
        .\C_reg[4]_0 (\BS_Rev_Loop[13].I_BS_REV_A_LUT6_n_4 ),
        .\C_reg[4]_1 (\BS_Rev_Loop[4].I_BS_REV_A_LUT6_n_5 ),
        .\C_reg[4]_2 (\BS_Rev_Loop[0].I_BS_REV_A_LUT6_n_3 ),
        .\C_reg[4]_3 (\BS_Rev_Loop[9].I_BS_REV_A_LUT6_n_0 ),
        .\C_reg[4]_4 (\BS_Rev_Loop[10].I_BS_REV_A_LUT6_n_0 ),
        .\C_reg[4]_5 (\BS_Rev_Loop[11].I_BS_REV_A_LUT6_n_0 ),
        .D(\BS_Rev_Loop[8].I_BS_REV_A_LUT6_n_3 ),
        .Shifted(Shifted),
        .\Using_FPGA.Native_0 (\BS_Rev_Loop[8].I_BS_REV_A_LUT6_n_0 ),
        .\Using_FPGA.Native_1 (\BS_Rev_Loop[8].I_BS_REV_A_LUT6_n_1 ),
        .\Using_FPGA.Native_2 (\BS_Rev_Loop[8].I_BS_REV_A_LUT6_n_2 ),
        .\Using_FPGA.Native_3 (\BS_Rev_Loop[8].I_BS_REV_A_LUT6_n_4 ));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_211 \BS_Rev_Loop[8].I_BS_REV_LUT6 
       (.Last_Mux_1_23(Last_Mux_1_23),
        .Last_Mux_1_24(Last_Mux_1_24),
        .Last_Mux_1_7(Last_Mux_1_7),
        .Last_Mux_1_8(Last_Mux_1_8),
        .Other_Result({Other_Result[8],Other_Result[24]}),
        .Q({p_0_in64_in,p_0_in16_in}),
        .\Using_FPGA.Native_0 ({p_1_in65_in,p_1_in17_in}),
        .\Using_FPGA.Native_1 ({\Using_FPGA.Native_5 [23],\Using_FPGA.Native_5 [7]}),
        .\Using_FPGA.Native_i_1__88_0 (\C_reg[30]_3 ),
        .p_2_in144_in(p_2_in144_in),
        .p_2_in41_in(p_2_in41_in));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_212 \BS_Rev_Loop[8].I_BS_SHIFT16_LUT6 
       (.B(B[3]),
        .I3(I3),
        .Last_Mux_1_23(Last_Mux_1_23),
        .Last_Mux_1_7(Last_Mux_1_7),
        .Q({\C_reg_n_0_[8] ,\C_reg_n_0_[24] }));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_213 \BS_Rev_Loop[9].I_BS_REV_A_LUT6 
       (.B(B[2:0]),
        .\C[12]_i_2 (\C[7]_i_2_2 ),
        .\C[12]_i_2_0 (\C[7]_i_2_1 ),
        .\C[12]_i_2_1 (\C[7]_i_2_0 ),
        .\C[12]_i_2_2 (\C[7]_i_2 ),
        .\C[12]_i_2_3 (\C_reg[30]_3 ),
        .\C_reg[19] (\Using_FPGA.Native_3 ),
        .\C_reg[19]_0 (\C_reg[19]_0 ),
        .\C_reg[19]_1 (\BS_Rev_Loop[3].I_BS_REV_A_LUT6_n_2 ),
        .\C_reg[19]_2 (\BS_Rev_Loop[10].I_BS_REV_A_LUT6_n_1 ),
        .\C_reg[19]_3 (\BS_Rev_Loop[7].I_BS_REV_A_LUT6_n_1 ),
        .\C_reg[19]_4 (\BS_Rev_Loop[8].I_BS_REV_A_LUT6_n_1 ),
        .\C_reg[5] (\C_reg[5]_0 ),
        .\C_reg[5]_0 (\BS_Rev_Loop[1].I_BS_REV_A_LUT6_n_6 ),
        .\C_reg[5]_1 (\BS_Rev_Loop[6].I_BS_REV_A_LUT6_n_4 ),
        .\C_reg[5]_2 (\BS_Rev_Loop[15].I_BS_REV_A_LUT6_n_9 ),
        .\C_reg[5]_3 (\BS_Rev_Loop[10].I_BS_REV_A_LUT6_n_0 ),
        .\C_reg[5]_4 (\BS_Rev_Loop[11].I_BS_REV_A_LUT6_n_0 ),
        .\C_reg[5]_5 (\BS_Rev_Loop[12].I_BS_REV_A_LUT6_n_0 ),
        .D({\BS_Rev_Loop[9].I_BS_REV_A_LUT6_n_2 ,\BS_Rev_Loop[9].I_BS_REV_A_LUT6_n_3 }),
        .\Using_FPGA.Native_0 (\BS_Rev_Loop[9].I_BS_REV_A_LUT6_n_0 ),
        .\Using_FPGA.Native_1 (\BS_Rev_Loop[9].I_BS_REV_A_LUT6_n_1 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_3 (\BS_Rev_Loop[9].I_BS_REV_A_LUT6_n_5 ));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_214 \BS_Rev_Loop[9].I_BS_REV_LUT6 
       (.Last_Mux_1_22(Last_Mux_1_22),
        .Last_Mux_1_25(Last_Mux_1_25),
        .Last_Mux_1_6(Last_Mux_1_6),
        .Last_Mux_1_9(Last_Mux_1_9),
        .Other_Result({Other_Result[9],Other_Result[25]}),
        .Q({p_0_in61_in,p_0_in13_in}),
        .\Using_FPGA.Native_0 ({p_1_in62_in,p_1_in14_in}),
        .\Using_FPGA.Native_1 ({\Using_FPGA.Native_5 [22],\Using_FPGA.Native_5 [6]}),
        .\Using_FPGA.Native_i_1__87_0 (\C_reg[30]_3 ),
        .p_2_in137_in(p_2_in137_in),
        .p_2_in35_in(p_2_in35_in));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_215 \BS_Rev_Loop[9].I_BS_SHIFT16_LUT6 
       (.B(B[3]),
        .I3(I3),
        .Last_Mux_1_22(Last_Mux_1_22),
        .Last_Mux_1_6(Last_Mux_1_6),
        .Q({\C_reg_n_0_[9] ,\C_reg_n_0_[25] }));
  FDRE #(
    .INIT(1'b0)) 
    \C_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\BS_Rev_Loop[0].I_BS_REV_A_LUT6_n_1 ),
        .Q(I0),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \C_reg[10] 
       (.C(Clk),
        .CE(1'b1),
        .D(\BS_Rev_Loop[14].I_BS_REV_A_LUT6_n_2 ),
        .Q(\C_reg_n_0_[10] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \C_reg[11] 
       (.C(Clk),
        .CE(1'b1),
        .D(\BS_Rev_Loop[1].I_BS_REV_A_LUT6_n_3 ),
        .Q(\C_reg_n_0_[11] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \C_reg[12] 
       (.C(Clk),
        .CE(1'b1),
        .D(\BS_Rev_Loop[0].I_BS_REV_A_LUT6_n_2 ),
        .Q(\C_reg_n_0_[12] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \C_reg[13] 
       (.C(Clk),
        .CE(1'b1),
        .D(\BS_Rev_Loop[15].I_BS_REV_A_LUT6_n_3 ),
        .Q(\C_reg_n_0_[13] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \C_reg[14] 
       (.C(Clk),
        .CE(1'b1),
        .D(\BS_Rev_Loop[2].I_BS_REV_A_LUT6_n_2 ),
        .Q(\C_reg_n_0_[14] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \C_reg[15] 
       (.C(Clk),
        .CE(1'b1),
        .D(\BS_Rev_Loop[1].I_BS_REV_A_LUT6_n_4 ),
        .Q(\C_reg_n_0_[15] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \C_reg[16] 
       (.C(Clk),
        .CE(1'b1),
        .D(\BS_Rev_Loop[4].I_BS_REV_A_LUT6_n_2 ),
        .Q(I1),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \C_reg[17] 
       (.C(Clk),
        .CE(1'b1),
        .D(\BS_Rev_Loop[15].I_BS_REV_A_LUT6_n_4 ),
        .Q(\C_reg_n_0_[17] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \C_reg[18] 
       (.C(Clk),
        .CE(1'b1),
        .D(\BS_Rev_Loop[12].I_BS_REV_A_LUT6_n_3 ),
        .Q(\C_reg_n_0_[18] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \C_reg[19] 
       (.C(Clk),
        .CE(1'b1),
        .D(\BS_Rev_Loop[9].I_BS_REV_A_LUT6_n_3 ),
        .Q(\C_reg_n_0_[19] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \C_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\BS_Rev_Loop[1].I_BS_REV_A_LUT6_n_2 ),
        .Q(\C_reg_n_0_[1] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \C_reg[20] 
       (.C(Clk),
        .CE(1'b1),
        .D(\BS_Rev_Loop[4].I_BS_REV_A_LUT6_n_3 ),
        .Q(\C_reg_n_0_[20] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \C_reg[21] 
       (.C(Clk),
        .CE(1'b1),
        .D(\BS_Rev_Loop[15].I_BS_REV_A_LUT6_n_5 ),
        .Q(\C_reg_n_0_[21] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \C_reg[22] 
       (.C(Clk),
        .CE(1'b1),
        .D(\BS_Rev_Loop[12].I_BS_REV_A_LUT6_n_4 ),
        .Q(\C_reg_n_0_[22] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \C_reg[23] 
       (.C(Clk),
        .CE(1'b1),
        .D(\C_reg[23]_0 [5]),
        .Q(\C_reg_n_0_[23] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \C_reg[24] 
       (.C(Clk),
        .CE(1'b1),
        .D(\BS_Rev_Loop[12].I_BS_REV_A_LUT6_n_5 ),
        .Q(\C_reg_n_0_[24] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \C_reg[25] 
       (.C(Clk),
        .CE(1'b1),
        .D(\BS_Rev_Loop[15].I_BS_REV_A_LUT6_n_6 ),
        .Q(\C_reg_n_0_[25] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \C_reg[26] 
       (.C(Clk),
        .CE(1'b1),
        .D(\BS_Rev_Loop[12].I_BS_REV_A_LUT6_n_6 ),
        .Q(\C_reg_n_0_[26] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \C_reg[27] 
       (.C(Clk),
        .CE(1'b1),
        .D(\C_reg[23]_0 [4]),
        .Q(\C_reg_n_0_[27] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \C_reg[28] 
       (.C(Clk),
        .CE(1'b1),
        .D(\C_reg[23]_0 [3]),
        .Q(\C_reg_n_0_[28] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \C_reg[29] 
       (.C(Clk),
        .CE(1'b1),
        .D(\C_reg[23]_0 [2]),
        .Q(\C_reg_n_0_[29] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \C_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(\BS_Rev_Loop[6].I_BS_REV_A_LUT6_n_2 ),
        .Q(\C_reg_n_0_[2] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \C_reg[30] 
       (.C(Clk),
        .CE(1'b1),
        .D(\C_reg[23]_0 [1]),
        .Q(\C_reg_n_0_[30] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \C_reg[31] 
       (.C(Clk),
        .CE(1'b1),
        .D(\C_reg[23]_0 [0]),
        .Q(\C_reg_n_0_[31] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \C_reg[3] 
       (.C(Clk),
        .CE(1'b1),
        .D(\BS_Rev_Loop[7].I_BS_REV_A_LUT6_n_3 ),
        .Q(\C_reg_n_0_[3] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \C_reg[4] 
       (.C(Clk),
        .CE(1'b1),
        .D(\BS_Rev_Loop[8].I_BS_REV_A_LUT6_n_3 ),
        .Q(\C_reg_n_0_[4] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \C_reg[5] 
       (.C(Clk),
        .CE(1'b1),
        .D(\BS_Rev_Loop[9].I_BS_REV_A_LUT6_n_2 ),
        .Q(\C_reg_n_0_[5] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \C_reg[6] 
       (.C(Clk),
        .CE(1'b1),
        .D(\BS_Rev_Loop[10].I_BS_REV_A_LUT6_n_3 ),
        .Q(\C_reg_n_0_[6] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \C_reg[7] 
       (.C(Clk),
        .CE(1'b1),
        .D(\BS_Rev_Loop[12].I_BS_REV_A_LUT6_n_2 ),
        .Q(\C_reg_n_0_[7] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \C_reg[8] 
       (.C(Clk),
        .CE(1'b1),
        .D(\BS_Rev_Loop[13].I_BS_REV_A_LUT6_n_3 ),
        .Q(\C_reg_n_0_[8] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \C_reg[9] 
       (.C(Clk),
        .CE(1'b1),
        .D(\BS_Rev_Loop[15].I_BS_REV_A_LUT6_n_2 ),
        .Q(\C_reg_n_0_[9] ),
        .R(SR));
  FDRE \Using_BitField.Gen_Bits[0].mem_Rd_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[0]),
        .Q(\Using_BitField.Gen_Bits[0].mem_Rd_reg_n_0_[0] ),
        .R(1'b0));
  FDRE \Using_BitField.Gen_Bits[10].mem_Rd_reg[10] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[10]),
        .Q(p_2_in130_in),
        .R(1'b0));
  FDRE \Using_BitField.Gen_Bits[11].mem_Rd_reg[11] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[11]),
        .Q(p_2_in123_in),
        .R(1'b0));
  FDRE \Using_BitField.Gen_Bits[12].mem_Rd_reg[12] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[12]),
        .Q(p_2_in116_in),
        .R(1'b0));
  FDRE \Using_BitField.Gen_Bits[13].mem_Rd_reg[13] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[13]),
        .Q(p_2_in109_in),
        .R(1'b0));
  FDRE \Using_BitField.Gen_Bits[14].mem_Rd_reg[14] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[14]),
        .Q(p_2_in102_in),
        .R(1'b0));
  FDRE \Using_BitField.Gen_Bits[15].mem_Rd_reg[15] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[15]),
        .Q(p_2_in95_in),
        .R(1'b0));
  FDRE \Using_BitField.Gen_Bits[16].mem_Rd_reg[16] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[16]),
        .Q(p_2_in89_in),
        .R(1'b0));
  FDRE \Using_BitField.Gen_Bits[17].mem_Rd_reg[17] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[17]),
        .Q(p_2_in83_in),
        .R(1'b0));
  FDRE \Using_BitField.Gen_Bits[18].mem_Rd_reg[18] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[18]),
        .Q(p_2_in77_in),
        .R(1'b0));
  FDRE \Using_BitField.Gen_Bits[19].mem_Rd_reg[19] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[19]),
        .Q(p_2_in71_in),
        .R(1'b0));
  FDRE \Using_BitField.Gen_Bits[1].mem_Rd_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[1]),
        .Q(p_26_in),
        .R(1'b0));
  FDRE \Using_BitField.Gen_Bits[20].mem_Rd_reg[20] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[20]),
        .Q(p_2_in65_in),
        .R(1'b0));
  FDRE \Using_BitField.Gen_Bits[21].mem_Rd_reg[21] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[21]),
        .Q(p_2_in59_in),
        .R(1'b0));
  FDRE \Using_BitField.Gen_Bits[22].mem_Rd_reg[22] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[22]),
        .Q(p_2_in53_in),
        .R(1'b0));
  FDRE \Using_BitField.Gen_Bits[23].mem_Rd_reg[23] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[23]),
        .Q(p_2_in47_in),
        .R(1'b0));
  FDRE \Using_BitField.Gen_Bits[24].mem_Rd_reg[24] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[24]),
        .Q(p_2_in41_in),
        .R(1'b0));
  FDRE \Using_BitField.Gen_Bits[25].mem_Rd_reg[25] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[25]),
        .Q(p_2_in35_in),
        .R(1'b0));
  FDRE \Using_BitField.Gen_Bits[26].mem_Rd_reg[26] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[26]),
        .Q(p_2_in29_in),
        .R(1'b0));
  FDRE \Using_BitField.Gen_Bits[27].mem_Rd_reg[27] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[27]),
        .Q(p_2_in23_in),
        .R(1'b0));
  FDRE \Using_BitField.Gen_Bits[28].mem_Rd_reg[28] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[28]),
        .Q(p_2_in17_in),
        .R(1'b0));
  FDRE \Using_BitField.Gen_Bits[29].mem_Rd_reg[29] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[29]),
        .Q(p_2_in11_in),
        .R(1'b0));
  FDRE \Using_BitField.Gen_Bits[2].mem_Rd_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[2]),
        .Q(p_22_in),
        .R(1'b0));
  FDRE \Using_BitField.Gen_Bits[30].mem_Rd_reg[30] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[30]),
        .Q(p_2_in5_in),
        .R(1'b0));
  FDRE \Using_BitField.Gen_Bits[31].mem_Rd_reg[31] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[31]),
        .Q(\Using_BitField.Gen_Bits[31].mem_Rd_reg_n_0_[31] ),
        .R(1'b0));
  FDRE \Using_BitField.Gen_Bits[3].mem_Rd_reg[3] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[3]),
        .Q(p_18_in),
        .R(1'b0));
  FDRE \Using_BitField.Gen_Bits[4].mem_Rd_reg[4] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[4]),
        .Q(p_14_in),
        .R(1'b0));
  FDRE \Using_BitField.Gen_Bits[5].mem_Rd_reg[5] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[5]),
        .Q(p_10_in),
        .R(1'b0));
  FDRE \Using_BitField.Gen_Bits[6].mem_Rd_reg[6] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[6]),
        .Q(p_6_in),
        .R(1'b0));
  FDRE \Using_BitField.Gen_Bits[7].mem_Rd_reg[7] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[7]),
        .Q(p_2_in152_in),
        .R(1'b0));
  FDRE \Using_BitField.Gen_Bits[8].mem_Rd_reg[8] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[8]),
        .Q(p_2_in144_in),
        .R(1'b0));
  FDRE \Using_BitField.Gen_Bits[9].mem_Rd_reg[9] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[9]),
        .Q(p_2_in137_in),
        .R(1'b0));
  FDSE \Using_BitField.mem_mask0_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_BitField.mem_mask0_reg[0]_0 [31]),
        .Q(p_28_in),
        .S(mask_reset));
  FDSE \Using_BitField.mem_mask0_reg[10] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_BitField.mem_mask0_reg[0]_0 [21]),
        .Q(p_1_in59_in),
        .S(mask_reset));
  FDSE \Using_BitField.mem_mask0_reg[11] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_BitField.mem_mask0_reg[0]_0 [20]),
        .Q(p_1_in56_in),
        .S(mask_reset));
  FDSE \Using_BitField.mem_mask0_reg[12] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_BitField.mem_mask0_reg[0]_0 [19]),
        .Q(p_1_in53_in),
        .S(mask_reset));
  FDSE \Using_BitField.mem_mask0_reg[13] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_BitField.mem_mask0_reg[0]_0 [18]),
        .Q(p_1_in50_in),
        .S(mask_reset));
  FDSE \Using_BitField.mem_mask0_reg[14] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_BitField.mem_mask0_reg[0]_0 [17]),
        .Q(p_1_in47_in),
        .S(mask_reset));
  FDSE \Using_BitField.mem_mask0_reg[15] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_BitField.mem_mask0_reg[0]_0 [16]),
        .Q(p_1_in44_in),
        .S(mask_reset));
  FDSE \Using_BitField.mem_mask0_reg[16] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_BitField.mem_mask0_reg[0]_0 [15]),
        .Q(p_1_in41_in),
        .S(mask_reset));
  FDSE \Using_BitField.mem_mask0_reg[17] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_BitField.mem_mask0_reg[0]_0 [14]),
        .Q(p_1_in38_in),
        .S(mask_reset));
  FDSE \Using_BitField.mem_mask0_reg[18] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_BitField.mem_mask0_reg[0]_0 [13]),
        .Q(p_1_in35_in),
        .S(mask_reset));
  FDSE \Using_BitField.mem_mask0_reg[19] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_BitField.mem_mask0_reg[0]_0 [12]),
        .Q(p_1_in32_in),
        .S(mask_reset));
  FDSE \Using_BitField.mem_mask0_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_BitField.mem_mask0_reg[0]_0 [30]),
        .Q(p_24_in),
        .S(mask_reset));
  FDSE \Using_BitField.mem_mask0_reg[20] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_BitField.mem_mask0_reg[0]_0 [11]),
        .Q(p_1_in29_in),
        .S(mask_reset));
  FDSE \Using_BitField.mem_mask0_reg[21] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_BitField.mem_mask0_reg[0]_0 [10]),
        .Q(p_1_in26_in),
        .S(mask_reset));
  FDSE \Using_BitField.mem_mask0_reg[22] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_BitField.mem_mask0_reg[0]_0 [9]),
        .Q(p_1_in23_in),
        .S(mask_reset));
  FDSE \Using_BitField.mem_mask0_reg[23] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_BitField.mem_mask0_reg[0]_0 [8]),
        .Q(p_1_in20_in),
        .S(mask_reset));
  FDSE \Using_BitField.mem_mask0_reg[24] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_BitField.mem_mask0_reg[0]_0 [7]),
        .Q(p_1_in17_in),
        .S(mask_reset));
  FDSE \Using_BitField.mem_mask0_reg[25] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_BitField.mem_mask0_reg[0]_0 [6]),
        .Q(p_1_in14_in),
        .S(mask_reset));
  FDSE \Using_BitField.mem_mask0_reg[26] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_BitField.mem_mask0_reg[0]_0 [5]),
        .Q(p_1_in11_in),
        .S(mask_reset));
  FDSE \Using_BitField.mem_mask0_reg[27] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_BitField.mem_mask0_reg[0]_0 [4]),
        .Q(p_1_in8_in),
        .S(mask_reset));
  FDSE \Using_BitField.mem_mask0_reg[28] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_BitField.mem_mask0_reg[0]_0 [3]),
        .Q(p_1_in5_in),
        .S(mask_reset));
  FDSE \Using_BitField.mem_mask0_reg[29] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_BitField.mem_mask0_reg[0]_0 [2]),
        .Q(p_1_in2_in),
        .S(mask_reset));
  FDSE \Using_BitField.mem_mask0_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_BitField.mem_mask0_reg[0]_0 [29]),
        .Q(p_20_in),
        .S(mask_reset));
  FDSE \Using_BitField.mem_mask0_reg[30] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_BitField.mem_mask0_reg[0]_0 [1]),
        .Q(p_1_in),
        .S(mask_reset));
  FDSE \Using_BitField.mem_mask0_reg[31] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_BitField.mem_mask0_reg[0]_0 [0]),
        .Q(\Using_BitField.mem_mask0_reg_n_0_[31] ),
        .S(mask_reset));
  FDSE \Using_BitField.mem_mask0_reg[3] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_BitField.mem_mask0_reg[0]_0 [28]),
        .Q(p_16_in),
        .S(mask_reset));
  FDSE \Using_BitField.mem_mask0_reg[4] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_BitField.mem_mask0_reg[0]_0 [27]),
        .Q(p_12_in),
        .S(mask_reset));
  FDSE \Using_BitField.mem_mask0_reg[5] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_BitField.mem_mask0_reg[0]_0 [26]),
        .Q(p_8_in),
        .S(mask_reset));
  FDSE \Using_BitField.mem_mask0_reg[6] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_BitField.mem_mask0_reg[0]_0 [25]),
        .Q(p_4_in),
        .S(mask_reset));
  FDSE \Using_BitField.mem_mask0_reg[7] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_BitField.mem_mask0_reg[0]_0 [24]),
        .Q(p_1_in68_in),
        .S(mask_reset));
  FDSE \Using_BitField.mem_mask0_reg[8] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_BitField.mem_mask0_reg[0]_0 [23]),
        .Q(p_1_in65_in),
        .S(mask_reset));
  FDSE \Using_BitField.mem_mask0_reg[9] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_BitField.mem_mask0_reg[0]_0 [22]),
        .Q(p_1_in62_in),
        .S(mask_reset));
  FDRE \Using_BitField.mem_mask1_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[30]),
        .Q(p_27_in),
        .R(mask_reset));
  FDRE \Using_BitField.mem_mask1_reg[10] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[20]),
        .Q(p_0_in58_in),
        .R(mask_reset));
  FDRE \Using_BitField.mem_mask1_reg[11] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[19]),
        .Q(p_0_in55_in),
        .R(mask_reset));
  FDRE \Using_BitField.mem_mask1_reg[12] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[18]),
        .Q(p_0_in52_in),
        .R(mask_reset));
  FDRE \Using_BitField.mem_mask1_reg[13] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[17]),
        .Q(p_0_in49_in),
        .R(mask_reset));
  FDRE \Using_BitField.mem_mask1_reg[14] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[16]),
        .Q(p_0_in46_in),
        .R(mask_reset));
  FDRE \Using_BitField.mem_mask1_reg[15] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[15]),
        .Q(p_0_in43_in),
        .R(mask_reset));
  FDRE \Using_BitField.mem_mask1_reg[16] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[14]),
        .Q(p_0_in40_in),
        .R(mask_reset));
  FDRE \Using_BitField.mem_mask1_reg[17] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[13]),
        .Q(p_0_in37_in),
        .R(mask_reset));
  FDRE \Using_BitField.mem_mask1_reg[18] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[12]),
        .Q(p_0_in34_in),
        .R(mask_reset));
  FDRE \Using_BitField.mem_mask1_reg[19] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[11]),
        .Q(p_0_in31_in),
        .R(mask_reset));
  FDRE \Using_BitField.mem_mask1_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[29]),
        .Q(p_23_in),
        .R(mask_reset));
  FDRE \Using_BitField.mem_mask1_reg[20] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[10]),
        .Q(p_0_in28_in),
        .R(mask_reset));
  FDRE \Using_BitField.mem_mask1_reg[21] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[9]),
        .Q(p_0_in25_in),
        .R(mask_reset));
  FDRE \Using_BitField.mem_mask1_reg[22] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[8]),
        .Q(p_0_in22_in),
        .R(mask_reset));
  FDRE \Using_BitField.mem_mask1_reg[23] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[7]),
        .Q(p_0_in19_in),
        .R(mask_reset));
  FDRE \Using_BitField.mem_mask1_reg[24] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[6]),
        .Q(p_0_in16_in),
        .R(mask_reset));
  FDRE \Using_BitField.mem_mask1_reg[25] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[5]),
        .Q(p_0_in13_in),
        .R(mask_reset));
  FDRE \Using_BitField.mem_mask1_reg[26] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[4]),
        .Q(p_0_in10_in),
        .R(mask_reset));
  FDRE \Using_BitField.mem_mask1_reg[27] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[3]),
        .Q(p_0_in7_in),
        .R(mask_reset));
  FDRE \Using_BitField.mem_mask1_reg[28] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[2]),
        .Q(p_0_in4_in),
        .R(mask_reset));
  FDRE \Using_BitField.mem_mask1_reg[29] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[1]),
        .Q(p_0_in1_in),
        .R(mask_reset));
  FDRE \Using_BitField.mem_mask1_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[28]),
        .Q(p_19_in),
        .R(mask_reset));
  FDRE \Using_BitField.mem_mask1_reg[30] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[0]),
        .Q(p_0_in),
        .R(mask_reset));
  FDRE \Using_BitField.mem_mask1_reg[3] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[27]),
        .Q(p_15_in),
        .R(mask_reset));
  FDRE \Using_BitField.mem_mask1_reg[4] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[26]),
        .Q(p_11_in),
        .R(mask_reset));
  FDRE \Using_BitField.mem_mask1_reg[5] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[25]),
        .Q(p_7_in),
        .R(mask_reset));
  FDRE \Using_BitField.mem_mask1_reg[6] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[24]),
        .Q(p_3_in),
        .R(mask_reset));
  FDRE \Using_BitField.mem_mask1_reg[7] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[23]),
        .Q(p_0_in67_in),
        .R(mask_reset));
  FDRE \Using_BitField.mem_mask1_reg[8] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[22]),
        .Q(p_0_in64_in),
        .R(mask_reset));
  FDRE \Using_BitField.mem_mask1_reg[9] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[21]),
        .Q(p_0_in61_in),
        .R(mask_reset));
  FDRE #(
    .INIT(1'b0)) 
    \void_bit16_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(void_bit),
        .Q(I3),
        .R(SR));
endmodule

module block_design_microblaze_0_0_carry_equal
   (\Using_FPGA.Native ,
    byte_3,
    byte_0x_3,
    \Use_The_PCMP_instr.CLZ_Instr_reg ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.The_Compare[2].sel_reg ,
    S,
    \Using_FPGA.The_Compare[0].sel_reg ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    clz_instr,
    \Using_FPGA.Native_i_5 ,
    \Using_FPGA.Native_i_1__46 ,
    Shifted);
  output \Using_FPGA.Native ;
  output byte_3;
  output byte_0x_3;
  output \Use_The_PCMP_instr.CLZ_Instr_reg ;
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  input \Using_FPGA.The_Compare[2].sel_reg ;
  input S;
  input \Using_FPGA.The_Compare[0].sel_reg ;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input clz_instr;
  input \Using_FPGA.Native_i_5 ;
  input \Using_FPGA.Native_i_1__46 ;
  input Shifted;

  wire S;
  wire Shifted;
  wire \Use_The_PCMP_instr.CLZ_Instr_reg ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_i_1__46 ;
  wire \Using_FPGA.Native_i_5 ;
  wire \Using_FPGA.The_Compare[0].sel_reg ;
  wire \Using_FPGA.The_Compare[2].sel_reg ;
  wire byte_0x_3;
  wire byte_3;
  wire carry_1;
  wire carry_2;
  wire clz_instr;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;

  block_design_microblaze_0_0_MB_MUXCY_267 \Using_FPGA.MUXCY_L_Enable 
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .byte_3(byte_3),
        .lopt(lopt_4),
        .lopt_1(lopt_5));
  block_design_microblaze_0_0_MB_MUXCY_268 \Using_FPGA.MUXCY_L_Enable_2 
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native_3 ),
        .byte_0x_3(byte_0x_3),
        .byte_3(byte_3));
  block_design_microblaze_0_0_MB_MUXCY_269 \Using_FPGA.The_Compare[0].MUXCY_L_I1 
       (.Shifted(Shifted),
        .\Use_The_PCMP_instr.CLZ_Instr_reg (\Use_The_PCMP_instr.CLZ_Instr_reg ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_i_1__46 (\Using_FPGA.Native_i_1__46 ),
        .\Using_FPGA.Native_i_5 (\Using_FPGA.Native_i_5 ),
        .\Using_FPGA.The_Compare[0].sel_reg (\Using_FPGA.The_Compare[0].sel_reg ),
        .carry_2(carry_2),
        .clz_instr(clz_instr),
        .lopt(lopt_2),
        .lopt_1(lopt_3));
  block_design_microblaze_0_0_MB_MUXCY_270 \Using_FPGA.The_Compare[1].MUXCY_L_I1 
       (.S(S),
        .carry_1(carry_1),
        .carry_2(carry_2),
        .lopt(lopt),
        .lopt_1(lopt_1));
  block_design_microblaze_0_0_MB_MUXCY_271 \Using_FPGA.The_Compare[2].MUXCY_L_I1 
       (.\Using_FPGA.The_Compare[2].sel_reg (\Using_FPGA.The_Compare[2].sel_reg ),
        .carry_1(carry_1),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(S),
        .lopt_3(lopt_2),
        .lopt_4(lopt_3),
        .lopt_5(\Using_FPGA.The_Compare[0].sel_reg ),
        .lopt_6(lopt_4),
        .lopt_7(lopt_5),
        .lopt_8(\Using_FPGA.Native_2 ));
endmodule

(* ORIG_REF_NAME = "carry_equal" *) 
module block_design_microblaze_0_0_carry_equal_248
   (\Using_FPGA.Native ,
    byte_2,
    byte_0x_2,
    \Using_FPGA.The_Compare[2].sel_reg_0 ,
    S_1,
    \Using_FPGA.The_Compare[0].sel_reg_2 ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 );
  output \Using_FPGA.Native ;
  output byte_2;
  output byte_0x_2;
  input \Using_FPGA.The_Compare[2].sel_reg_0 ;
  input S_1;
  input \Using_FPGA.The_Compare[0].sel_reg_2 ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;

  wire S_1;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.The_Compare[0].sel_reg_2 ;
  wire \Using_FPGA.The_Compare[2].sel_reg_0 ;
  wire byte_0x_2;
  wire byte_2;
  wire carry_1;
  wire carry_2;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;

  block_design_microblaze_0_0_MB_MUXCY_262 \Using_FPGA.MUXCY_L_Enable 
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .byte_2(byte_2),
        .lopt(lopt_4),
        .lopt_1(lopt_5));
  block_design_microblaze_0_0_MB_MUXCY_263 \Using_FPGA.MUXCY_L_Enable_2 
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .byte_0x_2(byte_0x_2),
        .byte_2(byte_2));
  block_design_microblaze_0_0_MB_MUXCY_264 \Using_FPGA.The_Compare[0].MUXCY_L_I1 
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.The_Compare[0].sel_reg_2 (\Using_FPGA.The_Compare[0].sel_reg_2 ),
        .carry_2(carry_2),
        .lopt(lopt_2),
        .lopt_1(lopt_3));
  block_design_microblaze_0_0_MB_MUXCY_265 \Using_FPGA.The_Compare[1].MUXCY_L_I1 
       (.S_1(S_1),
        .carry_1(carry_1),
        .carry_2(carry_2),
        .lopt(lopt),
        .lopt_1(lopt_1));
  block_design_microblaze_0_0_MB_MUXCY_266 \Using_FPGA.The_Compare[2].MUXCY_L_I1 
       (.\Using_FPGA.The_Compare[2].sel_reg_0 (\Using_FPGA.The_Compare[2].sel_reg_0 ),
        .carry_1(carry_1),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(S_1),
        .lopt_3(lopt_2),
        .lopt_4(lopt_3),
        .lopt_5(\Using_FPGA.The_Compare[0].sel_reg_2 ),
        .lopt_6(lopt_4),
        .lopt_7(lopt_5),
        .lopt_8(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "carry_equal" *) 
module block_design_microblaze_0_0_carry_equal_249
   (\Using_FPGA.Native ,
    byte_1,
    byte_0x_1,
    \Using_FPGA.The_Compare[2].sel_reg_3 ,
    S_4,
    \Using_FPGA.The_Compare[0].sel_reg_5 ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 );
  output \Using_FPGA.Native ;
  output byte_1;
  output byte_0x_1;
  input \Using_FPGA.The_Compare[2].sel_reg_3 ;
  input S_4;
  input \Using_FPGA.The_Compare[0].sel_reg_5 ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;

  wire S_4;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.The_Compare[0].sel_reg_5 ;
  wire \Using_FPGA.The_Compare[2].sel_reg_3 ;
  wire byte_0x_1;
  wire byte_1;
  wire carry_1;
  wire carry_2;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;

  block_design_microblaze_0_0_MB_MUXCY_257 \Using_FPGA.MUXCY_L_Enable 
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .byte_1(byte_1),
        .lopt(lopt_4),
        .lopt_1(lopt_5));
  block_design_microblaze_0_0_MB_MUXCY_258 \Using_FPGA.MUXCY_L_Enable_2 
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .byte_0x_1(byte_0x_1),
        .byte_1(byte_1));
  block_design_microblaze_0_0_MB_MUXCY_259 \Using_FPGA.The_Compare[0].MUXCY_L_I1 
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.The_Compare[0].sel_reg_5 (\Using_FPGA.The_Compare[0].sel_reg_5 ),
        .carry_2(carry_2),
        .lopt(lopt_2),
        .lopt_1(lopt_3));
  block_design_microblaze_0_0_MB_MUXCY_260 \Using_FPGA.The_Compare[1].MUXCY_L_I1 
       (.S_4(S_4),
        .carry_1(carry_1),
        .carry_2(carry_2),
        .lopt(lopt),
        .lopt_1(lopt_1));
  block_design_microblaze_0_0_MB_MUXCY_261 \Using_FPGA.The_Compare[2].MUXCY_L_I1 
       (.\Using_FPGA.The_Compare[2].sel_reg_3 (\Using_FPGA.The_Compare[2].sel_reg_3 ),
        .carry_1(carry_1),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(S_4),
        .lopt_3(lopt_2),
        .lopt_4(lopt_3),
        .lopt_5(\Using_FPGA.The_Compare[0].sel_reg_5 ),
        .lopt_6(lopt_4),
        .lopt_7(lopt_5),
        .lopt_8(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "carry_equal" *) 
module block_design_microblaze_0_0_carry_equal_250
   (\Using_FPGA.Native ,
    byte_0,
    byte_0x_0,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.The_Compare[2].sel_reg_6 ,
    S_7,
    \Using_FPGA.The_Compare[0].sel_reg_8 ,
    \Using_FPGA.Native_1 ,
    Enable_2,
    \Using_FPGA.Native_i_7 ,
    Op1_Shift,
    \Using_FPGA.Native_i_7_0 );
  output \Using_FPGA.Native ;
  output byte_0;
  output byte_0x_0;
  output \Using_FPGA.Native_0 ;
  input \Using_FPGA.The_Compare[2].sel_reg_6 ;
  input S_7;
  input \Using_FPGA.The_Compare[0].sel_reg_8 ;
  input \Using_FPGA.Native_1 ;
  input Enable_2;
  input \Using_FPGA.Native_i_7 ;
  input Op1_Shift;
  input \Using_FPGA.Native_i_7_0 ;

  wire Enable_2;
  wire Op1_Shift;
  wire S_7;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_i_7 ;
  wire \Using_FPGA.Native_i_7_0 ;
  wire \Using_FPGA.The_Compare[0].sel_reg_8 ;
  wire \Using_FPGA.The_Compare[2].sel_reg_6 ;
  wire byte_0;
  wire byte_0x_0;
  wire carry_1;
  wire carry_2;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;

  block_design_microblaze_0_0_MB_MUXCY_252 \Using_FPGA.MUXCY_L_Enable 
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .byte_0(byte_0),
        .lopt(lopt_4),
        .lopt_1(lopt_5));
  block_design_microblaze_0_0_MB_MUXCY_253 \Using_FPGA.MUXCY_L_Enable_2 
       (.Enable_2(Enable_2),
        .byte_0(byte_0),
        .byte_0x_0(byte_0x_0));
  block_design_microblaze_0_0_MB_MUXCY_254 \Using_FPGA.The_Compare[0].MUXCY_L_I1 
       (.Op1_Shift(Op1_Shift),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_i_7 (\Using_FPGA.Native_i_7 ),
        .\Using_FPGA.Native_i_7_0 (\Using_FPGA.Native_i_7_0 ),
        .\Using_FPGA.The_Compare[0].sel_reg_8 (\Using_FPGA.The_Compare[0].sel_reg_8 ),
        .carry_2(carry_2),
        .lopt(lopt_2),
        .lopt_1(lopt_3));
  block_design_microblaze_0_0_MB_MUXCY_255 \Using_FPGA.The_Compare[1].MUXCY_L_I1 
       (.S_7(S_7),
        .carry_1(carry_1),
        .carry_2(carry_2),
        .lopt(lopt),
        .lopt_1(lopt_1));
  block_design_microblaze_0_0_MB_MUXCY_256 \Using_FPGA.The_Compare[2].MUXCY_L_I1 
       (.\Using_FPGA.The_Compare[2].sel_reg_6 (\Using_FPGA.The_Compare[2].sel_reg_6 ),
        .carry_1(carry_1),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(S_7),
        .lopt_3(lopt_2),
        .lopt_4(lopt_3),
        .lopt_5(\Using_FPGA.The_Compare[0].sel_reg_8 ),
        .lopt_6(lopt_4),
        .lopt_7(lopt_5),
        .lopt_8(\Using_FPGA.Native_1 ));
endmodule

module block_design_microblaze_0_0_debug_stat_counter
   (Empty_reg_0,
    \Running_reg[0]_0 ,
    D,
    Is_Valid,
    Q,
    Clk,
    sync_reset,
    Empty_reg_1,
    \Is_Valid_reg[0]_0 ,
    \Gen_Simple_Counter.Access_Count_i_reg[31]_0 ,
    E,
    ready,
    Stopping_reg_0,
    Stopping_reg_1,
    clear_cmd,
    \Gen_Simple_Counter.Access_Count_i_reg[0]_0 ,
    \Gen_Simple_Counter.Access_Count_i_reg[3]_0 );
  output Empty_reg_0;
  output \Running_reg[0]_0 ;
  output [1:0]D;
  output Is_Valid;
  output [31:0]Q;
  input Clk;
  input sync_reset;
  input Empty_reg_1;
  input \Is_Valid_reg[0]_0 ;
  input [3:0]\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ;
  input [0:0]E;
  input ready;
  input Stopping_reg_0;
  input Stopping_reg_1;
  input clear_cmd;
  input [31:0]\Gen_Simple_Counter.Access_Count_i_reg[0]_0 ;
  input \Gen_Simple_Counter.Access_Count_i_reg[3]_0 ;

  wire Clk;
  wire [1:0]D;
  wire [0:0]E;
  wire Empty_reg_0;
  wire Empty_reg_1;
  wire Full_i_1_n_0;
  wire \Gen_Simple_Counter.Access_Count_i[0]_i_3__3_n_0 ;
  wire [31:0]\Gen_Simple_Counter.Access_Count_i_reg[0]_0 ;
  wire [3:0]\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ;
  wire \Gen_Simple_Counter.Access_Count_i_reg[3]_0 ;
  wire \Gen_Simple_Counter.Count[0][15]_i_1_n_0 ;
  wire \Gen_Simple_Counter.Count[0][15]_i_2_n_0 ;
  wire \Gen_Simple_Counter.Count[0][15]_i_4_n_0 ;
  wire \Gen_Simple_Counter.Count[0][15]_i_5_n_0 ;
  wire \Gen_Simple_Counter.Count[0][15]_i_6_n_0 ;
  wire \Gen_Simple_Counter.Count[0][15]_i_7_n_0 ;
  wire \Gen_Simple_Counter.Count[0][15]_i_8_n_0 ;
  wire \Gen_Simple_Counter.Count_reg[0][11]_i_1_n_0 ;
  wire \Gen_Simple_Counter.Count_reg[0][11]_i_1_n_1 ;
  wire \Gen_Simple_Counter.Count_reg[0][11]_i_1_n_2 ;
  wire \Gen_Simple_Counter.Count_reg[0][11]_i_1_n_3 ;
  wire \Gen_Simple_Counter.Count_reg[0][11]_i_1_n_4 ;
  wire \Gen_Simple_Counter.Count_reg[0][11]_i_1_n_5 ;
  wire \Gen_Simple_Counter.Count_reg[0][11]_i_1_n_6 ;
  wire \Gen_Simple_Counter.Count_reg[0][11]_i_1_n_7 ;
  wire \Gen_Simple_Counter.Count_reg[0][15]_i_3_n_0 ;
  wire \Gen_Simple_Counter.Count_reg[0][15]_i_3_n_1 ;
  wire \Gen_Simple_Counter.Count_reg[0][15]_i_3_n_2 ;
  wire \Gen_Simple_Counter.Count_reg[0][15]_i_3_n_3 ;
  wire \Gen_Simple_Counter.Count_reg[0][15]_i_3_n_4 ;
  wire \Gen_Simple_Counter.Count_reg[0][15]_i_3_n_5 ;
  wire \Gen_Simple_Counter.Count_reg[0][15]_i_3_n_6 ;
  wire \Gen_Simple_Counter.Count_reg[0][15]_i_3_n_7 ;
  wire \Gen_Simple_Counter.Count_reg[0][3]_i_1_n_1 ;
  wire \Gen_Simple_Counter.Count_reg[0][3]_i_1_n_2 ;
  wire \Gen_Simple_Counter.Count_reg[0][3]_i_1_n_3 ;
  wire \Gen_Simple_Counter.Count_reg[0][3]_i_1_n_4 ;
  wire \Gen_Simple_Counter.Count_reg[0][3]_i_1_n_5 ;
  wire \Gen_Simple_Counter.Count_reg[0][3]_i_1_n_6 ;
  wire \Gen_Simple_Counter.Count_reg[0][3]_i_1_n_7 ;
  wire \Gen_Simple_Counter.Count_reg[0][7]_i_1_n_0 ;
  wire \Gen_Simple_Counter.Count_reg[0][7]_i_1_n_1 ;
  wire \Gen_Simple_Counter.Count_reg[0][7]_i_1_n_2 ;
  wire \Gen_Simple_Counter.Count_reg[0][7]_i_1_n_3 ;
  wire \Gen_Simple_Counter.Count_reg[0][7]_i_1_n_4 ;
  wire \Gen_Simple_Counter.Count_reg[0][7]_i_1_n_5 ;
  wire \Gen_Simple_Counter.Count_reg[0][7]_i_1_n_6 ;
  wire \Gen_Simple_Counter.Count_reg[0][7]_i_1_n_7 ;
  wire [0:15]\Gen_Simple_Counter.Count_reg[0]_25 ;
  wire \Gen_Simple_Counter.Overflow_i_1_n_0 ;
  wire Is_Valid;
  wire \Is_Valid_reg[0]_0 ;
  wire [31:0]Q;
  wire \Running[0]_i_1_n_0 ;
  wire \Running_reg[0]_0 ;
  wire Stopping4_out;
  wire Stopping_reg_0;
  wire Stopping_reg_1;
  wire Stopping_reg_n_0;
  wire clear_cmd;
  wire [31:0]p_0_in;
  wire [0:0]p_2_out;
  wire [31:1]plusOp;
  wire plusOp_carry__0_n_0;
  wire plusOp_carry__0_n_1;
  wire plusOp_carry__0_n_2;
  wire plusOp_carry__0_n_3;
  wire plusOp_carry__1_n_0;
  wire plusOp_carry__1_n_1;
  wire plusOp_carry__1_n_2;
  wire plusOp_carry__1_n_3;
  wire plusOp_carry__2_n_0;
  wire plusOp_carry__2_n_1;
  wire plusOp_carry__2_n_2;
  wire plusOp_carry__2_n_3;
  wire plusOp_carry__3_n_0;
  wire plusOp_carry__3_n_1;
  wire plusOp_carry__3_n_2;
  wire plusOp_carry__3_n_3;
  wire plusOp_carry__4_n_0;
  wire plusOp_carry__4_n_1;
  wire plusOp_carry__4_n_2;
  wire plusOp_carry__4_n_3;
  wire plusOp_carry__5_n_0;
  wire plusOp_carry__5_n_1;
  wire plusOp_carry__5_n_2;
  wire plusOp_carry__5_n_3;
  wire plusOp_carry__6_n_2;
  wire plusOp_carry__6_n_3;
  wire plusOp_carry_n_0;
  wire plusOp_carry_n_1;
  wire plusOp_carry_n_2;
  wire plusOp_carry_n_3;
  wire ready;
  wire sync_reset;
  wire [3:3]\NLW_Gen_Simple_Counter.Count_reg[0][3]_i_1_CO_UNCONNECTED ;
  wire [3:2]NLW_plusOp_carry__6_CO_UNCONNECTED;
  wire [3:3]NLW_plusOp_carry__6_O_UNCONNECTED;

  FDSE Empty_reg
       (.C(Clk),
        .CE(1'b1),
        .D(Empty_reg_1),
        .Q(Empty_reg_0),
        .S(sync_reset));
  LUT4 #(
    .INIT(16'hFF04)) 
    Full_i_1
       (.I0(Stopping_reg_0),
        .I1(Stopping_reg_1),
        .I2(Empty_reg_0),
        .I3(D[1]),
        .O(Full_i_1_n_0));
  FDRE Full_reg
       (.C(Clk),
        .CE(1'b1),
        .D(Full_i_1_n_0),
        .Q(D[1]),
        .R(sync_reset));
  LUT4 #(
    .INIT(16'hFEEE)) 
    \Gen_Simple_Counter.Access_Count_i[0]_i_1 
       (.I0(\Gen_Simple_Counter.Access_Count_i[0]_i_3__3_n_0 ),
        .I1(clear_cmd),
        .I2(Is_Valid),
        .I3(Stopping_reg_n_0),
        .O(p_2_out));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[0]_i_2 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [31]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__3_n_0 ),
        .I2(plusOp[31]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[3]_0 ),
        .O(p_0_in[31]));
  LUT5 #(
    .INIT(32'h00000004)) 
    \Gen_Simple_Counter.Access_Count_i[0]_i_3__3 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 [3]),
        .I1(E),
        .I2(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 [2]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 [1]),
        .I4(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 [0]),
        .O(\Gen_Simple_Counter.Access_Count_i[0]_i_3__3_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[10]_i_1 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [21]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__3_n_0 ),
        .I2(plusOp[21]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[3]_0 ),
        .O(p_0_in[21]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[11]_i_1 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [20]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__3_n_0 ),
        .I2(plusOp[20]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[3]_0 ),
        .O(p_0_in[20]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[12]_i_1 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [19]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__3_n_0 ),
        .I2(plusOp[19]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[3]_0 ),
        .O(p_0_in[19]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[13]_i_1 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [18]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__3_n_0 ),
        .I2(plusOp[18]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[3]_0 ),
        .O(p_0_in[18]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[14]_i_1 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [17]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__3_n_0 ),
        .I2(plusOp[17]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[3]_0 ),
        .O(p_0_in[17]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[15]_i_1 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [16]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__3_n_0 ),
        .I2(plusOp[16]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[3]_0 ),
        .O(p_0_in[16]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[16]_i_1 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [15]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__3_n_0 ),
        .I2(plusOp[15]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[3]_0 ),
        .O(p_0_in[15]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[17]_i_1 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [14]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__3_n_0 ),
        .I2(plusOp[14]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[3]_0 ),
        .O(p_0_in[14]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[18]_i_1 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [13]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__3_n_0 ),
        .I2(plusOp[13]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[3]_0 ),
        .O(p_0_in[13]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[19]_i_1 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [12]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__3_n_0 ),
        .I2(plusOp[12]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[3]_0 ),
        .O(p_0_in[12]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[1]_i_1 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [30]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__3_n_0 ),
        .I2(plusOp[30]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[3]_0 ),
        .O(p_0_in[30]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[20]_i_1 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [11]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__3_n_0 ),
        .I2(plusOp[11]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[3]_0 ),
        .O(p_0_in[11]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[21]_i_1 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [10]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__3_n_0 ),
        .I2(plusOp[10]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[3]_0 ),
        .O(p_0_in[10]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[22]_i_1 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [9]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__3_n_0 ),
        .I2(plusOp[9]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[3]_0 ),
        .O(p_0_in[9]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[23]_i_1 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [8]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__3_n_0 ),
        .I2(plusOp[8]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[3]_0 ),
        .O(p_0_in[8]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[24]_i_1 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [7]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__3_n_0 ),
        .I2(plusOp[7]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[3]_0 ),
        .O(p_0_in[7]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[25]_i_1 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [6]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__3_n_0 ),
        .I2(plusOp[6]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[3]_0 ),
        .O(p_0_in[6]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[26]_i_1 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [5]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__3_n_0 ),
        .I2(plusOp[5]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[3]_0 ),
        .O(p_0_in[5]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[27]_i_1 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [4]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__3_n_0 ),
        .I2(plusOp[4]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[3]_0 ),
        .O(p_0_in[4]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[28]_i_1 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [3]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__3_n_0 ),
        .I2(plusOp[3]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[3]_0 ),
        .O(p_0_in[3]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[29]_i_1 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [2]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__3_n_0 ),
        .I2(plusOp[2]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[3]_0 ),
        .O(p_0_in[2]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[2]_i_1 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [29]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__3_n_0 ),
        .I2(plusOp[29]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[3]_0 ),
        .O(p_0_in[29]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[30]_i_1 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [1]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__3_n_0 ),
        .I2(plusOp[1]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[3]_0 ),
        .O(p_0_in[1]));
  LUT4 #(
    .INIT(16'h888B)) 
    \Gen_Simple_Counter.Access_Count_i[31]_i_1 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [0]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__3_n_0 ),
        .I2(Q[0]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[3]_0 ),
        .O(p_0_in[0]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[3]_i_1 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [28]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__3_n_0 ),
        .I2(plusOp[28]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[3]_0 ),
        .O(p_0_in[28]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[4]_i_1 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [27]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__3_n_0 ),
        .I2(plusOp[27]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[3]_0 ),
        .O(p_0_in[27]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[5]_i_1 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [26]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__3_n_0 ),
        .I2(plusOp[26]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[3]_0 ),
        .O(p_0_in[26]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[6]_i_1 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [25]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__3_n_0 ),
        .I2(plusOp[25]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[3]_0 ),
        .O(p_0_in[25]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[7]_i_1 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [24]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__3_n_0 ),
        .I2(plusOp[24]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[3]_0 ),
        .O(p_0_in[24]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[8]_i_1 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [23]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__3_n_0 ),
        .I2(plusOp[23]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[3]_0 ),
        .O(p_0_in[23]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[9]_i_1 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [22]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__3_n_0 ),
        .I2(plusOp[22]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[3]_0 ),
        .O(p_0_in[22]));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[0] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[31]),
        .Q(Q[31]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[10] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[21]),
        .Q(Q[21]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[11] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[20]),
        .Q(Q[20]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[12] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[19]),
        .Q(Q[19]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[13] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[18]),
        .Q(Q[18]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[14] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[17]),
        .Q(Q[17]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[15] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[16]),
        .Q(Q[16]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[16] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[15]),
        .Q(Q[15]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[17] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[14]),
        .Q(Q[14]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[18] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[13]),
        .Q(Q[13]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[19] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[12]),
        .Q(Q[12]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[1] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[30]),
        .Q(Q[30]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[20] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[11]),
        .Q(Q[11]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[21] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[10]),
        .Q(Q[10]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[22] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[9]),
        .Q(Q[9]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[23] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[8]),
        .Q(Q[8]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[24] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[7]),
        .Q(Q[7]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[25] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[6]),
        .Q(Q[6]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[26] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[5]),
        .Q(Q[5]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[27] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[4]),
        .Q(Q[4]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[28] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[3]),
        .Q(Q[3]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[29] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[2]),
        .Q(Q[2]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[2] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[29]),
        .Q(Q[29]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[30] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[1]),
        .Q(Q[1]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[31] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[0]),
        .Q(Q[0]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[3] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[28]),
        .Q(Q[28]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[4] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[27]),
        .Q(Q[27]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[5] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[26]),
        .Q(Q[26]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[6] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[25]),
        .Q(Q[25]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[7] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[24]),
        .Q(Q[24]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[8] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[23]),
        .Q(Q[23]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[9] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[22]),
        .Q(Q[22]),
        .R(sync_reset));
  LUT2 #(
    .INIT(4'hE)) 
    \Gen_Simple_Counter.Count[0][15]_i_1 
       (.I0(sync_reset),
        .I1(Stopping_reg_n_0),
        .O(\Gen_Simple_Counter.Count[0][15]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Gen_Simple_Counter.Count[0][15]_i_2 
       (.I0(\Running_reg[0]_0 ),
        .I1(\Gen_Simple_Counter.Count[0][15]_i_4_n_0 ),
        .O(\Gen_Simple_Counter.Count[0][15]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hBFFFFFFFFFFFFFFF)) 
    \Gen_Simple_Counter.Count[0][15]_i_4 
       (.I0(\Gen_Simple_Counter.Count[0][15]_i_6_n_0 ),
        .I1(\Gen_Simple_Counter.Count_reg[0]_25 [7]),
        .I2(\Gen_Simple_Counter.Count_reg[0]_25 [8]),
        .I3(\Gen_Simple_Counter.Count_reg[0]_25 [0]),
        .I4(\Gen_Simple_Counter.Count_reg[0]_25 [1]),
        .I5(\Gen_Simple_Counter.Count[0][15]_i_7_n_0 ),
        .O(\Gen_Simple_Counter.Count[0][15]_i_4_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \Gen_Simple_Counter.Count[0][15]_i_5 
       (.I0(\Gen_Simple_Counter.Count_reg[0]_25 [15]),
        .O(\Gen_Simple_Counter.Count[0][15]_i_5_n_0 ));
  LUT4 #(
    .INIT(16'h7FFF)) 
    \Gen_Simple_Counter.Count[0][15]_i_6 
       (.I0(\Gen_Simple_Counter.Count_reg[0]_25 [11]),
        .I1(\Gen_Simple_Counter.Count_reg[0]_25 [13]),
        .I2(\Gen_Simple_Counter.Count_reg[0]_25 [6]),
        .I3(\Gen_Simple_Counter.Count_reg[0]_25 [12]),
        .O(\Gen_Simple_Counter.Count[0][15]_i_6_n_0 ));
  LUT5 #(
    .INIT(32'h00008000)) 
    \Gen_Simple_Counter.Count[0][15]_i_7 
       (.I0(\Gen_Simple_Counter.Count_reg[0]_25 [14]),
        .I1(\Gen_Simple_Counter.Count_reg[0]_25 [2]),
        .I2(\Gen_Simple_Counter.Count_reg[0]_25 [15]),
        .I3(\Gen_Simple_Counter.Count_reg[0]_25 [3]),
        .I4(\Gen_Simple_Counter.Count[0][15]_i_8_n_0 ),
        .O(\Gen_Simple_Counter.Count[0][15]_i_7_n_0 ));
  LUT4 #(
    .INIT(16'h7FFF)) 
    \Gen_Simple_Counter.Count[0][15]_i_8 
       (.I0(\Gen_Simple_Counter.Count_reg[0]_25 [4]),
        .I1(\Gen_Simple_Counter.Count_reg[0]_25 [5]),
        .I2(\Gen_Simple_Counter.Count_reg[0]_25 [9]),
        .I3(\Gen_Simple_Counter.Count_reg[0]_25 [10]),
        .O(\Gen_Simple_Counter.Count[0][15]_i_8_n_0 ));
  FDRE \Gen_Simple_Counter.Count_reg[0][0] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][3]_i_1_n_4 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_25 [0]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1_n_0 ));
  FDRE \Gen_Simple_Counter.Count_reg[0][10] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][11]_i_1_n_6 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_25 [10]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1_n_0 ));
  FDRE \Gen_Simple_Counter.Count_reg[0][11] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][11]_i_1_n_7 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_25 [11]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1_n_0 ));
  CARRY4 \Gen_Simple_Counter.Count_reg[0][11]_i_1 
       (.CI(\Gen_Simple_Counter.Count_reg[0][15]_i_3_n_0 ),
        .CO({\Gen_Simple_Counter.Count_reg[0][11]_i_1_n_0 ,\Gen_Simple_Counter.Count_reg[0][11]_i_1_n_1 ,\Gen_Simple_Counter.Count_reg[0][11]_i_1_n_2 ,\Gen_Simple_Counter.Count_reg[0][11]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\Gen_Simple_Counter.Count_reg[0][11]_i_1_n_4 ,\Gen_Simple_Counter.Count_reg[0][11]_i_1_n_5 ,\Gen_Simple_Counter.Count_reg[0][11]_i_1_n_6 ,\Gen_Simple_Counter.Count_reg[0][11]_i_1_n_7 }),
        .S({\Gen_Simple_Counter.Count_reg[0]_25 [8],\Gen_Simple_Counter.Count_reg[0]_25 [9],\Gen_Simple_Counter.Count_reg[0]_25 [10],\Gen_Simple_Counter.Count_reg[0]_25 [11]}));
  FDRE \Gen_Simple_Counter.Count_reg[0][12] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][15]_i_3_n_4 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_25 [12]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1_n_0 ));
  FDRE \Gen_Simple_Counter.Count_reg[0][13] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][15]_i_3_n_5 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_25 [13]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1_n_0 ));
  FDRE \Gen_Simple_Counter.Count_reg[0][14] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][15]_i_3_n_6 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_25 [14]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1_n_0 ));
  FDRE \Gen_Simple_Counter.Count_reg[0][15] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][15]_i_3_n_7 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_25 [15]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1_n_0 ));
  CARRY4 \Gen_Simple_Counter.Count_reg[0][15]_i_3 
       (.CI(1'b0),
        .CO({\Gen_Simple_Counter.Count_reg[0][15]_i_3_n_0 ,\Gen_Simple_Counter.Count_reg[0][15]_i_3_n_1 ,\Gen_Simple_Counter.Count_reg[0][15]_i_3_n_2 ,\Gen_Simple_Counter.Count_reg[0][15]_i_3_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b1}),
        .O({\Gen_Simple_Counter.Count_reg[0][15]_i_3_n_4 ,\Gen_Simple_Counter.Count_reg[0][15]_i_3_n_5 ,\Gen_Simple_Counter.Count_reg[0][15]_i_3_n_6 ,\Gen_Simple_Counter.Count_reg[0][15]_i_3_n_7 }),
        .S({\Gen_Simple_Counter.Count_reg[0]_25 [12],\Gen_Simple_Counter.Count_reg[0]_25 [13],\Gen_Simple_Counter.Count_reg[0]_25 [14],\Gen_Simple_Counter.Count[0][15]_i_5_n_0 }));
  FDRE \Gen_Simple_Counter.Count_reg[0][1] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][3]_i_1_n_5 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_25 [1]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1_n_0 ));
  FDRE \Gen_Simple_Counter.Count_reg[0][2] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][3]_i_1_n_6 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_25 [2]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1_n_0 ));
  FDRE \Gen_Simple_Counter.Count_reg[0][3] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][3]_i_1_n_7 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_25 [3]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1_n_0 ));
  CARRY4 \Gen_Simple_Counter.Count_reg[0][3]_i_1 
       (.CI(\Gen_Simple_Counter.Count_reg[0][7]_i_1_n_0 ),
        .CO({\NLW_Gen_Simple_Counter.Count_reg[0][3]_i_1_CO_UNCONNECTED [3],\Gen_Simple_Counter.Count_reg[0][3]_i_1_n_1 ,\Gen_Simple_Counter.Count_reg[0][3]_i_1_n_2 ,\Gen_Simple_Counter.Count_reg[0][3]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\Gen_Simple_Counter.Count_reg[0][3]_i_1_n_4 ,\Gen_Simple_Counter.Count_reg[0][3]_i_1_n_5 ,\Gen_Simple_Counter.Count_reg[0][3]_i_1_n_6 ,\Gen_Simple_Counter.Count_reg[0][3]_i_1_n_7 }),
        .S({\Gen_Simple_Counter.Count_reg[0]_25 [0],\Gen_Simple_Counter.Count_reg[0]_25 [1],\Gen_Simple_Counter.Count_reg[0]_25 [2],\Gen_Simple_Counter.Count_reg[0]_25 [3]}));
  FDRE \Gen_Simple_Counter.Count_reg[0][4] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][7]_i_1_n_4 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_25 [4]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1_n_0 ));
  FDRE \Gen_Simple_Counter.Count_reg[0][5] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][7]_i_1_n_5 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_25 [5]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1_n_0 ));
  FDRE \Gen_Simple_Counter.Count_reg[0][6] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][7]_i_1_n_6 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_25 [6]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1_n_0 ));
  FDRE \Gen_Simple_Counter.Count_reg[0][7] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][7]_i_1_n_7 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_25 [7]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1_n_0 ));
  CARRY4 \Gen_Simple_Counter.Count_reg[0][7]_i_1 
       (.CI(\Gen_Simple_Counter.Count_reg[0][11]_i_1_n_0 ),
        .CO({\Gen_Simple_Counter.Count_reg[0][7]_i_1_n_0 ,\Gen_Simple_Counter.Count_reg[0][7]_i_1_n_1 ,\Gen_Simple_Counter.Count_reg[0][7]_i_1_n_2 ,\Gen_Simple_Counter.Count_reg[0][7]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\Gen_Simple_Counter.Count_reg[0][7]_i_1_n_4 ,\Gen_Simple_Counter.Count_reg[0][7]_i_1_n_5 ,\Gen_Simple_Counter.Count_reg[0][7]_i_1_n_6 ,\Gen_Simple_Counter.Count_reg[0][7]_i_1_n_7 }),
        .S({\Gen_Simple_Counter.Count_reg[0]_25 [4],\Gen_Simple_Counter.Count_reg[0]_25 [5],\Gen_Simple_Counter.Count_reg[0]_25 [6],\Gen_Simple_Counter.Count_reg[0]_25 [7]}));
  FDRE \Gen_Simple_Counter.Count_reg[0][8] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][11]_i_1_n_4 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_25 [8]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1_n_0 ));
  FDRE \Gen_Simple_Counter.Count_reg[0][9] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][11]_i_1_n_5 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_25 [9]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000005510)) 
    \Gen_Simple_Counter.Overflow_i_1 
       (.I0(sync_reset),
        .I1(\Gen_Simple_Counter.Count[0][15]_i_4_n_0 ),
        .I2(\Running_reg[0]_0 ),
        .I3(D[0]),
        .I4(\Gen_Simple_Counter.Access_Count_i[0]_i_3__3_n_0 ),
        .I5(clear_cmd),
        .O(\Gen_Simple_Counter.Overflow_i_1_n_0 ));
  FDRE \Gen_Simple_Counter.Overflow_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Gen_Simple_Counter.Overflow_i_1_n_0 ),
        .Q(D[0]),
        .R(1'b0));
  FDRE \Is_Valid_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Is_Valid_reg[0]_0 ),
        .Q(Is_Valid),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'h0000000045444444)) 
    \Running[0]_i_1 
       (.I0(ready),
        .I1(\Running_reg[0]_0 ),
        .I2(Stopping_reg_0),
        .I3(Stopping_reg_1),
        .I4(Empty_reg_0),
        .I5(sync_reset),
        .O(\Running[0]_i_1_n_0 ));
  FDRE \Running_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Running[0]_i_1_n_0 ),
        .Q(\Running_reg[0]_0 ),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h00000000FF080000)) 
    Stopping_i_1
       (.I0(Empty_reg_0),
        .I1(Stopping_reg_1),
        .I2(Stopping_reg_0),
        .I3(\Running_reg[0]_0 ),
        .I4(ready),
        .I5(sync_reset),
        .O(Stopping4_out));
  FDRE Stopping_reg
       (.C(Clk),
        .CE(1'b1),
        .D(Stopping4_out),
        .Q(Stopping_reg_n_0),
        .R(1'b0));
  CARRY4 plusOp_carry
       (.CI(1'b0),
        .CO({plusOp_carry_n_0,plusOp_carry_n_1,plusOp_carry_n_2,plusOp_carry_n_3}),
        .CYINIT(Q[0]),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(plusOp[4:1]),
        .S(Q[4:1]));
  CARRY4 plusOp_carry__0
       (.CI(plusOp_carry_n_0),
        .CO({plusOp_carry__0_n_0,plusOp_carry__0_n_1,plusOp_carry__0_n_2,plusOp_carry__0_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(plusOp[8:5]),
        .S(Q[8:5]));
  CARRY4 plusOp_carry__1
       (.CI(plusOp_carry__0_n_0),
        .CO({plusOp_carry__1_n_0,plusOp_carry__1_n_1,plusOp_carry__1_n_2,plusOp_carry__1_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(plusOp[12:9]),
        .S(Q[12:9]));
  CARRY4 plusOp_carry__2
       (.CI(plusOp_carry__1_n_0),
        .CO({plusOp_carry__2_n_0,plusOp_carry__2_n_1,plusOp_carry__2_n_2,plusOp_carry__2_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(plusOp[16:13]),
        .S(Q[16:13]));
  CARRY4 plusOp_carry__3
       (.CI(plusOp_carry__2_n_0),
        .CO({plusOp_carry__3_n_0,plusOp_carry__3_n_1,plusOp_carry__3_n_2,plusOp_carry__3_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(plusOp[20:17]),
        .S(Q[20:17]));
  CARRY4 plusOp_carry__4
       (.CI(plusOp_carry__3_n_0),
        .CO({plusOp_carry__4_n_0,plusOp_carry__4_n_1,plusOp_carry__4_n_2,plusOp_carry__4_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(plusOp[24:21]),
        .S(Q[24:21]));
  CARRY4 plusOp_carry__5
       (.CI(plusOp_carry__4_n_0),
        .CO({plusOp_carry__5_n_0,plusOp_carry__5_n_1,plusOp_carry__5_n_2,plusOp_carry__5_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(plusOp[28:25]),
        .S(Q[28:25]));
  CARRY4 plusOp_carry__6
       (.CI(plusOp_carry__5_n_0),
        .CO({NLW_plusOp_carry__6_CO_UNCONNECTED[3:2],plusOp_carry__6_n_2,plusOp_carry__6_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({NLW_plusOp_carry__6_O_UNCONNECTED[3],plusOp[31:29]}),
        .S({1'b0,Q[31:29]}));
endmodule

(* ORIG_REF_NAME = "debug_stat_counter" *) 
module block_design_microblaze_0_0_debug_stat_counter_61
   (Empty_reg_0,
    \Running_reg[0]_0 ,
    D,
    Is_Valid_1,
    Q,
    Clk,
    sync_reset,
    Empty_reg_1,
    \Is_Valid_reg[0]_0 ,
    Stopping_reg_0,
    Stopping_reg_1,
    Stopping_reg_2,
    \Gen_Simple_Counter.Access_Count_i_reg[0]_0 ,
    \Gen_Simple_Counter.Access_Count_i_reg[31]_0 ,
    clear_cmd,
    \Gen_Simple_Counter.Overflow_reg_0 ,
    E);
  output Empty_reg_0;
  output \Running_reg[0]_0 ;
  output [1:0]D;
  output Is_Valid_1;
  output [31:0]Q;
  input Clk;
  input sync_reset;
  input Empty_reg_1;
  input \Is_Valid_reg[0]_0 ;
  input Stopping_reg_0;
  input Stopping_reg_1;
  input Stopping_reg_2;
  input [31:0]\Gen_Simple_Counter.Access_Count_i_reg[0]_0 ;
  input \Gen_Simple_Counter.Access_Count_i_reg[31]_0 ;
  input clear_cmd;
  input [3:0]\Gen_Simple_Counter.Overflow_reg_0 ;
  input [0:0]E;

  wire Clk;
  wire [1:0]D;
  wire [0:0]E;
  wire Empty_reg_0;
  wire Empty_reg_1;
  wire Full_i_1__0_n_0;
  wire \Gen_Simple_Counter.Access_Count_i[0]_i_3__0_n_0 ;
  wire [31:0]\Gen_Simple_Counter.Access_Count_i_reg[0]_0 ;
  wire \Gen_Simple_Counter.Access_Count_i_reg[31]_0 ;
  wire \Gen_Simple_Counter.Count[0][15]_i_1__0_n_0 ;
  wire \Gen_Simple_Counter.Count[0][15]_i_2__0_n_0 ;
  wire \Gen_Simple_Counter.Count[0][15]_i_4__0_n_0 ;
  wire \Gen_Simple_Counter.Count[0][15]_i_5__0_n_0 ;
  wire \Gen_Simple_Counter.Count[0][15]_i_6__0_n_0 ;
  wire \Gen_Simple_Counter.Count[0][15]_i_7__0_n_0 ;
  wire \Gen_Simple_Counter.Count[0][15]_i_8__0_n_0 ;
  wire \Gen_Simple_Counter.Count_reg[0][11]_i_1__0_n_0 ;
  wire \Gen_Simple_Counter.Count_reg[0][11]_i_1__0_n_1 ;
  wire \Gen_Simple_Counter.Count_reg[0][11]_i_1__0_n_2 ;
  wire \Gen_Simple_Counter.Count_reg[0][11]_i_1__0_n_3 ;
  wire \Gen_Simple_Counter.Count_reg[0][11]_i_1__0_n_4 ;
  wire \Gen_Simple_Counter.Count_reg[0][11]_i_1__0_n_5 ;
  wire \Gen_Simple_Counter.Count_reg[0][11]_i_1__0_n_6 ;
  wire \Gen_Simple_Counter.Count_reg[0][11]_i_1__0_n_7 ;
  wire \Gen_Simple_Counter.Count_reg[0][15]_i_3__0_n_0 ;
  wire \Gen_Simple_Counter.Count_reg[0][15]_i_3__0_n_1 ;
  wire \Gen_Simple_Counter.Count_reg[0][15]_i_3__0_n_2 ;
  wire \Gen_Simple_Counter.Count_reg[0][15]_i_3__0_n_3 ;
  wire \Gen_Simple_Counter.Count_reg[0][15]_i_3__0_n_4 ;
  wire \Gen_Simple_Counter.Count_reg[0][15]_i_3__0_n_5 ;
  wire \Gen_Simple_Counter.Count_reg[0][15]_i_3__0_n_6 ;
  wire \Gen_Simple_Counter.Count_reg[0][15]_i_3__0_n_7 ;
  wire \Gen_Simple_Counter.Count_reg[0][3]_i_1__0_n_1 ;
  wire \Gen_Simple_Counter.Count_reg[0][3]_i_1__0_n_2 ;
  wire \Gen_Simple_Counter.Count_reg[0][3]_i_1__0_n_3 ;
  wire \Gen_Simple_Counter.Count_reg[0][3]_i_1__0_n_4 ;
  wire \Gen_Simple_Counter.Count_reg[0][3]_i_1__0_n_5 ;
  wire \Gen_Simple_Counter.Count_reg[0][3]_i_1__0_n_6 ;
  wire \Gen_Simple_Counter.Count_reg[0][3]_i_1__0_n_7 ;
  wire \Gen_Simple_Counter.Count_reg[0][7]_i_1__0_n_0 ;
  wire \Gen_Simple_Counter.Count_reg[0][7]_i_1__0_n_1 ;
  wire \Gen_Simple_Counter.Count_reg[0][7]_i_1__0_n_2 ;
  wire \Gen_Simple_Counter.Count_reg[0][7]_i_1__0_n_3 ;
  wire \Gen_Simple_Counter.Count_reg[0][7]_i_1__0_n_4 ;
  wire \Gen_Simple_Counter.Count_reg[0][7]_i_1__0_n_5 ;
  wire \Gen_Simple_Counter.Count_reg[0][7]_i_1__0_n_6 ;
  wire \Gen_Simple_Counter.Count_reg[0][7]_i_1__0_n_7 ;
  wire [0:15]\Gen_Simple_Counter.Count_reg[0]_26 ;
  wire \Gen_Simple_Counter.Overflow_i_1__1_n_0 ;
  wire [3:0]\Gen_Simple_Counter.Overflow_reg_0 ;
  wire Is_Valid_1;
  wire \Is_Valid_reg[0]_0 ;
  wire [31:0]Q;
  wire \Running[0]_i_1__0_n_0 ;
  wire \Running_reg[0]_0 ;
  wire Stopping4_out;
  wire Stopping_reg_0;
  wire Stopping_reg_1;
  wire Stopping_reg_2;
  wire Stopping_reg_n_0;
  wire clear_cmd;
  wire [31:0]p_0_in;
  wire [0:0]p_2_out;
  wire [31:1]plusOp;
  wire plusOp_carry__0_n_0;
  wire plusOp_carry__0_n_1;
  wire plusOp_carry__0_n_2;
  wire plusOp_carry__0_n_3;
  wire plusOp_carry__1_n_0;
  wire plusOp_carry__1_n_1;
  wire plusOp_carry__1_n_2;
  wire plusOp_carry__1_n_3;
  wire plusOp_carry__2_n_0;
  wire plusOp_carry__2_n_1;
  wire plusOp_carry__2_n_2;
  wire plusOp_carry__2_n_3;
  wire plusOp_carry__3_n_0;
  wire plusOp_carry__3_n_1;
  wire plusOp_carry__3_n_2;
  wire plusOp_carry__3_n_3;
  wire plusOp_carry__4_n_0;
  wire plusOp_carry__4_n_1;
  wire plusOp_carry__4_n_2;
  wire plusOp_carry__4_n_3;
  wire plusOp_carry__5_n_0;
  wire plusOp_carry__5_n_1;
  wire plusOp_carry__5_n_2;
  wire plusOp_carry__5_n_3;
  wire plusOp_carry__6_n_2;
  wire plusOp_carry__6_n_3;
  wire plusOp_carry_n_0;
  wire plusOp_carry_n_1;
  wire plusOp_carry_n_2;
  wire plusOp_carry_n_3;
  wire sync_reset;
  wire [3:3]\NLW_Gen_Simple_Counter.Count_reg[0][3]_i_1__0_CO_UNCONNECTED ;
  wire [3:2]NLW_plusOp_carry__6_CO_UNCONNECTED;
  wire [3:3]NLW_plusOp_carry__6_O_UNCONNECTED;

  FDSE Empty_reg
       (.C(Clk),
        .CE(1'b1),
        .D(Empty_reg_1),
        .Q(Empty_reg_0),
        .S(sync_reset));
  LUT4 #(
    .INIT(16'hFF04)) 
    Full_i_1__0
       (.I0(Stopping_reg_1),
        .I1(Stopping_reg_2),
        .I2(Empty_reg_0),
        .I3(D[1]),
        .O(Full_i_1__0_n_0));
  FDRE Full_reg
       (.C(Clk),
        .CE(1'b1),
        .D(Full_i_1__0_n_0),
        .Q(D[1]),
        .R(sync_reset));
  LUT4 #(
    .INIT(16'hFEEE)) 
    \Gen_Simple_Counter.Access_Count_i[0]_i_1__1 
       (.I0(\Gen_Simple_Counter.Access_Count_i[0]_i_3__0_n_0 ),
        .I1(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .I2(Is_Valid_1),
        .I3(Stopping_reg_n_0),
        .O(p_2_out));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[0]_i_2__1 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [31]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__0_n_0 ),
        .I2(plusOp[31]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[31]));
  LUT5 #(
    .INIT(32'h00000400)) 
    \Gen_Simple_Counter.Access_Count_i[0]_i_3__0 
       (.I0(\Gen_Simple_Counter.Overflow_reg_0 [3]),
        .I1(E),
        .I2(\Gen_Simple_Counter.Overflow_reg_0 [2]),
        .I3(\Gen_Simple_Counter.Overflow_reg_0 [0]),
        .I4(\Gen_Simple_Counter.Overflow_reg_0 [1]),
        .O(\Gen_Simple_Counter.Access_Count_i[0]_i_3__0_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[10]_i_1__1 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [21]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__0_n_0 ),
        .I2(plusOp[21]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[21]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[11]_i_1__1 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [20]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__0_n_0 ),
        .I2(plusOp[20]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[20]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[12]_i_1__1 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [19]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__0_n_0 ),
        .I2(plusOp[19]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[19]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[13]_i_1__1 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [18]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__0_n_0 ),
        .I2(plusOp[18]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[18]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[14]_i_1__1 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [17]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__0_n_0 ),
        .I2(plusOp[17]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[17]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[15]_i_1__1 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [16]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__0_n_0 ),
        .I2(plusOp[16]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[16]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[16]_i_1__1 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [15]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__0_n_0 ),
        .I2(plusOp[15]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[15]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[17]_i_1__1 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [14]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__0_n_0 ),
        .I2(plusOp[14]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[14]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[18]_i_1__1 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [13]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__0_n_0 ),
        .I2(plusOp[13]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[13]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[19]_i_1__1 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [12]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__0_n_0 ),
        .I2(plusOp[12]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[12]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[1]_i_1__1 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [30]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__0_n_0 ),
        .I2(plusOp[30]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[30]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[20]_i_1__1 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [11]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__0_n_0 ),
        .I2(plusOp[11]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[11]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[21]_i_1__1 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [10]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__0_n_0 ),
        .I2(plusOp[10]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[10]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[22]_i_1__1 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [9]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__0_n_0 ),
        .I2(plusOp[9]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[9]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[23]_i_1__1 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [8]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__0_n_0 ),
        .I2(plusOp[8]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[8]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[24]_i_1__1 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [7]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__0_n_0 ),
        .I2(plusOp[7]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[7]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[25]_i_1__1 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [6]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__0_n_0 ),
        .I2(plusOp[6]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[6]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[26]_i_1__1 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [5]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__0_n_0 ),
        .I2(plusOp[5]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[5]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[27]_i_1__1 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [4]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__0_n_0 ),
        .I2(plusOp[4]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[4]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[28]_i_1__1 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [3]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__0_n_0 ),
        .I2(plusOp[3]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[3]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[29]_i_1__1 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [2]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__0_n_0 ),
        .I2(plusOp[2]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[2]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[2]_i_1__1 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [29]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__0_n_0 ),
        .I2(plusOp[29]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[29]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[30]_i_1__1 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [1]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__0_n_0 ),
        .I2(plusOp[1]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[1]));
  LUT4 #(
    .INIT(16'h888B)) 
    \Gen_Simple_Counter.Access_Count_i[31]_i_1__1 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [0]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__0_n_0 ),
        .I2(Q[0]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[0]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[3]_i_1__1 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [28]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__0_n_0 ),
        .I2(plusOp[28]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[28]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[4]_i_1__1 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [27]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__0_n_0 ),
        .I2(plusOp[27]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[27]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[5]_i_1__1 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [26]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__0_n_0 ),
        .I2(plusOp[26]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[26]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[6]_i_1__1 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [25]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__0_n_0 ),
        .I2(plusOp[25]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[25]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[7]_i_1__1 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [24]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__0_n_0 ),
        .I2(plusOp[24]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[24]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[8]_i_1__1 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [23]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__0_n_0 ),
        .I2(plusOp[23]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[23]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[9]_i_1__1 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [22]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__0_n_0 ),
        .I2(plusOp[22]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[22]));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[0] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[31]),
        .Q(Q[31]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[10] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[21]),
        .Q(Q[21]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[11] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[20]),
        .Q(Q[20]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[12] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[19]),
        .Q(Q[19]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[13] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[18]),
        .Q(Q[18]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[14] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[17]),
        .Q(Q[17]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[15] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[16]),
        .Q(Q[16]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[16] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[15]),
        .Q(Q[15]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[17] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[14]),
        .Q(Q[14]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[18] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[13]),
        .Q(Q[13]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[19] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[12]),
        .Q(Q[12]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[1] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[30]),
        .Q(Q[30]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[20] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[11]),
        .Q(Q[11]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[21] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[10]),
        .Q(Q[10]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[22] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[9]),
        .Q(Q[9]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[23] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[8]),
        .Q(Q[8]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[24] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[7]),
        .Q(Q[7]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[25] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[6]),
        .Q(Q[6]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[26] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[5]),
        .Q(Q[5]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[27] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[4]),
        .Q(Q[4]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[28] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[3]),
        .Q(Q[3]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[29] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[2]),
        .Q(Q[2]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[2] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[29]),
        .Q(Q[29]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[30] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[1]),
        .Q(Q[1]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[31] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[0]),
        .Q(Q[0]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[3] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[28]),
        .Q(Q[28]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[4] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[27]),
        .Q(Q[27]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[5] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[26]),
        .Q(Q[26]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[6] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[25]),
        .Q(Q[25]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[7] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[24]),
        .Q(Q[24]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[8] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[23]),
        .Q(Q[23]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[9] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[22]),
        .Q(Q[22]),
        .R(sync_reset));
  LUT2 #(
    .INIT(4'hE)) 
    \Gen_Simple_Counter.Count[0][15]_i_1__0 
       (.I0(sync_reset),
        .I1(Stopping_reg_n_0),
        .O(\Gen_Simple_Counter.Count[0][15]_i_1__0_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Gen_Simple_Counter.Count[0][15]_i_2__0 
       (.I0(\Running_reg[0]_0 ),
        .I1(\Gen_Simple_Counter.Count[0][15]_i_4__0_n_0 ),
        .O(\Gen_Simple_Counter.Count[0][15]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'hBFFFFFFFFFFFFFFF)) 
    \Gen_Simple_Counter.Count[0][15]_i_4__0 
       (.I0(\Gen_Simple_Counter.Count[0][15]_i_6__0_n_0 ),
        .I1(\Gen_Simple_Counter.Count_reg[0]_26 [11]),
        .I2(\Gen_Simple_Counter.Count_reg[0]_26 [13]),
        .I3(\Gen_Simple_Counter.Count_reg[0]_26 [6]),
        .I4(\Gen_Simple_Counter.Count_reg[0]_26 [12]),
        .I5(\Gen_Simple_Counter.Count[0][15]_i_7__0_n_0 ),
        .O(\Gen_Simple_Counter.Count[0][15]_i_4__0_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \Gen_Simple_Counter.Count[0][15]_i_5__0 
       (.I0(\Gen_Simple_Counter.Count_reg[0]_26 [15]),
        .O(\Gen_Simple_Counter.Count[0][15]_i_5__0_n_0 ));
  LUT4 #(
    .INIT(16'h7FFF)) 
    \Gen_Simple_Counter.Count[0][15]_i_6__0 
       (.I0(\Gen_Simple_Counter.Count_reg[0]_26 [0]),
        .I1(\Gen_Simple_Counter.Count_reg[0]_26 [1]),
        .I2(\Gen_Simple_Counter.Count_reg[0]_26 [2]),
        .I3(\Gen_Simple_Counter.Count_reg[0]_26 [14]),
        .O(\Gen_Simple_Counter.Count[0][15]_i_6__0_n_0 ));
  LUT5 #(
    .INIT(32'h00008000)) 
    \Gen_Simple_Counter.Count[0][15]_i_7__0 
       (.I0(\Gen_Simple_Counter.Count_reg[0]_26 [15]),
        .I1(\Gen_Simple_Counter.Count_reg[0]_26 [3]),
        .I2(\Gen_Simple_Counter.Count_reg[0]_26 [8]),
        .I3(\Gen_Simple_Counter.Count_reg[0]_26 [7]),
        .I4(\Gen_Simple_Counter.Count[0][15]_i_8__0_n_0 ),
        .O(\Gen_Simple_Counter.Count[0][15]_i_7__0_n_0 ));
  LUT4 #(
    .INIT(16'h7FFF)) 
    \Gen_Simple_Counter.Count[0][15]_i_8__0 
       (.I0(\Gen_Simple_Counter.Count_reg[0]_26 [4]),
        .I1(\Gen_Simple_Counter.Count_reg[0]_26 [5]),
        .I2(\Gen_Simple_Counter.Count_reg[0]_26 [9]),
        .I3(\Gen_Simple_Counter.Count_reg[0]_26 [10]),
        .O(\Gen_Simple_Counter.Count[0][15]_i_8__0_n_0 ));
  FDRE \Gen_Simple_Counter.Count_reg[0][0] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2__0_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][3]_i_1__0_n_4 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_26 [0]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1__0_n_0 ));
  FDRE \Gen_Simple_Counter.Count_reg[0][10] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2__0_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][11]_i_1__0_n_6 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_26 [10]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1__0_n_0 ));
  FDRE \Gen_Simple_Counter.Count_reg[0][11] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2__0_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][11]_i_1__0_n_7 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_26 [11]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1__0_n_0 ));
  CARRY4 \Gen_Simple_Counter.Count_reg[0][11]_i_1__0 
       (.CI(\Gen_Simple_Counter.Count_reg[0][15]_i_3__0_n_0 ),
        .CO({\Gen_Simple_Counter.Count_reg[0][11]_i_1__0_n_0 ,\Gen_Simple_Counter.Count_reg[0][11]_i_1__0_n_1 ,\Gen_Simple_Counter.Count_reg[0][11]_i_1__0_n_2 ,\Gen_Simple_Counter.Count_reg[0][11]_i_1__0_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\Gen_Simple_Counter.Count_reg[0][11]_i_1__0_n_4 ,\Gen_Simple_Counter.Count_reg[0][11]_i_1__0_n_5 ,\Gen_Simple_Counter.Count_reg[0][11]_i_1__0_n_6 ,\Gen_Simple_Counter.Count_reg[0][11]_i_1__0_n_7 }),
        .S({\Gen_Simple_Counter.Count_reg[0]_26 [8],\Gen_Simple_Counter.Count_reg[0]_26 [9],\Gen_Simple_Counter.Count_reg[0]_26 [10],\Gen_Simple_Counter.Count_reg[0]_26 [11]}));
  FDRE \Gen_Simple_Counter.Count_reg[0][12] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2__0_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][15]_i_3__0_n_4 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_26 [12]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1__0_n_0 ));
  FDRE \Gen_Simple_Counter.Count_reg[0][13] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2__0_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][15]_i_3__0_n_5 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_26 [13]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1__0_n_0 ));
  FDRE \Gen_Simple_Counter.Count_reg[0][14] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2__0_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][15]_i_3__0_n_6 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_26 [14]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1__0_n_0 ));
  FDRE \Gen_Simple_Counter.Count_reg[0][15] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2__0_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][15]_i_3__0_n_7 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_26 [15]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1__0_n_0 ));
  CARRY4 \Gen_Simple_Counter.Count_reg[0][15]_i_3__0 
       (.CI(1'b0),
        .CO({\Gen_Simple_Counter.Count_reg[0][15]_i_3__0_n_0 ,\Gen_Simple_Counter.Count_reg[0][15]_i_3__0_n_1 ,\Gen_Simple_Counter.Count_reg[0][15]_i_3__0_n_2 ,\Gen_Simple_Counter.Count_reg[0][15]_i_3__0_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b1}),
        .O({\Gen_Simple_Counter.Count_reg[0][15]_i_3__0_n_4 ,\Gen_Simple_Counter.Count_reg[0][15]_i_3__0_n_5 ,\Gen_Simple_Counter.Count_reg[0][15]_i_3__0_n_6 ,\Gen_Simple_Counter.Count_reg[0][15]_i_3__0_n_7 }),
        .S({\Gen_Simple_Counter.Count_reg[0]_26 [12],\Gen_Simple_Counter.Count_reg[0]_26 [13],\Gen_Simple_Counter.Count_reg[0]_26 [14],\Gen_Simple_Counter.Count[0][15]_i_5__0_n_0 }));
  FDRE \Gen_Simple_Counter.Count_reg[0][1] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2__0_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][3]_i_1__0_n_5 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_26 [1]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1__0_n_0 ));
  FDRE \Gen_Simple_Counter.Count_reg[0][2] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2__0_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][3]_i_1__0_n_6 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_26 [2]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1__0_n_0 ));
  FDRE \Gen_Simple_Counter.Count_reg[0][3] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2__0_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][3]_i_1__0_n_7 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_26 [3]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1__0_n_0 ));
  CARRY4 \Gen_Simple_Counter.Count_reg[0][3]_i_1__0 
       (.CI(\Gen_Simple_Counter.Count_reg[0][7]_i_1__0_n_0 ),
        .CO({\NLW_Gen_Simple_Counter.Count_reg[0][3]_i_1__0_CO_UNCONNECTED [3],\Gen_Simple_Counter.Count_reg[0][3]_i_1__0_n_1 ,\Gen_Simple_Counter.Count_reg[0][3]_i_1__0_n_2 ,\Gen_Simple_Counter.Count_reg[0][3]_i_1__0_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\Gen_Simple_Counter.Count_reg[0][3]_i_1__0_n_4 ,\Gen_Simple_Counter.Count_reg[0][3]_i_1__0_n_5 ,\Gen_Simple_Counter.Count_reg[0][3]_i_1__0_n_6 ,\Gen_Simple_Counter.Count_reg[0][3]_i_1__0_n_7 }),
        .S({\Gen_Simple_Counter.Count_reg[0]_26 [0],\Gen_Simple_Counter.Count_reg[0]_26 [1],\Gen_Simple_Counter.Count_reg[0]_26 [2],\Gen_Simple_Counter.Count_reg[0]_26 [3]}));
  FDRE \Gen_Simple_Counter.Count_reg[0][4] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2__0_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][7]_i_1__0_n_4 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_26 [4]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1__0_n_0 ));
  FDRE \Gen_Simple_Counter.Count_reg[0][5] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2__0_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][7]_i_1__0_n_5 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_26 [5]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1__0_n_0 ));
  FDRE \Gen_Simple_Counter.Count_reg[0][6] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2__0_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][7]_i_1__0_n_6 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_26 [6]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1__0_n_0 ));
  FDRE \Gen_Simple_Counter.Count_reg[0][7] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2__0_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][7]_i_1__0_n_7 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_26 [7]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1__0_n_0 ));
  CARRY4 \Gen_Simple_Counter.Count_reg[0][7]_i_1__0 
       (.CI(\Gen_Simple_Counter.Count_reg[0][11]_i_1__0_n_0 ),
        .CO({\Gen_Simple_Counter.Count_reg[0][7]_i_1__0_n_0 ,\Gen_Simple_Counter.Count_reg[0][7]_i_1__0_n_1 ,\Gen_Simple_Counter.Count_reg[0][7]_i_1__0_n_2 ,\Gen_Simple_Counter.Count_reg[0][7]_i_1__0_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\Gen_Simple_Counter.Count_reg[0][7]_i_1__0_n_4 ,\Gen_Simple_Counter.Count_reg[0][7]_i_1__0_n_5 ,\Gen_Simple_Counter.Count_reg[0][7]_i_1__0_n_6 ,\Gen_Simple_Counter.Count_reg[0][7]_i_1__0_n_7 }),
        .S({\Gen_Simple_Counter.Count_reg[0]_26 [4],\Gen_Simple_Counter.Count_reg[0]_26 [5],\Gen_Simple_Counter.Count_reg[0]_26 [6],\Gen_Simple_Counter.Count_reg[0]_26 [7]}));
  FDRE \Gen_Simple_Counter.Count_reg[0][8] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2__0_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][11]_i_1__0_n_4 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_26 [8]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1__0_n_0 ));
  FDRE \Gen_Simple_Counter.Count_reg[0][9] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2__0_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][11]_i_1__0_n_5 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_26 [9]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000005510)) 
    \Gen_Simple_Counter.Overflow_i_1__1 
       (.I0(sync_reset),
        .I1(\Gen_Simple_Counter.Count[0][15]_i_4__0_n_0 ),
        .I2(\Running_reg[0]_0 ),
        .I3(D[0]),
        .I4(\Gen_Simple_Counter.Access_Count_i[0]_i_3__0_n_0 ),
        .I5(clear_cmd),
        .O(\Gen_Simple_Counter.Overflow_i_1__1_n_0 ));
  FDRE \Gen_Simple_Counter.Overflow_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Gen_Simple_Counter.Overflow_i_1__1_n_0 ),
        .Q(D[0]),
        .R(1'b0));
  FDRE \Is_Valid_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Is_Valid_reg[0]_0 ),
        .Q(Is_Valid_1),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'h0000000045444444)) 
    \Running[0]_i_1__0 
       (.I0(Stopping_reg_0),
        .I1(\Running_reg[0]_0 ),
        .I2(Stopping_reg_1),
        .I3(Stopping_reg_2),
        .I4(Empty_reg_0),
        .I5(sync_reset),
        .O(\Running[0]_i_1__0_n_0 ));
  FDRE \Running_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Running[0]_i_1__0_n_0 ),
        .Q(\Running_reg[0]_0 ),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h00000000FF080000)) 
    Stopping_i_1__0
       (.I0(Empty_reg_0),
        .I1(Stopping_reg_2),
        .I2(Stopping_reg_1),
        .I3(\Running_reg[0]_0 ),
        .I4(Stopping_reg_0),
        .I5(sync_reset),
        .O(Stopping4_out));
  FDRE Stopping_reg
       (.C(Clk),
        .CE(1'b1),
        .D(Stopping4_out),
        .Q(Stopping_reg_n_0),
        .R(1'b0));
  CARRY4 plusOp_carry
       (.CI(1'b0),
        .CO({plusOp_carry_n_0,plusOp_carry_n_1,plusOp_carry_n_2,plusOp_carry_n_3}),
        .CYINIT(Q[0]),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(plusOp[4:1]),
        .S(Q[4:1]));
  CARRY4 plusOp_carry__0
       (.CI(plusOp_carry_n_0),
        .CO({plusOp_carry__0_n_0,plusOp_carry__0_n_1,plusOp_carry__0_n_2,plusOp_carry__0_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(plusOp[8:5]),
        .S(Q[8:5]));
  CARRY4 plusOp_carry__1
       (.CI(plusOp_carry__0_n_0),
        .CO({plusOp_carry__1_n_0,plusOp_carry__1_n_1,plusOp_carry__1_n_2,plusOp_carry__1_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(plusOp[12:9]),
        .S(Q[12:9]));
  CARRY4 plusOp_carry__2
       (.CI(plusOp_carry__1_n_0),
        .CO({plusOp_carry__2_n_0,plusOp_carry__2_n_1,plusOp_carry__2_n_2,plusOp_carry__2_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(plusOp[16:13]),
        .S(Q[16:13]));
  CARRY4 plusOp_carry__3
       (.CI(plusOp_carry__2_n_0),
        .CO({plusOp_carry__3_n_0,plusOp_carry__3_n_1,plusOp_carry__3_n_2,plusOp_carry__3_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(plusOp[20:17]),
        .S(Q[20:17]));
  CARRY4 plusOp_carry__4
       (.CI(plusOp_carry__3_n_0),
        .CO({plusOp_carry__4_n_0,plusOp_carry__4_n_1,plusOp_carry__4_n_2,plusOp_carry__4_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(plusOp[24:21]),
        .S(Q[24:21]));
  CARRY4 plusOp_carry__5
       (.CI(plusOp_carry__4_n_0),
        .CO({plusOp_carry__5_n_0,plusOp_carry__5_n_1,plusOp_carry__5_n_2,plusOp_carry__5_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(plusOp[28:25]),
        .S(Q[28:25]));
  CARRY4 plusOp_carry__6
       (.CI(plusOp_carry__5_n_0),
        .CO({NLW_plusOp_carry__6_CO_UNCONNECTED[3:2],plusOp_carry__6_n_2,plusOp_carry__6_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({NLW_plusOp_carry__6_O_UNCONNECTED[3],plusOp[31:29]}),
        .S({1'b0,Q[31:29]}));
endmodule

(* ORIG_REF_NAME = "debug_stat_counter" *) 
module block_design_microblaze_0_0_debug_stat_counter_62
   (Empty_reg_0,
    \Running_reg[0]_0 ,
    D,
    Is_Valid_3,
    Q,
    Clk,
    sync_reset,
    Empty_reg_1,
    \Is_Valid_reg[0]_0 ,
    Stopping_reg_0,
    Stopping_reg_1,
    Stopping_reg_2,
    \Gen_Simple_Counter.Access_Count_i_reg[0]_0 ,
    \Gen_Simple_Counter.Access_Count_i_reg[31]_0 ,
    clear_cmd,
    \Gen_Simple_Counter.Overflow_reg_0 ,
    E);
  output Empty_reg_0;
  output \Running_reg[0]_0 ;
  output [1:0]D;
  output Is_Valid_3;
  output [31:0]Q;
  input Clk;
  input sync_reset;
  input Empty_reg_1;
  input \Is_Valid_reg[0]_0 ;
  input Stopping_reg_0;
  input Stopping_reg_1;
  input Stopping_reg_2;
  input [31:0]\Gen_Simple_Counter.Access_Count_i_reg[0]_0 ;
  input \Gen_Simple_Counter.Access_Count_i_reg[31]_0 ;
  input clear_cmd;
  input [3:0]\Gen_Simple_Counter.Overflow_reg_0 ;
  input [0:0]E;

  wire Clk;
  wire [1:0]D;
  wire [0:0]E;
  wire Empty_reg_0;
  wire Empty_reg_1;
  wire Full_i_1__1_n_0;
  wire \Gen_Simple_Counter.Access_Count_i[0]_i_3__1_n_0 ;
  wire [31:0]\Gen_Simple_Counter.Access_Count_i_reg[0]_0 ;
  wire \Gen_Simple_Counter.Access_Count_i_reg[31]_0 ;
  wire \Gen_Simple_Counter.Count[0][15]_i_1__1_n_0 ;
  wire \Gen_Simple_Counter.Count[0][15]_i_2__1_n_0 ;
  wire \Gen_Simple_Counter.Count[0][15]_i_4__1_n_0 ;
  wire \Gen_Simple_Counter.Count[0][15]_i_5__1_n_0 ;
  wire \Gen_Simple_Counter.Count[0][15]_i_6__1_n_0 ;
  wire \Gen_Simple_Counter.Count[0][15]_i_7__1_n_0 ;
  wire \Gen_Simple_Counter.Count[0][15]_i_8__1_n_0 ;
  wire \Gen_Simple_Counter.Count_reg[0][11]_i_1__1_n_0 ;
  wire \Gen_Simple_Counter.Count_reg[0][11]_i_1__1_n_1 ;
  wire \Gen_Simple_Counter.Count_reg[0][11]_i_1__1_n_2 ;
  wire \Gen_Simple_Counter.Count_reg[0][11]_i_1__1_n_3 ;
  wire \Gen_Simple_Counter.Count_reg[0][11]_i_1__1_n_4 ;
  wire \Gen_Simple_Counter.Count_reg[0][11]_i_1__1_n_5 ;
  wire \Gen_Simple_Counter.Count_reg[0][11]_i_1__1_n_6 ;
  wire \Gen_Simple_Counter.Count_reg[0][11]_i_1__1_n_7 ;
  wire \Gen_Simple_Counter.Count_reg[0][15]_i_3__1_n_0 ;
  wire \Gen_Simple_Counter.Count_reg[0][15]_i_3__1_n_1 ;
  wire \Gen_Simple_Counter.Count_reg[0][15]_i_3__1_n_2 ;
  wire \Gen_Simple_Counter.Count_reg[0][15]_i_3__1_n_3 ;
  wire \Gen_Simple_Counter.Count_reg[0][15]_i_3__1_n_4 ;
  wire \Gen_Simple_Counter.Count_reg[0][15]_i_3__1_n_5 ;
  wire \Gen_Simple_Counter.Count_reg[0][15]_i_3__1_n_6 ;
  wire \Gen_Simple_Counter.Count_reg[0][15]_i_3__1_n_7 ;
  wire \Gen_Simple_Counter.Count_reg[0][3]_i_1__1_n_1 ;
  wire \Gen_Simple_Counter.Count_reg[0][3]_i_1__1_n_2 ;
  wire \Gen_Simple_Counter.Count_reg[0][3]_i_1__1_n_3 ;
  wire \Gen_Simple_Counter.Count_reg[0][3]_i_1__1_n_4 ;
  wire \Gen_Simple_Counter.Count_reg[0][3]_i_1__1_n_5 ;
  wire \Gen_Simple_Counter.Count_reg[0][3]_i_1__1_n_6 ;
  wire \Gen_Simple_Counter.Count_reg[0][3]_i_1__1_n_7 ;
  wire \Gen_Simple_Counter.Count_reg[0][7]_i_1__1_n_0 ;
  wire \Gen_Simple_Counter.Count_reg[0][7]_i_1__1_n_1 ;
  wire \Gen_Simple_Counter.Count_reg[0][7]_i_1__1_n_2 ;
  wire \Gen_Simple_Counter.Count_reg[0][7]_i_1__1_n_3 ;
  wire \Gen_Simple_Counter.Count_reg[0][7]_i_1__1_n_4 ;
  wire \Gen_Simple_Counter.Count_reg[0][7]_i_1__1_n_5 ;
  wire \Gen_Simple_Counter.Count_reg[0][7]_i_1__1_n_6 ;
  wire \Gen_Simple_Counter.Count_reg[0][7]_i_1__1_n_7 ;
  wire [0:15]\Gen_Simple_Counter.Count_reg[0]_27 ;
  wire \Gen_Simple_Counter.Overflow_i_1__2_n_0 ;
  wire [3:0]\Gen_Simple_Counter.Overflow_reg_0 ;
  wire Is_Valid_3;
  wire \Is_Valid_reg[0]_0 ;
  wire [31:0]Q;
  wire \Running[0]_i_1__1_n_0 ;
  wire \Running_reg[0]_0 ;
  wire Stopping4_out;
  wire Stopping_reg_0;
  wire Stopping_reg_1;
  wire Stopping_reg_2;
  wire Stopping_reg_n_0;
  wire clear_cmd;
  wire [31:0]p_0_in;
  wire [0:0]p_2_out;
  wire [31:1]plusOp;
  wire plusOp_carry__0_n_0;
  wire plusOp_carry__0_n_1;
  wire plusOp_carry__0_n_2;
  wire plusOp_carry__0_n_3;
  wire plusOp_carry__1_n_0;
  wire plusOp_carry__1_n_1;
  wire plusOp_carry__1_n_2;
  wire plusOp_carry__1_n_3;
  wire plusOp_carry__2_n_0;
  wire plusOp_carry__2_n_1;
  wire plusOp_carry__2_n_2;
  wire plusOp_carry__2_n_3;
  wire plusOp_carry__3_n_0;
  wire plusOp_carry__3_n_1;
  wire plusOp_carry__3_n_2;
  wire plusOp_carry__3_n_3;
  wire plusOp_carry__4_n_0;
  wire plusOp_carry__4_n_1;
  wire plusOp_carry__4_n_2;
  wire plusOp_carry__4_n_3;
  wire plusOp_carry__5_n_0;
  wire plusOp_carry__5_n_1;
  wire plusOp_carry__5_n_2;
  wire plusOp_carry__5_n_3;
  wire plusOp_carry__6_n_2;
  wire plusOp_carry__6_n_3;
  wire plusOp_carry_n_0;
  wire plusOp_carry_n_1;
  wire plusOp_carry_n_2;
  wire plusOp_carry_n_3;
  wire sync_reset;
  wire [3:3]\NLW_Gen_Simple_Counter.Count_reg[0][3]_i_1__1_CO_UNCONNECTED ;
  wire [3:2]NLW_plusOp_carry__6_CO_UNCONNECTED;
  wire [3:3]NLW_plusOp_carry__6_O_UNCONNECTED;

  FDSE Empty_reg
       (.C(Clk),
        .CE(1'b1),
        .D(Empty_reg_1),
        .Q(Empty_reg_0),
        .S(sync_reset));
  LUT4 #(
    .INIT(16'hFF04)) 
    Full_i_1__1
       (.I0(Stopping_reg_1),
        .I1(Stopping_reg_2),
        .I2(Empty_reg_0),
        .I3(D[1]),
        .O(Full_i_1__1_n_0));
  FDRE Full_reg
       (.C(Clk),
        .CE(1'b1),
        .D(Full_i_1__1_n_0),
        .Q(D[1]),
        .R(sync_reset));
  LUT4 #(
    .INIT(16'hFEEE)) 
    \Gen_Simple_Counter.Access_Count_i[0]_i_1__2 
       (.I0(\Gen_Simple_Counter.Access_Count_i[0]_i_3__1_n_0 ),
        .I1(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .I2(Is_Valid_3),
        .I3(Stopping_reg_n_0),
        .O(p_2_out));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[0]_i_2__2 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [31]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__1_n_0 ),
        .I2(plusOp[31]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[31]));
  LUT5 #(
    .INIT(32'h00000400)) 
    \Gen_Simple_Counter.Access_Count_i[0]_i_3__1 
       (.I0(\Gen_Simple_Counter.Overflow_reg_0 [3]),
        .I1(E),
        .I2(\Gen_Simple_Counter.Overflow_reg_0 [2]),
        .I3(\Gen_Simple_Counter.Overflow_reg_0 [1]),
        .I4(\Gen_Simple_Counter.Overflow_reg_0 [0]),
        .O(\Gen_Simple_Counter.Access_Count_i[0]_i_3__1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[10]_i_1__2 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [21]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__1_n_0 ),
        .I2(plusOp[21]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[21]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[11]_i_1__2 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [20]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__1_n_0 ),
        .I2(plusOp[20]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[20]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[12]_i_1__2 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [19]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__1_n_0 ),
        .I2(plusOp[19]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[19]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[13]_i_1__2 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [18]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__1_n_0 ),
        .I2(plusOp[18]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[18]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[14]_i_1__2 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [17]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__1_n_0 ),
        .I2(plusOp[17]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[17]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[15]_i_1__2 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [16]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__1_n_0 ),
        .I2(plusOp[16]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[16]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[16]_i_1__2 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [15]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__1_n_0 ),
        .I2(plusOp[15]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[15]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[17]_i_1__2 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [14]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__1_n_0 ),
        .I2(plusOp[14]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[14]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[18]_i_1__2 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [13]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__1_n_0 ),
        .I2(plusOp[13]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[13]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[19]_i_1__2 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [12]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__1_n_0 ),
        .I2(plusOp[12]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[12]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[1]_i_1__2 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [30]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__1_n_0 ),
        .I2(plusOp[30]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[30]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[20]_i_1__2 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [11]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__1_n_0 ),
        .I2(plusOp[11]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[11]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[21]_i_1__2 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [10]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__1_n_0 ),
        .I2(plusOp[10]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[10]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[22]_i_1__2 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [9]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__1_n_0 ),
        .I2(plusOp[9]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[9]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[23]_i_1__2 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [8]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__1_n_0 ),
        .I2(plusOp[8]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[8]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[24]_i_1__2 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [7]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__1_n_0 ),
        .I2(plusOp[7]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[7]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[25]_i_1__2 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [6]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__1_n_0 ),
        .I2(plusOp[6]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[6]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[26]_i_1__2 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [5]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__1_n_0 ),
        .I2(plusOp[5]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[5]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[27]_i_1__2 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [4]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__1_n_0 ),
        .I2(plusOp[4]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[4]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[28]_i_1__2 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [3]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__1_n_0 ),
        .I2(plusOp[3]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[3]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[29]_i_1__2 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [2]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__1_n_0 ),
        .I2(plusOp[2]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[2]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[2]_i_1__2 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [29]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__1_n_0 ),
        .I2(plusOp[29]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[29]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[30]_i_1__2 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [1]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__1_n_0 ),
        .I2(plusOp[1]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[1]));
  LUT4 #(
    .INIT(16'h888B)) 
    \Gen_Simple_Counter.Access_Count_i[31]_i_1__2 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [0]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__1_n_0 ),
        .I2(Q[0]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[0]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[3]_i_1__2 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [28]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__1_n_0 ),
        .I2(plusOp[28]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[28]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[4]_i_1__2 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [27]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__1_n_0 ),
        .I2(plusOp[27]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[27]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[5]_i_1__2 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [26]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__1_n_0 ),
        .I2(plusOp[26]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[26]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[6]_i_1__2 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [25]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__1_n_0 ),
        .I2(plusOp[25]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[25]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[7]_i_1__2 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [24]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__1_n_0 ),
        .I2(plusOp[24]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[24]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[8]_i_1__2 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [23]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__1_n_0 ),
        .I2(plusOp[23]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[23]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[9]_i_1__2 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [22]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__1_n_0 ),
        .I2(plusOp[22]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[22]));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[0] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[31]),
        .Q(Q[31]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[10] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[21]),
        .Q(Q[21]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[11] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[20]),
        .Q(Q[20]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[12] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[19]),
        .Q(Q[19]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[13] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[18]),
        .Q(Q[18]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[14] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[17]),
        .Q(Q[17]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[15] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[16]),
        .Q(Q[16]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[16] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[15]),
        .Q(Q[15]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[17] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[14]),
        .Q(Q[14]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[18] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[13]),
        .Q(Q[13]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[19] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[12]),
        .Q(Q[12]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[1] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[30]),
        .Q(Q[30]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[20] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[11]),
        .Q(Q[11]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[21] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[10]),
        .Q(Q[10]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[22] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[9]),
        .Q(Q[9]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[23] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[8]),
        .Q(Q[8]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[24] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[7]),
        .Q(Q[7]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[25] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[6]),
        .Q(Q[6]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[26] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[5]),
        .Q(Q[5]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[27] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[4]),
        .Q(Q[4]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[28] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[3]),
        .Q(Q[3]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[29] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[2]),
        .Q(Q[2]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[2] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[29]),
        .Q(Q[29]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[30] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[1]),
        .Q(Q[1]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[31] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[0]),
        .Q(Q[0]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[3] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[28]),
        .Q(Q[28]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[4] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[27]),
        .Q(Q[27]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[5] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[26]),
        .Q(Q[26]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[6] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[25]),
        .Q(Q[25]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[7] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[24]),
        .Q(Q[24]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[8] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[23]),
        .Q(Q[23]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[9] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[22]),
        .Q(Q[22]),
        .R(sync_reset));
  LUT2 #(
    .INIT(4'hE)) 
    \Gen_Simple_Counter.Count[0][15]_i_1__1 
       (.I0(sync_reset),
        .I1(Stopping_reg_n_0),
        .O(\Gen_Simple_Counter.Count[0][15]_i_1__1_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Gen_Simple_Counter.Count[0][15]_i_2__1 
       (.I0(\Running_reg[0]_0 ),
        .I1(\Gen_Simple_Counter.Count[0][15]_i_4__1_n_0 ),
        .O(\Gen_Simple_Counter.Count[0][15]_i_2__1_n_0 ));
  LUT6 #(
    .INIT(64'hBFFFFFFFFFFFFFFF)) 
    \Gen_Simple_Counter.Count[0][15]_i_4__1 
       (.I0(\Gen_Simple_Counter.Count[0][15]_i_6__1_n_0 ),
        .I1(\Gen_Simple_Counter.Count_reg[0]_27 [3]),
        .I2(\Gen_Simple_Counter.Count_reg[0]_27 [15]),
        .I3(\Gen_Simple_Counter.Count_reg[0]_27 [6]),
        .I4(\Gen_Simple_Counter.Count_reg[0]_27 [12]),
        .I5(\Gen_Simple_Counter.Count[0][15]_i_7__1_n_0 ),
        .O(\Gen_Simple_Counter.Count[0][15]_i_4__1_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \Gen_Simple_Counter.Count[0][15]_i_5__1 
       (.I0(\Gen_Simple_Counter.Count_reg[0]_27 [15]),
        .O(\Gen_Simple_Counter.Count[0][15]_i_5__1_n_0 ));
  LUT4 #(
    .INIT(16'h7FFF)) 
    \Gen_Simple_Counter.Count[0][15]_i_6__1 
       (.I0(\Gen_Simple_Counter.Count_reg[0]_27 [4]),
        .I1(\Gen_Simple_Counter.Count_reg[0]_27 [5]),
        .I2(\Gen_Simple_Counter.Count_reg[0]_27 [9]),
        .I3(\Gen_Simple_Counter.Count_reg[0]_27 [10]),
        .O(\Gen_Simple_Counter.Count[0][15]_i_6__1_n_0 ));
  LUT5 #(
    .INIT(32'h00008000)) 
    \Gen_Simple_Counter.Count[0][15]_i_7__1 
       (.I0(\Gen_Simple_Counter.Count_reg[0]_27 [1]),
        .I1(\Gen_Simple_Counter.Count_reg[0]_27 [0]),
        .I2(\Gen_Simple_Counter.Count_reg[0]_27 [8]),
        .I3(\Gen_Simple_Counter.Count_reg[0]_27 [7]),
        .I4(\Gen_Simple_Counter.Count[0][15]_i_8__1_n_0 ),
        .O(\Gen_Simple_Counter.Count[0][15]_i_7__1_n_0 ));
  LUT4 #(
    .INIT(16'h7FFF)) 
    \Gen_Simple_Counter.Count[0][15]_i_8__1 
       (.I0(\Gen_Simple_Counter.Count_reg[0]_27 [2]),
        .I1(\Gen_Simple_Counter.Count_reg[0]_27 [14]),
        .I2(\Gen_Simple_Counter.Count_reg[0]_27 [11]),
        .I3(\Gen_Simple_Counter.Count_reg[0]_27 [13]),
        .O(\Gen_Simple_Counter.Count[0][15]_i_8__1_n_0 ));
  FDRE \Gen_Simple_Counter.Count_reg[0][0] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2__1_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][3]_i_1__1_n_4 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_27 [0]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1__1_n_0 ));
  FDRE \Gen_Simple_Counter.Count_reg[0][10] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2__1_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][11]_i_1__1_n_6 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_27 [10]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1__1_n_0 ));
  FDRE \Gen_Simple_Counter.Count_reg[0][11] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2__1_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][11]_i_1__1_n_7 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_27 [11]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1__1_n_0 ));
  CARRY4 \Gen_Simple_Counter.Count_reg[0][11]_i_1__1 
       (.CI(\Gen_Simple_Counter.Count_reg[0][15]_i_3__1_n_0 ),
        .CO({\Gen_Simple_Counter.Count_reg[0][11]_i_1__1_n_0 ,\Gen_Simple_Counter.Count_reg[0][11]_i_1__1_n_1 ,\Gen_Simple_Counter.Count_reg[0][11]_i_1__1_n_2 ,\Gen_Simple_Counter.Count_reg[0][11]_i_1__1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\Gen_Simple_Counter.Count_reg[0][11]_i_1__1_n_4 ,\Gen_Simple_Counter.Count_reg[0][11]_i_1__1_n_5 ,\Gen_Simple_Counter.Count_reg[0][11]_i_1__1_n_6 ,\Gen_Simple_Counter.Count_reg[0][11]_i_1__1_n_7 }),
        .S({\Gen_Simple_Counter.Count_reg[0]_27 [8],\Gen_Simple_Counter.Count_reg[0]_27 [9],\Gen_Simple_Counter.Count_reg[0]_27 [10],\Gen_Simple_Counter.Count_reg[0]_27 [11]}));
  FDRE \Gen_Simple_Counter.Count_reg[0][12] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2__1_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][15]_i_3__1_n_4 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_27 [12]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1__1_n_0 ));
  FDRE \Gen_Simple_Counter.Count_reg[0][13] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2__1_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][15]_i_3__1_n_5 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_27 [13]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1__1_n_0 ));
  FDRE \Gen_Simple_Counter.Count_reg[0][14] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2__1_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][15]_i_3__1_n_6 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_27 [14]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1__1_n_0 ));
  FDRE \Gen_Simple_Counter.Count_reg[0][15] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2__1_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][15]_i_3__1_n_7 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_27 [15]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1__1_n_0 ));
  CARRY4 \Gen_Simple_Counter.Count_reg[0][15]_i_3__1 
       (.CI(1'b0),
        .CO({\Gen_Simple_Counter.Count_reg[0][15]_i_3__1_n_0 ,\Gen_Simple_Counter.Count_reg[0][15]_i_3__1_n_1 ,\Gen_Simple_Counter.Count_reg[0][15]_i_3__1_n_2 ,\Gen_Simple_Counter.Count_reg[0][15]_i_3__1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b1}),
        .O({\Gen_Simple_Counter.Count_reg[0][15]_i_3__1_n_4 ,\Gen_Simple_Counter.Count_reg[0][15]_i_3__1_n_5 ,\Gen_Simple_Counter.Count_reg[0][15]_i_3__1_n_6 ,\Gen_Simple_Counter.Count_reg[0][15]_i_3__1_n_7 }),
        .S({\Gen_Simple_Counter.Count_reg[0]_27 [12],\Gen_Simple_Counter.Count_reg[0]_27 [13],\Gen_Simple_Counter.Count_reg[0]_27 [14],\Gen_Simple_Counter.Count[0][15]_i_5__1_n_0 }));
  FDRE \Gen_Simple_Counter.Count_reg[0][1] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2__1_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][3]_i_1__1_n_5 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_27 [1]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1__1_n_0 ));
  FDRE \Gen_Simple_Counter.Count_reg[0][2] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2__1_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][3]_i_1__1_n_6 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_27 [2]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1__1_n_0 ));
  FDRE \Gen_Simple_Counter.Count_reg[0][3] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2__1_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][3]_i_1__1_n_7 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_27 [3]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1__1_n_0 ));
  CARRY4 \Gen_Simple_Counter.Count_reg[0][3]_i_1__1 
       (.CI(\Gen_Simple_Counter.Count_reg[0][7]_i_1__1_n_0 ),
        .CO({\NLW_Gen_Simple_Counter.Count_reg[0][3]_i_1__1_CO_UNCONNECTED [3],\Gen_Simple_Counter.Count_reg[0][3]_i_1__1_n_1 ,\Gen_Simple_Counter.Count_reg[0][3]_i_1__1_n_2 ,\Gen_Simple_Counter.Count_reg[0][3]_i_1__1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\Gen_Simple_Counter.Count_reg[0][3]_i_1__1_n_4 ,\Gen_Simple_Counter.Count_reg[0][3]_i_1__1_n_5 ,\Gen_Simple_Counter.Count_reg[0][3]_i_1__1_n_6 ,\Gen_Simple_Counter.Count_reg[0][3]_i_1__1_n_7 }),
        .S({\Gen_Simple_Counter.Count_reg[0]_27 [0],\Gen_Simple_Counter.Count_reg[0]_27 [1],\Gen_Simple_Counter.Count_reg[0]_27 [2],\Gen_Simple_Counter.Count_reg[0]_27 [3]}));
  FDRE \Gen_Simple_Counter.Count_reg[0][4] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2__1_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][7]_i_1__1_n_4 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_27 [4]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1__1_n_0 ));
  FDRE \Gen_Simple_Counter.Count_reg[0][5] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2__1_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][7]_i_1__1_n_5 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_27 [5]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1__1_n_0 ));
  FDRE \Gen_Simple_Counter.Count_reg[0][6] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2__1_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][7]_i_1__1_n_6 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_27 [6]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1__1_n_0 ));
  FDRE \Gen_Simple_Counter.Count_reg[0][7] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2__1_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][7]_i_1__1_n_7 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_27 [7]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1__1_n_0 ));
  CARRY4 \Gen_Simple_Counter.Count_reg[0][7]_i_1__1 
       (.CI(\Gen_Simple_Counter.Count_reg[0][11]_i_1__1_n_0 ),
        .CO({\Gen_Simple_Counter.Count_reg[0][7]_i_1__1_n_0 ,\Gen_Simple_Counter.Count_reg[0][7]_i_1__1_n_1 ,\Gen_Simple_Counter.Count_reg[0][7]_i_1__1_n_2 ,\Gen_Simple_Counter.Count_reg[0][7]_i_1__1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\Gen_Simple_Counter.Count_reg[0][7]_i_1__1_n_4 ,\Gen_Simple_Counter.Count_reg[0][7]_i_1__1_n_5 ,\Gen_Simple_Counter.Count_reg[0][7]_i_1__1_n_6 ,\Gen_Simple_Counter.Count_reg[0][7]_i_1__1_n_7 }),
        .S({\Gen_Simple_Counter.Count_reg[0]_27 [4],\Gen_Simple_Counter.Count_reg[0]_27 [5],\Gen_Simple_Counter.Count_reg[0]_27 [6],\Gen_Simple_Counter.Count_reg[0]_27 [7]}));
  FDRE \Gen_Simple_Counter.Count_reg[0][8] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2__1_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][11]_i_1__1_n_4 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_27 [8]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1__1_n_0 ));
  FDRE \Gen_Simple_Counter.Count_reg[0][9] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2__1_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][11]_i_1__1_n_5 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_27 [9]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000005510)) 
    \Gen_Simple_Counter.Overflow_i_1__2 
       (.I0(sync_reset),
        .I1(\Gen_Simple_Counter.Count[0][15]_i_4__1_n_0 ),
        .I2(\Running_reg[0]_0 ),
        .I3(D[0]),
        .I4(\Gen_Simple_Counter.Access_Count_i[0]_i_3__1_n_0 ),
        .I5(clear_cmd),
        .O(\Gen_Simple_Counter.Overflow_i_1__2_n_0 ));
  FDRE \Gen_Simple_Counter.Overflow_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Gen_Simple_Counter.Overflow_i_1__2_n_0 ),
        .Q(D[0]),
        .R(1'b0));
  FDRE \Is_Valid_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Is_Valid_reg[0]_0 ),
        .Q(Is_Valid_3),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'h0000000045444444)) 
    \Running[0]_i_1__1 
       (.I0(Stopping_reg_0),
        .I1(\Running_reg[0]_0 ),
        .I2(Stopping_reg_1),
        .I3(Stopping_reg_2),
        .I4(Empty_reg_0),
        .I5(sync_reset),
        .O(\Running[0]_i_1__1_n_0 ));
  FDRE \Running_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Running[0]_i_1__1_n_0 ),
        .Q(\Running_reg[0]_0 ),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h00000000FF080000)) 
    Stopping_i_1__1
       (.I0(Empty_reg_0),
        .I1(Stopping_reg_2),
        .I2(Stopping_reg_1),
        .I3(\Running_reg[0]_0 ),
        .I4(Stopping_reg_0),
        .I5(sync_reset),
        .O(Stopping4_out));
  FDRE Stopping_reg
       (.C(Clk),
        .CE(1'b1),
        .D(Stopping4_out),
        .Q(Stopping_reg_n_0),
        .R(1'b0));
  CARRY4 plusOp_carry
       (.CI(1'b0),
        .CO({plusOp_carry_n_0,plusOp_carry_n_1,plusOp_carry_n_2,plusOp_carry_n_3}),
        .CYINIT(Q[0]),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(plusOp[4:1]),
        .S(Q[4:1]));
  CARRY4 plusOp_carry__0
       (.CI(plusOp_carry_n_0),
        .CO({plusOp_carry__0_n_0,plusOp_carry__0_n_1,plusOp_carry__0_n_2,plusOp_carry__0_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(plusOp[8:5]),
        .S(Q[8:5]));
  CARRY4 plusOp_carry__1
       (.CI(plusOp_carry__0_n_0),
        .CO({plusOp_carry__1_n_0,plusOp_carry__1_n_1,plusOp_carry__1_n_2,plusOp_carry__1_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(plusOp[12:9]),
        .S(Q[12:9]));
  CARRY4 plusOp_carry__2
       (.CI(plusOp_carry__1_n_0),
        .CO({plusOp_carry__2_n_0,plusOp_carry__2_n_1,plusOp_carry__2_n_2,plusOp_carry__2_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(plusOp[16:13]),
        .S(Q[16:13]));
  CARRY4 plusOp_carry__3
       (.CI(plusOp_carry__2_n_0),
        .CO({plusOp_carry__3_n_0,plusOp_carry__3_n_1,plusOp_carry__3_n_2,plusOp_carry__3_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(plusOp[20:17]),
        .S(Q[20:17]));
  CARRY4 plusOp_carry__4
       (.CI(plusOp_carry__3_n_0),
        .CO({plusOp_carry__4_n_0,plusOp_carry__4_n_1,plusOp_carry__4_n_2,plusOp_carry__4_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(plusOp[24:21]),
        .S(Q[24:21]));
  CARRY4 plusOp_carry__5
       (.CI(plusOp_carry__4_n_0),
        .CO({plusOp_carry__5_n_0,plusOp_carry__5_n_1,plusOp_carry__5_n_2,plusOp_carry__5_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(plusOp[28:25]),
        .S(Q[28:25]));
  CARRY4 plusOp_carry__6
       (.CI(plusOp_carry__5_n_0),
        .CO({NLW_plusOp_carry__6_CO_UNCONNECTED[3:2],plusOp_carry__6_n_2,plusOp_carry__6_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({NLW_plusOp_carry__6_O_UNCONNECTED[3],plusOp[31:29]}),
        .S({1'b0,Q[31:29]}));
endmodule

(* ORIG_REF_NAME = "debug_stat_counter" *) 
module block_design_microblaze_0_0_debug_stat_counter_63
   (Empty_reg_0,
    \Running_reg[0]_0 ,
    D,
    Is_Valid_5,
    Q,
    Clk,
    sync_reset,
    Empty_reg_1,
    \Is_Valid_reg[0]_0 ,
    Stopping_reg_0,
    Stopping_reg_1,
    Stopping_reg_2,
    \Gen_Simple_Counter.Access_Count_i_reg[0]_0 ,
    \Gen_Simple_Counter.Access_Count_i_reg[31]_0 ,
    clear_cmd,
    \Gen_Simple_Counter.Overflow_reg_0 ,
    E);
  output Empty_reg_0;
  output \Running_reg[0]_0 ;
  output [1:0]D;
  output Is_Valid_5;
  output [31:0]Q;
  input Clk;
  input sync_reset;
  input Empty_reg_1;
  input \Is_Valid_reg[0]_0 ;
  input Stopping_reg_0;
  input Stopping_reg_1;
  input Stopping_reg_2;
  input [31:0]\Gen_Simple_Counter.Access_Count_i_reg[0]_0 ;
  input \Gen_Simple_Counter.Access_Count_i_reg[31]_0 ;
  input clear_cmd;
  input [3:0]\Gen_Simple_Counter.Overflow_reg_0 ;
  input [0:0]E;

  wire Clk;
  wire [1:0]D;
  wire [0:0]E;
  wire Empty_reg_0;
  wire Empty_reg_1;
  wire Full_i_1__2_n_0;
  wire \Gen_Simple_Counter.Access_Count_i[0]_i_3__2_n_0 ;
  wire [31:0]\Gen_Simple_Counter.Access_Count_i_reg[0]_0 ;
  wire \Gen_Simple_Counter.Access_Count_i_reg[31]_0 ;
  wire \Gen_Simple_Counter.Count[0][15]_i_1__2_n_0 ;
  wire \Gen_Simple_Counter.Count[0][15]_i_2__2_n_0 ;
  wire \Gen_Simple_Counter.Count[0][15]_i_4__2_n_0 ;
  wire \Gen_Simple_Counter.Count[0][15]_i_5__2_n_0 ;
  wire \Gen_Simple_Counter.Count[0][15]_i_6__2_n_0 ;
  wire \Gen_Simple_Counter.Count[0][15]_i_7__2_n_0 ;
  wire \Gen_Simple_Counter.Count[0][15]_i_8__2_n_0 ;
  wire \Gen_Simple_Counter.Count_reg[0][11]_i_1__2_n_0 ;
  wire \Gen_Simple_Counter.Count_reg[0][11]_i_1__2_n_1 ;
  wire \Gen_Simple_Counter.Count_reg[0][11]_i_1__2_n_2 ;
  wire \Gen_Simple_Counter.Count_reg[0][11]_i_1__2_n_3 ;
  wire \Gen_Simple_Counter.Count_reg[0][11]_i_1__2_n_4 ;
  wire \Gen_Simple_Counter.Count_reg[0][11]_i_1__2_n_5 ;
  wire \Gen_Simple_Counter.Count_reg[0][11]_i_1__2_n_6 ;
  wire \Gen_Simple_Counter.Count_reg[0][11]_i_1__2_n_7 ;
  wire \Gen_Simple_Counter.Count_reg[0][15]_i_3__2_n_0 ;
  wire \Gen_Simple_Counter.Count_reg[0][15]_i_3__2_n_1 ;
  wire \Gen_Simple_Counter.Count_reg[0][15]_i_3__2_n_2 ;
  wire \Gen_Simple_Counter.Count_reg[0][15]_i_3__2_n_3 ;
  wire \Gen_Simple_Counter.Count_reg[0][15]_i_3__2_n_4 ;
  wire \Gen_Simple_Counter.Count_reg[0][15]_i_3__2_n_5 ;
  wire \Gen_Simple_Counter.Count_reg[0][15]_i_3__2_n_6 ;
  wire \Gen_Simple_Counter.Count_reg[0][15]_i_3__2_n_7 ;
  wire \Gen_Simple_Counter.Count_reg[0][3]_i_1__2_n_1 ;
  wire \Gen_Simple_Counter.Count_reg[0][3]_i_1__2_n_2 ;
  wire \Gen_Simple_Counter.Count_reg[0][3]_i_1__2_n_3 ;
  wire \Gen_Simple_Counter.Count_reg[0][3]_i_1__2_n_4 ;
  wire \Gen_Simple_Counter.Count_reg[0][3]_i_1__2_n_5 ;
  wire \Gen_Simple_Counter.Count_reg[0][3]_i_1__2_n_6 ;
  wire \Gen_Simple_Counter.Count_reg[0][3]_i_1__2_n_7 ;
  wire \Gen_Simple_Counter.Count_reg[0][7]_i_1__2_n_0 ;
  wire \Gen_Simple_Counter.Count_reg[0][7]_i_1__2_n_1 ;
  wire \Gen_Simple_Counter.Count_reg[0][7]_i_1__2_n_2 ;
  wire \Gen_Simple_Counter.Count_reg[0][7]_i_1__2_n_3 ;
  wire \Gen_Simple_Counter.Count_reg[0][7]_i_1__2_n_4 ;
  wire \Gen_Simple_Counter.Count_reg[0][7]_i_1__2_n_5 ;
  wire \Gen_Simple_Counter.Count_reg[0][7]_i_1__2_n_6 ;
  wire \Gen_Simple_Counter.Count_reg[0][7]_i_1__2_n_7 ;
  wire [0:15]\Gen_Simple_Counter.Count_reg[0]_28 ;
  wire \Gen_Simple_Counter.Overflow_i_1__3_n_0 ;
  wire [3:0]\Gen_Simple_Counter.Overflow_reg_0 ;
  wire Is_Valid_5;
  wire \Is_Valid_reg[0]_0 ;
  wire [31:0]Q;
  wire \Running[0]_i_1__2_n_0 ;
  wire \Running_reg[0]_0 ;
  wire Stopping4_out;
  wire Stopping_reg_0;
  wire Stopping_reg_1;
  wire Stopping_reg_2;
  wire Stopping_reg_n_0;
  wire clear_cmd;
  wire [31:0]p_0_in;
  wire [0:0]p_2_out;
  wire [31:1]plusOp;
  wire plusOp_carry__0_n_0;
  wire plusOp_carry__0_n_1;
  wire plusOp_carry__0_n_2;
  wire plusOp_carry__0_n_3;
  wire plusOp_carry__1_n_0;
  wire plusOp_carry__1_n_1;
  wire plusOp_carry__1_n_2;
  wire plusOp_carry__1_n_3;
  wire plusOp_carry__2_n_0;
  wire plusOp_carry__2_n_1;
  wire plusOp_carry__2_n_2;
  wire plusOp_carry__2_n_3;
  wire plusOp_carry__3_n_0;
  wire plusOp_carry__3_n_1;
  wire plusOp_carry__3_n_2;
  wire plusOp_carry__3_n_3;
  wire plusOp_carry__4_n_0;
  wire plusOp_carry__4_n_1;
  wire plusOp_carry__4_n_2;
  wire plusOp_carry__4_n_3;
  wire plusOp_carry__5_n_0;
  wire plusOp_carry__5_n_1;
  wire plusOp_carry__5_n_2;
  wire plusOp_carry__5_n_3;
  wire plusOp_carry__6_n_2;
  wire plusOp_carry__6_n_3;
  wire plusOp_carry_n_0;
  wire plusOp_carry_n_1;
  wire plusOp_carry_n_2;
  wire plusOp_carry_n_3;
  wire sync_reset;
  wire [3:3]\NLW_Gen_Simple_Counter.Count_reg[0][3]_i_1__2_CO_UNCONNECTED ;
  wire [3:2]NLW_plusOp_carry__6_CO_UNCONNECTED;
  wire [3:3]NLW_plusOp_carry__6_O_UNCONNECTED;

  FDSE Empty_reg
       (.C(Clk),
        .CE(1'b1),
        .D(Empty_reg_1),
        .Q(Empty_reg_0),
        .S(sync_reset));
  LUT4 #(
    .INIT(16'hFF04)) 
    Full_i_1__2
       (.I0(Stopping_reg_1),
        .I1(Stopping_reg_2),
        .I2(Empty_reg_0),
        .I3(D[1]),
        .O(Full_i_1__2_n_0));
  FDRE Full_reg
       (.C(Clk),
        .CE(1'b1),
        .D(Full_i_1__2_n_0),
        .Q(D[1]),
        .R(sync_reset));
  LUT4 #(
    .INIT(16'hFEEE)) 
    \Gen_Simple_Counter.Access_Count_i[0]_i_1__3 
       (.I0(\Gen_Simple_Counter.Access_Count_i[0]_i_3__2_n_0 ),
        .I1(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .I2(Is_Valid_5),
        .I3(Stopping_reg_n_0),
        .O(p_2_out));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[0]_i_2__3 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [31]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__2_n_0 ),
        .I2(plusOp[31]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[31]));
  LUT5 #(
    .INIT(32'h04000000)) 
    \Gen_Simple_Counter.Access_Count_i[0]_i_3__2 
       (.I0(\Gen_Simple_Counter.Overflow_reg_0 [3]),
        .I1(E),
        .I2(\Gen_Simple_Counter.Overflow_reg_0 [2]),
        .I3(\Gen_Simple_Counter.Overflow_reg_0 [1]),
        .I4(\Gen_Simple_Counter.Overflow_reg_0 [0]),
        .O(\Gen_Simple_Counter.Access_Count_i[0]_i_3__2_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[10]_i_1__3 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [21]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__2_n_0 ),
        .I2(plusOp[21]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[21]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[11]_i_1__3 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [20]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__2_n_0 ),
        .I2(plusOp[20]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[20]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[12]_i_1__3 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [19]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__2_n_0 ),
        .I2(plusOp[19]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[19]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[13]_i_1__3 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [18]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__2_n_0 ),
        .I2(plusOp[18]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[18]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[14]_i_1__3 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [17]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__2_n_0 ),
        .I2(plusOp[17]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[17]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[15]_i_1__3 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [16]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__2_n_0 ),
        .I2(plusOp[16]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[16]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[16]_i_1__3 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [15]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__2_n_0 ),
        .I2(plusOp[15]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[15]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[17]_i_1__3 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [14]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__2_n_0 ),
        .I2(plusOp[14]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[14]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[18]_i_1__3 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [13]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__2_n_0 ),
        .I2(plusOp[13]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[13]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[19]_i_1__3 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [12]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__2_n_0 ),
        .I2(plusOp[12]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[12]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[1]_i_1__3 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [30]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__2_n_0 ),
        .I2(plusOp[30]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[30]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[20]_i_1__3 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [11]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__2_n_0 ),
        .I2(plusOp[11]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[11]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[21]_i_1__3 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [10]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__2_n_0 ),
        .I2(plusOp[10]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[10]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[22]_i_1__3 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [9]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__2_n_0 ),
        .I2(plusOp[9]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[9]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[23]_i_1__3 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [8]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__2_n_0 ),
        .I2(plusOp[8]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[8]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[24]_i_1__3 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [7]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__2_n_0 ),
        .I2(plusOp[7]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[7]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[25]_i_1__3 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [6]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__2_n_0 ),
        .I2(plusOp[6]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[6]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[26]_i_1__3 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [5]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__2_n_0 ),
        .I2(plusOp[5]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[5]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[27]_i_1__3 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [4]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__2_n_0 ),
        .I2(plusOp[4]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[4]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[28]_i_1__3 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [3]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__2_n_0 ),
        .I2(plusOp[3]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[3]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[29]_i_1__3 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [2]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__2_n_0 ),
        .I2(plusOp[2]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[2]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[2]_i_1__3 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [29]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__2_n_0 ),
        .I2(plusOp[29]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[29]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[30]_i_1__3 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [1]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__2_n_0 ),
        .I2(plusOp[1]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[1]));
  LUT4 #(
    .INIT(16'h888B)) 
    \Gen_Simple_Counter.Access_Count_i[31]_i_1__3 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [0]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__2_n_0 ),
        .I2(Q[0]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[0]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[3]_i_1__3 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [28]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__2_n_0 ),
        .I2(plusOp[28]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[28]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[4]_i_1__3 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [27]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__2_n_0 ),
        .I2(plusOp[27]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[27]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[5]_i_1__3 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [26]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__2_n_0 ),
        .I2(plusOp[26]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[26]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[6]_i_1__3 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [25]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__2_n_0 ),
        .I2(plusOp[25]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[25]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[7]_i_1__3 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [24]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__2_n_0 ),
        .I2(plusOp[24]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[24]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[8]_i_1__3 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [23]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__2_n_0 ),
        .I2(plusOp[23]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[23]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[9]_i_1__3 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [22]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3__2_n_0 ),
        .I2(plusOp[22]),
        .I3(\Gen_Simple_Counter.Access_Count_i_reg[31]_0 ),
        .O(p_0_in[22]));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[0] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[31]),
        .Q(Q[31]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[10] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[21]),
        .Q(Q[21]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[11] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[20]),
        .Q(Q[20]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[12] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[19]),
        .Q(Q[19]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[13] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[18]),
        .Q(Q[18]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[14] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[17]),
        .Q(Q[17]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[15] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[16]),
        .Q(Q[16]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[16] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[15]),
        .Q(Q[15]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[17] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[14]),
        .Q(Q[14]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[18] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[13]),
        .Q(Q[13]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[19] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[12]),
        .Q(Q[12]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[1] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[30]),
        .Q(Q[30]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[20] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[11]),
        .Q(Q[11]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[21] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[10]),
        .Q(Q[10]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[22] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[9]),
        .Q(Q[9]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[23] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[8]),
        .Q(Q[8]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[24] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[7]),
        .Q(Q[7]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[25] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[6]),
        .Q(Q[6]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[26] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[5]),
        .Q(Q[5]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[27] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[4]),
        .Q(Q[4]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[28] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[3]),
        .Q(Q[3]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[29] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[2]),
        .Q(Q[2]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[2] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[29]),
        .Q(Q[29]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[30] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[1]),
        .Q(Q[1]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[31] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[0]),
        .Q(Q[0]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[3] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[28]),
        .Q(Q[28]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[4] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[27]),
        .Q(Q[27]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[5] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[26]),
        .Q(Q[26]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[6] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[25]),
        .Q(Q[25]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[7] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[24]),
        .Q(Q[24]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[8] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[23]),
        .Q(Q[23]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[9] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[22]),
        .Q(Q[22]),
        .R(sync_reset));
  LUT2 #(
    .INIT(4'hE)) 
    \Gen_Simple_Counter.Count[0][15]_i_1__2 
       (.I0(sync_reset),
        .I1(Stopping_reg_n_0),
        .O(\Gen_Simple_Counter.Count[0][15]_i_1__2_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Gen_Simple_Counter.Count[0][15]_i_2__2 
       (.I0(\Running_reg[0]_0 ),
        .I1(\Gen_Simple_Counter.Count[0][15]_i_4__2_n_0 ),
        .O(\Gen_Simple_Counter.Count[0][15]_i_2__2_n_0 ));
  LUT6 #(
    .INIT(64'hBFFFFFFFFFFFFFFF)) 
    \Gen_Simple_Counter.Count[0][15]_i_4__2 
       (.I0(\Gen_Simple_Counter.Count[0][15]_i_6__2_n_0 ),
        .I1(\Gen_Simple_Counter.Count_reg[0]_28 [3]),
        .I2(\Gen_Simple_Counter.Count_reg[0]_28 [15]),
        .I3(\Gen_Simple_Counter.Count_reg[0]_28 [6]),
        .I4(\Gen_Simple_Counter.Count_reg[0]_28 [12]),
        .I5(\Gen_Simple_Counter.Count[0][15]_i_7__2_n_0 ),
        .O(\Gen_Simple_Counter.Count[0][15]_i_4__2_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \Gen_Simple_Counter.Count[0][15]_i_5__2 
       (.I0(\Gen_Simple_Counter.Count_reg[0]_28 [15]),
        .O(\Gen_Simple_Counter.Count[0][15]_i_5__2_n_0 ));
  LUT4 #(
    .INIT(16'h7FFF)) 
    \Gen_Simple_Counter.Count[0][15]_i_6__2 
       (.I0(\Gen_Simple_Counter.Count_reg[0]_28 [4]),
        .I1(\Gen_Simple_Counter.Count_reg[0]_28 [5]),
        .I2(\Gen_Simple_Counter.Count_reg[0]_28 [9]),
        .I3(\Gen_Simple_Counter.Count_reg[0]_28 [10]),
        .O(\Gen_Simple_Counter.Count[0][15]_i_6__2_n_0 ));
  LUT5 #(
    .INIT(32'h00008000)) 
    \Gen_Simple_Counter.Count[0][15]_i_7__2 
       (.I0(\Gen_Simple_Counter.Count_reg[0]_28 [1]),
        .I1(\Gen_Simple_Counter.Count_reg[0]_28 [0]),
        .I2(\Gen_Simple_Counter.Count_reg[0]_28 [8]),
        .I3(\Gen_Simple_Counter.Count_reg[0]_28 [7]),
        .I4(\Gen_Simple_Counter.Count[0][15]_i_8__2_n_0 ),
        .O(\Gen_Simple_Counter.Count[0][15]_i_7__2_n_0 ));
  LUT4 #(
    .INIT(16'h7FFF)) 
    \Gen_Simple_Counter.Count[0][15]_i_8__2 
       (.I0(\Gen_Simple_Counter.Count_reg[0]_28 [2]),
        .I1(\Gen_Simple_Counter.Count_reg[0]_28 [14]),
        .I2(\Gen_Simple_Counter.Count_reg[0]_28 [11]),
        .I3(\Gen_Simple_Counter.Count_reg[0]_28 [13]),
        .O(\Gen_Simple_Counter.Count[0][15]_i_8__2_n_0 ));
  FDRE \Gen_Simple_Counter.Count_reg[0][0] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2__2_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][3]_i_1__2_n_4 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_28 [0]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1__2_n_0 ));
  FDRE \Gen_Simple_Counter.Count_reg[0][10] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2__2_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][11]_i_1__2_n_6 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_28 [10]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1__2_n_0 ));
  FDRE \Gen_Simple_Counter.Count_reg[0][11] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2__2_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][11]_i_1__2_n_7 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_28 [11]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1__2_n_0 ));
  CARRY4 \Gen_Simple_Counter.Count_reg[0][11]_i_1__2 
       (.CI(\Gen_Simple_Counter.Count_reg[0][15]_i_3__2_n_0 ),
        .CO({\Gen_Simple_Counter.Count_reg[0][11]_i_1__2_n_0 ,\Gen_Simple_Counter.Count_reg[0][11]_i_1__2_n_1 ,\Gen_Simple_Counter.Count_reg[0][11]_i_1__2_n_2 ,\Gen_Simple_Counter.Count_reg[0][11]_i_1__2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\Gen_Simple_Counter.Count_reg[0][11]_i_1__2_n_4 ,\Gen_Simple_Counter.Count_reg[0][11]_i_1__2_n_5 ,\Gen_Simple_Counter.Count_reg[0][11]_i_1__2_n_6 ,\Gen_Simple_Counter.Count_reg[0][11]_i_1__2_n_7 }),
        .S({\Gen_Simple_Counter.Count_reg[0]_28 [8],\Gen_Simple_Counter.Count_reg[0]_28 [9],\Gen_Simple_Counter.Count_reg[0]_28 [10],\Gen_Simple_Counter.Count_reg[0]_28 [11]}));
  FDRE \Gen_Simple_Counter.Count_reg[0][12] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2__2_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][15]_i_3__2_n_4 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_28 [12]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1__2_n_0 ));
  FDRE \Gen_Simple_Counter.Count_reg[0][13] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2__2_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][15]_i_3__2_n_5 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_28 [13]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1__2_n_0 ));
  FDRE \Gen_Simple_Counter.Count_reg[0][14] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2__2_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][15]_i_3__2_n_6 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_28 [14]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1__2_n_0 ));
  FDRE \Gen_Simple_Counter.Count_reg[0][15] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2__2_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][15]_i_3__2_n_7 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_28 [15]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1__2_n_0 ));
  CARRY4 \Gen_Simple_Counter.Count_reg[0][15]_i_3__2 
       (.CI(1'b0),
        .CO({\Gen_Simple_Counter.Count_reg[0][15]_i_3__2_n_0 ,\Gen_Simple_Counter.Count_reg[0][15]_i_3__2_n_1 ,\Gen_Simple_Counter.Count_reg[0][15]_i_3__2_n_2 ,\Gen_Simple_Counter.Count_reg[0][15]_i_3__2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b1}),
        .O({\Gen_Simple_Counter.Count_reg[0][15]_i_3__2_n_4 ,\Gen_Simple_Counter.Count_reg[0][15]_i_3__2_n_5 ,\Gen_Simple_Counter.Count_reg[0][15]_i_3__2_n_6 ,\Gen_Simple_Counter.Count_reg[0][15]_i_3__2_n_7 }),
        .S({\Gen_Simple_Counter.Count_reg[0]_28 [12],\Gen_Simple_Counter.Count_reg[0]_28 [13],\Gen_Simple_Counter.Count_reg[0]_28 [14],\Gen_Simple_Counter.Count[0][15]_i_5__2_n_0 }));
  FDRE \Gen_Simple_Counter.Count_reg[0][1] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2__2_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][3]_i_1__2_n_5 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_28 [1]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1__2_n_0 ));
  FDRE \Gen_Simple_Counter.Count_reg[0][2] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2__2_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][3]_i_1__2_n_6 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_28 [2]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1__2_n_0 ));
  FDRE \Gen_Simple_Counter.Count_reg[0][3] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2__2_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][3]_i_1__2_n_7 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_28 [3]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1__2_n_0 ));
  CARRY4 \Gen_Simple_Counter.Count_reg[0][3]_i_1__2 
       (.CI(\Gen_Simple_Counter.Count_reg[0][7]_i_1__2_n_0 ),
        .CO({\NLW_Gen_Simple_Counter.Count_reg[0][3]_i_1__2_CO_UNCONNECTED [3],\Gen_Simple_Counter.Count_reg[0][3]_i_1__2_n_1 ,\Gen_Simple_Counter.Count_reg[0][3]_i_1__2_n_2 ,\Gen_Simple_Counter.Count_reg[0][3]_i_1__2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\Gen_Simple_Counter.Count_reg[0][3]_i_1__2_n_4 ,\Gen_Simple_Counter.Count_reg[0][3]_i_1__2_n_5 ,\Gen_Simple_Counter.Count_reg[0][3]_i_1__2_n_6 ,\Gen_Simple_Counter.Count_reg[0][3]_i_1__2_n_7 }),
        .S({\Gen_Simple_Counter.Count_reg[0]_28 [0],\Gen_Simple_Counter.Count_reg[0]_28 [1],\Gen_Simple_Counter.Count_reg[0]_28 [2],\Gen_Simple_Counter.Count_reg[0]_28 [3]}));
  FDRE \Gen_Simple_Counter.Count_reg[0][4] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2__2_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][7]_i_1__2_n_4 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_28 [4]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1__2_n_0 ));
  FDRE \Gen_Simple_Counter.Count_reg[0][5] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2__2_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][7]_i_1__2_n_5 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_28 [5]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1__2_n_0 ));
  FDRE \Gen_Simple_Counter.Count_reg[0][6] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2__2_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][7]_i_1__2_n_6 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_28 [6]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1__2_n_0 ));
  FDRE \Gen_Simple_Counter.Count_reg[0][7] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2__2_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][7]_i_1__2_n_7 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_28 [7]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1__2_n_0 ));
  CARRY4 \Gen_Simple_Counter.Count_reg[0][7]_i_1__2 
       (.CI(\Gen_Simple_Counter.Count_reg[0][11]_i_1__2_n_0 ),
        .CO({\Gen_Simple_Counter.Count_reg[0][7]_i_1__2_n_0 ,\Gen_Simple_Counter.Count_reg[0][7]_i_1__2_n_1 ,\Gen_Simple_Counter.Count_reg[0][7]_i_1__2_n_2 ,\Gen_Simple_Counter.Count_reg[0][7]_i_1__2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\Gen_Simple_Counter.Count_reg[0][7]_i_1__2_n_4 ,\Gen_Simple_Counter.Count_reg[0][7]_i_1__2_n_5 ,\Gen_Simple_Counter.Count_reg[0][7]_i_1__2_n_6 ,\Gen_Simple_Counter.Count_reg[0][7]_i_1__2_n_7 }),
        .S({\Gen_Simple_Counter.Count_reg[0]_28 [4],\Gen_Simple_Counter.Count_reg[0]_28 [5],\Gen_Simple_Counter.Count_reg[0]_28 [6],\Gen_Simple_Counter.Count_reg[0]_28 [7]}));
  FDRE \Gen_Simple_Counter.Count_reg[0][8] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2__2_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][11]_i_1__2_n_4 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_28 [8]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1__2_n_0 ));
  FDRE \Gen_Simple_Counter.Count_reg[0][9] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2__2_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][11]_i_1__2_n_5 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_28 [9]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000005510)) 
    \Gen_Simple_Counter.Overflow_i_1__3 
       (.I0(sync_reset),
        .I1(\Gen_Simple_Counter.Count[0][15]_i_4__2_n_0 ),
        .I2(\Running_reg[0]_0 ),
        .I3(D[0]),
        .I4(\Gen_Simple_Counter.Access_Count_i[0]_i_3__2_n_0 ),
        .I5(clear_cmd),
        .O(\Gen_Simple_Counter.Overflow_i_1__3_n_0 ));
  FDRE \Gen_Simple_Counter.Overflow_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Gen_Simple_Counter.Overflow_i_1__3_n_0 ),
        .Q(D[0]),
        .R(1'b0));
  FDRE \Is_Valid_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Is_Valid_reg[0]_0 ),
        .Q(Is_Valid_5),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'h0000000045444444)) 
    \Running[0]_i_1__2 
       (.I0(Stopping_reg_0),
        .I1(\Running_reg[0]_0 ),
        .I2(Stopping_reg_1),
        .I3(Stopping_reg_2),
        .I4(Empty_reg_0),
        .I5(sync_reset),
        .O(\Running[0]_i_1__2_n_0 ));
  FDRE \Running_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Running[0]_i_1__2_n_0 ),
        .Q(\Running_reg[0]_0 ),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h00000000FF080000)) 
    Stopping_i_1__2
       (.I0(Empty_reg_0),
        .I1(Stopping_reg_2),
        .I2(Stopping_reg_1),
        .I3(\Running_reg[0]_0 ),
        .I4(Stopping_reg_0),
        .I5(sync_reset),
        .O(Stopping4_out));
  FDRE Stopping_reg
       (.C(Clk),
        .CE(1'b1),
        .D(Stopping4_out),
        .Q(Stopping_reg_n_0),
        .R(1'b0));
  CARRY4 plusOp_carry
       (.CI(1'b0),
        .CO({plusOp_carry_n_0,plusOp_carry_n_1,plusOp_carry_n_2,plusOp_carry_n_3}),
        .CYINIT(Q[0]),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(plusOp[4:1]),
        .S(Q[4:1]));
  CARRY4 plusOp_carry__0
       (.CI(plusOp_carry_n_0),
        .CO({plusOp_carry__0_n_0,plusOp_carry__0_n_1,plusOp_carry__0_n_2,plusOp_carry__0_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(plusOp[8:5]),
        .S(Q[8:5]));
  CARRY4 plusOp_carry__1
       (.CI(plusOp_carry__0_n_0),
        .CO({plusOp_carry__1_n_0,plusOp_carry__1_n_1,plusOp_carry__1_n_2,plusOp_carry__1_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(plusOp[12:9]),
        .S(Q[12:9]));
  CARRY4 plusOp_carry__2
       (.CI(plusOp_carry__1_n_0),
        .CO({plusOp_carry__2_n_0,plusOp_carry__2_n_1,plusOp_carry__2_n_2,plusOp_carry__2_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(plusOp[16:13]),
        .S(Q[16:13]));
  CARRY4 plusOp_carry__3
       (.CI(plusOp_carry__2_n_0),
        .CO({plusOp_carry__3_n_0,plusOp_carry__3_n_1,plusOp_carry__3_n_2,plusOp_carry__3_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(plusOp[20:17]),
        .S(Q[20:17]));
  CARRY4 plusOp_carry__4
       (.CI(plusOp_carry__3_n_0),
        .CO({plusOp_carry__4_n_0,plusOp_carry__4_n_1,plusOp_carry__4_n_2,plusOp_carry__4_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(plusOp[24:21]),
        .S(Q[24:21]));
  CARRY4 plusOp_carry__5
       (.CI(plusOp_carry__4_n_0),
        .CO({plusOp_carry__5_n_0,plusOp_carry__5_n_1,plusOp_carry__5_n_2,plusOp_carry__5_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(plusOp[28:25]),
        .S(Q[28:25]));
  CARRY4 plusOp_carry__6
       (.CI(plusOp_carry__5_n_0),
        .CO({NLW_plusOp_carry__6_CO_UNCONNECTED[3:2],plusOp_carry__6_n_2,plusOp_carry__6_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({NLW_plusOp_carry__6_O_UNCONNECTED[3],plusOp[31:29]}),
        .S({1'b0,Q[31:29]}));
endmodule

(* ORIG_REF_NAME = "debug_stat_counter" *) 
module block_design_microblaze_0_0_debug_stat_counter_64
   (Empty_reg_0,
    \Running_reg[0]_0 ,
    D,
    Is_Valid_7,
    Q,
    Clk,
    sync_reset,
    Empty_reg_1,
    \Is_Valid_reg[0]_0 ,
    Stopping_reg_0,
    Stopping_reg_1,
    Stopping_reg_2,
    \Gen_Simple_Counter.Access_Count_i_reg[0]_0 ,
    clear_cmd,
    \Gen_Simple_Counter.Overflow_reg_0 ,
    E);
  output Empty_reg_0;
  output \Running_reg[0]_0 ;
  output [1:0]D;
  output Is_Valid_7;
  output [31:0]Q;
  input Clk;
  input sync_reset;
  input Empty_reg_1;
  input \Is_Valid_reg[0]_0 ;
  input Stopping_reg_0;
  input Stopping_reg_1;
  input Stopping_reg_2;
  input [31:0]\Gen_Simple_Counter.Access_Count_i_reg[0]_0 ;
  input clear_cmd;
  input [3:0]\Gen_Simple_Counter.Overflow_reg_0 ;
  input [0:0]E;

  wire Clk;
  wire [1:0]D;
  wire [0:0]E;
  wire Empty_reg_0;
  wire Empty_reg_1;
  wire Full_i_1__3_n_0;
  wire \Gen_Simple_Counter.Access_Count_i[0]_i_3_n_0 ;
  wire [31:0]\Gen_Simple_Counter.Access_Count_i_reg[0]_0 ;
  wire \Gen_Simple_Counter.Count[0][15]_i_1__3_n_0 ;
  wire \Gen_Simple_Counter.Count[0][15]_i_2__3_n_0 ;
  wire \Gen_Simple_Counter.Count[0][15]_i_4__3_n_0 ;
  wire \Gen_Simple_Counter.Count[0][15]_i_5__3_n_0 ;
  wire \Gen_Simple_Counter.Count[0][15]_i_6__3_n_0 ;
  wire \Gen_Simple_Counter.Count[0][15]_i_7__3_n_0 ;
  wire \Gen_Simple_Counter.Count[0][15]_i_8__3_n_0 ;
  wire \Gen_Simple_Counter.Count_reg[0][11]_i_1__3_n_0 ;
  wire \Gen_Simple_Counter.Count_reg[0][11]_i_1__3_n_1 ;
  wire \Gen_Simple_Counter.Count_reg[0][11]_i_1__3_n_2 ;
  wire \Gen_Simple_Counter.Count_reg[0][11]_i_1__3_n_3 ;
  wire \Gen_Simple_Counter.Count_reg[0][11]_i_1__3_n_4 ;
  wire \Gen_Simple_Counter.Count_reg[0][11]_i_1__3_n_5 ;
  wire \Gen_Simple_Counter.Count_reg[0][11]_i_1__3_n_6 ;
  wire \Gen_Simple_Counter.Count_reg[0][11]_i_1__3_n_7 ;
  wire \Gen_Simple_Counter.Count_reg[0][15]_i_3__3_n_0 ;
  wire \Gen_Simple_Counter.Count_reg[0][15]_i_3__3_n_1 ;
  wire \Gen_Simple_Counter.Count_reg[0][15]_i_3__3_n_2 ;
  wire \Gen_Simple_Counter.Count_reg[0][15]_i_3__3_n_3 ;
  wire \Gen_Simple_Counter.Count_reg[0][15]_i_3__3_n_4 ;
  wire \Gen_Simple_Counter.Count_reg[0][15]_i_3__3_n_5 ;
  wire \Gen_Simple_Counter.Count_reg[0][15]_i_3__3_n_6 ;
  wire \Gen_Simple_Counter.Count_reg[0][15]_i_3__3_n_7 ;
  wire \Gen_Simple_Counter.Count_reg[0][3]_i_1__3_n_1 ;
  wire \Gen_Simple_Counter.Count_reg[0][3]_i_1__3_n_2 ;
  wire \Gen_Simple_Counter.Count_reg[0][3]_i_1__3_n_3 ;
  wire \Gen_Simple_Counter.Count_reg[0][3]_i_1__3_n_4 ;
  wire \Gen_Simple_Counter.Count_reg[0][3]_i_1__3_n_5 ;
  wire \Gen_Simple_Counter.Count_reg[0][3]_i_1__3_n_6 ;
  wire \Gen_Simple_Counter.Count_reg[0][3]_i_1__3_n_7 ;
  wire \Gen_Simple_Counter.Count_reg[0][7]_i_1__3_n_0 ;
  wire \Gen_Simple_Counter.Count_reg[0][7]_i_1__3_n_1 ;
  wire \Gen_Simple_Counter.Count_reg[0][7]_i_1__3_n_2 ;
  wire \Gen_Simple_Counter.Count_reg[0][7]_i_1__3_n_3 ;
  wire \Gen_Simple_Counter.Count_reg[0][7]_i_1__3_n_4 ;
  wire \Gen_Simple_Counter.Count_reg[0][7]_i_1__3_n_5 ;
  wire \Gen_Simple_Counter.Count_reg[0][7]_i_1__3_n_6 ;
  wire \Gen_Simple_Counter.Count_reg[0][7]_i_1__3_n_7 ;
  wire [0:15]\Gen_Simple_Counter.Count_reg[0]_29 ;
  wire \Gen_Simple_Counter.Overflow_i_1__0_n_0 ;
  wire [3:0]\Gen_Simple_Counter.Overflow_reg_0 ;
  wire Is_Valid_7;
  wire \Is_Valid_reg[0]_0 ;
  wire [31:0]Q;
  wire \Running[0]_i_1__3_n_0 ;
  wire \Running_reg[0]_0 ;
  wire Stopping4_out;
  wire Stopping_reg_0;
  wire Stopping_reg_1;
  wire Stopping_reg_2;
  wire Stopping_reg_n_0;
  wire clear_cmd;
  wire [31:0]p_0_in;
  wire [0:0]p_2_out;
  wire [31:1]plusOp;
  wire plusOp_carry__0_n_0;
  wire plusOp_carry__0_n_1;
  wire plusOp_carry__0_n_2;
  wire plusOp_carry__0_n_3;
  wire plusOp_carry__1_n_0;
  wire plusOp_carry__1_n_1;
  wire plusOp_carry__1_n_2;
  wire plusOp_carry__1_n_3;
  wire plusOp_carry__2_n_0;
  wire plusOp_carry__2_n_1;
  wire plusOp_carry__2_n_2;
  wire plusOp_carry__2_n_3;
  wire plusOp_carry__3_n_0;
  wire plusOp_carry__3_n_1;
  wire plusOp_carry__3_n_2;
  wire plusOp_carry__3_n_3;
  wire plusOp_carry__4_n_0;
  wire plusOp_carry__4_n_1;
  wire plusOp_carry__4_n_2;
  wire plusOp_carry__4_n_3;
  wire plusOp_carry__5_n_0;
  wire plusOp_carry__5_n_1;
  wire plusOp_carry__5_n_2;
  wire plusOp_carry__5_n_3;
  wire plusOp_carry__6_n_2;
  wire plusOp_carry__6_n_3;
  wire plusOp_carry_n_0;
  wire plusOp_carry_n_1;
  wire plusOp_carry_n_2;
  wire plusOp_carry_n_3;
  wire sync_reset;
  wire [3:3]\NLW_Gen_Simple_Counter.Count_reg[0][3]_i_1__3_CO_UNCONNECTED ;
  wire [3:2]NLW_plusOp_carry__6_CO_UNCONNECTED;
  wire [3:3]NLW_plusOp_carry__6_O_UNCONNECTED;

  FDSE Empty_reg
       (.C(Clk),
        .CE(1'b1),
        .D(Empty_reg_1),
        .Q(Empty_reg_0),
        .S(sync_reset));
  LUT4 #(
    .INIT(16'hFF04)) 
    Full_i_1__3
       (.I0(Stopping_reg_1),
        .I1(Stopping_reg_2),
        .I2(Empty_reg_0),
        .I3(D[1]),
        .O(Full_i_1__3_n_0));
  FDRE Full_reg
       (.C(Clk),
        .CE(1'b1),
        .D(Full_i_1__3_n_0),
        .Q(D[1]),
        .R(sync_reset));
  LUT4 #(
    .INIT(16'hFEEE)) 
    \Gen_Simple_Counter.Access_Count_i[0]_i_1__0 
       (.I0(\Gen_Simple_Counter.Access_Count_i[0]_i_3_n_0 ),
        .I1(clear_cmd),
        .I2(Is_Valid_7),
        .I3(Stopping_reg_n_0),
        .O(p_2_out));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[0]_i_2__0 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [31]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3_n_0 ),
        .I2(plusOp[31]),
        .I3(clear_cmd),
        .O(p_0_in[31]));
  LUT5 #(
    .INIT(32'h00100000)) 
    \Gen_Simple_Counter.Access_Count_i[0]_i_3 
       (.I0(\Gen_Simple_Counter.Overflow_reg_0 [1]),
        .I1(\Gen_Simple_Counter.Overflow_reg_0 [0]),
        .I2(\Gen_Simple_Counter.Overflow_reg_0 [2]),
        .I3(\Gen_Simple_Counter.Overflow_reg_0 [3]),
        .I4(E),
        .O(\Gen_Simple_Counter.Access_Count_i[0]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[10]_i_1__0 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [21]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3_n_0 ),
        .I2(plusOp[21]),
        .I3(clear_cmd),
        .O(p_0_in[21]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[11]_i_1__0 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [20]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3_n_0 ),
        .I2(plusOp[20]),
        .I3(clear_cmd),
        .O(p_0_in[20]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[12]_i_1__0 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [19]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3_n_0 ),
        .I2(plusOp[19]),
        .I3(clear_cmd),
        .O(p_0_in[19]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[13]_i_1__0 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [18]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3_n_0 ),
        .I2(plusOp[18]),
        .I3(clear_cmd),
        .O(p_0_in[18]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[14]_i_1__0 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [17]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3_n_0 ),
        .I2(plusOp[17]),
        .I3(clear_cmd),
        .O(p_0_in[17]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[15]_i_1__0 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [16]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3_n_0 ),
        .I2(plusOp[16]),
        .I3(clear_cmd),
        .O(p_0_in[16]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[16]_i_1__0 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [15]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3_n_0 ),
        .I2(plusOp[15]),
        .I3(clear_cmd),
        .O(p_0_in[15]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[17]_i_1__0 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [14]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3_n_0 ),
        .I2(plusOp[14]),
        .I3(clear_cmd),
        .O(p_0_in[14]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[18]_i_1__0 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [13]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3_n_0 ),
        .I2(plusOp[13]),
        .I3(clear_cmd),
        .O(p_0_in[13]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[19]_i_1__0 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [12]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3_n_0 ),
        .I2(plusOp[12]),
        .I3(clear_cmd),
        .O(p_0_in[12]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[1]_i_1__0 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [30]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3_n_0 ),
        .I2(plusOp[30]),
        .I3(clear_cmd),
        .O(p_0_in[30]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[20]_i_1__0 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [11]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3_n_0 ),
        .I2(plusOp[11]),
        .I3(clear_cmd),
        .O(p_0_in[11]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[21]_i_1__0 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [10]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3_n_0 ),
        .I2(plusOp[10]),
        .I3(clear_cmd),
        .O(p_0_in[10]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[22]_i_1__0 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [9]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3_n_0 ),
        .I2(plusOp[9]),
        .I3(clear_cmd),
        .O(p_0_in[9]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[23]_i_1__0 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [8]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3_n_0 ),
        .I2(plusOp[8]),
        .I3(clear_cmd),
        .O(p_0_in[8]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[24]_i_1__0 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [7]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3_n_0 ),
        .I2(plusOp[7]),
        .I3(clear_cmd),
        .O(p_0_in[7]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[25]_i_1__0 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [6]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3_n_0 ),
        .I2(plusOp[6]),
        .I3(clear_cmd),
        .O(p_0_in[6]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[26]_i_1__0 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [5]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3_n_0 ),
        .I2(plusOp[5]),
        .I3(clear_cmd),
        .O(p_0_in[5]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[27]_i_1__0 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [4]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3_n_0 ),
        .I2(plusOp[4]),
        .I3(clear_cmd),
        .O(p_0_in[4]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[28]_i_1__0 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [3]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3_n_0 ),
        .I2(plusOp[3]),
        .I3(clear_cmd),
        .O(p_0_in[3]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[29]_i_1__0 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [2]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3_n_0 ),
        .I2(plusOp[2]),
        .I3(clear_cmd),
        .O(p_0_in[2]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[2]_i_1__0 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [29]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3_n_0 ),
        .I2(plusOp[29]),
        .I3(clear_cmd),
        .O(p_0_in[29]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[30]_i_1__0 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [1]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3_n_0 ),
        .I2(plusOp[1]),
        .I3(clear_cmd),
        .O(p_0_in[1]));
  LUT4 #(
    .INIT(16'h888B)) 
    \Gen_Simple_Counter.Access_Count_i[31]_i_1__0 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [0]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3_n_0 ),
        .I2(Q[0]),
        .I3(clear_cmd),
        .O(p_0_in[0]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[3]_i_1__0 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [28]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3_n_0 ),
        .I2(plusOp[28]),
        .I3(clear_cmd),
        .O(p_0_in[28]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[4]_i_1__0 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [27]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3_n_0 ),
        .I2(plusOp[27]),
        .I3(clear_cmd),
        .O(p_0_in[27]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[5]_i_1__0 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [26]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3_n_0 ),
        .I2(plusOp[26]),
        .I3(clear_cmd),
        .O(p_0_in[26]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[6]_i_1__0 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [25]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3_n_0 ),
        .I2(plusOp[25]),
        .I3(clear_cmd),
        .O(p_0_in[25]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[7]_i_1__0 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [24]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3_n_0 ),
        .I2(plusOp[24]),
        .I3(clear_cmd),
        .O(p_0_in[24]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[8]_i_1__0 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [23]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3_n_0 ),
        .I2(plusOp[23]),
        .I3(clear_cmd),
        .O(p_0_in[23]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Simple_Counter.Access_Count_i[9]_i_1__0 
       (.I0(\Gen_Simple_Counter.Access_Count_i_reg[0]_0 [22]),
        .I1(\Gen_Simple_Counter.Access_Count_i[0]_i_3_n_0 ),
        .I2(plusOp[22]),
        .I3(clear_cmd),
        .O(p_0_in[22]));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[0] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[31]),
        .Q(Q[31]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[10] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[21]),
        .Q(Q[21]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[11] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[20]),
        .Q(Q[20]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[12] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[19]),
        .Q(Q[19]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[13] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[18]),
        .Q(Q[18]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[14] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[17]),
        .Q(Q[17]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[15] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[16]),
        .Q(Q[16]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[16] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[15]),
        .Q(Q[15]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[17] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[14]),
        .Q(Q[14]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[18] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[13]),
        .Q(Q[13]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[19] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[12]),
        .Q(Q[12]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[1] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[30]),
        .Q(Q[30]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[20] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[11]),
        .Q(Q[11]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[21] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[10]),
        .Q(Q[10]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[22] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[9]),
        .Q(Q[9]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[23] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[8]),
        .Q(Q[8]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[24] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[7]),
        .Q(Q[7]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[25] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[6]),
        .Q(Q[6]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[26] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[5]),
        .Q(Q[5]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[27] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[4]),
        .Q(Q[4]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[28] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[3]),
        .Q(Q[3]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[29] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[2]),
        .Q(Q[2]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[2] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[29]),
        .Q(Q[29]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[30] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[1]),
        .Q(Q[1]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[31] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[0]),
        .Q(Q[0]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[3] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[28]),
        .Q(Q[28]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[4] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[27]),
        .Q(Q[27]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[5] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[26]),
        .Q(Q[26]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[6] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[25]),
        .Q(Q[25]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[7] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[24]),
        .Q(Q[24]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[8] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[23]),
        .Q(Q[23]),
        .R(sync_reset));
  FDRE \Gen_Simple_Counter.Access_Count_i_reg[9] 
       (.C(Clk),
        .CE(p_2_out),
        .D(p_0_in[22]),
        .Q(Q[22]),
        .R(sync_reset));
  LUT2 #(
    .INIT(4'hE)) 
    \Gen_Simple_Counter.Count[0][15]_i_1__3 
       (.I0(sync_reset),
        .I1(Stopping_reg_n_0),
        .O(\Gen_Simple_Counter.Count[0][15]_i_1__3_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Gen_Simple_Counter.Count[0][15]_i_2__3 
       (.I0(\Running_reg[0]_0 ),
        .I1(\Gen_Simple_Counter.Count[0][15]_i_4__3_n_0 ),
        .O(\Gen_Simple_Counter.Count[0][15]_i_2__3_n_0 ));
  LUT6 #(
    .INIT(64'hBFFFFFFFFFFFFFFF)) 
    \Gen_Simple_Counter.Count[0][15]_i_4__3 
       (.I0(\Gen_Simple_Counter.Count[0][15]_i_6__3_n_0 ),
        .I1(\Gen_Simple_Counter.Count_reg[0]_29 [7]),
        .I2(\Gen_Simple_Counter.Count_reg[0]_29 [8]),
        .I3(\Gen_Simple_Counter.Count_reg[0]_29 [0]),
        .I4(\Gen_Simple_Counter.Count_reg[0]_29 [1]),
        .I5(\Gen_Simple_Counter.Count[0][15]_i_7__3_n_0 ),
        .O(\Gen_Simple_Counter.Count[0][15]_i_4__3_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \Gen_Simple_Counter.Count[0][15]_i_5__3 
       (.I0(\Gen_Simple_Counter.Count_reg[0]_29 [15]),
        .O(\Gen_Simple_Counter.Count[0][15]_i_5__3_n_0 ));
  LUT4 #(
    .INIT(16'h7FFF)) 
    \Gen_Simple_Counter.Count[0][15]_i_6__3 
       (.I0(\Gen_Simple_Counter.Count_reg[0]_29 [11]),
        .I1(\Gen_Simple_Counter.Count_reg[0]_29 [13]),
        .I2(\Gen_Simple_Counter.Count_reg[0]_29 [6]),
        .I3(\Gen_Simple_Counter.Count_reg[0]_29 [12]),
        .O(\Gen_Simple_Counter.Count[0][15]_i_6__3_n_0 ));
  LUT5 #(
    .INIT(32'h00008000)) 
    \Gen_Simple_Counter.Count[0][15]_i_7__3 
       (.I0(\Gen_Simple_Counter.Count_reg[0]_29 [14]),
        .I1(\Gen_Simple_Counter.Count_reg[0]_29 [2]),
        .I2(\Gen_Simple_Counter.Count_reg[0]_29 [15]),
        .I3(\Gen_Simple_Counter.Count_reg[0]_29 [3]),
        .I4(\Gen_Simple_Counter.Count[0][15]_i_8__3_n_0 ),
        .O(\Gen_Simple_Counter.Count[0][15]_i_7__3_n_0 ));
  LUT4 #(
    .INIT(16'h7FFF)) 
    \Gen_Simple_Counter.Count[0][15]_i_8__3 
       (.I0(\Gen_Simple_Counter.Count_reg[0]_29 [4]),
        .I1(\Gen_Simple_Counter.Count_reg[0]_29 [5]),
        .I2(\Gen_Simple_Counter.Count_reg[0]_29 [9]),
        .I3(\Gen_Simple_Counter.Count_reg[0]_29 [10]),
        .O(\Gen_Simple_Counter.Count[0][15]_i_8__3_n_0 ));
  FDRE \Gen_Simple_Counter.Count_reg[0][0] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2__3_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][3]_i_1__3_n_4 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_29 [0]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1__3_n_0 ));
  FDRE \Gen_Simple_Counter.Count_reg[0][10] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2__3_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][11]_i_1__3_n_6 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_29 [10]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1__3_n_0 ));
  FDRE \Gen_Simple_Counter.Count_reg[0][11] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2__3_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][11]_i_1__3_n_7 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_29 [11]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1__3_n_0 ));
  CARRY4 \Gen_Simple_Counter.Count_reg[0][11]_i_1__3 
       (.CI(\Gen_Simple_Counter.Count_reg[0][15]_i_3__3_n_0 ),
        .CO({\Gen_Simple_Counter.Count_reg[0][11]_i_1__3_n_0 ,\Gen_Simple_Counter.Count_reg[0][11]_i_1__3_n_1 ,\Gen_Simple_Counter.Count_reg[0][11]_i_1__3_n_2 ,\Gen_Simple_Counter.Count_reg[0][11]_i_1__3_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\Gen_Simple_Counter.Count_reg[0][11]_i_1__3_n_4 ,\Gen_Simple_Counter.Count_reg[0][11]_i_1__3_n_5 ,\Gen_Simple_Counter.Count_reg[0][11]_i_1__3_n_6 ,\Gen_Simple_Counter.Count_reg[0][11]_i_1__3_n_7 }),
        .S({\Gen_Simple_Counter.Count_reg[0]_29 [8],\Gen_Simple_Counter.Count_reg[0]_29 [9],\Gen_Simple_Counter.Count_reg[0]_29 [10],\Gen_Simple_Counter.Count_reg[0]_29 [11]}));
  FDRE \Gen_Simple_Counter.Count_reg[0][12] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2__3_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][15]_i_3__3_n_4 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_29 [12]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1__3_n_0 ));
  FDRE \Gen_Simple_Counter.Count_reg[0][13] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2__3_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][15]_i_3__3_n_5 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_29 [13]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1__3_n_0 ));
  FDRE \Gen_Simple_Counter.Count_reg[0][14] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2__3_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][15]_i_3__3_n_6 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_29 [14]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1__3_n_0 ));
  FDRE \Gen_Simple_Counter.Count_reg[0][15] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2__3_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][15]_i_3__3_n_7 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_29 [15]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1__3_n_0 ));
  CARRY4 \Gen_Simple_Counter.Count_reg[0][15]_i_3__3 
       (.CI(1'b0),
        .CO({\Gen_Simple_Counter.Count_reg[0][15]_i_3__3_n_0 ,\Gen_Simple_Counter.Count_reg[0][15]_i_3__3_n_1 ,\Gen_Simple_Counter.Count_reg[0][15]_i_3__3_n_2 ,\Gen_Simple_Counter.Count_reg[0][15]_i_3__3_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b1}),
        .O({\Gen_Simple_Counter.Count_reg[0][15]_i_3__3_n_4 ,\Gen_Simple_Counter.Count_reg[0][15]_i_3__3_n_5 ,\Gen_Simple_Counter.Count_reg[0][15]_i_3__3_n_6 ,\Gen_Simple_Counter.Count_reg[0][15]_i_3__3_n_7 }),
        .S({\Gen_Simple_Counter.Count_reg[0]_29 [12],\Gen_Simple_Counter.Count_reg[0]_29 [13],\Gen_Simple_Counter.Count_reg[0]_29 [14],\Gen_Simple_Counter.Count[0][15]_i_5__3_n_0 }));
  FDRE \Gen_Simple_Counter.Count_reg[0][1] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2__3_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][3]_i_1__3_n_5 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_29 [1]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1__3_n_0 ));
  FDRE \Gen_Simple_Counter.Count_reg[0][2] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2__3_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][3]_i_1__3_n_6 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_29 [2]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1__3_n_0 ));
  FDRE \Gen_Simple_Counter.Count_reg[0][3] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2__3_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][3]_i_1__3_n_7 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_29 [3]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1__3_n_0 ));
  CARRY4 \Gen_Simple_Counter.Count_reg[0][3]_i_1__3 
       (.CI(\Gen_Simple_Counter.Count_reg[0][7]_i_1__3_n_0 ),
        .CO({\NLW_Gen_Simple_Counter.Count_reg[0][3]_i_1__3_CO_UNCONNECTED [3],\Gen_Simple_Counter.Count_reg[0][3]_i_1__3_n_1 ,\Gen_Simple_Counter.Count_reg[0][3]_i_1__3_n_2 ,\Gen_Simple_Counter.Count_reg[0][3]_i_1__3_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\Gen_Simple_Counter.Count_reg[0][3]_i_1__3_n_4 ,\Gen_Simple_Counter.Count_reg[0][3]_i_1__3_n_5 ,\Gen_Simple_Counter.Count_reg[0][3]_i_1__3_n_6 ,\Gen_Simple_Counter.Count_reg[0][3]_i_1__3_n_7 }),
        .S({\Gen_Simple_Counter.Count_reg[0]_29 [0],\Gen_Simple_Counter.Count_reg[0]_29 [1],\Gen_Simple_Counter.Count_reg[0]_29 [2],\Gen_Simple_Counter.Count_reg[0]_29 [3]}));
  FDRE \Gen_Simple_Counter.Count_reg[0][4] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2__3_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][7]_i_1__3_n_4 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_29 [4]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1__3_n_0 ));
  FDRE \Gen_Simple_Counter.Count_reg[0][5] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2__3_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][7]_i_1__3_n_5 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_29 [5]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1__3_n_0 ));
  FDRE \Gen_Simple_Counter.Count_reg[0][6] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2__3_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][7]_i_1__3_n_6 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_29 [6]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1__3_n_0 ));
  FDRE \Gen_Simple_Counter.Count_reg[0][7] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2__3_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][7]_i_1__3_n_7 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_29 [7]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1__3_n_0 ));
  CARRY4 \Gen_Simple_Counter.Count_reg[0][7]_i_1__3 
       (.CI(\Gen_Simple_Counter.Count_reg[0][11]_i_1__3_n_0 ),
        .CO({\Gen_Simple_Counter.Count_reg[0][7]_i_1__3_n_0 ,\Gen_Simple_Counter.Count_reg[0][7]_i_1__3_n_1 ,\Gen_Simple_Counter.Count_reg[0][7]_i_1__3_n_2 ,\Gen_Simple_Counter.Count_reg[0][7]_i_1__3_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\Gen_Simple_Counter.Count_reg[0][7]_i_1__3_n_4 ,\Gen_Simple_Counter.Count_reg[0][7]_i_1__3_n_5 ,\Gen_Simple_Counter.Count_reg[0][7]_i_1__3_n_6 ,\Gen_Simple_Counter.Count_reg[0][7]_i_1__3_n_7 }),
        .S({\Gen_Simple_Counter.Count_reg[0]_29 [4],\Gen_Simple_Counter.Count_reg[0]_29 [5],\Gen_Simple_Counter.Count_reg[0]_29 [6],\Gen_Simple_Counter.Count_reg[0]_29 [7]}));
  FDRE \Gen_Simple_Counter.Count_reg[0][8] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2__3_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][11]_i_1__3_n_4 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_29 [8]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1__3_n_0 ));
  FDRE \Gen_Simple_Counter.Count_reg[0][9] 
       (.C(Clk),
        .CE(\Gen_Simple_Counter.Count[0][15]_i_2__3_n_0 ),
        .D(\Gen_Simple_Counter.Count_reg[0][11]_i_1__3_n_5 ),
        .Q(\Gen_Simple_Counter.Count_reg[0]_29 [9]),
        .R(\Gen_Simple_Counter.Count[0][15]_i_1__3_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000005510)) 
    \Gen_Simple_Counter.Overflow_i_1__0 
       (.I0(sync_reset),
        .I1(\Gen_Simple_Counter.Count[0][15]_i_4__3_n_0 ),
        .I2(\Running_reg[0]_0 ),
        .I3(D[0]),
        .I4(\Gen_Simple_Counter.Access_Count_i[0]_i_3_n_0 ),
        .I5(clear_cmd),
        .O(\Gen_Simple_Counter.Overflow_i_1__0_n_0 ));
  FDRE \Gen_Simple_Counter.Overflow_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Gen_Simple_Counter.Overflow_i_1__0_n_0 ),
        .Q(D[0]),
        .R(1'b0));
  FDRE \Is_Valid_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Is_Valid_reg[0]_0 ),
        .Q(Is_Valid_7),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'h0000000045444444)) 
    \Running[0]_i_1__3 
       (.I0(Stopping_reg_0),
        .I1(\Running_reg[0]_0 ),
        .I2(Stopping_reg_1),
        .I3(Stopping_reg_2),
        .I4(Empty_reg_0),
        .I5(sync_reset),
        .O(\Running[0]_i_1__3_n_0 ));
  FDRE \Running_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Running[0]_i_1__3_n_0 ),
        .Q(\Running_reg[0]_0 ),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h00000000FF080000)) 
    Stopping_i_1__3
       (.I0(Empty_reg_0),
        .I1(Stopping_reg_2),
        .I2(Stopping_reg_1),
        .I3(\Running_reg[0]_0 ),
        .I4(Stopping_reg_0),
        .I5(sync_reset),
        .O(Stopping4_out));
  FDRE Stopping_reg
       (.C(Clk),
        .CE(1'b1),
        .D(Stopping4_out),
        .Q(Stopping_reg_n_0),
        .R(1'b0));
  CARRY4 plusOp_carry
       (.CI(1'b0),
        .CO({plusOp_carry_n_0,plusOp_carry_n_1,plusOp_carry_n_2,plusOp_carry_n_3}),
        .CYINIT(Q[0]),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(plusOp[4:1]),
        .S(Q[4:1]));
  CARRY4 plusOp_carry__0
       (.CI(plusOp_carry_n_0),
        .CO({plusOp_carry__0_n_0,plusOp_carry__0_n_1,plusOp_carry__0_n_2,plusOp_carry__0_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(plusOp[8:5]),
        .S(Q[8:5]));
  CARRY4 plusOp_carry__1
       (.CI(plusOp_carry__0_n_0),
        .CO({plusOp_carry__1_n_0,plusOp_carry__1_n_1,plusOp_carry__1_n_2,plusOp_carry__1_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(plusOp[12:9]),
        .S(Q[12:9]));
  CARRY4 plusOp_carry__2
       (.CI(plusOp_carry__1_n_0),
        .CO({plusOp_carry__2_n_0,plusOp_carry__2_n_1,plusOp_carry__2_n_2,plusOp_carry__2_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(plusOp[16:13]),
        .S(Q[16:13]));
  CARRY4 plusOp_carry__3
       (.CI(plusOp_carry__2_n_0),
        .CO({plusOp_carry__3_n_0,plusOp_carry__3_n_1,plusOp_carry__3_n_2,plusOp_carry__3_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(plusOp[20:17]),
        .S(Q[20:17]));
  CARRY4 plusOp_carry__4
       (.CI(plusOp_carry__3_n_0),
        .CO({plusOp_carry__4_n_0,plusOp_carry__4_n_1,plusOp_carry__4_n_2,plusOp_carry__4_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(plusOp[24:21]),
        .S(Q[24:21]));
  CARRY4 plusOp_carry__5
       (.CI(plusOp_carry__4_n_0),
        .CO({plusOp_carry__5_n_0,plusOp_carry__5_n_1,plusOp_carry__5_n_2,plusOp_carry__5_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(plusOp[28:25]),
        .S(Q[28:25]));
  CARRY4 plusOp_carry__6
       (.CI(plusOp_carry__5_n_0),
        .CO({NLW_plusOp_carry__6_CO_UNCONNECTED[3:2],plusOp_carry__6_n_2,plusOp_carry__6_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({NLW_plusOp_carry__6_O_UNCONNECTED[3],plusOp[31:29]}),
        .S({1'b0,Q[31:29]}));
endmodule

(* ORIG_REF_NAME = "debug_stat_counter" *) 
module block_design_microblaze_0_0_debug_stat_counter__parameterized2
   (Stopping_reg_0,
    Empty_reg_0,
    \Running_reg[0]_0 ,
    \Gen_Access_Counter.Access_Overflow_reg[0]_0 ,
    Is_Valid_9,
    Q,
    D,
    Full_reg_0,
    \Gen_Access_Counter.Cycle_Count_i_reg[0]_0 ,
    \Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 ,
    Clk,
    sync_reset,
    Empty_reg_1,
    \Gen_Access_Counter.c0_no_overflow_reg_0 ,
    \Is_Valid_reg[0]_0 ,
    \Gen_Access_Counter.c0_stop_valid_reg_0 ,
    E,
    \Gen_Access_Counter.Overflow_reg_0 ,
    Stopping_reg_1,
    Stopping_reg_2,
    Stopping_reg_3,
    \Gen_Access_Counter.Minimum_reg[0]_0 ,
    clear_cmd);
  output Stopping_reg_0;
  output Empty_reg_0;
  output \Running_reg[0]_0 ;
  output \Gen_Access_Counter.Access_Overflow_reg[0]_0 ;
  output Is_Valid_9;
  output [31:0]Q;
  output [31:0]D;
  output [1:0]Full_reg_0;
  output [31:0]\Gen_Access_Counter.Cycle_Count_i_reg[0]_0 ;
  output [31:0]\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 ;
  input Clk;
  input sync_reset;
  input Empty_reg_1;
  input \Gen_Access_Counter.c0_no_overflow_reg_0 ;
  input \Is_Valid_reg[0]_0 ;
  input \Gen_Access_Counter.c0_stop_valid_reg_0 ;
  input [0:0]E;
  input [3:0]\Gen_Access_Counter.Overflow_reg_0 ;
  input Stopping_reg_1;
  input Stopping_reg_2;
  input Stopping_reg_3;
  input [31:0]\Gen_Access_Counter.Minimum_reg[0]_0 ;
  input clear_cmd;

  wire Clk;
  wire [31:0]D;
  wire [0:0]E;
  wire Empty_reg_0;
  wire Empty_reg_1;
  wire Full_i_1__4_n_0;
  wire [1:0]Full_reg_0;
  wire \Gen_Access_Counter.Access_Count_i[0]_i_1_n_0 ;
  wire \Gen_Access_Counter.Access_Count_i[0]_i_2_n_0 ;
  wire \Gen_Access_Counter.Access_Count_i[0]_i_3_n_0 ;
  wire \Gen_Access_Counter.Access_Count_i[10]_i_1_n_0 ;
  wire \Gen_Access_Counter.Access_Count_i[11]_i_1_n_0 ;
  wire \Gen_Access_Counter.Access_Count_i[12]_i_1_n_0 ;
  wire \Gen_Access_Counter.Access_Count_i[13]_i_1_n_0 ;
  wire \Gen_Access_Counter.Access_Count_i[14]_i_1_n_0 ;
  wire \Gen_Access_Counter.Access_Count_i[15]_i_1_n_0 ;
  wire \Gen_Access_Counter.Access_Count_i[16]_i_1_n_0 ;
  wire \Gen_Access_Counter.Access_Count_i[17]_i_1_n_0 ;
  wire \Gen_Access_Counter.Access_Count_i[18]_i_1_n_0 ;
  wire \Gen_Access_Counter.Access_Count_i[19]_i_1_n_0 ;
  wire \Gen_Access_Counter.Access_Count_i[1]_i_1_n_0 ;
  wire \Gen_Access_Counter.Access_Count_i[20]_i_1_n_0 ;
  wire \Gen_Access_Counter.Access_Count_i[21]_i_1_n_0 ;
  wire \Gen_Access_Counter.Access_Count_i[22]_i_1_n_0 ;
  wire \Gen_Access_Counter.Access_Count_i[23]_i_1_n_0 ;
  wire \Gen_Access_Counter.Access_Count_i[24]_i_1_n_0 ;
  wire \Gen_Access_Counter.Access_Count_i[25]_i_1_n_0 ;
  wire \Gen_Access_Counter.Access_Count_i[26]_i_1_n_0 ;
  wire \Gen_Access_Counter.Access_Count_i[27]_i_1_n_0 ;
  wire \Gen_Access_Counter.Access_Count_i[28]_i_1_n_0 ;
  wire \Gen_Access_Counter.Access_Count_i[29]_i_1_n_0 ;
  wire \Gen_Access_Counter.Access_Count_i[2]_i_1_n_0 ;
  wire \Gen_Access_Counter.Access_Count_i[30]_i_1_n_0 ;
  wire \Gen_Access_Counter.Access_Count_i[31]_i_1_n_0 ;
  wire \Gen_Access_Counter.Access_Count_i[3]_i_1_n_0 ;
  wire \Gen_Access_Counter.Access_Count_i[4]_i_1_n_0 ;
  wire \Gen_Access_Counter.Access_Count_i[5]_i_1_n_0 ;
  wire \Gen_Access_Counter.Access_Count_i[6]_i_1_n_0 ;
  wire \Gen_Access_Counter.Access_Count_i[7]_i_1_n_0 ;
  wire \Gen_Access_Counter.Access_Count_i[8]_i_1_n_0 ;
  wire \Gen_Access_Counter.Access_Count_i[9]_i_1_n_0 ;
  wire \Gen_Access_Counter.Access_Overflow[0]_i_1_n_0 ;
  wire \Gen_Access_Counter.Access_Overflow_reg[0]_0 ;
  wire \Gen_Access_Counter.Count[0][15]_i_1_n_0 ;
  wire \Gen_Access_Counter.Count[0][15]_i_2_n_0 ;
  wire \Gen_Access_Counter.Count[0][15]_i_4_n_0 ;
  wire \Gen_Access_Counter.Count[0][15]_i_5_n_0 ;
  wire \Gen_Access_Counter.Count[0][15]_i_6_n_0 ;
  wire \Gen_Access_Counter.Count[0][15]_i_7_n_0 ;
  wire \Gen_Access_Counter.Count[0][15]_i_8_n_0 ;
  wire \Gen_Access_Counter.Count_reg[0][11]_i_1_n_0 ;
  wire \Gen_Access_Counter.Count_reg[0][11]_i_1_n_1 ;
  wire \Gen_Access_Counter.Count_reg[0][11]_i_1_n_2 ;
  wire \Gen_Access_Counter.Count_reg[0][11]_i_1_n_3 ;
  wire \Gen_Access_Counter.Count_reg[0][11]_i_1_n_4 ;
  wire \Gen_Access_Counter.Count_reg[0][11]_i_1_n_5 ;
  wire \Gen_Access_Counter.Count_reg[0][11]_i_1_n_6 ;
  wire \Gen_Access_Counter.Count_reg[0][11]_i_1_n_7 ;
  wire \Gen_Access_Counter.Count_reg[0][15]_i_3_n_0 ;
  wire \Gen_Access_Counter.Count_reg[0][15]_i_3_n_1 ;
  wire \Gen_Access_Counter.Count_reg[0][15]_i_3_n_2 ;
  wire \Gen_Access_Counter.Count_reg[0][15]_i_3_n_3 ;
  wire \Gen_Access_Counter.Count_reg[0][15]_i_3_n_4 ;
  wire \Gen_Access_Counter.Count_reg[0][15]_i_3_n_5 ;
  wire \Gen_Access_Counter.Count_reg[0][15]_i_3_n_6 ;
  wire \Gen_Access_Counter.Count_reg[0][15]_i_3_n_7 ;
  wire \Gen_Access_Counter.Count_reg[0][3]_i_1_n_1 ;
  wire \Gen_Access_Counter.Count_reg[0][3]_i_1_n_2 ;
  wire \Gen_Access_Counter.Count_reg[0][3]_i_1_n_3 ;
  wire \Gen_Access_Counter.Count_reg[0][3]_i_1_n_4 ;
  wire \Gen_Access_Counter.Count_reg[0][3]_i_1_n_5 ;
  wire \Gen_Access_Counter.Count_reg[0][3]_i_1_n_6 ;
  wire \Gen_Access_Counter.Count_reg[0][3]_i_1_n_7 ;
  wire \Gen_Access_Counter.Count_reg[0][7]_i_1_n_0 ;
  wire \Gen_Access_Counter.Count_reg[0][7]_i_1_n_1 ;
  wire \Gen_Access_Counter.Count_reg[0][7]_i_1_n_2 ;
  wire \Gen_Access_Counter.Count_reg[0][7]_i_1_n_3 ;
  wire \Gen_Access_Counter.Count_reg[0][7]_i_1_n_4 ;
  wire \Gen_Access_Counter.Count_reg[0][7]_i_1_n_5 ;
  wire \Gen_Access_Counter.Count_reg[0][7]_i_1_n_6 ;
  wire \Gen_Access_Counter.Count_reg[0][7]_i_1_n_7 ;
  wire [0:15]\Gen_Access_Counter.Count_reg[0]_30 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i[0]_i_1_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i[0]_i_3_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i[12]_i_5_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i[12]_i_9_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i[16]_i_2_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i[16]_i_3_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i[16]_i_4_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i[16]_i_5_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i[16]_i_6_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i[16]_i_7_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i[16]_i_8_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i[16]_i_9_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i[20]_i_2_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i[20]_i_3_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i[20]_i_4_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i[20]_i_5_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i[20]_i_6_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i[20]_i_7_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i[20]_i_8_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i[20]_i_9_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i[24]_i_2_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i[24]_i_3_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i[24]_i_4_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i[24]_i_5_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i[24]_i_6_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i[24]_i_7_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i[24]_i_8_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i[24]_i_9_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i[28]_i_2_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i[28]_i_3_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i[28]_i_4_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i[28]_i_5_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i[28]_i_6_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i[28]_i_7_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i[28]_i_8_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i[28]_i_9_n_0 ;
  wire [31:0]\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i_reg[16]_i_1_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i_reg[16]_i_1_n_1 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i_reg[16]_i_1_n_2 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i_reg[16]_i_1_n_3 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i_reg[16]_i_1_n_4 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i_reg[16]_i_1_n_5 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i_reg[16]_i_1_n_6 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i_reg[16]_i_1_n_7 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i_reg[20]_i_1_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i_reg[20]_i_1_n_1 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i_reg[20]_i_1_n_2 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i_reg[20]_i_1_n_3 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i_reg[20]_i_1_n_4 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i_reg[20]_i_1_n_5 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i_reg[20]_i_1_n_6 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i_reg[20]_i_1_n_7 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i_reg[24]_i_1_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i_reg[24]_i_1_n_1 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i_reg[24]_i_1_n_2 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i_reg[24]_i_1_n_3 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i_reg[24]_i_1_n_4 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i_reg[24]_i_1_n_5 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i_reg[24]_i_1_n_6 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i_reg[24]_i_1_n_7 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i_reg[28]_i_1_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i_reg[28]_i_1_n_1 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i_reg[28]_i_1_n_2 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i_reg[28]_i_1_n_3 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i_reg[28]_i_1_n_4 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i_reg[28]_i_1_n_5 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i_reg[28]_i_1_n_6 ;
  wire \Gen_Access_Counter.Cycle_Count_2_i_reg[28]_i_1_n_7 ;
  wire \Gen_Access_Counter.Cycle_Count_i[0]_i_1_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_i[0]_i_3_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_i[0]_i_4_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_i[0]_i_5_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_i[0]_i_6_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_i[0]_i_7_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_i[12]_i_2_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_i[12]_i_3_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_i[12]_i_4_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_i[12]_i_5_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_i[16]_i_2_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_i[16]_i_3_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_i[16]_i_4_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_i[16]_i_5_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_i[16]_i_6_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_i[16]_i_7_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_i[16]_i_8_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_i[16]_i_9_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_i[20]_i_2_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_i[20]_i_3_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_i[20]_i_4_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_i[20]_i_5_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_i[20]_i_6_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_i[20]_i_7_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_i[20]_i_8_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_i[20]_i_9_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_i[24]_i_2_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_i[24]_i_3_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_i[24]_i_4_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_i[24]_i_5_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_i[24]_i_6_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_i[24]_i_7_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_i[24]_i_8_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_i[24]_i_9_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_i[28]_i_2_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_i[28]_i_3_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_i[28]_i_4_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_i[28]_i_5_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_i[28]_i_6_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_i[28]_i_7_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_i[28]_i_8_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_i[28]_i_9_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_i[4]_i_2_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_i[4]_i_3_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_i[4]_i_4_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_i[4]_i_5_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_i[8]_i_2_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_i[8]_i_3_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_i[8]_i_4_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_i[8]_i_5_n_0 ;
  wire [31:0]\Gen_Access_Counter.Cycle_Count_i_reg[0]_0 ;
  wire \Gen_Access_Counter.Cycle_Count_i_reg[0]_i_2_n_1 ;
  wire \Gen_Access_Counter.Cycle_Count_i_reg[0]_i_2_n_2 ;
  wire \Gen_Access_Counter.Cycle_Count_i_reg[0]_i_2_n_3 ;
  wire \Gen_Access_Counter.Cycle_Count_i_reg[0]_i_2_n_4 ;
  wire \Gen_Access_Counter.Cycle_Count_i_reg[0]_i_2_n_5 ;
  wire \Gen_Access_Counter.Cycle_Count_i_reg[0]_i_2_n_6 ;
  wire \Gen_Access_Counter.Cycle_Count_i_reg[0]_i_2_n_7 ;
  wire \Gen_Access_Counter.Cycle_Count_i_reg[12]_i_1_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_i_reg[12]_i_1_n_1 ;
  wire \Gen_Access_Counter.Cycle_Count_i_reg[12]_i_1_n_2 ;
  wire \Gen_Access_Counter.Cycle_Count_i_reg[12]_i_1_n_3 ;
  wire \Gen_Access_Counter.Cycle_Count_i_reg[12]_i_1_n_4 ;
  wire \Gen_Access_Counter.Cycle_Count_i_reg[12]_i_1_n_5 ;
  wire \Gen_Access_Counter.Cycle_Count_i_reg[12]_i_1_n_6 ;
  wire \Gen_Access_Counter.Cycle_Count_i_reg[12]_i_1_n_7 ;
  wire \Gen_Access_Counter.Cycle_Count_i_reg[16]_i_1_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_i_reg[16]_i_1_n_1 ;
  wire \Gen_Access_Counter.Cycle_Count_i_reg[16]_i_1_n_2 ;
  wire \Gen_Access_Counter.Cycle_Count_i_reg[16]_i_1_n_3 ;
  wire \Gen_Access_Counter.Cycle_Count_i_reg[16]_i_1_n_4 ;
  wire \Gen_Access_Counter.Cycle_Count_i_reg[16]_i_1_n_5 ;
  wire \Gen_Access_Counter.Cycle_Count_i_reg[16]_i_1_n_6 ;
  wire \Gen_Access_Counter.Cycle_Count_i_reg[16]_i_1_n_7 ;
  wire \Gen_Access_Counter.Cycle_Count_i_reg[20]_i_1_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_i_reg[20]_i_1_n_1 ;
  wire \Gen_Access_Counter.Cycle_Count_i_reg[20]_i_1_n_2 ;
  wire \Gen_Access_Counter.Cycle_Count_i_reg[20]_i_1_n_3 ;
  wire \Gen_Access_Counter.Cycle_Count_i_reg[20]_i_1_n_4 ;
  wire \Gen_Access_Counter.Cycle_Count_i_reg[20]_i_1_n_5 ;
  wire \Gen_Access_Counter.Cycle_Count_i_reg[20]_i_1_n_6 ;
  wire \Gen_Access_Counter.Cycle_Count_i_reg[20]_i_1_n_7 ;
  wire \Gen_Access_Counter.Cycle_Count_i_reg[24]_i_1_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_i_reg[24]_i_1_n_1 ;
  wire \Gen_Access_Counter.Cycle_Count_i_reg[24]_i_1_n_2 ;
  wire \Gen_Access_Counter.Cycle_Count_i_reg[24]_i_1_n_3 ;
  wire \Gen_Access_Counter.Cycle_Count_i_reg[24]_i_1_n_4 ;
  wire \Gen_Access_Counter.Cycle_Count_i_reg[24]_i_1_n_5 ;
  wire \Gen_Access_Counter.Cycle_Count_i_reg[24]_i_1_n_6 ;
  wire \Gen_Access_Counter.Cycle_Count_i_reg[24]_i_1_n_7 ;
  wire \Gen_Access_Counter.Cycle_Count_i_reg[28]_i_1_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_i_reg[28]_i_1_n_1 ;
  wire \Gen_Access_Counter.Cycle_Count_i_reg[28]_i_1_n_2 ;
  wire \Gen_Access_Counter.Cycle_Count_i_reg[28]_i_1_n_3 ;
  wire \Gen_Access_Counter.Cycle_Count_i_reg[28]_i_1_n_4 ;
  wire \Gen_Access_Counter.Cycle_Count_i_reg[28]_i_1_n_5 ;
  wire \Gen_Access_Counter.Cycle_Count_i_reg[28]_i_1_n_6 ;
  wire \Gen_Access_Counter.Cycle_Count_i_reg[28]_i_1_n_7 ;
  wire \Gen_Access_Counter.Cycle_Count_i_reg[4]_i_1_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_i_reg[4]_i_1_n_1 ;
  wire \Gen_Access_Counter.Cycle_Count_i_reg[4]_i_1_n_2 ;
  wire \Gen_Access_Counter.Cycle_Count_i_reg[4]_i_1_n_3 ;
  wire \Gen_Access_Counter.Cycle_Count_i_reg[4]_i_1_n_4 ;
  wire \Gen_Access_Counter.Cycle_Count_i_reg[4]_i_1_n_5 ;
  wire \Gen_Access_Counter.Cycle_Count_i_reg[4]_i_1_n_6 ;
  wire \Gen_Access_Counter.Cycle_Count_i_reg[4]_i_1_n_7 ;
  wire \Gen_Access_Counter.Cycle_Count_i_reg[8]_i_1_n_0 ;
  wire \Gen_Access_Counter.Cycle_Count_i_reg[8]_i_1_n_1 ;
  wire \Gen_Access_Counter.Cycle_Count_i_reg[8]_i_1_n_2 ;
  wire \Gen_Access_Counter.Cycle_Count_i_reg[8]_i_1_n_3 ;
  wire \Gen_Access_Counter.Cycle_Count_i_reg[8]_i_1_n_4 ;
  wire \Gen_Access_Counter.Cycle_Count_i_reg[8]_i_1_n_5 ;
  wire \Gen_Access_Counter.Cycle_Count_i_reg[8]_i_1_n_6 ;
  wire \Gen_Access_Counter.Cycle_Count_i_reg[8]_i_1_n_7 ;
  wire \Gen_Access_Counter.Maximum[0]_i_1_n_0 ;
  wire \Gen_Access_Counter.Maximum[0]_i_3_n_0 ;
  wire \Gen_Access_Counter.Minimum[0]_i_1_n_0 ;
  wire \Gen_Access_Counter.Minimum[0]_i_2_n_0 ;
  wire \Gen_Access_Counter.Minimum[10]_i_1_n_0 ;
  wire \Gen_Access_Counter.Minimum[11]_i_1_n_0 ;
  wire \Gen_Access_Counter.Minimum[12]_i_1_n_0 ;
  wire \Gen_Access_Counter.Minimum[13]_i_1_n_0 ;
  wire \Gen_Access_Counter.Minimum[14]_i_1_n_0 ;
  wire \Gen_Access_Counter.Minimum[15]_i_1_n_0 ;
  wire \Gen_Access_Counter.Minimum[1]_i_1_n_0 ;
  wire \Gen_Access_Counter.Minimum[2]_i_1_n_0 ;
  wire \Gen_Access_Counter.Minimum[3]_i_1_n_0 ;
  wire \Gen_Access_Counter.Minimum[4]_i_1_n_0 ;
  wire \Gen_Access_Counter.Minimum[5]_i_1_n_0 ;
  wire \Gen_Access_Counter.Minimum[6]_i_1_n_0 ;
  wire \Gen_Access_Counter.Minimum[7]_i_1_n_0 ;
  wire \Gen_Access_Counter.Minimum[8]_i_1_n_0 ;
  wire \Gen_Access_Counter.Minimum[9]_i_1_n_0 ;
  wire [31:0]\Gen_Access_Counter.Minimum_reg[0]_0 ;
  wire \Gen_Access_Counter.Overflow_i_1_n_0 ;
  wire \Gen_Access_Counter.Overflow_i_2_n_0 ;
  wire \Gen_Access_Counter.Overflow_i_3_n_0 ;
  wire \Gen_Access_Counter.Overflow_i_4_n_0 ;
  wire [3:0]\Gen_Access_Counter.Overflow_reg_0 ;
  wire \Gen_Access_Counter.Using_DSP48_Architectures.No_MUL64.dsp_module_I3_n_0 ;
  wire \Gen_Access_Counter.Using_DSP48_Architectures.No_MUL64.dsp_module_I3_n_1 ;
  wire \Gen_Access_Counter.Using_DSP48_Architectures.No_MUL64.dsp_module_I3_n_10 ;
  wire \Gen_Access_Counter.Using_DSP48_Architectures.No_MUL64.dsp_module_I3_n_11 ;
  wire \Gen_Access_Counter.Using_DSP48_Architectures.No_MUL64.dsp_module_I3_n_12 ;
  wire \Gen_Access_Counter.Using_DSP48_Architectures.No_MUL64.dsp_module_I3_n_13 ;
  wire \Gen_Access_Counter.Using_DSP48_Architectures.No_MUL64.dsp_module_I3_n_14 ;
  wire \Gen_Access_Counter.Using_DSP48_Architectures.No_MUL64.dsp_module_I3_n_15 ;
  wire \Gen_Access_Counter.Using_DSP48_Architectures.No_MUL64.dsp_module_I3_n_2 ;
  wire \Gen_Access_Counter.Using_DSP48_Architectures.No_MUL64.dsp_module_I3_n_3 ;
  wire \Gen_Access_Counter.Using_DSP48_Architectures.No_MUL64.dsp_module_I3_n_4 ;
  wire \Gen_Access_Counter.Using_DSP48_Architectures.No_MUL64.dsp_module_I3_n_5 ;
  wire \Gen_Access_Counter.Using_DSP48_Architectures.No_MUL64.dsp_module_I3_n_6 ;
  wire \Gen_Access_Counter.Using_DSP48_Architectures.No_MUL64.dsp_module_I3_n_7 ;
  wire \Gen_Access_Counter.Using_DSP48_Architectures.No_MUL64.dsp_module_I3_n_8 ;
  wire \Gen_Access_Counter.Using_DSP48_Architectures.No_MUL64.dsp_module_I3_n_9 ;
  wire \Gen_Access_Counter.c0_no_overflow_reg_0 ;
  wire \Gen_Access_Counter.c0_no_overflow_reg_n_0 ;
  wire \Gen_Access_Counter.c0_stop_valid_reg_0 ;
  wire \Gen_Access_Counter.c1_Count_Stop_reg_n_0_[0] ;
  wire \Gen_Access_Counter.c1_Count_Stop_reg_n_0_[10] ;
  wire \Gen_Access_Counter.c1_Count_Stop_reg_n_0_[11] ;
  wire \Gen_Access_Counter.c1_Count_Stop_reg_n_0_[12] ;
  wire \Gen_Access_Counter.c1_Count_Stop_reg_n_0_[13] ;
  wire \Gen_Access_Counter.c1_Count_Stop_reg_n_0_[14] ;
  wire \Gen_Access_Counter.c1_Count_Stop_reg_n_0_[15] ;
  wire \Gen_Access_Counter.c1_Count_Stop_reg_n_0_[1] ;
  wire \Gen_Access_Counter.c1_Count_Stop_reg_n_0_[2] ;
  wire \Gen_Access_Counter.c1_Count_Stop_reg_n_0_[3] ;
  wire \Gen_Access_Counter.c1_Count_Stop_reg_n_0_[4] ;
  wire \Gen_Access_Counter.c1_Count_Stop_reg_n_0_[5] ;
  wire \Gen_Access_Counter.c1_Count_Stop_reg_n_0_[6] ;
  wire \Gen_Access_Counter.c1_Count_Stop_reg_n_0_[7] ;
  wire \Gen_Access_Counter.c1_Count_Stop_reg_n_0_[8] ;
  wire \Gen_Access_Counter.c1_Count_Stop_reg_n_0_[9] ;
  wire Is_Valid_9;
  wire \Is_Valid_reg[0]_0 ;
  wire Maximum2;
  wire Maximum2_carry__0_i_1_n_0;
  wire Maximum2_carry__0_i_2_n_0;
  wire Maximum2_carry__0_i_3_n_0;
  wire Maximum2_carry__0_i_4_n_0;
  wire Maximum2_carry__0_i_5_n_0;
  wire Maximum2_carry__0_i_6_n_0;
  wire Maximum2_carry__0_i_7_n_0;
  wire Maximum2_carry__0_i_8_n_0;
  wire Maximum2_carry__0_n_1;
  wire Maximum2_carry__0_n_2;
  wire Maximum2_carry__0_n_3;
  wire Maximum2_carry_i_1_n_0;
  wire Maximum2_carry_i_2_n_0;
  wire Maximum2_carry_i_3_n_0;
  wire Maximum2_carry_i_4_n_0;
  wire Maximum2_carry_i_5_n_0;
  wire Maximum2_carry_i_6_n_0;
  wire Maximum2_carry_i_7_n_0;
  wire Maximum2_carry_i_8_n_0;
  wire Maximum2_carry_n_0;
  wire Maximum2_carry_n_1;
  wire Maximum2_carry_n_2;
  wire Maximum2_carry_n_3;
  wire Minimum1;
  wire Minimum1_carry__0_i_1_n_0;
  wire Minimum1_carry__0_i_2_n_0;
  wire Minimum1_carry__0_i_3_n_0;
  wire Minimum1_carry__0_i_4_n_0;
  wire Minimum1_carry__0_i_5_n_0;
  wire Minimum1_carry__0_i_6_n_0;
  wire Minimum1_carry__0_i_7_n_0;
  wire Minimum1_carry__0_i_8_n_0;
  wire Minimum1_carry__0_n_1;
  wire Minimum1_carry__0_n_2;
  wire Minimum1_carry__0_n_3;
  wire Minimum1_carry_i_1_n_0;
  wire Minimum1_carry_i_2_n_0;
  wire Minimum1_carry_i_3_n_0;
  wire Minimum1_carry_i_4_n_0;
  wire Minimum1_carry_i_5_n_0;
  wire Minimum1_carry_i_6_n_0;
  wire Minimum1_carry_i_7_n_0;
  wire Minimum1_carry_i_8_n_0;
  wire Minimum1_carry_n_0;
  wire Minimum1_carry_n_1;
  wire Minimum1_carry_n_2;
  wire Minimum1_carry_n_3;
  wire [31:0]Q;
  wire \Running[0]_i_1__4_n_0 ;
  wire \Running_reg[0]_0 ;
  wire Stopping3_out;
  wire Stopping_reg_0;
  wire Stopping_reg_1;
  wire Stopping_reg_2;
  wire Stopping_reg_3;
  wire [0:15]c0_Count_Stop;
  wire [31:47]c0_bd_p;
  wire [0:47]c0_bd_pout;
  wire c0_stop_valid;
  wire [0:47]c1_ad_pout;
  wire [15:31]c1_mul32_result;
  wire c1_no_overflow;
  wire c1_stop_valid;
  wire clear_cmd;
  wire [15:0]p_1_in;
  wire [31:1]plusOp;
  wire plusOp_carry__0_n_0;
  wire plusOp_carry__0_n_1;
  wire plusOp_carry__0_n_2;
  wire plusOp_carry__0_n_3;
  wire plusOp_carry__1_n_0;
  wire plusOp_carry__1_n_1;
  wire plusOp_carry__1_n_2;
  wire plusOp_carry__1_n_3;
  wire plusOp_carry__2_n_0;
  wire plusOp_carry__2_n_1;
  wire plusOp_carry__2_n_2;
  wire plusOp_carry__2_n_3;
  wire plusOp_carry__3_n_0;
  wire plusOp_carry__3_n_1;
  wire plusOp_carry__3_n_2;
  wire plusOp_carry__3_n_3;
  wire plusOp_carry__4_n_0;
  wire plusOp_carry__4_n_1;
  wire plusOp_carry__4_n_2;
  wire plusOp_carry__4_n_3;
  wire plusOp_carry__5_n_0;
  wire plusOp_carry__5_n_1;
  wire plusOp_carry__5_n_2;
  wire plusOp_carry__5_n_3;
  wire plusOp_carry__6_n_2;
  wire plusOp_carry__6_n_3;
  wire plusOp_carry_n_0;
  wire plusOp_carry_n_1;
  wire plusOp_carry_n_2;
  wire plusOp_carry_n_3;
  wire sync_reset;
  wire [3:3]\NLW_Gen_Access_Counter.Count_reg[0][3]_i_1_CO_UNCONNECTED ;
  wire [3:3]\NLW_Gen_Access_Counter.Cycle_Count_i_reg[0]_i_2_CO_UNCONNECTED ;
  wire [3:0]NLW_Maximum2_carry_O_UNCONNECTED;
  wire [3:0]NLW_Maximum2_carry__0_O_UNCONNECTED;
  wire [3:0]NLW_Minimum1_carry_O_UNCONNECTED;
  wire [3:0]NLW_Minimum1_carry__0_O_UNCONNECTED;
  wire [3:2]NLW_plusOp_carry__6_CO_UNCONNECTED;
  wire [3:3]NLW_plusOp_carry__6_O_UNCONNECTED;

  FDSE Empty_reg
       (.C(Clk),
        .CE(1'b1),
        .D(Empty_reg_1),
        .Q(Empty_reg_0),
        .S(sync_reset));
  LUT4 #(
    .INIT(16'hFF04)) 
    Full_i_1__4
       (.I0(Stopping_reg_2),
        .I1(Stopping_reg_3),
        .I2(Empty_reg_0),
        .I3(Full_reg_0[1]),
        .O(Full_i_1__4_n_0));
  FDRE Full_reg
       (.C(Clk),
        .CE(1'b1),
        .D(Full_i_1__4_n_0),
        .Q(Full_reg_0[1]),
        .R(sync_reset));
  LUT3 #(
    .INIT(8'hEF)) 
    \Gen_Access_Counter.Access_Count_i[0]_i_1 
       (.I0(c1_stop_valid),
        .I1(clear_cmd),
        .I2(\Gen_Access_Counter.Access_Count_i[0]_i_3_n_0 ),
        .O(\Gen_Access_Counter.Access_Count_i[0]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Access_Counter.Access_Count_i[0]_i_2 
       (.I0(plusOp[31]),
        .I1(c1_stop_valid),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [31]),
        .I3(\Gen_Access_Counter.Access_Count_i[0]_i_3_n_0 ),
        .O(\Gen_Access_Counter.Access_Count_i[0]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFDFFFFF)) 
    \Gen_Access_Counter.Access_Count_i[0]_i_3 
       (.I0(\Gen_Access_Counter.Overflow_reg_0 [0]),
        .I1(\Gen_Access_Counter.Overflow_reg_0 [1]),
        .I2(\Gen_Access_Counter.Overflow_reg_0 [2]),
        .I3(\Gen_Access_Counter.Overflow_reg_0 [3]),
        .I4(E),
        .O(\Gen_Access_Counter.Access_Count_i[0]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Access_Counter.Access_Count_i[10]_i_1 
       (.I0(plusOp[21]),
        .I1(c1_stop_valid),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [21]),
        .I3(\Gen_Access_Counter.Access_Count_i[0]_i_3_n_0 ),
        .O(\Gen_Access_Counter.Access_Count_i[10]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Access_Counter.Access_Count_i[11]_i_1 
       (.I0(plusOp[20]),
        .I1(c1_stop_valid),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [20]),
        .I3(\Gen_Access_Counter.Access_Count_i[0]_i_3_n_0 ),
        .O(\Gen_Access_Counter.Access_Count_i[11]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Access_Counter.Access_Count_i[12]_i_1 
       (.I0(plusOp[19]),
        .I1(c1_stop_valid),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [19]),
        .I3(\Gen_Access_Counter.Access_Count_i[0]_i_3_n_0 ),
        .O(\Gen_Access_Counter.Access_Count_i[12]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Access_Counter.Access_Count_i[13]_i_1 
       (.I0(plusOp[18]),
        .I1(c1_stop_valid),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [18]),
        .I3(\Gen_Access_Counter.Access_Count_i[0]_i_3_n_0 ),
        .O(\Gen_Access_Counter.Access_Count_i[13]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Access_Counter.Access_Count_i[14]_i_1 
       (.I0(plusOp[17]),
        .I1(c1_stop_valid),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [17]),
        .I3(\Gen_Access_Counter.Access_Count_i[0]_i_3_n_0 ),
        .O(\Gen_Access_Counter.Access_Count_i[14]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Access_Counter.Access_Count_i[15]_i_1 
       (.I0(plusOp[16]),
        .I1(c1_stop_valid),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [16]),
        .I3(\Gen_Access_Counter.Access_Count_i[0]_i_3_n_0 ),
        .O(\Gen_Access_Counter.Access_Count_i[15]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Access_Counter.Access_Count_i[16]_i_1 
       (.I0(plusOp[15]),
        .I1(c1_stop_valid),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [15]),
        .I3(\Gen_Access_Counter.Access_Count_i[0]_i_3_n_0 ),
        .O(\Gen_Access_Counter.Access_Count_i[16]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Access_Counter.Access_Count_i[17]_i_1 
       (.I0(plusOp[14]),
        .I1(c1_stop_valid),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [14]),
        .I3(\Gen_Access_Counter.Access_Count_i[0]_i_3_n_0 ),
        .O(\Gen_Access_Counter.Access_Count_i[17]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Access_Counter.Access_Count_i[18]_i_1 
       (.I0(plusOp[13]),
        .I1(c1_stop_valid),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [13]),
        .I3(\Gen_Access_Counter.Access_Count_i[0]_i_3_n_0 ),
        .O(\Gen_Access_Counter.Access_Count_i[18]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Access_Counter.Access_Count_i[19]_i_1 
       (.I0(plusOp[12]),
        .I1(c1_stop_valid),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [12]),
        .I3(\Gen_Access_Counter.Access_Count_i[0]_i_3_n_0 ),
        .O(\Gen_Access_Counter.Access_Count_i[19]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Access_Counter.Access_Count_i[1]_i_1 
       (.I0(plusOp[30]),
        .I1(c1_stop_valid),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [30]),
        .I3(\Gen_Access_Counter.Access_Count_i[0]_i_3_n_0 ),
        .O(\Gen_Access_Counter.Access_Count_i[1]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Access_Counter.Access_Count_i[20]_i_1 
       (.I0(plusOp[11]),
        .I1(c1_stop_valid),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [11]),
        .I3(\Gen_Access_Counter.Access_Count_i[0]_i_3_n_0 ),
        .O(\Gen_Access_Counter.Access_Count_i[20]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Access_Counter.Access_Count_i[21]_i_1 
       (.I0(plusOp[10]),
        .I1(c1_stop_valid),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [10]),
        .I3(\Gen_Access_Counter.Access_Count_i[0]_i_3_n_0 ),
        .O(\Gen_Access_Counter.Access_Count_i[21]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Access_Counter.Access_Count_i[22]_i_1 
       (.I0(plusOp[9]),
        .I1(c1_stop_valid),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [9]),
        .I3(\Gen_Access_Counter.Access_Count_i[0]_i_3_n_0 ),
        .O(\Gen_Access_Counter.Access_Count_i[22]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Access_Counter.Access_Count_i[23]_i_1 
       (.I0(plusOp[8]),
        .I1(c1_stop_valid),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [8]),
        .I3(\Gen_Access_Counter.Access_Count_i[0]_i_3_n_0 ),
        .O(\Gen_Access_Counter.Access_Count_i[23]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Access_Counter.Access_Count_i[24]_i_1 
       (.I0(plusOp[7]),
        .I1(c1_stop_valid),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [7]),
        .I3(\Gen_Access_Counter.Access_Count_i[0]_i_3_n_0 ),
        .O(\Gen_Access_Counter.Access_Count_i[24]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Access_Counter.Access_Count_i[25]_i_1 
       (.I0(plusOp[6]),
        .I1(c1_stop_valid),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [6]),
        .I3(\Gen_Access_Counter.Access_Count_i[0]_i_3_n_0 ),
        .O(\Gen_Access_Counter.Access_Count_i[25]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Access_Counter.Access_Count_i[26]_i_1 
       (.I0(plusOp[5]),
        .I1(c1_stop_valid),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [5]),
        .I3(\Gen_Access_Counter.Access_Count_i[0]_i_3_n_0 ),
        .O(\Gen_Access_Counter.Access_Count_i[26]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Access_Counter.Access_Count_i[27]_i_1 
       (.I0(plusOp[4]),
        .I1(c1_stop_valid),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [4]),
        .I3(\Gen_Access_Counter.Access_Count_i[0]_i_3_n_0 ),
        .O(\Gen_Access_Counter.Access_Count_i[27]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Access_Counter.Access_Count_i[28]_i_1 
       (.I0(plusOp[3]),
        .I1(c1_stop_valid),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [3]),
        .I3(\Gen_Access_Counter.Access_Count_i[0]_i_3_n_0 ),
        .O(\Gen_Access_Counter.Access_Count_i[28]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Access_Counter.Access_Count_i[29]_i_1 
       (.I0(plusOp[2]),
        .I1(c1_stop_valid),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [2]),
        .I3(\Gen_Access_Counter.Access_Count_i[0]_i_3_n_0 ),
        .O(\Gen_Access_Counter.Access_Count_i[29]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Access_Counter.Access_Count_i[2]_i_1 
       (.I0(plusOp[29]),
        .I1(c1_stop_valid),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [29]),
        .I3(\Gen_Access_Counter.Access_Count_i[0]_i_3_n_0 ),
        .O(\Gen_Access_Counter.Access_Count_i[2]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Access_Counter.Access_Count_i[30]_i_1 
       (.I0(plusOp[1]),
        .I1(c1_stop_valid),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [1]),
        .I3(\Gen_Access_Counter.Access_Count_i[0]_i_3_n_0 ),
        .O(\Gen_Access_Counter.Access_Count_i[30]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h4474)) 
    \Gen_Access_Counter.Access_Count_i[31]_i_1 
       (.I0(Q[0]),
        .I1(c1_stop_valid),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [0]),
        .I3(\Gen_Access_Counter.Access_Count_i[0]_i_3_n_0 ),
        .O(\Gen_Access_Counter.Access_Count_i[31]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Access_Counter.Access_Count_i[3]_i_1 
       (.I0(plusOp[28]),
        .I1(c1_stop_valid),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [28]),
        .I3(\Gen_Access_Counter.Access_Count_i[0]_i_3_n_0 ),
        .O(\Gen_Access_Counter.Access_Count_i[3]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Access_Counter.Access_Count_i[4]_i_1 
       (.I0(plusOp[27]),
        .I1(c1_stop_valid),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [27]),
        .I3(\Gen_Access_Counter.Access_Count_i[0]_i_3_n_0 ),
        .O(\Gen_Access_Counter.Access_Count_i[4]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Access_Counter.Access_Count_i[5]_i_1 
       (.I0(plusOp[26]),
        .I1(c1_stop_valid),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [26]),
        .I3(\Gen_Access_Counter.Access_Count_i[0]_i_3_n_0 ),
        .O(\Gen_Access_Counter.Access_Count_i[5]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Access_Counter.Access_Count_i[6]_i_1 
       (.I0(plusOp[25]),
        .I1(c1_stop_valid),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [25]),
        .I3(\Gen_Access_Counter.Access_Count_i[0]_i_3_n_0 ),
        .O(\Gen_Access_Counter.Access_Count_i[6]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Access_Counter.Access_Count_i[7]_i_1 
       (.I0(plusOp[24]),
        .I1(c1_stop_valid),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [24]),
        .I3(\Gen_Access_Counter.Access_Count_i[0]_i_3_n_0 ),
        .O(\Gen_Access_Counter.Access_Count_i[7]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Access_Counter.Access_Count_i[8]_i_1 
       (.I0(plusOp[23]),
        .I1(c1_stop_valid),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [23]),
        .I3(\Gen_Access_Counter.Access_Count_i[0]_i_3_n_0 ),
        .O(\Gen_Access_Counter.Access_Count_i[8]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Access_Counter.Access_Count_i[9]_i_1 
       (.I0(plusOp[22]),
        .I1(c1_stop_valid),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [22]),
        .I3(\Gen_Access_Counter.Access_Count_i[0]_i_3_n_0 ),
        .O(\Gen_Access_Counter.Access_Count_i[9]_i_1_n_0 ));
  FDRE \Gen_Access_Counter.Access_Count_i_reg[0] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Access_Count_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Access_Count_i[0]_i_2_n_0 ),
        .Q(Q[31]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Access_Count_i_reg[10] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Access_Count_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Access_Count_i[10]_i_1_n_0 ),
        .Q(Q[21]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Access_Count_i_reg[11] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Access_Count_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Access_Count_i[11]_i_1_n_0 ),
        .Q(Q[20]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Access_Count_i_reg[12] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Access_Count_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Access_Count_i[12]_i_1_n_0 ),
        .Q(Q[19]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Access_Count_i_reg[13] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Access_Count_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Access_Count_i[13]_i_1_n_0 ),
        .Q(Q[18]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Access_Count_i_reg[14] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Access_Count_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Access_Count_i[14]_i_1_n_0 ),
        .Q(Q[17]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Access_Count_i_reg[15] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Access_Count_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Access_Count_i[15]_i_1_n_0 ),
        .Q(Q[16]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Access_Count_i_reg[16] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Access_Count_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Access_Count_i[16]_i_1_n_0 ),
        .Q(Q[15]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Access_Count_i_reg[17] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Access_Count_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Access_Count_i[17]_i_1_n_0 ),
        .Q(Q[14]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Access_Count_i_reg[18] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Access_Count_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Access_Count_i[18]_i_1_n_0 ),
        .Q(Q[13]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Access_Count_i_reg[19] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Access_Count_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Access_Count_i[19]_i_1_n_0 ),
        .Q(Q[12]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Access_Count_i_reg[1] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Access_Count_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Access_Count_i[1]_i_1_n_0 ),
        .Q(Q[30]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Access_Count_i_reg[20] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Access_Count_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Access_Count_i[20]_i_1_n_0 ),
        .Q(Q[11]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Access_Count_i_reg[21] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Access_Count_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Access_Count_i[21]_i_1_n_0 ),
        .Q(Q[10]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Access_Count_i_reg[22] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Access_Count_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Access_Count_i[22]_i_1_n_0 ),
        .Q(Q[9]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Access_Count_i_reg[23] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Access_Count_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Access_Count_i[23]_i_1_n_0 ),
        .Q(Q[8]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Access_Count_i_reg[24] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Access_Count_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Access_Count_i[24]_i_1_n_0 ),
        .Q(Q[7]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Access_Count_i_reg[25] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Access_Count_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Access_Count_i[25]_i_1_n_0 ),
        .Q(Q[6]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Access_Count_i_reg[26] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Access_Count_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Access_Count_i[26]_i_1_n_0 ),
        .Q(Q[5]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Access_Count_i_reg[27] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Access_Count_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Access_Count_i[27]_i_1_n_0 ),
        .Q(Q[4]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Access_Count_i_reg[28] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Access_Count_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Access_Count_i[28]_i_1_n_0 ),
        .Q(Q[3]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Access_Count_i_reg[29] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Access_Count_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Access_Count_i[29]_i_1_n_0 ),
        .Q(Q[2]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Access_Count_i_reg[2] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Access_Count_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Access_Count_i[2]_i_1_n_0 ),
        .Q(Q[29]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Access_Count_i_reg[30] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Access_Count_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Access_Count_i[30]_i_1_n_0 ),
        .Q(Q[1]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Access_Count_i_reg[31] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Access_Count_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Access_Count_i[31]_i_1_n_0 ),
        .Q(Q[0]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Access_Count_i_reg[3] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Access_Count_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Access_Count_i[3]_i_1_n_0 ),
        .Q(Q[28]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Access_Count_i_reg[4] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Access_Count_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Access_Count_i[4]_i_1_n_0 ),
        .Q(Q[27]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Access_Count_i_reg[5] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Access_Count_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Access_Count_i[5]_i_1_n_0 ),
        .Q(Q[26]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Access_Count_i_reg[6] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Access_Count_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Access_Count_i[6]_i_1_n_0 ),
        .Q(Q[25]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Access_Count_i_reg[7] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Access_Count_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Access_Count_i[7]_i_1_n_0 ),
        .Q(Q[24]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Access_Count_i_reg[8] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Access_Count_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Access_Count_i[8]_i_1_n_0 ),
        .Q(Q[23]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Access_Count_i_reg[9] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Access_Count_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Access_Count_i[9]_i_1_n_0 ),
        .Q(Q[22]),
        .R(sync_reset));
  LUT4 #(
    .INIT(16'h000E)) 
    \Gen_Access_Counter.Access_Overflow[0]_i_1 
       (.I0(\Gen_Access_Counter.Access_Overflow_reg[0]_0 ),
        .I1(\Gen_Access_Counter.Overflow_i_4_n_0 ),
        .I2(Stopping_reg_0),
        .I3(sync_reset),
        .O(\Gen_Access_Counter.Access_Overflow[0]_i_1_n_0 ));
  FDRE \Gen_Access_Counter.Access_Overflow_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Gen_Access_Counter.Access_Overflow[0]_i_1_n_0 ),
        .Q(\Gen_Access_Counter.Access_Overflow_reg[0]_0 ),
        .R(1'b0));
  LUT2 #(
    .INIT(4'hE)) 
    \Gen_Access_Counter.Count[0][15]_i_1 
       (.I0(sync_reset),
        .I1(Stopping_reg_0),
        .O(\Gen_Access_Counter.Count[0][15]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Gen_Access_Counter.Count[0][15]_i_2 
       (.I0(\Running_reg[0]_0 ),
        .I1(\Gen_Access_Counter.Count[0][15]_i_4_n_0 ),
        .O(\Gen_Access_Counter.Count[0][15]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hBFFFFFFFFFFFFFFF)) 
    \Gen_Access_Counter.Count[0][15]_i_4 
       (.I0(\Gen_Access_Counter.Count[0][15]_i_6_n_0 ),
        .I1(\Gen_Access_Counter.Count_reg[0]_30 [3]),
        .I2(\Gen_Access_Counter.Count_reg[0]_30 [15]),
        .I3(\Gen_Access_Counter.Count_reg[0]_30 [6]),
        .I4(\Gen_Access_Counter.Count_reg[0]_30 [12]),
        .I5(\Gen_Access_Counter.Count[0][15]_i_7_n_0 ),
        .O(\Gen_Access_Counter.Count[0][15]_i_4_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \Gen_Access_Counter.Count[0][15]_i_5 
       (.I0(\Gen_Access_Counter.Count_reg[0]_30 [15]),
        .O(\Gen_Access_Counter.Count[0][15]_i_5_n_0 ));
  LUT4 #(
    .INIT(16'h7FFF)) 
    \Gen_Access_Counter.Count[0][15]_i_6 
       (.I0(\Gen_Access_Counter.Count_reg[0]_30 [4]),
        .I1(\Gen_Access_Counter.Count_reg[0]_30 [5]),
        .I2(\Gen_Access_Counter.Count_reg[0]_30 [9]),
        .I3(\Gen_Access_Counter.Count_reg[0]_30 [10]),
        .O(\Gen_Access_Counter.Count[0][15]_i_6_n_0 ));
  LUT5 #(
    .INIT(32'h00008000)) 
    \Gen_Access_Counter.Count[0][15]_i_7 
       (.I0(\Gen_Access_Counter.Count_reg[0]_30 [1]),
        .I1(\Gen_Access_Counter.Count_reg[0]_30 [0]),
        .I2(\Gen_Access_Counter.Count_reg[0]_30 [8]),
        .I3(\Gen_Access_Counter.Count_reg[0]_30 [7]),
        .I4(\Gen_Access_Counter.Count[0][15]_i_8_n_0 ),
        .O(\Gen_Access_Counter.Count[0][15]_i_7_n_0 ));
  LUT4 #(
    .INIT(16'h7FFF)) 
    \Gen_Access_Counter.Count[0][15]_i_8 
       (.I0(\Gen_Access_Counter.Count_reg[0]_30 [2]),
        .I1(\Gen_Access_Counter.Count_reg[0]_30 [14]),
        .I2(\Gen_Access_Counter.Count_reg[0]_30 [11]),
        .I3(\Gen_Access_Counter.Count_reg[0]_30 [13]),
        .O(\Gen_Access_Counter.Count[0][15]_i_8_n_0 ));
  FDRE \Gen_Access_Counter.Count_reg[0][0] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Count[0][15]_i_2_n_0 ),
        .D(\Gen_Access_Counter.Count_reg[0][3]_i_1_n_4 ),
        .Q(\Gen_Access_Counter.Count_reg[0]_30 [0]),
        .R(\Gen_Access_Counter.Count[0][15]_i_1_n_0 ));
  FDRE \Gen_Access_Counter.Count_reg[0][10] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Count[0][15]_i_2_n_0 ),
        .D(\Gen_Access_Counter.Count_reg[0][11]_i_1_n_6 ),
        .Q(\Gen_Access_Counter.Count_reg[0]_30 [10]),
        .R(\Gen_Access_Counter.Count[0][15]_i_1_n_0 ));
  FDRE \Gen_Access_Counter.Count_reg[0][11] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Count[0][15]_i_2_n_0 ),
        .D(\Gen_Access_Counter.Count_reg[0][11]_i_1_n_7 ),
        .Q(\Gen_Access_Counter.Count_reg[0]_30 [11]),
        .R(\Gen_Access_Counter.Count[0][15]_i_1_n_0 ));
  CARRY4 \Gen_Access_Counter.Count_reg[0][11]_i_1 
       (.CI(\Gen_Access_Counter.Count_reg[0][15]_i_3_n_0 ),
        .CO({\Gen_Access_Counter.Count_reg[0][11]_i_1_n_0 ,\Gen_Access_Counter.Count_reg[0][11]_i_1_n_1 ,\Gen_Access_Counter.Count_reg[0][11]_i_1_n_2 ,\Gen_Access_Counter.Count_reg[0][11]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\Gen_Access_Counter.Count_reg[0][11]_i_1_n_4 ,\Gen_Access_Counter.Count_reg[0][11]_i_1_n_5 ,\Gen_Access_Counter.Count_reg[0][11]_i_1_n_6 ,\Gen_Access_Counter.Count_reg[0][11]_i_1_n_7 }),
        .S({\Gen_Access_Counter.Count_reg[0]_30 [8],\Gen_Access_Counter.Count_reg[0]_30 [9],\Gen_Access_Counter.Count_reg[0]_30 [10],\Gen_Access_Counter.Count_reg[0]_30 [11]}));
  FDRE \Gen_Access_Counter.Count_reg[0][12] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Count[0][15]_i_2_n_0 ),
        .D(\Gen_Access_Counter.Count_reg[0][15]_i_3_n_4 ),
        .Q(\Gen_Access_Counter.Count_reg[0]_30 [12]),
        .R(\Gen_Access_Counter.Count[0][15]_i_1_n_0 ));
  FDRE \Gen_Access_Counter.Count_reg[0][13] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Count[0][15]_i_2_n_0 ),
        .D(\Gen_Access_Counter.Count_reg[0][15]_i_3_n_5 ),
        .Q(\Gen_Access_Counter.Count_reg[0]_30 [13]),
        .R(\Gen_Access_Counter.Count[0][15]_i_1_n_0 ));
  FDRE \Gen_Access_Counter.Count_reg[0][14] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Count[0][15]_i_2_n_0 ),
        .D(\Gen_Access_Counter.Count_reg[0][15]_i_3_n_6 ),
        .Q(\Gen_Access_Counter.Count_reg[0]_30 [14]),
        .R(\Gen_Access_Counter.Count[0][15]_i_1_n_0 ));
  FDRE \Gen_Access_Counter.Count_reg[0][15] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Count[0][15]_i_2_n_0 ),
        .D(\Gen_Access_Counter.Count_reg[0][15]_i_3_n_7 ),
        .Q(\Gen_Access_Counter.Count_reg[0]_30 [15]),
        .R(\Gen_Access_Counter.Count[0][15]_i_1_n_0 ));
  CARRY4 \Gen_Access_Counter.Count_reg[0][15]_i_3 
       (.CI(1'b0),
        .CO({\Gen_Access_Counter.Count_reg[0][15]_i_3_n_0 ,\Gen_Access_Counter.Count_reg[0][15]_i_3_n_1 ,\Gen_Access_Counter.Count_reg[0][15]_i_3_n_2 ,\Gen_Access_Counter.Count_reg[0][15]_i_3_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b1}),
        .O({\Gen_Access_Counter.Count_reg[0][15]_i_3_n_4 ,\Gen_Access_Counter.Count_reg[0][15]_i_3_n_5 ,\Gen_Access_Counter.Count_reg[0][15]_i_3_n_6 ,\Gen_Access_Counter.Count_reg[0][15]_i_3_n_7 }),
        .S({\Gen_Access_Counter.Count_reg[0]_30 [12],\Gen_Access_Counter.Count_reg[0]_30 [13],\Gen_Access_Counter.Count_reg[0]_30 [14],\Gen_Access_Counter.Count[0][15]_i_5_n_0 }));
  FDRE \Gen_Access_Counter.Count_reg[0][1] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Count[0][15]_i_2_n_0 ),
        .D(\Gen_Access_Counter.Count_reg[0][3]_i_1_n_5 ),
        .Q(\Gen_Access_Counter.Count_reg[0]_30 [1]),
        .R(\Gen_Access_Counter.Count[0][15]_i_1_n_0 ));
  FDRE \Gen_Access_Counter.Count_reg[0][2] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Count[0][15]_i_2_n_0 ),
        .D(\Gen_Access_Counter.Count_reg[0][3]_i_1_n_6 ),
        .Q(\Gen_Access_Counter.Count_reg[0]_30 [2]),
        .R(\Gen_Access_Counter.Count[0][15]_i_1_n_0 ));
  FDRE \Gen_Access_Counter.Count_reg[0][3] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Count[0][15]_i_2_n_0 ),
        .D(\Gen_Access_Counter.Count_reg[0][3]_i_1_n_7 ),
        .Q(\Gen_Access_Counter.Count_reg[0]_30 [3]),
        .R(\Gen_Access_Counter.Count[0][15]_i_1_n_0 ));
  CARRY4 \Gen_Access_Counter.Count_reg[0][3]_i_1 
       (.CI(\Gen_Access_Counter.Count_reg[0][7]_i_1_n_0 ),
        .CO({\NLW_Gen_Access_Counter.Count_reg[0][3]_i_1_CO_UNCONNECTED [3],\Gen_Access_Counter.Count_reg[0][3]_i_1_n_1 ,\Gen_Access_Counter.Count_reg[0][3]_i_1_n_2 ,\Gen_Access_Counter.Count_reg[0][3]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\Gen_Access_Counter.Count_reg[0][3]_i_1_n_4 ,\Gen_Access_Counter.Count_reg[0][3]_i_1_n_5 ,\Gen_Access_Counter.Count_reg[0][3]_i_1_n_6 ,\Gen_Access_Counter.Count_reg[0][3]_i_1_n_7 }),
        .S({\Gen_Access_Counter.Count_reg[0]_30 [0],\Gen_Access_Counter.Count_reg[0]_30 [1],\Gen_Access_Counter.Count_reg[0]_30 [2],\Gen_Access_Counter.Count_reg[0]_30 [3]}));
  FDRE \Gen_Access_Counter.Count_reg[0][4] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Count[0][15]_i_2_n_0 ),
        .D(\Gen_Access_Counter.Count_reg[0][7]_i_1_n_4 ),
        .Q(\Gen_Access_Counter.Count_reg[0]_30 [4]),
        .R(\Gen_Access_Counter.Count[0][15]_i_1_n_0 ));
  FDRE \Gen_Access_Counter.Count_reg[0][5] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Count[0][15]_i_2_n_0 ),
        .D(\Gen_Access_Counter.Count_reg[0][7]_i_1_n_5 ),
        .Q(\Gen_Access_Counter.Count_reg[0]_30 [5]),
        .R(\Gen_Access_Counter.Count[0][15]_i_1_n_0 ));
  FDRE \Gen_Access_Counter.Count_reg[0][6] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Count[0][15]_i_2_n_0 ),
        .D(\Gen_Access_Counter.Count_reg[0][7]_i_1_n_6 ),
        .Q(\Gen_Access_Counter.Count_reg[0]_30 [6]),
        .R(\Gen_Access_Counter.Count[0][15]_i_1_n_0 ));
  FDRE \Gen_Access_Counter.Count_reg[0][7] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Count[0][15]_i_2_n_0 ),
        .D(\Gen_Access_Counter.Count_reg[0][7]_i_1_n_7 ),
        .Q(\Gen_Access_Counter.Count_reg[0]_30 [7]),
        .R(\Gen_Access_Counter.Count[0][15]_i_1_n_0 ));
  CARRY4 \Gen_Access_Counter.Count_reg[0][7]_i_1 
       (.CI(\Gen_Access_Counter.Count_reg[0][11]_i_1_n_0 ),
        .CO({\Gen_Access_Counter.Count_reg[0][7]_i_1_n_0 ,\Gen_Access_Counter.Count_reg[0][7]_i_1_n_1 ,\Gen_Access_Counter.Count_reg[0][7]_i_1_n_2 ,\Gen_Access_Counter.Count_reg[0][7]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\Gen_Access_Counter.Count_reg[0][7]_i_1_n_4 ,\Gen_Access_Counter.Count_reg[0][7]_i_1_n_5 ,\Gen_Access_Counter.Count_reg[0][7]_i_1_n_6 ,\Gen_Access_Counter.Count_reg[0][7]_i_1_n_7 }),
        .S({\Gen_Access_Counter.Count_reg[0]_30 [4],\Gen_Access_Counter.Count_reg[0]_30 [5],\Gen_Access_Counter.Count_reg[0]_30 [6],\Gen_Access_Counter.Count_reg[0]_30 [7]}));
  FDRE \Gen_Access_Counter.Count_reg[0][8] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Count[0][15]_i_2_n_0 ),
        .D(\Gen_Access_Counter.Count_reg[0][11]_i_1_n_4 ),
        .Q(\Gen_Access_Counter.Count_reg[0]_30 [8]),
        .R(\Gen_Access_Counter.Count[0][15]_i_1_n_0 ));
  FDRE \Gen_Access_Counter.Count_reg[0][9] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Count[0][15]_i_2_n_0 ),
        .D(\Gen_Access_Counter.Count_reg[0][11]_i_1_n_5 ),
        .Q(\Gen_Access_Counter.Count_reg[0]_30 [9]),
        .R(\Gen_Access_Counter.Count[0][15]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hEF)) 
    \Gen_Access_Counter.Cycle_Count_2_i[0]_i_1 
       (.I0(c1_stop_valid),
        .I1(clear_cmd),
        .I2(\Gen_Access_Counter.Cycle_Count_2_i[0]_i_3_n_0 ),
        .O(\Gen_Access_Counter.Cycle_Count_2_i[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair77" *) 
  LUT5 #(
    .INIT(32'hDFFFFFFF)) 
    \Gen_Access_Counter.Cycle_Count_2_i[0]_i_3 
       (.I0(E),
        .I1(\Gen_Access_Counter.Overflow_reg_0 [3]),
        .I2(\Gen_Access_Counter.Overflow_reg_0 [2]),
        .I3(\Gen_Access_Counter.Overflow_reg_0 [0]),
        .I4(\Gen_Access_Counter.Overflow_reg_0 [1]),
        .O(\Gen_Access_Counter.Cycle_Count_2_i[0]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Gen_Access_Counter.Cycle_Count_2_i[12]_i_5 
       (.I0(c1_mul32_result[15]),
        .I1(c1_stop_valid),
        .O(\Gen_Access_Counter.Cycle_Count_2_i[12]_i_5_n_0 ));
  LUT5 #(
    .INIT(32'h5530AA30)) 
    \Gen_Access_Counter.Cycle_Count_2_i[12]_i_9 
       (.I0(c1_mul32_result[15]),
        .I1(\Gen_Access_Counter.Cycle_Count_2_i[0]_i_3_n_0 ),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [16]),
        .I3(c1_stop_valid),
        .I4(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 [16]),
        .O(\Gen_Access_Counter.Cycle_Count_2_i[12]_i_9_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Gen_Access_Counter.Cycle_Count_2_i[16]_i_2 
       (.I0(c1_mul32_result[16]),
        .I1(c1_stop_valid),
        .O(\Gen_Access_Counter.Cycle_Count_2_i[16]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Gen_Access_Counter.Cycle_Count_2_i[16]_i_3 
       (.I0(c1_mul32_result[17]),
        .I1(c1_stop_valid),
        .O(\Gen_Access_Counter.Cycle_Count_2_i[16]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Gen_Access_Counter.Cycle_Count_2_i[16]_i_4 
       (.I0(c1_mul32_result[18]),
        .I1(c1_stop_valid),
        .O(\Gen_Access_Counter.Cycle_Count_2_i[16]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Gen_Access_Counter.Cycle_Count_2_i[16]_i_5 
       (.I0(c1_mul32_result[19]),
        .I1(c1_stop_valid),
        .O(\Gen_Access_Counter.Cycle_Count_2_i[16]_i_5_n_0 ));
  LUT5 #(
    .INIT(32'h5530AA30)) 
    \Gen_Access_Counter.Cycle_Count_2_i[16]_i_6 
       (.I0(c1_mul32_result[16]),
        .I1(\Gen_Access_Counter.Cycle_Count_2_i[0]_i_3_n_0 ),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [15]),
        .I3(c1_stop_valid),
        .I4(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 [15]),
        .O(\Gen_Access_Counter.Cycle_Count_2_i[16]_i_6_n_0 ));
  LUT5 #(
    .INIT(32'h5530AA30)) 
    \Gen_Access_Counter.Cycle_Count_2_i[16]_i_7 
       (.I0(c1_mul32_result[17]),
        .I1(\Gen_Access_Counter.Cycle_Count_2_i[0]_i_3_n_0 ),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [14]),
        .I3(c1_stop_valid),
        .I4(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 [14]),
        .O(\Gen_Access_Counter.Cycle_Count_2_i[16]_i_7_n_0 ));
  LUT5 #(
    .INIT(32'h5530AA30)) 
    \Gen_Access_Counter.Cycle_Count_2_i[16]_i_8 
       (.I0(c1_mul32_result[18]),
        .I1(\Gen_Access_Counter.Cycle_Count_2_i[0]_i_3_n_0 ),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [13]),
        .I3(c1_stop_valid),
        .I4(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 [13]),
        .O(\Gen_Access_Counter.Cycle_Count_2_i[16]_i_8_n_0 ));
  LUT5 #(
    .INIT(32'h5530AA30)) 
    \Gen_Access_Counter.Cycle_Count_2_i[16]_i_9 
       (.I0(c1_mul32_result[19]),
        .I1(\Gen_Access_Counter.Cycle_Count_2_i[0]_i_3_n_0 ),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [12]),
        .I3(c1_stop_valid),
        .I4(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 [12]),
        .O(\Gen_Access_Counter.Cycle_Count_2_i[16]_i_9_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Gen_Access_Counter.Cycle_Count_2_i[20]_i_2 
       (.I0(c1_mul32_result[20]),
        .I1(c1_stop_valid),
        .O(\Gen_Access_Counter.Cycle_Count_2_i[20]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Gen_Access_Counter.Cycle_Count_2_i[20]_i_3 
       (.I0(c1_mul32_result[21]),
        .I1(c1_stop_valid),
        .O(\Gen_Access_Counter.Cycle_Count_2_i[20]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Gen_Access_Counter.Cycle_Count_2_i[20]_i_4 
       (.I0(c1_mul32_result[22]),
        .I1(c1_stop_valid),
        .O(\Gen_Access_Counter.Cycle_Count_2_i[20]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Gen_Access_Counter.Cycle_Count_2_i[20]_i_5 
       (.I0(c1_mul32_result[23]),
        .I1(c1_stop_valid),
        .O(\Gen_Access_Counter.Cycle_Count_2_i[20]_i_5_n_0 ));
  LUT5 #(
    .INIT(32'h5530AA30)) 
    \Gen_Access_Counter.Cycle_Count_2_i[20]_i_6 
       (.I0(c1_mul32_result[20]),
        .I1(\Gen_Access_Counter.Cycle_Count_2_i[0]_i_3_n_0 ),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [11]),
        .I3(c1_stop_valid),
        .I4(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 [11]),
        .O(\Gen_Access_Counter.Cycle_Count_2_i[20]_i_6_n_0 ));
  LUT5 #(
    .INIT(32'h5530AA30)) 
    \Gen_Access_Counter.Cycle_Count_2_i[20]_i_7 
       (.I0(c1_mul32_result[21]),
        .I1(\Gen_Access_Counter.Cycle_Count_2_i[0]_i_3_n_0 ),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [10]),
        .I3(c1_stop_valid),
        .I4(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 [10]),
        .O(\Gen_Access_Counter.Cycle_Count_2_i[20]_i_7_n_0 ));
  LUT5 #(
    .INIT(32'h5530AA30)) 
    \Gen_Access_Counter.Cycle_Count_2_i[20]_i_8 
       (.I0(c1_mul32_result[22]),
        .I1(\Gen_Access_Counter.Cycle_Count_2_i[0]_i_3_n_0 ),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [9]),
        .I3(c1_stop_valid),
        .I4(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 [9]),
        .O(\Gen_Access_Counter.Cycle_Count_2_i[20]_i_8_n_0 ));
  LUT5 #(
    .INIT(32'h5530AA30)) 
    \Gen_Access_Counter.Cycle_Count_2_i[20]_i_9 
       (.I0(c1_mul32_result[23]),
        .I1(\Gen_Access_Counter.Cycle_Count_2_i[0]_i_3_n_0 ),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [8]),
        .I3(c1_stop_valid),
        .I4(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 [8]),
        .O(\Gen_Access_Counter.Cycle_Count_2_i[20]_i_9_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Gen_Access_Counter.Cycle_Count_2_i[24]_i_2 
       (.I0(c1_mul32_result[24]),
        .I1(c1_stop_valid),
        .O(\Gen_Access_Counter.Cycle_Count_2_i[24]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Gen_Access_Counter.Cycle_Count_2_i[24]_i_3 
       (.I0(c1_mul32_result[25]),
        .I1(c1_stop_valid),
        .O(\Gen_Access_Counter.Cycle_Count_2_i[24]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Gen_Access_Counter.Cycle_Count_2_i[24]_i_4 
       (.I0(c1_mul32_result[26]),
        .I1(c1_stop_valid),
        .O(\Gen_Access_Counter.Cycle_Count_2_i[24]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Gen_Access_Counter.Cycle_Count_2_i[24]_i_5 
       (.I0(c1_mul32_result[27]),
        .I1(c1_stop_valid),
        .O(\Gen_Access_Counter.Cycle_Count_2_i[24]_i_5_n_0 ));
  LUT5 #(
    .INIT(32'h5530AA30)) 
    \Gen_Access_Counter.Cycle_Count_2_i[24]_i_6 
       (.I0(c1_mul32_result[24]),
        .I1(\Gen_Access_Counter.Cycle_Count_2_i[0]_i_3_n_0 ),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [7]),
        .I3(c1_stop_valid),
        .I4(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 [7]),
        .O(\Gen_Access_Counter.Cycle_Count_2_i[24]_i_6_n_0 ));
  LUT5 #(
    .INIT(32'h5530AA30)) 
    \Gen_Access_Counter.Cycle_Count_2_i[24]_i_7 
       (.I0(c1_mul32_result[25]),
        .I1(\Gen_Access_Counter.Cycle_Count_2_i[0]_i_3_n_0 ),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [6]),
        .I3(c1_stop_valid),
        .I4(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 [6]),
        .O(\Gen_Access_Counter.Cycle_Count_2_i[24]_i_7_n_0 ));
  LUT5 #(
    .INIT(32'h5530AA30)) 
    \Gen_Access_Counter.Cycle_Count_2_i[24]_i_8 
       (.I0(c1_mul32_result[26]),
        .I1(\Gen_Access_Counter.Cycle_Count_2_i[0]_i_3_n_0 ),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [5]),
        .I3(c1_stop_valid),
        .I4(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 [5]),
        .O(\Gen_Access_Counter.Cycle_Count_2_i[24]_i_8_n_0 ));
  LUT5 #(
    .INIT(32'h5530AA30)) 
    \Gen_Access_Counter.Cycle_Count_2_i[24]_i_9 
       (.I0(c1_mul32_result[27]),
        .I1(\Gen_Access_Counter.Cycle_Count_2_i[0]_i_3_n_0 ),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [4]),
        .I3(c1_stop_valid),
        .I4(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 [4]),
        .O(\Gen_Access_Counter.Cycle_Count_2_i[24]_i_9_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Gen_Access_Counter.Cycle_Count_2_i[28]_i_2 
       (.I0(c1_mul32_result[28]),
        .I1(c1_stop_valid),
        .O(\Gen_Access_Counter.Cycle_Count_2_i[28]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Gen_Access_Counter.Cycle_Count_2_i[28]_i_3 
       (.I0(c1_mul32_result[29]),
        .I1(c1_stop_valid),
        .O(\Gen_Access_Counter.Cycle_Count_2_i[28]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Gen_Access_Counter.Cycle_Count_2_i[28]_i_4 
       (.I0(c1_mul32_result[30]),
        .I1(c1_stop_valid),
        .O(\Gen_Access_Counter.Cycle_Count_2_i[28]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Gen_Access_Counter.Cycle_Count_2_i[28]_i_5 
       (.I0(c1_mul32_result[31]),
        .I1(c1_stop_valid),
        .O(\Gen_Access_Counter.Cycle_Count_2_i[28]_i_5_n_0 ));
  LUT5 #(
    .INIT(32'h5530AA30)) 
    \Gen_Access_Counter.Cycle_Count_2_i[28]_i_6 
       (.I0(c1_mul32_result[28]),
        .I1(\Gen_Access_Counter.Cycle_Count_2_i[0]_i_3_n_0 ),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [3]),
        .I3(c1_stop_valid),
        .I4(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 [3]),
        .O(\Gen_Access_Counter.Cycle_Count_2_i[28]_i_6_n_0 ));
  LUT5 #(
    .INIT(32'h5530AA30)) 
    \Gen_Access_Counter.Cycle_Count_2_i[28]_i_7 
       (.I0(c1_mul32_result[29]),
        .I1(\Gen_Access_Counter.Cycle_Count_2_i[0]_i_3_n_0 ),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [2]),
        .I3(c1_stop_valid),
        .I4(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 [2]),
        .O(\Gen_Access_Counter.Cycle_Count_2_i[28]_i_7_n_0 ));
  LUT5 #(
    .INIT(32'h5530AA30)) 
    \Gen_Access_Counter.Cycle_Count_2_i[28]_i_8 
       (.I0(c1_mul32_result[30]),
        .I1(\Gen_Access_Counter.Cycle_Count_2_i[0]_i_3_n_0 ),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [1]),
        .I3(c1_stop_valid),
        .I4(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 [1]),
        .O(\Gen_Access_Counter.Cycle_Count_2_i[28]_i_8_n_0 ));
  LUT5 #(
    .INIT(32'h5530AA30)) 
    \Gen_Access_Counter.Cycle_Count_2_i[28]_i_9 
       (.I0(c1_mul32_result[31]),
        .I1(\Gen_Access_Counter.Cycle_Count_2_i[0]_i_3_n_0 ),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [0]),
        .I3(c1_stop_valid),
        .I4(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 [0]),
        .O(\Gen_Access_Counter.Cycle_Count_2_i[28]_i_9_n_0 ));
  FDRE \Gen_Access_Counter.Cycle_Count_2_i_reg[0] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Cycle_Count_2_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Using_DSP48_Architectures.No_MUL64.dsp_module_I3_n_0 ),
        .Q(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 [31]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Cycle_Count_2_i_reg[10] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Cycle_Count_2_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Using_DSP48_Architectures.No_MUL64.dsp_module_I3_n_10 ),
        .Q(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 [21]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Cycle_Count_2_i_reg[11] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Cycle_Count_2_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Using_DSP48_Architectures.No_MUL64.dsp_module_I3_n_11 ),
        .Q(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 [20]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Cycle_Count_2_i_reg[12] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Cycle_Count_2_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Using_DSP48_Architectures.No_MUL64.dsp_module_I3_n_12 ),
        .Q(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 [19]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Cycle_Count_2_i_reg[13] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Cycle_Count_2_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Using_DSP48_Architectures.No_MUL64.dsp_module_I3_n_13 ),
        .Q(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 [18]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Cycle_Count_2_i_reg[14] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Cycle_Count_2_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Using_DSP48_Architectures.No_MUL64.dsp_module_I3_n_14 ),
        .Q(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 [17]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Cycle_Count_2_i_reg[15] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Cycle_Count_2_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Using_DSP48_Architectures.No_MUL64.dsp_module_I3_n_15 ),
        .Q(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 [16]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Cycle_Count_2_i_reg[16] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Cycle_Count_2_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Cycle_Count_2_i_reg[16]_i_1_n_4 ),
        .Q(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 [15]),
        .R(sync_reset));
  CARRY4 \Gen_Access_Counter.Cycle_Count_2_i_reg[16]_i_1 
       (.CI(\Gen_Access_Counter.Cycle_Count_2_i_reg[20]_i_1_n_0 ),
        .CO({\Gen_Access_Counter.Cycle_Count_2_i_reg[16]_i_1_n_0 ,\Gen_Access_Counter.Cycle_Count_2_i_reg[16]_i_1_n_1 ,\Gen_Access_Counter.Cycle_Count_2_i_reg[16]_i_1_n_2 ,\Gen_Access_Counter.Cycle_Count_2_i_reg[16]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({\Gen_Access_Counter.Cycle_Count_2_i[16]_i_2_n_0 ,\Gen_Access_Counter.Cycle_Count_2_i[16]_i_3_n_0 ,\Gen_Access_Counter.Cycle_Count_2_i[16]_i_4_n_0 ,\Gen_Access_Counter.Cycle_Count_2_i[16]_i_5_n_0 }),
        .O({\Gen_Access_Counter.Cycle_Count_2_i_reg[16]_i_1_n_4 ,\Gen_Access_Counter.Cycle_Count_2_i_reg[16]_i_1_n_5 ,\Gen_Access_Counter.Cycle_Count_2_i_reg[16]_i_1_n_6 ,\Gen_Access_Counter.Cycle_Count_2_i_reg[16]_i_1_n_7 }),
        .S({\Gen_Access_Counter.Cycle_Count_2_i[16]_i_6_n_0 ,\Gen_Access_Counter.Cycle_Count_2_i[16]_i_7_n_0 ,\Gen_Access_Counter.Cycle_Count_2_i[16]_i_8_n_0 ,\Gen_Access_Counter.Cycle_Count_2_i[16]_i_9_n_0 }));
  FDRE \Gen_Access_Counter.Cycle_Count_2_i_reg[17] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Cycle_Count_2_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Cycle_Count_2_i_reg[16]_i_1_n_5 ),
        .Q(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 [14]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Cycle_Count_2_i_reg[18] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Cycle_Count_2_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Cycle_Count_2_i_reg[16]_i_1_n_6 ),
        .Q(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 [13]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Cycle_Count_2_i_reg[19] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Cycle_Count_2_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Cycle_Count_2_i_reg[16]_i_1_n_7 ),
        .Q(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 [12]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Cycle_Count_2_i_reg[1] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Cycle_Count_2_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Using_DSP48_Architectures.No_MUL64.dsp_module_I3_n_1 ),
        .Q(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 [30]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Cycle_Count_2_i_reg[20] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Cycle_Count_2_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Cycle_Count_2_i_reg[20]_i_1_n_4 ),
        .Q(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 [11]),
        .R(sync_reset));
  CARRY4 \Gen_Access_Counter.Cycle_Count_2_i_reg[20]_i_1 
       (.CI(\Gen_Access_Counter.Cycle_Count_2_i_reg[24]_i_1_n_0 ),
        .CO({\Gen_Access_Counter.Cycle_Count_2_i_reg[20]_i_1_n_0 ,\Gen_Access_Counter.Cycle_Count_2_i_reg[20]_i_1_n_1 ,\Gen_Access_Counter.Cycle_Count_2_i_reg[20]_i_1_n_2 ,\Gen_Access_Counter.Cycle_Count_2_i_reg[20]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({\Gen_Access_Counter.Cycle_Count_2_i[20]_i_2_n_0 ,\Gen_Access_Counter.Cycle_Count_2_i[20]_i_3_n_0 ,\Gen_Access_Counter.Cycle_Count_2_i[20]_i_4_n_0 ,\Gen_Access_Counter.Cycle_Count_2_i[20]_i_5_n_0 }),
        .O({\Gen_Access_Counter.Cycle_Count_2_i_reg[20]_i_1_n_4 ,\Gen_Access_Counter.Cycle_Count_2_i_reg[20]_i_1_n_5 ,\Gen_Access_Counter.Cycle_Count_2_i_reg[20]_i_1_n_6 ,\Gen_Access_Counter.Cycle_Count_2_i_reg[20]_i_1_n_7 }),
        .S({\Gen_Access_Counter.Cycle_Count_2_i[20]_i_6_n_0 ,\Gen_Access_Counter.Cycle_Count_2_i[20]_i_7_n_0 ,\Gen_Access_Counter.Cycle_Count_2_i[20]_i_8_n_0 ,\Gen_Access_Counter.Cycle_Count_2_i[20]_i_9_n_0 }));
  FDRE \Gen_Access_Counter.Cycle_Count_2_i_reg[21] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Cycle_Count_2_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Cycle_Count_2_i_reg[20]_i_1_n_5 ),
        .Q(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 [10]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Cycle_Count_2_i_reg[22] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Cycle_Count_2_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Cycle_Count_2_i_reg[20]_i_1_n_6 ),
        .Q(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 [9]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Cycle_Count_2_i_reg[23] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Cycle_Count_2_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Cycle_Count_2_i_reg[20]_i_1_n_7 ),
        .Q(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 [8]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Cycle_Count_2_i_reg[24] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Cycle_Count_2_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Cycle_Count_2_i_reg[24]_i_1_n_4 ),
        .Q(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 [7]),
        .R(sync_reset));
  CARRY4 \Gen_Access_Counter.Cycle_Count_2_i_reg[24]_i_1 
       (.CI(\Gen_Access_Counter.Cycle_Count_2_i_reg[28]_i_1_n_0 ),
        .CO({\Gen_Access_Counter.Cycle_Count_2_i_reg[24]_i_1_n_0 ,\Gen_Access_Counter.Cycle_Count_2_i_reg[24]_i_1_n_1 ,\Gen_Access_Counter.Cycle_Count_2_i_reg[24]_i_1_n_2 ,\Gen_Access_Counter.Cycle_Count_2_i_reg[24]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({\Gen_Access_Counter.Cycle_Count_2_i[24]_i_2_n_0 ,\Gen_Access_Counter.Cycle_Count_2_i[24]_i_3_n_0 ,\Gen_Access_Counter.Cycle_Count_2_i[24]_i_4_n_0 ,\Gen_Access_Counter.Cycle_Count_2_i[24]_i_5_n_0 }),
        .O({\Gen_Access_Counter.Cycle_Count_2_i_reg[24]_i_1_n_4 ,\Gen_Access_Counter.Cycle_Count_2_i_reg[24]_i_1_n_5 ,\Gen_Access_Counter.Cycle_Count_2_i_reg[24]_i_1_n_6 ,\Gen_Access_Counter.Cycle_Count_2_i_reg[24]_i_1_n_7 }),
        .S({\Gen_Access_Counter.Cycle_Count_2_i[24]_i_6_n_0 ,\Gen_Access_Counter.Cycle_Count_2_i[24]_i_7_n_0 ,\Gen_Access_Counter.Cycle_Count_2_i[24]_i_8_n_0 ,\Gen_Access_Counter.Cycle_Count_2_i[24]_i_9_n_0 }));
  FDRE \Gen_Access_Counter.Cycle_Count_2_i_reg[25] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Cycle_Count_2_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Cycle_Count_2_i_reg[24]_i_1_n_5 ),
        .Q(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 [6]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Cycle_Count_2_i_reg[26] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Cycle_Count_2_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Cycle_Count_2_i_reg[24]_i_1_n_6 ),
        .Q(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 [5]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Cycle_Count_2_i_reg[27] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Cycle_Count_2_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Cycle_Count_2_i_reg[24]_i_1_n_7 ),
        .Q(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 [4]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Cycle_Count_2_i_reg[28] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Cycle_Count_2_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Cycle_Count_2_i_reg[28]_i_1_n_4 ),
        .Q(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 [3]),
        .R(sync_reset));
  CARRY4 \Gen_Access_Counter.Cycle_Count_2_i_reg[28]_i_1 
       (.CI(1'b0),
        .CO({\Gen_Access_Counter.Cycle_Count_2_i_reg[28]_i_1_n_0 ,\Gen_Access_Counter.Cycle_Count_2_i_reg[28]_i_1_n_1 ,\Gen_Access_Counter.Cycle_Count_2_i_reg[28]_i_1_n_2 ,\Gen_Access_Counter.Cycle_Count_2_i_reg[28]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({\Gen_Access_Counter.Cycle_Count_2_i[28]_i_2_n_0 ,\Gen_Access_Counter.Cycle_Count_2_i[28]_i_3_n_0 ,\Gen_Access_Counter.Cycle_Count_2_i[28]_i_4_n_0 ,\Gen_Access_Counter.Cycle_Count_2_i[28]_i_5_n_0 }),
        .O({\Gen_Access_Counter.Cycle_Count_2_i_reg[28]_i_1_n_4 ,\Gen_Access_Counter.Cycle_Count_2_i_reg[28]_i_1_n_5 ,\Gen_Access_Counter.Cycle_Count_2_i_reg[28]_i_1_n_6 ,\Gen_Access_Counter.Cycle_Count_2_i_reg[28]_i_1_n_7 }),
        .S({\Gen_Access_Counter.Cycle_Count_2_i[28]_i_6_n_0 ,\Gen_Access_Counter.Cycle_Count_2_i[28]_i_7_n_0 ,\Gen_Access_Counter.Cycle_Count_2_i[28]_i_8_n_0 ,\Gen_Access_Counter.Cycle_Count_2_i[28]_i_9_n_0 }));
  FDRE \Gen_Access_Counter.Cycle_Count_2_i_reg[29] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Cycle_Count_2_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Cycle_Count_2_i_reg[28]_i_1_n_5 ),
        .Q(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 [2]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Cycle_Count_2_i_reg[2] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Cycle_Count_2_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Using_DSP48_Architectures.No_MUL64.dsp_module_I3_n_2 ),
        .Q(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 [29]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Cycle_Count_2_i_reg[30] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Cycle_Count_2_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Cycle_Count_2_i_reg[28]_i_1_n_6 ),
        .Q(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 [1]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Cycle_Count_2_i_reg[31] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Cycle_Count_2_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Cycle_Count_2_i_reg[28]_i_1_n_7 ),
        .Q(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 [0]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Cycle_Count_2_i_reg[3] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Cycle_Count_2_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Using_DSP48_Architectures.No_MUL64.dsp_module_I3_n_3 ),
        .Q(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 [28]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Cycle_Count_2_i_reg[4] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Cycle_Count_2_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Using_DSP48_Architectures.No_MUL64.dsp_module_I3_n_4 ),
        .Q(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 [27]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Cycle_Count_2_i_reg[5] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Cycle_Count_2_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Using_DSP48_Architectures.No_MUL64.dsp_module_I3_n_5 ),
        .Q(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 [26]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Cycle_Count_2_i_reg[6] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Cycle_Count_2_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Using_DSP48_Architectures.No_MUL64.dsp_module_I3_n_6 ),
        .Q(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 [25]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Cycle_Count_2_i_reg[7] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Cycle_Count_2_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Using_DSP48_Architectures.No_MUL64.dsp_module_I3_n_7 ),
        .Q(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 [24]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Cycle_Count_2_i_reg[8] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Cycle_Count_2_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Using_DSP48_Architectures.No_MUL64.dsp_module_I3_n_8 ),
        .Q(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 [23]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Cycle_Count_2_i_reg[9] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Cycle_Count_2_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Using_DSP48_Architectures.No_MUL64.dsp_module_I3_n_9 ),
        .Q(\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 [22]),
        .R(sync_reset));
  LUT3 #(
    .INIT(8'hEF)) 
    \Gen_Access_Counter.Cycle_Count_i[0]_i_1 
       (.I0(c1_stop_valid),
        .I1(clear_cmd),
        .I2(\Gen_Access_Counter.Cycle_Count_i[0]_i_3_n_0 ),
        .O(\Gen_Access_Counter.Cycle_Count_i[0]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFFDFFFFF)) 
    \Gen_Access_Counter.Cycle_Count_i[0]_i_3 
       (.I0(\Gen_Access_Counter.Overflow_reg_0 [1]),
        .I1(\Gen_Access_Counter.Overflow_reg_0 [0]),
        .I2(\Gen_Access_Counter.Overflow_reg_0 [2]),
        .I3(\Gen_Access_Counter.Overflow_reg_0 [3]),
        .I4(E),
        .O(\Gen_Access_Counter.Cycle_Count_i[0]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Access_Counter.Cycle_Count_i[0]_i_4 
       (.I0(\Gen_Access_Counter.Cycle_Count_i_reg[0]_0 [31]),
        .I1(c1_stop_valid),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [31]),
        .I3(\Gen_Access_Counter.Cycle_Count_i[0]_i_3_n_0 ),
        .O(\Gen_Access_Counter.Cycle_Count_i[0]_i_4_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Access_Counter.Cycle_Count_i[0]_i_5 
       (.I0(\Gen_Access_Counter.Cycle_Count_i_reg[0]_0 [30]),
        .I1(c1_stop_valid),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [30]),
        .I3(\Gen_Access_Counter.Cycle_Count_i[0]_i_3_n_0 ),
        .O(\Gen_Access_Counter.Cycle_Count_i[0]_i_5_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Access_Counter.Cycle_Count_i[0]_i_6 
       (.I0(\Gen_Access_Counter.Cycle_Count_i_reg[0]_0 [29]),
        .I1(c1_stop_valid),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [29]),
        .I3(\Gen_Access_Counter.Cycle_Count_i[0]_i_3_n_0 ),
        .O(\Gen_Access_Counter.Cycle_Count_i[0]_i_6_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Access_Counter.Cycle_Count_i[0]_i_7 
       (.I0(\Gen_Access_Counter.Cycle_Count_i_reg[0]_0 [28]),
        .I1(c1_stop_valid),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [28]),
        .I3(\Gen_Access_Counter.Cycle_Count_i[0]_i_3_n_0 ),
        .O(\Gen_Access_Counter.Cycle_Count_i[0]_i_7_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Access_Counter.Cycle_Count_i[12]_i_2 
       (.I0(\Gen_Access_Counter.Cycle_Count_i_reg[0]_0 [19]),
        .I1(c1_stop_valid),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [19]),
        .I3(\Gen_Access_Counter.Cycle_Count_i[0]_i_3_n_0 ),
        .O(\Gen_Access_Counter.Cycle_Count_i[12]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Access_Counter.Cycle_Count_i[12]_i_3 
       (.I0(\Gen_Access_Counter.Cycle_Count_i_reg[0]_0 [18]),
        .I1(c1_stop_valid),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [18]),
        .I3(\Gen_Access_Counter.Cycle_Count_i[0]_i_3_n_0 ),
        .O(\Gen_Access_Counter.Cycle_Count_i[12]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Access_Counter.Cycle_Count_i[12]_i_4 
       (.I0(\Gen_Access_Counter.Cycle_Count_i_reg[0]_0 [17]),
        .I1(c1_stop_valid),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [17]),
        .I3(\Gen_Access_Counter.Cycle_Count_i[0]_i_3_n_0 ),
        .O(\Gen_Access_Counter.Cycle_Count_i[12]_i_4_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Access_Counter.Cycle_Count_i[12]_i_5 
       (.I0(\Gen_Access_Counter.Cycle_Count_i_reg[0]_0 [16]),
        .I1(c1_stop_valid),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [16]),
        .I3(\Gen_Access_Counter.Cycle_Count_i[0]_i_3_n_0 ),
        .O(\Gen_Access_Counter.Cycle_Count_i[12]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Gen_Access_Counter.Cycle_Count_i[16]_i_2 
       (.I0(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[0] ),
        .I1(c1_stop_valid),
        .O(\Gen_Access_Counter.Cycle_Count_i[16]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Gen_Access_Counter.Cycle_Count_i[16]_i_3 
       (.I0(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[1] ),
        .I1(c1_stop_valid),
        .O(\Gen_Access_Counter.Cycle_Count_i[16]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Gen_Access_Counter.Cycle_Count_i[16]_i_4 
       (.I0(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[2] ),
        .I1(c1_stop_valid),
        .O(\Gen_Access_Counter.Cycle_Count_i[16]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Gen_Access_Counter.Cycle_Count_i[16]_i_5 
       (.I0(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[3] ),
        .I1(c1_stop_valid),
        .O(\Gen_Access_Counter.Cycle_Count_i[16]_i_5_n_0 ));
  LUT5 #(
    .INIT(32'h5530AA30)) 
    \Gen_Access_Counter.Cycle_Count_i[16]_i_6 
       (.I0(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[0] ),
        .I1(\Gen_Access_Counter.Cycle_Count_i[0]_i_3_n_0 ),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [15]),
        .I3(c1_stop_valid),
        .I4(\Gen_Access_Counter.Cycle_Count_i_reg[0]_0 [15]),
        .O(\Gen_Access_Counter.Cycle_Count_i[16]_i_6_n_0 ));
  LUT5 #(
    .INIT(32'h5530AA30)) 
    \Gen_Access_Counter.Cycle_Count_i[16]_i_7 
       (.I0(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[1] ),
        .I1(\Gen_Access_Counter.Cycle_Count_i[0]_i_3_n_0 ),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [14]),
        .I3(c1_stop_valid),
        .I4(\Gen_Access_Counter.Cycle_Count_i_reg[0]_0 [14]),
        .O(\Gen_Access_Counter.Cycle_Count_i[16]_i_7_n_0 ));
  LUT5 #(
    .INIT(32'h5530AA30)) 
    \Gen_Access_Counter.Cycle_Count_i[16]_i_8 
       (.I0(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[2] ),
        .I1(\Gen_Access_Counter.Cycle_Count_i[0]_i_3_n_0 ),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [13]),
        .I3(c1_stop_valid),
        .I4(\Gen_Access_Counter.Cycle_Count_i_reg[0]_0 [13]),
        .O(\Gen_Access_Counter.Cycle_Count_i[16]_i_8_n_0 ));
  LUT5 #(
    .INIT(32'h5530AA30)) 
    \Gen_Access_Counter.Cycle_Count_i[16]_i_9 
       (.I0(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[3] ),
        .I1(\Gen_Access_Counter.Cycle_Count_i[0]_i_3_n_0 ),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [12]),
        .I3(c1_stop_valid),
        .I4(\Gen_Access_Counter.Cycle_Count_i_reg[0]_0 [12]),
        .O(\Gen_Access_Counter.Cycle_Count_i[16]_i_9_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Gen_Access_Counter.Cycle_Count_i[20]_i_2 
       (.I0(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[4] ),
        .I1(c1_stop_valid),
        .O(\Gen_Access_Counter.Cycle_Count_i[20]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Gen_Access_Counter.Cycle_Count_i[20]_i_3 
       (.I0(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[5] ),
        .I1(c1_stop_valid),
        .O(\Gen_Access_Counter.Cycle_Count_i[20]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Gen_Access_Counter.Cycle_Count_i[20]_i_4 
       (.I0(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[6] ),
        .I1(c1_stop_valid),
        .O(\Gen_Access_Counter.Cycle_Count_i[20]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Gen_Access_Counter.Cycle_Count_i[20]_i_5 
       (.I0(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[7] ),
        .I1(c1_stop_valid),
        .O(\Gen_Access_Counter.Cycle_Count_i[20]_i_5_n_0 ));
  LUT5 #(
    .INIT(32'h5530AA30)) 
    \Gen_Access_Counter.Cycle_Count_i[20]_i_6 
       (.I0(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[4] ),
        .I1(\Gen_Access_Counter.Cycle_Count_i[0]_i_3_n_0 ),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [11]),
        .I3(c1_stop_valid),
        .I4(\Gen_Access_Counter.Cycle_Count_i_reg[0]_0 [11]),
        .O(\Gen_Access_Counter.Cycle_Count_i[20]_i_6_n_0 ));
  LUT5 #(
    .INIT(32'h5530AA30)) 
    \Gen_Access_Counter.Cycle_Count_i[20]_i_7 
       (.I0(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[5] ),
        .I1(\Gen_Access_Counter.Cycle_Count_i[0]_i_3_n_0 ),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [10]),
        .I3(c1_stop_valid),
        .I4(\Gen_Access_Counter.Cycle_Count_i_reg[0]_0 [10]),
        .O(\Gen_Access_Counter.Cycle_Count_i[20]_i_7_n_0 ));
  LUT5 #(
    .INIT(32'h5530AA30)) 
    \Gen_Access_Counter.Cycle_Count_i[20]_i_8 
       (.I0(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[6] ),
        .I1(\Gen_Access_Counter.Cycle_Count_i[0]_i_3_n_0 ),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [9]),
        .I3(c1_stop_valid),
        .I4(\Gen_Access_Counter.Cycle_Count_i_reg[0]_0 [9]),
        .O(\Gen_Access_Counter.Cycle_Count_i[20]_i_8_n_0 ));
  LUT5 #(
    .INIT(32'h5530AA30)) 
    \Gen_Access_Counter.Cycle_Count_i[20]_i_9 
       (.I0(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[7] ),
        .I1(\Gen_Access_Counter.Cycle_Count_i[0]_i_3_n_0 ),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [8]),
        .I3(c1_stop_valid),
        .I4(\Gen_Access_Counter.Cycle_Count_i_reg[0]_0 [8]),
        .O(\Gen_Access_Counter.Cycle_Count_i[20]_i_9_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Gen_Access_Counter.Cycle_Count_i[24]_i_2 
       (.I0(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[8] ),
        .I1(c1_stop_valid),
        .O(\Gen_Access_Counter.Cycle_Count_i[24]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Gen_Access_Counter.Cycle_Count_i[24]_i_3 
       (.I0(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[9] ),
        .I1(c1_stop_valid),
        .O(\Gen_Access_Counter.Cycle_Count_i[24]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Gen_Access_Counter.Cycle_Count_i[24]_i_4 
       (.I0(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[10] ),
        .I1(c1_stop_valid),
        .O(\Gen_Access_Counter.Cycle_Count_i[24]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Gen_Access_Counter.Cycle_Count_i[24]_i_5 
       (.I0(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[11] ),
        .I1(c1_stop_valid),
        .O(\Gen_Access_Counter.Cycle_Count_i[24]_i_5_n_0 ));
  LUT5 #(
    .INIT(32'h5530AA30)) 
    \Gen_Access_Counter.Cycle_Count_i[24]_i_6 
       (.I0(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[8] ),
        .I1(\Gen_Access_Counter.Cycle_Count_i[0]_i_3_n_0 ),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [7]),
        .I3(c1_stop_valid),
        .I4(\Gen_Access_Counter.Cycle_Count_i_reg[0]_0 [7]),
        .O(\Gen_Access_Counter.Cycle_Count_i[24]_i_6_n_0 ));
  LUT5 #(
    .INIT(32'h5530AA30)) 
    \Gen_Access_Counter.Cycle_Count_i[24]_i_7 
       (.I0(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[9] ),
        .I1(\Gen_Access_Counter.Cycle_Count_i[0]_i_3_n_0 ),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [6]),
        .I3(c1_stop_valid),
        .I4(\Gen_Access_Counter.Cycle_Count_i_reg[0]_0 [6]),
        .O(\Gen_Access_Counter.Cycle_Count_i[24]_i_7_n_0 ));
  LUT5 #(
    .INIT(32'h5530AA30)) 
    \Gen_Access_Counter.Cycle_Count_i[24]_i_8 
       (.I0(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[10] ),
        .I1(\Gen_Access_Counter.Cycle_Count_i[0]_i_3_n_0 ),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [5]),
        .I3(c1_stop_valid),
        .I4(\Gen_Access_Counter.Cycle_Count_i_reg[0]_0 [5]),
        .O(\Gen_Access_Counter.Cycle_Count_i[24]_i_8_n_0 ));
  LUT5 #(
    .INIT(32'h5530AA30)) 
    \Gen_Access_Counter.Cycle_Count_i[24]_i_9 
       (.I0(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[11] ),
        .I1(\Gen_Access_Counter.Cycle_Count_i[0]_i_3_n_0 ),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [4]),
        .I3(c1_stop_valid),
        .I4(\Gen_Access_Counter.Cycle_Count_i_reg[0]_0 [4]),
        .O(\Gen_Access_Counter.Cycle_Count_i[24]_i_9_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Gen_Access_Counter.Cycle_Count_i[28]_i_2 
       (.I0(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[12] ),
        .I1(c1_stop_valid),
        .O(\Gen_Access_Counter.Cycle_Count_i[28]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Gen_Access_Counter.Cycle_Count_i[28]_i_3 
       (.I0(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[13] ),
        .I1(c1_stop_valid),
        .O(\Gen_Access_Counter.Cycle_Count_i[28]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Gen_Access_Counter.Cycle_Count_i[28]_i_4 
       (.I0(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[14] ),
        .I1(c1_stop_valid),
        .O(\Gen_Access_Counter.Cycle_Count_i[28]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Gen_Access_Counter.Cycle_Count_i[28]_i_5 
       (.I0(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[15] ),
        .I1(c1_stop_valid),
        .O(\Gen_Access_Counter.Cycle_Count_i[28]_i_5_n_0 ));
  LUT5 #(
    .INIT(32'h5530AA30)) 
    \Gen_Access_Counter.Cycle_Count_i[28]_i_6 
       (.I0(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[12] ),
        .I1(\Gen_Access_Counter.Cycle_Count_i[0]_i_3_n_0 ),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [3]),
        .I3(c1_stop_valid),
        .I4(\Gen_Access_Counter.Cycle_Count_i_reg[0]_0 [3]),
        .O(\Gen_Access_Counter.Cycle_Count_i[28]_i_6_n_0 ));
  LUT5 #(
    .INIT(32'h5530AA30)) 
    \Gen_Access_Counter.Cycle_Count_i[28]_i_7 
       (.I0(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[13] ),
        .I1(\Gen_Access_Counter.Cycle_Count_i[0]_i_3_n_0 ),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [2]),
        .I3(c1_stop_valid),
        .I4(\Gen_Access_Counter.Cycle_Count_i_reg[0]_0 [2]),
        .O(\Gen_Access_Counter.Cycle_Count_i[28]_i_7_n_0 ));
  LUT5 #(
    .INIT(32'h5530AA30)) 
    \Gen_Access_Counter.Cycle_Count_i[28]_i_8 
       (.I0(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[14] ),
        .I1(\Gen_Access_Counter.Cycle_Count_i[0]_i_3_n_0 ),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [1]),
        .I3(c1_stop_valid),
        .I4(\Gen_Access_Counter.Cycle_Count_i_reg[0]_0 [1]),
        .O(\Gen_Access_Counter.Cycle_Count_i[28]_i_8_n_0 ));
  LUT5 #(
    .INIT(32'h5530AA30)) 
    \Gen_Access_Counter.Cycle_Count_i[28]_i_9 
       (.I0(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[15] ),
        .I1(\Gen_Access_Counter.Cycle_Count_i[0]_i_3_n_0 ),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [0]),
        .I3(c1_stop_valid),
        .I4(\Gen_Access_Counter.Cycle_Count_i_reg[0]_0 [0]),
        .O(\Gen_Access_Counter.Cycle_Count_i[28]_i_9_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Access_Counter.Cycle_Count_i[4]_i_2 
       (.I0(\Gen_Access_Counter.Cycle_Count_i_reg[0]_0 [27]),
        .I1(c1_stop_valid),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [27]),
        .I3(\Gen_Access_Counter.Cycle_Count_i[0]_i_3_n_0 ),
        .O(\Gen_Access_Counter.Cycle_Count_i[4]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Access_Counter.Cycle_Count_i[4]_i_3 
       (.I0(\Gen_Access_Counter.Cycle_Count_i_reg[0]_0 [26]),
        .I1(c1_stop_valid),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [26]),
        .I3(\Gen_Access_Counter.Cycle_Count_i[0]_i_3_n_0 ),
        .O(\Gen_Access_Counter.Cycle_Count_i[4]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Access_Counter.Cycle_Count_i[4]_i_4 
       (.I0(\Gen_Access_Counter.Cycle_Count_i_reg[0]_0 [25]),
        .I1(c1_stop_valid),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [25]),
        .I3(\Gen_Access_Counter.Cycle_Count_i[0]_i_3_n_0 ),
        .O(\Gen_Access_Counter.Cycle_Count_i[4]_i_4_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Access_Counter.Cycle_Count_i[4]_i_5 
       (.I0(\Gen_Access_Counter.Cycle_Count_i_reg[0]_0 [24]),
        .I1(c1_stop_valid),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [24]),
        .I3(\Gen_Access_Counter.Cycle_Count_i[0]_i_3_n_0 ),
        .O(\Gen_Access_Counter.Cycle_Count_i[4]_i_5_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Access_Counter.Cycle_Count_i[8]_i_2 
       (.I0(\Gen_Access_Counter.Cycle_Count_i_reg[0]_0 [23]),
        .I1(c1_stop_valid),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [23]),
        .I3(\Gen_Access_Counter.Cycle_Count_i[0]_i_3_n_0 ),
        .O(\Gen_Access_Counter.Cycle_Count_i[8]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Access_Counter.Cycle_Count_i[8]_i_3 
       (.I0(\Gen_Access_Counter.Cycle_Count_i_reg[0]_0 [22]),
        .I1(c1_stop_valid),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [22]),
        .I3(\Gen_Access_Counter.Cycle_Count_i[0]_i_3_n_0 ),
        .O(\Gen_Access_Counter.Cycle_Count_i[8]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Access_Counter.Cycle_Count_i[8]_i_4 
       (.I0(\Gen_Access_Counter.Cycle_Count_i_reg[0]_0 [21]),
        .I1(c1_stop_valid),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [21]),
        .I3(\Gen_Access_Counter.Cycle_Count_i[0]_i_3_n_0 ),
        .O(\Gen_Access_Counter.Cycle_Count_i[8]_i_4_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Gen_Access_Counter.Cycle_Count_i[8]_i_5 
       (.I0(\Gen_Access_Counter.Cycle_Count_i_reg[0]_0 [20]),
        .I1(c1_stop_valid),
        .I2(\Gen_Access_Counter.Minimum_reg[0]_0 [20]),
        .I3(\Gen_Access_Counter.Cycle_Count_i[0]_i_3_n_0 ),
        .O(\Gen_Access_Counter.Cycle_Count_i[8]_i_5_n_0 ));
  FDRE \Gen_Access_Counter.Cycle_Count_i_reg[0] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Cycle_Count_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Cycle_Count_i_reg[0]_i_2_n_4 ),
        .Q(\Gen_Access_Counter.Cycle_Count_i_reg[0]_0 [31]),
        .R(sync_reset));
  CARRY4 \Gen_Access_Counter.Cycle_Count_i_reg[0]_i_2 
       (.CI(\Gen_Access_Counter.Cycle_Count_i_reg[4]_i_1_n_0 ),
        .CO({\NLW_Gen_Access_Counter.Cycle_Count_i_reg[0]_i_2_CO_UNCONNECTED [3],\Gen_Access_Counter.Cycle_Count_i_reg[0]_i_2_n_1 ,\Gen_Access_Counter.Cycle_Count_i_reg[0]_i_2_n_2 ,\Gen_Access_Counter.Cycle_Count_i_reg[0]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\Gen_Access_Counter.Cycle_Count_i_reg[0]_i_2_n_4 ,\Gen_Access_Counter.Cycle_Count_i_reg[0]_i_2_n_5 ,\Gen_Access_Counter.Cycle_Count_i_reg[0]_i_2_n_6 ,\Gen_Access_Counter.Cycle_Count_i_reg[0]_i_2_n_7 }),
        .S({\Gen_Access_Counter.Cycle_Count_i[0]_i_4_n_0 ,\Gen_Access_Counter.Cycle_Count_i[0]_i_5_n_0 ,\Gen_Access_Counter.Cycle_Count_i[0]_i_6_n_0 ,\Gen_Access_Counter.Cycle_Count_i[0]_i_7_n_0 }));
  FDRE \Gen_Access_Counter.Cycle_Count_i_reg[10] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Cycle_Count_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Cycle_Count_i_reg[8]_i_1_n_6 ),
        .Q(\Gen_Access_Counter.Cycle_Count_i_reg[0]_0 [21]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Cycle_Count_i_reg[11] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Cycle_Count_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Cycle_Count_i_reg[8]_i_1_n_7 ),
        .Q(\Gen_Access_Counter.Cycle_Count_i_reg[0]_0 [20]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Cycle_Count_i_reg[12] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Cycle_Count_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Cycle_Count_i_reg[12]_i_1_n_4 ),
        .Q(\Gen_Access_Counter.Cycle_Count_i_reg[0]_0 [19]),
        .R(sync_reset));
  CARRY4 \Gen_Access_Counter.Cycle_Count_i_reg[12]_i_1 
       (.CI(\Gen_Access_Counter.Cycle_Count_i_reg[16]_i_1_n_0 ),
        .CO({\Gen_Access_Counter.Cycle_Count_i_reg[12]_i_1_n_0 ,\Gen_Access_Counter.Cycle_Count_i_reg[12]_i_1_n_1 ,\Gen_Access_Counter.Cycle_Count_i_reg[12]_i_1_n_2 ,\Gen_Access_Counter.Cycle_Count_i_reg[12]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\Gen_Access_Counter.Cycle_Count_i_reg[12]_i_1_n_4 ,\Gen_Access_Counter.Cycle_Count_i_reg[12]_i_1_n_5 ,\Gen_Access_Counter.Cycle_Count_i_reg[12]_i_1_n_6 ,\Gen_Access_Counter.Cycle_Count_i_reg[12]_i_1_n_7 }),
        .S({\Gen_Access_Counter.Cycle_Count_i[12]_i_2_n_0 ,\Gen_Access_Counter.Cycle_Count_i[12]_i_3_n_0 ,\Gen_Access_Counter.Cycle_Count_i[12]_i_4_n_0 ,\Gen_Access_Counter.Cycle_Count_i[12]_i_5_n_0 }));
  FDRE \Gen_Access_Counter.Cycle_Count_i_reg[13] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Cycle_Count_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Cycle_Count_i_reg[12]_i_1_n_5 ),
        .Q(\Gen_Access_Counter.Cycle_Count_i_reg[0]_0 [18]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Cycle_Count_i_reg[14] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Cycle_Count_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Cycle_Count_i_reg[12]_i_1_n_6 ),
        .Q(\Gen_Access_Counter.Cycle_Count_i_reg[0]_0 [17]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Cycle_Count_i_reg[15] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Cycle_Count_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Cycle_Count_i_reg[12]_i_1_n_7 ),
        .Q(\Gen_Access_Counter.Cycle_Count_i_reg[0]_0 [16]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Cycle_Count_i_reg[16] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Cycle_Count_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Cycle_Count_i_reg[16]_i_1_n_4 ),
        .Q(\Gen_Access_Counter.Cycle_Count_i_reg[0]_0 [15]),
        .R(sync_reset));
  CARRY4 \Gen_Access_Counter.Cycle_Count_i_reg[16]_i_1 
       (.CI(\Gen_Access_Counter.Cycle_Count_i_reg[20]_i_1_n_0 ),
        .CO({\Gen_Access_Counter.Cycle_Count_i_reg[16]_i_1_n_0 ,\Gen_Access_Counter.Cycle_Count_i_reg[16]_i_1_n_1 ,\Gen_Access_Counter.Cycle_Count_i_reg[16]_i_1_n_2 ,\Gen_Access_Counter.Cycle_Count_i_reg[16]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({\Gen_Access_Counter.Cycle_Count_i[16]_i_2_n_0 ,\Gen_Access_Counter.Cycle_Count_i[16]_i_3_n_0 ,\Gen_Access_Counter.Cycle_Count_i[16]_i_4_n_0 ,\Gen_Access_Counter.Cycle_Count_i[16]_i_5_n_0 }),
        .O({\Gen_Access_Counter.Cycle_Count_i_reg[16]_i_1_n_4 ,\Gen_Access_Counter.Cycle_Count_i_reg[16]_i_1_n_5 ,\Gen_Access_Counter.Cycle_Count_i_reg[16]_i_1_n_6 ,\Gen_Access_Counter.Cycle_Count_i_reg[16]_i_1_n_7 }),
        .S({\Gen_Access_Counter.Cycle_Count_i[16]_i_6_n_0 ,\Gen_Access_Counter.Cycle_Count_i[16]_i_7_n_0 ,\Gen_Access_Counter.Cycle_Count_i[16]_i_8_n_0 ,\Gen_Access_Counter.Cycle_Count_i[16]_i_9_n_0 }));
  FDRE \Gen_Access_Counter.Cycle_Count_i_reg[17] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Cycle_Count_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Cycle_Count_i_reg[16]_i_1_n_5 ),
        .Q(\Gen_Access_Counter.Cycle_Count_i_reg[0]_0 [14]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Cycle_Count_i_reg[18] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Cycle_Count_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Cycle_Count_i_reg[16]_i_1_n_6 ),
        .Q(\Gen_Access_Counter.Cycle_Count_i_reg[0]_0 [13]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Cycle_Count_i_reg[19] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Cycle_Count_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Cycle_Count_i_reg[16]_i_1_n_7 ),
        .Q(\Gen_Access_Counter.Cycle_Count_i_reg[0]_0 [12]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Cycle_Count_i_reg[1] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Cycle_Count_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Cycle_Count_i_reg[0]_i_2_n_5 ),
        .Q(\Gen_Access_Counter.Cycle_Count_i_reg[0]_0 [30]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Cycle_Count_i_reg[20] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Cycle_Count_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Cycle_Count_i_reg[20]_i_1_n_4 ),
        .Q(\Gen_Access_Counter.Cycle_Count_i_reg[0]_0 [11]),
        .R(sync_reset));
  CARRY4 \Gen_Access_Counter.Cycle_Count_i_reg[20]_i_1 
       (.CI(\Gen_Access_Counter.Cycle_Count_i_reg[24]_i_1_n_0 ),
        .CO({\Gen_Access_Counter.Cycle_Count_i_reg[20]_i_1_n_0 ,\Gen_Access_Counter.Cycle_Count_i_reg[20]_i_1_n_1 ,\Gen_Access_Counter.Cycle_Count_i_reg[20]_i_1_n_2 ,\Gen_Access_Counter.Cycle_Count_i_reg[20]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({\Gen_Access_Counter.Cycle_Count_i[20]_i_2_n_0 ,\Gen_Access_Counter.Cycle_Count_i[20]_i_3_n_0 ,\Gen_Access_Counter.Cycle_Count_i[20]_i_4_n_0 ,\Gen_Access_Counter.Cycle_Count_i[20]_i_5_n_0 }),
        .O({\Gen_Access_Counter.Cycle_Count_i_reg[20]_i_1_n_4 ,\Gen_Access_Counter.Cycle_Count_i_reg[20]_i_1_n_5 ,\Gen_Access_Counter.Cycle_Count_i_reg[20]_i_1_n_6 ,\Gen_Access_Counter.Cycle_Count_i_reg[20]_i_1_n_7 }),
        .S({\Gen_Access_Counter.Cycle_Count_i[20]_i_6_n_0 ,\Gen_Access_Counter.Cycle_Count_i[20]_i_7_n_0 ,\Gen_Access_Counter.Cycle_Count_i[20]_i_8_n_0 ,\Gen_Access_Counter.Cycle_Count_i[20]_i_9_n_0 }));
  FDRE \Gen_Access_Counter.Cycle_Count_i_reg[21] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Cycle_Count_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Cycle_Count_i_reg[20]_i_1_n_5 ),
        .Q(\Gen_Access_Counter.Cycle_Count_i_reg[0]_0 [10]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Cycle_Count_i_reg[22] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Cycle_Count_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Cycle_Count_i_reg[20]_i_1_n_6 ),
        .Q(\Gen_Access_Counter.Cycle_Count_i_reg[0]_0 [9]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Cycle_Count_i_reg[23] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Cycle_Count_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Cycle_Count_i_reg[20]_i_1_n_7 ),
        .Q(\Gen_Access_Counter.Cycle_Count_i_reg[0]_0 [8]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Cycle_Count_i_reg[24] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Cycle_Count_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Cycle_Count_i_reg[24]_i_1_n_4 ),
        .Q(\Gen_Access_Counter.Cycle_Count_i_reg[0]_0 [7]),
        .R(sync_reset));
  CARRY4 \Gen_Access_Counter.Cycle_Count_i_reg[24]_i_1 
       (.CI(\Gen_Access_Counter.Cycle_Count_i_reg[28]_i_1_n_0 ),
        .CO({\Gen_Access_Counter.Cycle_Count_i_reg[24]_i_1_n_0 ,\Gen_Access_Counter.Cycle_Count_i_reg[24]_i_1_n_1 ,\Gen_Access_Counter.Cycle_Count_i_reg[24]_i_1_n_2 ,\Gen_Access_Counter.Cycle_Count_i_reg[24]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({\Gen_Access_Counter.Cycle_Count_i[24]_i_2_n_0 ,\Gen_Access_Counter.Cycle_Count_i[24]_i_3_n_0 ,\Gen_Access_Counter.Cycle_Count_i[24]_i_4_n_0 ,\Gen_Access_Counter.Cycle_Count_i[24]_i_5_n_0 }),
        .O({\Gen_Access_Counter.Cycle_Count_i_reg[24]_i_1_n_4 ,\Gen_Access_Counter.Cycle_Count_i_reg[24]_i_1_n_5 ,\Gen_Access_Counter.Cycle_Count_i_reg[24]_i_1_n_6 ,\Gen_Access_Counter.Cycle_Count_i_reg[24]_i_1_n_7 }),
        .S({\Gen_Access_Counter.Cycle_Count_i[24]_i_6_n_0 ,\Gen_Access_Counter.Cycle_Count_i[24]_i_7_n_0 ,\Gen_Access_Counter.Cycle_Count_i[24]_i_8_n_0 ,\Gen_Access_Counter.Cycle_Count_i[24]_i_9_n_0 }));
  FDRE \Gen_Access_Counter.Cycle_Count_i_reg[25] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Cycle_Count_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Cycle_Count_i_reg[24]_i_1_n_5 ),
        .Q(\Gen_Access_Counter.Cycle_Count_i_reg[0]_0 [6]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Cycle_Count_i_reg[26] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Cycle_Count_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Cycle_Count_i_reg[24]_i_1_n_6 ),
        .Q(\Gen_Access_Counter.Cycle_Count_i_reg[0]_0 [5]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Cycle_Count_i_reg[27] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Cycle_Count_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Cycle_Count_i_reg[24]_i_1_n_7 ),
        .Q(\Gen_Access_Counter.Cycle_Count_i_reg[0]_0 [4]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Cycle_Count_i_reg[28] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Cycle_Count_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Cycle_Count_i_reg[28]_i_1_n_4 ),
        .Q(\Gen_Access_Counter.Cycle_Count_i_reg[0]_0 [3]),
        .R(sync_reset));
  CARRY4 \Gen_Access_Counter.Cycle_Count_i_reg[28]_i_1 
       (.CI(1'b0),
        .CO({\Gen_Access_Counter.Cycle_Count_i_reg[28]_i_1_n_0 ,\Gen_Access_Counter.Cycle_Count_i_reg[28]_i_1_n_1 ,\Gen_Access_Counter.Cycle_Count_i_reg[28]_i_1_n_2 ,\Gen_Access_Counter.Cycle_Count_i_reg[28]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({\Gen_Access_Counter.Cycle_Count_i[28]_i_2_n_0 ,\Gen_Access_Counter.Cycle_Count_i[28]_i_3_n_0 ,\Gen_Access_Counter.Cycle_Count_i[28]_i_4_n_0 ,\Gen_Access_Counter.Cycle_Count_i[28]_i_5_n_0 }),
        .O({\Gen_Access_Counter.Cycle_Count_i_reg[28]_i_1_n_4 ,\Gen_Access_Counter.Cycle_Count_i_reg[28]_i_1_n_5 ,\Gen_Access_Counter.Cycle_Count_i_reg[28]_i_1_n_6 ,\Gen_Access_Counter.Cycle_Count_i_reg[28]_i_1_n_7 }),
        .S({\Gen_Access_Counter.Cycle_Count_i[28]_i_6_n_0 ,\Gen_Access_Counter.Cycle_Count_i[28]_i_7_n_0 ,\Gen_Access_Counter.Cycle_Count_i[28]_i_8_n_0 ,\Gen_Access_Counter.Cycle_Count_i[28]_i_9_n_0 }));
  FDRE \Gen_Access_Counter.Cycle_Count_i_reg[29] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Cycle_Count_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Cycle_Count_i_reg[28]_i_1_n_5 ),
        .Q(\Gen_Access_Counter.Cycle_Count_i_reg[0]_0 [2]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Cycle_Count_i_reg[2] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Cycle_Count_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Cycle_Count_i_reg[0]_i_2_n_6 ),
        .Q(\Gen_Access_Counter.Cycle_Count_i_reg[0]_0 [29]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Cycle_Count_i_reg[30] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Cycle_Count_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Cycle_Count_i_reg[28]_i_1_n_6 ),
        .Q(\Gen_Access_Counter.Cycle_Count_i_reg[0]_0 [1]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Cycle_Count_i_reg[31] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Cycle_Count_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Cycle_Count_i_reg[28]_i_1_n_7 ),
        .Q(\Gen_Access_Counter.Cycle_Count_i_reg[0]_0 [0]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Cycle_Count_i_reg[3] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Cycle_Count_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Cycle_Count_i_reg[0]_i_2_n_7 ),
        .Q(\Gen_Access_Counter.Cycle_Count_i_reg[0]_0 [28]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Cycle_Count_i_reg[4] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Cycle_Count_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Cycle_Count_i_reg[4]_i_1_n_4 ),
        .Q(\Gen_Access_Counter.Cycle_Count_i_reg[0]_0 [27]),
        .R(sync_reset));
  CARRY4 \Gen_Access_Counter.Cycle_Count_i_reg[4]_i_1 
       (.CI(\Gen_Access_Counter.Cycle_Count_i_reg[8]_i_1_n_0 ),
        .CO({\Gen_Access_Counter.Cycle_Count_i_reg[4]_i_1_n_0 ,\Gen_Access_Counter.Cycle_Count_i_reg[4]_i_1_n_1 ,\Gen_Access_Counter.Cycle_Count_i_reg[4]_i_1_n_2 ,\Gen_Access_Counter.Cycle_Count_i_reg[4]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\Gen_Access_Counter.Cycle_Count_i_reg[4]_i_1_n_4 ,\Gen_Access_Counter.Cycle_Count_i_reg[4]_i_1_n_5 ,\Gen_Access_Counter.Cycle_Count_i_reg[4]_i_1_n_6 ,\Gen_Access_Counter.Cycle_Count_i_reg[4]_i_1_n_7 }),
        .S({\Gen_Access_Counter.Cycle_Count_i[4]_i_2_n_0 ,\Gen_Access_Counter.Cycle_Count_i[4]_i_3_n_0 ,\Gen_Access_Counter.Cycle_Count_i[4]_i_4_n_0 ,\Gen_Access_Counter.Cycle_Count_i[4]_i_5_n_0 }));
  FDRE \Gen_Access_Counter.Cycle_Count_i_reg[5] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Cycle_Count_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Cycle_Count_i_reg[4]_i_1_n_5 ),
        .Q(\Gen_Access_Counter.Cycle_Count_i_reg[0]_0 [26]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Cycle_Count_i_reg[6] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Cycle_Count_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Cycle_Count_i_reg[4]_i_1_n_6 ),
        .Q(\Gen_Access_Counter.Cycle_Count_i_reg[0]_0 [25]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Cycle_Count_i_reg[7] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Cycle_Count_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Cycle_Count_i_reg[4]_i_1_n_7 ),
        .Q(\Gen_Access_Counter.Cycle_Count_i_reg[0]_0 [24]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Cycle_Count_i_reg[8] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Cycle_Count_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Cycle_Count_i_reg[8]_i_1_n_4 ),
        .Q(\Gen_Access_Counter.Cycle_Count_i_reg[0]_0 [23]),
        .R(sync_reset));
  CARRY4 \Gen_Access_Counter.Cycle_Count_i_reg[8]_i_1 
       (.CI(\Gen_Access_Counter.Cycle_Count_i_reg[12]_i_1_n_0 ),
        .CO({\Gen_Access_Counter.Cycle_Count_i_reg[8]_i_1_n_0 ,\Gen_Access_Counter.Cycle_Count_i_reg[8]_i_1_n_1 ,\Gen_Access_Counter.Cycle_Count_i_reg[8]_i_1_n_2 ,\Gen_Access_Counter.Cycle_Count_i_reg[8]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\Gen_Access_Counter.Cycle_Count_i_reg[8]_i_1_n_4 ,\Gen_Access_Counter.Cycle_Count_i_reg[8]_i_1_n_5 ,\Gen_Access_Counter.Cycle_Count_i_reg[8]_i_1_n_6 ,\Gen_Access_Counter.Cycle_Count_i_reg[8]_i_1_n_7 }),
        .S({\Gen_Access_Counter.Cycle_Count_i[8]_i_2_n_0 ,\Gen_Access_Counter.Cycle_Count_i[8]_i_3_n_0 ,\Gen_Access_Counter.Cycle_Count_i[8]_i_4_n_0 ,\Gen_Access_Counter.Cycle_Count_i[8]_i_5_n_0 }));
  FDRE \Gen_Access_Counter.Cycle_Count_i_reg[9] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Cycle_Count_i[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Cycle_Count_i_reg[8]_i_1_n_5 ),
        .Q(\Gen_Access_Counter.Cycle_Count_i_reg[0]_0 [22]),
        .R(sync_reset));
  LUT5 #(
    .INIT(32'hFEEEEEEE)) 
    \Gen_Access_Counter.Maximum[0]_i_1 
       (.I0(\Gen_Access_Counter.Maximum[0]_i_3_n_0 ),
        .I1(clear_cmd),
        .I2(c1_no_overflow),
        .I3(Maximum2),
        .I4(c1_stop_valid),
        .O(\Gen_Access_Counter.Maximum[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF888888808888888)) 
    \Gen_Access_Counter.Maximum[0]_i_2 
       (.I0(\Gen_Access_Counter.Minimum_reg[0]_0 [15]),
        .I1(\Gen_Access_Counter.Maximum[0]_i_3_n_0 ),
        .I2(c1_stop_valid),
        .I3(Maximum2),
        .I4(c1_no_overflow),
        .I5(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[0] ),
        .O(p_1_in[15]));
  LUT5 #(
    .INIT(32'h00020000)) 
    \Gen_Access_Counter.Maximum[0]_i_3 
       (.I0(E),
        .I1(\Gen_Access_Counter.Overflow_reg_0 [0]),
        .I2(\Gen_Access_Counter.Overflow_reg_0 [1]),
        .I3(\Gen_Access_Counter.Overflow_reg_0 [2]),
        .I4(\Gen_Access_Counter.Overflow_reg_0 [3]),
        .O(\Gen_Access_Counter.Maximum[0]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hF888888808888888)) 
    \Gen_Access_Counter.Maximum[10]_i_1 
       (.I0(\Gen_Access_Counter.Minimum_reg[0]_0 [5]),
        .I1(\Gen_Access_Counter.Maximum[0]_i_3_n_0 ),
        .I2(c1_stop_valid),
        .I3(Maximum2),
        .I4(c1_no_overflow),
        .I5(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[10] ),
        .O(p_1_in[5]));
  LUT6 #(
    .INIT(64'hF888888808888888)) 
    \Gen_Access_Counter.Maximum[11]_i_1 
       (.I0(\Gen_Access_Counter.Minimum_reg[0]_0 [4]),
        .I1(\Gen_Access_Counter.Maximum[0]_i_3_n_0 ),
        .I2(c1_stop_valid),
        .I3(Maximum2),
        .I4(c1_no_overflow),
        .I5(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[11] ),
        .O(p_1_in[4]));
  LUT6 #(
    .INIT(64'hF888888808888888)) 
    \Gen_Access_Counter.Maximum[12]_i_1 
       (.I0(\Gen_Access_Counter.Minimum_reg[0]_0 [3]),
        .I1(\Gen_Access_Counter.Maximum[0]_i_3_n_0 ),
        .I2(c1_stop_valid),
        .I3(Maximum2),
        .I4(c1_no_overflow),
        .I5(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[12] ),
        .O(p_1_in[3]));
  LUT6 #(
    .INIT(64'hF888888808888888)) 
    \Gen_Access_Counter.Maximum[13]_i_1 
       (.I0(\Gen_Access_Counter.Minimum_reg[0]_0 [2]),
        .I1(\Gen_Access_Counter.Maximum[0]_i_3_n_0 ),
        .I2(c1_stop_valid),
        .I3(Maximum2),
        .I4(c1_no_overflow),
        .I5(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[13] ),
        .O(p_1_in[2]));
  LUT6 #(
    .INIT(64'hF888888808888888)) 
    \Gen_Access_Counter.Maximum[14]_i_1 
       (.I0(\Gen_Access_Counter.Minimum_reg[0]_0 [1]),
        .I1(\Gen_Access_Counter.Maximum[0]_i_3_n_0 ),
        .I2(c1_stop_valid),
        .I3(Maximum2),
        .I4(c1_no_overflow),
        .I5(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[14] ),
        .O(p_1_in[1]));
  LUT6 #(
    .INIT(64'hF888888808888888)) 
    \Gen_Access_Counter.Maximum[15]_i_1 
       (.I0(\Gen_Access_Counter.Minimum_reg[0]_0 [0]),
        .I1(\Gen_Access_Counter.Maximum[0]_i_3_n_0 ),
        .I2(c1_stop_valid),
        .I3(Maximum2),
        .I4(c1_no_overflow),
        .I5(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[15] ),
        .O(p_1_in[0]));
  LUT6 #(
    .INIT(64'hF888888808888888)) 
    \Gen_Access_Counter.Maximum[1]_i_1 
       (.I0(\Gen_Access_Counter.Minimum_reg[0]_0 [14]),
        .I1(\Gen_Access_Counter.Maximum[0]_i_3_n_0 ),
        .I2(c1_stop_valid),
        .I3(Maximum2),
        .I4(c1_no_overflow),
        .I5(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[1] ),
        .O(p_1_in[14]));
  LUT6 #(
    .INIT(64'hF888888808888888)) 
    \Gen_Access_Counter.Maximum[2]_i_1 
       (.I0(\Gen_Access_Counter.Minimum_reg[0]_0 [13]),
        .I1(\Gen_Access_Counter.Maximum[0]_i_3_n_0 ),
        .I2(c1_stop_valid),
        .I3(Maximum2),
        .I4(c1_no_overflow),
        .I5(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[2] ),
        .O(p_1_in[13]));
  LUT6 #(
    .INIT(64'hF888888808888888)) 
    \Gen_Access_Counter.Maximum[3]_i_1 
       (.I0(\Gen_Access_Counter.Minimum_reg[0]_0 [12]),
        .I1(\Gen_Access_Counter.Maximum[0]_i_3_n_0 ),
        .I2(c1_stop_valid),
        .I3(Maximum2),
        .I4(c1_no_overflow),
        .I5(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[3] ),
        .O(p_1_in[12]));
  LUT6 #(
    .INIT(64'hF888888808888888)) 
    \Gen_Access_Counter.Maximum[4]_i_1 
       (.I0(\Gen_Access_Counter.Minimum_reg[0]_0 [11]),
        .I1(\Gen_Access_Counter.Maximum[0]_i_3_n_0 ),
        .I2(c1_stop_valid),
        .I3(Maximum2),
        .I4(c1_no_overflow),
        .I5(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[4] ),
        .O(p_1_in[11]));
  LUT6 #(
    .INIT(64'hF888888808888888)) 
    \Gen_Access_Counter.Maximum[5]_i_1 
       (.I0(\Gen_Access_Counter.Minimum_reg[0]_0 [10]),
        .I1(\Gen_Access_Counter.Maximum[0]_i_3_n_0 ),
        .I2(c1_stop_valid),
        .I3(Maximum2),
        .I4(c1_no_overflow),
        .I5(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[5] ),
        .O(p_1_in[10]));
  LUT6 #(
    .INIT(64'hF888888808888888)) 
    \Gen_Access_Counter.Maximum[6]_i_1 
       (.I0(\Gen_Access_Counter.Minimum_reg[0]_0 [9]),
        .I1(\Gen_Access_Counter.Maximum[0]_i_3_n_0 ),
        .I2(c1_stop_valid),
        .I3(Maximum2),
        .I4(c1_no_overflow),
        .I5(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[6] ),
        .O(p_1_in[9]));
  LUT6 #(
    .INIT(64'hF888888808888888)) 
    \Gen_Access_Counter.Maximum[7]_i_1 
       (.I0(\Gen_Access_Counter.Minimum_reg[0]_0 [8]),
        .I1(\Gen_Access_Counter.Maximum[0]_i_3_n_0 ),
        .I2(c1_stop_valid),
        .I3(Maximum2),
        .I4(c1_no_overflow),
        .I5(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[7] ),
        .O(p_1_in[8]));
  LUT6 #(
    .INIT(64'hF888888808888888)) 
    \Gen_Access_Counter.Maximum[8]_i_1 
       (.I0(\Gen_Access_Counter.Minimum_reg[0]_0 [7]),
        .I1(\Gen_Access_Counter.Maximum[0]_i_3_n_0 ),
        .I2(c1_stop_valid),
        .I3(Maximum2),
        .I4(c1_no_overflow),
        .I5(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[8] ),
        .O(p_1_in[7]));
  LUT6 #(
    .INIT(64'hF888888808888888)) 
    \Gen_Access_Counter.Maximum[9]_i_1 
       (.I0(\Gen_Access_Counter.Minimum_reg[0]_0 [6]),
        .I1(\Gen_Access_Counter.Maximum[0]_i_3_n_0 ),
        .I2(c1_stop_valid),
        .I3(Maximum2),
        .I4(c1_no_overflow),
        .I5(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[9] ),
        .O(p_1_in[6]));
  FDRE \Gen_Access_Counter.Maximum_reg[0] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Maximum[0]_i_1_n_0 ),
        .D(p_1_in[15]),
        .Q(D[15]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Maximum_reg[10] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Maximum[0]_i_1_n_0 ),
        .D(p_1_in[5]),
        .Q(D[5]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Maximum_reg[11] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Maximum[0]_i_1_n_0 ),
        .D(p_1_in[4]),
        .Q(D[4]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Maximum_reg[12] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Maximum[0]_i_1_n_0 ),
        .D(p_1_in[3]),
        .Q(D[3]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Maximum_reg[13] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Maximum[0]_i_1_n_0 ),
        .D(p_1_in[2]),
        .Q(D[2]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Maximum_reg[14] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Maximum[0]_i_1_n_0 ),
        .D(p_1_in[1]),
        .Q(D[1]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Maximum_reg[15] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Maximum[0]_i_1_n_0 ),
        .D(p_1_in[0]),
        .Q(D[0]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Maximum_reg[1] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Maximum[0]_i_1_n_0 ),
        .D(p_1_in[14]),
        .Q(D[14]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Maximum_reg[2] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Maximum[0]_i_1_n_0 ),
        .D(p_1_in[13]),
        .Q(D[13]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Maximum_reg[3] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Maximum[0]_i_1_n_0 ),
        .D(p_1_in[12]),
        .Q(D[12]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Maximum_reg[4] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Maximum[0]_i_1_n_0 ),
        .D(p_1_in[11]),
        .Q(D[11]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Maximum_reg[5] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Maximum[0]_i_1_n_0 ),
        .D(p_1_in[10]),
        .Q(D[10]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Maximum_reg[6] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Maximum[0]_i_1_n_0 ),
        .D(p_1_in[9]),
        .Q(D[9]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Maximum_reg[7] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Maximum[0]_i_1_n_0 ),
        .D(p_1_in[8]),
        .Q(D[8]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Maximum_reg[8] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Maximum[0]_i_1_n_0 ),
        .D(p_1_in[7]),
        .Q(D[7]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Maximum_reg[9] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Maximum[0]_i_1_n_0 ),
        .D(p_1_in[6]),
        .Q(D[6]),
        .R(sync_reset));
  LUT4 #(
    .INIT(16'hFEEE)) 
    \Gen_Access_Counter.Minimum[0]_i_1 
       (.I0(\Gen_Access_Counter.Maximum[0]_i_3_n_0 ),
        .I1(clear_cmd),
        .I2(Minimum1),
        .I3(c1_stop_valid),
        .O(\Gen_Access_Counter.Minimum[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFD8D8D800D8D8D8)) 
    \Gen_Access_Counter.Minimum[0]_i_2 
       (.I0(\Gen_Access_Counter.Maximum[0]_i_3_n_0 ),
        .I1(\Gen_Access_Counter.Minimum_reg[0]_0 [31]),
        .I2(clear_cmd),
        .I3(c1_stop_valid),
        .I4(Minimum1),
        .I5(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[0] ),
        .O(\Gen_Access_Counter.Minimum[0]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFD8D8D800D8D8D8)) 
    \Gen_Access_Counter.Minimum[10]_i_1 
       (.I0(\Gen_Access_Counter.Maximum[0]_i_3_n_0 ),
        .I1(\Gen_Access_Counter.Minimum_reg[0]_0 [21]),
        .I2(clear_cmd),
        .I3(c1_stop_valid),
        .I4(Minimum1),
        .I5(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[10] ),
        .O(\Gen_Access_Counter.Minimum[10]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFD8D8D800D8D8D8)) 
    \Gen_Access_Counter.Minimum[11]_i_1 
       (.I0(\Gen_Access_Counter.Maximum[0]_i_3_n_0 ),
        .I1(\Gen_Access_Counter.Minimum_reg[0]_0 [20]),
        .I2(clear_cmd),
        .I3(c1_stop_valid),
        .I4(Minimum1),
        .I5(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[11] ),
        .O(\Gen_Access_Counter.Minimum[11]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFD8D8D800D8D8D8)) 
    \Gen_Access_Counter.Minimum[12]_i_1 
       (.I0(\Gen_Access_Counter.Maximum[0]_i_3_n_0 ),
        .I1(\Gen_Access_Counter.Minimum_reg[0]_0 [19]),
        .I2(clear_cmd),
        .I3(c1_stop_valid),
        .I4(Minimum1),
        .I5(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[12] ),
        .O(\Gen_Access_Counter.Minimum[12]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFD8D8D800D8D8D8)) 
    \Gen_Access_Counter.Minimum[13]_i_1 
       (.I0(\Gen_Access_Counter.Maximum[0]_i_3_n_0 ),
        .I1(\Gen_Access_Counter.Minimum_reg[0]_0 [18]),
        .I2(clear_cmd),
        .I3(c1_stop_valid),
        .I4(Minimum1),
        .I5(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[13] ),
        .O(\Gen_Access_Counter.Minimum[13]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFD8D8D800D8D8D8)) 
    \Gen_Access_Counter.Minimum[14]_i_1 
       (.I0(\Gen_Access_Counter.Maximum[0]_i_3_n_0 ),
        .I1(\Gen_Access_Counter.Minimum_reg[0]_0 [17]),
        .I2(clear_cmd),
        .I3(c1_stop_valid),
        .I4(Minimum1),
        .I5(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[14] ),
        .O(\Gen_Access_Counter.Minimum[14]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFD8D8D800D8D8D8)) 
    \Gen_Access_Counter.Minimum[15]_i_1 
       (.I0(\Gen_Access_Counter.Maximum[0]_i_3_n_0 ),
        .I1(\Gen_Access_Counter.Minimum_reg[0]_0 [16]),
        .I2(clear_cmd),
        .I3(c1_stop_valid),
        .I4(Minimum1),
        .I5(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[15] ),
        .O(\Gen_Access_Counter.Minimum[15]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFD8D8D800D8D8D8)) 
    \Gen_Access_Counter.Minimum[1]_i_1 
       (.I0(\Gen_Access_Counter.Maximum[0]_i_3_n_0 ),
        .I1(\Gen_Access_Counter.Minimum_reg[0]_0 [30]),
        .I2(clear_cmd),
        .I3(c1_stop_valid),
        .I4(Minimum1),
        .I5(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[1] ),
        .O(\Gen_Access_Counter.Minimum[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFD8D8D800D8D8D8)) 
    \Gen_Access_Counter.Minimum[2]_i_1 
       (.I0(\Gen_Access_Counter.Maximum[0]_i_3_n_0 ),
        .I1(\Gen_Access_Counter.Minimum_reg[0]_0 [29]),
        .I2(clear_cmd),
        .I3(c1_stop_valid),
        .I4(Minimum1),
        .I5(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[2] ),
        .O(\Gen_Access_Counter.Minimum[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFD8D8D800D8D8D8)) 
    \Gen_Access_Counter.Minimum[3]_i_1 
       (.I0(\Gen_Access_Counter.Maximum[0]_i_3_n_0 ),
        .I1(\Gen_Access_Counter.Minimum_reg[0]_0 [28]),
        .I2(clear_cmd),
        .I3(c1_stop_valid),
        .I4(Minimum1),
        .I5(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[3] ),
        .O(\Gen_Access_Counter.Minimum[3]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFD8D8D800D8D8D8)) 
    \Gen_Access_Counter.Minimum[4]_i_1 
       (.I0(\Gen_Access_Counter.Maximum[0]_i_3_n_0 ),
        .I1(\Gen_Access_Counter.Minimum_reg[0]_0 [27]),
        .I2(clear_cmd),
        .I3(c1_stop_valid),
        .I4(Minimum1),
        .I5(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[4] ),
        .O(\Gen_Access_Counter.Minimum[4]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFD8D8D800D8D8D8)) 
    \Gen_Access_Counter.Minimum[5]_i_1 
       (.I0(\Gen_Access_Counter.Maximum[0]_i_3_n_0 ),
        .I1(\Gen_Access_Counter.Minimum_reg[0]_0 [26]),
        .I2(clear_cmd),
        .I3(c1_stop_valid),
        .I4(Minimum1),
        .I5(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[5] ),
        .O(\Gen_Access_Counter.Minimum[5]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFD8D8D800D8D8D8)) 
    \Gen_Access_Counter.Minimum[6]_i_1 
       (.I0(\Gen_Access_Counter.Maximum[0]_i_3_n_0 ),
        .I1(\Gen_Access_Counter.Minimum_reg[0]_0 [25]),
        .I2(clear_cmd),
        .I3(c1_stop_valid),
        .I4(Minimum1),
        .I5(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[6] ),
        .O(\Gen_Access_Counter.Minimum[6]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFD8D8D800D8D8D8)) 
    \Gen_Access_Counter.Minimum[7]_i_1 
       (.I0(\Gen_Access_Counter.Maximum[0]_i_3_n_0 ),
        .I1(\Gen_Access_Counter.Minimum_reg[0]_0 [24]),
        .I2(clear_cmd),
        .I3(c1_stop_valid),
        .I4(Minimum1),
        .I5(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[7] ),
        .O(\Gen_Access_Counter.Minimum[7]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFD8D8D800D8D8D8)) 
    \Gen_Access_Counter.Minimum[8]_i_1 
       (.I0(\Gen_Access_Counter.Maximum[0]_i_3_n_0 ),
        .I1(\Gen_Access_Counter.Minimum_reg[0]_0 [23]),
        .I2(clear_cmd),
        .I3(c1_stop_valid),
        .I4(Minimum1),
        .I5(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[8] ),
        .O(\Gen_Access_Counter.Minimum[8]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFD8D8D800D8D8D8)) 
    \Gen_Access_Counter.Minimum[9]_i_1 
       (.I0(\Gen_Access_Counter.Maximum[0]_i_3_n_0 ),
        .I1(\Gen_Access_Counter.Minimum_reg[0]_0 [22]),
        .I2(clear_cmd),
        .I3(c1_stop_valid),
        .I4(Minimum1),
        .I5(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[9] ),
        .O(\Gen_Access_Counter.Minimum[9]_i_1_n_0 ));
  FDSE \Gen_Access_Counter.Minimum_reg[0] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Minimum[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Minimum[0]_i_2_n_0 ),
        .Q(D[31]),
        .S(sync_reset));
  FDSE \Gen_Access_Counter.Minimum_reg[10] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Minimum[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Minimum[10]_i_1_n_0 ),
        .Q(D[21]),
        .S(sync_reset));
  FDSE \Gen_Access_Counter.Minimum_reg[11] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Minimum[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Minimum[11]_i_1_n_0 ),
        .Q(D[20]),
        .S(sync_reset));
  FDSE \Gen_Access_Counter.Minimum_reg[12] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Minimum[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Minimum[12]_i_1_n_0 ),
        .Q(D[19]),
        .S(sync_reset));
  FDSE \Gen_Access_Counter.Minimum_reg[13] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Minimum[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Minimum[13]_i_1_n_0 ),
        .Q(D[18]),
        .S(sync_reset));
  FDSE \Gen_Access_Counter.Minimum_reg[14] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Minimum[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Minimum[14]_i_1_n_0 ),
        .Q(D[17]),
        .S(sync_reset));
  FDSE \Gen_Access_Counter.Minimum_reg[15] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Minimum[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Minimum[15]_i_1_n_0 ),
        .Q(D[16]),
        .S(sync_reset));
  FDSE \Gen_Access_Counter.Minimum_reg[1] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Minimum[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Minimum[1]_i_1_n_0 ),
        .Q(D[30]),
        .S(sync_reset));
  FDSE \Gen_Access_Counter.Minimum_reg[2] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Minimum[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Minimum[2]_i_1_n_0 ),
        .Q(D[29]),
        .S(sync_reset));
  FDSE \Gen_Access_Counter.Minimum_reg[3] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Minimum[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Minimum[3]_i_1_n_0 ),
        .Q(D[28]),
        .S(sync_reset));
  FDSE \Gen_Access_Counter.Minimum_reg[4] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Minimum[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Minimum[4]_i_1_n_0 ),
        .Q(D[27]),
        .S(sync_reset));
  FDSE \Gen_Access_Counter.Minimum_reg[5] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Minimum[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Minimum[5]_i_1_n_0 ),
        .Q(D[26]),
        .S(sync_reset));
  FDSE \Gen_Access_Counter.Minimum_reg[6] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Minimum[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Minimum[6]_i_1_n_0 ),
        .Q(D[25]),
        .S(sync_reset));
  FDSE \Gen_Access_Counter.Minimum_reg[7] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Minimum[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Minimum[7]_i_1_n_0 ),
        .Q(D[24]),
        .S(sync_reset));
  FDSE \Gen_Access_Counter.Minimum_reg[8] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Minimum[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Minimum[8]_i_1_n_0 ),
        .Q(D[23]),
        .S(sync_reset));
  FDSE \Gen_Access_Counter.Minimum_reg[9] 
       (.C(Clk),
        .CE(\Gen_Access_Counter.Minimum[0]_i_1_n_0 ),
        .D(\Gen_Access_Counter.Minimum[9]_i_1_n_0 ),
        .Q(D[22]),
        .S(sync_reset));
  LUT6 #(
    .INIT(64'hFFFF00F1FFFF0000)) 
    \Gen_Access_Counter.Overflow_i_1 
       (.I0(\Gen_Access_Counter.Overflow_reg_0 [1]),
        .I1(\Gen_Access_Counter.Overflow_reg_0 [0]),
        .I2(\Gen_Access_Counter.Overflow_i_2_n_0 ),
        .I3(\Gen_Access_Counter.Overflow_i_3_n_0 ),
        .I4(\Gen_Access_Counter.Overflow_i_4_n_0 ),
        .I5(Full_reg_0[0]),
        .O(\Gen_Access_Counter.Overflow_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair77" *) 
  LUT3 #(
    .INIT(8'hDF)) 
    \Gen_Access_Counter.Overflow_i_2 
       (.I0(E),
        .I1(\Gen_Access_Counter.Overflow_reg_0 [3]),
        .I2(\Gen_Access_Counter.Overflow_reg_0 [2]),
        .O(\Gen_Access_Counter.Overflow_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAEAAAAAAAA)) 
    \Gen_Access_Counter.Overflow_i_3 
       (.I0(clear_cmd),
        .I1(\Gen_Access_Counter.Overflow_reg_0 [3]),
        .I2(\Gen_Access_Counter.Overflow_reg_0 [2]),
        .I3(\Gen_Access_Counter.Overflow_reg_0 [1]),
        .I4(\Gen_Access_Counter.Overflow_reg_0 [0]),
        .I5(E),
        .O(\Gen_Access_Counter.Overflow_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \Gen_Access_Counter.Overflow_i_4 
       (.I0(\Running_reg[0]_0 ),
        .I1(\Gen_Access_Counter.Count[0][15]_i_4_n_0 ),
        .O(\Gen_Access_Counter.Overflow_i_4_n_0 ));
  FDRE \Gen_Access_Counter.Overflow_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Gen_Access_Counter.Overflow_i_1_n_0 ),
        .Q(Full_reg_0[0]),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.Using_DSP48_Architectures.No_MUL64.c1_mul32_result_reg[15] 
       (.C(Clk),
        .CE(1'b1),
        .D(c0_bd_p[31]),
        .Q(c1_mul32_result[15]),
        .R(1'b0));
  FDRE \Gen_Access_Counter.Using_DSP48_Architectures.No_MUL64.c1_mul32_result_reg[16] 
       (.C(Clk),
        .CE(1'b1),
        .D(c0_bd_p[32]),
        .Q(c1_mul32_result[16]),
        .R(1'b0));
  FDRE \Gen_Access_Counter.Using_DSP48_Architectures.No_MUL64.c1_mul32_result_reg[17] 
       (.C(Clk),
        .CE(1'b1),
        .D(c0_bd_p[33]),
        .Q(c1_mul32_result[17]),
        .R(1'b0));
  FDRE \Gen_Access_Counter.Using_DSP48_Architectures.No_MUL64.c1_mul32_result_reg[18] 
       (.C(Clk),
        .CE(1'b1),
        .D(c0_bd_p[34]),
        .Q(c1_mul32_result[18]),
        .R(1'b0));
  FDRE \Gen_Access_Counter.Using_DSP48_Architectures.No_MUL64.c1_mul32_result_reg[19] 
       (.C(Clk),
        .CE(1'b1),
        .D(c0_bd_p[35]),
        .Q(c1_mul32_result[19]),
        .R(1'b0));
  FDRE \Gen_Access_Counter.Using_DSP48_Architectures.No_MUL64.c1_mul32_result_reg[20] 
       (.C(Clk),
        .CE(1'b1),
        .D(c0_bd_p[36]),
        .Q(c1_mul32_result[20]),
        .R(1'b0));
  FDRE \Gen_Access_Counter.Using_DSP48_Architectures.No_MUL64.c1_mul32_result_reg[21] 
       (.C(Clk),
        .CE(1'b1),
        .D(c0_bd_p[37]),
        .Q(c1_mul32_result[21]),
        .R(1'b0));
  FDRE \Gen_Access_Counter.Using_DSP48_Architectures.No_MUL64.c1_mul32_result_reg[22] 
       (.C(Clk),
        .CE(1'b1),
        .D(c0_bd_p[38]),
        .Q(c1_mul32_result[22]),
        .R(1'b0));
  FDRE \Gen_Access_Counter.Using_DSP48_Architectures.No_MUL64.c1_mul32_result_reg[23] 
       (.C(Clk),
        .CE(1'b1),
        .D(c0_bd_p[39]),
        .Q(c1_mul32_result[23]),
        .R(1'b0));
  FDRE \Gen_Access_Counter.Using_DSP48_Architectures.No_MUL64.c1_mul32_result_reg[24] 
       (.C(Clk),
        .CE(1'b1),
        .D(c0_bd_p[40]),
        .Q(c1_mul32_result[24]),
        .R(1'b0));
  FDRE \Gen_Access_Counter.Using_DSP48_Architectures.No_MUL64.c1_mul32_result_reg[25] 
       (.C(Clk),
        .CE(1'b1),
        .D(c0_bd_p[41]),
        .Q(c1_mul32_result[25]),
        .R(1'b0));
  FDRE \Gen_Access_Counter.Using_DSP48_Architectures.No_MUL64.c1_mul32_result_reg[26] 
       (.C(Clk),
        .CE(1'b1),
        .D(c0_bd_p[42]),
        .Q(c1_mul32_result[26]),
        .R(1'b0));
  FDRE \Gen_Access_Counter.Using_DSP48_Architectures.No_MUL64.c1_mul32_result_reg[27] 
       (.C(Clk),
        .CE(1'b1),
        .D(c0_bd_p[43]),
        .Q(c1_mul32_result[27]),
        .R(1'b0));
  FDRE \Gen_Access_Counter.Using_DSP48_Architectures.No_MUL64.c1_mul32_result_reg[28] 
       (.C(Clk),
        .CE(1'b1),
        .D(c0_bd_p[44]),
        .Q(c1_mul32_result[28]),
        .R(1'b0));
  FDRE \Gen_Access_Counter.Using_DSP48_Architectures.No_MUL64.c1_mul32_result_reg[29] 
       (.C(Clk),
        .CE(1'b1),
        .D(c0_bd_p[45]),
        .Q(c1_mul32_result[29]),
        .R(1'b0));
  FDRE \Gen_Access_Counter.Using_DSP48_Architectures.No_MUL64.c1_mul32_result_reg[30] 
       (.C(Clk),
        .CE(1'b1),
        .D(c0_bd_p[46]),
        .Q(c1_mul32_result[30]),
        .R(1'b0));
  FDRE \Gen_Access_Counter.Using_DSP48_Architectures.No_MUL64.c1_mul32_result_reg[31] 
       (.C(Clk),
        .CE(1'b1),
        .D(c0_bd_p[47]),
        .Q(c1_mul32_result[31]),
        .R(1'b0));
  block_design_microblaze_0_0_dsp_module__parameterized5 \Gen_Access_Counter.Using_DSP48_Architectures.No_MUL64.dsp_module_I2 
       (.Clk(Clk),
        .D({\Gen_Access_Counter.Count_reg[0]_30 [0],\Gen_Access_Counter.Count_reg[0]_30 [1],\Gen_Access_Counter.Count_reg[0]_30 [2],\Gen_Access_Counter.Count_reg[0]_30 [3],\Gen_Access_Counter.Count_reg[0]_30 [4],\Gen_Access_Counter.Count_reg[0]_30 [5],\Gen_Access_Counter.Count_reg[0]_30 [6],\Gen_Access_Counter.Count_reg[0]_30 [7],\Gen_Access_Counter.Count_reg[0]_30 [8],\Gen_Access_Counter.Count_reg[0]_30 [9],\Gen_Access_Counter.Count_reg[0]_30 [10],\Gen_Access_Counter.Count_reg[0]_30 [11],\Gen_Access_Counter.Count_reg[0]_30 [12],\Gen_Access_Counter.Count_reg[0]_30 [13],\Gen_Access_Counter.Count_reg[0]_30 [14],\Gen_Access_Counter.Count_reg[0]_30 [15]}),
        .PCOUT({c1_ad_pout[0],c1_ad_pout[1],c1_ad_pout[2],c1_ad_pout[3],c1_ad_pout[4],c1_ad_pout[5],c1_ad_pout[6],c1_ad_pout[7],c1_ad_pout[8],c1_ad_pout[9],c1_ad_pout[10],c1_ad_pout[11],c1_ad_pout[12],c1_ad_pout[13],c1_ad_pout[14],c1_ad_pout[15],c1_ad_pout[16],c1_ad_pout[17],c1_ad_pout[18],c1_ad_pout[19],c1_ad_pout[20],c1_ad_pout[21],c1_ad_pout[22],c1_ad_pout[23],c1_ad_pout[24],c1_ad_pout[25],c1_ad_pout[26],c1_ad_pout[27],c1_ad_pout[28],c1_ad_pout[29],c1_ad_pout[30],c1_ad_pout[31],c1_ad_pout[32],c1_ad_pout[33],c1_ad_pout[34],c1_ad_pout[35],c1_ad_pout[36],c1_ad_pout[37],c1_ad_pout[38],c1_ad_pout[39],c1_ad_pout[40],c1_ad_pout[41],c1_ad_pout[42],c1_ad_pout[43],c1_ad_pout[44],c1_ad_pout[45],c1_ad_pout[46],c1_ad_pout[47]}),
        .\Using_FPGA.DSP48E1_I1 ({c0_bd_pout[0],c0_bd_pout[1],c0_bd_pout[2],c0_bd_pout[3],c0_bd_pout[4],c0_bd_pout[5],c0_bd_pout[6],c0_bd_pout[7],c0_bd_pout[8],c0_bd_pout[9],c0_bd_pout[10],c0_bd_pout[11],c0_bd_pout[12],c0_bd_pout[13],c0_bd_pout[14],c0_bd_pout[15],c0_bd_pout[16],c0_bd_pout[17],c0_bd_pout[18],c0_bd_pout[19],c0_bd_pout[20],c0_bd_pout[21],c0_bd_pout[22],c0_bd_pout[23],c0_bd_pout[24],c0_bd_pout[25],c0_bd_pout[26],c0_bd_pout[27],c0_bd_pout[28],c0_bd_pout[29],c0_bd_pout[30],c0_bd_pout[31],c0_bd_pout[32],c0_bd_pout[33],c0_bd_pout[34],c0_bd_pout[35],c0_bd_pout[36],c0_bd_pout[37],c0_bd_pout[38],c0_bd_pout[39],c0_bd_pout[40],c0_bd_pout[41],c0_bd_pout[42],c0_bd_pout[43],c0_bd_pout[44],c0_bd_pout[45],c0_bd_pout[46],c0_bd_pout[47]}));
  block_design_microblaze_0_0_dsp_module__parameterized8 \Gen_Access_Counter.Using_DSP48_Architectures.No_MUL64.dsp_module_I3 
       (.CO(\Gen_Access_Counter.Cycle_Count_2_i_reg[16]_i_1_n_0 ),
        .Clk(Clk),
        .D({\Gen_Access_Counter.Count_reg[0]_30 [0],\Gen_Access_Counter.Count_reg[0]_30 [1],\Gen_Access_Counter.Count_reg[0]_30 [2],\Gen_Access_Counter.Count_reg[0]_30 [3],\Gen_Access_Counter.Count_reg[0]_30 [4],\Gen_Access_Counter.Count_reg[0]_30 [5],\Gen_Access_Counter.Count_reg[0]_30 [6],\Gen_Access_Counter.Count_reg[0]_30 [7],\Gen_Access_Counter.Count_reg[0]_30 [8],\Gen_Access_Counter.Count_reg[0]_30 [9],\Gen_Access_Counter.Count_reg[0]_30 [10],\Gen_Access_Counter.Count_reg[0]_30 [11],\Gen_Access_Counter.Count_reg[0]_30 [12],\Gen_Access_Counter.Count_reg[0]_30 [13],\Gen_Access_Counter.Count_reg[0]_30 [14],\Gen_Access_Counter.Count_reg[0]_30 [15]}),
        .DI(\Gen_Access_Counter.Cycle_Count_2_i[12]_i_5_n_0 ),
        .\Gen_Access_Counter.Cycle_Count_2_i_reg[0] (\Gen_Access_Counter.Cycle_Count_2_i[0]_i_3_n_0 ),
        .\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 (\Gen_Access_Counter.Minimum_reg[0]_0 [31:17]),
        .\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_1 (\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 [31:17]),
        .PCOUT({c1_ad_pout[0],c1_ad_pout[1],c1_ad_pout[2],c1_ad_pout[3],c1_ad_pout[4],c1_ad_pout[5],c1_ad_pout[6],c1_ad_pout[7],c1_ad_pout[8],c1_ad_pout[9],c1_ad_pout[10],c1_ad_pout[11],c1_ad_pout[12],c1_ad_pout[13],c1_ad_pout[14],c1_ad_pout[15],c1_ad_pout[16],c1_ad_pout[17],c1_ad_pout[18],c1_ad_pout[19],c1_ad_pout[20],c1_ad_pout[21],c1_ad_pout[22],c1_ad_pout[23],c1_ad_pout[24],c1_ad_pout[25],c1_ad_pout[26],c1_ad_pout[27],c1_ad_pout[28],c1_ad_pout[29],c1_ad_pout[30],c1_ad_pout[31],c1_ad_pout[32],c1_ad_pout[33],c1_ad_pout[34],c1_ad_pout[35],c1_ad_pout[36],c1_ad_pout[37],c1_ad_pout[38],c1_ad_pout[39],c1_ad_pout[40],c1_ad_pout[41],c1_ad_pout[42],c1_ad_pout[43],c1_ad_pout[44],c1_ad_pout[45],c1_ad_pout[46],c1_ad_pout[47]}),
        .S(\Gen_Access_Counter.Cycle_Count_2_i[12]_i_9_n_0 ),
        .\Using_FPGA.DSP48E1_I1 ({\Gen_Access_Counter.Using_DSP48_Architectures.No_MUL64.dsp_module_I3_n_0 ,\Gen_Access_Counter.Using_DSP48_Architectures.No_MUL64.dsp_module_I3_n_1 ,\Gen_Access_Counter.Using_DSP48_Architectures.No_MUL64.dsp_module_I3_n_2 ,\Gen_Access_Counter.Using_DSP48_Architectures.No_MUL64.dsp_module_I3_n_3 ,\Gen_Access_Counter.Using_DSP48_Architectures.No_MUL64.dsp_module_I3_n_4 ,\Gen_Access_Counter.Using_DSP48_Architectures.No_MUL64.dsp_module_I3_n_5 ,\Gen_Access_Counter.Using_DSP48_Architectures.No_MUL64.dsp_module_I3_n_6 ,\Gen_Access_Counter.Using_DSP48_Architectures.No_MUL64.dsp_module_I3_n_7 ,\Gen_Access_Counter.Using_DSP48_Architectures.No_MUL64.dsp_module_I3_n_8 ,\Gen_Access_Counter.Using_DSP48_Architectures.No_MUL64.dsp_module_I3_n_9 ,\Gen_Access_Counter.Using_DSP48_Architectures.No_MUL64.dsp_module_I3_n_10 ,\Gen_Access_Counter.Using_DSP48_Architectures.No_MUL64.dsp_module_I3_n_11 ,\Gen_Access_Counter.Using_DSP48_Architectures.No_MUL64.dsp_module_I3_n_12 ,\Gen_Access_Counter.Using_DSP48_Architectures.No_MUL64.dsp_module_I3_n_13 ,\Gen_Access_Counter.Using_DSP48_Architectures.No_MUL64.dsp_module_I3_n_14 ,\Gen_Access_Counter.Using_DSP48_Architectures.No_MUL64.dsp_module_I3_n_15 }),
        .c1_stop_valid(c1_stop_valid));
  block_design_microblaze_0_0_dsp_module \Gen_Access_Counter.Using_DSP48_Architectures.dsp_module_I1 
       (.Clk(Clk),
        .D({c0_bd_p[31],c0_bd_p[32],c0_bd_p[33],c0_bd_p[34],c0_bd_p[35],c0_bd_p[36],c0_bd_p[37],c0_bd_p[38],c0_bd_p[39],c0_bd_p[40],c0_bd_p[41],c0_bd_p[42],c0_bd_p[43],c0_bd_p[44],c0_bd_p[45],c0_bd_p[46],c0_bd_p[47]}),
        .\Using_FPGA.DSP48E1_I1 ({c0_bd_pout[0],c0_bd_pout[1],c0_bd_pout[2],c0_bd_pout[3],c0_bd_pout[4],c0_bd_pout[5],c0_bd_pout[6],c0_bd_pout[7],c0_bd_pout[8],c0_bd_pout[9],c0_bd_pout[10],c0_bd_pout[11],c0_bd_pout[12],c0_bd_pout[13],c0_bd_pout[14],c0_bd_pout[15],c0_bd_pout[16],c0_bd_pout[17],c0_bd_pout[18],c0_bd_pout[19],c0_bd_pout[20],c0_bd_pout[21],c0_bd_pout[22],c0_bd_pout[23],c0_bd_pout[24],c0_bd_pout[25],c0_bd_pout[26],c0_bd_pout[27],c0_bd_pout[28],c0_bd_pout[29],c0_bd_pout[30],c0_bd_pout[31],c0_bd_pout[32],c0_bd_pout[33],c0_bd_pout[34],c0_bd_pout[35],c0_bd_pout[36],c0_bd_pout[37],c0_bd_pout[38],c0_bd_pout[39],c0_bd_pout[40],c0_bd_pout[41],c0_bd_pout[42],c0_bd_pout[43],c0_bd_pout[44],c0_bd_pout[45],c0_bd_pout[46],c0_bd_pout[47]}),
        .\Using_FPGA.DSP48E1_I1_0 ({\Gen_Access_Counter.Count_reg[0]_30 [0],\Gen_Access_Counter.Count_reg[0]_30 [1],\Gen_Access_Counter.Count_reg[0]_30 [2],\Gen_Access_Counter.Count_reg[0]_30 [3],\Gen_Access_Counter.Count_reg[0]_30 [4],\Gen_Access_Counter.Count_reg[0]_30 [5],\Gen_Access_Counter.Count_reg[0]_30 [6],\Gen_Access_Counter.Count_reg[0]_30 [7],\Gen_Access_Counter.Count_reg[0]_30 [8],\Gen_Access_Counter.Count_reg[0]_30 [9],\Gen_Access_Counter.Count_reg[0]_30 [10],\Gen_Access_Counter.Count_reg[0]_30 [11],\Gen_Access_Counter.Count_reg[0]_30 [12],\Gen_Access_Counter.Count_reg[0]_30 [13],\Gen_Access_Counter.Count_reg[0]_30 [14],\Gen_Access_Counter.Count_reg[0]_30 [15]}));
  FDRE \Gen_Access_Counter.c0_Count_Stop_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Gen_Access_Counter.Count_reg[0]_30 [0]),
        .Q(c0_Count_Stop[0]),
        .R(1'b0));
  FDRE \Gen_Access_Counter.c0_Count_Stop_reg[10] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Gen_Access_Counter.Count_reg[0]_30 [10]),
        .Q(c0_Count_Stop[10]),
        .R(1'b0));
  FDRE \Gen_Access_Counter.c0_Count_Stop_reg[11] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Gen_Access_Counter.Count_reg[0]_30 [11]),
        .Q(c0_Count_Stop[11]),
        .R(1'b0));
  FDRE \Gen_Access_Counter.c0_Count_Stop_reg[12] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Gen_Access_Counter.Count_reg[0]_30 [12]),
        .Q(c0_Count_Stop[12]),
        .R(1'b0));
  FDRE \Gen_Access_Counter.c0_Count_Stop_reg[13] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Gen_Access_Counter.Count_reg[0]_30 [13]),
        .Q(c0_Count_Stop[13]),
        .R(1'b0));
  FDRE \Gen_Access_Counter.c0_Count_Stop_reg[14] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Gen_Access_Counter.Count_reg[0]_30 [14]),
        .Q(c0_Count_Stop[14]),
        .R(1'b0));
  FDRE \Gen_Access_Counter.c0_Count_Stop_reg[15] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Gen_Access_Counter.Count_reg[0]_30 [15]),
        .Q(c0_Count_Stop[15]),
        .R(1'b0));
  FDRE \Gen_Access_Counter.c0_Count_Stop_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Gen_Access_Counter.Count_reg[0]_30 [1]),
        .Q(c0_Count_Stop[1]),
        .R(1'b0));
  FDRE \Gen_Access_Counter.c0_Count_Stop_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Gen_Access_Counter.Count_reg[0]_30 [2]),
        .Q(c0_Count_Stop[2]),
        .R(1'b0));
  FDRE \Gen_Access_Counter.c0_Count_Stop_reg[3] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Gen_Access_Counter.Count_reg[0]_30 [3]),
        .Q(c0_Count_Stop[3]),
        .R(1'b0));
  FDRE \Gen_Access_Counter.c0_Count_Stop_reg[4] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Gen_Access_Counter.Count_reg[0]_30 [4]),
        .Q(c0_Count_Stop[4]),
        .R(1'b0));
  FDRE \Gen_Access_Counter.c0_Count_Stop_reg[5] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Gen_Access_Counter.Count_reg[0]_30 [5]),
        .Q(c0_Count_Stop[5]),
        .R(1'b0));
  FDRE \Gen_Access_Counter.c0_Count_Stop_reg[6] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Gen_Access_Counter.Count_reg[0]_30 [6]),
        .Q(c0_Count_Stop[6]),
        .R(1'b0));
  FDRE \Gen_Access_Counter.c0_Count_Stop_reg[7] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Gen_Access_Counter.Count_reg[0]_30 [7]),
        .Q(c0_Count_Stop[7]),
        .R(1'b0));
  FDRE \Gen_Access_Counter.c0_Count_Stop_reg[8] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Gen_Access_Counter.Count_reg[0]_30 [8]),
        .Q(c0_Count_Stop[8]),
        .R(1'b0));
  FDRE \Gen_Access_Counter.c0_Count_Stop_reg[9] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Gen_Access_Counter.Count_reg[0]_30 [9]),
        .Q(c0_Count_Stop[9]),
        .R(1'b0));
  FDRE \Gen_Access_Counter.c0_no_overflow_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Gen_Access_Counter.c0_no_overflow_reg_0 ),
        .Q(\Gen_Access_Counter.c0_no_overflow_reg_n_0 ),
        .R(1'b0));
  FDRE \Gen_Access_Counter.c0_stop_valid_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Gen_Access_Counter.c0_stop_valid_reg_0 ),
        .Q(c0_stop_valid),
        .R(1'b0));
  FDRE \Gen_Access_Counter.c1_Count_Stop_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(c0_Count_Stop[0]),
        .Q(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[0] ),
        .R(1'b0));
  FDRE \Gen_Access_Counter.c1_Count_Stop_reg[10] 
       (.C(Clk),
        .CE(1'b1),
        .D(c0_Count_Stop[10]),
        .Q(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[10] ),
        .R(1'b0));
  FDRE \Gen_Access_Counter.c1_Count_Stop_reg[11] 
       (.C(Clk),
        .CE(1'b1),
        .D(c0_Count_Stop[11]),
        .Q(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[11] ),
        .R(1'b0));
  FDRE \Gen_Access_Counter.c1_Count_Stop_reg[12] 
       (.C(Clk),
        .CE(1'b1),
        .D(c0_Count_Stop[12]),
        .Q(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[12] ),
        .R(1'b0));
  FDRE \Gen_Access_Counter.c1_Count_Stop_reg[13] 
       (.C(Clk),
        .CE(1'b1),
        .D(c0_Count_Stop[13]),
        .Q(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[13] ),
        .R(1'b0));
  FDRE \Gen_Access_Counter.c1_Count_Stop_reg[14] 
       (.C(Clk),
        .CE(1'b1),
        .D(c0_Count_Stop[14]),
        .Q(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[14] ),
        .R(1'b0));
  FDRE \Gen_Access_Counter.c1_Count_Stop_reg[15] 
       (.C(Clk),
        .CE(1'b1),
        .D(c0_Count_Stop[15]),
        .Q(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[15] ),
        .R(1'b0));
  FDRE \Gen_Access_Counter.c1_Count_Stop_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(c0_Count_Stop[1]),
        .Q(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[1] ),
        .R(1'b0));
  FDRE \Gen_Access_Counter.c1_Count_Stop_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(c0_Count_Stop[2]),
        .Q(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[2] ),
        .R(1'b0));
  FDRE \Gen_Access_Counter.c1_Count_Stop_reg[3] 
       (.C(Clk),
        .CE(1'b1),
        .D(c0_Count_Stop[3]),
        .Q(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[3] ),
        .R(1'b0));
  FDRE \Gen_Access_Counter.c1_Count_Stop_reg[4] 
       (.C(Clk),
        .CE(1'b1),
        .D(c0_Count_Stop[4]),
        .Q(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[4] ),
        .R(1'b0));
  FDRE \Gen_Access_Counter.c1_Count_Stop_reg[5] 
       (.C(Clk),
        .CE(1'b1),
        .D(c0_Count_Stop[5]),
        .Q(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[5] ),
        .R(1'b0));
  FDRE \Gen_Access_Counter.c1_Count_Stop_reg[6] 
       (.C(Clk),
        .CE(1'b1),
        .D(c0_Count_Stop[6]),
        .Q(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[6] ),
        .R(1'b0));
  FDRE \Gen_Access_Counter.c1_Count_Stop_reg[7] 
       (.C(Clk),
        .CE(1'b1),
        .D(c0_Count_Stop[7]),
        .Q(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[7] ),
        .R(1'b0));
  FDRE \Gen_Access_Counter.c1_Count_Stop_reg[8] 
       (.C(Clk),
        .CE(1'b1),
        .D(c0_Count_Stop[8]),
        .Q(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[8] ),
        .R(1'b0));
  FDRE \Gen_Access_Counter.c1_Count_Stop_reg[9] 
       (.C(Clk),
        .CE(1'b1),
        .D(c0_Count_Stop[9]),
        .Q(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[9] ),
        .R(1'b0));
  FDRE \Gen_Access_Counter.c1_no_overflow_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Gen_Access_Counter.c0_no_overflow_reg_n_0 ),
        .Q(c1_no_overflow),
        .R(sync_reset));
  FDRE \Gen_Access_Counter.c1_stop_valid_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(c0_stop_valid),
        .Q(c1_stop_valid),
        .R(sync_reset));
  FDRE \Is_Valid_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Is_Valid_reg[0]_0 ),
        .Q(Is_Valid_9),
        .R(sync_reset));
  CARRY4 Maximum2_carry
       (.CI(1'b0),
        .CO({Maximum2_carry_n_0,Maximum2_carry_n_1,Maximum2_carry_n_2,Maximum2_carry_n_3}),
        .CYINIT(1'b0),
        .DI({Maximum2_carry_i_1_n_0,Maximum2_carry_i_2_n_0,Maximum2_carry_i_3_n_0,Maximum2_carry_i_4_n_0}),
        .O(NLW_Maximum2_carry_O_UNCONNECTED[3:0]),
        .S({Maximum2_carry_i_5_n_0,Maximum2_carry_i_6_n_0,Maximum2_carry_i_7_n_0,Maximum2_carry_i_8_n_0}));
  CARRY4 Maximum2_carry__0
       (.CI(Maximum2_carry_n_0),
        .CO({Maximum2,Maximum2_carry__0_n_1,Maximum2_carry__0_n_2,Maximum2_carry__0_n_3}),
        .CYINIT(1'b0),
        .DI({Maximum2_carry__0_i_1_n_0,Maximum2_carry__0_i_2_n_0,Maximum2_carry__0_i_3_n_0,Maximum2_carry__0_i_4_n_0}),
        .O(NLW_Maximum2_carry__0_O_UNCONNECTED[3:0]),
        .S({Maximum2_carry__0_i_5_n_0,Maximum2_carry__0_i_6_n_0,Maximum2_carry__0_i_7_n_0,Maximum2_carry__0_i_8_n_0}));
  LUT4 #(
    .INIT(16'h22B2)) 
    Maximum2_carry__0_i_1
       (.I0(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[0] ),
        .I1(D[15]),
        .I2(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[1] ),
        .I3(D[14]),
        .O(Maximum2_carry__0_i_1_n_0));
  LUT4 #(
    .INIT(16'h22B2)) 
    Maximum2_carry__0_i_2
       (.I0(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[2] ),
        .I1(D[13]),
        .I2(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[3] ),
        .I3(D[12]),
        .O(Maximum2_carry__0_i_2_n_0));
  LUT4 #(
    .INIT(16'h22B2)) 
    Maximum2_carry__0_i_3
       (.I0(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[4] ),
        .I1(D[11]),
        .I2(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[5] ),
        .I3(D[10]),
        .O(Maximum2_carry__0_i_3_n_0));
  LUT4 #(
    .INIT(16'h22B2)) 
    Maximum2_carry__0_i_4
       (.I0(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[6] ),
        .I1(D[9]),
        .I2(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[7] ),
        .I3(D[8]),
        .O(Maximum2_carry__0_i_4_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    Maximum2_carry__0_i_5
       (.I0(D[15]),
        .I1(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[0] ),
        .I2(D[14]),
        .I3(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[1] ),
        .O(Maximum2_carry__0_i_5_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    Maximum2_carry__0_i_6
       (.I0(D[13]),
        .I1(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[2] ),
        .I2(D[12]),
        .I3(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[3] ),
        .O(Maximum2_carry__0_i_6_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    Maximum2_carry__0_i_7
       (.I0(D[11]),
        .I1(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[4] ),
        .I2(D[10]),
        .I3(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[5] ),
        .O(Maximum2_carry__0_i_7_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    Maximum2_carry__0_i_8
       (.I0(D[9]),
        .I1(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[6] ),
        .I2(D[8]),
        .I3(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[7] ),
        .O(Maximum2_carry__0_i_8_n_0));
  LUT4 #(
    .INIT(16'h22B2)) 
    Maximum2_carry_i_1
       (.I0(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[8] ),
        .I1(D[7]),
        .I2(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[9] ),
        .I3(D[6]),
        .O(Maximum2_carry_i_1_n_0));
  LUT4 #(
    .INIT(16'h22B2)) 
    Maximum2_carry_i_2
       (.I0(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[10] ),
        .I1(D[5]),
        .I2(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[11] ),
        .I3(D[4]),
        .O(Maximum2_carry_i_2_n_0));
  LUT4 #(
    .INIT(16'h22B2)) 
    Maximum2_carry_i_3
       (.I0(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[12] ),
        .I1(D[3]),
        .I2(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[13] ),
        .I3(D[2]),
        .O(Maximum2_carry_i_3_n_0));
  LUT4 #(
    .INIT(16'h22B2)) 
    Maximum2_carry_i_4
       (.I0(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[14] ),
        .I1(D[1]),
        .I2(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[15] ),
        .I3(D[0]),
        .O(Maximum2_carry_i_4_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    Maximum2_carry_i_5
       (.I0(D[7]),
        .I1(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[8] ),
        .I2(D[6]),
        .I3(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[9] ),
        .O(Maximum2_carry_i_5_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    Maximum2_carry_i_6
       (.I0(D[5]),
        .I1(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[10] ),
        .I2(D[4]),
        .I3(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[11] ),
        .O(Maximum2_carry_i_6_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    Maximum2_carry_i_7
       (.I0(D[3]),
        .I1(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[12] ),
        .I2(D[2]),
        .I3(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[13] ),
        .O(Maximum2_carry_i_7_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    Maximum2_carry_i_8
       (.I0(D[1]),
        .I1(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[14] ),
        .I2(D[0]),
        .I3(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[15] ),
        .O(Maximum2_carry_i_8_n_0));
  CARRY4 Minimum1_carry
       (.CI(1'b0),
        .CO({Minimum1_carry_n_0,Minimum1_carry_n_1,Minimum1_carry_n_2,Minimum1_carry_n_3}),
        .CYINIT(1'b0),
        .DI({Minimum1_carry_i_1_n_0,Minimum1_carry_i_2_n_0,Minimum1_carry_i_3_n_0,Minimum1_carry_i_4_n_0}),
        .O(NLW_Minimum1_carry_O_UNCONNECTED[3:0]),
        .S({Minimum1_carry_i_5_n_0,Minimum1_carry_i_6_n_0,Minimum1_carry_i_7_n_0,Minimum1_carry_i_8_n_0}));
  CARRY4 Minimum1_carry__0
       (.CI(Minimum1_carry_n_0),
        .CO({Minimum1,Minimum1_carry__0_n_1,Minimum1_carry__0_n_2,Minimum1_carry__0_n_3}),
        .CYINIT(1'b0),
        .DI({Minimum1_carry__0_i_1_n_0,Minimum1_carry__0_i_2_n_0,Minimum1_carry__0_i_3_n_0,Minimum1_carry__0_i_4_n_0}),
        .O(NLW_Minimum1_carry__0_O_UNCONNECTED[3:0]),
        .S({Minimum1_carry__0_i_5_n_0,Minimum1_carry__0_i_6_n_0,Minimum1_carry__0_i_7_n_0,Minimum1_carry__0_i_8_n_0}));
  LUT4 #(
    .INIT(16'h44D4)) 
    Minimum1_carry__0_i_1
       (.I0(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[0] ),
        .I1(D[31]),
        .I2(D[30]),
        .I3(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[1] ),
        .O(Minimum1_carry__0_i_1_n_0));
  LUT4 #(
    .INIT(16'h44D4)) 
    Minimum1_carry__0_i_2
       (.I0(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[2] ),
        .I1(D[29]),
        .I2(D[28]),
        .I3(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[3] ),
        .O(Minimum1_carry__0_i_2_n_0));
  LUT4 #(
    .INIT(16'h44D4)) 
    Minimum1_carry__0_i_3
       (.I0(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[4] ),
        .I1(D[27]),
        .I2(D[26]),
        .I3(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[5] ),
        .O(Minimum1_carry__0_i_3_n_0));
  LUT4 #(
    .INIT(16'h44D4)) 
    Minimum1_carry__0_i_4
       (.I0(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[6] ),
        .I1(D[25]),
        .I2(D[24]),
        .I3(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[7] ),
        .O(Minimum1_carry__0_i_4_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    Minimum1_carry__0_i_5
       (.I0(D[31]),
        .I1(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[0] ),
        .I2(D[30]),
        .I3(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[1] ),
        .O(Minimum1_carry__0_i_5_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    Minimum1_carry__0_i_6
       (.I0(D[29]),
        .I1(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[2] ),
        .I2(D[28]),
        .I3(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[3] ),
        .O(Minimum1_carry__0_i_6_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    Minimum1_carry__0_i_7
       (.I0(D[27]),
        .I1(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[4] ),
        .I2(D[26]),
        .I3(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[5] ),
        .O(Minimum1_carry__0_i_7_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    Minimum1_carry__0_i_8
       (.I0(D[25]),
        .I1(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[6] ),
        .I2(D[24]),
        .I3(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[7] ),
        .O(Minimum1_carry__0_i_8_n_0));
  LUT4 #(
    .INIT(16'h44D4)) 
    Minimum1_carry_i_1
       (.I0(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[8] ),
        .I1(D[23]),
        .I2(D[22]),
        .I3(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[9] ),
        .O(Minimum1_carry_i_1_n_0));
  LUT4 #(
    .INIT(16'h44D4)) 
    Minimum1_carry_i_2
       (.I0(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[10] ),
        .I1(D[21]),
        .I2(D[20]),
        .I3(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[11] ),
        .O(Minimum1_carry_i_2_n_0));
  LUT4 #(
    .INIT(16'h44D4)) 
    Minimum1_carry_i_3
       (.I0(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[12] ),
        .I1(D[19]),
        .I2(D[18]),
        .I3(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[13] ),
        .O(Minimum1_carry_i_3_n_0));
  LUT4 #(
    .INIT(16'h44D4)) 
    Minimum1_carry_i_4
       (.I0(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[14] ),
        .I1(D[17]),
        .I2(D[16]),
        .I3(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[15] ),
        .O(Minimum1_carry_i_4_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    Minimum1_carry_i_5
       (.I0(D[23]),
        .I1(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[8] ),
        .I2(D[22]),
        .I3(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[9] ),
        .O(Minimum1_carry_i_5_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    Minimum1_carry_i_6
       (.I0(D[21]),
        .I1(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[10] ),
        .I2(D[20]),
        .I3(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[11] ),
        .O(Minimum1_carry_i_6_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    Minimum1_carry_i_7
       (.I0(D[19]),
        .I1(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[12] ),
        .I2(D[18]),
        .I3(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[13] ),
        .O(Minimum1_carry_i_7_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    Minimum1_carry_i_8
       (.I0(D[17]),
        .I1(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[14] ),
        .I2(D[16]),
        .I3(\Gen_Access_Counter.c1_Count_Stop_reg_n_0_[15] ),
        .O(Minimum1_carry_i_8_n_0));
  LUT6 #(
    .INIT(64'h0000000045444444)) 
    \Running[0]_i_1__4 
       (.I0(Stopping_reg_1),
        .I1(\Running_reg[0]_0 ),
        .I2(Stopping_reg_2),
        .I3(Stopping_reg_3),
        .I4(Empty_reg_0),
        .I5(sync_reset),
        .O(\Running[0]_i_1__4_n_0 ));
  FDRE \Running_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Running[0]_i_1__4_n_0 ),
        .Q(\Running_reg[0]_0 ),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h00000000FF080000)) 
    Stopping_i_1__4
       (.I0(Empty_reg_0),
        .I1(Stopping_reg_3),
        .I2(Stopping_reg_2),
        .I3(\Running_reg[0]_0 ),
        .I4(Stopping_reg_1),
        .I5(sync_reset),
        .O(Stopping3_out));
  FDRE Stopping_reg
       (.C(Clk),
        .CE(1'b1),
        .D(Stopping3_out),
        .Q(Stopping_reg_0),
        .R(1'b0));
  CARRY4 plusOp_carry
       (.CI(1'b0),
        .CO({plusOp_carry_n_0,plusOp_carry_n_1,plusOp_carry_n_2,plusOp_carry_n_3}),
        .CYINIT(Q[0]),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(plusOp[4:1]),
        .S(Q[4:1]));
  CARRY4 plusOp_carry__0
       (.CI(plusOp_carry_n_0),
        .CO({plusOp_carry__0_n_0,plusOp_carry__0_n_1,plusOp_carry__0_n_2,plusOp_carry__0_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(plusOp[8:5]),
        .S(Q[8:5]));
  CARRY4 plusOp_carry__1
       (.CI(plusOp_carry__0_n_0),
        .CO({plusOp_carry__1_n_0,plusOp_carry__1_n_1,plusOp_carry__1_n_2,plusOp_carry__1_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(plusOp[12:9]),
        .S(Q[12:9]));
  CARRY4 plusOp_carry__2
       (.CI(plusOp_carry__1_n_0),
        .CO({plusOp_carry__2_n_0,plusOp_carry__2_n_1,plusOp_carry__2_n_2,plusOp_carry__2_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(plusOp[16:13]),
        .S(Q[16:13]));
  CARRY4 plusOp_carry__3
       (.CI(plusOp_carry__2_n_0),
        .CO({plusOp_carry__3_n_0,plusOp_carry__3_n_1,plusOp_carry__3_n_2,plusOp_carry__3_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(plusOp[20:17]),
        .S(Q[20:17]));
  CARRY4 plusOp_carry__4
       (.CI(plusOp_carry__3_n_0),
        .CO({plusOp_carry__4_n_0,plusOp_carry__4_n_1,plusOp_carry__4_n_2,plusOp_carry__4_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(plusOp[24:21]),
        .S(Q[24:21]));
  CARRY4 plusOp_carry__5
       (.CI(plusOp_carry__4_n_0),
        .CO({plusOp_carry__5_n_0,plusOp_carry__5_n_1,plusOp_carry__5_n_2,plusOp_carry__5_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(plusOp[28:25]),
        .S(Q[28:25]));
  CARRY4 plusOp_carry__6
       (.CI(plusOp_carry__5_n_0),
        .CO({NLW_plusOp_carry__6_CO_UNCONNECTED[3:2],plusOp_carry__6_n_2,plusOp_carry__6_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({NLW_plusOp_carry__6_O_UNCONNECTED[3],plusOp[31:29]}),
        .S({1'b0,Q[31:29]}));
endmodule

module block_design_microblaze_0_0_dsp_module
   (D,
    \Using_FPGA.DSP48E1_I1 ,
    Clk,
    \Using_FPGA.DSP48E1_I1_0 );
  output [16:0]D;
  output [47:0]\Using_FPGA.DSP48E1_I1 ;
  input Clk;
  input [15:0]\Using_FPGA.DSP48E1_I1_0 ;

  wire Clk;
  wire [16:0]D;
  wire [47:0]\Using_FPGA.DSP48E1_I1 ;
  wire [15:0]\Using_FPGA.DSP48E1_I1_0 ;

  block_design_microblaze_0_0_MB_DSP48E1 \Using_DSP48E1.DSP48E1_I1 
       (.Clk(Clk),
        .D(D),
        .\Using_FPGA.DSP48E1_I1_0 (\Using_FPGA.DSP48E1_I1 ),
        .\Using_FPGA.DSP48E1_I1_1 (\Using_FPGA.DSP48E1_I1_0 ));
endmodule

(* ORIG_REF_NAME = "dsp_module" *) 
module block_design_microblaze_0_0_dsp_module_157
   (P,
    \Using_FPGA.DSP48E1_I1 ,
    Clk,
    B,
    A);
  output [16:0]P;
  output [47:0]\Using_FPGA.DSP48E1_I1 ;
  input Clk;
  input [16:0]B;
  input [16:0]A;

  wire [16:0]A;
  wire [16:0]B;
  wire Clk;
  wire [16:0]P;
  wire [47:0]\Using_FPGA.DSP48E1_I1 ;

  block_design_microblaze_0_0_MB_DSP48E1_158 \Using_DSP48E1.DSP48E1_I1 
       (.A(A),
        .B(B),
        .Clk(Clk),
        .P(P),
        .\Using_FPGA.DSP48E1_I1_0 (\Using_FPGA.DSP48E1_I1 ));
endmodule

(* ORIG_REF_NAME = "dsp_module" *) 
module block_design_microblaze_0_0_dsp_module__parameterized1
   (PCOUT,
    Clk,
    B,
    \Using_FPGA.DSP48E1_I1 ,
    \Using_FPGA.DSP48E1_I1_0 );
  output [47:0]PCOUT;
  input Clk;
  input [16:0]B;
  input [15:0]\Using_FPGA.DSP48E1_I1 ;
  input [47:0]\Using_FPGA.DSP48E1_I1_0 ;

  wire [16:0]B;
  wire Clk;
  wire [47:0]PCOUT;
  wire [15:0]\Using_FPGA.DSP48E1_I1 ;
  wire [47:0]\Using_FPGA.DSP48E1_I1_0 ;

  block_design_microblaze_0_0_MB_DSP48E1__parameterized1_160 \Using_DSP48E1.DSP48E1_I1 
       (.B(B),
        .Clk(Clk),
        .PCOUT(PCOUT),
        .\Using_FPGA.DSP48E1_I1_0 (\Using_FPGA.DSP48E1_I1 ),
        .\Using_FPGA.DSP48E1_I1_1 (\Using_FPGA.DSP48E1_I1_0 ));
endmodule

(* ORIG_REF_NAME = "dsp_module" *) 
module block_design_microblaze_0_0_dsp_module__parameterized3
   (P,
    PCOUT,
    \Using_FPGA.DSP48E1_I1 ,
    \Using_FPGA.DSP48E1_I1_0 ,
    Clk,
    B,
    A,
    \Using_FPGA.DSP48E1_I1_1 ,
    mem_mulhu_instr,
    mem_mulh_instr,
    ex_not_mul_op);
  output [14:0]P;
  output [47:0]PCOUT;
  output \Using_FPGA.DSP48E1_I1 ;
  output \Using_FPGA.DSP48E1_I1_0 ;
  input Clk;
  input [15:0]B;
  input [16:0]A;
  input [47:0]\Using_FPGA.DSP48E1_I1_1 ;
  input mem_mulhu_instr;
  input mem_mulh_instr;
  input ex_not_mul_op;

  wire [16:0]A;
  wire [15:0]B;
  wire Clk;
  wire [14:0]P;
  wire [47:0]PCOUT;
  wire \Using_FPGA.DSP48E1_I1 ;
  wire \Using_FPGA.DSP48E1_I1_0 ;
  wire [47:0]\Using_FPGA.DSP48E1_I1_1 ;
  wire ex_not_mul_op;
  wire mem_mulh_instr;
  wire mem_mulhu_instr;

  block_design_microblaze_0_0_MB_DSP48E1__parameterized1 \Using_DSP48E1.DSP48E1_I1 
       (.A(A),
        .B(B),
        .Clk(Clk),
        .P(P),
        .PCOUT(PCOUT),
        .\Using_FPGA.DSP48E1_I1_0 (\Using_FPGA.DSP48E1_I1 ),
        .\Using_FPGA.DSP48E1_I1_1 (\Using_FPGA.DSP48E1_I1_0 ),
        .\Using_FPGA.DSP48E1_I1_2 (\Using_FPGA.DSP48E1_I1_1 ),
        .ex_not_mul_op(ex_not_mul_op),
        .mem_mulh_instr(mem_mulh_instr),
        .mem_mulhu_instr(mem_mulhu_instr));
endmodule

(* ORIG_REF_NAME = "dsp_module" *) 
module block_design_microblaze_0_0_dsp_module__parameterized5
   (PCOUT,
    Clk,
    D,
    \Using_FPGA.DSP48E1_I1 );
  output [47:0]PCOUT;
  input Clk;
  input [15:0]D;
  input [47:0]\Using_FPGA.DSP48E1_I1 ;

  wire Clk;
  wire [15:0]D;
  wire [47:0]PCOUT;
  wire [47:0]\Using_FPGA.DSP48E1_I1 ;

  block_design_microblaze_0_0_MB_DSP48E1__parameterized3 \Using_DSP48E1.DSP48E1_I1 
       (.Clk(Clk),
        .D(D),
        .PCOUT(PCOUT),
        .\Using_FPGA.DSP48E1_I1_0 (\Using_FPGA.DSP48E1_I1 ));
endmodule

(* ORIG_REF_NAME = "dsp_module" *) 
module block_design_microblaze_0_0_dsp_module__parameterized5_156
   (P,
    Clk,
    B,
    \Using_FPGA.DSP48E1_I1 ,
    PCOUT,
    ex_not_mul_op,
    mem_mulh_instr,
    mem_mulhu_instr);
  output [29:0]P;
  input Clk;
  input [15:0]B;
  input [15:0]\Using_FPGA.DSP48E1_I1 ;
  input [47:0]PCOUT;
  input ex_not_mul_op;
  input mem_mulh_instr;
  input mem_mulhu_instr;

  wire [15:0]B;
  wire Clk;
  wire [29:0]P;
  wire [47:0]PCOUT;
  wire [15:0]\Using_FPGA.DSP48E1_I1 ;
  wire ex_not_mul_op;
  wire mem_mulh_instr;
  wire mem_mulhu_instr;

  block_design_microblaze_0_0_MB_DSP48E1__parameterized3_159 \Using_DSP48E1.DSP48E1_I1 
       (.B(B),
        .Clk(Clk),
        .P(P),
        .PCOUT(PCOUT),
        .\Using_FPGA.DSP48E1_I1_0 (\Using_FPGA.DSP48E1_I1 ),
        .ex_not_mul_op(ex_not_mul_op),
        .mem_mulh_instr(mem_mulh_instr),
        .mem_mulhu_instr(mem_mulhu_instr));
endmodule

(* ORIG_REF_NAME = "dsp_module" *) 
module block_design_microblaze_0_0_dsp_module__parameterized8
   (\Using_FPGA.DSP48E1_I1 ,
    Clk,
    D,
    PCOUT,
    c1_stop_valid,
    CO,
    DI,
    S,
    \Gen_Access_Counter.Cycle_Count_2_i_reg[0] ,
    \Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 ,
    \Gen_Access_Counter.Cycle_Count_2_i_reg[0]_1 );
  output [15:0]\Using_FPGA.DSP48E1_I1 ;
  input Clk;
  input [15:0]D;
  input [47:0]PCOUT;
  input c1_stop_valid;
  input [0:0]CO;
  input [0:0]DI;
  input [0:0]S;
  input \Gen_Access_Counter.Cycle_Count_2_i_reg[0] ;
  input [14:0]\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 ;
  input [14:0]\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_1 ;

  wire [0:0]CO;
  wire Clk;
  wire [15:0]D;
  wire [0:0]DI;
  wire \Gen_Access_Counter.Cycle_Count_2_i_reg[0] ;
  wire [14:0]\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 ;
  wire [14:0]\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_1 ;
  wire [47:0]PCOUT;
  wire [0:0]S;
  wire [15:0]\Using_FPGA.DSP48E1_I1 ;
  wire c1_stop_valid;

  block_design_microblaze_0_0_MB_DSP48E1__parameterized5 \Using_DSP48E1.DSP48E1_I1 
       (.CO(CO),
        .Clk(Clk),
        .D(D),
        .DI(DI),
        .\Gen_Access_Counter.Cycle_Count_2_i_reg[0] (\Gen_Access_Counter.Cycle_Count_2_i_reg[0] ),
        .\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 (\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_0 ),
        .\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_1 (\Gen_Access_Counter.Cycle_Count_2_i_reg[0]_1 ),
        .PCOUT(PCOUT),
        .S(S),
        .\Using_FPGA.DSP48E1_I1_0 (\Using_FPGA.DSP48E1_I1 ),
        .c1_stop_valid(c1_stop_valid));
endmodule

module block_design_microblaze_0_0_instr_mux
   (Y,
    Instr_Data,
    Instr,
    LOCKSTEP_Master_Out);
  output [0:31]Y;
  output [0:0]Instr_Data;
  input [0:31]Instr;
  input [32:0]LOCKSTEP_Master_Out;

  wire [0:31]Instr;
  wire [0:0]Instr_Data;
  wire [32:0]LOCKSTEP_Master_Out;
  wire [0:31]Y;

  block_design_microblaze_0_0_mux_bus \Mux_LD.LD_inst 
       (.Instr(Instr),
        .Instr_Data(Instr_Data),
        .LOCKSTEP_Master_Out(LOCKSTEP_Master_Out),
        .Y(Y));
endmodule

module block_design_microblaze_0_0_mb_sync_bit
   (out,
    reset_temp,
    Clk);
  output [0:0]out;
  input reset_temp;
  input Clk;

  wire Clk;
  wire reset_temp;
  (* async_reg = "true" *) wire [1:2]sync;

  assign out[0] = sync[2];
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(reset_temp),
        .Q(sync[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module block_design_microblaze_0_0_mb_sync_bit_0
   (out,
    sync_reset,
    Wakeup,
    Clk);
  output [0:0]out;
  input sync_reset;
  input [0:0]Wakeup;
  input Clk;

  wire Clk;
  wire [0:0]Wakeup;
  (* async_reg = "true" *) wire [1:2]sync;
  wire sync_reset;

  assign out[0] = sync[2];
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(Wakeup),
        .Q(sync[1]),
        .R(sync_reset));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module block_design_microblaze_0_0_mb_sync_bit_48
   (out,
    sync_reset,
    \Synchronize.use_sync_reset.sync_reg[1]_0 ,
    Clk);
  output [0:0]out;
  input sync_reset;
  input [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  input Clk;

  wire Clk;
  wire [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  (* async_reg = "true" *) wire [1:2]sync;
  wire sync_reset;

  assign out[0] = sync[2];
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Synchronize.use_sync_reset.sync_reg[1]_0 ),
        .Q(sync[1]),
        .R(sync_reset));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module block_design_microblaze_0_0_mb_sync_bit_51
   (D,
    sync_reset,
    \Synchronize.use_sync_reset.sync_reg[1]_0 ,
    Clk);
  output [0:0]D;
  input sync_reset;
  input [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  input Clk;

  wire Clk;
  wire [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  (* async_reg = "true" *) wire [1:2]sync;
  wire sync_reset;

  assign D[0] = sync[2];
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Synchronize.use_sync_reset.sync_reg[1]_0 ),
        .Q(sync[1]),
        .R(sync_reset));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module block_design_microblaze_0_0_mb_sync_bit_52
   (D,
    sync_reset,
    \Synchronize.use_sync_reset.sync_reg[1]_0 ,
    Clk);
  output [0:0]D;
  input sync_reset;
  input [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  input Clk;

  wire Clk;
  wire [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  (* async_reg = "true" *) wire [1:2]sync;
  wire sync_reset;

  assign D[0] = sync[2];
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Synchronize.use_sync_reset.sync_reg[1]_0 ),
        .Q(sync[1]),
        .R(sync_reset));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module block_design_microblaze_0_0_mb_sync_bit_53
   (D,
    sync_reset,
    \Synchronize.use_sync_reset.sync_reg[1]_0 ,
    Clk);
  output [0:0]D;
  input sync_reset;
  input [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  input Clk;

  wire Clk;
  wire [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  (* async_reg = "true" *) wire [1:2]sync;
  wire sync_reset;

  assign D[0] = sync[2];
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Synchronize.use_sync_reset.sync_reg[1]_0 ),
        .Q(sync[1]),
        .R(sync_reset));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module block_design_microblaze_0_0_mb_sync_bit_54
   (D,
    sync_reset,
    \Synchronize.use_sync_reset.sync_reg[1]_0 ,
    Clk);
  output [0:0]D;
  input sync_reset;
  input [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  input Clk;

  wire Clk;
  wire [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  (* async_reg = "true" *) wire [1:2]sync;
  wire sync_reset;

  assign D[0] = sync[2];
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Synchronize.use_sync_reset.sync_reg[1]_0 ),
        .Q(sync[1]),
        .R(sync_reset));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module block_design_microblaze_0_0_mb_sync_bit_55
   (out,
    \Use_Async_Reset.sync_reset_reg ,
    \Serial_Dbg_Intf.sample_synced_1_reg[4] ,
    \Serial_Dbg_Intf.sample_synced_1_reg[4]_0 ,
    sync_reset,
    Dbg_Trig_In,
    stopped_i0,
    D,
    Q,
    start_cmd,
    Dbg_Trig_Ack_Out,
    Dbg_Trig_Out,
    Clk);
  output [0:0]out;
  output \Use_Async_Reset.sync_reset_reg ;
  output \Serial_Dbg_Intf.sample_synced_1_reg[4] ;
  output \Serial_Dbg_Intf.sample_synced_1_reg[4]_0 ;
  input sync_reset;
  input [0:0]Dbg_Trig_In;
  input stopped_i0;
  input [1:0]D;
  input [2:0]Q;
  input start_cmd;
  input [0:0]Dbg_Trig_Ack_Out;
  input [0:0]Dbg_Trig_Out;
  input Clk;

  wire Clk;
  wire [1:0]D;
  wire [0:0]Dbg_Trig_Ack_Out;
  wire [0:0]Dbg_Trig_In;
  wire [0:0]Dbg_Trig_Out;
  wire [2:0]Q;
  wire \Serial_Dbg_Intf.sample_synced_1_reg[4] ;
  wire \Serial_Dbg_Intf.sample_synced_1_reg[4]_0 ;
  wire \Use_Async_Reset.sync_reset_reg ;
  wire start_cmd;
  wire stopped_i0;
  (* async_reg = "true" *) wire [1:2]sync;
  wire sync_reset;

  assign out[0] = sync[2];
  LUT4 #(
    .INIT(16'h00D4)) 
    \Serial_Dbg_Intf.Start_Ack_i_1__0 
       (.I0(Q[2]),
        .I1(sync[2]),
        .I2(Dbg_Trig_Ack_Out),
        .I3(sync_reset),
        .O(\Serial_Dbg_Intf.sample_synced_1_reg[4]_0 ));
  LUT6 #(
    .INIT(64'h2220222000002220)) 
    \Serial_Dbg_Intf.Stopped_i_1__0 
       (.I0(\Serial_Dbg_Intf.sample_synced_1_reg[4] ),
        .I1(sync_reset),
        .I2(Dbg_Trig_In),
        .I3(stopped_i0),
        .I4(D[0]),
        .I5(Q[0]),
        .O(\Use_Async_Reset.sync_reset_reg ));
  LUT5 #(
    .INIT(32'h0000BB0B)) 
    \Serial_Dbg_Intf.Stopped_i_2 
       (.I0(Q[2]),
        .I1(sync[2]),
        .I2(D[1]),
        .I3(Q[1]),
        .I4(start_cmd),
        .O(\Serial_Dbg_Intf.sample_synced_1_reg[4] ));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(Dbg_Trig_Out),
        .Q(sync[1]),
        .R(sync_reset));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module block_design_microblaze_0_0_mb_sync_bit_56
   (D,
    stopped_i0,
    \Serial_Dbg_Intf.sample_synced_1_reg[5] ,
    Q,
    full_i,
    stop_cmd,
    Dbg_Trig_Ack_Out,
    sync_reset,
    Dbg_Trig_Out,
    Clk);
  output [0:0]D;
  output stopped_i0;
  output \Serial_Dbg_Intf.sample_synced_1_reg[5] ;
  input [0:0]Q;
  input full_i;
  input stop_cmd;
  input [0:0]Dbg_Trig_Ack_Out;
  input sync_reset;
  input [0:0]Dbg_Trig_Out;
  input Clk;

  wire Clk;
  wire [0:0]Dbg_Trig_Ack_Out;
  wire [0:0]Dbg_Trig_Out;
  wire [0:0]Q;
  wire \Serial_Dbg_Intf.sample_synced_1_reg[5] ;
  wire full_i;
  wire stop_cmd;
  wire stopped_i0;
  (* async_reg = "true" *) wire [1:2]sync;
  wire sync_reset;

  assign D[0] = sync[2];
  LUT4 #(
    .INIT(16'h00D4)) 
    \Serial_Dbg_Intf.Stop_Ack_i_1__0 
       (.I0(Q),
        .I1(sync[2]),
        .I2(Dbg_Trig_Ack_Out),
        .I3(sync_reset),
        .O(\Serial_Dbg_Intf.sample_synced_1_reg[5] ));
  LUT4 #(
    .INIT(16'hFFF4)) 
    \Serial_Dbg_Intf.Stopped_Pulse_i_1__0 
       (.I0(Q),
        .I1(sync[2]),
        .I2(full_i),
        .I3(stop_cmd),
        .O(stopped_i0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(Dbg_Trig_Out),
        .Q(sync[1]),
        .R(sync_reset));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module block_design_microblaze_0_0_mb_sync_bit_57
   (D,
    stopped_i1,
    start_cmd,
    Q,
    \Serial_Dbg_Intf.Started_Pulse_reg ,
    sync_reset,
    \Synchronize.use_sync_reset.sync_reg[1]_0 ,
    Clk);
  output [0:0]D;
  output stopped_i1;
  input start_cmd;
  input [1:0]Q;
  input [0:0]\Serial_Dbg_Intf.Started_Pulse_reg ;
  input sync_reset;
  input [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  input Clk;

  wire Clk;
  wire [1:0]Q;
  wire [0:0]\Serial_Dbg_Intf.Started_Pulse_reg ;
  wire [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  wire start_cmd;
  wire stopped_i1;
  (* async_reg = "true" *) wire [1:2]sync;
  wire sync_reset;

  assign D[0] = sync[2];
  LUT5 #(
    .INIT(32'hBABAFFBA)) 
    \Serial_Dbg_Intf.Started_Pulse_i_1__0 
       (.I0(start_cmd),
        .I1(Q[0]),
        .I2(sync[2]),
        .I3(\Serial_Dbg_Intf.Started_Pulse_reg ),
        .I4(Q[1]),
        .O(stopped_i1));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Synchronize.use_sync_reset.sync_reg[1]_0 ),
        .Q(sync[1]),
        .R(sync_reset));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module block_design_microblaze_0_0_mb_sync_bit_58
   (D,
    \Synchronize.use_sync_reset.sync_reg[2]_0 ,
    Q,
    stopped_i0,
    \Serial_Dbg_Intf.Started_reg ,
    Dbg_Trig_In,
    sync_reset,
    Dbg_Trig_Ack_In,
    Clk);
  output [0:0]D;
  output \Synchronize.use_sync_reset.sync_reg[2]_0 ;
  input [0:0]Q;
  input stopped_i0;
  input \Serial_Dbg_Intf.Started_reg ;
  input [0:0]Dbg_Trig_In;
  input sync_reset;
  input [0:0]Dbg_Trig_Ack_In;
  input Clk;

  wire Clk;
  wire [0:0]Dbg_Trig_Ack_In;
  wire [0:0]Dbg_Trig_In;
  wire [0:0]Q;
  wire \Serial_Dbg_Intf.Started_reg ;
  wire \Synchronize.use_sync_reset.sync_reg[2]_0 ;
  wire stopped_i0;
  (* async_reg = "true" *) wire [1:2]sync;
  wire sync_reset;

  assign D[0] = sync[2];
  LUT6 #(
    .INIT(64'h000000000DDD00DD)) 
    \Serial_Dbg_Intf.Started_i_1__0 
       (.I0(sync[2]),
        .I1(Q),
        .I2(stopped_i0),
        .I3(\Serial_Dbg_Intf.Started_reg ),
        .I4(Dbg_Trig_In),
        .I5(sync_reset),
        .O(\Synchronize.use_sync_reset.sync_reg[2]_0 ));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(Dbg_Trig_Ack_In),
        .Q(sync[1]),
        .R(sync_reset));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module block_design_microblaze_0_0_mb_sync_bit_59
   (D,
    sync_reset,
    Dbg_Trig_Ack_In,
    Clk);
  output [0:0]D;
  input sync_reset;
  input [0:0]Dbg_Trig_Ack_In;
  input Clk;

  wire Clk;
  wire [0:0]Dbg_Trig_Ack_In;
  (* async_reg = "true" *) wire [1:2]sync;
  wire sync_reset;

  assign D[0] = sync[2];
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(Dbg_Trig_Ack_In),
        .Q(sync[1]),
        .R(sync_reset));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module block_design_microblaze_0_0_mb_sync_bit_65
   (D,
    sync_reset,
    \Synchronize.use_sync_reset.sync_reg[1]_0 ,
    Clk);
  output [0:0]D;
  input sync_reset;
  input [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  input Clk;

  wire Clk;
  wire [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  (* async_reg = "true" *) wire [1:2]sync;
  wire sync_reset;

  assign D[0] = sync[2];
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Synchronize.use_sync_reset.sync_reg[1]_0 ),
        .Q(sync[1]),
        .R(sync_reset));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module block_design_microblaze_0_0_mb_sync_bit_66
   (D,
    \Synchronize.use_sync_reset.sync_reg[2]_0 ,
    Q,
    \Serial_Dbg_Intf.Stopped_reg ,
    stat_pause0,
    Dbg_Trig_In,
    sync_reset,
    Dbg_Trig_Ack_In,
    Clk);
  output [0:0]D;
  output \Synchronize.use_sync_reset.sync_reg[2]_0 ;
  input [0:0]Q;
  input \Serial_Dbg_Intf.Stopped_reg ;
  input stat_pause0;
  input [0:0]Dbg_Trig_In;
  input sync_reset;
  input [0:0]Dbg_Trig_Ack_In;
  input Clk;

  wire Clk;
  wire [0:0]Dbg_Trig_Ack_In;
  wire [0:0]Dbg_Trig_In;
  wire [0:0]Q;
  wire \Serial_Dbg_Intf.Stopped_reg ;
  wire \Synchronize.use_sync_reset.sync_reg[2]_0 ;
  wire stat_pause0;
  (* async_reg = "true" *) wire [1:2]sync;
  wire sync_reset;

  assign D[0] = sync[2];
  LUT6 #(
    .INIT(64'h00000000D0DDD0D0)) 
    \Serial_Dbg_Intf.Stopped_i_1 
       (.I0(sync[2]),
        .I1(Q),
        .I2(\Serial_Dbg_Intf.Stopped_reg ),
        .I3(stat_pause0),
        .I4(Dbg_Trig_In),
        .I5(sync_reset),
        .O(\Synchronize.use_sync_reset.sync_reg[2]_0 ));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(Dbg_Trig_Ack_In),
        .Q(sync[1]),
        .R(sync_reset));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module block_design_microblaze_0_0_mb_sync_bit_67
   (D,
    sync_reset,
    \Synchronize.use_sync_reset.sync_reg[1]_0 ,
    Clk);
  output [0:0]D;
  input sync_reset;
  input [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  input Clk;

  wire Clk;
  wire [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  (* async_reg = "true" *) wire [1:2]sync;
  wire sync_reset;

  assign D[0] = sync[2];
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Synchronize.use_sync_reset.sync_reg[1]_0 ),
        .Q(sync[1]),
        .R(sync_reset));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module block_design_microblaze_0_0_mb_sync_bit_68
   (D,
    sync_reset,
    \Synchronize.use_sync_reset.sync_reg[1]_0 ,
    Clk);
  output [0:0]D;
  input sync_reset;
  input [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  input Clk;

  wire Clk;
  wire [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  (* async_reg = "true" *) wire [1:2]sync;
  wire sync_reset;

  assign D[0] = sync[2];
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Synchronize.use_sync_reset.sync_reg[1]_0 ),
        .Q(sync[1]),
        .R(sync_reset));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module block_design_microblaze_0_0_mb_sync_bit_69
   (D,
    sync_reset,
    \Synchronize.use_sync_reset.sync_reg[1]_0 ,
    Clk);
  output [0:0]D;
  input sync_reset;
  input [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  input Clk;

  wire Clk;
  wire [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  (* async_reg = "true" *) wire [1:2]sync;
  wire sync_reset;

  assign D[0] = sync[2];
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Synchronize.use_sync_reset.sync_reg[1]_0 ),
        .Q(sync[1]),
        .R(sync_reset));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module block_design_microblaze_0_0_mb_sync_bit_70
   (D,
    sync_reset,
    \Synchronize.use_sync_reset.sync_reg[1]_0 ,
    Clk);
  output [0:0]D;
  input sync_reset;
  input [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  input Clk;

  wire Clk;
  wire [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  (* async_reg = "true" *) wire [1:2]sync;
  wire sync_reset;

  assign D[0] = sync[2];
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Synchronize.use_sync_reset.sync_reg[1]_0 ),
        .Q(sync[1]),
        .R(sync_reset));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module block_design_microblaze_0_0_mb_sync_bit_71
   (D,
    sync_reset,
    \Synchronize.use_sync_reset.sync_reg[1]_0 ,
    Clk);
  output [0:0]D;
  input sync_reset;
  input [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  input Clk;

  wire Clk;
  wire [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  (* async_reg = "true" *) wire [1:2]sync;
  wire sync_reset;

  assign D[0] = sync[2];
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Synchronize.use_sync_reset.sync_reg[1]_0 ),
        .Q(sync[1]),
        .R(sync_reset));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module block_design_microblaze_0_0_mb_sync_bit_72
   (D,
    sync_reset,
    \Synchronize.use_sync_reset.sync_reg[1]_0 ,
    Clk);
  output [0:0]D;
  input sync_reset;
  input [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  input Clk;

  wire Clk;
  wire [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  (* async_reg = "true" *) wire [1:2]sync;
  wire sync_reset;

  assign D[0] = sync[2];
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Synchronize.use_sync_reset.sync_reg[1]_0 ),
        .Q(sync[1]),
        .R(sync_reset));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module block_design_microblaze_0_0_mb_sync_bit_73
   (out,
    \Serial_Dbg_Intf.start_cmd_reg ,
    stat_pause0,
    \Serial_Dbg_Intf.sample_synced_1_reg[7] ,
    start_cmd,
    Q,
    \Serial_Dbg_Intf.stat_pause_reg ,
    \Serial_Dbg_Intf.stat_pause_reg_0 ,
    sync_reset,
    Dbg_Trig_Ack_Out,
    Dbg_Trig_Out,
    Clk);
  output [0:0]out;
  output \Serial_Dbg_Intf.start_cmd_reg ;
  output stat_pause0;
  output \Serial_Dbg_Intf.sample_synced_1_reg[7] ;
  input start_cmd;
  input [0:0]Q;
  input \Serial_Dbg_Intf.stat_pause_reg ;
  input \Serial_Dbg_Intf.stat_pause_reg_0 ;
  input sync_reset;
  input [0:0]Dbg_Trig_Ack_Out;
  input [0:0]Dbg_Trig_Out;
  input Clk;

  wire Clk;
  wire [0:0]Dbg_Trig_Ack_Out;
  wire [0:0]Dbg_Trig_Out;
  wire [0:0]Q;
  wire \Serial_Dbg_Intf.sample_synced_1_reg[7] ;
  wire \Serial_Dbg_Intf.start_cmd_reg ;
  wire \Serial_Dbg_Intf.stat_pause_reg ;
  wire \Serial_Dbg_Intf.stat_pause_reg_0 ;
  wire start_cmd;
  wire stat_pause0;
  (* async_reg = "true" *) wire [1:2]sync;
  wire sync_reset;

  assign out[0] = sync[2];
  LUT4 #(
    .INIT(16'h00D4)) 
    \Serial_Dbg_Intf.Start_Ack_i_1 
       (.I0(Q),
        .I1(sync[2]),
        .I2(Dbg_Trig_Ack_Out),
        .I3(sync_reset),
        .O(\Serial_Dbg_Intf.sample_synced_1_reg[7] ));
  LUT3 #(
    .INIT(8'hBA)) 
    \Serial_Dbg_Intf.Started_Pulse_i_1 
       (.I0(start_cmd),
        .I1(Q),
        .I2(sync[2]),
        .O(stat_pause0));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFF4500)) 
    \Serial_Dbg_Intf.stat_pause_i_1 
       (.I0(start_cmd),
        .I1(Q),
        .I2(sync[2]),
        .I3(\Serial_Dbg_Intf.stat_pause_reg ),
        .I4(\Serial_Dbg_Intf.stat_pause_reg_0 ),
        .I5(sync_reset),
        .O(\Serial_Dbg_Intf.start_cmd_reg ));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(Dbg_Trig_Out),
        .Q(sync[1]),
        .R(sync_reset));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module block_design_microblaze_0_0_mb_sync_bit_74
   (D,
    \Serial_Dbg_Intf.stop_cmd_reg ,
    \Serial_Dbg_Intf.sample_synced_1_reg[8] ,
    stop_cmd,
    Q,
    Dbg_Trig_Ack_Out,
    sync_reset,
    Dbg_Trig_Out,
    Clk);
  output [0:0]D;
  output \Serial_Dbg_Intf.stop_cmd_reg ;
  output \Serial_Dbg_Intf.sample_synced_1_reg[8] ;
  input stop_cmd;
  input [0:0]Q;
  input [0:0]Dbg_Trig_Ack_Out;
  input sync_reset;
  input [0:0]Dbg_Trig_Out;
  input Clk;

  wire Clk;
  wire [0:0]Dbg_Trig_Ack_Out;
  wire [0:0]Dbg_Trig_Out;
  wire [0:0]Q;
  wire \Serial_Dbg_Intf.sample_synced_1_reg[8] ;
  wire \Serial_Dbg_Intf.stop_cmd_reg ;
  wire stop_cmd;
  (* async_reg = "true" *) wire [1:2]sync;
  wire sync_reset;

  assign D[0] = sync[2];
  LUT4 #(
    .INIT(16'h00D4)) 
    \Serial_Dbg_Intf.Stop_Ack_i_1 
       (.I0(Q),
        .I1(sync[2]),
        .I2(Dbg_Trig_Ack_Out),
        .I3(sync_reset),
        .O(\Serial_Dbg_Intf.sample_synced_1_reg[8] ));
  LUT3 #(
    .INIT(8'hBA)) 
    \Serial_Dbg_Intf.Stopped_Pulse_i_1 
       (.I0(stop_cmd),
        .I1(Q),
        .I2(sync[2]),
        .O(\Serial_Dbg_Intf.stop_cmd_reg ));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(Dbg_Trig_Out),
        .Q(sync[1]),
        .R(sync_reset));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module block_design_microblaze_0_0_mb_sync_bit_75
   (D,
    \Serial_Dbg_Intf.sample_synced_1_reg[9] ,
    Q,
    stat_pause0,
    Dbg_Trig_In,
    \Serial_Dbg_Intf.Started_reg ,
    sync_reset,
    Dbg_Trig_Ack_In,
    Clk);
  output [0:0]D;
  output \Serial_Dbg_Intf.sample_synced_1_reg[9] ;
  input [0:0]Q;
  input stat_pause0;
  input [0:0]Dbg_Trig_In;
  input \Serial_Dbg_Intf.Started_reg ;
  input sync_reset;
  input [0:0]Dbg_Trig_Ack_In;
  input Clk;

  wire Clk;
  wire [0:0]Dbg_Trig_Ack_In;
  wire [0:0]Dbg_Trig_In;
  wire [0:0]Q;
  wire \Serial_Dbg_Intf.Started_reg ;
  wire \Serial_Dbg_Intf.sample_synced_1_reg[9] ;
  wire stat_pause0;
  (* async_reg = "true" *) wire [1:2]sync;
  wire sync_reset;

  assign D[0] = sync[2];
  LUT6 #(
    .INIT(64'h000000000000BBB0)) 
    \Serial_Dbg_Intf.Started_i_1 
       (.I0(Q),
        .I1(sync[2]),
        .I2(stat_pause0),
        .I3(Dbg_Trig_In),
        .I4(\Serial_Dbg_Intf.Started_reg ),
        .I5(sync_reset),
        .O(\Serial_Dbg_Intf.sample_synced_1_reg[9] ));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(Dbg_Trig_Ack_In),
        .Q(sync[1]),
        .R(sync_reset));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module block_design_microblaze_0_0_mb_sync_bit_76
   (sample_synced,
    normal_stop_cmd_i0,
    Q,
    sync_reset,
    D,
    Clk);
  output [0:0]sample_synced;
  output normal_stop_cmd_i0;
  input [0:0]Q;
  input sync_reset;
  input [0:0]D;
  input Clk;

  wire Clk;
  wire [0:0]D;
  wire [0:0]Q;
  wire normal_stop_cmd_i0;
  (* async_reg = "true" *) wire [1:2]sync;
  wire sync_reset;

  assign sample_synced[0] = sync[2];
  LUT2 #(
    .INIT(4'h2)) 
    \Serial_Dbg_Intf.normal_stop_cmd_i_i_1 
       (.I0(sync[2]),
        .I1(Q),
        .O(normal_stop_cmd_i0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(D),
        .Q(sync[1]),
        .R(sync_reset));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module block_design_microblaze_0_0_mb_sync_bit_77
   (sample_synced,
    force_stop_cmd_i0,
    Q,
    sync_reset,
    \Synchronize.use_sync_reset.sync_reg[1]_0 ,
    Clk);
  output [0:0]sample_synced;
  output force_stop_cmd_i0;
  input [0:0]Q;
  input sync_reset;
  input [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  input Clk;

  wire Clk;
  wire [0:0]Q;
  wire [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  wire force_stop_cmd_i0;
  (* async_reg = "true" *) wire [1:2]sync;
  wire sync_reset;

  assign sample_synced[0] = sync[2];
  LUT2 #(
    .INIT(4'h2)) 
    \Serial_Dbg_Intf.force_stop_cmd_i_i_1 
       (.I0(sync[2]),
        .I1(Q),
        .O(force_stop_cmd_i0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Synchronize.use_sync_reset.sync_reg[1]_0 ),
        .Q(sync[1]),
        .R(sync_reset));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module block_design_microblaze_0_0_mb_sync_bit_78
   (sample_synced,
    \Serial_Dbg_Intf.sample_synced_1_reg[8] ,
    trig_in_10,
    start_single_cmd0,
    Q,
    \Serial_Dbg_Intf.trig_in_1_pulse_reg ,
    Dbg_Trig_In,
    sync_reset,
    \Synchronize.use_sync_reset.sync_reg[1]_0 ,
    Clk);
  output [0:0]sample_synced;
  output \Serial_Dbg_Intf.sample_synced_1_reg[8] ;
  output trig_in_10;
  output start_single_cmd0;
  input [2:0]Q;
  input [1:0]\Serial_Dbg_Intf.trig_in_1_pulse_reg ;
  input [0:0]Dbg_Trig_In;
  input sync_reset;
  input [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  input Clk;

  wire Clk;
  wire [0:0]Dbg_Trig_In;
  wire [2:0]Q;
  wire \Serial_Dbg_Intf.sample_synced_1_reg[8] ;
  wire [1:0]\Serial_Dbg_Intf.trig_in_1_pulse_reg ;
  wire [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  wire start_single_cmd0;
  (* async_reg = "true" *) wire [1:2]sync;
  wire sync_reset;
  wire trig_in_10;

  assign sample_synced[0] = sync[2];
  LUT2 #(
    .INIT(4'h2)) 
    \Serial_Dbg_Intf.start_single_cmd_i_1 
       (.I0(sync[2]),
        .I1(Q[2]),
        .O(start_single_cmd0));
  LUT4 #(
    .INIT(16'hCF8A)) 
    \Serial_Dbg_Intf.trig_in_1_i_1 
       (.I0(trig_in_10),
        .I1(Q[0]),
        .I2(\Serial_Dbg_Intf.trig_in_1_pulse_reg [0]),
        .I3(Dbg_Trig_In),
        .O(\Serial_Dbg_Intf.sample_synced_1_reg[8] ));
  LUT4 #(
    .INIT(16'h4F44)) 
    \Serial_Dbg_Intf.trig_in_1_pulse_i_1 
       (.I0(Q[2]),
        .I1(sync[2]),
        .I2(Q[1]),
        .I3(\Serial_Dbg_Intf.trig_in_1_pulse_reg [1]),
        .O(trig_in_10));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Synchronize.use_sync_reset.sync_reg[1]_0 ),
        .Q(sync[1]),
        .R(sync_reset));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module block_design_microblaze_0_0_mb_sync_bit_79
   (sample_synced,
    read_register_MSR0,
    Q,
    sync_reset,
    \Synchronize.use_sync_reset.sync_reg[1]_0 ,
    Clk);
  output [0:0]sample_synced;
  output read_register_MSR0;
  input [0:0]Q;
  input sync_reset;
  input [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  input Clk;

  wire Clk;
  wire [0:0]Q;
  wire [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  wire read_register_MSR0;
  (* async_reg = "true" *) wire [1:2]sync;
  wire sync_reset;

  assign sample_synced[0] = sync[2];
  LUT2 #(
    .INIT(4'h2)) 
    \Serial_Dbg_Intf.read_register_MSR_i_1 
       (.I0(sync[2]),
        .I1(Q),
        .O(read_register_MSR0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Synchronize.use_sync_reset.sync_reg[1]_0 ),
        .Q(sync[1]),
        .R(sync_reset));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module block_design_microblaze_0_0_mb_sync_bit_80
   (sample_synced,
    read_register_PC0,
    Q,
    sync_reset,
    \Synchronize.use_sync_reset.sync_reg[1]_0 ,
    Clk);
  output [0:0]sample_synced;
  output read_register_PC0;
  input [0:0]Q;
  input sync_reset;
  input [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  input Clk;

  wire Clk;
  wire [0:0]Q;
  wire [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  wire read_register_PC0;
  (* async_reg = "true" *) wire [1:2]sync;
  wire sync_reset;

  assign sample_synced[0] = sync[2];
  LUT2 #(
    .INIT(4'h2)) 
    \Serial_Dbg_Intf.read_register_PC_i_1 
       (.I0(sync[2]),
        .I1(Q),
        .O(read_register_PC0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Synchronize.use_sync_reset.sync_reg[1]_0 ),
        .Q(sync[1]),
        .R(sync_reset));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module block_design_microblaze_0_0_mb_sync_bit_81
   (sample_synced,
    continue_from_brk0,
    Q,
    \Serial_Dbg_Intf.continue_from_brk_reg ,
    sync_reset,
    \Synchronize.use_sync_reset.sync_reg[1]_0 ,
    Clk);
  output [0:0]sample_synced;
  output continue_from_brk0;
  input [1:0]Q;
  input [0:0]\Serial_Dbg_Intf.continue_from_brk_reg ;
  input sync_reset;
  input [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  input Clk;

  wire Clk;
  wire [1:0]Q;
  wire [0:0]\Serial_Dbg_Intf.continue_from_brk_reg ;
  wire [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  wire continue_from_brk0;
  (* async_reg = "true" *) wire [1:2]sync;
  wire sync_reset;

  assign sample_synced[0] = sync[2];
  LUT4 #(
    .INIT(16'h4F44)) 
    \Serial_Dbg_Intf.continue_from_brk_i_1 
       (.I0(Q[1]),
        .I1(sync[2]),
        .I2(Q[0]),
        .I3(\Serial_Dbg_Intf.continue_from_brk_reg ),
        .O(continue_from_brk0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Synchronize.use_sync_reset.sync_reg[1]_0 ),
        .Q(sync[1]),
        .R(sync_reset));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module block_design_microblaze_0_0_mb_sync_bit_82
   (sample_synced,
    if_debug_ready_i0,
    \Serial_Dbg_Intf.if_debug_ready_i_reg ,
    sync_reset,
    \Synchronize.use_sync_reset.sync_reg[1]_0 ,
    Clk);
  output [0:0]sample_synced;
  output if_debug_ready_i0;
  input \Serial_Dbg_Intf.if_debug_ready_i_reg ;
  input sync_reset;
  input [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  input Clk;

  wire Clk;
  wire \Serial_Dbg_Intf.if_debug_ready_i_reg ;
  wire [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  wire if_debug_ready_i0;
  (* async_reg = "true" *) wire [1:2]sync;
  wire sync_reset;

  assign sample_synced[0] = sync[2];
  LUT2 #(
    .INIT(4'h2)) 
    \Serial_Dbg_Intf.if_debug_ready_i_i_1 
       (.I0(sync[2]),
        .I1(\Serial_Dbg_Intf.if_debug_ready_i_reg ),
        .O(if_debug_ready_i0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Synchronize.use_sync_reset.sync_reg[1]_0 ),
        .Q(sync[1]),
        .R(sync_reset));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module block_design_microblaze_0_0_mb_sync_bit_83
   (sample_synced,
    \Synchronize.use_sync_reset.sync_reg[2]_0 ,
    Q,
    Dbg_Trig_Ack_Out,
    sync_reset,
    Dbg_Trig_Out,
    Clk);
  output [0:0]sample_synced;
  output \Synchronize.use_sync_reset.sync_reg[2]_0 ;
  input [0:0]Q;
  input [0:0]Dbg_Trig_Ack_Out;
  input sync_reset;
  input [0:0]Dbg_Trig_Out;
  input Clk;

  wire Clk;
  wire [0:0]Dbg_Trig_Ack_Out;
  wire [0:0]Dbg_Trig_Out;
  wire [0:0]Q;
  wire \Synchronize.use_sync_reset.sync_reg[2]_0 ;
  (* async_reg = "true" *) wire [1:2]sync;
  wire sync_reset;

  assign sample_synced[0] = sync[2];
  LUT3 #(
    .INIT(8'hB2)) 
    \Serial_Dbg_Intf.trig_ack_out_1_i_1 
       (.I0(sync[2]),
        .I1(Q),
        .I2(Dbg_Trig_Ack_Out),
        .O(\Synchronize.use_sync_reset.sync_reg[2]_0 ));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(Dbg_Trig_Out),
        .Q(sync[1]),
        .R(sync_reset));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module block_design_microblaze_0_0_mb_sync_bit_84
   (sample_synced,
    sync_reset,
    Dbg_Trig_Ack_In,
    Clk);
  output [0:0]sample_synced;
  input sync_reset;
  input [0:0]Dbg_Trig_Ack_In;
  input Clk;

  wire Clk;
  wire [0:0]Dbg_Trig_Ack_In;
  (* async_reg = "true" *) wire [1:2]sync;
  wire sync_reset;

  assign sample_synced[0] = sync[2];
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(Dbg_Trig_Ack_In),
        .Q(sync[1]),
        .R(sync_reset));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module block_design_microblaze_0_0_mb_sync_bit_85
   (sample_synced,
    sync_reset,
    \Synchronize.use_sync_reset.sync_reg[1]_0 ,
    Clk);
  output [0:0]sample_synced;
  input sync_reset;
  input [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  input Clk;

  wire Clk;
  wire [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  (* async_reg = "true" *) wire [1:2]sync;
  wire sync_reset;

  assign sample_synced[0] = sync[2];
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Synchronize.use_sync_reset.sync_reg[1]_0 ),
        .Q(sync[1]),
        .R(sync_reset));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module block_design_microblaze_0_0_mb_sync_bit__parameterized2
   (D,
    dbg_brki_hit,
    Dbg_Clk,
    AR);
  output [0:0]D;
  input dbg_brki_hit;
  input Dbg_Clk;
  input [0:0]AR;

  wire [0:0]AR;
  wire [0:0]D;
  wire Dbg_Clk;
  wire dbg_brki_hit;

  FDCE #(
    .INIT(1'b0)) 
    \Single_Synchronize.use_async_reset.sync_reg 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(AR),
        .D(dbg_brki_hit),
        .Q(D));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module block_design_microblaze_0_0_mb_sync_bit__parameterized2_26
   (D,
    Pause,
    Dbg_Clk,
    AR);
  output [0:0]D;
  input Pause;
  input Dbg_Clk;
  input [0:0]AR;

  wire [0:0]AR;
  wire [0:0]D;
  wire Dbg_Clk;
  wire Pause;

  FDCE #(
    .INIT(1'b0)) 
    \Single_Synchronize.use_async_reset.sync_reg 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(AR),
        .D(Pause),
        .Q(D));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module block_design_microblaze_0_0_mb_sync_bit__parameterized2_27
   (D,
    running_clock,
    Dbg_Clk,
    AR);
  output [0:0]D;
  input running_clock;
  input Dbg_Clk;
  input [0:0]AR;

  wire [0:0]AR;
  wire [0:0]D;
  wire Dbg_Clk;
  wire running_clock;

  FDCE #(
    .INIT(1'b0)) 
    \Single_Synchronize.use_async_reset.sync_reg 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(AR),
        .D(running_clock),
        .Q(D));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module block_design_microblaze_0_0_mb_sync_bit__parameterized2_28
   (D,
    Sleep,
    Dbg_Clk,
    AR);
  output [0:0]D;
  input Sleep;
  input Dbg_Clk;
  input [0:0]AR;

  wire [0:0]AR;
  wire [0:0]D;
  wire Dbg_Clk;
  wire Sleep;

  FDCE #(
    .INIT(1'b0)) 
    \Single_Synchronize.use_async_reset.sync_reg 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(AR),
        .D(Sleep),
        .Q(D));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module block_design_microblaze_0_0_mb_sync_bit__parameterized2_29
   (D,
    LOCKSTEP_Master_Out,
    Dbg_Clk,
    AR);
  output [0:0]D;
  input [0:0]LOCKSTEP_Master_Out;
  input Dbg_Clk;
  input [0:0]AR;

  wire [0:0]AR;
  wire [0:0]D;
  wire Dbg_Clk;
  wire [0:0]LOCKSTEP_Master_Out;

  FDCE #(
    .INIT(1'b0)) 
    \Single_Synchronize.use_async_reset.sync_reg 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(AR),
        .D(LOCKSTEP_Master_Out),
        .Q(D));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module block_design_microblaze_0_0_mb_sync_bit__parameterized2_49
   (D,
    \Single_Synchronize.use_async_reset.sync_reg_0 ,
    Dbg_Clk,
    AR);
  output [0:0]D;
  input \Single_Synchronize.use_async_reset.sync_reg_0 ;
  input Dbg_Clk;
  input [0:0]AR;

  wire [0:0]AR;
  wire [0:0]D;
  wire Dbg_Clk;
  wire \Single_Synchronize.use_async_reset.sync_reg_0 ;

  FDCE #(
    .INIT(1'b0)) 
    \Single_Synchronize.use_async_reset.sync_reg 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(AR),
        .D(\Single_Synchronize.use_async_reset.sync_reg_0 ),
        .Q(D));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module block_design_microblaze_0_0_mb_sync_bit__parameterized2_50
   (D,
    \Single_Synchronize.use_async_reset.sync_reg_0 ,
    Dbg_Clk,
    AR);
  output [0:0]D;
  input \Single_Synchronize.use_async_reset.sync_reg_0 ;
  input Dbg_Clk;
  input [0:0]AR;

  wire [0:0]AR;
  wire [0:0]D;
  wire Dbg_Clk;
  wire \Single_Synchronize.use_async_reset.sync_reg_0 ;

  FDCE #(
    .INIT(1'b0)) 
    \Single_Synchronize.use_async_reset.sync_reg 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(AR),
        .D(\Single_Synchronize.use_async_reset.sync_reg_0 ),
        .Q(D));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module block_design_microblaze_0_0_mb_sync_bit__parameterized2_86
   (D,
    AR,
    Raw,
    Dbg_Clk,
    Scan_Reset_Sel,
    Scan_Reset,
    Scan_En);
  output [0:0]D;
  output [0:0]AR;
  input Raw;
  input Dbg_Clk;
  input Scan_Reset_Sel;
  input Scan_Reset;
  input Scan_En;

  wire [0:0]AR;
  wire [0:0]D;
  wire Dbg_Clk;
  wire Raw;
  wire Scan_En;
  wire Scan_Reset;
  wire Scan_Reset_Sel;

  LUT3 #(
    .INIT(8'h08)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK[0]_i_1 
       (.I0(Scan_Reset_Sel),
        .I1(Scan_Reset),
        .I2(Scan_En),
        .O(AR));
  FDCE #(
    .INIT(1'b0)) 
    \Single_Synchronize.use_async_reset.sync_reg 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(AR),
        .D(Raw),
        .Q(D));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module block_design_microblaze_0_0_mb_sync_bit__parameterized4
   (\Serial_Dbg_Intf.continue_from_brk_reg ,
    sync_reset,
    LOCKSTEP_Master_Out,
    Clk,
    dbg_continue_i_reg,
    start_single_cmd,
    dbg_continue_i_reg_0,
    dbg_pause,
    dbg_continue_i_reg_1,
    normal_stop_cmd_i);
  output \Serial_Dbg_Intf.continue_from_brk_reg ;
  input sync_reset;
  input [2:0]LOCKSTEP_Master_Out;
  input Clk;
  input dbg_continue_i_reg;
  input start_single_cmd;
  input dbg_continue_i_reg_0;
  input dbg_pause;
  input dbg_continue_i_reg_1;
  input normal_stop_cmd_i;

  wire Clk;
  wire [2:0]LOCKSTEP_Master_Out;
  wire \Serial_Dbg_Intf.continue_from_brk_reg ;
  wire dbg_continue_i_i_2_n_0;
  wire dbg_continue_i_reg;
  wire dbg_continue_i_reg_0;
  wire dbg_continue_i_reg_1;
  wire dbg_pause;
  wire dbg_wakeup_synced;
  wire normal_stop_cmd_i;
  wire start_single_cmd;
  wire sync_reset;

  FDRE #(
    .INIT(1'b0)) 
    \Single_Synchronize.use_sync_reset.sync_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(LOCKSTEP_Master_Out[1]),
        .Q(dbg_wakeup_synced),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'hF0F0F0F0F0F0F0E0)) 
    dbg_continue_i_i_1
       (.I0(dbg_continue_i_i_2_n_0),
        .I1(dbg_continue_i_reg_0),
        .I2(dbg_pause),
        .I3(dbg_continue_i_reg_1),
        .I4(normal_stop_cmd_i),
        .I5(LOCKSTEP_Master_Out[0]),
        .O(\Serial_Dbg_Intf.continue_from_brk_reg ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    dbg_continue_i_i_2
       (.I0(dbg_continue_i_reg),
        .I1(start_single_cmd),
        .I2(dbg_wakeup_synced),
        .I3(LOCKSTEP_Master_Out[2]),
        .O(dbg_continue_i_i_2_n_0));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module block_design_microblaze_0_0_mb_sync_bit__parameterized4_30
   (trig_ack_in_0_synced,
    trig_ack_in_0_synced_1_reg,
    sync_reset,
    Dbg_Trig_Ack_In,
    Clk,
    trig_ack_in_0_synced_1,
    mb_halted_1,
    trig_in_0_reg,
    Dbg_Trig_In);
  output trig_ack_in_0_synced;
  output trig_ack_in_0_synced_1_reg;
  input sync_reset;
  input [0:0]Dbg_Trig_Ack_In;
  input Clk;
  input trig_ack_in_0_synced_1;
  input mb_halted_1;
  input trig_in_0_reg;
  input [0:0]Dbg_Trig_In;

  wire Clk;
  wire [0:0]Dbg_Trig_Ack_In;
  wire [0:0]Dbg_Trig_In;
  wire mb_halted_1;
  wire sync_reset;
  wire trig_ack_in_0_synced;
  wire trig_ack_in_0_synced_1;
  wire trig_ack_in_0_synced_1_reg;
  wire trig_in_0_reg;

  FDRE #(
    .INIT(1'b0)) 
    \Single_Synchronize.use_sync_reset.sync_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(Dbg_Trig_Ack_In),
        .Q(trig_ack_in_0_synced),
        .R(sync_reset));
  LUT5 #(
    .INIT(32'hBBBB0B00)) 
    trig_in_0_i_1
       (.I0(trig_ack_in_0_synced_1),
        .I1(trig_ack_in_0_synced),
        .I2(mb_halted_1),
        .I3(trig_in_0_reg),
        .I4(Dbg_Trig_In),
        .O(trig_ack_in_0_synced_1_reg));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module block_design_microblaze_0_0_mb_sync_bit__parameterized4_31
   (trig_out_0_synced,
    \Single_Synchronize.use_sync_reset.sync_reg_0 ,
    sync_reset,
    Dbg_Trig_Out,
    Clk,
    trig_out_0_synced_1,
    Dbg_Trig_Ack_Out);
  output trig_out_0_synced;
  output \Single_Synchronize.use_sync_reset.sync_reg_0 ;
  input sync_reset;
  input [0:0]Dbg_Trig_Out;
  input Clk;
  input trig_out_0_synced_1;
  input [0:0]Dbg_Trig_Ack_Out;

  wire Clk;
  wire [0:0]Dbg_Trig_Ack_Out;
  wire [0:0]Dbg_Trig_Out;
  wire \Single_Synchronize.use_sync_reset.sync_reg_0 ;
  wire sync_reset;
  wire trig_out_0_synced;
  wire trig_out_0_synced_1;

  LUT3 #(
    .INIT(8'hB2)) 
    \Area_Debug_Control.trig_ack_out_0_i_1 
       (.I0(trig_out_0_synced),
        .I1(trig_out_0_synced_1),
        .I2(Dbg_Trig_Ack_Out),
        .O(\Single_Synchronize.use_sync_reset.sync_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \Single_Synchronize.use_sync_reset.sync_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(Dbg_Trig_Out),
        .Q(trig_out_0_synced),
        .R(sync_reset));
endmodule

module block_design_microblaze_0_0_mb_sync_vec
   (D,
    AR,
    Raw,
    Dbg_Clk,
    Scan_Reset_Sel,
    Scan_Reset,
    Scan_En);
  output [0:0]D;
  output [0:0]AR;
  input Raw;
  input Dbg_Clk;
  input Scan_Reset_Sel;
  input Scan_Reset;
  input Scan_En;

  wire [0:0]AR;
  wire [0:0]D;
  wire Dbg_Clk;
  wire Raw;
  wire Scan_En;
  wire Scan_Reset;
  wire Scan_Reset_Sel;

  block_design_microblaze_0_0_mb_sync_bit__parameterized2_86 \sync_bits[0].sync_bit 
       (.AR(AR),
        .D(D),
        .Dbg_Clk(Dbg_Clk),
        .Raw(Raw),
        .Scan_En(Scan_En),
        .Scan_Reset(Scan_Reset),
        .Scan_Reset_Sel(Scan_Reset_Sel));
endmodule

(* ORIG_REF_NAME = "mb_sync_vec" *) 
module block_design_microblaze_0_0_mb_sync_vec__parameterized1
   (sample_synced,
    if_debug_ready_i0,
    read_register_MSR0,
    read_register_PC0,
    normal_stop_cmd_i0,
    force_stop_cmd_i0,
    \Serial_Dbg_Intf.sample_synced_1_reg[8] ,
    trig_in_10,
    \Synchronize.use_sync_reset.sync_reg[2] ,
    continue_from_brk0,
    start_single_cmd0,
    \Serial_Dbg_Intf.if_debug_ready_i_reg ,
    Q,
    Dbg_Trig_In,
    Dbg_Trig_Ack_Out,
    sync_reset,
    D,
    Clk,
    \Synchronize.use_sync_reset.sync_reg[1] ,
    \Synchronize.use_sync_reset.sync_reg[1]_0 ,
    \Synchronize.use_sync_reset.sync_reg[1]_1 ,
    \Synchronize.use_sync_reset.sync_reg[1]_2 ,
    \Synchronize.use_sync_reset.sync_reg[1]_3 ,
    Dbg_Trig_Out,
    Dbg_Trig_Ack_In,
    \Synchronize.use_sync_reset.sync_reg[1]_4 );
  output [0:9]sample_synced;
  output if_debug_ready_i0;
  output read_register_MSR0;
  output read_register_PC0;
  output normal_stop_cmd_i0;
  output force_stop_cmd_i0;
  output \Serial_Dbg_Intf.sample_synced_1_reg[8] ;
  output trig_in_10;
  output \Synchronize.use_sync_reset.sync_reg[2] ;
  output continue_from_brk0;
  output start_single_cmd0;
  input \Serial_Dbg_Intf.if_debug_ready_i_reg ;
  input [7:0]Q;
  input [0:0]Dbg_Trig_In;
  input [0:0]Dbg_Trig_Ack_Out;
  input sync_reset;
  input [0:0]D;
  input Clk;
  input [0:0]\Synchronize.use_sync_reset.sync_reg[1] ;
  input [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  input [1:0]\Synchronize.use_sync_reset.sync_reg[1]_1 ;
  input [0:0]\Synchronize.use_sync_reset.sync_reg[1]_2 ;
  input [0:0]\Synchronize.use_sync_reset.sync_reg[1]_3 ;
  input [0:0]Dbg_Trig_Out;
  input [0:0]Dbg_Trig_Ack_In;
  input [0:0]\Synchronize.use_sync_reset.sync_reg[1]_4 ;

  wire Clk;
  wire [0:0]D;
  wire [0:0]Dbg_Trig_Ack_In;
  wire [0:0]Dbg_Trig_Ack_Out;
  wire [0:0]Dbg_Trig_In;
  wire [0:0]Dbg_Trig_Out;
  wire [7:0]Q;
  wire \Serial_Dbg_Intf.if_debug_ready_i_reg ;
  wire \Serial_Dbg_Intf.sample_synced_1_reg[8] ;
  wire [0:0]\Synchronize.use_sync_reset.sync_reg[1] ;
  wire [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  wire [1:0]\Synchronize.use_sync_reset.sync_reg[1]_1 ;
  wire [0:0]\Synchronize.use_sync_reset.sync_reg[1]_2 ;
  wire [0:0]\Synchronize.use_sync_reset.sync_reg[1]_3 ;
  wire [0:0]\Synchronize.use_sync_reset.sync_reg[1]_4 ;
  wire \Synchronize.use_sync_reset.sync_reg[2] ;
  wire continue_from_brk0;
  wire force_stop_cmd_i0;
  wire if_debug_ready_i0;
  wire normal_stop_cmd_i0;
  wire read_register_MSR0;
  wire read_register_PC0;
  wire [0:9]sample_synced;
  wire start_single_cmd0;
  wire sync_reset;
  wire trig_in_10;

  block_design_microblaze_0_0_mb_sync_bit_76 \sync_bits[0].sync_bit 
       (.Clk(Clk),
        .D(D),
        .Q(Q[7]),
        .normal_stop_cmd_i0(normal_stop_cmd_i0),
        .sample_synced(sample_synced[0]),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_mb_sync_bit_77 \sync_bits[1].sync_bit 
       (.Clk(Clk),
        .Q(Q[6]),
        .\Synchronize.use_sync_reset.sync_reg[1]_0 (\Synchronize.use_sync_reset.sync_reg[1] ),
        .force_stop_cmd_i0(force_stop_cmd_i0),
        .sample_synced(sample_synced[1]),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_mb_sync_bit_78 \sync_bits[2].sync_bit 
       (.Clk(Clk),
        .Dbg_Trig_In(Dbg_Trig_In),
        .Q({Q[5],Q[2],Q[0]}),
        .\Serial_Dbg_Intf.sample_synced_1_reg[8] (\Serial_Dbg_Intf.sample_synced_1_reg[8] ),
        .\Serial_Dbg_Intf.trig_in_1_pulse_reg ({sample_synced[5],sample_synced[8]}),
        .\Synchronize.use_sync_reset.sync_reg[1]_0 (\Synchronize.use_sync_reset.sync_reg[1]_0 ),
        .sample_synced(sample_synced[2]),
        .start_single_cmd0(start_single_cmd0),
        .sync_reset(sync_reset),
        .trig_in_10(trig_in_10));
  block_design_microblaze_0_0_mb_sync_bit_79 \sync_bits[3].sync_bit 
       (.Clk(Clk),
        .Q(Q[4]),
        .\Synchronize.use_sync_reset.sync_reg[1]_0 (\Synchronize.use_sync_reset.sync_reg[1]_1 [1]),
        .read_register_MSR0(read_register_MSR0),
        .sample_synced(sample_synced[3]),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_mb_sync_bit_80 \sync_bits[4].sync_bit 
       (.Clk(Clk),
        .Q(Q[3]),
        .\Synchronize.use_sync_reset.sync_reg[1]_0 (\Synchronize.use_sync_reset.sync_reg[1]_1 [0]),
        .read_register_PC0(read_register_PC0),
        .sample_synced(sample_synced[4]),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_mb_sync_bit_81 \sync_bits[5].sync_bit 
       (.Clk(Clk),
        .Q(Q[2:1]),
        .\Serial_Dbg_Intf.continue_from_brk_reg (sample_synced[7]),
        .\Synchronize.use_sync_reset.sync_reg[1]_0 (\Synchronize.use_sync_reset.sync_reg[1]_2 ),
        .continue_from_brk0(continue_from_brk0),
        .sample_synced(sample_synced[5]),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_mb_sync_bit_82 \sync_bits[6].sync_bit 
       (.Clk(Clk),
        .\Serial_Dbg_Intf.if_debug_ready_i_reg (\Serial_Dbg_Intf.if_debug_ready_i_reg ),
        .\Synchronize.use_sync_reset.sync_reg[1]_0 (\Synchronize.use_sync_reset.sync_reg[1]_3 ),
        .if_debug_ready_i0(if_debug_ready_i0),
        .sample_synced(sample_synced[6]),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_mb_sync_bit_83 \sync_bits[7].sync_bit 
       (.Clk(Clk),
        .Dbg_Trig_Ack_Out(Dbg_Trig_Ack_Out),
        .Dbg_Trig_Out(Dbg_Trig_Out),
        .Q(Q[1]),
        .\Synchronize.use_sync_reset.sync_reg[2]_0 (\Synchronize.use_sync_reset.sync_reg[2] ),
        .sample_synced(sample_synced[7]),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_mb_sync_bit_84 \sync_bits[8].sync_bit 
       (.Clk(Clk),
        .Dbg_Trig_Ack_In(Dbg_Trig_Ack_In),
        .sample_synced(sample_synced[8]),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_mb_sync_bit_85 \sync_bits[9].sync_bit 
       (.Clk(Clk),
        .\Synchronize.use_sync_reset.sync_reg[1]_0 (\Synchronize.use_sync_reset.sync_reg[1]_4 ),
        .sample_synced(sample_synced[9]),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "mb_sync_vec" *) 
module block_design_microblaze_0_0_mb_sync_vec__parameterized3
   (D,
    \Synchronize.use_sync_reset.sync_reg[2] ,
    stat_pause011_out,
    stat_pause0,
    \Serial_Dbg_Intf.start_cmd_reg ,
    \Serial_Dbg_Intf.sample_synced_1_reg[9] ,
    \Serial_Dbg_Intf.sample_synced_1_reg[8] ,
    \Serial_Dbg_Intf.sample_synced_1_reg[7] ,
    Q,
    Dbg_Trig_In,
    sync_reset,
    start_cmd,
    \Serial_Dbg_Intf.stat_pause_reg ,
    stop_cmd,
    Dbg_Trig_Ack_Out,
    \Synchronize.use_sync_reset.sync_reg[1] ,
    Clk,
    \Synchronize.use_sync_reset.sync_reg[1]_0 ,
    \Synchronize.use_sync_reset.sync_reg[1]_1 ,
    Dbg_Trig_Out,
    Dbg_Trig_Ack_In);
  output [10:0]D;
  output \Synchronize.use_sync_reset.sync_reg[2] ;
  output stat_pause011_out;
  output stat_pause0;
  output \Serial_Dbg_Intf.start_cmd_reg ;
  output \Serial_Dbg_Intf.sample_synced_1_reg[9] ;
  output \Serial_Dbg_Intf.sample_synced_1_reg[8] ;
  output \Serial_Dbg_Intf.sample_synced_1_reg[7] ;
  input [3:0]Q;
  input [1:0]Dbg_Trig_In;
  input sync_reset;
  input start_cmd;
  input \Serial_Dbg_Intf.stat_pause_reg ;
  input stop_cmd;
  input [1:0]Dbg_Trig_Ack_Out;
  input [4:0]\Synchronize.use_sync_reset.sync_reg[1] ;
  input Clk;
  input [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  input [0:0]\Synchronize.use_sync_reset.sync_reg[1]_1 ;
  input [1:0]Dbg_Trig_Out;
  input [1:0]Dbg_Trig_Ack_In;

  wire Clk;
  wire [10:0]D;
  wire [1:0]Dbg_Trig_Ack_In;
  wire [1:0]Dbg_Trig_Ack_Out;
  wire [1:0]Dbg_Trig_In;
  wire [1:0]Dbg_Trig_Out;
  wire [3:0]Q;
  wire \Serial_Dbg_Intf.sample_synced_1_reg[7] ;
  wire \Serial_Dbg_Intf.sample_synced_1_reg[8] ;
  wire \Serial_Dbg_Intf.sample_synced_1_reg[9] ;
  wire \Serial_Dbg_Intf.start_cmd_reg ;
  wire \Serial_Dbg_Intf.stat_pause_reg ;
  wire [4:0]\Synchronize.use_sync_reset.sync_reg[1] ;
  wire [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  wire [0:0]\Synchronize.use_sync_reset.sync_reg[1]_1 ;
  wire \Synchronize.use_sync_reset.sync_reg[2] ;
  wire start_cmd;
  wire stat_pause0;
  wire stat_pause011_out;
  wire stop_cmd;
  wire sync_reset;

  block_design_microblaze_0_0_mb_sync_bit_65 \sync_bits[0].sync_bit 
       (.Clk(Clk),
        .D(D[10]),
        .\Synchronize.use_sync_reset.sync_reg[1]_0 (\Synchronize.use_sync_reset.sync_reg[1] [4]),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_mb_sync_bit_66 \sync_bits[10].sync_bit 
       (.Clk(Clk),
        .D(D[0]),
        .Dbg_Trig_Ack_In(Dbg_Trig_Ack_In[1]),
        .Dbg_Trig_In(Dbg_Trig_In[1]),
        .Q(Q[0]),
        .\Serial_Dbg_Intf.Stopped_reg (stat_pause011_out),
        .\Synchronize.use_sync_reset.sync_reg[2]_0 (\Synchronize.use_sync_reset.sync_reg[2] ),
        .stat_pause0(stat_pause0),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_mb_sync_bit_67 \sync_bits[1].sync_bit 
       (.Clk(Clk),
        .D(D[9]),
        .\Synchronize.use_sync_reset.sync_reg[1]_0 (\Synchronize.use_sync_reset.sync_reg[1] [3]),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_mb_sync_bit_68 \sync_bits[2].sync_bit 
       (.Clk(Clk),
        .D(D[8]),
        .\Synchronize.use_sync_reset.sync_reg[1]_0 (\Synchronize.use_sync_reset.sync_reg[1] [2]),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_mb_sync_bit_69 \sync_bits[3].sync_bit 
       (.Clk(Clk),
        .D(D[7]),
        .\Synchronize.use_sync_reset.sync_reg[1]_0 (\Synchronize.use_sync_reset.sync_reg[1] [1]),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_mb_sync_bit_70 \sync_bits[4].sync_bit 
       (.Clk(Clk),
        .D(D[6]),
        .\Synchronize.use_sync_reset.sync_reg[1]_0 (\Synchronize.use_sync_reset.sync_reg[1] [0]),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_mb_sync_bit_71 \sync_bits[5].sync_bit 
       (.Clk(Clk),
        .D(D[5]),
        .\Synchronize.use_sync_reset.sync_reg[1]_0 (\Synchronize.use_sync_reset.sync_reg[1]_0 ),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_mb_sync_bit_72 \sync_bits[6].sync_bit 
       (.Clk(Clk),
        .D(D[4]),
        .\Synchronize.use_sync_reset.sync_reg[1]_0 (\Synchronize.use_sync_reset.sync_reg[1]_1 ),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_mb_sync_bit_73 \sync_bits[7].sync_bit 
       (.Clk(Clk),
        .Dbg_Trig_Ack_Out(Dbg_Trig_Ack_Out[0]),
        .Dbg_Trig_Out(Dbg_Trig_Out[0]),
        .Q(Q[3]),
        .\Serial_Dbg_Intf.sample_synced_1_reg[7] (\Serial_Dbg_Intf.sample_synced_1_reg[7] ),
        .\Serial_Dbg_Intf.start_cmd_reg (\Serial_Dbg_Intf.start_cmd_reg ),
        .\Serial_Dbg_Intf.stat_pause_reg (\Serial_Dbg_Intf.stat_pause_reg ),
        .\Serial_Dbg_Intf.stat_pause_reg_0 (stat_pause011_out),
        .out(D[3]),
        .start_cmd(start_cmd),
        .stat_pause0(stat_pause0),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_mb_sync_bit_74 \sync_bits[8].sync_bit 
       (.Clk(Clk),
        .D(D[2]),
        .Dbg_Trig_Ack_Out(Dbg_Trig_Ack_Out[1]),
        .Dbg_Trig_Out(Dbg_Trig_Out[1]),
        .Q(Q[2]),
        .\Serial_Dbg_Intf.sample_synced_1_reg[8] (\Serial_Dbg_Intf.sample_synced_1_reg[8] ),
        .\Serial_Dbg_Intf.stop_cmd_reg (stat_pause011_out),
        .stop_cmd(stop_cmd),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_mb_sync_bit_75 \sync_bits[9].sync_bit 
       (.Clk(Clk),
        .D(D[1]),
        .Dbg_Trig_Ack_In(Dbg_Trig_Ack_In[0]),
        .Dbg_Trig_In(Dbg_Trig_In[0]),
        .Q(Q[1]),
        .\Serial_Dbg_Intf.Started_reg (stat_pause011_out),
        .\Serial_Dbg_Intf.sample_synced_1_reg[9] (\Serial_Dbg_Intf.sample_synced_1_reg[9] ),
        .stat_pause0(stat_pause0),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "mb_sync_vec" *) 
module block_design_microblaze_0_0_mb_sync_vec__parameterized5
   (D,
    \Synchronize.use_sync_reset.sync_reg[2] ,
    stopped_i0,
    \Serial_Dbg_Intf.sample_synced_1_reg[4] ,
    \Use_Async_Reset.sync_reset_reg ,
    stopped_i1,
    \Serial_Dbg_Intf.sample_synced_1_reg[4]_0 ,
    \Serial_Dbg_Intf.sample_synced_1_reg[5] ,
    Q,
    Dbg_Trig_In,
    sync_reset,
    start_cmd,
    Dbg_Trig_Ack_Out,
    full_i,
    stop_cmd,
    \Synchronize.use_sync_reset.sync_reg[1] ,
    Clk,
    Dbg_Trig_Out,
    \Synchronize.use_sync_reset.sync_reg[1]_0 ,
    Dbg_Trig_Ack_In);
  output [8:0]D;
  output \Synchronize.use_sync_reset.sync_reg[2] ;
  output stopped_i0;
  output \Serial_Dbg_Intf.sample_synced_1_reg[4] ;
  output \Use_Async_Reset.sync_reset_reg ;
  output stopped_i1;
  output \Serial_Dbg_Intf.sample_synced_1_reg[4]_0 ;
  output \Serial_Dbg_Intf.sample_synced_1_reg[5] ;
  input [4:0]Q;
  input [1:0]Dbg_Trig_In;
  input sync_reset;
  input start_cmd;
  input [1:0]Dbg_Trig_Ack_Out;
  input full_i;
  input stop_cmd;
  input [3:0]\Synchronize.use_sync_reset.sync_reg[1] ;
  input Clk;
  input [1:0]Dbg_Trig_Out;
  input [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  input [1:0]Dbg_Trig_Ack_In;

  wire Clk;
  wire [8:0]D;
  wire [1:0]Dbg_Trig_Ack_In;
  wire [1:0]Dbg_Trig_Ack_Out;
  wire [1:0]Dbg_Trig_In;
  wire [1:0]Dbg_Trig_Out;
  wire [4:0]Q;
  wire \Serial_Dbg_Intf.sample_synced_1_reg[4] ;
  wire \Serial_Dbg_Intf.sample_synced_1_reg[4]_0 ;
  wire \Serial_Dbg_Intf.sample_synced_1_reg[5] ;
  wire [3:0]\Synchronize.use_sync_reset.sync_reg[1] ;
  wire [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  wire \Synchronize.use_sync_reset.sync_reg[2] ;
  wire \Use_Async_Reset.sync_reset_reg ;
  wire full_i;
  wire start_cmd;
  wire stop_cmd;
  wire stopped_i0;
  wire stopped_i1;
  wire sync_reset;

  block_design_microblaze_0_0_mb_sync_bit_51 \sync_bits[0].sync_bit 
       (.Clk(Clk),
        .D(D[8]),
        .\Synchronize.use_sync_reset.sync_reg[1]_0 (\Synchronize.use_sync_reset.sync_reg[1] [3]),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_mb_sync_bit_52 \sync_bits[1].sync_bit 
       (.Clk(Clk),
        .D(D[7]),
        .\Synchronize.use_sync_reset.sync_reg[1]_0 (\Synchronize.use_sync_reset.sync_reg[1] [2]),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_mb_sync_bit_53 \sync_bits[2].sync_bit 
       (.Clk(Clk),
        .D(D[6]),
        .\Synchronize.use_sync_reset.sync_reg[1]_0 (\Synchronize.use_sync_reset.sync_reg[1] [1]),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_mb_sync_bit_54 \sync_bits[3].sync_bit 
       (.Clk(Clk),
        .D(D[5]),
        .\Synchronize.use_sync_reset.sync_reg[1]_0 (\Synchronize.use_sync_reset.sync_reg[1] [0]),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_mb_sync_bit_55 \sync_bits[4].sync_bit 
       (.Clk(Clk),
        .D({D[2],D[0]}),
        .Dbg_Trig_Ack_Out(Dbg_Trig_Ack_Out[0]),
        .Dbg_Trig_In(Dbg_Trig_In[1]),
        .Dbg_Trig_Out(Dbg_Trig_Out[0]),
        .Q({Q[4],Q[2],Q[0]}),
        .\Serial_Dbg_Intf.sample_synced_1_reg[4] (\Serial_Dbg_Intf.sample_synced_1_reg[4] ),
        .\Serial_Dbg_Intf.sample_synced_1_reg[4]_0 (\Serial_Dbg_Intf.sample_synced_1_reg[4]_0 ),
        .\Use_Async_Reset.sync_reset_reg (\Use_Async_Reset.sync_reset_reg ),
        .out(D[4]),
        .start_cmd(start_cmd),
        .stopped_i0(stopped_i0),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_mb_sync_bit_56 \sync_bits[5].sync_bit 
       (.Clk(Clk),
        .D(D[3]),
        .Dbg_Trig_Ack_Out(Dbg_Trig_Ack_Out[1]),
        .Dbg_Trig_Out(Dbg_Trig_Out[1]),
        .Q(Q[3]),
        .\Serial_Dbg_Intf.sample_synced_1_reg[5] (\Serial_Dbg_Intf.sample_synced_1_reg[5] ),
        .full_i(full_i),
        .stop_cmd(stop_cmd),
        .stopped_i0(stopped_i0),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_mb_sync_bit_57 \sync_bits[6].sync_bit 
       (.Clk(Clk),
        .D(D[2]),
        .Q({Q[4],Q[2]}),
        .\Serial_Dbg_Intf.Started_Pulse_reg (D[4]),
        .\Synchronize.use_sync_reset.sync_reg[1]_0 (\Synchronize.use_sync_reset.sync_reg[1]_0 ),
        .start_cmd(start_cmd),
        .stopped_i1(stopped_i1),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_mb_sync_bit_58 \sync_bits[7].sync_bit 
       (.Clk(Clk),
        .D(D[1]),
        .Dbg_Trig_Ack_In(Dbg_Trig_Ack_In[0]),
        .Dbg_Trig_In(Dbg_Trig_In[0]),
        .Q(Q[1]),
        .\Serial_Dbg_Intf.Started_reg (\Serial_Dbg_Intf.sample_synced_1_reg[4] ),
        .\Synchronize.use_sync_reset.sync_reg[2]_0 (\Synchronize.use_sync_reset.sync_reg[2] ),
        .stopped_i0(stopped_i0),
        .sync_reset(sync_reset));
  block_design_microblaze_0_0_mb_sync_bit_59 \sync_bits[8].sync_bit 
       (.Clk(Clk),
        .D(D[0]),
        .Dbg_Trig_Ack_In(Dbg_Trig_Ack_In[1]),
        .sync_reset(sync_reset));
endmodule

module block_design_microblaze_0_0_mul_unit
   (mul_Result,
    Clk,
    op2_C,
    B,
    \Using_FPGA.DSP48E1_I1 ,
    A,
    \Using_FPGA.DSP48E1_I1_0 ,
    \Using_FPGA.DSP48E1_I1_1 ,
    sync_reset,
    mem_mulh_instr0,
    ex_mulhu_instr,
    ex_not_mul_op);
  output [0:31]mul_Result;
  input Clk;
  input [25:0]op2_C;
  input [3:0]B;
  input \Using_FPGA.DSP48E1_I1 ;
  input [16:0]A;
  input [15:0]\Using_FPGA.DSP48E1_I1_0 ;
  input [1:0]\Using_FPGA.DSP48E1_I1_1 ;
  input sync_reset;
  input mem_mulh_instr0;
  input ex_mulhu_instr;
  input ex_not_mul_op;

  wire [16:0]A;
  wire [3:0]B;
  wire Clk;
  wire \Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.dsp_module_I3_n_63 ;
  wire \Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.dsp_module_I3_n_64 ;
  wire \Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul32_result[15]_i_1_n_0 ;
  wire \Using_FPGA.DSP48E1_I1 ;
  wire [15:0]\Using_FPGA.DSP48E1_I1_0 ;
  wire [1:0]\Using_FPGA.DSP48E1_I1_1 ;
  wire ex_mulhu_instr;
  wire ex_not_mul_op;
  wire [0:47]mem_ad_pout;
  wire [14:0]mem_bc_p;
  wire [0:47]mem_bc_pout;
  wire [16:0]mem_bd_p;
  wire [0:47]mem_bd_pout;
  wire mem_mulh_instr;
  wire mem_mulh_instr0;
  wire mem_mulhu_instr;
  wire [0:31]mul_Result;
  wire [25:0]op2_C;
  wire sync_reset;
  wire [0:31]wb_mul32_result;
  wire [0:31]wb_mul64_result;

  block_design_microblaze_0_0_dsp_module__parameterized1 \Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.dsp_module_I2 
       (.B({op2_C[11:0],B,\Using_FPGA.DSP48E1_I1 }),
        .Clk(Clk),
        .PCOUT({mem_ad_pout[0],mem_ad_pout[1],mem_ad_pout[2],mem_ad_pout[3],mem_ad_pout[4],mem_ad_pout[5],mem_ad_pout[6],mem_ad_pout[7],mem_ad_pout[8],mem_ad_pout[9],mem_ad_pout[10],mem_ad_pout[11],mem_ad_pout[12],mem_ad_pout[13],mem_ad_pout[14],mem_ad_pout[15],mem_ad_pout[16],mem_ad_pout[17],mem_ad_pout[18],mem_ad_pout[19],mem_ad_pout[20],mem_ad_pout[21],mem_ad_pout[22],mem_ad_pout[23],mem_ad_pout[24],mem_ad_pout[25],mem_ad_pout[26],mem_ad_pout[27],mem_ad_pout[28],mem_ad_pout[29],mem_ad_pout[30],mem_ad_pout[31],mem_ad_pout[32],mem_ad_pout[33],mem_ad_pout[34],mem_ad_pout[35],mem_ad_pout[36],mem_ad_pout[37],mem_ad_pout[38],mem_ad_pout[39],mem_ad_pout[40],mem_ad_pout[41],mem_ad_pout[42],mem_ad_pout[43],mem_ad_pout[44],mem_ad_pout[45],mem_ad_pout[46],mem_ad_pout[47]}),
        .\Using_FPGA.DSP48E1_I1 (\Using_FPGA.DSP48E1_I1_0 ),
        .\Using_FPGA.DSP48E1_I1_0 ({mem_bd_pout[0],mem_bd_pout[1],mem_bd_pout[2],mem_bd_pout[3],mem_bd_pout[4],mem_bd_pout[5],mem_bd_pout[6],mem_bd_pout[7],mem_bd_pout[8],mem_bd_pout[9],mem_bd_pout[10],mem_bd_pout[11],mem_bd_pout[12],mem_bd_pout[13],mem_bd_pout[14],mem_bd_pout[15],mem_bd_pout[16],mem_bd_pout[17],mem_bd_pout[18],mem_bd_pout[19],mem_bd_pout[20],mem_bd_pout[21],mem_bd_pout[22],mem_bd_pout[23],mem_bd_pout[24],mem_bd_pout[25],mem_bd_pout[26],mem_bd_pout[27],mem_bd_pout[28],mem_bd_pout[29],mem_bd_pout[30],mem_bd_pout[31],mem_bd_pout[32],mem_bd_pout[33],mem_bd_pout[34],mem_bd_pout[35],mem_bd_pout[36],mem_bd_pout[37],mem_bd_pout[38],mem_bd_pout[39],mem_bd_pout[40],mem_bd_pout[41],mem_bd_pout[42],mem_bd_pout[43],mem_bd_pout[44],mem_bd_pout[45],mem_bd_pout[46],mem_bd_pout[47]}));
  block_design_microblaze_0_0_dsp_module__parameterized3 \Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.dsp_module_I3 
       (.A(A),
        .B({\Using_FPGA.DSP48E1_I1_1 ,op2_C[25:12]}),
        .Clk(Clk),
        .P(mem_bc_p),
        .PCOUT({mem_bc_pout[0],mem_bc_pout[1],mem_bc_pout[2],mem_bc_pout[3],mem_bc_pout[4],mem_bc_pout[5],mem_bc_pout[6],mem_bc_pout[7],mem_bc_pout[8],mem_bc_pout[9],mem_bc_pout[10],mem_bc_pout[11],mem_bc_pout[12],mem_bc_pout[13],mem_bc_pout[14],mem_bc_pout[15],mem_bc_pout[16],mem_bc_pout[17],mem_bc_pout[18],mem_bc_pout[19],mem_bc_pout[20],mem_bc_pout[21],mem_bc_pout[22],mem_bc_pout[23],mem_bc_pout[24],mem_bc_pout[25],mem_bc_pout[26],mem_bc_pout[27],mem_bc_pout[28],mem_bc_pout[29],mem_bc_pout[30],mem_bc_pout[31],mem_bc_pout[32],mem_bc_pout[33],mem_bc_pout[34],mem_bc_pout[35],mem_bc_pout[36],mem_bc_pout[37],mem_bc_pout[38],mem_bc_pout[39],mem_bc_pout[40],mem_bc_pout[41],mem_bc_pout[42],mem_bc_pout[43],mem_bc_pout[44],mem_bc_pout[45],mem_bc_pout[46],mem_bc_pout[47]}),
        .\Using_FPGA.DSP48E1_I1 (\Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.dsp_module_I3_n_63 ),
        .\Using_FPGA.DSP48E1_I1_0 (\Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.dsp_module_I3_n_64 ),
        .\Using_FPGA.DSP48E1_I1_1 ({mem_ad_pout[0],mem_ad_pout[1],mem_ad_pout[2],mem_ad_pout[3],mem_ad_pout[4],mem_ad_pout[5],mem_ad_pout[6],mem_ad_pout[7],mem_ad_pout[8],mem_ad_pout[9],mem_ad_pout[10],mem_ad_pout[11],mem_ad_pout[12],mem_ad_pout[13],mem_ad_pout[14],mem_ad_pout[15],mem_ad_pout[16],mem_ad_pout[17],mem_ad_pout[18],mem_ad_pout[19],mem_ad_pout[20],mem_ad_pout[21],mem_ad_pout[22],mem_ad_pout[23],mem_ad_pout[24],mem_ad_pout[25],mem_ad_pout[26],mem_ad_pout[27],mem_ad_pout[28],mem_ad_pout[29],mem_ad_pout[30],mem_ad_pout[31],mem_ad_pout[32],mem_ad_pout[33],mem_ad_pout[34],mem_ad_pout[35],mem_ad_pout[36],mem_ad_pout[37],mem_ad_pout[38],mem_ad_pout[39],mem_ad_pout[40],mem_ad_pout[41],mem_ad_pout[42],mem_ad_pout[43],mem_ad_pout[44],mem_ad_pout[45],mem_ad_pout[46],mem_ad_pout[47]}),
        .ex_not_mul_op(ex_not_mul_op),
        .mem_mulh_instr(mem_mulh_instr),
        .mem_mulhu_instr(mem_mulhu_instr));
  block_design_microblaze_0_0_dsp_module__parameterized5_156 \Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.dsp_module_I4 
       (.B({\Using_FPGA.DSP48E1_I1_1 ,op2_C[25:12]}),
        .Clk(Clk),
        .P({wb_mul64_result[0],wb_mul64_result[1],wb_mul64_result[2],wb_mul64_result[3],wb_mul64_result[4],wb_mul64_result[5],wb_mul64_result[6],wb_mul64_result[7],wb_mul64_result[8],wb_mul64_result[9],wb_mul64_result[10],wb_mul64_result[11],wb_mul64_result[12],wb_mul64_result[13],wb_mul64_result[14],wb_mul64_result[15],wb_mul64_result[16],wb_mul64_result[17],wb_mul64_result[18],wb_mul64_result[19],wb_mul64_result[20],wb_mul64_result[21],wb_mul64_result[22],wb_mul64_result[23],wb_mul64_result[24],wb_mul64_result[25],wb_mul64_result[26],wb_mul64_result[27],wb_mul64_result[28],wb_mul64_result[29]}),
        .PCOUT({mem_bc_pout[0],mem_bc_pout[1],mem_bc_pout[2],mem_bc_pout[3],mem_bc_pout[4],mem_bc_pout[5],mem_bc_pout[6],mem_bc_pout[7],mem_bc_pout[8],mem_bc_pout[9],mem_bc_pout[10],mem_bc_pout[11],mem_bc_pout[12],mem_bc_pout[13],mem_bc_pout[14],mem_bc_pout[15],mem_bc_pout[16],mem_bc_pout[17],mem_bc_pout[18],mem_bc_pout[19],mem_bc_pout[20],mem_bc_pout[21],mem_bc_pout[22],mem_bc_pout[23],mem_bc_pout[24],mem_bc_pout[25],mem_bc_pout[26],mem_bc_pout[27],mem_bc_pout[28],mem_bc_pout[29],mem_bc_pout[30],mem_bc_pout[31],mem_bc_pout[32],mem_bc_pout[33],mem_bc_pout[34],mem_bc_pout[35],mem_bc_pout[36],mem_bc_pout[37],mem_bc_pout[38],mem_bc_pout[39],mem_bc_pout[40],mem_bc_pout[41],mem_bc_pout[42],mem_bc_pout[43],mem_bc_pout[44],mem_bc_pout[45],mem_bc_pout[46],mem_bc_pout[47]}),
        .\Using_FPGA.DSP48E1_I1 (\Using_FPGA.DSP48E1_I1_0 ),
        .ex_not_mul_op(ex_not_mul_op),
        .mem_mulh_instr(mem_mulh_instr),
        .mem_mulhu_instr(mem_mulhu_instr));
  LUT3 #(
    .INIT(8'hFE)) 
    \Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul32_result[15]_i_1 
       (.I0(ex_not_mul_op),
        .I1(mem_mulh_instr),
        .I2(mem_mulhu_instr),
        .O(\Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul32_result[15]_i_1_n_0 ));
  FDRE \Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul32_result_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(mem_bc_p[14]),
        .Q(wb_mul32_result[0]),
        .R(\Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul32_result[15]_i_1_n_0 ));
  FDRE \Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul32_result_reg[10] 
       (.C(Clk),
        .CE(1'b1),
        .D(mem_bc_p[4]),
        .Q(wb_mul32_result[10]),
        .R(\Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul32_result[15]_i_1_n_0 ));
  FDRE \Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul32_result_reg[11] 
       (.C(Clk),
        .CE(1'b1),
        .D(mem_bc_p[3]),
        .Q(wb_mul32_result[11]),
        .R(\Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul32_result[15]_i_1_n_0 ));
  FDRE \Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul32_result_reg[12] 
       (.C(Clk),
        .CE(1'b1),
        .D(mem_bc_p[2]),
        .Q(wb_mul32_result[12]),
        .R(\Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul32_result[15]_i_1_n_0 ));
  FDRE \Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul32_result_reg[13] 
       (.C(Clk),
        .CE(1'b1),
        .D(mem_bc_p[1]),
        .Q(wb_mul32_result[13]),
        .R(\Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul32_result[15]_i_1_n_0 ));
  FDRE \Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul32_result_reg[14] 
       (.C(Clk),
        .CE(1'b1),
        .D(mem_bc_p[0]),
        .Q(wb_mul32_result[14]),
        .R(\Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul32_result[15]_i_1_n_0 ));
  FDRE \Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul32_result_reg[15] 
       (.C(Clk),
        .CE(1'b1),
        .D(mem_bd_p[16]),
        .Q(wb_mul32_result[15]),
        .R(\Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul32_result[15]_i_1_n_0 ));
  FDRE \Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul32_result_reg[16] 
       (.C(Clk),
        .CE(1'b1),
        .D(mem_bd_p[15]),
        .Q(wb_mul32_result[16]),
        .R(\Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul32_result[15]_i_1_n_0 ));
  FDRE \Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul32_result_reg[17] 
       (.C(Clk),
        .CE(1'b1),
        .D(mem_bd_p[14]),
        .Q(wb_mul32_result[17]),
        .R(\Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul32_result[15]_i_1_n_0 ));
  FDRE \Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul32_result_reg[18] 
       (.C(Clk),
        .CE(1'b1),
        .D(mem_bd_p[13]),
        .Q(wb_mul32_result[18]),
        .R(\Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul32_result[15]_i_1_n_0 ));
  FDRE \Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul32_result_reg[19] 
       (.C(Clk),
        .CE(1'b1),
        .D(mem_bd_p[12]),
        .Q(wb_mul32_result[19]),
        .R(\Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul32_result[15]_i_1_n_0 ));
  FDRE \Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul32_result_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(mem_bc_p[13]),
        .Q(wb_mul32_result[1]),
        .R(\Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul32_result[15]_i_1_n_0 ));
  FDRE \Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul32_result_reg[20] 
       (.C(Clk),
        .CE(1'b1),
        .D(mem_bd_p[11]),
        .Q(wb_mul32_result[20]),
        .R(\Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul32_result[15]_i_1_n_0 ));
  FDRE \Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul32_result_reg[21] 
       (.C(Clk),
        .CE(1'b1),
        .D(mem_bd_p[10]),
        .Q(wb_mul32_result[21]),
        .R(\Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul32_result[15]_i_1_n_0 ));
  FDRE \Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul32_result_reg[22] 
       (.C(Clk),
        .CE(1'b1),
        .D(mem_bd_p[9]),
        .Q(wb_mul32_result[22]),
        .R(\Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul32_result[15]_i_1_n_0 ));
  FDRE \Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul32_result_reg[23] 
       (.C(Clk),
        .CE(1'b1),
        .D(mem_bd_p[8]),
        .Q(wb_mul32_result[23]),
        .R(\Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul32_result[15]_i_1_n_0 ));
  FDRE \Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul32_result_reg[24] 
       (.C(Clk),
        .CE(1'b1),
        .D(mem_bd_p[7]),
        .Q(wb_mul32_result[24]),
        .R(\Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul32_result[15]_i_1_n_0 ));
  FDRE \Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul32_result_reg[25] 
       (.C(Clk),
        .CE(1'b1),
        .D(mem_bd_p[6]),
        .Q(wb_mul32_result[25]),
        .R(\Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul32_result[15]_i_1_n_0 ));
  FDRE \Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul32_result_reg[26] 
       (.C(Clk),
        .CE(1'b1),
        .D(mem_bd_p[5]),
        .Q(wb_mul32_result[26]),
        .R(\Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul32_result[15]_i_1_n_0 ));
  FDRE \Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul32_result_reg[27] 
       (.C(Clk),
        .CE(1'b1),
        .D(mem_bd_p[4]),
        .Q(wb_mul32_result[27]),
        .R(\Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul32_result[15]_i_1_n_0 ));
  FDRE \Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul32_result_reg[28] 
       (.C(Clk),
        .CE(1'b1),
        .D(mem_bd_p[3]),
        .Q(wb_mul32_result[28]),
        .R(\Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul32_result[15]_i_1_n_0 ));
  FDRE \Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul32_result_reg[29] 
       (.C(Clk),
        .CE(1'b1),
        .D(mem_bd_p[2]),
        .Q(wb_mul32_result[29]),
        .R(\Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul32_result[15]_i_1_n_0 ));
  FDRE \Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul32_result_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(mem_bc_p[12]),
        .Q(wb_mul32_result[2]),
        .R(\Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul32_result[15]_i_1_n_0 ));
  FDRE \Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul32_result_reg[30] 
       (.C(Clk),
        .CE(1'b1),
        .D(mem_bd_p[1]),
        .Q(wb_mul32_result[30]),
        .R(\Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul32_result[15]_i_1_n_0 ));
  FDRE \Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul32_result_reg[31] 
       (.C(Clk),
        .CE(1'b1),
        .D(mem_bd_p[0]),
        .Q(wb_mul32_result[31]),
        .R(\Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul32_result[15]_i_1_n_0 ));
  FDRE \Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul32_result_reg[3] 
       (.C(Clk),
        .CE(1'b1),
        .D(mem_bc_p[11]),
        .Q(wb_mul32_result[3]),
        .R(\Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul32_result[15]_i_1_n_0 ));
  FDRE \Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul32_result_reg[4] 
       (.C(Clk),
        .CE(1'b1),
        .D(mem_bc_p[10]),
        .Q(wb_mul32_result[4]),
        .R(\Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul32_result[15]_i_1_n_0 ));
  FDRE \Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul32_result_reg[5] 
       (.C(Clk),
        .CE(1'b1),
        .D(mem_bc_p[9]),
        .Q(wb_mul32_result[5]),
        .R(\Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul32_result[15]_i_1_n_0 ));
  FDRE \Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul32_result_reg[6] 
       (.C(Clk),
        .CE(1'b1),
        .D(mem_bc_p[8]),
        .Q(wb_mul32_result[6]),
        .R(\Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul32_result[15]_i_1_n_0 ));
  FDRE \Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul32_result_reg[7] 
       (.C(Clk),
        .CE(1'b1),
        .D(mem_bc_p[7]),
        .Q(wb_mul32_result[7]),
        .R(\Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul32_result[15]_i_1_n_0 ));
  FDRE \Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul32_result_reg[8] 
       (.C(Clk),
        .CE(1'b1),
        .D(mem_bc_p[6]),
        .Q(wb_mul32_result[8]),
        .R(\Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul32_result[15]_i_1_n_0 ));
  FDRE \Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul32_result_reg[9] 
       (.C(Clk),
        .CE(1'b1),
        .D(mem_bc_p[5]),
        .Q(wb_mul32_result[9]),
        .R(\Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul32_result[15]_i_1_n_0 ));
  FDRE \Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul64_result_reg[30] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.dsp_module_I3_n_63 ),
        .Q(wb_mul64_result[30]),
        .R(1'b0));
  FDRE \Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.wb_mul64_result_reg[31] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Use_HW_MUL.Using_DSP48_Architectures.Doing_mul64.Virtex_MUL64.dsp_module_I3_n_64 ),
        .Q(wb_mul64_result[31]),
        .R(1'b0));
  block_design_microblaze_0_0_dsp_module_157 \Use_HW_MUL.Using_DSP48_Architectures.dsp_module_I1 
       (.A(A),
        .B({op2_C[11:0],B,\Using_FPGA.DSP48E1_I1 }),
        .Clk(Clk),
        .P(mem_bd_p),
        .\Using_FPGA.DSP48E1_I1 ({mem_bd_pout[0],mem_bd_pout[1],mem_bd_pout[2],mem_bd_pout[3],mem_bd_pout[4],mem_bd_pout[5],mem_bd_pout[6],mem_bd_pout[7],mem_bd_pout[8],mem_bd_pout[9],mem_bd_pout[10],mem_bd_pout[11],mem_bd_pout[12],mem_bd_pout[13],mem_bd_pout[14],mem_bd_pout[15],mem_bd_pout[16],mem_bd_pout[17],mem_bd_pout[18],mem_bd_pout[19],mem_bd_pout[20],mem_bd_pout[21],mem_bd_pout[22],mem_bd_pout[23],mem_bd_pout[24],mem_bd_pout[25],mem_bd_pout[26],mem_bd_pout[27],mem_bd_pout[28],mem_bd_pout[29],mem_bd_pout[30],mem_bd_pout[31],mem_bd_pout[32],mem_bd_pout[33],mem_bd_pout[34],mem_bd_pout[35],mem_bd_pout[36],mem_bd_pout[37],mem_bd_pout[38],mem_bd_pout[39],mem_bd_pout[40],mem_bd_pout[41],mem_bd_pout[42],mem_bd_pout[43],mem_bd_pout[44],mem_bd_pout[45],mem_bd_pout[46],mem_bd_pout[47]}));
  FDRE \Use_HW_MUL.Using_Mul64_1.mem_mulh_instr_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(mem_mulh_instr0),
        .Q(mem_mulh_instr),
        .R(sync_reset));
  FDRE \Use_HW_MUL.Using_Mul64_1.mem_mulhu_instr_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_mulhu_instr),
        .Q(mem_mulhu_instr),
        .R(sync_reset));
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.Native_i_2 
       (.I0(wb_mul32_result[31]),
        .I1(wb_mul64_result[31]),
        .O(mul_Result[31]));
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.Native_i_2__0 
       (.I0(wb_mul32_result[30]),
        .I1(wb_mul64_result[30]),
        .O(mul_Result[30]));
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.Native_i_2__1 
       (.I0(wb_mul32_result[29]),
        .I1(wb_mul64_result[29]),
        .O(mul_Result[29]));
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.Native_i_2__10 
       (.I0(wb_mul32_result[20]),
        .I1(wb_mul64_result[20]),
        .O(mul_Result[20]));
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.Native_i_2__11 
       (.I0(wb_mul32_result[19]),
        .I1(wb_mul64_result[19]),
        .O(mul_Result[19]));
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.Native_i_2__12 
       (.I0(wb_mul32_result[18]),
        .I1(wb_mul64_result[18]),
        .O(mul_Result[18]));
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.Native_i_2__13 
       (.I0(wb_mul32_result[17]),
        .I1(wb_mul64_result[17]),
        .O(mul_Result[17]));
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.Native_i_2__14 
       (.I0(wb_mul32_result[16]),
        .I1(wb_mul64_result[16]),
        .O(mul_Result[16]));
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.Native_i_2__15 
       (.I0(wb_mul32_result[15]),
        .I1(wb_mul64_result[15]),
        .O(mul_Result[15]));
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.Native_i_2__16 
       (.I0(wb_mul32_result[14]),
        .I1(wb_mul64_result[14]),
        .O(mul_Result[14]));
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.Native_i_2__17 
       (.I0(wb_mul32_result[13]),
        .I1(wb_mul64_result[13]),
        .O(mul_Result[13]));
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.Native_i_2__18 
       (.I0(wb_mul32_result[12]),
        .I1(wb_mul64_result[12]),
        .O(mul_Result[12]));
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.Native_i_2__19 
       (.I0(wb_mul32_result[11]),
        .I1(wb_mul64_result[11]),
        .O(mul_Result[11]));
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.Native_i_2__2 
       (.I0(wb_mul32_result[28]),
        .I1(wb_mul64_result[28]),
        .O(mul_Result[28]));
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.Native_i_2__20 
       (.I0(wb_mul32_result[10]),
        .I1(wb_mul64_result[10]),
        .O(mul_Result[10]));
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.Native_i_2__21 
       (.I0(wb_mul32_result[9]),
        .I1(wb_mul64_result[9]),
        .O(mul_Result[9]));
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.Native_i_2__22 
       (.I0(wb_mul32_result[8]),
        .I1(wb_mul64_result[8]),
        .O(mul_Result[8]));
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.Native_i_2__23 
       (.I0(wb_mul32_result[7]),
        .I1(wb_mul64_result[7]),
        .O(mul_Result[7]));
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.Native_i_2__24 
       (.I0(wb_mul32_result[6]),
        .I1(wb_mul64_result[6]),
        .O(mul_Result[6]));
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.Native_i_2__25 
       (.I0(wb_mul32_result[5]),
        .I1(wb_mul64_result[5]),
        .O(mul_Result[5]));
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.Native_i_2__26 
       (.I0(wb_mul32_result[4]),
        .I1(wb_mul64_result[4]),
        .O(mul_Result[4]));
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.Native_i_2__27 
       (.I0(wb_mul32_result[3]),
        .I1(wb_mul64_result[3]),
        .O(mul_Result[3]));
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.Native_i_2__28 
       (.I0(wb_mul32_result[2]),
        .I1(wb_mul64_result[2]),
        .O(mul_Result[2]));
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.Native_i_2__29 
       (.I0(wb_mul32_result[1]),
        .I1(wb_mul64_result[1]),
        .O(mul_Result[1]));
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.Native_i_2__3 
       (.I0(wb_mul32_result[27]),
        .I1(wb_mul64_result[27]),
        .O(mul_Result[27]));
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.Native_i_2__30 
       (.I0(wb_mul32_result[0]),
        .I1(wb_mul64_result[0]),
        .O(mul_Result[0]));
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.Native_i_2__4 
       (.I0(wb_mul32_result[26]),
        .I1(wb_mul64_result[26]),
        .O(mul_Result[26]));
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.Native_i_2__5 
       (.I0(wb_mul32_result[25]),
        .I1(wb_mul64_result[25]),
        .O(mul_Result[25]));
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.Native_i_2__6 
       (.I0(wb_mul32_result[24]),
        .I1(wb_mul64_result[24]),
        .O(mul_Result[24]));
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.Native_i_2__7 
       (.I0(wb_mul32_result[23]),
        .I1(wb_mul64_result[23]),
        .O(mul_Result[23]));
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.Native_i_2__8 
       (.I0(wb_mul32_result[22]),
        .I1(wb_mul64_result[22]),
        .O(mul_Result[22]));
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.Native_i_2__9 
       (.I0(wb_mul32_result[21]),
        .I1(wb_mul64_result[21]),
        .O(mul_Result[21]));
endmodule

module block_design_microblaze_0_0_mux4_8
   (D,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] ,
    sel_Write_Mux_MSB);
  output [15:0]D;
  input [0:31]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] ;
  input [1:0]sel_Write_Mux_MSB;

  wire [0:31]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] ;
  wire [15:0]D;
  wire [1:0]sel_Write_Mux_MSB;

  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_1061 \GEN4_LOOP[0].BYTESTEER_LUT6 
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] ({\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [0],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [8],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [16],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [24]}),
        .D({D[15],D[7]}),
        .sel_Write_Mux_MSB(sel_Write_Mux_MSB));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_1062 \GEN4_LOOP[1].BYTESTEER_LUT6 
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[22] ({\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [1],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [9],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [17],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [25]}),
        .D({D[14],D[6]}),
        .sel_Write_Mux_MSB(sel_Write_Mux_MSB));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_1063 \GEN4_LOOP[2].BYTESTEER_LUT6 
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[21] ({\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [2],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [10],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [18],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [26]}),
        .D({D[13],D[5]}),
        .sel_Write_Mux_MSB(sel_Write_Mux_MSB));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_1064 \GEN4_LOOP[3].BYTESTEER_LUT6 
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[20] ({\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [3],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [11],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [19],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [27]}),
        .D({D[12],D[4]}),
        .sel_Write_Mux_MSB(sel_Write_Mux_MSB));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_1065 \GEN4_LOOP[4].BYTESTEER_LUT6 
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[19] ({\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [4],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [12],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [20],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [28]}),
        .D({D[11],D[3]}),
        .sel_Write_Mux_MSB(sel_Write_Mux_MSB));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_1066 \GEN4_LOOP[5].BYTESTEER_LUT6 
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[18] ({\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [5],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [13],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [21],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [29]}),
        .D({D[10],D[2]}),
        .sel_Write_Mux_MSB(sel_Write_Mux_MSB));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_1067 \GEN4_LOOP[6].BYTESTEER_LUT6 
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[17] ({\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [6],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [14],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [22],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [30]}),
        .D({D[9],D[1]}),
        .sel_Write_Mux_MSB(sel_Write_Mux_MSB));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_1068 \GEN4_LOOP[7].BYTESTEER_LUT6 
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[16] ({\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [7],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [15],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [23],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [31]}),
        .D({D[8],D[0]}),
        .sel_Write_Mux_MSB(sel_Write_Mux_MSB));
endmodule

module block_design_microblaze_0_0_mux_bus
   (Y,
    Instr_Data,
    Instr,
    LOCKSTEP_Master_Out);
  output [0:31]Y;
  output [0:0]Instr_Data;
  input [0:31]Instr;
  input [32:0]LOCKSTEP_Master_Out;

  wire [0:31]Instr;
  wire [0:0]Instr_Data;
  wire [32:0]LOCKSTEP_Master_Out;
  wire [0:31]Y;

  block_design_microblaze_0_0_MB_LUT6_2__parameterized4 \Mux_Loop[0].I_MUX_LUT6 
       (.Instr({Instr[0],Instr[16]}),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[32:31],LOCKSTEP_Master_Out[15]}),
        .Y({Y[0],Y[16]}));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_1 \Mux_Loop[10].I_MUX_LUT6 
       (.Instr({Instr[10],Instr[26]}),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[32],LOCKSTEP_Master_Out[21],LOCKSTEP_Master_Out[5]}),
        .Y({Y[10],Y[26]}));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_2 \Mux_Loop[11].I_MUX_LUT6 
       (.Instr({Instr[11],Instr[27]}),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[32],LOCKSTEP_Master_Out[20],LOCKSTEP_Master_Out[4]}),
        .Y({Y[11],Y[27]}));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_3 \Mux_Loop[12].I_MUX_LUT6 
       (.Instr({Instr[12],Instr[28]}),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[32],LOCKSTEP_Master_Out[19],LOCKSTEP_Master_Out[3]}),
        .Y({Y[12],Y[28]}));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_4 \Mux_Loop[13].I_MUX_LUT6 
       (.Instr({Instr[13],Instr[29]}),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[32],LOCKSTEP_Master_Out[18],LOCKSTEP_Master_Out[2]}),
        .Y({Y[13],Y[29]}));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_5 \Mux_Loop[14].I_MUX_LUT6 
       (.Instr({Instr[14],Instr[30]}),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[32],LOCKSTEP_Master_Out[17],LOCKSTEP_Master_Out[1]}),
        .Y({Y[14],Y[30]}));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_6 \Mux_Loop[15].I_MUX_LUT6 
       (.Instr({Instr[15],Instr[31]}),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[32],LOCKSTEP_Master_Out[16],LOCKSTEP_Master_Out[0]}),
        .Y({Y[15],Y[31]}));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_7 \Mux_Loop[1].I_MUX_LUT6 
       (.Instr({Instr[1],Instr[17]}),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[32],LOCKSTEP_Master_Out[30],LOCKSTEP_Master_Out[14]}),
        .Y({Y[1],Y[17]}));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_8 \Mux_Loop[2].I_MUX_LUT6 
       (.Instr({Instr[2],Instr[18]}),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[32],LOCKSTEP_Master_Out[29],LOCKSTEP_Master_Out[13]}),
        .Y({Y[2],Y[18]}));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_9 \Mux_Loop[3].I_MUX_LUT6 
       (.Instr({Instr[3],Instr[19]}),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[32],LOCKSTEP_Master_Out[28],LOCKSTEP_Master_Out[12]}),
        .Y({Y[3],Y[19]}));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_10 \Mux_Loop[4].I_MUX_LUT6 
       (.Instr({Instr[4],Instr[20]}),
        .Instr_Data(Instr_Data),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[32],LOCKSTEP_Master_Out[27],LOCKSTEP_Master_Out[11]}),
        .\Using_FSL_Links.FSL_Atomic_reg ({Y[0],Y[1],Y[2],Y[3],Y[5],Y[25]}),
        .Y({Y[4],Y[20]}));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_11 \Mux_Loop[5].I_MUX_LUT6 
       (.Instr({Instr[5],Instr[21]}),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[32],LOCKSTEP_Master_Out[26],LOCKSTEP_Master_Out[10]}),
        .Y({Y[5],Y[21]}));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_12 \Mux_Loop[6].I_MUX_LUT6 
       (.Instr({Instr[6],Instr[22]}),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[32],LOCKSTEP_Master_Out[25],LOCKSTEP_Master_Out[9]}),
        .Y({Y[6],Y[22]}));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_13 \Mux_Loop[7].I_MUX_LUT6 
       (.Instr({Instr[7],Instr[23]}),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[32],LOCKSTEP_Master_Out[24],LOCKSTEP_Master_Out[8]}),
        .Y({Y[7],Y[23]}));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_14 \Mux_Loop[8].I_MUX_LUT6 
       (.Instr({Instr[8],Instr[24]}),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[32],LOCKSTEP_Master_Out[23],LOCKSTEP_Master_Out[7]}),
        .Y({Y[8],Y[24]}));
  block_design_microblaze_0_0_MB_LUT6_2__parameterized4_15 \Mux_Loop[9].I_MUX_LUT6 
       (.Instr({Instr[9],Instr[25]}),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[32],LOCKSTEP_Master_Out[22],LOCKSTEP_Master_Out[6]}),
        .Y({Y[9],Y[25]}));
endmodule
`ifndef GLBL
`define GLBL
`timescale  1 ps / 1 ps

module glbl ();

    parameter ROC_WIDTH = 100000;
    parameter TOC_WIDTH = 0;

//--------   STARTUP Globals --------------
    wire GSR;
    wire GTS;
    wire GWE;
    wire PRLD;
    tri1 p_up_tmp;
    tri (weak1, strong0) PLL_LOCKG = p_up_tmp;

    wire PROGB_GLBL;
    wire CCLKO_GLBL;
    wire FCSBO_GLBL;
    wire [3:0] DO_GLBL;
    wire [3:0] DI_GLBL;
   
    reg GSR_int;
    reg GTS_int;
    reg PRLD_int;

//--------   JTAG Globals --------------
    wire JTAG_TDO_GLBL;
    wire JTAG_TCK_GLBL;
    wire JTAG_TDI_GLBL;
    wire JTAG_TMS_GLBL;
    wire JTAG_TRST_GLBL;

    reg JTAG_CAPTURE_GLBL;
    reg JTAG_RESET_GLBL;
    reg JTAG_SHIFT_GLBL;
    reg JTAG_UPDATE_GLBL;
    reg JTAG_RUNTEST_GLBL;

    reg JTAG_SEL1_GLBL = 0;
    reg JTAG_SEL2_GLBL = 0 ;
    reg JTAG_SEL3_GLBL = 0;
    reg JTAG_SEL4_GLBL = 0;

    reg JTAG_USER_TDO1_GLBL = 1'bz;
    reg JTAG_USER_TDO2_GLBL = 1'bz;
    reg JTAG_USER_TDO3_GLBL = 1'bz;
    reg JTAG_USER_TDO4_GLBL = 1'bz;

    assign (strong1, weak0) GSR = GSR_int;
    assign (strong1, weak0) GTS = GTS_int;
    assign (weak1, weak0) PRLD = PRLD_int;

    initial begin
	GSR_int = 1'b1;
	PRLD_int = 1'b1;
	#(ROC_WIDTH)
	GSR_int = 1'b0;
	PRLD_int = 1'b0;
    end

    initial begin
	GTS_int = 1'b1;
	#(TOC_WIDTH)
	GTS_int = 1'b0;
    end

endmodule
`endif
